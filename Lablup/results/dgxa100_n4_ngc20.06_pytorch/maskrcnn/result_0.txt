+ echo 'Beginning trial 2 of 5'
Beginning trial 2 of 5
+ srun --ntasks=4 --container-name=object_detection python -c '
from mlperf_logging.mllog import constants
from maskrcnn_benchmark.utils.mlperf_logger import mlperf_submission_log
mlperf_submission_log(constants.MASKRCNN)'
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
:::MLLOG {"namespace": "", "time_ms": 1592952592712, "event_type": "POINT_IN_TIME", "key": "submission_benchmark", "value": "maskrcnn", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 73}}
:::MLLOG {"namespace": "", "time_ms": 1592952592751, "event_type": "POINT_IN_TIME", "key": "submission_org", "value": "NVIDIA", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 78}}
:::MLLOG {"namespace": "", "time_ms": 1592952592751, "event_type": "POINT_IN_TIME", "key": "submission_division", "value": "closed", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 82}}
:::MLLOG {"namespace": "", "time_ms": 1592952592751, "event_type": "POINT_IN_TIME", "key": "submission_status", "value": "onprem", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 86}}
:::MLLOG {"namespace": "", "time_ms": 1592952592751, "event_type": "POINT_IN_TIME", "key": "submission_platform", "value": "4xNVIDIA DGX A100", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 90}}
+ '[' 1 -eq 1 ']'
+ srun --ntasks=4 bash -c 'echo -n '\''Clearing cache on '\'' && hostname && sync && sudo /sbin/sysctl vm.drop_caches=3'
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
Clearing cache on luna-0207
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
Clearing cache on luna-0206
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
Clearing cache on luna-0208
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
Clearing cache on luna-0205
vm.drop_caches = 3
vm.drop_caches = 3
vm.drop_caches = 3
vm.drop_caches = 3
+ srun --ntasks=4 --container-name=object_detection python -c '
from mlperf_logging.mllog import constants
from maskrcnn_benchmark.utils.mlperf_logger import log_event
log_event(key=constants.CACHE_CLEAR, value=True, stack_offset=1)'
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
:::MLLOG {"namespace": "", "time_ms": 1592952597715, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
:::MLLOG {"namespace": "", "time_ms": 1592952597719, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
:::MLLOG {"namespace": "", "time_ms": 1592952597736, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
:::MLLOG {"namespace": "", "time_ms": 1592952597744, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
+ srun --mpi=none --ntasks=32 --ntasks-per-node=8 --container-name=object_detection --container-mounts=/raid/datasets/coco/coco-2017:/data,/lustre/fsw/mlperf-ci/14126173/results:/results ./run_and_time.sh
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
+ echo 'running benchmark'
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
++ ls /data
++ ls /data
++ ls /data
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ '[' -n 2 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ '[' -n 5 ']'
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ echo 'running benchmark'
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 1 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
coco2017
+ echo coco2017
+ declare -a CMD
+ declare -a CMD
+ '[' -n 3 ']'
+ '[' -n 6 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
++ ls /data
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 4 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 7 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 0 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
coco2017
+ echo coco2017
+ declare -a CMD
+ ln -sTf /data/coco2017 /coco
+ '[' -n 6 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ ln -sTf /data/coco2017 /coco
++ ls /data
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 2 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 4 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
++ ls /data
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
++ ls /data
+ '[' -n 1 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 3 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 0 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 7 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 5 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 3 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
+ echo 'running benchmark'
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
coco2017
+ echo coco2017
+ declare -a CMD
+ ln -sTf /data/coco2017 /coco
++ ls /data
+ '[' -n 6 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
++ ls /data
++ ls /data
++ ls /data
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 5 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ echo coco2017
coco2017
+ declare -a CMD
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 7 ']'
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ '[' -n 2 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ echo coco2017
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ declare -a CMD
+ '[' -n 4 ']'
+ '[' 32 -gt 4 ']'
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 0 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 1 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
+ echo 'running benchmark'
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
++ ls /data
++ ls /data
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
+ echo 'running benchmark'
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ echo coco2017
++ ls /data
coco2017
+ declare -a CMD
+ '[' -n 0 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 3 ']'
+ echo coco2017
coco2017
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ declare -a CMD
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
+ '[' -n 4 ']'
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
++ ls /data
coco2017
+ declare -a CMD
+ '[' -n 6 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ '[' -n 2 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 1 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 03:49:59 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 5 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 7 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
:::MLLOG {"namespace": "", "time_ms": 1592952601323, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601342, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601402, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601396, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601426, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601404, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601470, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601485, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601510, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601536, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601550, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601551, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601579, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601587, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601584, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601600, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601609, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601618, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601619, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601628, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601629, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601630, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601627, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601627, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601632, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601636, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601640, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601641, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601637, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601642, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601642, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952601642, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592952609561, "event_type": "POINT_IN_TIME", "key": "seed", "value": 4269325824, "metadata": {"file": "tools/train_mlperf.py", "lineno": 318}}
2020-06-23 15:50:09,569 maskrcnn_benchmark INFO: Using 32 GPUs
2020-06-23 15:50:09,569 maskrcnn_benchmark INFO: Namespace(config_file='configs/e2e_mask_rcnn_R_50_FPN_1x.yaml', distributed=True, local_rank=0, opts=['DTYPE', 'float16', 'PATHS_CATALOG', 'maskrcnn_benchmark/config/paths_catalog_dbcluster.py', 'MODEL.WEIGHT', '/coco/models/R-50.pkl', 'DISABLE_REDUCED_LOGGING', 'True', 'SOLVER.BASE_LR', '0.16', 'SOLVER.MAX_ITER', '40000', 'SOLVER.WARMUP_FACTOR', '0.000256', 'SOLVER.WARMUP_ITERS', '625', 'SOLVER.WARMUP_METHOD', 'mlperf_linear', 'SOLVER.STEPS', '(9000,12000)', 'SOLVER.IMS_PER_BATCH', '128', 'TEST.IMS_PER_BATCH', '64', 'MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN', '4000', 'NHWC', 'True'], seed=4269325824)
2020-06-23 15:50:09,569 maskrcnn_benchmark INFO: Worker 0: Setting seed 3292565740
2020-06-23 15:50:09,569 maskrcnn_benchmark INFO: Collecting env info (might take some time)
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
2020-06-23 15:50:20,021 maskrcnn_benchmark INFO:
PyTorch version: 1.6.0a0+9907a3e
Is debug build: No
CUDA used to build PyTorch: 11.0

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.14.0

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration:
GPU 0: A100-SXM4-40GB
GPU 1: A100-SXM4-40GB
GPU 2: A100-SXM4-40GB
GPU 3: A100-SXM4-40GB
GPU 4: A100-SXM4-40GB
GPU 5: A100-SXM4-40GB
GPU 6: A100-SXM4-40GB
GPU 7: A100-SXM4-40GB

Nvidia driver version: 450.36.06
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_adv_infer.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_adv_train.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_cnn_infer.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_cnn_train.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_ops_infer.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_ops_train.so.8.0.1

Versions of relevant libraries:
[pip] msgpack-numpy==0.4.3.2
[pip] numpy==1.17.4
[pip] pytorch-transformers==1.1.0
[pip] torch==1.6.0a0+9907a3e
[pip] torchtext==0.6.0
[pip] torchvision==0.7.0a0
[conda] magma-cuda110             2.5.2                         5    local
[conda] mkl                       2019.1                      144
[conda] mkl-include               2019.1                      144
[conda] msgpack-numpy             0.4.3.2                  py36_0
[conda] nomkl                     3.0                           0
[conda] numpy                     1.17.4           py36hd5be1e1_0
[conda] numpy-base                1.17.4           py36h2f8d375_0
[conda] pytorch-transformers      1.1.0                    pypi_0    pypi
[conda] torch                     1.6.0a0+9907a3e          pypi_0    pypi
[conda] torchtext                 0.6.0                    pypi_0    pypi
[conda] torchvision               0.7.0a0                  pypi_0    pypi
        Pillow (7.1.1)
2020-06-23 15:50:20,021 maskrcnn_benchmark INFO: Loaded configuration file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml
2020-06-23 15:50:20,021 maskrcnn_benchmark INFO:
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "catalog://ImageNetPretrained/MSRA/R-50"
  BACKBONE:
    CONV_BODY: "R-50-FPN"
    OUT_CHANNELS: 256
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
  ROI_MASK_HEAD:
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    FEATURE_EXTRACTOR: "MaskRCNNFPNFeatureExtractor"
    PREDICTOR: "MaskRCNNC4Predictor"
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  MASK_ON: True
DATASETS:
  TRAIN: ("coco_2017_train",)
  TEST: ("coco_2017_val",)
DATALOADER:
  SIZE_DIVISIBILITY: 32
SOLVER:
  BASE_LR: 0.02
  WEIGHT_DECAY: 0.0001
  STEPS: (60000, 80000)
  MAX_ITER: 90000

2020-06-23 15:50:20,021 maskrcnn_benchmark INFO: Running with config:
AMP_VERBOSE: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 4
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('coco_2017_val',)
  TRAIN: ('coco_2017_train',)
DISABLE_REDUCED_LOGGING: True
DTYPE: float16
INPUT:
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (800,)
  PIXEL_MEAN: [102.9801, 115.9465, 122.7717]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MLPERF:
  MIN_BBOX_MAP: 0.377
  MIN_SEGM_MAP: 0.339
MODEL:
  BACKBONE:
    CONV_BODY: R-50-FPN
    FREEZE_CONV_BODY_AT: 2
    OUT_CHANNELS: 256
    USE_GN: False
  CLS_AGNOSTIC_BBOX_REG: False
  DEVICE: cuda
  FPN:
    USE_GN: False
    USE_RELU: False
  GROUP_NORM:
    DIM_PER_GP: -1
    EPSILON: 1e-05
    NUM_GROUPS: 32
  KEYPOINT_ON: False
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    NUM_GROUPS: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 64
  RETINANET:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDES: (8, 16, 32, 64, 128)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BBOX_REG_BETA: 0.11
    BBOX_REG_WEIGHT: 4.0
    BG_IOU_THRESHOLD: 0.4
    FG_IOU_THRESHOLD: 0.5
    INFERENCE_TH: 0.05
    LOSS_ALPHA: 0.25
    LOSS_GAMMA: 2.0
    NMS_TH: 0.4
    NUM_CLASSES: 81
    NUM_CONVS: 4
    OCTAVE: 2.0
    PRE_NMS_TOP_N: 1000
    PRIOR_PROB: 0.01
    SCALES_PER_OCTAVE: 3
    STRADDLE_THRESH: 0
    USE_C5: True
  RETINANET_ON: False
  ROI_BOX_HEAD:
    CONV_HEAD_DIM: 256
    DILATION: 1
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 81
    NUM_STACKED_CONVS: 4
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
    USE_GN: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_KEYPOINT_HEAD:
    CONV_LAYERS: (512, 512, 512, 512, 512, 512, 512, 512)
    FEATURE_EXTRACTOR: KeypointRCNNFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_SCALES: (0.0625,)
    PREDICTOR: KeypointRCNNPredictor
    RESOLUTION: 14
    SHARE_BOX_FEATURE_EXTRACTOR: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    DILATION: 1
    FEATURE_EXTRACTOR: MaskRCNNFPNFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
    USE_GN: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 4000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 2000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: /coco/models/R-50.pkl
NHWC: True
OUTPUT_DIR: .
PATHS_CATALOG: maskrcnn_benchmark/config/paths_catalog_dbcluster.py
PER_EPOCH_EVAL: True
SAVE_CHECKPOINTS: False
SOLVER:
  BASE_LR: 0.16
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 2500
  GAMMA: 0.1
  IMS_PER_BATCH: 128
  MAX_ITER: 40000
  MOMENTUM: 0.9
  STEPS: (9000, 12000)
  WARMUP_FACTOR: 0.000256
  WARMUP_ITERS: 625
  WARMUP_METHOD: mlperf_linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  DETECTIONS_PER_IMG: 100
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 64
:::MLLOG {"namespace": "", "time_ms": 1592952620023, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 128, "metadata": {"file": "tools/train_mlperf.py", "lineno": 156}}
:::MLLOG {"namespace": "", "time_ms": 1592952620023, "event_type": "POINT_IN_TIME", "key": "num_image_candidates", "value": 4000, "metadata": {"file": "tools/train_mlperf.py", "lineno": 157}}
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
:::MLLOG {"namespace": "", "time_ms": 1592952625441, "event_type": "POINT_IN_TIME", "key": "opt_name", "value": "sgd_with_momentum", "metadata": {"file": "tools/train_mlperf.py", "lineno": 171}}
:::MLLOG {"namespace": "", "time_ms": 1592952625442, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.16, "metadata": {"file": "tools/train_mlperf.py", "lineno": 172}}
:::MLLOG {"namespace": "", "time_ms": 1592952625442, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 625, "metadata": {"file": "tools/train_mlperf.py", "lineno": 173}}
:::MLLOG {"namespace": "", "time_ms": 1592952625442, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0.000256, "metadata": {"file": "tools/train_mlperf.py", "lineno": 174}}
:::MLLOG {"namespace": "", "time_ms": 1592952625442, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_factor", "value": 0.1, "metadata": {"file": "tools/train_mlperf.py", "lineno": 175}}
:::MLLOG {"namespace": "", "time_ms": 1592952625442, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [9000, 12000], "metadata": {"file": "tools/train_mlperf.py", "lineno": 176}}
:::MLLOG {"namespace": "", "time_ms": 1592952625442, "event_type": "POINT_IN_TIME", "key": "min_image_size", "value": 800, "metadata": {"file": "tools/train_mlperf.py", "lineno": 177}}
:::MLLOG {"namespace": "", "time_ms": 1592952625442, "event_type": "POINT_IN_TIME", "key": "max_image_size", "value": 1333, "metadata": {"file": "tools/train_mlperf.py", "lineno": 178}}
2020-06-23 15:50:25,451 maskrcnn_benchmark.utils.checkpoint INFO: Loading checkpoint from /coco/models/R-50.pkl
2020-06-23 15:50:25,499 maskrcnn_benchmark.utils.c2_model_loading INFO: Remapping C2 weights
2020-06-23 15:50:25,500 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: conv1_b              mapped name: conv1.bias
2020-06-23 15:50:25,500 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: conv1_w              mapped name: conv1.weight
2020-06-23 15:50:25,500 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: fc1000_b             mapped name: fc1000.bias
2020-06-23 15:50:25,500 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: fc1000_w             mapped name: fc1000.weight
2020-06-23 15:50:25,500 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_b     mapped name: layer1.0.downsample.0.bias
2020-06-23 15:50:25,500 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_bn_b  mapped name: layer1.0.downsample.1.bias
2020-06-23 15:50:25,500 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_bn_s  mapped name: layer1.0.downsample.1.weight
2020-06-23 15:50:25,500 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_w     mapped name: layer1.0.downsample.0.weight
2020-06-23 15:50:25,500 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_b    mapped name: layer1.0.conv1.bias
2020-06-23 15:50:25,500 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_bn_b mapped name: layer1.0.bn1.bias
2020-06-23 15:50:25,500 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_bn_s mapped name: layer1.0.bn1.weight
2020-06-23 15:50:25,500 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_w    mapped name: layer1.0.conv1.weight
2020-06-23 15:50:25,500 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_b    mapped name: layer1.0.conv2.bias
2020-06-23 15:50:25,500 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_bn_b mapped name: layer1.0.bn2.bias
2020-06-23 15:50:25,500 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_bn_s mapped name: layer1.0.bn2.weight
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_w    mapped name: layer1.0.conv2.weight
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_b    mapped name: layer1.0.conv3.bias
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_bn_b mapped name: layer1.0.bn3.bias
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_bn_s mapped name: layer1.0.bn3.weight
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_w    mapped name: layer1.0.conv3.weight
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_b    mapped name: layer1.1.conv1.bias
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_bn_b mapped name: layer1.1.bn1.bias
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_bn_s mapped name: layer1.1.bn1.weight
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_w    mapped name: layer1.1.conv1.weight
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_b    mapped name: layer1.1.conv2.bias
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_bn_b mapped name: layer1.1.bn2.bias
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_bn_s mapped name: layer1.1.bn2.weight
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_w    mapped name: layer1.1.conv2.weight
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_b    mapped name: layer1.1.conv3.bias
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_bn_b mapped name: layer1.1.bn3.bias
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_bn_s mapped name: layer1.1.bn3.weight
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_w    mapped name: layer1.1.conv3.weight
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_b    mapped name: layer1.2.conv1.bias
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_bn_b mapped name: layer1.2.bn1.bias
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_bn_s mapped name: layer1.2.bn1.weight
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_w    mapped name: layer1.2.conv1.weight
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_b    mapped name: layer1.2.conv2.bias
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_bn_b mapped name: layer1.2.bn2.bias
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_bn_s mapped name: layer1.2.bn2.weight
2020-06-23 15:50:25,501 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_w    mapped name: layer1.2.conv2.weight
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_b    mapped name: layer1.2.conv3.bias
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_bn_b mapped name: layer1.2.bn3.bias
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_bn_s mapped name: layer1.2.bn3.weight
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_w    mapped name: layer1.2.conv3.weight
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_b     mapped name: layer2.0.downsample.0.bias
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_bn_b  mapped name: layer2.0.downsample.1.bias
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_bn_s  mapped name: layer2.0.downsample.1.weight
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_w     mapped name: layer2.0.downsample.0.weight
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_b    mapped name: layer2.0.conv1.bias
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_bn_b mapped name: layer2.0.bn1.bias
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_bn_s mapped name: layer2.0.bn1.weight
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_w    mapped name: layer2.0.conv1.weight
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_b    mapped name: layer2.0.conv2.bias
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_bn_b mapped name: layer2.0.bn2.bias
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_bn_s mapped name: layer2.0.bn2.weight
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_w    mapped name: layer2.0.conv2.weight
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_b    mapped name: layer2.0.conv3.bias
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_bn_b mapped name: layer2.0.bn3.bias
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_bn_s mapped name: layer2.0.bn3.weight
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_w    mapped name: layer2.0.conv3.weight
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_b    mapped name: layer2.1.conv1.bias
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_bn_b mapped name: layer2.1.bn1.bias
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_bn_s mapped name: layer2.1.bn1.weight
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_w    mapped name: layer2.1.conv1.weight
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_b    mapped name: layer2.1.conv2.bias
2020-06-23 15:50:25,502 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_bn_b mapped name: layer2.1.bn2.bias
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_bn_s mapped name: layer2.1.bn2.weight
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_w    mapped name: layer2.1.conv2.weight
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_b    mapped name: layer2.1.conv3.bias
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_bn_b mapped name: layer2.1.bn3.bias
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_bn_s mapped name: layer2.1.bn3.weight
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_w    mapped name: layer2.1.conv3.weight
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_b    mapped name: layer2.2.conv1.bias
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_bn_b mapped name: layer2.2.bn1.bias
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_bn_s mapped name: layer2.2.bn1.weight
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_w    mapped name: layer2.2.conv1.weight
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_b    mapped name: layer2.2.conv2.bias
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_bn_b mapped name: layer2.2.bn2.bias
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_bn_s mapped name: layer2.2.bn2.weight
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_w    mapped name: layer2.2.conv2.weight
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_b    mapped name: layer2.2.conv3.bias
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_bn_b mapped name: layer2.2.bn3.bias
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_bn_s mapped name: layer2.2.bn3.weight
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_w    mapped name: layer2.2.conv3.weight
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_b    mapped name: layer2.3.conv1.bias
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_bn_b mapped name: layer2.3.bn1.bias
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_bn_s mapped name: layer2.3.bn1.weight
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_w    mapped name: layer2.3.conv1.weight
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_b    mapped name: layer2.3.conv2.bias
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_bn_b mapped name: layer2.3.bn2.bias
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_bn_s mapped name: layer2.3.bn2.weight
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_w    mapped name: layer2.3.conv2.weight
2020-06-23 15:50:25,503 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_b    mapped name: layer2.3.conv3.bias
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_bn_b mapped name: layer2.3.bn3.bias
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_bn_s mapped name: layer2.3.bn3.weight
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_w    mapped name: layer2.3.conv3.weight
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_b     mapped name: layer3.0.downsample.0.bias
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_bn_b  mapped name: layer3.0.downsample.1.bias
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_bn_s  mapped name: layer3.0.downsample.1.weight
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_w     mapped name: layer3.0.downsample.0.weight
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_b    mapped name: layer3.0.conv1.bias
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_bn_b mapped name: layer3.0.bn1.bias
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_bn_s mapped name: layer3.0.bn1.weight
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_w    mapped name: layer3.0.conv1.weight
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_b    mapped name: layer3.0.conv2.bias
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_bn_b mapped name: layer3.0.bn2.bias
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_bn_s mapped name: layer3.0.bn2.weight
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_w    mapped name: layer3.0.conv2.weight
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_b    mapped name: layer3.0.conv3.bias
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_bn_b mapped name: layer3.0.bn3.bias
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_bn_s mapped name: layer3.0.bn3.weight
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_w    mapped name: layer3.0.conv3.weight
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_b    mapped name: layer3.1.conv1.bias
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_bn_b mapped name: layer3.1.bn1.bias
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_bn_s mapped name: layer3.1.bn1.weight
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_w    mapped name: layer3.1.conv1.weight
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_b    mapped name: layer3.1.conv2.bias
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_bn_b mapped name: layer3.1.bn2.bias
2020-06-23 15:50:25,504 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_bn_s mapped name: layer3.1.bn2.weight
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_w    mapped name: layer3.1.conv2.weight
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_b    mapped name: layer3.1.conv3.bias
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_bn_b mapped name: layer3.1.bn3.bias
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_bn_s mapped name: layer3.1.bn3.weight
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_w    mapped name: layer3.1.conv3.weight
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_b    mapped name: layer3.2.conv1.bias
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_bn_b mapped name: layer3.2.bn1.bias
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_bn_s mapped name: layer3.2.bn1.weight
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_w    mapped name: layer3.2.conv1.weight
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_b    mapped name: layer3.2.conv2.bias
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_bn_b mapped name: layer3.2.bn2.bias
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_bn_s mapped name: layer3.2.bn2.weight
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_w    mapped name: layer3.2.conv2.weight
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_b    mapped name: layer3.2.conv3.bias
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_bn_b mapped name: layer3.2.bn3.bias
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_bn_s mapped name: layer3.2.bn3.weight
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_w    mapped name: layer3.2.conv3.weight
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_b    mapped name: layer3.3.conv1.bias
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_bn_b mapped name: layer3.3.bn1.bias
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_bn_s mapped name: layer3.3.bn1.weight
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_w    mapped name: layer3.3.conv1.weight
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_b    mapped name: layer3.3.conv2.bias
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_bn_b mapped name: layer3.3.bn2.bias
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_bn_s mapped name: layer3.3.bn2.weight
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_w    mapped name: layer3.3.conv2.weight
2020-06-23 15:50:25,505 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_b    mapped name: layer3.3.conv3.bias
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_bn_b mapped name: layer3.3.bn3.bias
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_bn_s mapped name: layer3.3.bn3.weight
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_w    mapped name: layer3.3.conv3.weight
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_b    mapped name: layer3.4.conv1.bias
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_bn_b mapped name: layer3.4.bn1.bias
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_bn_s mapped name: layer3.4.bn1.weight
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_w    mapped name: layer3.4.conv1.weight
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_b    mapped name: layer3.4.conv2.bias
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_bn_b mapped name: layer3.4.bn2.bias
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_bn_s mapped name: layer3.4.bn2.weight
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_w    mapped name: layer3.4.conv2.weight
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_b    mapped name: layer3.4.conv3.bias
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_bn_b mapped name: layer3.4.bn3.bias
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_bn_s mapped name: layer3.4.bn3.weight
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_w    mapped name: layer3.4.conv3.weight
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_b    mapped name: layer3.5.conv1.bias
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_bn_b mapped name: layer3.5.bn1.bias
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_bn_s mapped name: layer3.5.bn1.weight
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_w    mapped name: layer3.5.conv1.weight
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_b    mapped name: layer3.5.conv2.bias
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_bn_b mapped name: layer3.5.bn2.bias
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_bn_s mapped name: layer3.5.bn2.weight
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_w    mapped name: layer3.5.conv2.weight
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_b    mapped name: layer3.5.conv3.bias
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_bn_b mapped name: layer3.5.bn3.bias
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_bn_s mapped name: layer3.5.bn3.weight
2020-06-23 15:50:25,506 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_w    mapped name: layer3.5.conv3.weight
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_b     mapped name: layer4.0.downsample.0.bias
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_bn_b  mapped name: layer4.0.downsample.1.bias
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_bn_s  mapped name: layer4.0.downsample.1.weight
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_w     mapped name: layer4.0.downsample.0.weight
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_b    mapped name: layer4.0.conv1.bias
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_bn_b mapped name: layer4.0.bn1.bias
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_bn_s mapped name: layer4.0.bn1.weight
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_w    mapped name: layer4.0.conv1.weight
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_b    mapped name: layer4.0.conv2.bias
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_bn_b mapped name: layer4.0.bn2.bias
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_bn_s mapped name: layer4.0.bn2.weight
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_w    mapped name: layer4.0.conv2.weight
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_b    mapped name: layer4.0.conv3.bias
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_bn_b mapped name: layer4.0.bn3.bias
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_bn_s mapped name: layer4.0.bn3.weight
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_w    mapped name: layer4.0.conv3.weight
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_b    mapped name: layer4.1.conv1.bias
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_bn_b mapped name: layer4.1.bn1.bias
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_bn_s mapped name: layer4.1.bn1.weight
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_w    mapped name: layer4.1.conv1.weight
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_b    mapped name: layer4.1.conv2.bias
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_bn_b mapped name: layer4.1.bn2.bias
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_bn_s mapped name: layer4.1.bn2.weight
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_w    mapped name: layer4.1.conv2.weight
2020-06-23 15:50:25,507 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_b    mapped name: layer4.1.conv3.bias
2020-06-23 15:50:25,508 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_bn_b mapped name: layer4.1.bn3.bias
2020-06-23 15:50:25,508 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_bn_s mapped name: layer4.1.bn3.weight
2020-06-23 15:50:25,508 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_w    mapped name: layer4.1.conv3.weight
2020-06-23 15:50:25,508 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_b    mapped name: layer4.2.conv1.bias
2020-06-23 15:50:25,508 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_bn_b mapped name: layer4.2.bn1.bias
2020-06-23 15:50:25,508 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_bn_s mapped name: layer4.2.bn1.weight
2020-06-23 15:50:25,508 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_w    mapped name: layer4.2.conv1.weight
2020-06-23 15:50:25,508 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_b    mapped name: layer4.2.conv2.bias
2020-06-23 15:50:25,508 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_bn_b mapped name: layer4.2.bn2.bias
2020-06-23 15:50:25,508 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_bn_s mapped name: layer4.2.bn2.weight
2020-06-23 15:50:25,508 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_w    mapped name: layer4.2.conv2.weight
2020-06-23 15:50:25,508 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_b    mapped name: layer4.2.conv3.bias
2020-06-23 15:50:25,508 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_bn_b mapped name: layer4.2.bn3.bias
2020-06-23 15:50:25,508 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_bn_s mapped name: layer4.2.bn3.weight
2020-06-23 15:50:25,508 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_w    mapped name: layer4.2.conv3.weight
2020-06-23 15:50:25,508 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res_conv1_bn_b       mapped name: bn1.bias
2020-06-23 15:50:25,508 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res_conv1_bn_s       mapped name: bn1.weight
2020-06-23 15:50:25,521 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn1.bias                   loaded from layer1.0.bn1.bias            of shape (64,)
2020-06-23 15:50:25,521 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn1.weight                 loaded from layer1.0.bn1.weight          of shape (64,)
2020-06-23 15:50:25,521 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn2.bias                   loaded from layer1.0.bn2.bias            of shape (64,)
2020-06-23 15:50:25,521 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn2.weight                 loaded from layer1.0.bn2.weight          of shape (64,)
2020-06-23 15:50:25,521 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn3.bias                   loaded from layer1.0.bn3.bias            of shape (256,)
2020-06-23 15:50:25,521 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn3.weight                 loaded from layer1.0.bn3.weight          of shape (256,)
2020-06-23 15:50:25,521 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.conv1.weight               loaded from layer1.0.conv1.weight        of shape (64, 64, 1, 1)
2020-06-23 15:50:25,521 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.conv2.weight               loaded from layer1.0.conv2.weight        of shape (64, 64, 3, 3)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.conv3.weight               loaded from layer1.0.conv3.weight        of shape (256, 64, 1, 1)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.downsample.0.weight        loaded from layer1.0.downsample.0.weight of shape (256, 64, 1, 1)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.downsample.1.bias          loaded from layer1.0.downsample.1.bias   of shape (256,)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.downsample.1.weight        loaded from layer1.0.downsample.1.weight of shape (256,)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn1.bias                   loaded from layer1.1.bn1.bias            of shape (64,)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn1.weight                 loaded from layer1.1.bn1.weight          of shape (64,)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn2.bias                   loaded from layer1.1.bn2.bias            of shape (64,)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn2.weight                 loaded from layer1.1.bn2.weight          of shape (64,)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn3.bias                   loaded from layer1.1.bn3.bias            of shape (256,)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn3.weight                 loaded from layer1.1.bn3.weight          of shape (256,)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.conv1.weight               loaded from layer1.1.conv1.weight        of shape (64, 256, 1, 1)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.conv2.weight               loaded from layer1.1.conv2.weight        of shape (64, 64, 3, 3)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.conv3.weight               loaded from layer1.1.conv3.weight        of shape (256, 64, 1, 1)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn1.bias                   loaded from layer1.2.bn1.bias            of shape (64,)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn1.weight                 loaded from layer1.2.bn1.weight          of shape (64,)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn2.bias                   loaded from layer1.2.bn2.bias            of shape (64,)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn2.weight                 loaded from layer1.2.bn2.weight          of shape (64,)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn3.bias                   loaded from layer1.2.bn3.bias            of shape (256,)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn3.weight                 loaded from layer1.2.bn3.weight          of shape (256,)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.conv1.weight               loaded from layer1.2.conv1.weight        of shape (64, 256, 1, 1)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.conv2.weight               loaded from layer1.2.conv2.weight        of shape (64, 64, 3, 3)
2020-06-23 15:50:25,522 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.conv3.weight               loaded from layer1.2.conv3.weight        of shape (256, 64, 1, 1)
2020-06-23 15:50:25,523 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn1.bias                   loaded from layer2.0.bn1.bias            of shape (128,)
2020-06-23 15:50:25,523 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn1.weight                 loaded from layer2.0.bn1.weight          of shape (128,)
2020-06-23 15:50:25,523 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn2.bias                   loaded from layer2.0.bn2.bias            of shape (128,)
2020-06-23 15:50:25,523 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn2.weight                 loaded from layer2.0.bn2.weight          of shape (128,)
2020-06-23 15:50:25,523 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn3.bias                   loaded from layer2.0.bn3.bias            of shape (512,)
2020-06-23 15:50:25,523 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn3.weight                 loaded from layer2.0.bn3.weight          of shape (512,)
2020-06-23 15:50:25,523 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.conv1.weight               loaded from layer2.0.conv1.weight        of shape (128, 256, 1, 1)
2020-06-23 15:50:25,523 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.conv2.weight               loaded from layer2.0.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 15:50:25,523 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.conv3.weight               loaded from layer2.0.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 15:50:25,523 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.downsample.0.weight        loaded from layer2.0.downsample.0.weight of shape (512, 256, 1, 1)
2020-06-23 15:50:25,523 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.downsample.1.bias          loaded from layer2.0.downsample.1.bias   of shape (512,)
2020-06-23 15:50:25,523 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.downsample.1.weight        loaded from layer2.0.downsample.1.weight of shape (512,)
2020-06-23 15:50:25,523 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn1.bias                   loaded from layer2.1.bn1.bias            of shape (128,)
2020-06-23 15:50:25,523 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn1.weight                 loaded from layer2.1.bn1.weight          of shape (128,)
2020-06-23 15:50:25,523 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn2.bias                   loaded from layer2.1.bn2.bias            of shape (128,)
2020-06-23 15:50:25,523 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn2.weight                 loaded from layer2.1.bn2.weight          of shape (128,)
2020-06-23 15:50:25,523 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn3.bias                   loaded from layer2.1.bn3.bias            of shape (512,)
2020-06-23 15:50:25,523 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn3.weight                 loaded from layer2.1.bn3.weight          of shape (512,)
2020-06-23 15:50:25,523 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.conv1.weight               loaded from layer2.1.conv1.weight        of shape (128, 512, 1, 1)
2020-06-23 15:50:25,524 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.conv2.weight               loaded from layer2.1.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 15:50:25,524 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.conv3.weight               loaded from layer2.1.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 15:50:25,524 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn1.bias                   loaded from layer2.2.bn1.bias            of shape (128,)
2020-06-23 15:50:25,524 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn1.weight                 loaded from layer2.2.bn1.weight          of shape (128,)
2020-06-23 15:50:25,524 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn2.bias                   loaded from layer2.2.bn2.bias            of shape (128,)
2020-06-23 15:50:25,524 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn2.weight                 loaded from layer2.2.bn2.weight          of shape (128,)
2020-06-23 15:50:25,524 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn3.bias                   loaded from layer2.2.bn3.bias            of shape (512,)
2020-06-23 15:50:25,524 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn3.weight                 loaded from layer2.2.bn3.weight          of shape (512,)
2020-06-23 15:50:25,524 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.conv1.weight               loaded from layer2.2.conv1.weight        of shape (128, 512, 1, 1)
2020-06-23 15:50:25,524 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.conv2.weight               loaded from layer2.2.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 15:50:25,524 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.conv3.weight               loaded from layer2.2.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 15:50:25,524 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn1.bias                   loaded from layer2.3.bn1.bias            of shape (128,)
2020-06-23 15:50:25,524 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn1.weight                 loaded from layer2.3.bn1.weight          of shape (128,)
2020-06-23 15:50:25,524 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn2.bias                   loaded from layer2.3.bn2.bias            of shape (128,)
2020-06-23 15:50:25,524 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn2.weight                 loaded from layer2.3.bn2.weight          of shape (128,)
2020-06-23 15:50:25,524 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn3.bias                   loaded from layer2.3.bn3.bias            of shape (512,)
2020-06-23 15:50:25,524 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn3.weight                 loaded from layer2.3.bn3.weight          of shape (512,)
2020-06-23 15:50:25,524 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.conv1.weight               loaded from layer2.3.conv1.weight        of shape (128, 512, 1, 1)
2020-06-23 15:50:25,525 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.conv2.weight               loaded from layer2.3.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 15:50:25,525 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.conv3.weight               loaded from layer2.3.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 15:50:25,525 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn1.bias                   loaded from layer3.0.bn1.bias            of shape (256,)
2020-06-23 15:50:25,525 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn1.weight                 loaded from layer3.0.bn1.weight          of shape (256,)
2020-06-23 15:50:25,525 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn2.bias                   loaded from layer3.0.bn2.bias            of shape (256,)
2020-06-23 15:50:25,525 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn2.weight                 loaded from layer3.0.bn2.weight          of shape (256,)
2020-06-23 15:50:25,525 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn3.bias                   loaded from layer3.0.bn3.bias            of shape (1024,)
2020-06-23 15:50:25,525 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn3.weight                 loaded from layer3.0.bn3.weight          of shape (1024,)
2020-06-23 15:50:25,525 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.conv1.weight               loaded from layer3.0.conv1.weight        of shape (256, 512, 1, 1)
2020-06-23 15:50:25,525 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.conv2.weight               loaded from layer3.0.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 15:50:25,525 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.conv3.weight               loaded from layer3.0.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 15:50:25,525 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.downsample.0.weight        loaded from layer3.0.downsample.0.weight of shape (1024, 512, 1, 1)
2020-06-23 15:50:25,525 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.downsample.1.bias          loaded from layer3.0.downsample.1.bias   of shape (1024,)
2020-06-23 15:50:25,526 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.downsample.1.weight        loaded from layer3.0.downsample.1.weight of shape (1024,)
2020-06-23 15:50:25,526 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn1.bias                   loaded from layer3.1.bn1.bias            of shape (256,)
2020-06-23 15:50:25,526 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn1.weight                 loaded from layer3.1.bn1.weight          of shape (256,)
2020-06-23 15:50:25,526 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn2.bias                   loaded from layer3.1.bn2.bias            of shape (256,)
2020-06-23 15:50:25,526 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn2.weight                 loaded from layer3.1.bn2.weight          of shape (256,)
2020-06-23 15:50:25,526 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn3.bias                   loaded from layer3.1.bn3.bias            of shape (1024,)
2020-06-23 15:50:25,526 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn3.weight                 loaded from layer3.1.bn3.weight          of shape (1024,)
2020-06-23 15:50:25,526 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.conv1.weight               loaded from layer3.1.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 15:50:25,526 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.conv2.weight               loaded from layer3.1.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 15:50:25,526 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.conv3.weight               loaded from layer3.1.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 15:50:25,526 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn1.bias                   loaded from layer3.2.bn1.bias            of shape (256,)
2020-06-23 15:50:25,526 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn1.weight                 loaded from layer3.2.bn1.weight          of shape (256,)
2020-06-23 15:50:25,526 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn2.bias                   loaded from layer3.2.bn2.bias            of shape (256,)
2020-06-23 15:50:25,526 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn2.weight                 loaded from layer3.2.bn2.weight          of shape (256,)
2020-06-23 15:50:25,527 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn3.bias                   loaded from layer3.2.bn3.bias            of shape (1024,)
2020-06-23 15:50:25,527 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn3.weight                 loaded from layer3.2.bn3.weight          of shape (1024,)
2020-06-23 15:50:25,527 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.conv1.weight               loaded from layer3.2.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 15:50:25,527 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.conv2.weight               loaded from layer3.2.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 15:50:25,527 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.conv3.weight               loaded from layer3.2.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 15:50:25,527 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn1.bias                   loaded from layer3.3.bn1.bias            of shape (256,)
2020-06-23 15:50:25,527 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn1.weight                 loaded from layer3.3.bn1.weight          of shape (256,)
2020-06-23 15:50:25,527 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn2.bias                   loaded from layer3.3.bn2.bias            of shape (256,)
2020-06-23 15:50:25,527 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn2.weight                 loaded from layer3.3.bn2.weight          of shape (256,)
2020-06-23 15:50:25,527 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn3.bias                   loaded from layer3.3.bn3.bias            of shape (1024,)
2020-06-23 15:50:25,527 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn3.weight                 loaded from layer3.3.bn3.weight          of shape (1024,)
2020-06-23 15:50:25,527 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.conv1.weight               loaded from layer3.3.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 15:50:25,528 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.conv2.weight               loaded from layer3.3.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 15:50:25,528 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.conv3.weight               loaded from layer3.3.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 15:50:25,528 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn1.bias                   loaded from layer3.4.bn1.bias            of shape (256,)
2020-06-23 15:50:25,528 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn1.weight                 loaded from layer3.4.bn1.weight          of shape (256,)
2020-06-23 15:50:25,528 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn2.bias                   loaded from layer3.4.bn2.bias            of shape (256,)
2020-06-23 15:50:25,528 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn2.weight                 loaded from layer3.4.bn2.weight          of shape (256,)
2020-06-23 15:50:25,528 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn3.bias                   loaded from layer3.4.bn3.bias            of shape (1024,)
2020-06-23 15:50:25,528 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn3.weight                 loaded from layer3.4.bn3.weight          of shape (1024,)
2020-06-23 15:50:25,528 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.conv1.weight               loaded from layer3.4.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 15:50:25,529 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.conv2.weight               loaded from layer3.4.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 15:50:25,529 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.conv3.weight               loaded from layer3.4.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 15:50:25,529 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn1.bias                   loaded from layer3.5.bn1.bias            of shape (256,)
2020-06-23 15:50:25,529 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn1.weight                 loaded from layer3.5.bn1.weight          of shape (256,)
2020-06-23 15:50:25,529 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn2.bias                   loaded from layer3.5.bn2.bias            of shape (256,)
2020-06-23 15:50:25,529 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn2.weight                 loaded from layer3.5.bn2.weight          of shape (256,)
2020-06-23 15:50:25,529 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn3.bias                   loaded from layer3.5.bn3.bias            of shape (1024,)
2020-06-23 15:50:25,529 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn3.weight                 loaded from layer3.5.bn3.weight          of shape (1024,)
2020-06-23 15:50:25,529 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.conv1.weight               loaded from layer3.5.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 15:50:25,529 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.conv2.weight               loaded from layer3.5.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 15:50:25,530 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.conv3.weight               loaded from layer3.5.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 15:50:25,530 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn1.bias                   loaded from layer4.0.bn1.bias            of shape (512,)
2020-06-23 15:50:25,530 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn1.weight                 loaded from layer4.0.bn1.weight          of shape (512,)
2020-06-23 15:50:25,530 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn2.bias                   loaded from layer4.0.bn2.bias            of shape (512,)
2020-06-23 15:50:25,530 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn2.weight                 loaded from layer4.0.bn2.weight          of shape (512,)
2020-06-23 15:50:25,530 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn3.bias                   loaded from layer4.0.bn3.bias            of shape (2048,)
2020-06-23 15:50:25,530 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn3.weight                 loaded from layer4.0.bn3.weight          of shape (2048,)
2020-06-23 15:50:25,530 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.conv1.weight               loaded from layer4.0.conv1.weight        of shape (512, 1024, 1, 1)
2020-06-23 15:50:25,532 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.conv2.weight               loaded from layer4.0.conv2.weight        of shape (512, 512, 3, 3)
2020-06-23 15:50:25,532 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.conv3.weight               loaded from layer4.0.conv3.weight        of shape (2048, 512, 1, 1)
2020-06-23 15:50:25,532 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.downsample.0.weight        loaded from layer4.0.downsample.0.weight of shape (2048, 1024, 1, 1)
2020-06-23 15:50:25,532 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.downsample.1.bias          loaded from layer4.0.downsample.1.bias   of shape (2048,)
2020-06-23 15:50:25,532 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.downsample.1.weight        loaded from layer4.0.downsample.1.weight of shape (2048,)
2020-06-23 15:50:25,532 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn1.bias                   loaded from layer4.1.bn1.bias            of shape (512,)
2020-06-23 15:50:25,532 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn1.weight                 loaded from layer4.1.bn1.weight          of shape (512,)
2020-06-23 15:50:25,532 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn2.bias                   loaded from layer4.1.bn2.bias            of shape (512,)
2020-06-23 15:50:25,532 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn2.weight                 loaded from layer4.1.bn2.weight          of shape (512,)
2020-06-23 15:50:25,532 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn3.bias                   loaded from layer4.1.bn3.bias            of shape (2048,)
2020-06-23 15:50:25,532 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn3.weight                 loaded from layer4.1.bn3.weight          of shape (2048,)
2020-06-23 15:50:25,532 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.conv1.weight               loaded from layer4.1.conv1.weight        of shape (512, 2048, 1, 1)
2020-06-23 15:50:25,536 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.conv2.weight               loaded from layer4.1.conv2.weight        of shape (512, 512, 3, 3)
2020-06-23 15:50:25,536 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.conv3.weight               loaded from layer4.1.conv3.weight        of shape (2048, 512, 1, 1)
2020-06-23 15:50:25,536 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn1.bias                   loaded from layer4.2.bn1.bias            of shape (512,)
2020-06-23 15:50:25,536 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn1.weight                 loaded from layer4.2.bn1.weight          of shape (512,)
2020-06-23 15:50:25,536 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn2.bias                   loaded from layer4.2.bn2.bias            of shape (512,)
2020-06-23 15:50:25,536 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn2.weight                 loaded from layer4.2.bn2.weight          of shape (512,)
2020-06-23 15:50:25,536 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn3.bias                   loaded from layer4.2.bn3.bias            of shape (2048,)
2020-06-23 15:50:25,536 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn3.weight                 loaded from layer4.2.bn3.weight          of shape (2048,)
2020-06-23 15:50:25,536 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.conv1.weight               loaded from layer4.2.conv1.weight        of shape (512, 2048, 1, 1)
2020-06-23 15:50:25,540 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.conv2.weight               loaded from layer4.2.conv2.weight        of shape (512, 512, 3, 3)
2020-06-23 15:50:25,540 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.conv3.weight               loaded from layer4.2.conv3.weight        of shape (2048, 512, 1, 1)
2020-06-23 15:50:25,540 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.stem.bn1.bias                       loaded from bn1.bias                     of shape (64,)
2020-06-23 15:50:25,540 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.stem.bn1.weight                     loaded from bn1.weight                   of shape (64,)
2020-06-23 15:50:25,540 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.stem.conv1.weight                   loaded from conv1.weight                 of shape (64, 3, 7, 7)
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
:::MLLOG {"namespace": "", "time_ms": 1592952628017, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 205}}
:::MLLOG {"namespace": "", "time_ms": 1592952628176, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 207}}
2020-06-23 15:50:28,177 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
Done (t=6.82s)
creating index...
Done (t=6.83s)
creating index...
Done (t=6.86s)
creating index...
Done (t=6.87s)
creating index...
Done (t=6.88s)
creating index...
Done (t=6.90s)
creating index...
Done (t=6.91s)
creating index...
Done (t=6.92s)
creating index...
Done (t=6.94s)
creating index...
Done (t=6.95s)
creating index...
Done (t=6.96s)
creating index...
Done (t=6.97s)
creating index...
Done (t=6.98s)
creating index...
Done (t=6.99s)
creating index...
Done (t=7.01s)
creating index...
Done (t=7.04s)
creating index...
Done (t=7.04s)
creating index...
Done (t=7.04s)
creating index...
Done (t=7.07s)
creating index...
Done (t=7.12s)
creating index...
Done (t=7.12s)
creating index...
Done (t=7.22s)
creating index...
Done (t=7.25s)
creating index...
Done (t=7.28s)
creating index...
Done (t=7.27s)
creating index...
Done (t=7.28s)
creating index...
Done (t=7.31s)
creating index...
Done (t=7.31s)
creating index...
index created!
index created!
Done (t=7.35s)
creating index...
index created!
index created!
index created!
index created!
Done (t=7.41s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=7.48s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=7.57s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
:::MLLOG {"namespace": "", "time_ms": 1592952637705, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 40000, "metadata": {"file": "tools/train_mlperf.py", "lineno": 217}}
2020-06-23 15:50:37,706 maskrcnn_benchmark.trainer INFO: Start training
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
:::MLLOG {"namespace": "", "time_ms": 1592952639593, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 130, "first_epoch_num": 1, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592952639594, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 131, "epoch_num": 1}}
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0

Grad overflow on iteration  0
Using dynamic loss scale of  65536
Using dynamic loss scale of  65536


Grad overflow on iteration  0


Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Grad overflow on iteration  0
Using dynamic loss scale of  65536
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0

Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536
Using dynamic loss scale of  65536

Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0

Grad overflow on iteration  0
Using dynamic loss scale of  65536


Grad overflow on iteration  0
Using dynamic loss scale of  65536
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0


Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0


Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1


Grad overflow on iteration  1
Using dynamic loss scale of  32768.0


Grad overflow on iteration  1
Using dynamic loss scale of  32768.0


Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1

Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0


Grad overflow on iteration  1
Grad overflow on iteration  1
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0


Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2

Using dynamic loss scale of  16384.0
Grad overflow on iteration  2

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0


Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0


Grad overflow on iteration  3

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Using dynamic loss scale of  8192.0
Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3

Grad overflow on iteration  3

Grad overflow on iteration  3


Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0


Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4

Grad overflow on iteration  4

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0


Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Grad overflow on iteration  4

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0


Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4

Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0


Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Grad overflow on iteration  4


Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0
Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  5

Grad overflow on iteration  5

Grad overflow on iteration  5

Using dynamic loss scale of  2048.0
Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0


Grad overflow on iteration  5
Grad overflow on iteration  5
Using dynamic loss scale of  2048.0


Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Grad overflow on iteration  5
Using dynamic loss scale of  2048.0



Grad overflow on iteration  5

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Grad overflow on iteration  5

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Using dynamic loss scale of  2048.0
Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6


Grad overflow on iteration  6

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0
Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6


Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Grad overflow on iteration  6

Grad overflow on iteration  6

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0


Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0


Grad overflow on iteration  6
Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Using dynamic loss scale of  1024.0
Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0


Grad overflow on iteration  7
Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0
Using dynamic loss scale of  512.0
Using dynamic loss scale of  512.0


Grad overflow on iteration  7
Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7

Grad overflow on iteration  7
Using dynamic loss scale of  512.0
Using dynamic loss scale of  512.0
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7

Grad overflow on iteration  7

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7

Grad overflow on iteration  7
Using dynamic loss scale of  512.0
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0
2020-06-23 15:50:45,777 maskrcnn_benchmark.trainer INFO: eta: 4:28:50  iter: 20  loss: 2.2013 (3.6652)  loss_classifier: 1.0054 (2.0589)  loss_box_reg: 0.0128 (0.0164)  loss_mask: 0.9416 (1.0639)  loss_objectness: 0.5880 (0.4920)  loss_rpn_box_reg: 0.0238 (0.0340)  time: 0.1066 (0.4035)  data: 0.0013 (0.0956)  lr: 0.005120  max mem: 4122
2020-06-23 15:50:47,882 maskrcnn_benchmark.trainer INFO: eta: 2:49:24  iter: 40  loss: 1.3045 (2.5102)  loss_classifier: 0.3357 (1.2126)  loss_box_reg: 0.0654 (0.0440)  loss_mask: 0.6835 (0.8752)  loss_objectness: 0.1332 (0.3358)  loss_rpn_box_reg: 0.0165 (0.0427)  time: 0.1045 (0.2544)  data: 0.0015 (0.0486)  lr: 0.010240  max mem: 4338
2020-06-23 15:50:49,945 maskrcnn_benchmark.trainer INFO: eta: 2:15:45  iter: 60  loss: 1.1669 (2.1044)  loss_classifier: 0.3029 (0.9317)  loss_box_reg: 0.0807 (0.0612)  loss_mask: 0.6670 (0.8061)  loss_objectness: 0.0950 (0.2678)  loss_rpn_box_reg: 0.0164 (0.0375)  time: 0.1028 (0.2040)  data: 0.0013 (0.0328)  lr: 0.015360  max mem: 4376
2020-06-23 15:50:51,997 maskrcnn_benchmark.trainer INFO: eta: 1:58:50  iter: 80  loss: 1.2196 (1.8837)  loss_classifier: 0.3083 (0.7803)  loss_box_reg: 0.0621 (0.0647)  loss_mask: 0.6541 (0.7680)  loss_objectness: 0.1201 (0.2352)  loss_rpn_box_reg: 0.0196 (0.0355)  time: 0.1024 (0.1786)  data: 0.0015 (0.0250)  lr: 0.020480  max mem: 4443
2020-06-23 15:50:54,043 maskrcnn_benchmark.trainer INFO: eta: 1:48:37  iter: 100  loss: 1.0817 (1.7356)  loss_classifier: 0.2591 (0.6844)  loss_box_reg: 0.0699 (0.0684)  loss_mask: 0.6095 (0.7387)  loss_objectness: 0.0903 (0.2095)  loss_rpn_box_reg: 0.0163 (0.0347)  time: 0.1021 (0.1634)  data: 0.0014 (0.0203)  lr: 0.025600  max mem: 4443
2020-06-23 15:50:56,108 maskrcnn_benchmark.trainer INFO: eta: 1:41:55  iter: 120  loss: 1.2274 (1.6650)  loss_classifier: 0.3814 (0.6427)  loss_box_reg: 0.1483 (0.0827)  loss_mask: 0.6043 (0.7170)  loss_objectness: 0.0617 (0.1891)  loss_rpn_box_reg: 0.0310 (0.0335)  time: 0.1033 (0.1533)  data: 0.0014 (0.0172)  lr: 0.030720  max mem: 4443
2020-06-23 15:50:58,193 maskrcnn_benchmark.trainer INFO: eta: 1:37:12  iter: 140  loss: 1.5201 (1.6305)  loss_classifier: 0.5735 (0.6275)  loss_box_reg: 0.2156 (0.0996)  loss_mask: 0.5752 (0.6972)  loss_objectness: 0.0725 (0.1742)  loss_rpn_box_reg: 0.0190 (0.0321)  time: 0.1046 (0.1463)  data: 0.0015 (0.0149)  lr: 0.035840  max mem: 4612
2020-06-23 15:51:00,293 maskrcnn_benchmark.trainer INFO: eta: 1:33:43  iter: 160  loss: 1.3608 (1.6031)  loss_classifier: 0.5029 (0.6175)  loss_box_reg: 0.1805 (0.1118)  loss_mask: 0.5593 (0.6811)  loss_objectness: 0.0515 (0.1609)  loss_rpn_box_reg: 0.0121 (0.0318)  time: 0.1045 (0.1412)  data: 0.0014 (0.0132)  lr: 0.040960  max mem: 4612
2020-06-23 15:51:02,396 maskrcnn_benchmark.trainer INFO: eta: 1:31:01  iter: 180  loss: 1.3814 (1.5817)  loss_classifier: 0.5401 (0.6093)  loss_box_reg: 0.2212 (0.1233)  loss_mask: 0.5374 (0.6647)  loss_objectness: 0.0709 (0.1525)  loss_rpn_box_reg: 0.0229 (0.0318)  time: 0.1047 (0.1372)  data: 0.0015 (0.0119)  lr: 0.046080  max mem: 4612
2020-06-23 15:51:04,508 maskrcnn_benchmark.trainer INFO: eta: 1:28:53  iter: 200  loss: 1.3654 (1.5635)  loss_classifier: 0.5539 (0.6040)  loss_box_reg: 0.2474 (0.1350)  loss_mask: 0.4934 (0.6478)  loss_objectness: 0.0508 (0.1448)  loss_rpn_box_reg: 0.0146 (0.0319)  time: 0.1055 (0.1340)  data: 0.0016 (0.0109)  lr: 0.051200  max mem: 4618
2020-06-23 15:51:06,616 maskrcnn_benchmark.trainer INFO: eta: 1:27:07  iter: 220  loss: 1.3308 (1.5433)  loss_classifier: 0.5562 (0.5993)  loss_box_reg: 0.2178 (0.1427)  loss_mask: 0.4834 (0.6328)  loss_objectness: 0.0492 (0.1376)  loss_rpn_box_reg: 0.0193 (0.0309)  time: 0.1049 (0.1314)  data: 0.0014 (0.0100)  lr: 0.056320  max mem: 4657
2020-06-23 15:51:08,738 maskrcnn_benchmark.trainer INFO: eta: 1:25:40  iter: 240  loss: 1.2632 (1.5231)  loss_classifier: 0.5373 (0.5946)  loss_box_reg: 0.1910 (0.1490)  loss_mask: 0.4518 (0.6187)  loss_objectness: 0.0524 (0.1309)  loss_rpn_box_reg: 0.0111 (0.0299)  time: 0.1057 (0.1293)  data: 0.0015 (0.0093)  lr: 0.061440  max mem: 4657
2020-06-23 15:51:10,893 maskrcnn_benchmark.trainer INFO: eta: 1:24:32  iter: 260  loss: 1.2066 (1.4996)  loss_classifier: 0.4510 (0.5851)  loss_box_reg: 0.2034 (0.1522)  loss_mask: 0.4551 (0.6071)  loss_objectness: 0.0410 (0.1256)  loss_rpn_box_reg: 0.0111 (0.0296)  time: 0.1071 (0.1276)  data: 0.0014 (0.0087)  lr: 0.066560  max mem: 4658
2020-06-23 15:51:13,029 maskrcnn_benchmark.trainer INFO: eta: 1:23:30  iter: 280  loss: 1.2085 (1.4839)  loss_classifier: 0.4819 (0.5797)  loss_box_reg: 0.1842 (0.1558)  loss_mask: 0.4759 (0.5979)  loss_objectness: 0.0478 (0.1212)  loss_rpn_box_reg: 0.0139 (0.0293)  time: 0.1062 (0.1261)  data: 0.0014 (0.0082)  lr: 0.071680  max mem: 4658
2020-06-23 15:51:15,162 maskrcnn_benchmark.trainer INFO: eta: 1:22:36  iter: 300  loss: 1.0459 (1.4594)  loss_classifier: 0.4068 (0.5709)  loss_box_reg: 0.1774 (0.1574)  loss_mask: 0.4023 (0.5868)  loss_objectness: 0.0375 (0.1161)  loss_rpn_box_reg: 0.0107 (0.0282)  time: 0.1067 (0.1248)  data: 0.0014 (0.0078)  lr: 0.076800  max mem: 4658
2020-06-23 15:51:17,287 maskrcnn_benchmark.trainer INFO: eta: 1:21:47  iter: 320  loss: 1.0959 (1.4387)  loss_classifier: 0.4339 (0.5651)  loss_box_reg: 0.1723 (0.1583)  loss_mask: 0.3974 (0.5759)  loss_objectness: 0.0434 (0.1120)  loss_rpn_box_reg: 0.0111 (0.0274)  time: 0.1047 (0.1237)  data: 0.0014 (0.0074)  lr: 0.081920  max mem: 4658
2020-06-23 15:51:19,399 maskrcnn_benchmark.trainer INFO: eta: 1:21:03  iter: 340  loss: 1.1391 (1.4184)  loss_classifier: 0.4496 (0.5570)  loss_box_reg: 0.1802 (0.1592)  loss_mask: 0.4034 (0.5666)  loss_objectness: 0.0298 (0.1082)  loss_rpn_box_reg: 0.0167 (0.0274)  time: 0.1049 (0.1226)  data: 0.0014 (0.0070)  lr: 0.087040  max mem: 4658
2020-06-23 15:51:21,521 maskrcnn_benchmark.trainer INFO: eta: 1:20:24  iter: 360  loss: 1.0636 (1.4010)  loss_classifier: 0.4169 (0.5512)  loss_box_reg: 0.1479 (0.1596)  loss_mask: 0.3933 (0.5566)  loss_objectness: 0.0474 (0.1061)  loss_rpn_box_reg: 0.0136 (0.0274)  time: 0.1057 (0.1217)  data: 0.0015 (0.0067)  lr: 0.092160  max mem: 4658
2020-06-23 15:51:23,639 maskrcnn_benchmark.trainer INFO: eta: 1:19:48  iter: 380  loss: 0.9941 (1.3806)  loss_classifier: 0.3334 (0.5421)  loss_box_reg: 0.1524 (0.1594)  loss_mask: 0.4108 (0.5485)  loss_objectness: 0.0323 (0.1032)  loss_rpn_box_reg: 0.0118 (0.0274)  time: 0.1055 (0.1209)  data: 0.0015 (0.0064)  lr: 0.097280  max mem: 4658
2020-06-23 15:51:25,761 maskrcnn_benchmark.trainer INFO: eta: 1:19:17  iter: 400  loss: 1.0072 (1.3663)  loss_classifier: 0.4232 (0.5362)  loss_box_reg: 0.1582 (0.1596)  loss_mask: 0.4099 (0.5408)  loss_objectness: 0.0429 (0.1016)  loss_rpn_box_reg: 0.0211 (0.0280)  time: 0.1049 (0.1201)  data: 0.0015 (0.0062)  lr: 0.102400  max mem: 4658
2020-06-23 15:51:27,881 maskrcnn_benchmark.trainer INFO: eta: 1:18:48  iter: 420  loss: 0.8623 (1.3440)  loss_classifier: 0.3074 (0.5262)  loss_box_reg: 0.1067 (0.1581)  loss_mask: 0.3630 (0.5324)  loss_objectness: 0.0394 (0.0992)  loss_rpn_box_reg: 0.0179 (0.0280)  time: 0.1058 (0.1195)  data: 0.0014 (0.0060)  lr: 0.107520  max mem: 4658
2020-06-23 15:51:30,016 maskrcnn_benchmark.trainer INFO: eta: 1:18:22  iter: 440  loss: 1.0514 (1.3310)  loss_classifier: 0.4052 (0.5218)  loss_box_reg: 0.1782 (0.1592)  loss_mask: 0.3761 (0.5256)  loss_objectness: 0.0371 (0.0967)  loss_rpn_box_reg: 0.0122 (0.0276)  time: 0.1062 (0.1189)  data: 0.0015 (0.0058)  lr: 0.112640  max mem: 4812
2020-06-23 15:51:32,151 maskrcnn_benchmark.trainer INFO: eta: 1:17:59  iter: 460  loss: 0.8607 (1.3152)  loss_classifier: 0.3413 (0.5146)  loss_box_reg: 0.1377 (0.1588)  loss_mask: 0.3796 (0.5196)  loss_objectness: 0.0292 (0.0945)  loss_rpn_box_reg: 0.0119 (0.0277)  time: 0.1064 (0.1184)  data: 0.0015 (0.0056)  lr: 0.117760  max mem: 4812
2020-06-23 15:51:34,276 maskrcnn_benchmark.trainer INFO: eta: 1:17:37  iter: 480  loss: 0.9384 (1.2998)  loss_classifier: 0.3332 (0.5076)  loss_box_reg: 0.1587 (0.1588)  loss_mask: 0.3721 (0.5132)  loss_objectness: 0.0446 (0.0928)  loss_rpn_box_reg: 0.0204 (0.0275)  time: 0.1058 (0.1179)  data: 0.0015 (0.0054)  lr: 0.122880  max mem: 4812
2020-06-23 15:51:36,390 maskrcnn_benchmark.trainer INFO: eta: 1:17:15  iter: 500  loss: 0.9398 (1.2866)  loss_classifier: 0.3211 (0.5011)  loss_box_reg: 0.1561 (0.1584)  loss_mask: 0.3792 (0.5083)  loss_objectness: 0.0377 (0.0916)  loss_rpn_box_reg: 0.0128 (0.0273)  time: 0.1049 (0.1174)  data: 0.0014 (0.0052)  lr: 0.128000  max mem: 4812
2020-06-23 15:51:38,510 maskrcnn_benchmark.trainer INFO: eta: 1:16:56  iter: 520  loss: 0.8955 (1.2729)  loss_classifier: 0.3202 (0.4949)  loss_box_reg: 0.1465 (0.1585)  loss_mask: 0.3690 (0.5025)  loss_objectness: 0.0294 (0.0900)  loss_rpn_box_reg: 0.0120 (0.0270)  time: 0.1052 (0.1169)  data: 0.0014 (0.0051)  lr: 0.133120  max mem: 4884
2020-06-23 15:51:40,633 maskrcnn_benchmark.trainer INFO: eta: 1:16:38  iter: 540  loss: 0.9516 (1.2617)  loss_classifier: 0.3792 (0.4909)  loss_box_reg: 0.1444 (0.1584)  loss_mask: 0.3522 (0.4970)  loss_objectness: 0.0314 (0.0884)  loss_rpn_box_reg: 0.0143 (0.0270)  time: 0.1056 (0.1165)  data: 0.0015 (0.0050)  lr: 0.138240  max mem: 4884
2020-06-23 15:51:42,764 maskrcnn_benchmark.trainer INFO: eta: 1:16:21  iter: 560  loss: 0.9172 (1.2522)  loss_classifier: 0.3304 (0.4871)  loss_box_reg: 0.1583 (0.1584)  loss_mask: 0.3654 (0.4924)  loss_objectness: 0.0399 (0.0874)  loss_rpn_box_reg: 0.0130 (0.0268)  time: 0.1062 (0.1162)  data: 0.0015 (0.0048)  lr: 0.143360  max mem: 4884
2020-06-23 15:51:44,892 maskrcnn_benchmark.trainer INFO: eta: 1:16:06  iter: 580  loss: 1.0442 (1.2431)  loss_classifier: 0.4018 (0.4834)  loss_box_reg: 0.1544 (0.1586)  loss_mask: 0.3957 (0.4886)  loss_objectness: 0.0363 (0.0859)  loss_rpn_box_reg: 0.0114 (0.0266)  time: 0.1057 (0.1158)  data: 0.0014 (0.0047)  lr: 0.148480  max mem: 4884
2020-06-23 15:51:46,994 maskrcnn_benchmark.trainer INFO: eta: 1:15:49  iter: 600  loss: 0.8740 (1.2342)  loss_classifier: 0.3293 (0.4791)  loss_box_reg: 0.1547 (0.1587)  loss_mask: 0.3681 (0.4849)  loss_objectness: 0.0375 (0.0849)  loss_rpn_box_reg: 0.0232 (0.0266)  time: 0.1051 (0.1155)  data: 0.0015 (0.0046)  lr: 0.153600  max mem: 4884
2020-06-23 15:51:49,100 maskrcnn_benchmark.trainer INFO: eta: 1:15:34  iter: 620  loss: 1.0110 (1.2256)  loss_classifier: 0.3862 (0.4758)  loss_box_reg: 0.1447 (0.1586)  loss_mask: 0.3764 (0.4807)  loss_objectness: 0.0459 (0.0840)  loss_rpn_box_reg: 0.0157 (0.0266)  time: 0.1050 (0.1151)  data: 0.0015 (0.0045)  lr: 0.158720  max mem: 4884
2020-06-23 15:51:51,237 maskrcnn_benchmark.trainer INFO: eta: 1:15:22  iter: 640  loss: 0.8790 (1.2157)  loss_classifier: 0.3154 (0.4716)  loss_box_reg: 0.1391 (0.1583)  loss_mask: 0.3352 (0.4765)  loss_objectness: 0.0433 (0.0828)  loss_rpn_box_reg: 0.0179 (0.0266)  time: 0.1067 (0.1149)  data: 0.0014 (0.0044)  lr: 0.160000  max mem: 4884
2020-06-23 15:51:53,356 maskrcnn_benchmark.trainer INFO: eta: 1:15:09  iter: 660  loss: 0.9855 (1.2088)  loss_classifier: 0.3361 (0.4685)  loss_box_reg: 0.1596 (0.1583)  loss_mask: 0.3926 (0.4735)  loss_objectness: 0.0397 (0.0820)  loss_rpn_box_reg: 0.0142 (0.0265)  time: 0.1056 (0.1146)  data: 0.0015 (0.0043)  lr: 0.160000  max mem: 4884
2020-06-23 15:51:55,487 maskrcnn_benchmark.trainer INFO: eta: 1:14:57  iter: 680  loss: 0.7480 (1.1967)  loss_classifier: 0.2752 (0.4635)  loss_box_reg: 0.1010 (0.1573)  loss_mask: 0.3303 (0.4691)  loss_objectness: 0.0268 (0.0806)  loss_rpn_box_reg: 0.0076 (0.0262)  time: 0.1062 (0.1144)  data: 0.0014 (0.0042)  lr: 0.160000  max mem: 4884
2020-06-23 15:51:57,621 maskrcnn_benchmark.trainer INFO: eta: 1:14:46  iter: 700  loss: 0.9514 (1.1897)  loss_classifier: 0.3680 (0.4605)  loss_box_reg: 0.1344 (0.1573)  loss_mask: 0.3573 (0.4658)  loss_objectness: 0.0504 (0.0799)  loss_rpn_box_reg: 0.0151 (0.0263)  time: 0.1062 (0.1142)  data: 0.0015 (0.0042)  lr: 0.160000  max mem: 4884
2020-06-23 15:51:59,728 maskrcnn_benchmark.trainer INFO: eta: 1:14:34  iter: 720  loss: 0.8244 (1.1805)  loss_classifier: 0.2814 (0.4563)  loss_box_reg: 0.1331 (0.1566)  loss_mask: 0.3629 (0.4628)  loss_objectness: 0.0389 (0.0788)  loss_rpn_box_reg: 0.0148 (0.0260)  time: 0.1049 (0.1139)  data: 0.0015 (0.0041)  lr: 0.160000  max mem: 4884
2020-06-23 15:52:01,859 maskrcnn_benchmark.trainer INFO: eta: 1:14:24  iter: 740  loss: 0.9177 (1.1721)  loss_classifier: 0.2926 (0.4526)  loss_box_reg: 0.1261 (0.1562)  loss_mask: 0.3238 (0.4596)  loss_objectness: 0.0274 (0.0779)  loss_rpn_box_reg: 0.0104 (0.0259)  time: 0.1060 (0.1137)  data: 0.0014 (0.0040)  lr: 0.160000  max mem: 4884
2020-06-23 15:52:03,990 maskrcnn_benchmark.trainer INFO: eta: 1:14:14  iter: 760  loss: 0.9183 (1.1671)  loss_classifier: 0.3685 (0.4512)  loss_box_reg: 0.1490 (0.1566)  loss_mask: 0.3411 (0.4566)  loss_objectness: 0.0313 (0.0770)  loss_rpn_box_reg: 0.0155 (0.0256)  time: 0.1052 (0.1135)  data: 0.0015 (0.0040)  lr: 0.160000  max mem: 4884
2020-06-23 15:52:06,115 maskrcnn_benchmark.trainer INFO: eta: 1:14:05  iter: 780  loss: 0.8848 (1.1598)  loss_classifier: 0.3244 (0.4482)  loss_box_reg: 0.1599 (0.1566)  loss_mask: 0.3290 (0.4531)  loss_objectness: 0.0350 (0.0763)  loss_rpn_box_reg: 0.0172 (0.0257)  time: 0.1058 (0.1133)  data: 0.0015 (0.0039)  lr: 0.160000  max mem: 4884
2020-06-23 15:52:08,243 maskrcnn_benchmark.trainer INFO: eta: 1:13:56  iter: 800  loss: 0.8701 (1.1528)  loss_classifier: 0.3171 (0.4454)  loss_box_reg: 0.1310 (0.1564)  loss_mask: 0.3225 (0.4499)  loss_objectness: 0.0339 (0.0755)  loss_rpn_box_reg: 0.0211 (0.0256)  time: 0.1057 (0.1132)  data: 0.0015 (0.0038)  lr: 0.160000  max mem: 4884
2020-06-23 15:52:10,359 maskrcnn_benchmark.trainer INFO: eta: 1:13:46  iter: 820  loss: 0.8905 (1.1473)  loss_classifier: 0.3348 (0.4432)  loss_box_reg: 0.1361 (0.1562)  loss_mask: 0.3501 (0.4470)  loss_objectness: 0.0408 (0.0752)  loss_rpn_box_reg: 0.0143 (0.0257)  time: 0.1051 (0.1130)  data: 0.0015 (0.0038)  lr: 0.160000  max mem: 4884
2020-06-23 15:52:12,513 maskrcnn_benchmark.trainer INFO: eta: 1:13:39  iter: 840  loss: 0.9562 (1.1426)  loss_classifier: 0.3366 (0.4408)  loss_box_reg: 0.1635 (0.1563)  loss_mask: 0.3625 (0.4452)  loss_objectness: 0.0360 (0.0746)  loss_rpn_box_reg: 0.0211 (0.0257)  time: 0.1068 (0.1129)  data: 0.0015 (0.0037)  lr: 0.160000  max mem: 4884
2020-06-23 15:52:14,637 maskrcnn_benchmark.trainer INFO: eta: 1:13:31  iter: 860  loss: 0.9144 (1.1373)  loss_classifier: 0.3263 (0.4386)  loss_box_reg: 0.1501 (0.1563)  loss_mask: 0.3413 (0.4426)  loss_objectness: 0.0466 (0.0740)  loss_rpn_box_reg: 0.0167 (0.0259)  time: 0.1058 (0.1127)  data: 0.0015 (0.0037)  lr: 0.160000  max mem: 4913
2020-06-23 15:52:16,762 maskrcnn_benchmark.trainer INFO: eta: 1:13:23  iter: 880  loss: 0.8644 (1.1309)  loss_classifier: 0.3043 (0.4359)  loss_box_reg: 0.1384 (0.1558)  loss_mask: 0.3485 (0.4405)  loss_objectness: 0.0324 (0.0731)  loss_rpn_box_reg: 0.0096 (0.0256)  time: 0.1064 (0.1126)  data: 0.0014 (0.0036)  lr: 0.160000  max mem: 4913
2020-06-23 15:52:18,907 maskrcnn_benchmark.trainer INFO: eta: 1:13:16  iter: 900  loss: 0.8076 (1.1256)  loss_classifier: 0.3082 (0.4335)  loss_box_reg: 0.1324 (0.1556)  loss_mask: 0.3354 (0.4382)  loss_objectness: 0.0308 (0.0727)  loss_rpn_box_reg: 0.0142 (0.0256)  time: 0.1063 (0.1124)  data: 0.0015 (0.0036)  lr: 0.160000  max mem: 4913
:::MLLOG {"namespace": "", "time_ms": 1592952745988, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592952745989, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592952745989, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 1}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
2020-06-23 15:52:26,150 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.31s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.31s)
creating index...
index created!
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
Done (t=0.30s)
creating index...
index created!
:::MLLOG {"namespace": "", "time_ms": 1592952746470, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 1, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/engine/tester.py", "lineno": 35}}
2020-06-23 15:52:26,471 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.31s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.21it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.45it/s]
 35%|      | 28/79 [00:01<00:03, 13.70it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.88it/s]
 47%|     | 37/79 [00:02<00:02, 19.59it/s]
 51%|     | 40/79 [00:02<00:01, 21.04it/s]
 54%|    | 43/79 [00:02<00:01, 22.03it/s]
 58%|    | 46/79 [00:02<00:01, 23.19it/s]
 62%|   | 49/79 [00:02<00:01, 23.86it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.70it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.44it/s]
 32%|      | 25/79 [00:01<00:04, 11.62it/s]
 35%|      | 28/79 [00:01<00:03, 13.94it/s]
 39%|      | 31/79 [00:02<00:02, 16.07it/s]
 43%|     | 34/79 [00:02<00:02, 18.18it/s]
 47%|     | 37/79 [00:02<00:02, 19.70it/s]
 51%|     | 40/79 [00:02<00:01, 21.18it/s]
 54%|    | 43/79 [00:02<00:01, 22.58it/s]
 58%|    | 46/79 [00:02<00:01, 23.24it/s]
 62%|   | 49/79 [00:02<00:01, 23.89it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.39it/s]
 24%|       | 19/79 [00:01<00:08,  7.07it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.30it/s]
 35%|      | 28/79 [00:01<00:03, 13.64it/s]
 39%|      | 31/79 [00:02<00:03, 15.80it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.64it/s]
 51%|     | 40/79 [00:02<00:01, 20.91it/s]
 54%|    | 43/79 [00:02<00:01, 22.11it/s]
 58%|    | 46/79 [00:02<00:01, 23.12it/s]
 62%|   | 49/79 [00:02<00:01, 23.90it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.01it/s]
 32%|      | 25/79 [00:01<00:04, 11.22it/s]
 35%|      | 28/79 [00:01<00:03, 13.50it/s]
 39%|      | 31/79 [00:02<00:03, 15.71it/s]
 43%|     | 34/79 [00:02<00:02, 17.74it/s]
 47%|     | 37/79 [00:02<00:02, 19.59it/s]
 51%|     | 40/79 [00:02<00:01, 21.19it/s]
 54%|    | 43/79 [00:02<00:01, 22.20it/s]
 58%|    | 46/79 [00:02<00:01, 23.18it/s]
 62%|   | 49/79 [00:02<00:01, 24.10it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.06it/s]
 28%|       | 22/79 [00:01<00:06,  9.03it/s]
 32%|      | 25/79 [00:01<00:04, 11.25it/s]
 35%|      | 28/79 [00:01<00:03, 13.46it/s]
 39%|      | 31/79 [00:02<00:03, 15.83it/s]
 43%|     | 34/79 [00:02<00:02, 17.87it/s]
 47%|     | 37/79 [00:02<00:02, 19.71it/s]
 51%|     | 40/79 [00:02<00:01, 21.21it/s]
 54%|    | 43/79 [00:02<00:01, 22.38it/s]
 58%|    | 46/79 [00:02<00:01, 23.53it/s]
 62%|   | 49/79 [00:02<00:01, 24.21it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.15it/s]
 28%|       | 22/79 [00:01<00:06,  9.10it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.49it/s]
 39%|      | 31/79 [00:02<00:03, 15.73it/s]
 43%|     | 34/79 [00:02<00:02, 17.77it/s]
 47%|     | 37/79 [00:02<00:02, 19.43it/s]
 51%|     | 40/79 [00:02<00:01, 20.85it/s]
 54%|    | 43/79 [00:02<00:01, 22.30it/s]
 58%|    | 46/79 [00:02<00:01, 23.17it/s]
 62%|   | 49/79 [00:02<00:01, 23.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.48it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.10it/s]
 32%|      | 25/79 [00:01<00:04, 11.28it/s]
 35%|      | 28/79 [00:01<00:03, 13.45it/s]
 39%|      | 31/79 [00:02<00:03, 15.64it/s]
 43%|     | 34/79 [00:02<00:02, 17.58it/s]
 47%|     | 37/79 [00:02<00:02, 19.55it/s]
 51%|     | 40/79 [00:02<00:01, 20.58it/s]
 54%|    | 43/79 [00:02<00:01, 21.62it/s]
 58%|    | 46/79 [00:02<00:01, 22.36it/s]
 62%|   | 49/79 [00:02<00:01, 23.16it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.95it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.84it/s]
 32%|      | 25/79 [00:01<00:04, 10.98it/s]
 35%|      | 28/79 [00:01<00:03, 13.26it/s]
 39%|      | 31/79 [00:02<00:03, 15.44it/s]
 43%|     | 34/79 [00:02<00:02, 17.52it/s]
 47%|     | 37/79 [00:02<00:02, 19.36it/s]
 51%|     | 40/79 [00:02<00:01, 20.80it/s]
 54%|    | 43/79 [00:02<00:01, 21.95it/s]
 58%|    | 46/79 [00:02<00:01, 22.95it/s]
 62%|   | 49/79 [00:02<00:01, 23.57it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.12it/s]
 35%|      | 28/79 [00:01<00:03, 13.50it/s]
 39%|      | 31/79 [00:02<00:03, 15.59it/s]
 43%|     | 34/79 [00:02<00:02, 17.70it/s]
 47%|     | 37/79 [00:02<00:02, 19.61it/s]
 51%|     | 40/79 [00:02<00:01, 20.96it/s]
 54%|    | 43/79 [00:02<00:01, 22.09it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.52it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.23it/s]
 24%|       | 19/79 [00:01<00:08,  6.87it/s]
 28%|       | 22/79 [00:01<00:06,  8.79it/s]
 32%|      | 25/79 [00:01<00:04, 10.92it/s]
 35%|      | 28/79 [00:02<00:03, 13.21it/s]
 39%|      | 31/79 [00:02<00:03, 15.51it/s]
 43%|     | 34/79 [00:02<00:02, 17.62it/s]
 47%|     | 37/79 [00:02<00:02, 19.44it/s]
 51%|     | 40/79 [00:02<00:01, 20.87it/s]
 54%|    | 43/79 [00:02<00:01, 21.97it/s]
 58%|    | 46/79 [00:02<00:01, 22.73it/s]
 62%|   | 49/79 [00:02<00:01, 23.78it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.01it/s]
 32%|      | 25/79 [00:01<00:04, 11.21it/s]
 35%|      | 28/79 [00:01<00:03, 13.37it/s]
 39%|      | 31/79 [00:02<00:03, 15.57it/s]
 43%|     | 34/79 [00:02<00:02, 17.66it/s]
 47%|     | 37/79 [00:02<00:02, 19.45it/s]
 51%|     | 40/79 [00:02<00:01, 20.65it/s]
 54%|    | 43/79 [00:02<00:01, 21.92it/s]
 58%|    | 46/79 [00:02<00:01, 22.63it/s]
 62%|   | 49/79 [00:02<00:01, 23.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.01it/s]
 35%|      | 28/79 [00:02<00:03, 13.14it/s]
 39%|      | 31/79 [00:02<00:03, 15.38it/s]
 43%|     | 34/79 [00:02<00:02, 17.38it/s]
 47%|     | 37/79 [00:02<00:02, 19.29it/s]
 51%|     | 40/79 [00:02<00:01, 20.72it/s]
 54%|    | 43/79 [00:02<00:01, 22.08it/s]
 58%|    | 46/79 [00:02<00:01, 22.82it/s]
 62%|   | 49/79 [00:02<00:01, 23.52it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.89it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.84it/s]
 28%|       | 22/79 [00:01<00:06,  8.76it/s]
 32%|      | 25/79 [00:01<00:04, 10.89it/s]
 35%|      | 28/79 [00:02<00:03, 13.20it/s]
 39%|      | 31/79 [00:02<00:03, 15.38it/s]
 43%|     | 34/79 [00:02<00:02, 17.52it/s]
 47%|     | 37/79 [00:02<00:02, 19.19it/s]
 51%|     | 40/79 [00:02<00:01, 20.79it/s]
 54%|    | 43/79 [00:02<00:01, 22.02it/s]
 58%|    | 46/79 [00:02<00:01, 22.84it/s]
 62%|   | 49/79 [00:02<00:01, 23.55it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  3.99it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  6.99it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.06it/s]
 35%|      | 28/79 [00:02<00:03, 13.29it/s]
 39%|      | 31/79 [00:02<00:03, 15.56it/s]
 43%|     | 34/79 [00:02<00:02, 17.52it/s]
 47%|     | 37/79 [00:02<00:02, 19.37it/s]
 51%|     | 40/79 [00:02<00:01, 20.81it/s]
 54%|    | 43/79 [00:02<00:01, 22.05it/s]
 58%|    | 46/79 [00:02<00:01, 22.48it/s]
 62%|   | 49/79 [00:02<00:01, 23.04it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  3.99it/s]
 20%|        | 16/79 [00:01<00:11,  5.32it/s]
 24%|       | 19/79 [00:01<00:08,  6.99it/s]
 28%|       | 22/79 [00:01<00:06,  8.97it/s]
 32%|      | 25/79 [00:01<00:04, 11.10it/s]
 35%|      | 28/79 [00:01<00:03, 13.35it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.61it/s]
 47%|     | 37/79 [00:02<00:02, 19.45it/s]
 51%|     | 40/79 [00:02<00:01, 20.82it/s]
 54%|    | 43/79 [00:02<00:01, 20.89it/s]
 58%|    | 46/79 [00:02<00:01, 21.91it/s]
 62%|   | 49/79 [00:02<00:01, 22.80it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.89it/s]
 20%|        | 16/79 [00:01<00:12,  5.20it/s]
 24%|       | 19/79 [00:01<00:08,  6.80it/s]
 28%|       | 22/79 [00:01<00:06,  8.72it/s]
 32%|      | 25/79 [00:01<00:04, 10.80it/s]
 35%|      | 28/79 [00:02<00:03, 13.06it/s]
 39%|      | 31/79 [00:02<00:03, 15.31it/s]
 43%|     | 34/79 [00:02<00:02, 17.34it/s]
 47%|     | 37/79 [00:02<00:02, 19.28it/s]
 51%|     | 40/79 [00:02<00:01, 20.78it/s]
 54%|    | 43/79 [00:02<00:01, 22.21it/s]
 58%|    | 46/79 [00:02<00:01, 23.08it/s]
 62%|   | 49/79 [00:02<00:01, 23.83it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.18it/s]
 24%|       | 19/79 [00:01<00:08,  6.79it/s]
 28%|       | 22/79 [00:01<00:06,  8.71it/s]
 32%|      | 25/79 [00:01<00:04, 10.83it/s]
 35%|      | 28/79 [00:02<00:03, 13.10it/s]
 39%|      | 31/79 [00:02<00:03, 15.27it/s]
 43%|     | 34/79 [00:02<00:02, 17.35it/s]
 47%|     | 37/79 [00:02<00:02, 19.23it/s]
 51%|     | 40/79 [00:02<00:01, 20.76it/s]
 54%|    | 43/79 [00:02<00:01, 22.03it/s]
 58%|    | 46/79 [00:02<00:01, 22.74it/s]
 62%|   | 49/79 [00:02<00:01, 23.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.08it/s]
 28%|       | 22/79 [00:01<00:06,  9.02it/s]
 32%|      | 25/79 [00:01<00:04, 11.16it/s]
 35%|      | 28/79 [00:01<00:03, 13.42it/s]
 39%|      | 31/79 [00:02<00:03, 15.49it/s]
 43%|     | 34/79 [00:02<00:02, 17.33it/s]
 47%|     | 37/79 [00:02<00:02, 18.97it/s]
 51%|     | 40/79 [00:02<00:01, 20.36it/s]
 54%|    | 43/79 [00:02<00:01, 21.26it/s]
 58%|    | 46/79 [00:02<00:01, 22.24it/s]
 62%|   | 49/79 [00:02<00:01, 23.19it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.88it/s]
 20%|        | 16/79 [00:01<00:12,  5.20it/s]
 24%|       | 19/79 [00:01<00:08,  6.80it/s]
 28%|       | 22/79 [00:01<00:06,  8.71it/s]
 32%|      | 25/79 [00:01<00:04, 10.81it/s]
 35%|      | 28/79 [00:02<00:03, 13.06it/s]
 39%|      | 31/79 [00:02<00:03, 15.25it/s]
 43%|     | 34/79 [00:02<00:02, 17.25it/s]
 47%|     | 37/79 [00:02<00:02, 18.97it/s]
 51%|     | 40/79 [00:02<00:01, 20.74it/s]
 54%|    | 43/79 [00:02<00:01, 21.74it/s]
 58%|    | 46/79 [00:02<00:01, 22.67it/s]
 62%|   | 49/79 [00:02<00:01, 23.58it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.04it/s]
 35%|      | 28/79 [00:01<00:03, 13.25it/s]
 39%|      | 31/79 [00:02<00:03, 15.46it/s]
 43%|     | 34/79 [00:02<00:02, 17.32it/s]
 47%|     | 37/79 [00:02<00:02, 19.05it/s]
 51%|     | 40/79 [00:02<00:01, 20.62it/s]
 54%|    | 43/79 [00:02<00:01, 21.75it/s]
 58%|    | 46/79 [00:02<00:01, 22.34it/s]
 62%|   | 49/79 [00:02<00:01, 22.82it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.30it/s]
 24%|       | 19/79 [00:01<00:08,  6.93it/s]
 28%|       | 22/79 [00:01<00:06,  8.84it/s]
 32%|      | 25/79 [00:01<00:04, 10.98it/s]
 35%|      | 28/79 [00:02<00:03, 13.23it/s]
 39%|      | 31/79 [00:02<00:03, 15.43it/s]
 43%|     | 34/79 [00:02<00:02, 17.45it/s]
 47%|     | 37/79 [00:02<00:02, 19.38it/s]
 51%|     | 40/79 [00:02<00:01, 20.72it/s]
 54%|    | 43/79 [00:02<00:01, 21.86it/s]
 58%|    | 46/79 [00:02<00:01, 22.50it/s]
 62%|   | 49/79 [00:02<00:01, 23.21it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.09it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.12it/s]
 28%|       | 22/79 [00:01<00:06,  9.05it/s]
 32%|      | 25/79 [00:01<00:04, 11.20it/s]
 35%|      | 28/79 [00:01<00:03, 13.35it/s]
 39%|      | 31/79 [00:02<00:03, 15.43it/s]
 43%|     | 34/79 [00:02<00:02, 17.39it/s]
 47%|     | 37/79 [00:02<00:02, 19.03it/s]
 51%|     | 40/79 [00:02<00:01, 20.42it/s]
 54%|    | 43/79 [00:02<00:01, 21.45it/s]
 58%|    | 46/79 [00:02<00:01, 22.31it/s]
 62%|   | 49/79 [00:02<00:01, 22.98it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:51,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.82it/s]
 16%|        | 13/79 [00:01<00:17,  3.85it/s]
 20%|        | 16/79 [00:01<00:12,  5.16it/s]
 24%|       | 19/79 [00:01<00:08,  6.75it/s]
 28%|       | 22/79 [00:01<00:06,  8.59it/s]
 32%|      | 25/79 [00:01<00:05, 10.74it/s]
 35%|      | 28/79 [00:02<00:03, 12.94it/s]
 39%|      | 31/79 [00:02<00:03, 15.12it/s]
 43%|     | 34/79 [00:02<00:02, 17.27it/s]
 47%|     | 37/79 [00:02<00:02, 19.11it/s]
 51%|     | 40/79 [00:02<00:01, 20.42it/s]
 54%|    | 43/79 [00:02<00:01, 21.51it/s]
 58%|    | 46/79 [00:02<00:01, 22.43it/s]
 62%|   | 49/79 [00:02<00:01, 22.98it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.81it/s]
 16%|        | 13/79 [00:01<00:17,  3.84it/s]
 20%|        | 16/79 [00:01<00:12,  5.14it/s]
 24%|       | 19/79 [00:01<00:08,  6.75it/s]
 28%|       | 22/79 [00:01<00:06,  8.62it/s]
 32%|      | 25/79 [00:01<00:05, 10.69it/s]
 35%|      | 28/79 [00:02<00:03, 12.87it/s]
 39%|      | 31/79 [00:02<00:03, 15.17it/s]
 43%|     | 34/79 [00:02<00:02, 17.01it/s]
 47%|     | 37/79 [00:02<00:02, 18.80it/s]
 51%|     | 40/79 [00:02<00:01, 20.28it/s]
 54%|    | 43/79 [00:02<00:01, 21.58it/s]
 58%|    | 46/79 [00:02<00:01, 22.48it/s]
 62%|   | 49/79 [00:02<00:01, 22.86it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.81it/s]
 16%|        | 13/79 [00:01<00:17,  3.83it/s]
 20%|        | 16/79 [00:01<00:12,  5.12it/s]
 24%|       | 19/79 [00:01<00:08,  6.74it/s]
 28%|       | 22/79 [00:01<00:06,  8.65it/s]
 32%|      | 25/79 [00:01<00:05, 10.76it/s]
 35%|      | 28/79 [00:02<00:03, 12.94it/s]
 39%|      | 31/79 [00:02<00:03, 15.15it/s]
 43%|     | 34/79 [00:02<00:02, 17.22it/s]
 47%|     | 37/79 [00:02<00:02, 18.86it/s]
 51%|     | 40/79 [00:02<00:01, 20.40it/s]
 54%|    | 43/79 [00:02<00:01, 21.65it/s]
 58%|    | 46/79 [00:02<00:01, 22.45it/s]
 62%|   | 49/79 [00:02<00:01, 23.14it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.80it/s]
 16%|        | 13/79 [00:01<00:17,  3.82it/s]
 20%|        | 16/79 [00:01<00:12,  5.13it/s]
 24%|       | 19/79 [00:01<00:08,  6.74it/s]
 28%|       | 22/79 [00:01<00:06,  8.64it/s]
 32%|      | 25/79 [00:01<00:05, 10.69it/s]
 35%|      | 28/79 [00:02<00:03, 12.90it/s]
 39%|      | 31/79 [00:02<00:03, 15.14it/s]
 43%|     | 34/79 [00:02<00:02, 17.05it/s]
 47%|     | 37/79 [00:02<00:02, 18.70it/s]
 51%|     | 40/79 [00:02<00:01, 20.12it/s]
 54%|    | 43/79 [00:02<00:01, 21.15it/s]
 58%|    | 46/79 [00:02<00:01, 22.29it/s]
 62%|   | 49/79 [00:02<00:01, 22.88it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:51,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.01it/s]
 13%|        | 10/79 [00:01<00:24,  2.78it/s]
 16%|        | 13/79 [00:01<00:17,  3.79it/s]
 20%|        | 16/79 [00:01<00:12,  5.09it/s]
 24%|       | 19/79 [00:01<00:08,  6.68it/s]
 28%|       | 22/79 [00:01<00:06,  8.50it/s]
 32%|      | 25/79 [00:01<00:05, 10.58it/s]
 35%|      | 28/79 [00:02<00:03, 12.75it/s]
 39%|      | 31/79 [00:02<00:03, 14.89it/s]
 43%|     | 34/79 [00:02<00:02, 16.94it/s]
 47%|     | 37/79 [00:02<00:02, 18.69it/s]
 51%|     | 40/79 [00:02<00:01, 20.21it/s]
 54%|    | 43/79 [00:02<00:01, 21.25it/s]
 58%|    | 46/79 [00:02<00:01, 22.20it/s]
 62%|   | 49/79 [00:02<00:01, 22.91it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  5%|         | 4/79 [00:01<00:52,  1.42it/s]
  9%|         | 7/79 [00:01<00:36,  1.98it/s]
 13%|        | 10/79 [00:01<00:25,  2.73it/s]
 16%|        | 13/79 [00:01<00:17,  3.72it/s]
 20%|        | 16/79 [00:01<00:12,  5.00it/s]
 24%|       | 19/79 [00:01<00:09,  6.56it/s]
 28%|       | 22/79 [00:01<00:06,  8.47it/s]
 32%|      | 25/79 [00:01<00:05, 10.65it/s]
 35%|      | 28/79 [00:02<00:04, 12.69it/s]
 39%|      | 31/79 [00:02<00:03, 15.01it/s]
 43%|     | 34/79 [00:02<00:02, 16.82it/s]
 47%|     | 37/79 [00:02<00:02, 18.77it/s]
 51%|     | 40/79 [00:02<00:01, 19.89it/s]
 54%|    | 43/79 [00:02<00:01, 20.97it/s]
 58%|    | 46/79 [00:02<00:01, 21.71it/s]
 62%|   | 49/79 [00:02<00:01, 22.58it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.81it/s]
 16%|        | 13/79 [00:01<00:17,  3.84it/s]
 20%|        | 16/79 [00:01<00:12,  5.12it/s]
 24%|       | 19/79 [00:01<00:08,  6.72it/s]
 28%|       | 22/79 [00:01<00:06,  8.55it/s]
 32%|      | 25/79 [00:01<00:05, 10.59it/s]
 35%|      | 28/79 [00:02<00:04, 12.73it/s]
 39%|      | 31/79 [00:02<00:03, 14.83it/s]
 43%|     | 34/79 [00:02<00:02, 16.75it/s]
 47%|     | 37/79 [00:02<00:02, 18.49it/s]
 51%|     | 40/79 [00:02<00:01, 19.57it/s]
 54%|    | 43/79 [00:02<00:01, 20.75it/s]
 58%|    | 46/79 [00:02<00:01, 21.69it/s]
 62%|   | 49/79 [00:02<00:01, 22.50it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.80it/s]
 16%|        | 13/79 [00:01<00:17,  3.82it/s]
 20%|        | 16/79 [00:01<00:12,  5.11it/s]
 24%|       | 19/79 [00:01<00:08,  6.70it/s]
 28%|       | 22/79 [00:01<00:06,  8.53it/s]
 32%|      | 25/79 [00:01<00:05, 10.62it/s]
 35%|      | 28/79 [00:02<00:03, 12.76it/s]
 39%|      | 31/79 [00:02<00:03, 14.74it/s]
 43%|     | 34/79 [00:02<00:02, 16.56it/s]
 47%|     | 37/79 [00:02<00:02, 18.21it/s]
 51%|     | 40/79 [00:02<00:01, 19.61it/s]
 54%|    | 43/79 [00:02<00:01, 20.73it/s]
 58%|    | 46/79 [00:02<00:01, 21.58it/s]
 62%|   | 49/79 [00:02<00:01, 22.26it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  5%|         | 4/79 [00:01<00:52,  1.42it/s]
  9%|         | 7/79 [00:01<00:36,  1.98it/s]
 13%|        | 10/79 [00:01<00:25,  2.74it/s]
 16%|        | 13/79 [00:01<00:17,  3.73it/s]
 20%|        | 16/79 [00:01<00:12,  5.00it/s]
 24%|       | 19/79 [00:01<00:09,  6.59it/s]
 28%|       | 22/79 [00:01<00:06,  8.45it/s]
 32%|      | 25/79 [00:01<00:05, 10.54it/s]
 35%|      | 28/79 [00:02<00:04, 12.65it/s]
 39%|      | 31/79 [00:02<00:03, 14.82it/s]
 43%|     | 34/79 [00:02<00:02, 16.75it/s]
 47%|     | 37/79 [00:02<00:02, 18.43it/s]
 51%|     | 40/79 [00:02<00:01, 19.81it/s]
 54%|    | 43/79 [00:02<00:01, 20.99it/s]
 58%|    | 46/79 [00:02<00:01, 22.00it/s]
 62%|   | 49/79 [00:02<00:01, 22.20it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:19,  1.02s/it]
  5%|         | 4/79 [00:01<00:54,  1.38it/s]
  9%|         | 7/79 [00:01<00:37,  1.92it/s]
 13%|        | 10/79 [00:01<00:25,  2.65it/s]
 16%|        | 13/79 [00:01<00:18,  3.62it/s]
 20%|        | 16/79 [00:01<00:12,  4.86it/s]
 24%|       | 19/79 [00:01<00:09,  6.41it/s]
 28%|       | 22/79 [00:01<00:06,  8.20it/s]
 32%|      | 25/79 [00:02<00:05, 10.26it/s]
 35%|      | 28/79 [00:02<00:04, 12.37it/s]
 39%|      | 31/79 [00:02<00:03, 14.55it/s]
 43%|     | 34/79 [00:02<00:02, 16.60it/s]
 47%|     | 37/79 [00:02<00:02, 18.33it/s]
 51%|     | 40/79 [00:02<00:01, 19.69it/s]
 54%|    | 43/79 [00:02<00:01, 20.82it/s]
 58%|    | 46/79 [00:02<00:01, 21.84it/s]
 62%|   | 49/79 [00:02<00:01, 22.52it/s]
 66%|   | 52/79 [00:03<00:01, 24.25it/s]
 70%|   | 55/79 [00:02<00:00, 24.56it/s]
 73%|  | 58/79 [00:03<00:00, 24.74it/s]
 77%|  | 61/79 [00:03<00:00, 25.30it/s]
 81%|  | 64/79 [00:03<00:00, 25.43it/s]
 85%| | 67/79 [00:03<00:00, 25.41it/s]
 89%| | 70/79 [00:03<00:00, 25.48it/s]
 92%|| 73/79 [00:03<00:00, 25.79it/s]
 96%|| 76/79 [00:03<00:00, 26.46it/s]
100%|| 79/79 [00:03<00:00, 27.39it/s]
, 24.47it/s]
 70%|   | 55/79 [00:03<00:00, 24.83it/s]
 73%|  | 58/79 [00:03<00:00, 25.26it/s]
 77%|  | 61/79 [00:03<00:00, 25.37it/s]
 81%|  | 64/79 [00:03<00:00, 25.43it/s]
 85%| | 67/79 [00:03<00:00, 25.68it/s]
 89%| | 70/79 [00:03<00:00, 25.60it/s]
 92%|| 73/79 [00:03<00:00, 25.90it/s]
 96%|| 76/79 [00:03<00:00, 26.31it/s]
100%|| 79/79 [00:03<00:00, 27.26it/s]
, 24.15it/s]
 70%|   | 55/79 [00:02<00:00, 24.58it/s]
 73%|  | 58/79 [00:03<00:00, 24.67it/s]
 77%|  | 61/79 [00:03<00:00, 24.56it/s]
 81%|  | 64/79 [00:03<00:00, 23.52it/s]
 85%| | 67/79 [00:03<00:00, 23.90it/s]
 89%| | 70/79 [00:03<00:00, 24.50it/s]
 92%|| 73/79 [00:03<00:00, 24.76it/s]
 96%|| 76/79 [00:03<00:00, 25.65it/s]
100%|| 79/79 [00:03<00:00, 26.49it/s]
, 24.52it/s]
 70%|   | 55/79 [00:03<00:00, 24.72it/s]
 73%|  | 58/79 [00:03<00:00, 25.41it/s]
 77%|  | 61/79 [00:03<00:00, 25.46it/s]
 81%|  | 64/79 [00:03<00:00, 25.73it/s]
 85%| | 67/79 [00:03<00:00, 25.70it/s]
 89%| | 70/79 [00:03<00:00, 25.77it/s]
 92%|| 73/79 [00:03<00:00, 26.00it/s]
 96%|| 76/79 [00:03<00:00, 26.97it/s]
100%|| 79/79 [00:03<00:00, 27.17it/s]
, 24.21it/s]
 70%|   | 55/79 [00:03<00:00, 24.91it/s]
 73%|  | 58/79 [00:03<00:00, 24.86it/s]
 77%|  | 61/79 [00:03<00:00, 25.08it/s]
 81%|  | 64/79 [00:03<00:00, 25.18it/s]
 85%| | 67/79 [00:03<00:00, 25.34it/s]
 89%| | 70/79 [00:03<00:00, 24.85it/s]
 92%|| 73/79 [00:03<00:00, 25.53it/s]
 96%|| 76/79 [00:03<00:00, 26.13it/s]
100%|| 79/79 [00:03<00:00, 26.99it/s]
, 24.25it/s]
 70%|   | 55/79 [00:03<00:00, 24.72it/s]
 73%|  | 58/79 [00:03<00:00, 24.83it/s]
 77%|  | 61/79 [00:03<00:00, 24.84it/s]
 81%|  | 64/79 [00:03<00:00, 24.94it/s]
 85%| | 67/79 [00:03<00:00, 25.15it/s]
 89%| | 70/79 [00:03<00:00, 25.04it/s]
 92%|| 73/79 [00:03<00:00, 25.56it/s]
 96%|| 76/79 [00:03<00:00, 26.01it/s]
100%|| 79/79 [00:03<00:00, 27.03it/s]
, 24.38it/s]
 70%|   | 55/79 [00:03<00:00, 24.50it/s]
 73%|  | 58/79 [00:03<00:00, 24.60it/s]
 77%|  | 61/79 [00:03<00:00, 24.86it/s]
 81%|  | 64/79 [00:03<00:00, 25.13it/s]
 85%| | 67/79 [00:03<00:00, 25.26it/s]
 89%| | 70/79 [00:03<00:00, 25.29it/s]
 92%|| 73/79 [00:03<00:00, 25.35it/s]
 96%|| 76/79 [00:03<00:00, 26.31it/s]
100%|| 79/79 [00:03<00:00, 26.63it/s]
, 24.18it/s]
 70%|   | 55/79 [00:03<00:00, 24.74it/s]
 73%|  | 58/79 [00:03<00:00, 25.06it/s]
 77%|  | 61/79 [00:03<00:00, 24.81it/s]
 81%|  | 64/79 [00:03<00:00, 24.80it/s]
 85%| | 67/79 [00:03<00:00, 25.15it/s]
 89%| | 70/79 [00:03<00:00, 25.20it/s]
 92%|| 73/79 [00:03<00:00, 25.45it/s]
 96%|| 76/79 [00:03<00:00, 26.14it/s]
100%|| 79/79 [00:04<00:00, 19.57it/s]
, 23.64it/s]
 70%|   | 55/79 [00:03<00:01, 23.86it/s]
 73%|  | 58/79 [00:03<00:00, 24.21it/s]
 77%|  | 61/79 [00:03<00:00, 24.33it/s]
 81%|  | 64/79 [00:03<00:00, 24.63it/s]
 85%| | 67/79 [00:03<00:00, 24.83it/s]
 89%| | 70/79 [00:03<00:00, 24.94it/s]
 92%|| 73/79 [00:03<00:00, 25.31it/s]
 96%|| 76/79 [00:03<00:00, 26.30it/s]
100%|| 79/79 [00:04<00:00, 27.22it/s]
, 24.17it/s]
 70%|   | 55/79 [00:03<00:00, 24.45it/s]
 73%|  | 58/79 [00:03<00:00, 25.00it/s]
 77%|  | 61/79 [00:03<00:00, 24.86it/s]
 81%|  | 64/79 [00:03<00:00, 24.84it/s]
 85%| | 67/79 [00:03<00:00, 25.07it/s]
 89%| | 70/79 [00:03<00:00, 24.89it/s]
 92%|| 73/79 [00:03<00:00, 25.28it/s]
 96%|| 76/79 [00:03<00:00, 26.02it/s]
100%|| 79/79 [00:04<00:00, 26.86it/s]
, 24.25it/s]
 70%|   | 55/79 [00:03<00:00, 24.17it/s]
 73%|  | 58/79 [00:03<00:00, 24.84it/s]
 77%|  | 61/79 [00:03<00:00, 24.92it/s]
 81%|  | 64/79 [00:03<00:00, 25.19it/s]
 85%| | 67/79 [00:03<00:00, 24.94it/s]
 89%| | 70/79 [00:03<00:00, 25.37it/s]
 92%|| 73/79 [00:03<00:00, 25.41it/s]
 96%|| 76/79 [00:03<00:00, 26.15it/s]
100%|| 79/79 [00:03<00:00, 27.01it/s]
, 23.41it/s]
 70%|   | 55/79 [00:03<00:01, 23.57it/s]
 73%|  | 58/79 [00:03<00:00, 23.97it/s]
 77%|  | 61/79 [00:03<00:00, 24.22it/s]
 81%|  | 64/79 [00:03<00:00, 24.65it/s]
 85%| | 67/79 [00:03<00:00, 24.72it/s]
 89%| | 70/79 [00:03<00:00, 24.22it/s]
 92%|| 73/79 [00:03<00:00, 24.88it/s]
 96%|| 76/79 [00:03<00:00, 25.71it/s]
100%|| 79/79 [00:04<00:00, 26.84it/s]
, 23.67it/s]
 70%|   | 55/79 [00:03<00:00, 24.01it/s]
 73%|  | 58/79 [00:03<00:00, 24.28it/s]
 77%|  | 61/79 [00:03<00:00, 24.29it/s]
 81%|  | 64/79 [00:03<00:00, 24.52it/s]
 85%| | 67/79 [00:03<00:00, 24.44it/s]
 89%| | 70/79 [00:03<00:00, 24.47it/s]
 92%|| 73/79 [00:03<00:00, 25.17it/s]
 96%|| 76/79 [00:03<00:00, 25.91it/s]
100%|| 79/79 [00:04<00:00, 26.84it/s]
, 23.74it/s]
 70%|   | 55/79 [00:03<00:00, 24.34it/s]
 73%|  | 58/79 [00:03<00:00, 24.62it/s]
 77%|  | 61/79 [00:03<00:00, 24.71it/s]
 81%|  | 64/79 [00:03<00:00, 24.79it/s]
 85%| | 67/79 [00:03<00:00, 25.12it/s]
 89%| | 70/79 [00:03<00:00, 25.30it/s]
 92%|| 73/79 [00:03<00:00, 25.65it/s]
 96%|| 76/79 [00:03<00:00, 26.34it/s]
100%|| 79/79 [00:04<00:00, 27.10it/s]
, 23.15it/s]
 70%|   | 55/79 [00:03<00:01, 23.61it/s]
 73%|  | 58/79 [00:03<00:00, 23.97it/s]
 77%|  | 61/79 [00:03<00:00, 24.28it/s]
 81%|  | 64/79 [00:03<00:00, 24.37it/s]
 85%| | 67/79 [00:03<00:00, 24.78it/s]
 89%| | 70/79 [00:03<00:00, 25.10it/s]
 92%|| 73/79 [00:03<00:00, 25.54it/s]
 96%|| 76/79 [00:03<00:00, 26.28it/s]
100%|| 79/79 [00:04<00:00, 27.23it/s]
, 23.07it/s]
 70%|   | 55/79 [00:03<00:01, 23.42it/s]
 73%|  | 58/79 [00:03<00:00, 23.69it/s]
 77%|  | 61/79 [00:03<00:00, 23.72it/s]
 81%|  | 64/79 [00:03<00:00, 23.77it/s]
 85%| | 67/79 [00:03<00:00, 24.02it/s]
 89%| | 70/79 [00:03<00:00, 23.99it/s]
 92%|| 73/79 [00:03<00:00, 24.30it/s]
 96%|| 76/79 [00:04<00:00, 25.08it/s]
100%|| 79/79 [00:04<00:00, 26.07it/s]
, 23.35it/s]
 70%|   | 55/79 [00:03<00:01, 23.74it/s]
 73%|  | 58/79 [00:03<00:00, 24.11it/s]
 77%|  | 61/79 [00:03<00:00, 24.47it/s]
 81%|  | 64/79 [00:03<00:00, 24.58it/s]
 85%| | 67/79 [00:03<00:00, 24.82it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 25.00it/s]
 96%|| 76/79 [00:04<00:00, 25.83it/s]
100%|| 79/79 [00:04<00:00, 26.53it/s]
, 22.74it/s]
 70%|   | 55/79 [00:03<00:01, 23.18it/s]
 73%|  | 58/79 [00:03<00:00, 23.88it/s]
 77%|  | 61/79 [00:03<00:00, 23.86it/s]
 81%|  | 64/79 [00:03<00:00, 23.92it/s]
 85%| | 67/79 [00:03<00:00, 24.23it/s]
 89%| | 70/79 [00:03<00:00, 24.29it/s]
 92%|| 73/79 [00:03<00:00, 24.72it/s]
 96%|| 76/79 [00:04<00:00, 25.60it/s]
100%|| 79/79 [00:04<00:00, 26.44it/s]
, 22.91it/s]
 70%|   | 55/79 [00:03<00:01, 23.28it/s]
 73%|  | 58/79 [00:03<00:00, 23.73it/s]
 77%|  | 61/79 [00:03<00:00, 23.54it/s]
 81%|  | 64/79 [00:03<00:00, 23.85it/s]
 85%| | 67/79 [00:03<00:00, 23.94it/s]
 89%| | 70/79 [00:03<00:00, 24.22it/s]
 92%|| 73/79 [00:03<00:00, 24.33it/s]
 96%|| 76/79 [00:04<00:00, 25.11it/s]
100%|| 79/79 [00:04<00:00, 26.11it/s]
, 24.66it/s]
 70%|   | 55/79 [00:03<00:00, 25.30it/s]
 73%|  | 58/79 [00:03<00:00, 25.60it/s]
 77%|  | 61/79 [00:03<00:00, 25.65it/s]
 81%|  | 64/79 [00:03<00:00, 25.59it/s]
 85%| | 67/79 [00:03<00:00, 25.82it/s]
 89%| | 70/79 [00:03<00:00, 25.44it/s]
 92%|| 73/79 [00:03<00:00, 25.87it/s]
 96%|| 76/79 [00:03<00:00, 26.27it/s]
100%|| 79/79 [00:04<00:00,  8.63it/s]
, 23.63it/s]
 70%|   | 55/79 [00:03<00:01, 23.74it/s]
 73%|  | 58/79 [00:03<00:00, 24.05it/s]
 77%|  | 61/79 [00:03<00:00, 24.44it/s]
 81%|  | 64/79 [00:03<00:00, 24.48it/s]
 85%| | 67/79 [00:03<00:00, 24.36it/s]
 89%| | 70/79 [00:03<00:00, 24.65it/s]
 92%|| 73/79 [00:03<00:00, 25.04it/s]
 96%|| 76/79 [00:03<00:00, 25.88it/s]
100%|| 79/79 [00:04<00:00,  8.66it/s]
, 24.00it/s]
 70%|   | 55/79 [00:03<00:00, 24.16it/s]
 73%|  | 58/79 [00:03<00:00, 24.27it/s]
 77%|  | 61/79 [00:03<00:00, 24.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.41it/s]
 85%| | 67/79 [00:03<00:00, 24.62it/s]
 89%| | 70/79 [00:03<00:00, 24.66it/s]
 92%|| 73/79 [00:03<00:00, 24.77it/s]
 96%|| 76/79 [00:03<00:00, 25.55it/s]
100%|| 79/79 [00:04<00:00,  8.65it/s]
, 23.58it/s]
 70%|   | 55/79 [00:03<00:00, 24.15it/s]
 73%|  | 58/79 [00:03<00:00, 24.21it/s]
 77%|  | 61/79 [00:03<00:00, 24.13it/s]
 81%|  | 64/79 [00:03<00:00, 24.31it/s]
 85%| | 67/79 [00:03<00:00, 24.46it/s]
 89%| | 70/79 [00:03<00:00, 24.47it/s]
 92%|| 73/79 [00:03<00:00, 25.25it/s]
 96%|| 76/79 [00:03<00:00, 26.00it/s]
100%|| 79/79 [00:04<00:00,  8.70it/s]
, 23.95it/s]
 70%|   | 55/79 [00:03<00:00, 24.49it/s]
 73%|  | 58/79 [00:03<00:00, 24.60it/s]
 77%|  | 61/79 [00:03<00:00, 24.43it/s]
 81%|  | 64/79 [00:03<00:00, 24.73it/s]
 85%| | 67/79 [00:03<00:00, 24.76it/s]
 89%| | 70/79 [00:03<00:00, 24.81it/s]
 92%|| 73/79 [00:03<00:00, 25.27it/s]
 96%|| 76/79 [00:03<00:00, 25.81it/s]
100%|| 79/79 [00:04<00:00,  8.57it/s]
, 24.20it/s]
 70%|   | 55/79 [00:03<00:00, 24.49it/s]
 73%|  | 58/79 [00:03<00:00, 25.05it/s]
 77%|  | 61/79 [00:03<00:00, 24.80it/s]
 81%|  | 64/79 [00:03<00:00, 25.10it/s]
 85%| | 67/79 [00:03<00:00, 25.10it/s]
 89%| | 70/79 [00:03<00:00, 25.03it/s]
 92%|| 73/79 [00:03<00:00, 25.54it/s]
 96%|| 76/79 [00:03<00:00, 26.09it/s]
100%|| 79/79 [00:04<00:00,  8.66it/s]
, 23.83it/s]
 70%|   | 55/79 [00:03<00:00, 24.33it/s]
 73%|  | 58/79 [00:03<00:00, 24.56it/s]
 77%|  | 61/79 [00:03<00:00, 24.48it/s]
 81%|  | 64/79 [00:03<00:00, 24.56it/s]
 85%| | 67/79 [00:03<00:00, 24.46it/s]
 89%| | 70/79 [00:03<00:00, 24.63it/s]
 92%|| 73/79 [00:03<00:00, 24.75it/s]
 96%|| 76/79 [00:03<00:00, 25.53it/s]
100%|| 79/79 [00:04<00:00,  8.61it/s]
, 23.32it/s]
 70%|   | 55/79 [00:03<00:01, 23.48it/s]
 73%|  | 58/79 [00:03<00:00, 23.97it/s]
 77%|  | 61/79 [00:03<00:00, 24.32it/s]
 81%|  | 64/79 [00:03<00:00, 24.47it/s]
 85%| | 67/79 [00:03<00:00, 24.64it/s]
 89%| | 70/79 [00:03<00:00, 24.97it/s]
 92%|| 73/79 [00:03<00:00, 25.08it/s]
 96%|| 76/79 [00:03<00:00, 25.76it/s]
100%|| 79/79 [00:04<00:00,  8.62it/s]
, 23.45it/s]
 70%|   | 55/79 [00:03<00:01, 23.71it/s]
 73%|  | 58/79 [00:03<00:00, 24.11it/s]
 77%|  | 61/79 [00:03<00:00, 23.89it/s]
 81%|  | 64/79 [00:03<00:00, 24.21it/s]
 85%| | 67/79 [00:03<00:00, 24.38it/s]
 89%| | 70/79 [00:03<00:00, 24.22it/s]
 92%|| 73/79 [00:03<00:00, 24.79it/s]
 96%|| 76/79 [00:03<00:00, 25.55it/s]
100%|| 79/79 [00:04<00:00,  8.41it/s]
, 23.34it/s]
 70%|   | 55/79 [00:03<00:01, 23.37it/s]
 73%|  | 58/79 [00:03<00:00, 24.02it/s]
 77%|  | 61/79 [00:03<00:00, 23.93it/s]
 81%|  | 64/79 [00:03<00:00, 24.06it/s]
 85%| | 67/79 [00:03<00:00, 24.29it/s]
 89%| | 70/79 [00:03<00:00, 24.51it/s]
 92%|| 73/79 [00:03<00:00, 24.67it/s]
 96%|| 76/79 [00:03<00:00, 25.49it/s]
100%|| 79/79 [00:04<00:00,  8.49it/s]
, 23.54it/s]
 70%|   | 55/79 [00:03<00:01, 23.92it/s]
 73%|  | 58/79 [00:03<00:00, 24.33it/s]
 77%|  | 61/79 [00:03<00:00, 24.31it/s]
 81%|  | 64/79 [00:03<00:00, 24.42it/s]
 85%| | 67/79 [00:03<00:00, 24.66it/s]
 89%| | 70/79 [00:03<00:00, 24.75it/s]
 92%|| 73/79 [00:03<00:00, 25.19it/s]
 96%|| 76/79 [00:03<00:00, 25.75it/s]
100%|| 79/79 [00:04<00:00,  8.48it/s]
, 22.99it/s]
 70%|   | 55/79 [00:03<00:01, 23.07it/s]
 73%|  | 58/79 [00:03<00:00, 23.36it/s]
 77%|  | 61/79 [00:03<00:00, 23.64it/s]
 81%|  | 64/79 [00:03<00:00, 23.72it/s]
 85%| | 67/79 [00:03<00:00, 23.83it/s]
 89%| | 70/79 [00:03<00:00, 24.02it/s]
 92%|| 73/79 [00:03<00:00, 24.17it/s]
 96%|| 76/79 [00:04<00:00, 24.93it/s]
100%|| 79/79 [00:04<00:00,  8.38it/s]
, 22.76it/s]
 70%|   | 55/79 [00:03<00:01, 23.41it/s]
 73%|  | 58/79 [00:03<00:00, 23.64it/s]
 77%|  | 61/79 [00:03<00:00, 23.95it/s]
 81%|  | 64/79 [00:03<00:00, 24.16it/s]
 85%| | 67/79 [00:03<00:00, 24.34it/s]
 89%| | 70/79 [00:03<00:00, 24.36it/s]
 92%|| 73/79 [00:03<00:00, 24.27it/s]
 96%|| 76/79 [00:04<00:00, 24.72it/s]
100%|| 79/79 [00:05<00:00,  8.38it/s]
2020-06-23 15:52:31,584 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:05.113371 (0.03272557678222656 s / img per device, on 32 devices)
2020-06-23 15:52:31,606 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:52:31,606 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:52:31,628 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592952765107, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 2, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592952765108, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 2}}
2020-06-23 15:52:45,440 maskrcnn_benchmark.trainer INFO: eta: 1:30:25  iter: 920  loss: 0.8605 (1.1212)  loss_classifier: 0.3537 (0.4318)  loss_box_reg: 0.1457 (0.1556)  loss_mask: 0.3116 (0.4360)  loss_objectness: 0.0395 (0.0722)  loss_rpn_box_reg: 0.0112 (0.0257)  time: 0.1084 (0.1388)  data: 0.0015 (0.0243)  lr: 0.160000  max mem: 4920
Evaluating predictions
creating index...
2020-06-23 15:52:47,575 maskrcnn_benchmark.trainer INFO: eta: 1:29:56  iter: 940  loss: 0.9271 (1.1173)  loss_classifier: 0.3732 (0.4302)  loss_box_reg: 0.1524 (0.1556)  loss_mask: 0.3427 (0.4340)  loss_objectness: 0.0298 (0.0717)  loss_rpn_box_reg: 0.0136 (0.0257)  time: 0.1060 (0.1382)  data: 0.0014 (0.0238)  lr: 0.160000  max mem: 4920
2020-06-23 15:52:49,715 maskrcnn_benchmark.trainer INFO: eta: 1:29:28  iter: 960  loss: 0.8830 (1.1124)  loss_classifier: 0.3168 (0.4279)  loss_box_reg: 0.1375 (0.1553)  loss_mask: 0.3118 (0.4316)  loss_objectness: 0.0488 (0.0714)  loss_rpn_box_reg: 0.0214 (0.0260)  time: 0.1071 (0.1375)  data: 0.0015 (0.0234)  lr: 0.160000  max mem: 4920
2020-06-23 15:52:51,853 maskrcnn_benchmark.trainer INFO: eta: 1:29:01  iter: 980  loss: 0.8128 (1.1070)  loss_classifier: 0.2999 (0.4259)  loss_box_reg: 0.1137 (0.1550)  loss_mask: 0.3172 (0.4295)  loss_objectness: 0.0263 (0.0708)  loss_rpn_box_reg: 0.0094 (0.0258)  time: 0.1061 (0.1369)  data: 0.0015 (0.0229)  lr: 0.160000  max mem: 4920
2020-06-23 15:52:53,976 maskrcnn_benchmark.trainer INFO: eta: 1:28:34  iter: 1000  loss: 0.9004 (1.1026)  loss_classifier: 0.3570 (0.4243)  loss_box_reg: 0.1494 (0.1550)  loss_mask: 0.3033 (0.4272)  loss_objectness: 0.0318 (0.0703)  loss_rpn_box_reg: 0.0181 (0.0258)  time: 0.1060 (0.1363)  data: 0.0015 (0.0225)  lr: 0.160000  max mem: 4920
2020-06-23 15:52:56,090 maskrcnn_benchmark.trainer INFO: eta: 1:28:08  iter: 1020  loss: 0.8316 (1.0983)  loss_classifier: 0.3059 (0.4226)  loss_box_reg: 0.1434 (0.1549)  loss_mask: 0.3227 (0.4253)  loss_objectness: 0.0278 (0.0698)  loss_rpn_box_reg: 0.0100 (0.0258)  time: 0.1056 (0.1357)  data: 0.0014 (0.0221)  lr: 0.160000  max mem: 4920
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=1.16s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 15:52:58,230 maskrcnn_benchmark.trainer INFO: eta: 1:27:44  iter: 1040  loss: 0.7352 (1.0914)  loss_classifier: 0.2486 (0.4195)  loss_box_reg: 0.1071 (0.1541)  loss_mask: 0.3160 (0.4231)  loss_objectness: 0.0302 (0.0691)  loss_rpn_box_reg: 0.0085 (0.0256)  time: 0.1070 (0.1351)  data: 0.0014 (0.0217)  lr: 0.160000  max mem: 4920
DONE (t=2.08s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.14031
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.29921
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.11284
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.07206
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.16226
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.17843
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.16034
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.28136
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.29866
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15646
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.32377
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.36876
2020-06-23 15:53:00,380 maskrcnn_benchmark.trainer INFO: eta: 1:27:21  iter: 1060  loss: 0.8967 (1.0874)  loss_classifier: 0.3340 (0.4178)  loss_box_reg: 0.1609 (0.1540)  loss_mask: 0.3242 (0.4214)  loss_objectness: 0.0300 (0.0686)  loss_rpn_box_reg: 0.0133 (0.0256)  time: 0.1072 (0.1346)  data: 0.0015 (0.0213)  lr: 0.160000  max mem: 4920
2020-06-23 15:53:02,525 maskrcnn_benchmark.trainer INFO: eta: 1:26:58  iter: 1080  loss: 0.7693 (1.0821)  loss_classifier: 0.2764 (0.4156)  loss_box_reg: 0.1322 (0.1537)  loss_mask: 0.3177 (0.4193)  loss_objectness: 0.0295 (0.0679)  loss_rpn_box_reg: 0.0094 (0.0255)  time: 0.1067 (0.1341)  data: 0.0015 (0.0209)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:04,654 maskrcnn_benchmark.trainer INFO: eta: 1:26:36  iter: 1100  loss: 0.6976 (1.0769)  loss_classifier: 0.2348 (0.4131)  loss_box_reg: 0.1180 (0.1532)  loss_mask: 0.2940 (0.4175)  loss_objectness: 0.0347 (0.0675)  loss_rpn_box_reg: 0.0172 (0.0255)  time: 0.1067 (0.1336)  data: 0.0014 (0.0206)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:06,783 maskrcnn_benchmark.trainer INFO: eta: 1:26:15  iter: 1120  loss: 0.8300 (1.0728)  loss_classifier: 0.3125 (0.4112)  loss_box_reg: 0.1617 (0.1531)  loss_mask: 0.3202 (0.4159)  loss_objectness: 0.0281 (0.0670)  loss_rpn_box_reg: 0.0079 (0.0255)  time: 0.1059 (0.1331)  data: 0.0015 (0.0203)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:08,912 maskrcnn_benchmark.trainer INFO: eta: 1:25:54  iter: 1140  loss: 0.6918 (1.0665)  loss_classifier: 0.2512 (0.4085)  loss_box_reg: 0.0974 (0.1524)  loss_mask: 0.2893 (0.4139)  loss_objectness: 0.0194 (0.0664)  loss_rpn_box_reg: 0.0070 (0.0253)  time: 0.1055 (0.1326)  data: 0.0014 (0.0199)  lr: 0.160000  max mem: 4985
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:53:11,046 maskrcnn_benchmark.trainer INFO: eta: 1:25:34  iter: 1160  loss: 0.8451 (1.0625)  loss_classifier: 0.2993 (0.4066)  loss_box_reg: 0.1520 (0.1523)  loss_mask: 0.3202 (0.4124)  loss_objectness: 0.0271 (0.0659)  loss_rpn_box_reg: 0.0096 (0.0253)  time: 0.1058 (0.1322)  data: 0.0015 (0.0196)  lr: 0.160000  max mem: 4985
DONE (t=3.33s)
2020-06-23 15:53:13,151 maskrcnn_benchmark.trainer INFO: eta: 1:25:13  iter: 1180  loss: 0.8656 (1.0594)  loss_classifier: 0.2939 (0.4049)  loss_box_reg: 0.1309 (0.1521)  loss_mask: 0.3441 (0.4113)  loss_objectness: 0.0326 (0.0656)  loss_rpn_box_reg: 0.0151 (0.0254)  time: 0.1046 (0.1317)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 4985
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:53:15,284 maskrcnn_benchmark.trainer INFO: eta: 1:24:54  iter: 1200  loss: 0.8140 (1.0557)  loss_classifier: 0.3171 (0.4034)  loss_box_reg: 0.1350 (0.1520)  loss_mask: 0.3108 (0.4097)  loss_objectness: 0.0426 (0.0653)  loss_rpn_box_reg: 0.0155 (0.0253)  time: 0.1061 (0.1313)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 4985
DONE (t=3.54s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.14546
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.28275
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.13830
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.05178
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.16460
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.21718
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.16690
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.27841
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.29325
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.14077
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.32321
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.37877
2020-06-23 15:53:17,344 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.14030917078695365, segm mAP: 0.14546191855726226
:::MLLOG {"namespace": "", "time_ms": 1592952797345, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.14030917078695365, "SEGM": 0.14546191855726226}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592952797345, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 1}}
2020-06-23 15:53:17,667 maskrcnn_benchmark.trainer INFO: eta: 1:24:44  iter: 1220  loss: 0.9017 (1.0526)  loss_classifier: 0.3219 (0.4020)  loss_box_reg: 0.1477 (0.1520)  loss_mask: 0.3343 (0.4085)  loss_objectness: 0.0342 (0.0648)  loss_rpn_box_reg: 0.0116 (0.0253)  time: 0.1064 (0.1311)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:19,786 maskrcnn_benchmark.trainer INFO: eta: 1:24:26  iter: 1240  loss: 0.7577 (1.0483)  loss_classifier: 0.2651 (0.4001)  loss_box_reg: 0.1199 (0.1516)  loss_mask: 0.3243 (0.4072)  loss_objectness: 0.0270 (0.0643)  loss_rpn_box_reg: 0.0109 (0.0252)  time: 0.1052 (0.1307)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:21,910 maskrcnn_benchmark.trainer INFO: eta: 1:24:08  iter: 1260  loss: 0.8443 (1.0453)  loss_classifier: 0.3388 (0.3994)  loss_box_reg: 0.1428 (0.1514)  loss_mask: 0.3092 (0.4055)  loss_objectness: 0.0277 (0.0639)  loss_rpn_box_reg: 0.0095 (0.0252)  time: 0.1055 (0.1303)  data: 0.0015 (0.0182)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:24,034 maskrcnn_benchmark.trainer INFO: eta: 1:23:51  iter: 1280  loss: 0.6831 (1.0407)  loss_classifier: 0.2477 (0.3973)  loss_box_reg: 0.1039 (0.1507)  loss_mask: 0.3155 (0.4043)  loss_objectness: 0.0206 (0.0633)  loss_rpn_box_reg: 0.0064 (0.0250)  time: 0.1059 (0.1299)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:26,160 maskrcnn_benchmark.trainer INFO: eta: 1:23:34  iter: 1300  loss: 0.8189 (1.0374)  loss_classifier: 0.2899 (0.3959)  loss_box_reg: 0.1308 (0.1505)  loss_mask: 0.3191 (0.4030)  loss_objectness: 0.0316 (0.0630)  loss_rpn_box_reg: 0.0130 (0.0250)  time: 0.1064 (0.1296)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:28,298 maskrcnn_benchmark.trainer INFO: eta: 1:23:18  iter: 1320  loss: 0.9050 (1.0347)  loss_classifier: 0.3306 (0.3948)  loss_box_reg: 0.1606 (0.1505)  loss_mask: 0.3153 (0.4018)  loss_objectness: 0.0339 (0.0626)  loss_rpn_box_reg: 0.0146 (0.0250)  time: 0.1070 (0.1292)  data: 0.0015 (0.0174)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:30,443 maskrcnn_benchmark.trainer INFO: eta: 1:23:03  iter: 1340  loss: 0.8985 (1.0327)  loss_classifier: 0.3083 (0.3939)  loss_box_reg: 0.1465 (0.1506)  loss_mask: 0.3225 (0.4007)  loss_objectness: 0.0420 (0.0624)  loss_rpn_box_reg: 0.0208 (0.0252)  time: 0.1072 (0.1289)  data: 0.0015 (0.0172)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:32,562 maskrcnn_benchmark.trainer INFO: eta: 1:22:47  iter: 1360  loss: 0.8113 (1.0291)  loss_classifier: 0.2922 (0.3922)  loss_box_reg: 0.1367 (0.1502)  loss_mask: 0.3124 (0.3996)  loss_objectness: 0.0284 (0.0619)  loss_rpn_box_reg: 0.0120 (0.0251)  time: 0.1060 (0.1286)  data: 0.0015 (0.0169)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:34,703 maskrcnn_benchmark.trainer INFO: eta: 1:22:33  iter: 1380  loss: 0.8802 (1.0273)  loss_classifier: 0.3123 (0.3914)  loss_box_reg: 0.1300 (0.1503)  loss_mask: 0.3140 (0.3984)  loss_objectness: 0.0350 (0.0620)  loss_rpn_box_reg: 0.0172 (0.0252)  time: 0.1063 (0.1283)  data: 0.0015 (0.0167)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:36,834 maskrcnn_benchmark.trainer INFO: eta: 1:22:18  iter: 1400  loss: 0.9090 (1.0252)  loss_classifier: 0.3296 (0.3903)  loss_box_reg: 0.1554 (0.1503)  loss_mask: 0.3293 (0.3976)  loss_objectness: 0.0399 (0.0619)  loss_rpn_box_reg: 0.0130 (0.0252)  time: 0.1060 (0.1279)  data: 0.0015 (0.0165)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:38,987 maskrcnn_benchmark.trainer INFO: eta: 1:22:05  iter: 1420  loss: 0.8692 (1.0225)  loss_classifier: 0.3054 (0.3891)  loss_box_reg: 0.1550 (0.1502)  loss_mask: 0.3171 (0.3965)  loss_objectness: 0.0350 (0.0616)  loss_rpn_box_reg: 0.0102 (0.0252)  time: 0.1065 (0.1277)  data: 0.0015 (0.0163)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:41,109 maskrcnn_benchmark.trainer INFO: eta: 1:21:51  iter: 1440  loss: 0.7536 (1.0200)  loss_classifier: 0.2731 (0.3879)  loss_box_reg: 0.1263 (0.1501)  loss_mask: 0.3165 (0.3952)  loss_objectness: 0.0282 (0.0616)  loss_rpn_box_reg: 0.0120 (0.0252)  time: 0.1056 (0.1274)  data: 0.0015 (0.0161)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:43,248 maskrcnn_benchmark.trainer INFO: eta: 1:21:37  iter: 1460  loss: 0.7583 (1.0174)  loss_classifier: 0.2861 (0.3867)  loss_box_reg: 0.1290 (0.1501)  loss_mask: 0.2941 (0.3940)  loss_objectness: 0.0348 (0.0614)  loss_rpn_box_reg: 0.0140 (0.0252)  time: 0.1068 (0.1271)  data: 0.0015 (0.0159)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:45,362 maskrcnn_benchmark.trainer INFO: eta: 1:21:24  iter: 1480  loss: 0.8638 (1.0156)  loss_classifier: 0.3099 (0.3860)  loss_box_reg: 0.1509 (0.1501)  loss_mask: 0.3208 (0.3931)  loss_objectness: 0.0295 (0.0612)  loss_rpn_box_reg: 0.0112 (0.0252)  time: 0.1054 (0.1268)  data: 0.0015 (0.0157)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:47,502 maskrcnn_benchmark.trainer INFO: eta: 1:21:11  iter: 1500  loss: 0.8504 (1.0140)  loss_classifier: 0.2729 (0.3851)  loss_box_reg: 0.1409 (0.1501)  loss_mask: 0.3448 (0.3924)  loss_objectness: 0.0409 (0.0610)  loss_rpn_box_reg: 0.0180 (0.0253)  time: 0.1056 (0.1265)  data: 0.0015 (0.0155)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:49,635 maskrcnn_benchmark.trainer INFO: eta: 1:20:58  iter: 1520  loss: 0.9167 (1.0123)  loss_classifier: 0.3395 (0.3843)  loss_box_reg: 0.1614 (0.1502)  loss_mask: 0.3163 (0.3914)  loss_objectness: 0.0350 (0.0609)  loss_rpn_box_reg: 0.0193 (0.0255)  time: 0.1067 (0.1263)  data: 0.0015 (0.0153)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:51,803 maskrcnn_benchmark.trainer INFO: eta: 1:20:47  iter: 1540  loss: 0.7713 (1.0092)  loss_classifier: 0.2745 (0.3830)  loss_box_reg: 0.1294 (0.1500)  loss_mask: 0.3037 (0.3903)  loss_objectness: 0.0225 (0.0605)  loss_rpn_box_reg: 0.0078 (0.0254)  time: 0.1074 (0.1260)  data: 0.0015 (0.0151)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:53,967 maskrcnn_benchmark.trainer INFO: eta: 1:20:36  iter: 1560  loss: 0.7070 (1.0062)  loss_classifier: 0.2504 (0.3817)  loss_box_reg: 0.1187 (0.1496)  loss_mask: 0.2997 (0.3892)  loss_objectness: 0.0227 (0.0603)  loss_rpn_box_reg: 0.0107 (0.0253)  time: 0.1079 (0.1258)  data: 0.0015 (0.0150)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:56,124 maskrcnn_benchmark.trainer INFO: eta: 1:20:24  iter: 1580  loss: 0.7712 (1.0032)  loss_classifier: 0.2576 (0.3802)  loss_box_reg: 0.1228 (0.1493)  loss_mask: 0.3395 (0.3884)  loss_objectness: 0.0293 (0.0600)  loss_rpn_box_reg: 0.0125 (0.0253)  time: 0.1075 (0.1256)  data: 0.0015 (0.0148)  lr: 0.160000  max mem: 4985
2020-06-23 15:53:58,265 maskrcnn_benchmark.trainer INFO: eta: 1:20:13  iter: 1600  loss: 0.8431 (1.0011)  loss_classifier: 0.2690 (0.3793)  loss_box_reg: 0.1458 (0.1491)  loss_mask: 0.3368 (0.3876)  loss_objectness: 0.0217 (0.0598)  loss_rpn_box_reg: 0.0089 (0.0252)  time: 0.1072 (0.1253)  data: 0.0015 (0.0146)  lr: 0.160000  max mem: 4985
2020-06-23 15:54:00,406 maskrcnn_benchmark.trainer INFO: eta: 1:20:02  iter: 1620  loss: 0.8340 (0.9997)  loss_classifier: 0.3290 (0.3788)  loss_box_reg: 0.1327 (0.1490)  loss_mask: 0.3245 (0.3869)  loss_objectness: 0.0365 (0.0597)  loss_rpn_box_reg: 0.0134 (0.0253)  time: 0.1063 (0.1251)  data: 0.0015 (0.0145)  lr: 0.160000  max mem: 4985
2020-06-23 15:54:02,559 maskrcnn_benchmark.trainer INFO: eta: 1:19:51  iter: 1640  loss: 0.7581 (0.9974)  loss_classifier: 0.2934 (0.3781)  loss_box_reg: 0.1166 (0.1488)  loss_mask: 0.2841 (0.3859)  loss_objectness: 0.0290 (0.0595)  loss_rpn_box_reg: 0.0108 (0.0252)  time: 0.1073 (0.1249)  data: 0.0015 (0.0143)  lr: 0.160000  max mem: 4985
2020-06-23 15:54:04,711 maskrcnn_benchmark.trainer INFO: eta: 1:19:41  iter: 1660  loss: 0.7902 (0.9951)  loss_classifier: 0.2684 (0.3770)  loss_box_reg: 0.1196 (0.1485)  loss_mask: 0.3190 (0.3851)  loss_objectness: 0.0268 (0.0593)  loss_rpn_box_reg: 0.0100 (0.0252)  time: 0.1069 (0.1247)  data: 0.0014 (0.0142)  lr: 0.160000  max mem: 4985
2020-06-23 15:54:06,844 maskrcnn_benchmark.trainer INFO: eta: 1:19:30  iter: 1680  loss: 0.7252 (0.9926)  loss_classifier: 0.2424 (0.3760)  loss_box_reg: 0.1056 (0.1482)  loss_mask: 0.3156 (0.3842)  loss_objectness: 0.0199 (0.0590)  loss_rpn_box_reg: 0.0081 (0.0252)  time: 0.1059 (0.1245)  data: 0.0014 (0.0140)  lr: 0.160000  max mem: 4985
2020-06-23 15:54:08,992 maskrcnn_benchmark.trainer INFO: eta: 1:19:20  iter: 1700  loss: 0.8773 (0.9914)  loss_classifier: 0.3303 (0.3754)  loss_box_reg: 0.1615 (0.1484)  loss_mask: 0.3315 (0.3836)  loss_objectness: 0.0301 (0.0588)  loss_rpn_box_reg: 0.0167 (0.0252)  time: 0.1072 (0.1243)  data: 0.0016 (0.0139)  lr: 0.160000  max mem: 4985
2020-06-23 15:54:11,127 maskrcnn_benchmark.trainer INFO: eta: 1:19:09  iter: 1720  loss: 0.7736 (0.9890)  loss_classifier: 0.3070 (0.3746)  loss_box_reg: 0.1172 (0.1481)  loss_mask: 0.2891 (0.3826)  loss_objectness: 0.0245 (0.0585)  loss_rpn_box_reg: 0.0108 (0.0252)  time: 0.1064 (0.1241)  data: 0.0015 (0.0137)  lr: 0.160000  max mem: 4985
2020-06-23 15:54:13,252 maskrcnn_benchmark.trainer INFO: eta: 1:18:59  iter: 1740  loss: 0.6963 (0.9863)  loss_classifier: 0.2761 (0.3736)  loss_box_reg: 0.1119 (0.1478)  loss_mask: 0.2775 (0.3815)  loss_objectness: 0.0375 (0.0584)  loss_rpn_box_reg: 0.0118 (0.0252)  time: 0.1064 (0.1239)  data: 0.0015 (0.0136)  lr: 0.160000  max mem: 4985
2020-06-23 15:54:15,372 maskrcnn_benchmark.trainer INFO: eta: 1:18:49  iter: 1760  loss: 0.7660 (0.9841)  loss_classifier: 0.2865 (0.3726)  loss_box_reg: 0.1253 (0.1476)  loss_mask: 0.3268 (0.3807)  loss_objectness: 0.0229 (0.0582)  loss_rpn_box_reg: 0.0121 (0.0251)  time: 0.1058 (0.1237)  data: 0.0015 (0.0134)  lr: 0.160000  max mem: 4985
2020-06-23 15:54:17,512 maskrcnn_benchmark.trainer INFO: eta: 1:18:39  iter: 1780  loss: 0.6944 (0.9819)  loss_classifier: 0.2618 (0.3717)  loss_box_reg: 0.1279 (0.1473)  loss_mask: 0.2989 (0.3800)  loss_objectness: 0.0231 (0.0579)  loss_rpn_box_reg: 0.0081 (0.0250)  time: 0.1059 (0.1235)  data: 0.0014 (0.0133)  lr: 0.160000  max mem: 4985
2020-06-23 15:54:19,652 maskrcnn_benchmark.trainer INFO: eta: 1:18:30  iter: 1800  loss: 0.7730 (0.9799)  loss_classifier: 0.2580 (0.3708)  loss_box_reg: 0.1190 (0.1472)  loss_mask: 0.3056 (0.3791)  loss_objectness: 0.0495 (0.0579)  loss_rpn_box_reg: 0.0185 (0.0250)  time: 0.1073 (0.1233)  data: 0.0015 (0.0132)  lr: 0.160000  max mem: 5011
2020-06-23 15:54:21,786 maskrcnn_benchmark.trainer INFO: eta: 1:18:20  iter: 1820  loss: 0.7616 (0.9777)  loss_classifier: 0.2913 (0.3699)  loss_box_reg: 0.1232 (0.1470)  loss_mask: 0.2994 (0.3783)  loss_objectness: 0.0267 (0.0576)  loss_rpn_box_reg: 0.0093 (0.0249)  time: 0.1068 (0.1231)  data: 0.0014 (0.0130)  lr: 0.160000  max mem: 5011
:::MLLOG {"namespace": "", "time_ms": 1592952864385, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1592952864386, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1592952864386, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 2}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 15:54:24,636 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.30s)
creating index...
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 15:54:24,958 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  4%|         | 3/79 [00:01<00:53,  1.41it/s]
  8%|         | 6/79 [00:01<00:37,  1.96it/s]
 11%|        | 9/79 [00:01<00:25,  2.72it/s]
 15%|        | 12/79 [00:01<00:18,  3.72it/s]
 19%|        | 15/79 [00:01<00:12,  5.01it/s]
 23%|       | 18/79 [00:01<00:09,  6.61it/s]
 27%|       | 21/79 [00:01<00:06,  8.50it/s]
 30%|       | 24/79 [00:01<00:05, 10.64it/s]
 34%|      | 27/79 [00:02<00:04, 12.71it/s]
 38%|      | 30/79 [00:02<00:03, 14.94it/s]
 42%|     | 33/79 [00:02<00:02, 17.03it/s]
 46%|     | 36/79 [00:02<00:02, 18.98it/s]
 49%|     | 39/79 [00:02<00:01, 20.71it/s]
 53%|    | 42/79 [00:02<00:01, 22.09it/s]
 57%|    | 45/79 [00:02<00:01, 23.24it/s]
 61%|    | 48/79 [00:02<00:01, 24.09it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  3%|         | 2/79 [00:01<00:53,  1.45it/s]
  6%|         | 5/79 [00:01<00:36,  2.02it/s]
 10%|         | 8/79 [00:01<00:25,  2.78it/s]
 14%|        | 11/79 [00:01<00:17,  3.80it/s]
 18%|        | 14/79 [00:01<00:12,  5.10it/s]
 22%|       | 17/79 [00:01<00:09,  6.70it/s]
 25%|       | 20/79 [00:01<00:06,  8.60it/s]
 29%|       | 23/79 [00:01<00:05, 10.72it/s]
 33%|      | 26/79 [00:02<00:04, 12.92it/s]
 37%|      | 29/79 [00:02<00:03, 15.12it/s]
 41%|      | 32/79 [00:02<00:02, 17.22it/s]
 44%|     | 35/79 [00:02<00:02, 19.11it/s]
 48%|     | 38/79 [00:02<00:01, 20.74it/s]
 52%|    | 41/79 [00:02<00:01, 21.75it/s]
 56%|    | 44/79 [00:02<00:01, 23.01it/s]
 59%|    | 47/79 [00:02<00:01, 23.75it/s]
 63%|   | 50/79 [00:02<00:01, 24.01it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:19,  1.02s/it]
  4%|         | 3/79 [00:01<00:55,  1.37it/s]
  8%|         | 6/79 [00:01<00:38,  1.90it/s]
 11%|        | 9/79 [00:01<00:26,  2.63it/s]
 15%|        | 12/79 [00:01<00:18,  3.60it/s]
 19%|        | 15/79 [00:01<00:13,  4.86it/s]
 23%|       | 18/79 [00:01<00:09,  6.42it/s]
 27%|       | 21/79 [00:01<00:07,  8.27it/s]
 30%|       | 24/79 [00:01<00:05, 10.35it/s]
 34%|      | 27/79 [00:02<00:04, 12.58it/s]
 38%|      | 30/79 [00:02<00:03, 14.87it/s]
 42%|     | 33/79 [00:02<00:02, 16.99it/s]
 46%|     | 36/79 [00:02<00:02, 18.90it/s]
 49%|     | 39/79 [00:02<00:01, 20.37it/s]
 53%|    | 42/79 [00:02<00:01, 21.69it/s]
 57%|    | 45/79 [00:02<00:01, 22.37it/s]
 61%|    | 48/79 [00:02<00:01, 23.22it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:23,  1.07s/it]
  5%|         | 4/79 [00:01<00:57,  1.31it/s]
  9%|         | 7/79 [00:01<00:39,  1.84it/s]
 13%|        | 10/79 [00:01<00:27,  2.55it/s]
 16%|        | 13/79 [00:01<00:18,  3.49it/s]
 20%|        | 16/79 [00:01<00:13,  4.72it/s]
 24%|       | 19/79 [00:01<00:09,  6.23it/s]
 28%|       | 22/79 [00:01<00:07,  8.09it/s]
 32%|      | 25/79 [00:02<00:05, 10.25it/s]
 35%|      | 28/79 [00:02<00:04, 12.47it/s]
 39%|      | 31/79 [00:02<00:03, 14.73it/s]
 43%|     | 34/79 [00:02<00:02, 16.93it/s]
 47%|     | 37/79 [00:02<00:02, 18.91it/s]
 51%|     | 40/79 [00:02<00:01, 20.50it/s]
 54%|    | 43/79 [00:02<00:01, 22.03it/s]
 58%|    | 46/79 [00:02<00:01, 22.98it/s]
 62%|   | 49/79 [00:02<00:01, 23.70it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:22,  1.05s/it]
  5%|         | 4/79 [00:01<00:56,  1.33it/s]
  9%|         | 7/79 [00:01<00:38,  1.86it/s]
 13%|        | 10/79 [00:01<00:26,  2.57it/s]
 16%|        | 13/79 [00:01<00:18,  3.53it/s]
 20%|        | 16/79 [00:01<00:13,  4.76it/s]
 24%|       | 19/79 [00:01<00:09,  6.31it/s]
 28%|       | 22/79 [00:01<00:06,  8.17it/s]
 32%|      | 25/79 [00:01<00:05, 10.26it/s]
 35%|      | 28/79 [00:02<00:04, 12.57it/s]
 39%|      | 31/79 [00:02<00:03, 14.91it/s]
 43%|     | 34/79 [00:02<00:02, 17.04it/s]
 47%|     | 37/79 [00:02<00:02, 19.03it/s]
 51%|     | 40/79 [00:02<00:01, 20.63it/s]
 54%|    | 43/79 [00:02<00:01, 21.87it/s]
 58%|    | 46/79 [00:02<00:01, 22.86it/s]
 62%|   | 49/79 [00:02<00:01, 23.56it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:23,  1.07s/it]
  5%|         | 4/79 [00:01<00:57,  1.31it/s]
  9%|         | 7/79 [00:01<00:39,  1.83it/s]
 13%|        | 10/79 [00:01<00:27,  2.54it/s]
 16%|        | 13/79 [00:01<00:19,  3.47it/s]
 20%|        | 16/79 [00:01<00:13,  4.69it/s]
 24%|       | 19/79 [00:01<00:09,  6.22it/s]
 28%|       | 22/79 [00:01<00:07,  8.01it/s]
 32%|      | 25/79 [00:02<00:05, 10.13it/s]
 35%|      | 28/79 [00:02<00:04, 12.36it/s]
 39%|      | 31/79 [00:02<00:03, 14.59it/s]
 43%|     | 34/79 [00:02<00:02, 16.78it/s]
 47%|     | 37/79 [00:02<00:02, 18.75it/s]
 51%|     | 40/79 [00:02<00:01, 20.37it/s]
 54%|    | 43/79 [00:02<00:01, 21.66it/s]
 58%|    | 46/79 [00:02<00:01, 22.85it/s]
 62%|   | 49/79 [00:02<00:01, 23.70it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:21,  1.05s/it]
  5%|         | 4/79 [00:01<00:56,  1.34it/s]
  9%|         | 7/79 [00:01<00:38,  1.87it/s]
 13%|        | 10/79 [00:01<00:26,  2.59it/s]
 16%|        | 13/79 [00:01<00:18,  3.54it/s]
 20%|        | 16/79 [00:01<00:13,  4.77it/s]
 24%|       | 19/79 [00:01<00:09,  6.29it/s]
 28%|       | 22/79 [00:01<00:07,  8.12it/s]
 32%|      | 25/79 [00:02<00:05, 10.19it/s]
 35%|      | 28/79 [00:02<00:04, 12.42it/s]
 39%|      | 31/79 [00:02<00:03, 14.67it/s]
 43%|     | 34/79 [00:02<00:02, 16.76it/s]
 47%|     | 37/79 [00:02<00:02, 18.48it/s]
 51%|     | 40/79 [00:02<00:01, 20.10it/s]
 54%|    | 43/79 [00:02<00:01, 21.44it/s]
 58%|    | 46/79 [00:02<00:01, 22.42it/s]
 62%|   | 49/79 [00:02<00:01, 23.33it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:23,  1.07s/it]
  5%|         | 4/79 [00:01<00:56,  1.32it/s]
  9%|         | 7/79 [00:01<00:39,  1.84it/s]
 13%|        | 10/79 [00:01<00:27,  2.55it/s]
 16%|        | 13/79 [00:01<00:18,  3.49it/s]
 20%|        | 16/79 [00:01<00:13,  4.71it/s]
 24%|       | 19/79 [00:01<00:09,  6.23it/s]
 28%|       | 22/79 [00:01<00:07,  8.07it/s]
 32%|      | 25/79 [00:02<00:05, 10.16it/s]
 35%|      | 28/79 [00:02<00:04, 12.46it/s]
 39%|      | 31/79 [00:02<00:03, 14.65it/s]
 43%|     | 34/79 [00:02<00:02, 16.61it/s]
 47%|     | 37/79 [00:02<00:02, 18.65it/s]
 51%|     | 40/79 [00:02<00:01, 20.24it/s]
 54%|    | 43/79 [00:02<00:01, 21.67it/s]
 58%|    | 46/79 [00:02<00:01, 22.85it/s]
 62%|   | 49/79 [00:02<00:01, 23.41it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:21,  1.05s/it]
  5%|         | 4/79 [00:01<00:56,  1.34it/s]
  9%|         | 7/79 [00:01<00:38,  1.87it/s]
 13%|        | 10/79 [00:01<00:26,  2.59it/s]
 16%|        | 13/79 [00:01<00:18,  3.54it/s]
 20%|        | 16/79 [00:01<00:13,  4.78it/s]
 24%|       | 19/79 [00:01<00:09,  6.32it/s]
 28%|       | 22/79 [00:01<00:06,  8.15it/s]
 32%|      | 25/79 [00:02<00:05, 10.27it/s]
 35%|      | 28/79 [00:02<00:04, 12.50it/s]
 39%|      | 31/79 [00:02<00:03, 14.71it/s]
 43%|     | 34/79 [00:02<00:02, 16.76it/s]
 47%|     | 37/79 [00:02<00:02, 18.68it/s]
 51%|     | 40/79 [00:02<00:01, 20.31it/s]
 54%|    | 43/79 [00:02<00:01, 21.69it/s]
 58%|    | 46/79 [00:02<00:01, 22.53it/s]
 62%|   | 49/79 [00:02<00:01, 23.39it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:21,  1.05s/it]
  5%|         | 4/79 [00:01<00:56,  1.34it/s]
  9%|         | 7/79 [00:01<00:38,  1.87it/s]
 13%|        | 10/79 [00:01<00:26,  2.59it/s]
 16%|        | 13/79 [00:01<00:18,  3.54it/s]
 20%|        | 16/79 [00:01<00:13,  4.77it/s]
 24%|       | 19/79 [00:01<00:09,  6.30it/s]
 28%|       | 22/79 [00:01<00:07,  8.10it/s]
 32%|      | 25/79 [00:02<00:05, 10.16it/s]
 35%|      | 28/79 [00:02<00:04, 12.37it/s]
 39%|      | 31/79 [00:02<00:03, 14.60it/s]
 43%|     | 34/79 [00:02<00:02, 16.66it/s]
 47%|     | 37/79 [00:02<00:02, 18.36it/s]
 51%|     | 40/79 [00:02<00:01, 19.95it/s]
 54%|    | 43/79 [00:02<00:01, 21.09it/s]
 58%|    | 46/79 [00:02<00:01, 22.13it/s]
 62%|   | 49/79 [00:02<00:01, 22.81it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:23,  1.07s/it]
  5%|         | 4/79 [00:01<00:56,  1.32it/s]
  9%|         | 7/79 [00:01<00:39,  1.84it/s]
 13%|        | 10/79 [00:01<00:27,  2.55it/s]
 16%|        | 13/79 [00:01<00:18,  3.49it/s]
 20%|        | 16/79 [00:01<00:13,  4.70it/s]
 24%|       | 19/79 [00:01<00:09,  6.22it/s]
 28%|       | 22/79 [00:01<00:07,  8.06it/s]
 32%|      | 25/79 [00:02<00:05, 10.13it/s]
 35%|      | 28/79 [00:02<00:04, 12.33it/s]
 39%|      | 31/79 [00:02<00:03, 14.66it/s]
 43%|     | 34/79 [00:02<00:02, 16.82it/s]
 47%|     | 37/79 [00:02<00:02, 18.79it/s]
 51%|     | 40/79 [00:02<00:01, 20.27it/s]
 54%|    | 43/79 [00:02<00:01, 21.54it/s]
 58%|    | 46/79 [00:02<00:01, 22.36it/s]
 62%|   | 49/79 [00:02<00:01, 22.96it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:22,  1.06s/it]
  5%|         | 4/79 [00:01<00:56,  1.33it/s]
  9%|         | 7/79 [00:01<00:38,  1.85it/s]
 13%|        | 10/79 [00:01<00:26,  2.57it/s]
 16%|        | 13/79 [00:01<00:18,  3.51it/s]
 20%|        | 16/79 [00:01<00:13,  4.73it/s]
 24%|       | 19/79 [00:01<00:09,  6.25it/s]
 28%|       | 22/79 [00:01<00:07,  8.08it/s]
 32%|      | 25/79 [00:02<00:05, 10.16it/s]
 35%|      | 28/79 [00:02<00:04, 12.40it/s]
 39%|      | 31/79 [00:02<00:03, 14.64it/s]
 43%|     | 34/79 [00:02<00:02, 16.84it/s]
 47%|     | 37/79 [00:02<00:02, 18.65it/s]
 51%|     | 40/79 [00:02<00:01, 20.24it/s]
 54%|    | 43/79 [00:02<00:01, 21.63it/s]
 58%|    | 46/79 [00:02<00:01, 22.74it/s]
 62%|   | 49/79 [00:02<00:01, 23.48it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:23,  1.07s/it]
  5%|         | 4/79 [00:01<00:57,  1.31it/s]
  9%|         | 7/79 [00:01<00:39,  1.84it/s]
 13%|        | 10/79 [00:01<00:27,  2.55it/s]
 16%|        | 13/79 [00:01<00:18,  3.48it/s]
 20%|        | 16/79 [00:01<00:13,  4.69it/s]
 24%|       | 19/79 [00:01<00:09,  6.21it/s]
 28%|       | 22/79 [00:01<00:07,  8.02it/s]
 32%|      | 25/79 [00:02<00:05, 10.10it/s]
 35%|      | 28/79 [00:02<00:04, 12.29it/s]
 39%|      | 31/79 [00:02<00:03, 14.54it/s]
 43%|     | 34/79 [00:02<00:02, 16.71it/s]
 47%|     | 37/79 [00:02<00:02, 18.66it/s]
 51%|     | 40/79 [00:02<00:01, 20.22it/s]
 54%|    | 43/79 [00:02<00:01, 21.45it/s]
 58%|    | 46/79 [00:02<00:01, 22.48it/s]
 62%|   | 49/79 [00:02<00:01, 23.17it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:26,  1.11s/it]
  5%|         | 4/79 [00:01<00:59,  1.27it/s]
  9%|         | 7/79 [00:01<00:40,  1.77it/s]
 13%|        | 10/79 [00:01<00:28,  2.46it/s]
 16%|        | 13/79 [00:01<00:19,  3.37it/s]
 20%|        | 16/79 [00:01<00:13,  4.56it/s]
 24%|       | 19/79 [00:01<00:09,  6.06it/s]
 28%|       | 22/79 [00:01<00:07,  7.86it/s]
 32%|      | 25/79 [00:02<00:05,  9.93it/s]
 35%|      | 28/79 [00:02<00:04, 12.20it/s]
 39%|      | 31/79 [00:02<00:03, 14.35it/s]
 43%|     | 34/79 [00:02<00:02, 16.50it/s]
 47%|     | 37/79 [00:02<00:02, 18.31it/s]
 51%|     | 40/79 [00:02<00:01, 20.04it/s]
 54%|    | 43/79 [00:02<00:01, 21.36it/s]
 58%|    | 46/79 [00:02<00:01, 22.58it/s]
 62%|   | 49/79 [00:02<00:01, 23.39it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:25,  1.10s/it]
  5%|         | 4/79 [00:01<00:58,  1.28it/s]
  9%|         | 7/79 [00:01<00:40,  1.78it/s]
 13%|        | 10/79 [00:01<00:27,  2.47it/s]
 16%|        | 13/79 [00:01<00:19,  3.39it/s]
 20%|        | 16/79 [00:01<00:13,  4.58it/s]
 24%|       | 19/79 [00:01<00:09,  6.09it/s]
 28%|       | 22/79 [00:01<00:07,  7.88it/s]
 32%|      | 25/79 [00:02<00:05,  9.94it/s]
 35%|      | 28/79 [00:02<00:04, 12.19it/s]
 39%|      | 31/79 [00:02<00:03, 14.46it/s]
 43%|     | 34/79 [00:02<00:02, 16.54it/s]
 47%|     | 37/79 [00:02<00:02, 18.42it/s]
 51%|     | 40/79 [00:02<00:01, 19.88it/s]
 54%|    | 43/79 [00:02<00:01, 21.31it/s]
 58%|    | 46/79 [00:02<00:01, 22.26it/s]
 62%|   | 49/79 [00:03<00:01, 23.12it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:25,  1.09s/it]
  5%|         | 4/79 [00:01<00:58,  1.29it/s]
  9%|         | 7/79 [00:01<00:40,  1.80it/s]
 13%|        | 10/79 [00:01<00:27,  2.50it/s]
 16%|        | 13/79 [00:01<00:19,  3.42it/s]
 20%|        | 16/79 [00:01<00:13,  4.63it/s]
 24%|       | 19/79 [00:01<00:09,  6.12it/s]
 28%|       | 22/79 [00:01<00:07,  7.94it/s]
 32%|      | 25/79 [00:02<00:05, 10.02it/s]
 35%|      | 28/79 [00:02<00:04, 12.29it/s]
 39%|      | 31/79 [00:02<00:03, 14.51it/s]
 43%|     | 34/79 [00:02<00:02, 16.61it/s]
 47%|     | 37/79 [00:02<00:02, 18.52it/s]
 51%|     | 40/79 [00:02<00:01, 20.08it/s]
 54%|    | 43/79 [00:02<00:01, 21.08it/s]
 58%|    | 46/79 [00:02<00:01, 22.22it/s]
 62%|   | 49/79 [00:02<00:01, 23.18it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:26,  1.10s/it]
  5%|         | 4/79 [00:01<00:58,  1.27it/s]
  9%|         | 7/79 [00:01<00:40,  1.78it/s]
 13%|        | 10/79 [00:01<00:27,  2.47it/s]
 16%|        | 13/79 [00:01<00:19,  3.39it/s]
 20%|        | 16/79 [00:01<00:13,  4.58it/s]
 24%|       | 19/79 [00:01<00:09,  6.06it/s]
 28%|       | 22/79 [00:01<00:07,  7.87it/s]
 32%|      | 25/79 [00:02<00:05,  9.91it/s]
 35%|      | 28/79 [00:02<00:04, 12.17it/s]
 39%|      | 31/79 [00:02<00:03, 14.41it/s]
 43%|     | 34/79 [00:02<00:02, 16.63it/s]
 47%|     | 37/79 [00:02<00:02, 18.58it/s]
 51%|     | 40/79 [00:02<00:01, 20.23it/s]
 54%|    | 43/79 [00:02<00:01, 21.48it/s]
 58%|    | 46/79 [00:02<00:01, 22.40it/s]
 62%|   | 49/79 [00:02<00:01, 23.48it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:30,  1.16s/it]
  5%|         | 4/79 [00:01<01:01,  1.21it/s]
  9%|         | 7/79 [00:01<00:42,  1.69it/s]
 13%|        | 10/79 [00:01<00:29,  2.35it/s]
 16%|        | 13/79 [00:01<00:20,  3.23it/s]
 20%|        | 16/79 [00:01<00:14,  4.38it/s]
 24%|       | 19/79 [00:01<00:10,  5.82it/s]
 28%|       | 22/79 [00:01<00:07,  7.59it/s]
 32%|      | 25/79 [00:02<00:05,  9.65it/s]
 35%|      | 28/79 [00:02<00:04, 11.97it/s]
 39%|      | 31/79 [00:02<00:03, 14.26it/s]
 43%|     | 34/79 [00:02<00:02, 16.60it/s]
 47%|     | 37/79 [00:02<00:02, 18.57it/s]
 51%|     | 40/79 [00:02<00:01, 20.33it/s]
 54%|    | 43/79 [00:02<00:01, 21.95it/s]
 58%|    | 46/79 [00:02<00:01, 22.94it/s]
 62%|   | 49/79 [00:03<00:01, 23.72it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:25,  1.10s/it]
  5%|         | 4/79 [00:01<00:58,  1.28it/s]
  9%|         | 7/79 [00:01<00:40,  1.79it/s]
 13%|        | 10/79 [00:01<00:27,  2.48it/s]
 16%|        | 13/79 [00:01<00:19,  3.40it/s]
 20%|        | 16/79 [00:01<00:13,  4.59it/s]
 24%|       | 19/79 [00:01<00:09,  6.07it/s]
 28%|       | 22/79 [00:01<00:07,  7.85it/s]
 32%|      | 25/79 [00:02<00:05,  9.89it/s]
 35%|      | 28/79 [00:02<00:04, 12.12it/s]
 39%|      | 31/79 [00:02<00:03, 14.30it/s]
 43%|     | 34/79 [00:02<00:02, 16.34it/s]
 47%|     | 37/79 [00:02<00:02, 18.17it/s]
 51%|     | 40/79 [00:02<00:01, 19.89it/s]
 54%|    | 43/79 [00:02<00:01, 21.30it/s]
 58%|    | 46/79 [00:02<00:01, 22.08it/s]
 62%|   | 49/79 [00:03<00:01, 22.87it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:27,  1.12s/it]
  5%|         | 4/79 [00:01<00:59,  1.26it/s]
  9%|         | 7/79 [00:01<00:40,  1.76it/s]
 13%|        | 10/79 [00:01<00:28,  2.44it/s]
 16%|        | 13/79 [00:01<00:19,  3.34it/s]
 20%|        | 16/79 [00:01<00:13,  4.51it/s]
 24%|       | 19/79 [00:01<00:10,  5.97it/s]
 28%|       | 22/79 [00:01<00:07,  7.76it/s]
 32%|      | 25/79 [00:02<00:05,  9.75it/s]
 35%|      | 28/79 [00:02<00:04, 11.92it/s]
 39%|      | 31/79 [00:02<00:03, 14.11it/s]
 43%|     | 34/79 [00:02<00:02, 16.27it/s]
 47%|     | 37/79 [00:02<00:02, 17.97it/s]
 51%|     | 40/79 [00:02<00:01, 19.63it/s]
 54%|    | 43/79 [00:02<00:01, 21.04it/s]
 58%|    | 46/79 [00:02<00:01, 22.25it/s]
 62%|   | 49/79 [00:03<00:01, 23.08it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:25,  1.10s/it]
  5%|         | 4/79 [00:01<00:58,  1.28it/s]
  9%|         | 7/79 [00:01<00:40,  1.79it/s]
 13%|        | 10/79 [00:01<00:27,  2.48it/s]
 16%|        | 13/79 [00:01<00:19,  3.40it/s]
 20%|        | 16/79 [00:01<00:13,  4.60it/s]
 24%|       | 19/79 [00:01<00:09,  6.08it/s]
 28%|       | 22/79 [00:01<00:07,  7.85it/s]
 32%|      | 25/79 [00:02<00:05,  9.85it/s]
 35%|      | 28/79 [00:02<00:04, 12.05it/s]
 39%|      | 31/79 [00:02<00:03, 14.27it/s]
 43%|     | 34/79 [00:02<00:02, 16.42it/s]
 47%|     | 37/79 [00:02<00:02, 18.34it/s]
 51%|     | 40/79 [00:02<00:01, 19.93it/s]
 54%|    | 43/79 [00:02<00:01, 21.17it/s]
 58%|    | 46/79 [00:02<00:01, 22.32it/s]
 62%|   | 49/79 [00:03<00:01, 22.71it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:27,  1.12s/it]
  5%|         | 4/79 [00:01<00:59,  1.26it/s]
  9%|         | 7/79 [00:01<00:40,  1.76it/s]
 13%|        | 10/79 [00:01<00:28,  2.44it/s]
 16%|        | 13/79 [00:01<00:19,  3.34it/s]
 20%|        | 16/79 [00:01<00:13,  4.52it/s]
 24%|       | 19/79 [00:01<00:10,  6.00it/s]
 28%|       | 22/79 [00:01<00:07,  7.76it/s]
 32%|      | 25/79 [00:02<00:05,  9.81it/s]
 35%|      | 28/79 [00:02<00:04, 12.02it/s]
 39%|      | 31/79 [00:02<00:03, 14.22it/s]
 43%|     | 34/79 [00:02<00:02, 16.24it/s]
 47%|     | 37/79 [00:02<00:02, 18.16it/s]
 51%|     | 40/79 [00:02<00:01, 19.60it/s]
 54%|    | 43/79 [00:02<00:01, 20.87it/s]
 58%|    | 46/79 [00:02<00:01, 21.89it/s]
 62%|   | 49/79 [00:03<00:01, 22.73it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:30,  1.16s/it]
  5%|         | 4/79 [00:01<01:01,  1.21it/s]
  9%|         | 7/79 [00:01<00:42,  1.70it/s]
 13%|        | 10/79 [00:01<00:29,  2.36it/s]
 16%|        | 13/79 [00:01<00:20,  3.24it/s]
 20%|        | 16/79 [00:01<00:14,  4.39it/s]
 24%|       | 19/79 [00:01<00:10,  5.83it/s]
 28%|       | 22/79 [00:02<00:07,  7.58it/s]
 32%|      | 25/79 [00:02<00:05,  9.54it/s]
 35%|      | 28/79 [00:02<00:04, 11.71it/s]
 39%|      | 31/79 [00:02<00:03, 13.94it/s]
 43%|     | 34/79 [00:02<00:02, 16.09it/s]
 47%|     | 37/79 [00:02<00:02, 17.99it/s]
 51%|     | 40/79 [00:02<00:01, 19.76it/s]
 54%|    | 43/79 [00:02<00:01, 21.00it/s]
 58%|    | 46/79 [00:02<00:01, 22.23it/s]
 62%|   | 49/79 [00:03<00:01, 22.61it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:27,  1.12s/it]
  5%|         | 4/79 [00:01<00:59,  1.26it/s]
  9%|         | 7/79 [00:01<00:40,  1.76it/s]
 13%|        | 10/79 [00:01<00:28,  2.44it/s]
 16%|        | 13/79 [00:01<00:19,  3.34it/s]
 20%|        | 16/79 [00:01<00:13,  4.52it/s]
 24%|       | 19/79 [00:01<00:10,  5.99it/s]
 28%|       | 22/79 [00:01<00:07,  7.75it/s]
 32%|      | 25/79 [00:02<00:05,  9.79it/s]
 35%|      | 28/79 [00:02<00:04, 11.98it/s]
 39%|      | 31/79 [00:02<00:03, 14.30it/s]
 43%|     | 34/79 [00:02<00:02, 16.44it/s]
 47%|     | 37/79 [00:02<00:02, 18.38it/s]
 51%|     | 40/79 [00:02<00:01, 19.91it/s]
 54%|    | 43/79 [00:02<00:01, 21.29it/s]
 58%|    | 46/79 [00:02<00:01, 22.25it/s]
 62%|   | 49/79 [00:03<00:01, 22.90it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:21,  1.05s/it]
  5%|         | 4/79 [00:01<00:56,  1.34it/s]
  9%|         | 7/79 [00:01<00:38,  1.86it/s]
 13%|        | 10/79 [00:01<00:26,  2.58it/s]
 16%|        | 13/79 [00:01<00:18,  3.53it/s]
 20%|        | 16/79 [00:01<00:13,  4.75it/s]
 24%|       | 19/79 [00:01<00:09,  6.28it/s]
 28%|       | 22/79 [00:01<00:07,  8.10it/s]
 32%|      | 25/79 [00:02<00:05, 10.17it/s]
 35%|      | 28/79 [00:02<00:04, 12.26it/s]
 39%|      | 31/79 [00:02<00:03, 14.49it/s]
 43%|     | 34/79 [00:02<00:02, 16.43it/s]
 47%|     | 37/79 [00:02<00:02, 18.13it/s]
 51%|     | 40/79 [00:02<00:01, 19.54it/s]
 54%|    | 43/79 [00:02<00:01, 20.56it/s]
 58%|    | 46/79 [00:02<00:01, 21.69it/s]
 62%|   | 49/79 [00:03<00:01, 22.46it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:20,  1.04s/it]
  4%|         | 3/79 [00:01<00:56,  1.34it/s]
  8%|         | 6/79 [00:01<00:39,  1.87it/s]
 11%|        | 9/79 [00:01<00:27,  2.59it/s]
 15%|        | 12/79 [00:01<00:18,  3.53it/s]
 19%|        | 15/79 [00:01<00:13,  4.74it/s]
 23%|       | 18/79 [00:01<00:09,  6.26it/s]
 27%|       | 21/79 [00:01<00:07,  8.08it/s]
 30%|       | 24/79 [00:02<00:05, 10.05it/s]
 34%|      | 27/79 [00:02<00:04, 12.18it/s]
 38%|      | 30/79 [00:02<00:03, 14.31it/s]
 42%|     | 33/79 [00:02<00:02, 16.15it/s]
 46%|     | 36/79 [00:02<00:02, 17.90it/s]
 49%|     | 39/79 [00:02<00:02, 19.34it/s]
 53%|    | 42/79 [00:02<00:01, 20.26it/s]
 57%|    | 45/79 [00:02<00:01, 21.41it/s]
 61%|    | 48/79 [00:03<00:01, 21.87it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:26,  1.11s/it]
  5%|         | 4/79 [00:01<00:59,  1.27it/s]
  9%|         | 7/79 [00:01<00:40,  1.77it/s]
 13%|        | 10/79 [00:01<00:28,  2.46it/s]
 16%|        | 13/79 [00:01<00:19,  3.37it/s]
 20%|        | 16/79 [00:01<00:13,  4.55it/s]
 24%|       | 19/79 [00:01<00:09,  6.03it/s]
 28%|       | 22/79 [00:01<00:07,  7.82it/s]
 32%|      | 25/79 [00:02<00:05,  9.84it/s]
 35%|      | 28/79 [00:02<00:04, 12.02it/s]
 39%|      | 31/79 [00:02<00:03, 14.22it/s]
 43%|     | 34/79 [00:02<00:02, 16.28it/s]
 47%|     | 37/79 [00:02<00:02, 18.04it/s]
 51%|     | 40/79 [00:02<00:01, 19.57it/s]
 54%|    | 43/79 [00:02<00:01, 20.68it/s]
 58%|    | 46/79 [00:02<00:01, 21.70it/s]
 62%|   | 49/79 [00:03<00:01, 22.54it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:28,  1.13s/it]
  5%|         | 4/79 [00:01<01:00,  1.24it/s]
  9%|         | 7/79 [00:01<00:41,  1.74it/s]
 13%|        | 10/79 [00:01<00:28,  2.41it/s]
 16%|        | 13/79 [00:01<00:19,  3.30it/s]
 20%|        | 16/79 [00:01<00:14,  4.47it/s]
 24%|       | 19/79 [00:01<00:10,  5.93it/s]
 28%|       | 22/79 [00:01<00:07,  7.64it/s]
 32%|      | 25/79 [00:02<00:05,  9.65it/s]
 35%|      | 28/79 [00:02<00:04, 11.81it/s]
 39%|      | 31/79 [00:02<00:03, 13.98it/s]
 43%|     | 34/79 [00:02<00:02, 16.02it/s]
 47%|     | 37/79 [00:02<00:02, 17.95it/s]
 51%|     | 40/79 [00:02<00:01, 19.59it/s]
 54%|    | 43/79 [00:02<00:01, 20.92it/s]
 58%|    | 46/79 [00:02<00:01, 21.94it/s]
 62%|   | 49/79 [00:03<00:01, 22.75it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:28,  1.13s/it]
  5%|         | 4/79 [00:01<01:00,  1.24it/s]
  9%|         | 7/79 [00:01<00:41,  1.74it/s]
 13%|        | 10/79 [00:01<00:28,  2.41it/s]
 16%|        | 13/79 [00:01<00:19,  3.31it/s]
 20%|        | 16/79 [00:01<00:14,  4.46it/s]
 24%|       | 19/79 [00:01<00:10,  5.94it/s]
 28%|       | 22/79 [00:01<00:07,  7.68it/s]
 32%|      | 25/79 [00:02<00:05,  9.69it/s]
 35%|      | 28/79 [00:02<00:04, 11.86it/s]
 39%|      | 31/79 [00:02<00:03, 14.10it/s]
 43%|     | 34/79 [00:02<00:02, 16.11it/s]
 47%|     | 37/79 [00:02<00:02, 18.00it/s]
 51%|     | 40/79 [00:02<00:01, 19.55it/s]
 54%|    | 43/79 [00:02<00:01, 20.62it/s]
 58%|    | 46/79 [00:02<00:01, 21.59it/s]
 62%|   | 49/79 [00:03<00:01, 22.13it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:26,  1.11s/it]
  5%|         | 4/79 [00:01<00:59,  1.27it/s]
  9%|         | 7/79 [00:01<00:40,  1.77it/s]
 13%|        | 10/79 [00:01<00:28,  2.45it/s]
 16%|        | 13/79 [00:01<00:19,  3.36it/s]
 20%|        | 16/79 [00:01<00:13,  4.53it/s]
 24%|       | 19/79 [00:01<00:10,  5.98it/s]
 28%|       | 22/79 [00:01<00:07,  7.74it/s]
 32%|      | 25/79 [00:02<00:05,  9.74it/s]
 35%|      | 28/79 [00:02<00:04, 11.85it/s]
 39%|      | 31/79 [00:02<00:03, 14.00it/s]
 43%|     | 34/79 [00:02<00:02, 16.04it/s]
 47%|     | 37/79 [00:02<00:02, 17.93it/s]
 51%|     | 40/79 [00:02<00:02, 19.48it/s]
 54%|    | 43/79 [00:02<00:01, 20.94it/s]
 58%|    | 46/79 [00:02<00:01, 20.73it/s]
 62%|   | 49/79 [00:03<00:01, 21.98it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:28,  1.13s/it]
  4%|         | 3/79 [00:01<01:01,  1.24it/s]
  8%|         | 6/79 [00:01<00:42,  1.73it/s]
 11%|        | 9/79 [00:01<00:29,  2.40it/s]
 15%|        | 12/79 [00:01<00:20,  3.29it/s]
 19%|        | 15/79 [00:01<00:14,  4.45it/s]
 23%|       | 18/79 [00:01<00:10,  5.90it/s]
 27%|       | 21/79 [00:01<00:07,  7.62it/s]
 30%|       | 24/79 [00:02<00:05,  9.61it/s]
 34%|      | 27/79 [00:02<00:04, 11.77it/s]
 38%|      | 30/79 [00:02<00:03, 13.84it/s]
 42%|     | 33/79 [00:02<00:02, 15.83it/s]
 46%|     | 36/79 [00:02<00:02, 17.63it/s]
 49%|     | 39/79 [00:02<00:02, 19.14it/s]
 53%|    | 42/79 [00:02<00:01, 20.30it/s]
 57%|    | 45/79 [00:02<00:01, 21.48it/s]
 61%|    | 48/79 [00:03<00:01, 22.16it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:30,  1.16s/it]
  5%|         | 4/79 [00:01<01:01,  1.21it/s]
  9%|         | 7/79 [00:01<00:42,  1.70it/s]
 13%|        | 10/79 [00:01<00:29,  2.35it/s]
 16%|        | 13/79 [00:01<00:20,  3.23it/s]
 20%|        | 16/79 [00:01<00:14,  4.38it/s]
 24%|       | 19/79 [00:01<00:10,  5.79it/s]
 28%|       | 22/79 [00:02<00:07,  7.48it/s]
 32%|      | 25/79 [00:02<00:05,  9.49it/s]
 35%|      | 28/79 [00:02<00:04, 11.63it/s]
 39%|      | 31/79 [00:02<00:03, 13.85it/s]
 43%|     | 34/79 [00:02<00:02, 15.99it/s]
 47%|     | 37/79 [00:02<00:02, 17.80it/s]
 51%|     | 40/79 [00:02<00:02, 19.43it/s]
 54%|    | 43/79 [00:02<00:01, 20.58it/s]
 58%|    | 46/79 [00:02<00:01, 21.68it/s]
 62%|   | 49/79 [00:03<00:01, 22.40it/s]
 66%|   | 52/79 [00:03<00:0165it/s]
 68%|   | 54/79 [00:03<00:00, 25.24it/s]
 72%|  | 57/79 [00:03<00:00, 25.51it/s]
 76%|  | 60/79 [00:03<00:00, 25.71it/s]
 80%|  | 63/79 [00:03<00:00, 25.72it/s]
 84%| | 66/79 [00:03<00:00, 25.92it/s]
 87%| | 69/79 [00:03<00:00, 25.91it/s]
 91%| | 72/79 [00:03<00:00, 26.08it/s]
 95%|| 75/79 [00:03<00:00, 26.61it/s]
 99%|| 78/79 [00:03<00:00, 27.50it/s]
100%|| 79/79 [00:04<00:00, 19.32it/s]
, 24.16it/s]
 70%|   | 55/79 [00:03<00:00, 24.46it/s]
 73%|  | 58/79 [00:03<00:00, 24.90it/s]
 77%|  | 61/79 [00:03<00:00, 25.29it/s]
 81%|  | 64/79 [00:03<00:00, 25.41it/s]
 85%| | 67/79 [00:03<00:00, 25.72it/s]
 89%| | 70/79 [00:03<00:00, 25.47it/s]
 92%|| 73/79 [00:03<00:00, 25.81it/s]
 96%|| 76/79 [00:03<00:00, 26.37it/s]
100%|| 79/79 [00:04<00:00, 27.34it/s]
, 24.28it/s]
 70%|   | 55/79 [00:03<00:00, 24.64it/s]
 73%|  | 58/79 [00:03<00:00, 24.69it/s]
 77%|  | 61/79 [00:03<00:00, 25.21it/s]
 81%|  | 64/79 [00:03<00:00, 25.35it/s]
 85%| | 67/79 [00:03<00:00, 25.61it/s]
 89%| | 70/79 [00:03<00:00, 25.30it/s]
 92%|| 73/79 [00:03<00:00, 25.92it/s]
 96%|| 76/79 [00:03<00:00, 26.36it/s]
100%|| 79/79 [00:04<00:00, 27.22it/s]
, 24.43it/s]
 70%|   | 55/79 [00:03<00:00, 25.02it/s]
 73%|  | 58/79 [00:03<00:00, 25.53it/s]
 77%|  | 61/79 [00:03<00:00, 25.59it/s]
 81%|  | 64/79 [00:03<00:00, 25.61it/s]
 85%| | 67/79 [00:03<00:00, 25.66it/s]
 89%| | 70/79 [00:03<00:00, 25.43it/s]
 92%|| 73/79 [00:03<00:00, 25.80it/s]
 96%|| 76/79 [00:03<00:00, 26.15it/s]
100%|| 79/79 [00:04<00:00, 26.98it/s]
91it/s]
 68%|   | 54/79 [00:03<00:01, 24.35it/s]
 72%|  | 57/79 [00:03<00:00, 24.85it/s]
 76%|  | 60/79 [00:03<00:00, 25.04it/s]
 80%|  | 63/79 [00:03<00:00, 25.08it/s]
 84%| | 66/79 [00:03<00:00, 25.25it/s]
 87%| | 69/79 [00:03<00:00, 25.28it/s]
 91%| | 72/79 [00:03<00:00, 25.31it/s]
 95%|| 75/79 [00:03<00:00, 25.97it/s]
 99%|| 78/79 [00:04<00:00, 26.57it/s]
100%|| 79/79 [00:04<00:00, 19.00it/s]
, 23.91it/s]
 70%|   | 55/79 [00:03<00:00, 24.28it/s]
 73%|  | 58/79 [00:03<00:00, 24.50it/s]
 77%|  | 61/79 [00:03<00:00, 24.79it/s]
 81%|  | 64/79 [00:03<00:00, 24.92it/s]
 85%| | 67/79 [00:03<00:00, 25.32it/s]
 89%| | 70/79 [00:03<00:00, 25.60it/s]
 92%|| 73/79 [00:03<00:00, 25.93it/s]
 96%|| 76/79 [00:03<00:00, 26.51it/s]
100%|| 79/79 [00:04<00:00, 27.43it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 24.33it/s]
 71%|   | 56/79 [00:03<00:00, 24.47it/s]
 75%|  | 59/79 [00:03<00:00, 24.75it/s]
 78%|  | 62/79 [00:03<00:00, 24.86it/s]
 82%| | 65/79 [00:03<00:00, 24.68it/s]
 86%| | 68/79 [00:03<00:00, 24.85it/s]
 90%| | 71/79 [00:03<00:00, 24.87it/s]
 94%|| 74/79 [00:03<00:00, 25.68it/s]
 97%|| 77/79 [00:04<00:00, 26.23it/s]
100%|| 79/79 [00:04<00:00, 19.00it/s]
, 23.78it/s]
 70%|   | 55/79 [00:03<00:00, 24.00it/s]
 73%|  | 58/79 [00:03<00:00, 24.29it/s]
 77%|  | 61/79 [00:03<00:00, 24.61it/s]
 81%|  | 64/79 [00:03<00:00, 24.66it/s]
 85%| | 67/79 [00:03<00:00, 24.56it/s]
 89%| | 70/79 [00:03<00:00, 24.66it/s]
 92%|| 73/79 [00:03<00:00, 24.89it/s]
 96%|| 76/79 [00:04<00:00, 25.76it/s]
100%|| 79/79 [00:04<00:00, 26.62it/s]
, 23.95it/s]
 70%|   | 55/79 [00:03<00:00, 24.27it/s]
 73%|  | 58/79 [00:03<00:00, 24.74it/s]
 77%|  | 61/79 [00:03<00:00, 24.67it/s]
 81%|  | 64/79 [00:03<00:00, 24.93it/s]
 85%| | 67/79 [00:03<00:00, 25.19it/s]
 89%| | 70/79 [00:03<00:00, 25.25it/s]
 92%|| 73/79 [00:03<00:00, 25.72it/s]
 96%|| 76/79 [00:04<00:00, 26.31it/s]
100%|| 79/79 [00:04<00:00, 27.08it/s]
, 23.57it/s]
 70%|   | 55/79 [00:03<00:00, 24.01it/s]
 73%|  | 58/79 [00:03<00:00, 24.43it/s]
 77%|  | 61/79 [00:03<00:00, 24.66it/s]
 81%|  | 64/79 [00:03<00:00, 24.39it/s]
 85%| | 67/79 [00:03<00:00, 24.37it/s]
 89%| | 70/79 [00:03<00:00, 24.52it/s]
 92%|| 73/79 [00:03<00:00, 25.00it/s]
 96%|| 76/79 [00:04<00:00, 25.67it/s]
100%|| 79/79 [00:04<00:00, 26.50it/s]
, 24.36it/s]
 70%|   | 55/79 [00:03<00:00, 25.05it/s]
 73%|  | 58/79 [00:03<00:00, 25.42it/s]
 77%|  | 61/79 [00:03<00:00, 25.74it/s]
 81%|  | 64/79 [00:03<00:00, 25.92it/s]
 85%| | 67/79 [00:03<00:00, 26.07it/s]
 89%| | 70/79 [00:03<00:00, 26.27it/s]
 92%|| 73/79 [00:03<00:00, 26.16it/s]
 96%|| 76/79 [00:04<00:00, 26.63it/s]
100%|| 79/79 [00:04<00:00, 27.30it/s]
, 23.70it/s]
 70%|   | 55/79 [00:03<00:00, 24.29it/s]
 73%|  | 58/79 [00:03<00:00, 24.55it/s]
 77%|  | 61/79 [00:03<00:00, 24.49it/s]
 81%|  | 64/79 [00:03<00:00, 24.82it/s]
 85%| | 67/79 [00:03<00:00, 24.67it/s]
 89%| | 70/79 [00:03<00:00, 24.86it/s]
 92%|| 73/79 [00:03<00:00, 25.21it/s]
 96%|| 76/79 [00:04<00:00, 25.84it/s]
100%|| 79/79 [00:04<00:00, 26.73it/s]
, 23.80it/s]
 70%|   | 55/79 [00:03<00:00, 24.30it/s]
 73%|  | 58/79 [00:03<00:00, 24.49it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 25.15it/s]
 85%| | 67/79 [00:03<00:00, 25.31it/s]
 89%| | 70/79 [00:03<00:00, 25.43it/s]
 92%|| 73/79 [00:03<00:00, 25.77it/s]
 96%|| 76/79 [00:04<00:00, 26.45it/s]
100%|| 79/79 [00:04<00:00, 27.33it/s]
, 23.37it/s]
 70%|   | 55/79 [00:03<00:00, 24.10it/s]
 73%|  | 58/79 [00:03<00:00, 24.10it/s]
 77%|  | 61/79 [00:03<00:00, 24.02it/s]
 81%|  | 64/79 [00:03<00:00, 24.07it/s]
 85%| | 67/79 [00:03<00:00, 24.19it/s]
 89%| | 70/79 [00:03<00:00, 24.35it/s]
 92%|| 73/79 [00:03<00:00, 25.04it/s]
 96%|| 76/79 [00:04<00:00, 25.88it/s]
100%|| 79/79 [00:04<00:00, 26.91it/s]
, 24.50it/s]
 70%|   | 55/79 [00:03<00:00, 25.09it/s]
 73%|  | 58/79 [00:03<00:00, 25.11it/s]
 77%|  | 61/79 [00:03<00:00, 25.15it/s]
 81%|  | 64/79 [00:03<00:00, 25.42it/s]
 85%| | 67/79 [00:03<00:00, 25.72it/s]
 89%| | 70/79 [00:03<00:00, 25.50it/s]
 92%|| 73/79 [00:03<00:00, 25.89it/s]
 96%|| 76/79 [00:04<00:00, 26.35it/s]
100%|| 79/79 [00:04<00:00, 27.29it/s]
, 23.88it/s]
 70%|   | 55/79 [00:03<00:00, 24.25it/s]
 73%|  | 58/79 [00:03<00:00, 24.73it/s]
 77%|  | 61/79 [00:03<00:00, 24.89it/s]
 81%|  | 64/79 [00:03<00:00, 24.50it/s]
 85%| | 67/79 [00:03<00:00, 24.70it/s]
 89%| | 70/79 [00:03<00:00, 24.87it/s]
 92%|| 73/79 [00:03<00:00, 25.15it/s]
 96%|| 76/79 [00:04<00:00, 25.68it/s]
100%|| 79/79 [00:04<00:00, 26.56it/s]
, 23.51it/s]
 70%|   | 55/79 [00:03<00:01, 23.80it/s]
 73%|  | 58/79 [00:03<00:00, 24.22it/s]
 77%|  | 61/79 [00:03<00:00, 24.38it/s]
 81%|  | 64/79 [00:03<00:00, 24.60it/s]
 85%| | 67/79 [00:03<00:00, 24.70it/s]
 89%| | 70/79 [00:03<00:00, 25.03it/s]
 92%|| 73/79 [00:03<00:00, 24.88it/s]
 96%|| 76/79 [00:04<00:00, 25.59it/s]
100%|| 79/79 [00:04<00:00, 26.49it/s]
, 23.70it/s]
 70%|   | 55/79 [00:03<00:00, 24.15it/s]
 73%|  | 58/79 [00:03<00:00, 24.59it/s]
 77%|  | 61/79 [00:03<00:00, 24.63it/s]
 81%|  | 64/79 [00:03<00:00, 25.08it/s]
 85%| | 67/79 [00:03<00:00, 24.90it/s]
 89%| | 70/79 [00:03<00:00, 25.28it/s]
 92%|| 73/79 [00:03<00:00, 25.52it/s]
 96%|| 76/79 [00:04<00:00, 26.33it/s]
100%|| 79/79 [00:04<00:00, 27.20it/s]
, 23.55it/s]
 70%|   | 55/79 [00:03<00:00, 24.05it/s]
 73%|  | 58/79 [00:03<00:00, 24.05it/s]
 77%|  | 61/79 [00:03<00:00, 24.37it/s]
 81%|  | 64/79 [00:03<00:00, 24.32it/s]
 85%| | 67/79 [00:03<00:00, 24.49it/s]
 89%| | 70/79 [00:03<00:00, 24.56it/s]
 92%|| 73/79 [00:04<00:00, 25.02it/s]
 96%|| 76/79 [00:04<00:00, 25.64it/s]
100%|| 79/79 [00:04<00:00, 26.64it/s]
, 23.38it/s]
 70%|   | 55/79 [00:03<00:01, 23.68it/s]
 73%|  | 58/79 [00:03<00:00, 24.14it/s]
 77%|  | 61/79 [00:03<00:00, 24.48it/s]
 81%|  | 64/79 [00:03<00:00, 24.77it/s]
 85%| | 67/79 [00:03<00:00, 24.84it/s]
 89%| | 70/79 [00:03<00:00, 25.02it/s]
 92%|| 73/79 [00:04<00:00, 25.55it/s]
 96%|| 76/79 [00:04<00:00, 26.00it/s]
100%|| 79/79 [00:04<00:00, 26.82it/s]
, 23.42it/s]
 70%|   | 55/79 [00:03<00:01, 23.91it/s]
 73%|  | 58/79 [00:03<00:00, 24.25it/s]
 77%|  | 61/79 [00:03<00:00, 24.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.45it/s]
 85%| | 67/79 [00:03<00:00, 24.56it/s]
 89%| | 70/79 [00:03<00:00, 24.68it/s]
 92%|| 73/79 [00:03<00:00, 25.00it/s]
 96%|| 76/79 [00:04<00:00, 25.73it/s]
100%|| 79/79 [00:04<00:00, 26.60it/s]
, 23.48it/s]
 70%|   | 55/79 [00:03<00:01, 23.92it/s]
 73%|  | 58/79 [00:03<00:00, 24.13it/s]
 77%|  | 61/79 [00:03<00:00, 24.40it/s]
 81%|  | 64/79 [00:03<00:00, 24.68it/s]
 85%| | 67/79 [00:03<00:00, 24.78it/s]
 89%| | 70/79 [00:03<00:00, 24.72it/s]
 92%|| 73/79 [00:03<00:00, 24.90it/s]
 96%|| 76/79 [00:04<00:00, 25.87it/s]
100%|| 79/79 [00:04<00:00, 26.20it/s]
, 23.44it/s]
 70%|   | 55/79 [00:03<00:01, 23.86it/s]
 73%|  | 58/79 [00:03<00:00, 24.17it/s]
 77%|  | 61/79 [00:03<00:00, 24.21it/s]
 81%|  | 64/79 [00:03<00:00, 24.35it/s]
 85%| | 67/79 [00:03<00:00, 24.75it/s]
 89%| | 70/79 [00:03<00:00, 25.06it/s]
 92%|| 73/79 [00:03<00:00, 25.29it/s]
 96%|| 76/79 [00:04<00:00, 25.88it/s]
100%|| 79/79 [00:04<00:00, 26.75it/s]
, 23.42it/s]
 70%|   | 55/79 [00:03<00:01, 21.79it/s]
 73%|  | 58/79 [00:03<00:00, 22.74it/s]
 77%|  | 61/79 [00:03<00:00, 23.48it/s]
 81%|  | 64/79 [00:03<00:00, 23.88it/s]
 85%| | 67/79 [00:03<00:00, 24.41it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:04<00:00, 25.29it/s]
 96%|| 76/79 [00:04<00:00, 26.41it/s]
100%|| 79/79 [00:04<00:00, 26.76it/s]
, 22.52it/s]
 70%|   | 55/79 [00:03<00:01, 22.87it/s]
 73%|  | 58/79 [00:03<00:00, 23.46it/s]
 77%|  | 61/79 [00:03<00:00, 23.68it/s]
 81%|  | 64/79 [00:03<00:00, 23.85it/s]
 85%| | 67/79 [00:03<00:00, 24.00it/s]
 89%| | 70/79 [00:03<00:00, 24.24it/s]
 92%|| 73/79 [00:04<00:00, 24.66it/s]
 96%|| 76/79 [00:04<00:00, 25.46it/s]
100%|| 79/79 [00:04<00:00, 26.29it/s]
, 23.14it/s]
 70%|   | 55/79 [00:03<00:01, 23.68it/s]
 73%|  | 58/79 [00:03<00:00, 24.01it/s]
 77%|  | 61/79 [00:03<00:00, 24.12it/s]
 81%|  | 64/79 [00:03<00:00, 24.45it/s]
 85%| | 67/79 [00:03<00:00, 24.78it/s]
 89%| | 70/79 [00:03<00:00, 24.26it/s]
 92%|| 73/79 [00:04<00:00, 24.72it/s]
 96%|| 76/79 [00:04<00:00, 25.35it/s]
100%|| 79/79 [00:04<00:00, 26.28it/s]
74it/s]
 68%|   | 54/79 [00:03<00:01, 23.30it/s]
 72%|  | 57/79 [00:03<00:00, 23.79it/s]
 76%|  | 60/79 [00:03<00:00, 23.88it/s]
 80%|  | 63/79 [00:03<00:00, 24.23it/s]
 84%| | 66/79 [00:03<00:00, 24.30it/s]
 87%| | 69/79 [00:03<00:00, 24.19it/s]
 91%| | 72/79 [00:04<00:00, 24.04it/s]
 95%|| 75/79 [00:04<00:00, 24.91it/s]
 99%|| 78/79 [00:04<00:00, 25.42it/s]
100%|| 79/79 [00:04<00:00, 18.16it/s]
, 22.93it/s]
 70%|   | 55/79 [00:03<00:01, 23.53it/s]
 73%|  | 58/79 [00:03<00:00, 23.70it/s]
 77%|  | 61/79 [00:03<00:00, 24.26it/s]
 81%|  | 64/79 [00:03<00:00, 24.59it/s]
 85%| | 67/79 [00:03<00:00, 25.12it/s]
 89%| | 70/79 [00:03<00:00, 24.90it/s]
 92%|| 73/79 [00:04<00:00, 25.16it/s]
 96%|| 76/79 [00:04<00:00, 25.60it/s]
100%|| 79/79 [00:04<00:00, 26.30it/s]
, 22.73it/s]
 70%|   | 55/79 [00:03<00:01, 23.00it/s]
 73%|  | 58/79 [00:03<00:00, 23.19it/s]
 77%|  | 61/79 [00:03<00:00, 23.13it/s]
 81%|  | 64/79 [00:03<00:00, 23.37it/s]
 85%| | 67/79 [00:03<00:00, 23.43it/s]
 89%| | 70/79 [00:03<00:00, 23.42it/s]
 92%|| 73/79 [00:04<00:00, 24.00it/s]
 96%|| 76/79 [00:04<00:00, 24.89it/s]
100%|| 79/79 [00:04<00:00, 25.90it/s]
, 22.83it/s]
 70%|   | 55/79 [00:03<00:01, 23.29it/s]
 73%|  | 58/79 [00:03<00:00, 23.55it/s]
 77%|  | 61/79 [00:03<00:00, 23.72it/s]
 81%|  | 64/79 [00:03<00:00, 23.79it/s]
 85%| | 67/79 [00:03<00:00, 23.83it/s]
 89%| | 70/79 [00:03<00:00, 23.79it/s]
 92%|| 73/79 [00:04<00:00, 24.16it/s]
 96%|| 76/79 [00:04<00:00, 24.97it/s]
100%|| 79/79 [00:04<00:00, 25.93it/s]
, 23.12it/s]
 70%|   | 55/79 [00:03<00:01, 23.50it/s]
 73%|  | 58/79 [00:03<00:00, 23.95it/s]
 77%|  | 61/79 [00:03<00:00, 24.22it/s]
 81%|  | 64/79 [00:03<00:00, 24.22it/s]
 85%| | 67/79 [00:03<00:00, 24.40it/s]
 89%| | 70/79 [00:03<00:00, 24.04it/s]
 92%|| 73/79 [00:04<00:00, 23.51it/s]
 96%|| 76/79 [00:04<00:00, 24.03it/s]
100%|| 79/79 [00:04<00:00, 22.51it/s]
80it/s]
 68%|   | 54/79 [00:03<00:01, 23.24it/s]
 72%|  | 57/79 [00:03<00:00, 23.26it/s]
 76%|  | 60/79 [00:03<00:00, 23.29it/s]
 80%|  | 63/79 [00:03<00:00, 23.47it/s]
 84%| | 66/79 [00:03<00:00, 23.85it/s]
 87%| | 69/79 [00:03<00:00, 23.92it/s]
 91%| | 72/79 [00:04<00:00, 23.81it/s]
 95%|| 75/79 [00:04<00:00, 24.64it/s]
 99%|| 78/79 [00:04<00:00, 25.20it/s]
100%|| 79/79 [00:04<00:00, 17.79it/s]
2020-06-23 15:54:29,394 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.436355 (0.028392674255371092 s / img per device, on 32 devices)
2020-06-23 15:54:29,417 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:54:29,417 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:54:29,439 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592952882573, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 3, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592952882574, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 3}}
2020-06-23 15:54:43,229 maskrcnn_benchmark.trainer INFO: eta: 1:24:51  iter: 1840  loss: 0.8045 (0.9761)  loss_classifier: 0.3032 (0.3694)  loss_box_reg: 0.1297 (0.1469)  loss_mask: 0.2957 (0.3774)  loss_objectness: 0.0295 (0.0575)  loss_rpn_box_reg: 0.0164 (0.0250)  time: 0.1078 (0.1334)  data: 0.0016 (0.0228)  lr: 0.160000  max mem: 5011
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 15:54:45,372 maskrcnn_benchmark.trainer INFO: eta: 1:24:38  iter: 1860  loss: 0.7646 (0.9747)  loss_classifier: 0.2676 (0.3688)  loss_box_reg: 0.1426 (0.1469)  loss_mask: 0.3296 (0.3768)  loss_objectness: 0.0264 (0.0572)  loss_rpn_box_reg: 0.0081 (0.0249)  time: 0.1064 (0.1332)  data: 0.0014 (0.0226)  lr: 0.160000  max mem: 5011
2020-06-23 15:54:47,518 maskrcnn_benchmark.trainer INFO: eta: 1:24:25  iter: 1880  loss: 0.7158 (0.9718)  loss_classifier: 0.2492 (0.3673)  loss_box_reg: 0.0904 (0.1465)  loss_mask: 0.2846 (0.3759)  loss_objectness: 0.0193 (0.0572)  loss_rpn_box_reg: 0.0088 (0.0250)  time: 0.1068 (0.1329)  data: 0.0014 (0.0224)  lr: 0.160000  max mem: 5011
2020-06-23 15:54:49,668 maskrcnn_benchmark.trainer INFO: eta: 1:24:12  iter: 1900  loss: 0.7894 (0.9706)  loss_classifier: 0.2604 (0.3668)  loss_box_reg: 0.1117 (0.1464)  loss_mask: 0.2868 (0.3751)  loss_objectness: 0.0257 (0.0572)  loss_rpn_box_reg: 0.0118 (0.0251)  time: 0.1077 (0.1326)  data: 0.0015 (0.0221)  lr: 0.160000  max mem: 5011
2020-06-23 15:54:51,812 maskrcnn_benchmark.trainer INFO: eta: 1:23:59  iter: 1920  loss: 0.7221 (0.9687)  loss_classifier: 0.2730 (0.3660)  loss_box_reg: 0.1296 (0.1464)  loss_mask: 0.2836 (0.3744)  loss_objectness: 0.0289 (0.0569)  loss_rpn_box_reg: 0.0080 (0.0249)  time: 0.1065 (0.1323)  data: 0.0015 (0.0219)  lr: 0.160000  max mem: 5011
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 15:54:53,950 maskrcnn_benchmark.trainer INFO: eta: 1:23:47  iter: 1940  loss: 0.6700 (0.9662)  loss_classifier: 0.2527 (0.3651)  loss_box_reg: 0.1031 (0.1461)  loss_mask: 0.3008 (0.3736)  loss_objectness: 0.0263 (0.0566)  loss_rpn_box_reg: 0.0103 (0.0248)  time: 0.1066 (0.1321)  data: 0.0015 (0.0217)  lr: 0.160000  max mem: 5011
DONE (t=1.12s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 15:54:56,106 maskrcnn_benchmark.trainer INFO: eta: 1:23:35  iter: 1960  loss: 0.8193 (0.9650)  loss_classifier: 0.3179 (0.3647)  loss_box_reg: 0.1589 (0.1461)  loss_mask: 0.2883 (0.3728)  loss_objectness: 0.0278 (0.0565)  loss_rpn_box_reg: 0.0088 (0.0248)  time: 0.1074 (0.1318)  data: 0.0015 (0.0215)  lr: 0.160000  max mem: 5011
DONE (t=2.18s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21117
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.40256
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.19899
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.12393
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.23800
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.26920
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.21126
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.36026
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.38360
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22512
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.42283
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48066
2020-06-23 15:54:58,236 maskrcnn_benchmark.trainer INFO: eta: 1:23:22  iter: 1980  loss: 0.7587 (0.9631)  loss_classifier: 0.2891 (0.3640)  loss_box_reg: 0.1354 (0.1461)  loss_mask: 0.2932 (0.3721)  loss_objectness: 0.0274 (0.0563)  loss_rpn_box_reg: 0.0101 (0.0247)  time: 0.1064 (0.1316)  data: 0.0015 (0.0213)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:00,379 maskrcnn_benchmark.trainer INFO: eta: 1:23:10  iter: 2000  loss: 0.7302 (0.9608)  loss_classifier: 0.2569 (0.3630)  loss_box_reg: 0.1226 (0.1459)  loss_mask: 0.3030 (0.3712)  loss_objectness: 0.0205 (0.0560)  loss_rpn_box_reg: 0.0130 (0.0247)  time: 0.1065 (0.1313)  data: 0.0015 (0.0211)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:02,501 maskrcnn_benchmark.trainer INFO: eta: 1:22:58  iter: 2020  loss: 0.6818 (0.9585)  loss_classifier: 0.2582 (0.3622)  loss_box_reg: 0.1152 (0.1456)  loss_mask: 0.2652 (0.3703)  loss_objectness: 0.0213 (0.0558)  loss_rpn_box_reg: 0.0088 (0.0246)  time: 0.1056 (0.1311)  data: 0.0015 (0.0209)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:04,624 maskrcnn_benchmark.trainer INFO: eta: 1:22:46  iter: 2040  loss: 0.7887 (0.9573)  loss_classifier: 0.2717 (0.3617)  loss_box_reg: 0.1348 (0.1456)  loss_mask: 0.2938 (0.3697)  loss_objectness: 0.0220 (0.0558)  loss_rpn_box_reg: 0.0108 (0.0246)  time: 0.1061 (0.1308)  data: 0.0015 (0.0207)  lr: 0.160000  max mem: 5011
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:55:06,760 maskrcnn_benchmark.trainer INFO: eta: 1:22:35  iter: 2060  loss: 0.7375 (0.9553)  loss_classifier: 0.2160 (0.3607)  loss_box_reg: 0.1264 (0.1454)  loss_mask: 0.3083 (0.3692)  loss_objectness: 0.0234 (0.0556)  loss_rpn_box_reg: 0.0133 (0.0245)  time: 0.1066 (0.1306)  data: 0.0015 (0.0205)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:08,895 maskrcnn_benchmark.trainer INFO: eta: 1:22:23  iter: 2080  loss: 0.7078 (0.9531)  loss_classifier: 0.2730 (0.3599)  loss_box_reg: 0.1050 (0.1451)  loss_mask: 0.2825 (0.3683)  loss_objectness: 0.0248 (0.0553)  loss_rpn_box_reg: 0.0131 (0.0244)  time: 0.1064 (0.1304)  data: 0.0015 (0.0204)  lr: 0.160000  max mem: 5011
DONE (t=3.12s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:55:11,023 maskrcnn_benchmark.trainer INFO: eta: 1:22:12  iter: 2100  loss: 0.7500 (0.9511)  loss_classifier: 0.2518 (0.3590)  loss_box_reg: 0.1197 (0.1449)  loss_mask: 0.2941 (0.3677)  loss_objectness: 0.0269 (0.0551)  loss_rpn_box_reg: 0.0089 (0.0244)  time: 0.1066 (0.1301)  data: 0.0015 (0.0202)  lr: 0.160000  max mem: 5011
DONE (t=3.67s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21015
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.37821
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.20712
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.08491
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.23241
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.31570
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.21480
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.34939
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36875
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19499
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.41076
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48856
2020-06-23 15:55:13,149 maskrcnn_benchmark.trainer INFO: eta: 1:22:01  iter: 2120  loss: 0.7261 (0.9495)  loss_classifier: 0.2602 (0.3585)  loss_box_reg: 0.0990 (0.1447)  loss_mask: 0.2901 (0.3669)  loss_objectness: 0.0253 (0.0550)  loss_rpn_box_reg: 0.0095 (0.0243)  time: 0.1054 (0.1299)  data: 0.0015 (0.0200)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:13,580 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.21117099321386615, segm mAP: 0.21015050512970704
:::MLLOG {"namespace": "", "time_ms": 1592952913580, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.21117099321386615, "SEGM": 0.21015050512970704}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1592952913580, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 2}}
2020-06-23 15:55:15,493 maskrcnn_benchmark.trainer INFO: eta: 1:21:54  iter: 2140  loss: 0.8223 (0.9482)  loss_classifier: 0.2897 (0.3582)  loss_box_reg: 0.1391 (0.1447)  loss_mask: 0.3109 (0.3665)  loss_objectness: 0.0163 (0.0547)  loss_rpn_box_reg: 0.0101 (0.0242)  time: 0.1062 (0.1298)  data: 0.0015 (0.0198)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:17,608 maskrcnn_benchmark.trainer INFO: eta: 1:21:43  iter: 2160  loss: 0.7759 (0.9468)  loss_classifier: 0.2744 (0.3576)  loss_box_reg: 0.1319 (0.1446)  loss_mask: 0.3074 (0.3659)  loss_objectness: 0.0308 (0.0545)  loss_rpn_box_reg: 0.0140 (0.0241)  time: 0.1059 (0.1296)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:19,738 maskrcnn_benchmark.trainer INFO: eta: 1:21:32  iter: 2180  loss: 0.7784 (0.9457)  loss_classifier: 0.2770 (0.3571)  loss_box_reg: 0.1135 (0.1446)  loss_mask: 0.2836 (0.3654)  loss_objectness: 0.0309 (0.0544)  loss_rpn_box_reg: 0.0150 (0.0241)  time: 0.1065 (0.1294)  data: 0.0015 (0.0195)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:21,874 maskrcnn_benchmark.trainer INFO: eta: 1:21:22  iter: 2200  loss: 0.7432 (0.9439)  loss_classifier: 0.2851 (0.3565)  loss_box_reg: 0.1305 (0.1445)  loss_mask: 0.2759 (0.3647)  loss_objectness: 0.0224 (0.0542)  loss_rpn_box_reg: 0.0111 (0.0240)  time: 0.1069 (0.1292)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:23,994 maskrcnn_benchmark.trainer INFO: eta: 1:21:12  iter: 2220  loss: 0.7861 (0.9423)  loss_classifier: 0.2775 (0.3558)  loss_box_reg: 0.1119 (0.1443)  loss_mask: 0.2976 (0.3642)  loss_objectness: 0.0258 (0.0540)  loss_rpn_box_reg: 0.0089 (0.0240)  time: 0.1059 (0.1290)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:26,122 maskrcnn_benchmark.trainer INFO: eta: 1:21:01  iter: 2240  loss: 0.7594 (0.9407)  loss_classifier: 0.2907 (0.3552)  loss_box_reg: 0.1169 (0.1441)  loss_mask: 0.2952 (0.3636)  loss_objectness: 0.0214 (0.0538)  loss_rpn_box_reg: 0.0090 (0.0239)  time: 0.1063 (0.1288)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:28,254 maskrcnn_benchmark.trainer INFO: eta: 1:20:51  iter: 2260  loss: 0.8379 (0.9395)  loss_classifier: 0.3030 (0.3547)  loss_box_reg: 0.1228 (0.1441)  loss_mask: 0.3054 (0.3631)  loss_objectness: 0.0311 (0.0538)  loss_rpn_box_reg: 0.0113 (0.0239)  time: 0.1065 (0.1286)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:30,380 maskrcnn_benchmark.trainer INFO: eta: 1:20:41  iter: 2280  loss: 0.6967 (0.9378)  loss_classifier: 0.2437 (0.3539)  loss_box_reg: 0.1216 (0.1438)  loss_mask: 0.3015 (0.3625)  loss_objectness: 0.0243 (0.0536)  loss_rpn_box_reg: 0.0166 (0.0239)  time: 0.1062 (0.1284)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:32,504 maskrcnn_benchmark.trainer INFO: eta: 1:20:32  iter: 2300  loss: 0.7387 (0.9365)  loss_classifier: 0.2692 (0.3534)  loss_box_reg: 0.1152 (0.1437)  loss_mask: 0.3001 (0.3620)  loss_objectness: 0.0298 (0.0535)  loss_rpn_box_reg: 0.0106 (0.0239)  time: 0.1064 (0.1282)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:34,637 maskrcnn_benchmark.trainer INFO: eta: 1:20:22  iter: 2320  loss: 0.7723 (0.9348)  loss_classifier: 0.2766 (0.3527)  loss_box_reg: 0.1133 (0.1436)  loss_mask: 0.2921 (0.3614)  loss_objectness: 0.0254 (0.0533)  loss_rpn_box_reg: 0.0088 (0.0238)  time: 0.1065 (0.1280)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:36,764 maskrcnn_benchmark.trainer INFO: eta: 1:20:12  iter: 2340  loss: 0.6946 (0.9331)  loss_classifier: 0.2075 (0.3519)  loss_box_reg: 0.1079 (0.1433)  loss_mask: 0.2984 (0.3609)  loss_objectness: 0.0314 (0.0532)  loss_rpn_box_reg: 0.0118 (0.0238)  time: 0.1061 (0.1278)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:38,936 maskrcnn_benchmark.trainer INFO: eta: 1:20:04  iter: 2360  loss: 0.8036 (0.9318)  loss_classifier: 0.2677 (0.3513)  loss_box_reg: 0.1430 (0.1432)  loss_mask: 0.2927 (0.3605)  loss_objectness: 0.0266 (0.0530)  loss_rpn_box_reg: 0.0127 (0.0238)  time: 0.1076 (0.1276)  data: 0.0015 (0.0181)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:41,071 maskrcnn_benchmark.trainer INFO: eta: 1:19:55  iter: 2380  loss: 0.7590 (0.9303)  loss_classifier: 0.2904 (0.3506)  loss_box_reg: 0.1138 (0.1430)  loss_mask: 0.2900 (0.3599)  loss_objectness: 0.0336 (0.0530)  loss_rpn_box_reg: 0.0091 (0.0238)  time: 0.1063 (0.1275)  data: 0.0015 (0.0180)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:43,199 maskrcnn_benchmark.trainer INFO: eta: 1:19:46  iter: 2400  loss: 0.7467 (0.9290)  loss_classifier: 0.2629 (0.3501)  loss_box_reg: 0.1230 (0.1429)  loss_mask: 0.2889 (0.3595)  loss_objectness: 0.0251 (0.0528)  loss_rpn_box_reg: 0.0098 (0.0237)  time: 0.1062 (0.1273)  data: 0.0015 (0.0178)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:45,345 maskrcnn_benchmark.trainer INFO: eta: 1:19:37  iter: 2420  loss: 0.7160 (0.9276)  loss_classifier: 0.2551 (0.3494)  loss_box_reg: 0.1127 (0.1428)  loss_mask: 0.3030 (0.3591)  loss_objectness: 0.0275 (0.0527)  loss_rpn_box_reg: 0.0112 (0.0237)  time: 0.1072 (0.1271)  data: 0.0015 (0.0177)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:47,494 maskrcnn_benchmark.trainer INFO: eta: 1:19:28  iter: 2440  loss: 0.7500 (0.9261)  loss_classifier: 0.2558 (0.3486)  loss_box_reg: 0.1138 (0.1426)  loss_mask: 0.3004 (0.3585)  loss_objectness: 0.0353 (0.0526)  loss_rpn_box_reg: 0.0097 (0.0237)  time: 0.1066 (0.1270)  data: 0.0015 (0.0176)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:49,642 maskrcnn_benchmark.trainer INFO: eta: 1:19:20  iter: 2460  loss: 0.8139 (0.9250)  loss_classifier: 0.2933 (0.3483)  loss_box_reg: 0.1302 (0.1426)  loss_mask: 0.2917 (0.3580)  loss_objectness: 0.0258 (0.0525)  loss_rpn_box_reg: 0.0125 (0.0237)  time: 0.1075 (0.1268)  data: 0.0015 (0.0174)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:51,786 maskrcnn_benchmark.trainer INFO: eta: 1:19:11  iter: 2480  loss: 0.7136 (0.9232)  loss_classifier: 0.2529 (0.3475)  loss_box_reg: 0.1111 (0.1424)  loss_mask: 0.2887 (0.3574)  loss_objectness: 0.0228 (0.0523)  loss_rpn_box_reg: 0.0094 (0.0237)  time: 0.1061 (0.1266)  data: 0.0015 (0.0173)  lr: 0.160000  max mem: 5011
2020-06-23 15:55:53,944 maskrcnn_benchmark.trainer INFO: eta: 1:19:03  iter: 2500  loss: 0.7225 (0.9219)  loss_classifier: 0.2619 (0.3470)  loss_box_reg: 0.1055 (0.1422)  loss_mask: 0.2855 (0.3568)  loss_objectness: 0.0377 (0.0522)  loss_rpn_box_reg: 0.0121 (0.0237)  time: 0.1066 (0.1265)  data: 0.0015 (0.0172)  lr: 0.160000  max mem: 5045
2020-06-23 15:55:56,074 maskrcnn_benchmark.trainer INFO: eta: 1:18:55  iter: 2520  loss: 0.7637 (0.9205)  loss_classifier: 0.2624 (0.3464)  loss_box_reg: 0.1274 (0.1421)  loss_mask: 0.2888 (0.3563)  loss_objectness: 0.0349 (0.0521)  loss_rpn_box_reg: 0.0126 (0.0237)  time: 0.1061 (0.1263)  data: 0.0015 (0.0171)  lr: 0.160000  max mem: 5045
2020-06-23 15:55:58,234 maskrcnn_benchmark.trainer INFO: eta: 1:18:47  iter: 2540  loss: 0.7018 (0.9190)  loss_classifier: 0.2515 (0.3458)  loss_box_reg: 0.1116 (0.1419)  loss_mask: 0.2733 (0.3556)  loss_objectness: 0.0182 (0.0520)  loss_rpn_box_reg: 0.0176 (0.0237)  time: 0.1082 (0.1262)  data: 0.0014 (0.0169)  lr: 0.160000  max mem: 5045
2020-06-23 15:56:00,373 maskrcnn_benchmark.trainer INFO: eta: 1:18:38  iter: 2560  loss: 0.7820 (0.9178)  loss_classifier: 0.2618 (0.3452)  loss_box_reg: 0.1278 (0.1417)  loss_mask: 0.3102 (0.3552)  loss_objectness: 0.0266 (0.0519)  loss_rpn_box_reg: 0.0109 (0.0238)  time: 0.1061 (0.1260)  data: 0.0015 (0.0168)  lr: 0.160000  max mem: 5045
2020-06-23 15:56:02,503 maskrcnn_benchmark.trainer INFO: eta: 1:18:30  iter: 2580  loss: 0.7266 (0.9166)  loss_classifier: 0.2746 (0.3447)  loss_box_reg: 0.1229 (0.1416)  loss_mask: 0.3108 (0.3548)  loss_objectness: 0.0240 (0.0517)  loss_rpn_box_reg: 0.0079 (0.0237)  time: 0.1064 (0.1259)  data: 0.0015 (0.0167)  lr: 0.160000  max mem: 5045
2020-06-23 15:56:04,637 maskrcnn_benchmark.trainer INFO: eta: 1:18:22  iter: 2600  loss: 0.7826 (0.9158)  loss_classifier: 0.3080 (0.3444)  loss_box_reg: 0.1294 (0.1416)  loss_mask: 0.3112 (0.3544)  loss_objectness: 0.0384 (0.0517)  loss_rpn_box_reg: 0.0173 (0.0237)  time: 0.1060 (0.1257)  data: 0.0015 (0.0166)  lr: 0.160000  max mem: 5045
2020-06-23 15:56:06,753 maskrcnn_benchmark.trainer INFO: eta: 1:18:14  iter: 2620  loss: 0.7293 (0.9146)  loss_classifier: 0.2706 (0.3439)  loss_box_reg: 0.1283 (0.1415)  loss_mask: 0.2914 (0.3540)  loss_objectness: 0.0279 (0.0515)  loss_rpn_box_reg: 0.0137 (0.0237)  time: 0.1057 (0.1256)  data: 0.0015 (0.0165)  lr: 0.160000  max mem: 5045
2020-06-23 15:56:08,884 maskrcnn_benchmark.trainer INFO: eta: 1:18:06  iter: 2640  loss: 0.6633 (0.9133)  loss_classifier: 0.2411 (0.3434)  loss_box_reg: 0.1058 (0.1414)  loss_mask: 0.2796 (0.3536)  loss_objectness: 0.0216 (0.0514)  loss_rpn_box_reg: 0.0079 (0.0236)  time: 0.1060 (0.1254)  data: 0.0014 (0.0164)  lr: 0.160000  max mem: 5045
2020-06-23 15:56:11,028 maskrcnn_benchmark.trainer INFO: eta: 1:17:58  iter: 2660  loss: 0.6798 (0.9120)  loss_classifier: 0.2541 (0.3428)  loss_box_reg: 0.1095 (0.1413)  loss_mask: 0.2771 (0.3531)  loss_objectness: 0.0235 (0.0512)  loss_rpn_box_reg: 0.0124 (0.0236)  time: 0.1068 (0.1253)  data: 0.0015 (0.0162)  lr: 0.160000  max mem: 5045
2020-06-23 15:56:13,164 maskrcnn_benchmark.trainer INFO: eta: 1:17:51  iter: 2680  loss: 0.6580 (0.9102)  loss_classifier: 0.2365 (0.3422)  loss_box_reg: 0.0848 (0.1409)  loss_mask: 0.2571 (0.3524)  loss_objectness: 0.0262 (0.0511)  loss_rpn_box_reg: 0.0102 (0.0236)  time: 0.1058 (0.1252)  data: 0.0015 (0.0161)  lr: 0.160000  max mem: 5045
2020-06-23 15:56:15,308 maskrcnn_benchmark.trainer INFO: eta: 1:17:43  iter: 2700  loss: 0.7592 (0.9091)  loss_classifier: 0.2889 (0.3418)  loss_box_reg: 0.1282 (0.1408)  loss_mask: 0.2699 (0.3520)  loss_objectness: 0.0252 (0.0510)  loss_rpn_box_reg: 0.0135 (0.0235)  time: 0.1076 (0.1250)  data: 0.0015 (0.0160)  lr: 0.160000  max mem: 5045
2020-06-23 15:56:17,441 maskrcnn_benchmark.trainer INFO: eta: 1:17:36  iter: 2720  loss: 0.7123 (0.9078)  loss_classifier: 0.2689 (0.3412)  loss_box_reg: 0.1154 (0.1407)  loss_mask: 0.2869 (0.3516)  loss_objectness: 0.0273 (0.0509)  loss_rpn_box_reg: 0.0122 (0.0235)  time: 0.1060 (0.1249)  data: 0.0014 (0.0159)  lr: 0.160000  max mem: 5045
2020-06-23 15:56:19,579 maskrcnn_benchmark.trainer INFO: eta: 1:17:28  iter: 2740  loss: 0.8197 (0.9072)  loss_classifier: 0.3188 (0.3410)  loss_box_reg: 0.1306 (0.1407)  loss_mask: 0.2909 (0.3513)  loss_objectness: 0.0255 (0.0507)  loss_rpn_box_reg: 0.0103 (0.0235)  time: 0.1071 (0.1248)  data: 0.0015 (0.0158)  lr: 0.160000  max mem: 5045
:::MLLOG {"namespace": "", "time_ms": 1592952981850, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1592952981850, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1592952981851, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 3}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 15:56:22,079 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
Done (t=0.27s)
creating index...
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.30s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
2020-06-23 15:56:22,395 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
index created!
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.24it/s]
 16%|        | 13/79 [00:01<00:15,  4.39it/s]
 20%|        | 16/79 [00:01<00:10,  5.86it/s]
 24%|       | 19/79 [00:01<00:07,  7.62it/s]
 28%|       | 22/79 [00:01<00:05,  9.63it/s]
 32%|      | 25/79 [00:01<00:04, 11.90it/s]
 35%|      | 28/79 [00:01<00:03, 14.23it/s]
 39%|      | 31/79 [00:01<00:02, 16.42it/s]
 43%|     | 34/79 [00:02<00:02, 18.39it/s]
 47%|     | 37/79 [00:02<00:02, 20.09it/s]
 51%|     | 40/79 [00:02<00:01, 21.60it/s]
 54%|    | 43/79 [00:02<00:01, 22.90it/s]
 58%|    | 46/79 [00:02<00:01, 23.70it/s]
 62%|   | 49/79 [00:02<00:01, 24.40it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.56it/s]
 28%|       | 22/79 [00:01<00:05,  9.60it/s]
 32%|      | 25/79 [00:01<00:04, 11.81it/s]
 35%|      | 28/79 [00:01<00:03, 14.09it/s]
 39%|      | 31/79 [00:02<00:02, 16.26it/s]
 43%|     | 34/79 [00:02<00:02, 18.21it/s]
 47%|     | 37/79 [00:02<00:02, 19.86it/s]
 51%|     | 40/79 [00:02<00:01, 21.36it/s]
 54%|    | 43/79 [00:02<00:01, 22.51it/s]
 58%|    | 46/79 [00:02<00:01, 23.32it/s]
 62%|   | 49/79 [00:02<00:01, 24.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.27it/s]
 16%|        | 13/79 [00:01<00:14,  4.42it/s]
 20%|        | 16/79 [00:01<00:10,  5.85it/s]
 24%|       | 19/79 [00:01<00:07,  7.61it/s]
 28%|       | 22/79 [00:01<00:05,  9.62it/s]
 32%|      | 25/79 [00:01<00:04, 11.77it/s]
 35%|      | 28/79 [00:01<00:03, 13.91it/s]
 39%|      | 31/79 [00:02<00:02, 16.20it/s]
 43%|     | 34/79 [00:02<00:02, 17.85it/s]
 47%|     | 37/79 [00:02<00:02, 19.47it/s]
 51%|     | 40/79 [00:02<00:01, 20.75it/s]
 54%|    | 43/79 [00:02<00:01, 22.07it/s]
 58%|    | 46/79 [00:02<00:01, 23.03it/s]
 62%|   | 49/79 [00:02<00:01, 23.27it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.27it/s]
 16%|        | 13/79 [00:01<00:14,  4.42it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.62it/s]
 28%|       | 22/79 [00:01<00:05,  9.63it/s]
 32%|      | 25/79 [00:01<00:04, 11.81it/s]
 35%|      | 28/79 [00:01<00:03, 14.08it/s]
 39%|      | 31/79 [00:02<00:02, 16.17it/s]
 43%|     | 34/79 [00:02<00:02, 18.23it/s]
 47%|     | 37/79 [00:02<00:02, 19.76it/s]
 51%|     | 40/79 [00:02<00:01, 21.11it/s]
 54%|    | 43/79 [00:02<00:01, 22.24it/s]
 58%|    | 46/79 [00:02<00:01, 23.14it/s]
 62%|   | 49/79 [00:02<00:01, 23.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.46it/s]
 35%|      | 28/79 [00:01<00:03, 13.76it/s]
 39%|      | 31/79 [00:02<00:03, 15.96it/s]
 43%|     | 34/79 [00:02<00:02, 18.02it/s]
 47%|     | 37/79 [00:02<00:02, 19.84it/s]
 51%|     | 40/79 [00:02<00:01, 21.42it/s]
 54%|    | 43/79 [00:02<00:01, 22.41it/s]
 58%|    | 46/79 [00:02<00:01, 23.37it/s]
 62%|   | 49/79 [00:02<00:01, 24.15it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:14,  4.40it/s]
 20%|        | 16/79 [00:01<00:10,  5.85it/s]
 24%|       | 19/79 [00:01<00:07,  7.60it/s]
 28%|       | 22/79 [00:01<00:05,  9.60it/s]
 32%|      | 25/79 [00:01<00:04, 11.81it/s]
 35%|      | 28/79 [00:01<00:03, 14.02it/s]
 39%|      | 31/79 [00:02<00:02, 16.14it/s]
 43%|     | 34/79 [00:02<00:02, 18.13it/s]
 47%|     | 37/79 [00:02<00:02, 19.83it/s]
 51%|     | 40/79 [00:02<00:01, 21.16it/s]
 54%|    | 43/79 [00:02<00:01, 22.21it/s]
 58%|    | 46/79 [00:02<00:01, 23.08it/s]
 62%|   | 49/79 [00:02<00:01, 23.77it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.78it/s]
 24%|       | 19/79 [00:01<00:08,  7.50it/s]
 28%|       | 22/79 [00:01<00:06,  9.50it/s]
 32%|      | 25/79 [00:01<00:04, 11.69it/s]
 35%|      | 28/79 [00:01<00:03, 13.68it/s]
 39%|      | 31/79 [00:02<00:03, 15.77it/s]
 43%|     | 34/79 [00:02<00:02, 17.63it/s]
 47%|     | 37/79 [00:02<00:02, 19.43it/s]
 51%|     | 40/79 [00:02<00:01, 20.75it/s]
 54%|    | 43/79 [00:02<00:01, 21.79it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:05,  9.51it/s]
 32%|      | 25/79 [00:01<00:04, 11.62it/s]
 35%|      | 28/79 [00:01<00:03, 13.86it/s]
 39%|      | 31/79 [00:02<00:03, 15.92it/s]
 43%|     | 34/79 [00:02<00:02, 17.91it/s]
 47%|     | 37/79 [00:02<00:02, 19.47it/s]
 51%|     | 40/79 [00:02<00:01, 20.70it/s]
 54%|    | 43/79 [00:02<00:01, 21.89it/s]
 58%|    | 46/79 [00:02<00:01, 22.92it/s]
 62%|   | 49/79 [00:02<00:01, 23.48it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.42it/s]
 35%|      | 28/79 [00:01<00:03, 13.66it/s]
 39%|      | 31/79 [00:02<00:03, 15.85it/s]
 43%|     | 34/79 [00:02<00:02, 17.87it/s]
 47%|     | 37/79 [00:02<00:02, 19.45it/s]
 51%|     | 40/79 [00:02<00:01, 20.82it/s]
 54%|    | 43/79 [00:02<00:01, 21.89it/s]
 58%|    | 46/79 [00:02<00:01, 22.59it/s]
 62%|   | 49/79 [00:02<00:01, 23.17it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.45it/s]
 35%|      | 28/79 [00:01<00:03, 13.75it/s]
 39%|      | 31/79 [00:02<00:03, 15.90it/s]
 43%|     | 34/79 [00:02<00:02, 17.89it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 21.13it/s]
 54%|    | 43/79 [00:02<00:01, 22.29it/s]
 58%|    | 46/79 [00:02<00:01, 22.74it/s]
 62%|   | 49/79 [00:02<00:01, 23.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.20it/s]
 28%|       | 22/79 [00:01<00:06,  9.17it/s]
 32%|      | 25/79 [00:01<00:04, 11.38it/s]
 35%|      | 28/79 [00:01<00:03, 13.67it/s]
 39%|      | 31/79 [00:02<00:03, 15.92it/s]
 43%|     | 34/79 [00:02<00:02, 18.00it/s]
 47%|     | 37/79 [00:02<00:02, 19.83it/s]
 51%|     | 40/79 [00:02<00:01, 21.29it/s]
 54%|    | 43/79 [00:02<00:01, 22.60it/s]
 58%|    | 46/79 [00:02<00:01, 23.18it/s]
 62%|   | 49/79 [00:02<00:01, 23.82it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  4%|         | 3/79 [00:00<00:44,  1.70it/s]
  8%|         | 6/79 [00:01<00:31,  2.35it/s]
 11%|        | 9/79 [00:01<00:21,  3.22it/s]
 15%|        | 12/79 [00:01<00:15,  4.36it/s]
 19%|        | 15/79 [00:01<00:11,  5.80it/s]
 23%|       | 18/79 [00:01<00:08,  7.51it/s]
 27%|       | 21/79 [00:01<00:06,  9.51it/s]
 30%|       | 24/79 [00:01<00:04, 11.58it/s]
 34%|      | 27/79 [00:01<00:03, 13.79it/s]
 38%|      | 30/79 [00:02<00:03, 15.77it/s]
 42%|     | 33/79 [00:02<00:02, 17.68it/s]
 46%|     | 36/79 [00:02<00:02, 19.09it/s]
 49%|     | 39/79 [00:02<00:01, 20.39it/s]
 53%|    | 42/79 [00:02<00:01, 21.40it/s]
 57%|    | 45/79 [00:02<00:01, 22.40it/s]
 61%|    | 48/79 [00:02<00:01, 23.01it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  4%|         | 3/79 [00:00<00:45,  1.66it/s]
  8%|         | 6/79 [00:01<00:31,  2.30it/s]
 11%|        | 9/79 [00:01<00:22,  3.16it/s]
 15%|        | 12/79 [00:01<00:15,  4.27it/s]
 19%|        | 15/79 [00:01<00:11,  5.68it/s]
 23%|       | 18/79 [00:01<00:08,  7.39it/s]
 27%|       | 21/79 [00:01<00:06,  9.36it/s]
 30%|       | 24/79 [00:01<00:04, 11.54it/s]
 34%|      | 27/79 [00:01<00:03, 13.73it/s]
 38%|      | 30/79 [00:02<00:03, 15.93it/s]
 42%|     | 33/79 [00:02<00:02, 17.85it/s]
 46%|     | 36/79 [00:02<00:02, 19.53it/s]
 49%|     | 39/79 [00:02<00:01, 20.73it/s]
 53%|    | 42/79 [00:02<00:01, 21.84it/s]
 57%|    | 45/79 [00:02<00:01, 22.76it/s]
 61%|    | 48/79 [00:02<00:01, 23.28it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.32it/s]
 32%|      | 25/79 [00:01<00:04, 11.41it/s]
 35%|      | 28/79 [00:01<00:03, 13.64it/s]
 39%|      | 31/79 [00:02<00:03, 15.85it/s]
 43%|     | 34/79 [00:02<00:02, 17.83it/s]
 47%|     | 37/79 [00:02<00:02, 19.46it/s]
 51%|     | 40/79 [00:02<00:01, 20.82it/s]
 54%|    | 43/79 [00:02<00:01, 22.00it/s]
 58%|    | 46/79 [00:02<00:01, 22.82it/s]
 62%|   | 49/79 [00:02<00:01, 23.16it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.46it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.72it/s]
 43%|     | 34/79 [00:02<00:02, 17.68it/s]
 47%|     | 37/79 [00:02<00:02, 19.41it/s]
 51%|     | 40/79 [00:02<00:01, 20.56it/s]
 54%|    | 43/79 [00:02<00:01, 21.79it/s]
 58%|    | 46/79 [00:02<00:01, 22.73it/s]
 62%|   | 49/79 [00:02<00:01, 23.52it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.39it/s]
 24%|       | 19/79 [00:01<00:08,  7.06it/s]
 28%|       | 22/79 [00:01<00:06,  8.99it/s]
 32%|      | 25/79 [00:01<00:04, 11.17it/s]
 35%|      | 28/79 [00:01<00:03, 13.43it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.82it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 22.31it/s]
 58%|    | 46/79 [00:02<00:01, 23.24it/s]
 62%|   | 49/79 [00:02<00:01, 23.67it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:11,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.50it/s]
 35%|      | 28/79 [00:01<00:03, 13.73it/s]
 39%|      | 31/79 [00:02<00:03, 15.89it/s]
 43%|     | 34/79 [00:02<00:02, 17.72it/s]
 47%|     | 37/79 [00:02<00:02, 19.25it/s]
 51%|     | 40/79 [00:02<00:01, 20.57it/s]
 54%|    | 43/79 [00:02<00:01, 21.58it/s]
 58%|    | 46/79 [00:02<00:01, 22.36it/s]
 62%|   | 49/79 [00:02<00:01, 22.61it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  7.01it/s]
 28%|       | 22/79 [00:01<00:06,  8.97it/s]
 32%|      | 25/79 [00:01<00:04, 11.12it/s]
 35%|      | 28/79 [00:01<00:03, 13.32it/s]
 39%|      | 31/79 [00:02<00:03, 15.58it/s]
 43%|     | 34/79 [00:02<00:02, 17.68it/s]
 47%|     | 37/79 [00:02<00:02, 19.18it/s]
 51%|     | 40/79 [00:02<00:01, 20.67it/s]
 54%|    | 43/79 [00:02<00:01, 21.82it/s]
 58%|    | 46/79 [00:02<00:01, 22.60it/s]
 62%|   | 49/79 [00:02<00:01, 23.37it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.31it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.68it/s]
 39%|      | 31/79 [00:02<00:03, 15.72it/s]
 43%|     | 34/79 [00:02<00:02, 17.78it/s]
 47%|     | 37/79 [00:02<00:02, 19.30it/s]
 51%|     | 40/79 [00:02<00:01, 20.63it/s]
 54%|    | 43/79 [00:02<00:01, 21.99it/s]
 58%|    | 46/79 [00:02<00:01, 22.76it/s]
 62%|   | 49/79 [00:02<00:01, 21.78it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.47it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.56it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:03, 15.94it/s]
 43%|     | 34/79 [00:02<00:02, 17.90it/s]
 47%|     | 37/79 [00:02<00:02, 19.42it/s]
 51%|     | 40/79 [00:02<00:01, 20.60it/s]
 54%|    | 43/79 [00:02<00:01, 21.59it/s]
 58%|    | 46/79 [00:02<00:01, 22.54it/s]
 62%|   | 49/79 [00:02<00:01, 22.92it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  8.98it/s]
 32%|      | 25/79 [00:01<00:04, 11.14it/s]
 35%|      | 28/79 [00:01<00:03, 13.37it/s]
 39%|      | 31/79 [00:02<00:03, 15.56it/s]
 43%|     | 34/79 [00:02<00:02, 17.51it/s]
 47%|     | 37/79 [00:02<00:02, 19.32it/s]
 51%|     | 40/79 [00:02<00:01, 20.63it/s]
 54%|    | 43/79 [00:02<00:01, 21.81it/s]
 58%|    | 46/79 [00:02<00:01, 22.54it/s]
 62%|   | 49/79 [00:02<00:01, 23.37it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.23it/s]
 28%|       | 22/79 [00:01<00:06,  9.23it/s]
 32%|      | 25/79 [00:01<00:04, 11.38it/s]
 35%|      | 28/79 [00:01<00:03, 13.55it/s]
 39%|      | 31/79 [00:02<00:03, 15.60it/s]
 43%|     | 34/79 [00:02<00:02, 17.58it/s]
 47%|     | 37/79 [00:02<00:02, 19.28it/s]
 51%|     | 40/79 [00:02<00:01, 20.44it/s]
 54%|    | 43/79 [00:02<00:01, 21.27it/s]
 58%|    | 46/79 [00:02<00:01, 22.28it/s]
 62%|   | 49/79 [00:02<00:01, 23.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  6.99it/s]
 28%|       | 22/79 [00:01<00:06,  8.91it/s]
 32%|      | 25/79 [00:01<00:04, 11.00it/s]
 35%|      | 28/79 [00:02<00:03, 13.19it/s]
 39%|      | 31/79 [00:02<00:03, 15.31it/s]
 43%|     | 34/79 [00:02<00:02, 17.24it/s]
 47%|     | 37/79 [00:02<00:02, 19.07it/s]
 51%|     | 40/79 [00:02<00:01, 20.35it/s]
 54%|    | 43/79 [00:02<00:01, 21.49it/s]
 58%|    | 46/79 [00:02<00:01, 22.72it/s]
 62%|   | 49/79 [00:02<00:01, 23.27it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.42it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.74it/s]
 43%|     | 34/79 [00:02<00:02, 17.47it/s]
 47%|     | 37/79 [00:02<00:02, 19.07it/s]
 51%|     | 40/79 [00:02<00:01, 20.42it/s]
 54%|    | 43/79 [00:02<00:01, 21.47it/s]
 58%|    | 46/79 [00:02<00:01, 22.32it/s]
 62%|   | 49/79 [00:02<00:01, 23.02it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.38it/s]
 35%|      | 28/79 [00:01<00:03, 13.60it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.53it/s]
 47%|     | 37/79 [00:02<00:02, 19.07it/s]
 51%|     | 40/79 [00:02<00:01, 20.34it/s]
 54%|    | 43/79 [00:02<00:01, 21.37it/s]
 58%|    | 46/79 [00:02<00:01, 22.03it/s]
 62%|   | 49/79 [00:02<00:01, 22.42it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.30it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.83it/s]
 32%|      | 25/79 [00:01<00:04, 10.98it/s]
 35%|      | 28/79 [00:02<00:03, 13.19it/s]
 39%|      | 31/79 [00:02<00:03, 15.29it/s]
 43%|     | 34/79 [00:02<00:02, 17.34it/s]
 47%|     | 37/79 [00:02<00:02, 19.06it/s]
 51%|     | 40/79 [00:02<00:01, 20.33it/s]
 54%|    | 43/79 [00:02<00:01, 21.36it/s]
 58%|    | 46/79 [00:02<00:01, 22.22it/s]
 62%|   | 49/79 [00:02<00:01, 22.94it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.18it/s]
 24%|       | 19/79 [00:01<00:08,  6.77it/s]
 28%|       | 22/79 [00:01<00:06,  8.66it/s]
 32%|      | 25/79 [00:01<00:05, 10.74it/s]
 35%|      | 28/79 [00:02<00:03, 13.02it/s]
 39%|      | 31/79 [00:02<00:03, 15.18it/s]
 43%|     | 34/79 [00:02<00:02, 17.24it/s]
 47%|     | 37/79 [00:02<00:02, 19.02it/s]
 51%|     | 40/79 [00:02<00:01, 20.40it/s]
 54%|    | 43/79 [00:02<00:01, 21.65it/s]
 58%|    | 46/79 [00:02<00:01, 22.50it/s]
 62%|   | 49/79 [00:02<00:01, 23.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.45it/s]
 24%|       | 19/79 [00:01<00:08,  7.12it/s]
 28%|       | 22/79 [00:01<00:06,  9.03it/s]
 32%|      | 25/79 [00:01<00:04, 11.09it/s]
 35%|      | 28/79 [00:02<00:03, 13.29it/s]
 39%|      | 31/79 [00:02<00:03, 15.42it/s]
 43%|     | 34/79 [00:02<00:02, 17.20it/s]
 47%|     | 37/79 [00:02<00:02, 18.58it/s]
 51%|     | 40/79 [00:02<00:01, 19.98it/s]
 54%|    | 43/79 [00:02<00:01, 21.01it/s]
 58%|    | 46/79 [00:02<00:01, 21.68it/s]
 62%|   | 49/79 [00:02<00:01, 22.30it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.46it/s]
 24%|       | 19/79 [00:01<00:08,  7.14it/s]
 28%|       | 22/79 [00:01<00:06,  9.10it/s]
 32%|      | 25/79 [00:01<00:04, 11.10it/s]
 35%|      | 28/79 [00:01<00:03, 13.26it/s]
 39%|      | 31/79 [00:02<00:03, 15.50it/s]
 43%|     | 34/79 [00:02<00:02, 17.25it/s]
 47%|     | 37/79 [00:02<00:02, 18.98it/s]
 51%|     | 40/79 [00:02<00:01, 20.31it/s]
 54%|    | 43/79 [00:02<00:01, 21.32it/s]
 58%|    | 46/79 [00:02<00:01, 22.23it/s]
 62%|   | 49/79 [00:02<00:01, 22.60it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:17,  3.88it/s]
 20%|        | 16/79 [00:01<00:12,  5.19it/s]
 24%|       | 19/79 [00:01<00:08,  6.81it/s]
 28%|       | 22/79 [00:01<00:06,  8.72it/s]
 32%|      | 25/79 [00:01<00:04, 10.80it/s]
 35%|      | 28/79 [00:02<00:03, 12.99it/s]
 39%|      | 31/79 [00:02<00:03, 15.23it/s]
 43%|     | 34/79 [00:02<00:02, 17.26it/s]
 47%|     | 37/79 [00:02<00:02, 19.06it/s]
 51%|     | 40/79 [00:02<00:01, 20.40it/s]
 54%|    | 43/79 [00:02<00:01, 21.63it/s]
 58%|    | 46/79 [00:02<00:01, 22.19it/s]
 62%|   | 49/79 [00:02<00:01, 22.72it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.97it/s]
 20%|        | 16/79 [00:01<00:11,  5.30it/s]
 24%|       | 19/79 [00:01<00:08,  6.96it/s]
 28%|       | 22/79 [00:01<00:06,  8.83it/s]
 32%|      | 25/79 [00:01<00:04, 10.96it/s]
 35%|      | 28/79 [00:02<00:03, 13.10it/s]
 39%|      | 31/79 [00:02<00:03, 15.21it/s]
 43%|     | 34/79 [00:02<00:02, 17.10it/s]
 47%|     | 37/79 [00:02<00:02, 18.74it/s]
 51%|     | 40/79 [00:02<00:01, 20.09it/s]
 54%|    | 43/79 [00:02<00:01, 21.10it/s]
 58%|    | 46/79 [00:02<00:01, 22.07it/s]
 62%|   | 49/79 [00:02<00:01, 22.55it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.89it/s]
 28%|       | 22/79 [00:01<00:06,  8.75it/s]
 32%|      | 25/79 [00:01<00:04, 10.86it/s]
 35%|      | 28/79 [00:02<00:03, 12.98it/s]
 39%|      | 31/79 [00:02<00:03, 15.15it/s]
 43%|     | 34/79 [00:02<00:02, 17.14it/s]
 47%|     | 37/79 [00:02<00:02, 18.56it/s]
 51%|     | 40/79 [00:02<00:01, 19.87it/s]
 54%|    | 43/79 [00:02<00:01, 21.01it/s]
 58%|    | 46/79 [00:02<00:01, 21.93it/s]
 62%|   | 49/79 [00:02<00:01, 22.61it/s]
 66%|   | 52/79 [00:03<00:01, 24.86it/s]
 70%|   | 55/79 [00:02<00:00, 25.02it/s]
 73%|  | 58/79 [00:03<00:00, 25.21it/s]
 77%|  | 61/79 [00:03<00:00, 25.28it/s]
 81%|  | 64/79 [00:03<00:00, 25.36it/s]
 85%| | 67/79 [00:03<00:00, 25.20it/s]
 89%| | 70/79 [00:03<00:00, 25.02it/s]
 92%|| 73/79 [00:03<00:00, 25.24it/s]
 96%|| 76/79 [00:03<00:00, 25.97it/s]
100%|| 79/79 [00:03<00:00, 26.78it/s]
, 24.65it/s]
 70%|   | 55/79 [00:02<00:00, 24.92it/s]
 73%|  | 58/79 [00:03<00:00, 25.28it/s]
 77%|  | 61/79 [00:03<00:00, 25.30it/s]
 81%|  | 64/79 [00:03<00:00, 25.23it/s]
 85%| | 67/79 [00:03<00:00, 25.30it/s]
 89%| | 70/79 [00:03<00:00, 25.22it/s]
 92%|| 73/79 [00:03<00:00, 25.23it/s]
 96%|| 76/79 [00:03<00:00, 25.87it/s]
100%|| 79/79 [00:03<00:00, 26.71it/s]
, 24.76it/s]
 70%|   | 55/79 [00:02<00:00, 25.28it/s]
 73%|  | 58/79 [00:03<00:00, 25.61it/s]
 77%|  | 61/79 [00:03<00:00, 25.74it/s]
 81%|  | 64/79 [00:03<00:00, 25.74it/s]
 85%| | 67/79 [00:03<00:00, 25.82it/s]
 89%| | 70/79 [00:03<00:00, 25.23it/s]
 92%|| 73/79 [00:03<00:00, 25.75it/s]
 96%|| 76/79 [00:03<00:00, 26.11it/s]
100%|| 79/79 [00:03<00:00, 26.92it/s]
, 23.46it/s]
 70%|   | 55/79 [00:03<00:01, 23.92it/s]
 73%|  | 58/79 [00:03<00:00, 24.20it/s]
 77%|  | 61/79 [00:03<00:00, 24.28it/s]
 81%|  | 64/79 [00:03<00:00, 24.32it/s]
 85%| | 67/79 [00:03<00:00, 24.73it/s]
 89%| | 70/79 [00:03<00:00, 25.23it/s]
 92%|| 73/79 [00:03<00:00, 25.31it/s]
 96%|| 76/79 [00:03<00:00, 26.03it/s]
100%|| 79/79 [00:03<00:00, 27.02it/s]
, 24.06it/s]
 70%|   | 55/79 [00:03<00:00, 24.61it/s]
 73%|  | 58/79 [00:03<00:00, 24.73it/s]
 77%|  | 61/79 [00:03<00:00, 25.03it/s]
 81%|  | 64/79 [00:03<00:00, 25.14it/s]
 85%| | 67/79 [00:03<00:00, 25.40it/s]
 89%| | 70/79 [00:03<00:00, 25.30it/s]
 92%|| 73/79 [00:03<00:00, 25.64it/s]
 96%|| 76/79 [00:03<00:00, 26.22it/s]
100%|| 79/79 [00:03<00:00, 27.03it/s]
, 23.84it/s]
 70%|   | 55/79 [00:02<00:00, 24.39it/s]
 73%|  | 58/79 [00:03<00:00, 24.53it/s]
 77%|  | 61/79 [00:03<00:00, 24.95it/s]
 81%|  | 64/79 [00:03<00:00, 25.00it/s]
 85%| | 67/79 [00:03<00:00, 25.18it/s]
 89%| | 70/79 [00:03<00:00, 25.30it/s]
 92%|| 73/79 [00:03<00:00, 25.54it/s]
 96%|| 76/79 [00:03<00:00, 26.26it/s]
100%|| 79/79 [00:03<00:00, 27.14it/s]
, 23.92it/s]
 70%|   | 55/79 [00:03<00:00, 24.43it/s]
 73%|  | 58/79 [00:03<00:00, 24.84it/s]
 77%|  | 61/79 [00:03<00:00, 24.89it/s]
 81%|  | 64/79 [00:03<00:00, 24.88it/s]
 85%| | 67/79 [00:03<00:00, 24.96it/s]
 89%| | 70/79 [00:03<00:00, 24.94it/s]
 92%|| 73/79 [00:03<00:00, 25.51it/s]
 96%|| 76/79 [00:03<00:00, 26.16it/s]
100%|| 79/79 [00:03<00:00, 27.11it/s]
, 24.24it/s]
 70%|   | 55/79 [00:03<00:00, 24.43it/s]
 73%|  | 58/79 [00:03<00:00, 24.77it/s]
 77%|  | 61/79 [00:03<00:00, 25.13it/s]
 81%|  | 64/79 [00:03<00:00, 25.20it/s]
 85%| | 67/79 [00:03<00:00, 25.46it/s]
 89%| | 70/79 [00:03<00:00, 25.24it/s]
 92%|| 73/79 [00:03<00:00, 25.43it/s]
 96%|| 76/79 [00:03<00:00, 26.08it/s]
100%|| 79/79 [00:03<00:00, 27.04it/s]
, 24.03it/s]
 70%|   | 55/79 [00:02<00:00, 24.50it/s]
 73%|  | 58/79 [00:03<00:00, 24.73it/s]
 77%|  | 61/79 [00:03<00:00, 24.83it/s]
 81%|  | 64/79 [00:03<00:00, 24.90it/s]
 85%| | 67/79 [00:03<00:00, 25.17it/s]
 89%| | 70/79 [00:03<00:00, 24.90it/s]
 92%|| 73/79 [00:03<00:00, 25.07it/s]
 96%|| 76/79 [00:03<00:00, 25.57it/s]
100%|| 79/79 [00:03<00:00, 26.41it/s]
, 23.86it/s]
 70%|   | 55/79 [00:03<00:00, 24.23it/s]
 73%|  | 58/79 [00:03<00:00, 24.74it/s]
 77%|  | 61/79 [00:03<00:00, 24.82it/s]
 81%|  | 64/79 [00:03<00:00, 24.75it/s]
 85%| | 67/79 [00:03<00:00, 24.89it/s]
 89%| | 70/79 [00:03<00:00, 24.96it/s]
 92%|| 73/79 [00:03<00:00, 25.22it/s]
 96%|| 76/79 [00:03<00:00, 25.83it/s]
100%|| 79/79 [00:03<00:00, 26.65it/s]
, 24.09it/s]
 70%|   | 55/79 [00:02<00:00, 24.23it/s]
 73%|  | 58/79 [00:03<00:00, 24.64it/s]
 77%|  | 61/79 [00:03<00:00, 24.60it/s]
 81%|  | 64/79 [00:03<00:00, 24.41it/s]
 85%| | 67/79 [00:03<00:00, 24.64it/s]
 89%| | 70/79 [00:03<00:00, 24.73it/s]
 92%|| 73/79 [00:03<00:00, 25.00it/s]
 96%|| 76/79 [00:03<00:00, 25.58it/s]
100%|| 79/79 [00:03<00:00, 26.44it/s]
, 24.29it/s]
 70%|   | 55/79 [00:03<00:00, 24.52it/s]
 73%|  | 58/79 [00:03<00:00, 24.90it/s]
 77%|  | 61/79 [00:03<00:00, 25.13it/s]
 81%|  | 64/79 [00:03<00:00, 25.31it/s]
 85%| | 67/79 [00:03<00:00, 25.65it/s]
 89%| | 70/79 [00:03<00:00, 25.62it/s]
 92%|| 73/79 [00:03<00:00, 25.94it/s]
 96%|| 76/79 [00:03<00:00, 26.32it/s]
100%|| 79/79 [00:03<00:00, 27.03it/s]
, 23.75it/s]
 70%|   | 55/79 [00:03<00:00, 24.25it/s]
 73%|  | 58/79 [00:03<00:00, 24.48it/s]
 77%|  | 61/79 [00:03<00:00, 24.74it/s]
 81%|  | 64/79 [00:03<00:00, 24.90it/s]
 85%| | 67/79 [00:03<00:00, 25.12it/s]
 89%| | 70/79 [00:03<00:00, 25.10it/s]
 92%|| 73/79 [00:03<00:00, 25.23it/s]
 96%|| 76/79 [00:03<00:00, 26.17it/s]
100%|| 79/79 [00:03<00:00, 26.36it/s]
, 23.89it/s]
 70%|   | 55/79 [00:03<00:00, 24.04it/s]
 73%|  | 58/79 [00:03<00:00, 24.30it/s]
 77%|  | 61/79 [00:03<00:00, 24.53it/s]
 81%|  | 64/79 [00:03<00:00, 24.45it/s]
 85%| | 67/79 [00:03<00:00, 24.65it/s]
 89%| | 70/79 [00:03<00:00, 24.72it/s]
 92%|| 73/79 [00:03<00:00, 25.17it/s]
 96%|| 76/79 [00:03<00:00, 25.70it/s]
100%|| 79/79 [00:03<00:00, 26.79it/s]
49it/s]
 68%|   | 54/79 [00:03<00:01, 23.77it/s]
 72%|  | 57/79 [00:03<00:00, 24.43it/s]
 76%|  | 60/79 [00:03<00:00, 24.72it/s]
 80%|  | 63/79 [00:03<00:00, 24.75it/s]
 84%| | 66/79 [00:03<00:00, 24.89it/s]
 87%| | 69/79 [00:03<00:00, 25.07it/s]
 91%| | 72/79 [00:03<00:00, 25.30it/s]
 95%|| 75/79 [00:03<00:00, 25.81it/s]
 99%|| 78/79 [00:03<00:00, 26.60it/s]
100%|| 79/79 [00:04<00:00, 19.61it/s]
, 23.86it/s]
 70%|   | 55/79 [00:03<00:00, 24.30it/s]
 73%|  | 58/79 [00:03<00:00, 24.67it/s]
 77%|  | 61/79 [00:03<00:00, 24.97it/s]
 81%|  | 64/79 [00:03<00:00, 25.02it/s]
 85%| | 67/79 [00:03<00:00, 25.24it/s]
 89%| | 70/79 [00:03<00:00, 25.35it/s]
 92%|| 73/79 [00:03<00:00, 25.57it/s]
 96%|| 76/79 [00:03<00:00, 26.11it/s]
100%|| 79/79 [00:03<00:00, 27.06it/s]
, 23.75it/s]
 70%|   | 55/79 [00:03<00:00, 24.05it/s]
 73%|  | 58/79 [00:03<00:00, 24.53it/s]
 77%|  | 61/79 [00:03<00:00, 24.73it/s]
 81%|  | 64/79 [00:03<00:00, 24.84it/s]
 85%| | 67/79 [00:03<00:00, 24.89it/s]
 89%| | 70/79 [00:03<00:00, 25.16it/s]
 92%|| 73/79 [00:03<00:00, 25.48it/s]
 96%|| 76/79 [00:03<00:00, 26.63it/s]
100%|| 79/79 [00:03<00:00, 26.91it/s]
, 23.14it/s]
 70%|   | 55/79 [00:03<00:01, 23.63it/s]
 73%|  | 58/79 [00:03<00:00, 23.74it/s]
 77%|  | 61/79 [00:03<00:00, 24.13it/s]
 81%|  | 64/79 [00:03<00:00, 24.46it/s]
 85%| | 67/79 [00:03<00:00, 24.75it/s]
 89%| | 70/79 [00:03<00:00, 24.51it/s]
 92%|| 73/79 [00:03<00:00, 25.14it/s]
 96%|| 76/79 [00:03<00:00, 25.82it/s]
100%|| 79/79 [00:03<00:00, 26.69it/s]
, 22.63it/s]
 70%|   | 55/79 [00:03<00:01, 23.32it/s]
 73%|  | 58/79 [00:03<00:00, 23.71it/s]
 77%|  | 61/79 [00:03<00:00, 24.11it/s]
 81%|  | 64/79 [00:03<00:00, 24.35it/s]
 85%| | 67/79 [00:03<00:00, 24.70it/s]
 89%| | 70/79 [00:03<00:00, 24.86it/s]
 92%|| 73/79 [00:03<00:00, 25.24it/s]
 96%|| 76/79 [00:03<00:00, 25.83it/s]
100%|| 79/79 [00:03<00:00, 26.92it/s]
, 23.46it/s]
 70%|   | 55/79 [00:03<00:01, 23.83it/s]
 73%|  | 58/79 [00:03<00:00, 24.23it/s]
 77%|  | 61/79 [00:03<00:00, 24.38it/s]
 81%|  | 64/79 [00:03<00:00, 24.52it/s]
 85%| | 67/79 [00:03<00:00, 24.77it/s]
 89%| | 70/79 [00:03<00:00, 25.17it/s]
 92%|| 73/79 [00:03<00:00, 25.23it/s]
 96%|| 76/79 [00:03<00:00, 26.04it/s]
100%|| 79/79 [00:03<00:00, 26.94it/s]
, 23.32it/s]
 70%|   | 55/79 [00:03<00:01, 23.67it/s]
 73%|  | 58/79 [00:03<00:00, 24.26it/s]
 77%|  | 61/79 [00:03<00:00, 24.21it/s]
 81%|  | 64/79 [00:03<00:00, 24.53it/s]
 85%| | 67/79 [00:03<00:00, 24.78it/s]
 89%| | 70/79 [00:03<00:00, 24.88it/s]
 92%|| 73/79 [00:03<00:00, 24.93it/s]
 96%|| 76/79 [00:03<00:00, 25.61it/s]
100%|| 79/79 [00:03<00:00, 26.38it/s]
, 23.79it/s]
 70%|   | 55/79 [00:03<00:00, 24.01it/s]
 73%|  | 58/79 [00:03<00:00, 24.71it/s]
 77%|  | 61/79 [00:03<00:00, 24.73it/s]
 81%|  | 64/79 [00:03<00:00, 24.93it/s]
 85%| | 67/79 [00:03<00:00, 24.96it/s]
 89%| | 70/79 [00:03<00:00, 25.41it/s]
 92%|| 73/79 [00:03<00:00, 25.51it/s]
 96%|| 76/79 [00:03<00:00, 26.19it/s]
100%|| 79/79 [00:04<00:00, 27.02it/s]
48it/s]
 68%|   | 54/79 [00:03<00:01, 23.83it/s]
 72%|  | 57/79 [00:03<00:00, 24.05it/s]
 76%|  | 60/79 [00:03<00:00, 24.28it/s]
 80%|  | 63/79 [00:03<00:00, 24.40it/s]
 84%| | 66/79 [00:03<00:00, 24.58it/s]
 87%| | 69/79 [00:03<00:00, 24.70it/s]
 91%| | 72/79 [00:03<00:00, 24.61it/s]
 95%|| 75/79 [00:03<00:00, 25.23it/s]
 99%|| 78/79 [00:03<00:00, 25.54it/s]
100%|| 79/79 [00:04<00:00, 19.32it/s]
, 23.35it/s]
 70%|   | 55/79 [00:03<00:01, 23.75it/s]
 73%|  | 58/79 [00:03<00:00, 24.09it/s]
 77%|  | 61/79 [00:03<00:00, 24.20it/s]
 81%|  | 64/79 [00:03<00:00, 24.36it/s]
 85%| | 67/79 [00:03<00:00, 24.30it/s]
 89%| | 70/79 [00:03<00:00, 24.42it/s]
 92%|| 73/79 [00:03<00:00, 24.66it/s]
 96%|| 76/79 [00:03<00:00, 25.34it/s]
100%|| 79/79 [00:04<00:00, 26.29it/s]
, 23.51it/s]
 70%|   | 55/79 [00:03<00:01, 23.89it/s]
 73%|  | 58/79 [00:03<00:00, 24.31it/s]
 77%|  | 61/79 [00:03<00:00, 24.27it/s]
 81%|  | 64/79 [00:03<00:00, 24.36it/s]
 85%| | 67/79 [00:03<00:00, 24.37it/s]
 89%| | 70/79 [00:03<00:00, 24.59it/s]
 92%|| 73/79 [00:03<00:00, 24.89it/s]
 96%|| 76/79 [00:03<00:00, 25.55it/s]
100%|| 79/79 [00:04<00:00, 26.53it/s]
, 24.16it/s]
 70%|   | 55/79 [00:03<00:00, 24.18it/s]
 73%|  | 58/79 [00:03<00:00, 24.16it/s]
 77%|  | 61/79 [00:03<00:00, 24.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.56it/s]
 85%| | 67/79 [00:03<00:00, 24.64it/s]
 89%| | 70/79 [00:03<00:00, 24.40it/s]
 92%|| 73/79 [00:03<00:00, 24.89it/s]
 96%|| 76/79 [00:03<00:00, 25.55it/s]
100%|| 79/79 [00:04<00:00, 26.59it/s]
, 23.08it/s]
 70%|   | 55/79 [00:03<00:01, 23.55it/s]
 73%|  | 58/79 [00:03<00:00, 23.84it/s]
 77%|  | 61/79 [00:03<00:00, 24.04it/s]
 81%|  | 64/79 [00:03<00:00, 24.32it/s]
 85%| | 67/79 [00:03<00:00, 24.44it/s]
 89%| | 70/79 [00:03<00:00, 24.38it/s]
 92%|| 73/79 [00:03<00:00, 24.69it/s]
 96%|| 76/79 [00:03<00:00, 25.49it/s]
100%|| 79/79 [00:04<00:00, 26.24it/s]
, 23.04it/s]
 70%|   | 55/79 [00:03<00:01, 23.64it/s]
 73%|  | 58/79 [00:03<00:00, 23.86it/s]
 77%|  | 61/79 [00:03<00:00, 23.72it/s]
 81%|  | 64/79 [00:03<00:00, 23.82it/s]
 85%| | 67/79 [00:03<00:00, 24.07it/s]
 89%| | 70/79 [00:03<00:00, 24.11it/s]
 92%|| 73/79 [00:03<00:00, 24.86it/s]
 96%|| 76/79 [00:03<00:00, 25.63it/s]
100%|| 79/79 [00:04<00:00, 26.64it/s]
, 22.84it/s]
 70%|   | 55/79 [00:03<00:01, 23.23it/s]
 73%|  | 58/79 [00:03<00:00, 23.42it/s]
 77%|  | 61/79 [00:03<00:00, 23.65it/s]
 81%|  | 64/79 [00:03<00:00, 23.77it/s]
 85%| | 67/79 [00:03<00:00, 23.85it/s]
 89%| | 70/79 [00:03<00:00, 24.04it/s]
 92%|| 73/79 [00:03<00:00, 24.60it/s]
 96%|| 76/79 [00:03<00:00, 25.21it/s]
100%|| 79/79 [00:04<00:00, 26.07it/s]
, 23.15it/s]
 70%|   | 55/79 [00:03<00:01, 23.32it/s]
 73%|  | 58/79 [00:03<00:00, 23.68it/s]
 77%|  | 61/79 [00:03<00:00, 23.57it/s]
 81%|  | 64/79 [00:03<00:00, 23.81it/s]
 85%| | 67/79 [00:03<00:00, 24.04it/s]
 89%| | 70/79 [00:03<00:00, 24.16it/s]
 92%|| 73/79 [00:03<00:00, 24.46it/s]
 96%|| 76/79 [00:03<00:00, 25.23it/s]
100%|| 79/79 [00:04<00:00, 26.14it/s]
, 23.26it/s]
 70%|   | 55/79 [00:03<00:01, 23.31it/s]
 73%|  | 58/79 [00:03<00:00, 23.58it/s]
 77%|  | 61/79 [00:03<00:00, 23.73it/s]
 81%|  | 64/79 [00:03<00:00, 24.10it/s]
 85%| | 67/79 [00:03<00:00, 23.84it/s]
 89%| | 70/79 [00:03<00:00, 23.93it/s]
 92%|| 73/79 [00:03<00:00, 24.28it/s]
 96%|| 76/79 [00:03<00:00, 25.15it/s]
100%|| 79/79 [00:04<00:00, 26.00it/s]
, 23.07it/s]
 70%|   | 55/79 [00:03<00:01, 23.49it/s]
 73%|  | 58/79 [00:03<00:00, 23.71it/s]
 77%|  | 61/79 [00:03<00:00, 24.04it/s]
 81%|  | 64/79 [00:03<00:00, 24.18it/s]
 85%| | 67/79 [00:03<00:00, 24.32it/s]
 89%| | 70/79 [00:03<00:00, 24.44it/s]
 92%|| 73/79 [00:03<00:00, 24.79it/s]
 96%|| 76/79 [00:03<00:00, 25.31it/s]
100%|| 79/79 [00:04<00:00, 26.04it/s]
2020-06-23 15:56:26,590 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.194775 (0.02684656066894531 s / img per device, on 32 devices)
2020-06-23 15:56:26,614 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:56:26,614 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:56:26,636 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592953000040, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 4, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592953000040, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 4}}
2020-06-23 15:56:41,008 maskrcnn_benchmark.trainer INFO: eta: 1:21:41  iter: 2760  loss: 0.6340 (0.9054)  loss_classifier: 0.2408 (0.3402)  loss_box_reg: 0.0954 (0.1404)  loss_mask: 0.2806 (0.3508)  loss_objectness: 0.0185 (0.0507)  loss_rpn_box_reg: 0.0089 (0.0234)  time: 0.1080 (0.1316)  data: 0.0015 (0.0223)  lr: 0.160000  max mem: 5045
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 15:56:43,149 maskrcnn_benchmark.trainer INFO: eta: 1:21:32  iter: 2780  loss: 0.8252 (0.9045)  loss_classifier: 0.3152 (0.3399)  loss_box_reg: 0.1286 (0.1403)  loss_mask: 0.2983 (0.3504)  loss_objectness: 0.0199 (0.0505)  loss_rpn_box_reg: 0.0085 (0.0233)  time: 0.1068 (0.1315)  data: 0.0015 (0.0222)  lr: 0.160000  max mem: 5045
2020-06-23 15:56:45,299 maskrcnn_benchmark.trainer INFO: eta: 1:21:23  iter: 2800  loss: 0.7437 (0.9031)  loss_classifier: 0.2458 (0.3394)  loss_box_reg: 0.1189 (0.1401)  loss_mask: 0.2914 (0.3500)  loss_objectness: 0.0240 (0.0504)  loss_rpn_box_reg: 0.0099 (0.0233)  time: 0.1070 (0.1313)  data: 0.0015 (0.0220)  lr: 0.160000  max mem: 5045
2020-06-23 15:56:47,446 maskrcnn_benchmark.trainer INFO: eta: 1:21:14  iter: 2820  loss: 0.7655 (0.9023)  loss_classifier: 0.2915 (0.3391)  loss_box_reg: 0.1350 (0.1401)  loss_mask: 0.3134 (0.3497)  loss_objectness: 0.0231 (0.0502)  loss_rpn_box_reg: 0.0119 (0.0232)  time: 0.1076 (0.1311)  data: 0.0015 (0.0219)  lr: 0.160000  max mem: 5045
2020-06-23 15:56:49,590 maskrcnn_benchmark.trainer INFO: eta: 1:21:05  iter: 2840  loss: 0.6827 (0.9012)  loss_classifier: 0.2741 (0.3386)  loss_box_reg: 0.1130 (0.1401)  loss_mask: 0.2857 (0.3493)  loss_objectness: 0.0181 (0.0501)  loss_rpn_box_reg: 0.0093 (0.0232)  time: 0.1074 (0.1309)  data: 0.0015 (0.0217)  lr: 0.160000  max mem: 5045
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 15:56:51,741 maskrcnn_benchmark.trainer INFO: eta: 1:20:57  iter: 2860  loss: 0.7862 (0.9003)  loss_classifier: 0.2751 (0.3382)  loss_box_reg: 0.1272 (0.1399)  loss_mask: 0.2990 (0.3489)  loss_objectness: 0.0229 (0.0500)  loss_rpn_box_reg: 0.0175 (0.0232)  time: 0.1070 (0.1308)  data: 0.0015 (0.0216)  lr: 0.160000  max mem: 5045
DONE (t=1.21s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 15:56:53,907 maskrcnn_benchmark.trainer INFO: eta: 1:20:48  iter: 2880  loss: 0.6323 (0.8985)  loss_classifier: 0.2157 (0.3374)  loss_box_reg: 0.1073 (0.1397)  loss_mask: 0.2838 (0.3484)  loss_objectness: 0.0152 (0.0498)  loss_rpn_box_reg: 0.0086 (0.0232)  time: 0.1076 (0.1306)  data: 0.0015 (0.0214)  lr: 0.160000  max mem: 5045
DONE (t=2.24s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22767
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.41455
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.22649
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.12920
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.24999
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.28526
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.22421
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.37608
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.39831
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.23213
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.43221
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.50173
2020-06-23 15:56:56,061 maskrcnn_benchmark.trainer INFO: eta: 1:20:40  iter: 2900  loss: 0.6360 (0.8969)  loss_classifier: 0.2176 (0.3367)  loss_box_reg: 0.1085 (0.1395)  loss_mask: 0.2670 (0.3478)  loss_objectness: 0.0217 (0.0497)  loss_rpn_box_reg: 0.0075 (0.0231)  time: 0.1074 (0.1305)  data: 0.0015 (0.0213)  lr: 0.160000  max mem: 5045
2020-06-23 15:56:58,203 maskrcnn_benchmark.trainer INFO: eta: 1:20:31  iter: 2920  loss: 0.6791 (0.8953)  loss_classifier: 0.2455 (0.3360)  loss_box_reg: 0.1033 (0.1393)  loss_mask: 0.2779 (0.3473)  loss_objectness: 0.0178 (0.0496)  loss_rpn_box_reg: 0.0102 (0.0231)  time: 0.1069 (0.1303)  data: 0.0015 (0.0212)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:00,359 maskrcnn_benchmark.trainer INFO: eta: 1:20:23  iter: 2940  loss: 0.7935 (0.8945)  loss_classifier: 0.2758 (0.3358)  loss_box_reg: 0.1502 (0.1393)  loss_mask: 0.2926 (0.3469)  loss_objectness: 0.0266 (0.0495)  loss_rpn_box_reg: 0.0153 (0.0231)  time: 0.1073 (0.1302)  data: 0.0015 (0.0210)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:02,503 maskrcnn_benchmark.trainer INFO: eta: 1:20:15  iter: 2960  loss: 0.6530 (0.8932)  loss_classifier: 0.2477 (0.3353)  loss_box_reg: 0.1020 (0.1391)  loss_mask: 0.2735 (0.3464)  loss_objectness: 0.0244 (0.0494)  loss_rpn_box_reg: 0.0105 (0.0231)  time: 0.1067 (0.1300)  data: 0.0014 (0.0209)  lr: 0.160000  max mem: 5045
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:57:04,650 maskrcnn_benchmark.trainer INFO: eta: 1:20:06  iter: 2980  loss: 0.6200 (0.8920)  loss_classifier: 0.2173 (0.3347)  loss_box_reg: 0.0916 (0.1389)  loss_mask: 0.2932 (0.3461)  loss_objectness: 0.0171 (0.0493)  loss_rpn_box_reg: 0.0077 (0.0230)  time: 0.1063 (0.1298)  data: 0.0014 (0.0208)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:06,794 maskrcnn_benchmark.trainer INFO: eta: 1:19:58  iter: 3000  loss: 0.6292 (0.8905)  loss_classifier: 0.1994 (0.3340)  loss_box_reg: 0.0977 (0.1387)  loss_mask: 0.2843 (0.3457)  loss_objectness: 0.0155 (0.0491)  loss_rpn_box_reg: 0.0083 (0.0229)  time: 0.1066 (0.1297)  data: 0.0014 (0.0206)  lr: 0.160000  max mem: 5045
DONE (t=3.18s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:57:08,920 maskrcnn_benchmark.trainer INFO: eta: 1:19:50  iter: 3020  loss: 0.7914 (0.8897)  loss_classifier: 0.2609 (0.3337)  loss_box_reg: 0.1176 (0.1386)  loss_mask: 0.2874 (0.3454)  loss_objectness: 0.0305 (0.0490)  loss_rpn_box_reg: 0.0148 (0.0229)  time: 0.1068 (0.1295)  data: 0.0015 (0.0205)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:11,065 maskrcnn_benchmark.trainer INFO: eta: 1:19:42  iter: 3040  loss: 0.6820 (0.8885)  loss_classifier: 0.2257 (0.3333)  loss_box_reg: 0.0973 (0.1385)  loss_mask: 0.2878 (0.3450)  loss_objectness: 0.0247 (0.0489)  loss_rpn_box_reg: 0.0150 (0.0229)  time: 0.1069 (0.1294)  data: 0.0015 (0.0204)  lr: 0.160000  max mem: 5045
DONE (t=3.65s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21941
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.38331
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.22515
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.08662
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.24235
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.32167
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.21746
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.35116
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36924
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20130
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.40859
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47411
2020-06-23 15:57:11,901 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.22767354349465574, segm mAP: 0.2194076486053879
:::MLLOG {"namespace": "", "time_ms": 1592953031902, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.22767354349465574, "SEGM": 0.2194076486053879}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1592953031902, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 3}}
2020-06-23 15:57:13,390 maskrcnn_benchmark.trainer INFO: eta: 1:19:36  iter: 3060  loss: 0.7325 (0.8881)  loss_classifier: 0.2737 (0.3329)  loss_box_reg: 0.1165 (0.1384)  loss_mask: 0.2869 (0.3445)  loss_objectness: 0.0290 (0.0492)  loss_rpn_box_reg: 0.0149 (0.0230)  time: 0.1061 (0.1293)  data: 0.0016 (0.0203)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:15,552 maskrcnn_benchmark.trainer INFO: eta: 1:19:28  iter: 3080  loss: 0.6144 (0.8870)  loss_classifier: 0.2282 (0.3324)  loss_box_reg: 0.0978 (0.1383)  loss_mask: 0.2727 (0.3441)  loss_objectness: 0.0228 (0.0491)  loss_rpn_box_reg: 0.0055 (0.0230)  time: 0.1080 (0.1292)  data: 0.0014 (0.0201)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:17,709 maskrcnn_benchmark.trainer INFO: eta: 1:19:21  iter: 3100  loss: 0.6914 (0.8860)  loss_classifier: 0.2553 (0.3320)  loss_box_reg: 0.1108 (0.1382)  loss_mask: 0.2831 (0.3438)  loss_objectness: 0.0179 (0.0490)  loss_rpn_box_reg: 0.0121 (0.0230)  time: 0.1083 (0.1290)  data: 0.0014 (0.0200)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:19,850 maskrcnn_benchmark.trainer INFO: eta: 1:19:13  iter: 3120  loss: 0.6889 (0.8851)  loss_classifier: 0.2258 (0.3315)  loss_box_reg: 0.1168 (0.1381)  loss_mask: 0.2712 (0.3434)  loss_objectness: 0.0347 (0.0490)  loss_rpn_box_reg: 0.0129 (0.0230)  time: 0.1061 (0.1289)  data: 0.0014 (0.0199)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:21,978 maskrcnn_benchmark.trainer INFO: eta: 1:19:05  iter: 3140  loss: 0.8411 (0.8848)  loss_classifier: 0.3068 (0.3313)  loss_box_reg: 0.1485 (0.1382)  loss_mask: 0.3128 (0.3433)  loss_objectness: 0.0272 (0.0490)  loss_rpn_box_reg: 0.0133 (0.0230)  time: 0.1063 (0.1287)  data: 0.0015 (0.0198)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:24,108 maskrcnn_benchmark.trainer INFO: eta: 1:18:57  iter: 3160  loss: 0.7003 (0.8841)  loss_classifier: 0.2422 (0.3309)  loss_box_reg: 0.1114 (0.1382)  loss_mask: 0.2914 (0.3429)  loss_objectness: 0.0282 (0.0491)  loss_rpn_box_reg: 0.0106 (0.0230)  time: 0.1065 (0.1286)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:26,255 maskrcnn_benchmark.trainer INFO: eta: 1:18:50  iter: 3180  loss: 0.6186 (0.8826)  loss_classifier: 0.2108 (0.3302)  loss_box_reg: 0.0900 (0.1379)  loss_mask: 0.2589 (0.3424)  loss_objectness: 0.0204 (0.0490)  loss_rpn_box_reg: 0.0097 (0.0230)  time: 0.1068 (0.1285)  data: 0.0014 (0.0196)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:28,437 maskrcnn_benchmark.trainer INFO: eta: 1:18:43  iter: 3200  loss: 0.7207 (0.8817)  loss_classifier: 0.2492 (0.3300)  loss_box_reg: 0.1213 (0.1379)  loss_mask: 0.2789 (0.3421)  loss_objectness: 0.0207 (0.0488)  loss_rpn_box_reg: 0.0111 (0.0230)  time: 0.1093 (0.1284)  data: 0.0014 (0.0194)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:30,595 maskrcnn_benchmark.trainer INFO: eta: 1:18:36  iter: 3220  loss: 0.7269 (0.8810)  loss_classifier: 0.2684 (0.3296)  loss_box_reg: 0.1158 (0.1378)  loss_mask: 0.2894 (0.3419)  loss_objectness: 0.0230 (0.0487)  loss_rpn_box_reg: 0.0172 (0.0230)  time: 0.1070 (0.1282)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:32,759 maskrcnn_benchmark.trainer INFO: eta: 1:18:29  iter: 3240  loss: 0.7583 (0.8803)  loss_classifier: 0.2789 (0.3293)  loss_box_reg: 0.1321 (0.1378)  loss_mask: 0.2835 (0.3416)  loss_objectness: 0.0190 (0.0486)  loss_rpn_box_reg: 0.0130 (0.0230)  time: 0.1082 (0.1281)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:34,935 maskrcnn_benchmark.trainer INFO: eta: 1:18:22  iter: 3260  loss: 0.7375 (0.8796)  loss_classifier: 0.2754 (0.3290)  loss_box_reg: 0.1266 (0.1377)  loss_mask: 0.3018 (0.3414)  loss_objectness: 0.0239 (0.0486)  loss_rpn_box_reg: 0.0124 (0.0230)  time: 0.1087 (0.1280)  data: 0.0015 (0.0191)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:37,108 maskrcnn_benchmark.trainer INFO: eta: 1:18:15  iter: 3280  loss: 0.6468 (0.8785)  loss_classifier: 0.2366 (0.3286)  loss_box_reg: 0.0919 (0.1376)  loss_mask: 0.2786 (0.3410)  loss_objectness: 0.0206 (0.0485)  loss_rpn_box_reg: 0.0111 (0.0229)  time: 0.1082 (0.1279)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:39,274 maskrcnn_benchmark.trainer INFO: eta: 1:18:08  iter: 3300  loss: 0.7282 (0.8776)  loss_classifier: 0.2761 (0.3282)  loss_box_reg: 0.0961 (0.1374)  loss_mask: 0.2921 (0.3406)  loss_objectness: 0.0164 (0.0484)  loss_rpn_box_reg: 0.0085 (0.0229)  time: 0.1073 (0.1277)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:41,421 maskrcnn_benchmark.trainer INFO: eta: 1:18:01  iter: 3320  loss: 0.6756 (0.8766)  loss_classifier: 0.2381 (0.3278)  loss_box_reg: 0.1109 (0.1373)  loss_mask: 0.2681 (0.3403)  loss_objectness: 0.0212 (0.0483)  loss_rpn_box_reg: 0.0098 (0.0229)  time: 0.1068 (0.1276)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:43,545 maskrcnn_benchmark.trainer INFO: eta: 1:17:53  iter: 3340  loss: 0.6287 (0.8754)  loss_classifier: 0.1994 (0.3274)  loss_box_reg: 0.0989 (0.1371)  loss_mask: 0.2741 (0.3399)  loss_objectness: 0.0170 (0.0482)  loss_rpn_box_reg: 0.0059 (0.0228)  time: 0.1057 (0.1275)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:45,682 maskrcnn_benchmark.trainer INFO: eta: 1:17:46  iter: 3360  loss: 0.7380 (0.8746)  loss_classifier: 0.2707 (0.3270)  loss_box_reg: 0.1246 (0.1371)  loss_mask: 0.2718 (0.3395)  loss_objectness: 0.0224 (0.0481)  loss_rpn_box_reg: 0.0099 (0.0228)  time: 0.1062 (0.1274)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:47,819 maskrcnn_benchmark.trainer INFO: eta: 1:17:39  iter: 3380  loss: 0.6182 (0.8735)  loss_classifier: 0.2461 (0.3266)  loss_box_reg: 0.0982 (0.1370)  loss_mask: 0.2653 (0.3392)  loss_objectness: 0.0191 (0.0480)  loss_rpn_box_reg: 0.0069 (0.0228)  time: 0.1062 (0.1273)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:49,965 maskrcnn_benchmark.trainer INFO: eta: 1:17:33  iter: 3400  loss: 0.7287 (0.8726)  loss_classifier: 0.2429 (0.3262)  loss_box_reg: 0.1110 (0.1369)  loss_mask: 0.3057 (0.3389)  loss_objectness: 0.0176 (0.0479)  loss_rpn_box_reg: 0.0084 (0.0227)  time: 0.1068 (0.1271)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:52,093 maskrcnn_benchmark.trainer INFO: eta: 1:17:26  iter: 3420  loss: 0.7160 (0.8716)  loss_classifier: 0.2476 (0.3257)  loss_box_reg: 0.1004 (0.1367)  loss_mask: 0.2985 (0.3387)  loss_objectness: 0.0336 (0.0478)  loss_rpn_box_reg: 0.0128 (0.0228)  time: 0.1060 (0.1270)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:54,235 maskrcnn_benchmark.trainer INFO: eta: 1:17:19  iter: 3440  loss: 0.7000 (0.8709)  loss_classifier: 0.2426 (0.3254)  loss_box_reg: 0.1151 (0.1366)  loss_mask: 0.2910 (0.3385)  loss_objectness: 0.0193 (0.0477)  loss_rpn_box_reg: 0.0082 (0.0227)  time: 0.1072 (0.1269)  data: 0.0015 (0.0182)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:56,380 maskrcnn_benchmark.trainer INFO: eta: 1:17:12  iter: 3460  loss: 0.7149 (0.8702)  loss_classifier: 0.2463 (0.3250)  loss_box_reg: 0.1230 (0.1366)  loss_mask: 0.2805 (0.3382)  loss_objectness: 0.0208 (0.0476)  loss_rpn_box_reg: 0.0087 (0.0227)  time: 0.1071 (0.1268)  data: 0.0015 (0.0181)  lr: 0.160000  max mem: 5045
2020-06-23 15:57:58,519 maskrcnn_benchmark.trainer INFO: eta: 1:17:05  iter: 3480  loss: 0.7287 (0.8695)  loss_classifier: 0.2391 (0.3247)  loss_box_reg: 0.1069 (0.1366)  loss_mask: 0.2839 (0.3380)  loss_objectness: 0.0278 (0.0475)  loss_rpn_box_reg: 0.0170 (0.0227)  time: 0.1064 (0.1267)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5045
2020-06-23 15:58:00,663 maskrcnn_benchmark.trainer INFO: eta: 1:16:59  iter: 3500  loss: 0.7748 (0.8693)  loss_classifier: 0.2925 (0.3246)  loss_box_reg: 0.1462 (0.1367)  loss_mask: 0.3019 (0.3378)  loss_objectness: 0.0236 (0.0474)  loss_rpn_box_reg: 0.0105 (0.0227)  time: 0.1070 (0.1266)  data: 0.0015 (0.0179)  lr: 0.160000  max mem: 5045
2020-06-23 15:58:02,805 maskrcnn_benchmark.trainer INFO: eta: 1:16:52  iter: 3520  loss: 0.5897 (0.8679)  loss_classifier: 0.1979 (0.3239)  loss_box_reg: 0.0838 (0.1364)  loss_mask: 0.2727 (0.3374)  loss_objectness: 0.0151 (0.0474)  loss_rpn_box_reg: 0.0087 (0.0227)  time: 0.1067 (0.1264)  data: 0.0015 (0.0178)  lr: 0.160000  max mem: 5045
2020-06-23 15:58:04,949 maskrcnn_benchmark.trainer INFO: eta: 1:16:46  iter: 3540  loss: 0.6934 (0.8670)  loss_classifier: 0.2452 (0.3236)  loss_box_reg: 0.1084 (0.1363)  loss_mask: 0.2809 (0.3371)  loss_objectness: 0.0248 (0.0474)  loss_rpn_box_reg: 0.0094 (0.0227)  time: 0.1068 (0.1263)  data: 0.0015 (0.0177)  lr: 0.160000  max mem: 5045
2020-06-23 15:58:07,107 maskrcnn_benchmark.trainer INFO: eta: 1:16:40  iter: 3560  loss: 0.7558 (0.8663)  loss_classifier: 0.2591 (0.3233)  loss_box_reg: 0.1160 (0.1362)  loss_mask: 0.2979 (0.3369)  loss_objectness: 0.0225 (0.0473)  loss_rpn_box_reg: 0.0134 (0.0227)  time: 0.1076 (0.1262)  data: 0.0015 (0.0176)  lr: 0.160000  max mem: 5045
2020-06-23 15:58:09,257 maskrcnn_benchmark.trainer INFO: eta: 1:16:33  iter: 3580  loss: 0.7416 (0.8657)  loss_classifier: 0.2565 (0.3229)  loss_box_reg: 0.1178 (0.1361)  loss_mask: 0.3087 (0.3368)  loss_objectness: 0.0212 (0.0472)  loss_rpn_box_reg: 0.0129 (0.0227)  time: 0.1072 (0.1261)  data: 0.0015 (0.0175)  lr: 0.160000  max mem: 5045
2020-06-23 15:58:11,407 maskrcnn_benchmark.trainer INFO: eta: 1:16:27  iter: 3600  loss: 0.7634 (0.8652)  loss_classifier: 0.2711 (0.3227)  loss_box_reg: 0.1261 (0.1360)  loss_mask: 0.2779 (0.3365)  loss_objectness: 0.0318 (0.0472)  loss_rpn_box_reg: 0.0184 (0.0227)  time: 0.1076 (0.1260)  data: 0.0015 (0.0175)  lr: 0.160000  max mem: 5045
2020-06-23 15:58:13,564 maskrcnn_benchmark.trainer INFO: eta: 1:16:21  iter: 3620  loss: 0.6801 (0.8647)  loss_classifier: 0.2592 (0.3225)  loss_box_reg: 0.1059 (0.1360)  loss_mask: 0.2802 (0.3362)  loss_objectness: 0.0466 (0.0472)  loss_rpn_box_reg: 0.0147 (0.0228)  time: 0.1077 (0.1259)  data: 0.0016 (0.0174)  lr: 0.160000  max mem: 5045
2020-06-23 15:58:15,728 maskrcnn_benchmark.trainer INFO: eta: 1:16:15  iter: 3640  loss: 0.6490 (0.8638)  loss_classifier: 0.2250 (0.3220)  loss_box_reg: 0.0968 (0.1359)  loss_mask: 0.2865 (0.3360)  loss_objectness: 0.0222 (0.0471)  loss_rpn_box_reg: 0.0123 (0.0228)  time: 0.1076 (0.1258)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5045
2020-06-23 15:58:17,881 maskrcnn_benchmark.trainer INFO: eta: 1:16:09  iter: 3660  loss: 0.6216 (0.8629)  loss_classifier: 0.2548 (0.3216)  loss_box_reg: 0.1009 (0.1357)  loss_mask: 0.2797 (0.3356)  loss_objectness: 0.0161 (0.0471)  loss_rpn_box_reg: 0.0109 (0.0228)  time: 0.1063 (0.1257)  data: 0.0015 (0.0172)  lr: 0.160000  max mem: 5045
:::MLLOG {"namespace": "", "time_ms": 1592953099798, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1592953099799, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1592953099799, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 4}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 15:58:20,033 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
2020-06-23 15:58:20,345 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:49,  1.41s/it]
  3%|         | 2/79 [00:01<01:19,  1.03s/it]
  6%|         | 5/79 [00:01<00:54,  1.36it/s]
 10%|         | 8/79 [00:01<00:37,  1.90it/s]
 14%|        | 11/79 [00:01<00:25,  2.64it/s]
 18%|        | 14/79 [00:02<00:18,  3.61it/s]
 22%|       | 17/79 [00:02<00:12,  4.85it/s]
 25%|       | 20/79 [00:02<00:09,  6.41it/s]
 29%|       | 23/79 [00:02<00:06,  8.30it/s]
 33%|      | 26/79 [00:02<00:05, 10.38it/s]
 37%|      | 29/79 [00:02<00:03, 12.63it/s]
 41%|      | 32/79 [00:02<00:03, 14.87it/s]
 44%|     | 35/79 [00:02<00:02, 16.99it/s]
 48%|     | 38/79 [00:02<00:02, 18.78it/s]
 52%|    | 41/79 [00:03<00:01, 20.51it/s]
 56%|    | 44/79 [00:03<00:01, 21.62it/s]
 59%|    | 47/79 [00:03<00:01, 22.77it/s]
 63%|   | 50/79 [00:03<00:01, 23.64it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:49,  1.41s/it]
  4%|         | 3/79 [00:01<01:16,  1.00s/it]
  6%|         | 5/79 [00:01<00:53,  1.39it/s]
 10%|         | 8/79 [00:01<00:36,  1.94it/s]
 14%|        | 11/79 [00:01<00:25,  2.69it/s]
 18%|        | 14/79 [00:02<00:17,  3.65it/s]
 22%|       | 17/79 [00:02<00:12,  4.91it/s]
 25%|       | 20/79 [00:02<00:09,  6.48it/s]
 29%|       | 23/79 [00:02<00:06,  8.26it/s]
 33%|      | 26/79 [00:02<00:05, 10.35it/s]
 37%|      | 29/79 [00:02<00:04, 12.50it/s]
 41%|      | 32/79 [00:02<00:03, 14.67it/s]
 44%|     | 35/79 [00:02<00:02, 16.77it/s]
 48%|     | 38/79 [00:02<00:02, 18.63it/s]
 52%|    | 41/79 [00:03<00:01, 20.05it/s]
 56%|    | 44/79 [00:03<00:01, 21.26it/s]
 59%|    | 47/79 [00:03<00:01, 22.38it/s]
 63%|   | 50/79 [00:03<00:01, 23.05it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:55,  1.48s/it]
  4%|         | 3/79 [00:01<01:20,  1.06s/it]
  8%|         | 6/79 [00:01<00:54,  1.33it/s]
 11%|        | 9/79 [00:01<00:37,  1.86it/s]
 15%|        | 12/79 [00:01<00:25,  2.58it/s]
 19%|        | 15/79 [00:02<00:18,  3.53it/s]
 23%|       | 18/79 [00:02<00:12,  4.76it/s]
 27%|       | 21/79 [00:02<00:09,  6.29it/s]
 30%|       | 24/79 [00:02<00:06,  8.11it/s]
 34%|      | 27/79 [00:02<00:05, 10.23it/s]
 38%|      | 30/79 [00:02<00:03, 12.47it/s]
 42%|     | 33/79 [00:02<00:03, 14.73it/s]
 46%|     | 36/79 [00:02<00:02, 16.86it/s]
 49%|     | 39/79 [00:03<00:02, 18.75it/s]
 53%|    | 42/79 [00:03<00:01, 20.42it/s]
 57%|    | 45/79 [00:03<00:01, 21.77it/s]
 61%|    | 48/79 [00:03<00:01, 22.93it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:57,  1.50s/it]
  4%|         | 3/79 [00:01<01:21,  1.07s/it]
  8%|         | 6/79 [00:01<00:55,  1.32it/s]
 11%|        | 9/79 [00:01<00:38,  1.84it/s]
 15%|        | 12/79 [00:01<00:26,  2.55it/s]
 19%|        | 15/79 [00:02<00:18,  3.49it/s]
 23%|       | 18/79 [00:02<00:12,  4.71it/s]
 27%|       | 21/79 [00:02<00:09,  6.22it/s]
 30%|       | 24/79 [00:02<00:06,  8.04it/s]
 34%|      | 27/79 [00:02<00:05,  9.99it/s]
 38%|      | 30/79 [00:02<00:04, 12.16it/s]
 42%|     | 33/79 [00:02<00:03, 14.35it/s]
 46%|     | 36/79 [00:02<00:02, 16.50it/s]
 49%|     | 39/79 [00:03<00:02, 18.41it/s]
 53%|    | 42/79 [00:03<00:01, 19.93it/s]
 57%|    | 45/79 [00:03<00:01, 21.38it/s]
 61%|    | 48/79 [00:03<00:01, 22.56it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:00,  1.54s/it]
  4%|         | 3/79 [00:01<01:23,  1.10s/it]
  8%|         | 6/79 [00:01<00:56,  1.28it/s]
 11%|        | 9/79 [00:01<00:39,  1.79it/s]
 15%|        | 12/79 [00:02<00:26,  2.49it/s]
 19%|        | 15/79 [00:02<00:18,  3.41it/s]
 23%|       | 18/79 [00:02<00:13,  4.61it/s]
 27%|       | 21/79 [00:02<00:09,  6.12it/s]
 30%|       | 24/79 [00:02<00:06,  7.93it/s]
 34%|      | 27/79 [00:02<00:05,  9.99it/s]
 38%|      | 30/79 [00:02<00:03, 12.26it/s]
 42%|     | 33/79 [00:02<00:03, 14.60it/s]
 46%|     | 36/79 [00:02<00:02, 16.67it/s]
 49%|     | 39/79 [00:03<00:02, 18.71it/s]
 53%|    | 42/79 [00:03<00:01, 20.27it/s]
 57%|    | 45/79 [00:03<00:01, 21.49it/s]
 61%|    | 48/79 [00:03<00:01, 22.73it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:01,  1.56s/it]
  4%|         | 3/79 [00:01<01:24,  1.11s/it]
  8%|         | 6/79 [00:01<00:57,  1.27it/s]
 11%|        | 9/79 [00:01<00:39,  1.77it/s]
 15%|        | 12/79 [00:02<00:27,  2.46it/s]
 19%|        | 15/79 [00:02<00:18,  3.37it/s]
 23%|       | 18/79 [00:02<00:13,  4.56it/s]
 27%|       | 21/79 [00:02<00:09,  6.04it/s]
 30%|       | 24/79 [00:02<00:07,  7.83it/s]
 34%|      | 27/79 [00:02<00:05,  9.91it/s]
 38%|      | 30/79 [00:02<00:04, 12.12it/s]
 42%|     | 33/79 [00:02<00:03, 14.42it/s]
 46%|     | 36/79 [00:02<00:02, 16.57it/s]
 49%|     | 39/79 [00:03<00:02, 18.62it/s]
 53%|    | 42/79 [00:03<00:01, 20.17it/s]
 57%|    | 45/79 [00:03<00:01, 21.59it/s]
 61%|    | 48/79 [00:03<00:01, 22.54it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:04,  1.60s/it]
  5%|         | 4/79 [00:01<01:24,  1.13s/it]
  9%|         | 7/79 [00:01<00:57,  1.24it/s]
 13%|        | 10/79 [00:01<00:39,  1.74it/s]
 16%|        | 13/79 [00:02<00:27,  2.41it/s]
 20%|        | 16/79 [00:02<00:19,  3.32it/s]
 24%|       | 19/79 [00:02<00:13,  4.49it/s]
 28%|       | 22/79 [00:02<00:09,  5.97it/s]
 32%|      | 25/79 [00:02<00:06,  7.77it/s]
 35%|      | 28/79 [00:02<00:05,  9.82it/s]
 39%|      | 31/79 [00:02<00:04, 12.00it/s]
 43%|     | 34/79 [00:02<00:03, 14.31it/s]
 47%|     | 37/79 [00:03<00:02, 16.49it/s]
 51%|     | 40/79 [00:03<00:02, 18.46it/s]
 54%|    | 43/79 [00:03<00:01, 20.28it/s]
 58%|    | 46/79 [00:03<00:01, 21.69it/s]
 62%|   | 49/79 [00:03<00:01, 22.67it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:52,  1.45s/it]
  3%|         | 2/79 [00:01<01:22,  1.06s/it]
  6%|         | 5/79 [00:01<00:56,  1.32it/s]
 10%|         | 8/79 [00:01<00:38,  1.84it/s]
 14%|        | 11/79 [00:01<00:26,  2.55it/s]
 18%|        | 14/79 [00:02<00:18,  3.49it/s]
 22%|       | 17/79 [00:02<00:13,  4.71it/s]
 25%|       | 20/79 [00:02<00:09,  6.22it/s]
 29%|       | 23/79 [00:02<00:06,  8.03it/s]
 33%|      | 26/79 [00:02<00:05, 10.08it/s]
 37%|      | 29/79 [00:02<00:04, 12.24it/s]
 41%|      | 32/79 [00:02<00:03, 14.32it/s]
 44%|     | 35/79 [00:02<00:02, 16.49it/s]
 48%|     | 38/79 [00:03<00:02, 18.23it/s]
 52%|    | 41/79 [00:03<00:01, 19.73it/s]
 56%|    | 44/79 [00:03<00:01, 20.99it/s]
 59%|    | 47/79 [00:03<00:01, 22.13it/s]
 63%|   | 50/79 [00:03<00:01, 22.63it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:56,  1.49s/it]
  4%|         | 3/79 [00:01<01:20,  1.06s/it]
  8%|         | 6/79 [00:01<00:55,  1.32it/s]
 11%|        | 9/79 [00:01<00:37,  1.85it/s]
 15%|        | 12/79 [00:01<00:26,  2.55it/s]
 19%|        | 15/79 [00:02<00:18,  3.50it/s]
 23%|       | 18/79 [00:02<00:12,  4.72it/s]
 27%|       | 21/79 [00:02<00:09,  6.23it/s]
 30%|       | 24/79 [00:02<00:06,  8.04it/s]
 34%|      | 27/79 [00:02<00:05, 10.09it/s]
 38%|      | 30/79 [00:02<00:03, 12.32it/s]
 42%|     | 33/79 [00:02<00:03, 14.53it/s]
 46%|     | 36/79 [00:02<00:02, 16.52it/s]
 49%|     | 39/79 [00:03<00:02, 18.33it/s]
 53%|    | 42/79 [00:03<00:01, 20.03it/s]
 57%|    | 45/79 [00:03<00:01, 20.88it/s]
 61%|    | 48/79 [00:03<00:01, 21.61it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:01,  1.56s/it]
  5%|         | 4/79 [00:01<01:23,  1.11s/it]
  9%|         | 7/79 [00:01<00:56,  1.27it/s]
 13%|        | 10/79 [00:01<00:38,  1.78it/s]
 16%|        | 13/79 [00:02<00:26,  2.46it/s]
 20%|        | 16/79 [00:02<00:18,  3.38it/s]
 24%|       | 19/79 [00:02<00:13,  4.57it/s]
 28%|       | 22/79 [00:02<00:09,  6.07it/s]
 32%|      | 25/79 [00:02<00:06,  7.87it/s]
 35%|      | 28/79 [00:02<00:05,  9.95it/s]
 39%|      | 31/79 [00:02<00:03, 12.24it/s]
 43%|     | 34/79 [00:02<00:03, 14.46it/s]
 47%|     | 37/79 [00:02<00:02, 16.70it/s]
 51%|     | 40/79 [00:03<00:02, 18.59it/s]
 54%|    | 43/79 [00:03<00:01, 20.34it/s]
 58%|    | 46/79 [00:03<00:01, 21.61it/s]
 62%|   | 49/79 [00:03<00:01, 22.66it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:04,  1.60s/it]
  5%|         | 4/79 [00:01<01:24,  1.13s/it]
  9%|         | 7/79 [00:01<00:57,  1.25it/s]
 13%|        | 10/79 [00:01<00:39,  1.75it/s]
 16%|        | 13/79 [00:02<00:27,  2.42it/s]
 20%|        | 16/79 [00:02<00:18,  3.33it/s]
 24%|       | 19/79 [00:02<00:13,  4.51it/s]
 28%|       | 22/79 [00:02<00:09,  5.98it/s]
 32%|      | 25/79 [00:02<00:06,  7.78it/s]
 35%|      | 28/79 [00:02<00:05,  9.89it/s]
 39%|      | 31/79 [00:02<00:03, 12.01it/s]
 43%|     | 34/79 [00:02<00:03, 14.31it/s]
 47%|     | 37/79 [00:02<00:02, 16.62it/s]
 51%|     | 40/79 [00:03<00:02, 18.55it/s]
 54%|    | 43/79 [00:03<00:01, 20.14it/s]
 58%|    | 46/79 [00:03<00:01, 21.45it/s]
 62%|   | 49/79 [00:03<00:01, 22.58it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:02,  1.57s/it]
  5%|         | 4/79 [00:01<01:23,  1.11s/it]
  9%|         | 7/79 [00:01<00:56,  1.27it/s]
 13%|        | 10/79 [00:01<00:38,  1.77it/s]
 16%|        | 13/79 [00:02<00:26,  2.45it/s]
 20%|        | 16/79 [00:02<00:18,  3.37it/s]
 24%|       | 19/79 [00:02<00:13,  4.54it/s]
 28%|       | 22/79 [00:02<00:09,  6.02it/s]
 32%|      | 25/79 [00:02<00:06,  7.81it/s]
 35%|      | 28/79 [00:02<00:05,  9.85it/s]
 39%|      | 31/79 [00:02<00:03, 12.01it/s]
 43%|     | 34/79 [00:02<00:03, 14.21it/s]
 47%|     | 37/79 [00:03<00:02, 16.33it/s]
 51%|     | 40/79 [00:03<00:02, 18.21it/s]
 54%|    | 43/79 [00:03<00:01, 19.89it/s]
 58%|    | 46/79 [00:03<00:01, 21.26it/s]
 62%|   | 49/79 [00:03<00:01, 22.23it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:02,  1.57s/it]
  4%|         | 3/79 [00:01<01:24,  1.12s/it]
  8%|         | 6/79 [00:01<00:57,  1.26it/s]
 11%|        | 9/79 [00:01<00:39,  1.76it/s]
 15%|        | 12/79 [00:02<00:27,  2.44it/s]
 19%|        | 15/79 [00:02<00:19,  3.34it/s]
 23%|       | 18/79 [00:02<00:13,  4.50it/s]
 27%|       | 21/79 [00:02<00:09,  5.99it/s]
 30%|       | 24/79 [00:02<00:07,  7.75it/s]
 34%|      | 27/79 [00:02<00:05,  9.76it/s]
 38%|      | 30/79 [00:02<00:04, 11.93it/s]
 42%|     | 33/79 [00:02<00:03, 14.15it/s]
 46%|     | 36/79 [00:03<00:02, 16.31it/s]
 49%|     | 39/79 [00:03<00:02, 18.10it/s]
 53%|    | 42/79 [00:03<00:01, 19.59it/s]
 57%|    | 45/79 [00:03<00:01, 20.85it/s]
 61%|    | 48/79 [00:03<00:01, 21.76it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:00,  1.54s/it]
  4%|         | 3/79 [00:01<01:23,  1.09s/it]
  8%|         | 6/79 [00:01<00:56,  1.28it/s]
 11%|        | 9/79 [00:01<00:39,  1.79it/s]
 15%|        | 12/79 [00:02<00:26,  2.49it/s]
 19%|        | 15/79 [00:02<00:18,  3.41it/s]
 23%|       | 18/79 [00:02<00:13,  4.60it/s]
 27%|       | 21/79 [00:02<00:09,  6.08it/s]
 30%|       | 24/79 [00:02<00:07,  7.85it/s]
 34%|      | 27/79 [00:02<00:05,  9.89it/s]
 38%|      | 30/79 [00:02<00:04, 11.99it/s]
 42%|     | 33/79 [00:02<00:03, 14.16it/s]
 46%|     | 36/79 [00:02<00:02, 16.16it/s]
 49%|     | 39/79 [00:03<00:02, 17.99it/s]
 53%|    | 42/79 [00:03<00:01, 19.54it/s]
 57%|    | 45/79 [00:03<00:01, 20.93it/s]
 61%|    | 48/79 [00:03<00:01, 21.83it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:04,  1.60s/it]
  5%|         | 4/79 [00:01<01:24,  1.13s/it]
  9%|         | 7/79 [00:01<00:57,  1.24it/s]
 13%|        | 10/79 [00:01<00:39,  1.74it/s]
 16%|        | 13/79 [00:02<00:27,  2.41it/s]
 20%|        | 16/79 [00:02<00:19,  3.31it/s]
 24%|       | 19/79 [00:02<00:13,  4.49it/s]
 28%|       | 22/79 [00:02<00:09,  5.97it/s]
 32%|      | 25/79 [00:02<00:06,  7.76it/s]
 35%|      | 28/79 [00:02<00:05,  9.80it/s]
 39%|      | 31/79 [00:02<00:03, 12.02it/s]
 43%|     | 34/79 [00:02<00:03, 14.30it/s]
 47%|     | 37/79 [00:03<00:02, 16.49it/s]
 51%|     | 40/79 [00:03<00:02, 18.38it/s]
 54%|    | 43/79 [00:03<00:01, 20.19it/s]
 58%|    | 46/79 [00:03<00:01, 21.58it/s]
 62%|   | 49/79 [00:03<00:01, 21.59it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:01,  1.55s/it]
  5%|         | 4/79 [00:01<01:22,  1.10s/it]
  9%|         | 7/79 [00:01<00:56,  1.28it/s]
 13%|        | 10/79 [00:01<00:38,  1.79it/s]
 16%|        | 13/79 [00:02<00:26,  2.47it/s]
 20%|        | 16/79 [00:02<00:18,  3.39it/s]
 24%|       | 19/79 [00:02<00:13,  4.58it/s]
 28%|       | 22/79 [00:02<00:09,  6.08it/s]
 32%|      | 25/79 [00:02<00:06,  7.85it/s]
 35%|      | 28/79 [00:02<00:05,  9.88it/s]
 39%|      | 31/79 [00:02<00:03, 12.10it/s]
 43%|     | 34/79 [00:02<00:03, 14.32it/s]
 47%|     | 37/79 [00:03<00:02, 16.50it/s]
 51%|     | 40/79 [00:03<00:02, 18.34it/s]
 54%|    | 43/79 [00:03<00:01, 19.95it/s]
 58%|    | 46/79 [00:03<00:01, 21.19it/s]
 62%|   | 49/79 [00:03<00:01, 22.17it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:03,  1.59s/it]
  5%|         | 4/79 [00:01<01:24,  1.12s/it]
  9%|         | 7/79 [00:01<00:57,  1.25it/s]
 13%|        | 10/79 [00:01<00:39,  1.75it/s]
 16%|        | 13/79 [00:02<00:27,  2.43it/s]
 20%|        | 16/79 [00:02<00:18,  3.34it/s]
 24%|       | 19/79 [00:02<00:13,  4.52it/s]
 28%|       | 22/79 [00:02<00:09,  5.99it/s]
 32%|      | 25/79 [00:02<00:06,  7.75it/s]
 35%|      | 28/79 [00:02<00:05,  9.79it/s]
 39%|      | 31/79 [00:02<00:03, 12.04it/s]
 43%|     | 34/79 [00:02<00:03, 14.34it/s]
 47%|     | 37/79 [00:03<00:02, 16.45it/s]
 51%|     | 40/79 [00:03<00:02, 18.43it/s]
 54%|    | 43/79 [00:03<00:01, 20.03it/s]
 58%|    | 46/79 [00:03<00:01, 21.28it/s]
 62%|   | 49/79 [00:03<00:01, 22.08it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:03,  1.58s/it]
  4%|         | 3/79 [00:01<01:25,  1.12s/it]
  8%|         | 6/79 [00:01<00:58,  1.25it/s]
 11%|        | 9/79 [00:01<00:40,  1.75it/s]
 15%|        | 12/79 [00:02<00:27,  2.43it/s]
 19%|        | 15/79 [00:02<00:19,  3.33it/s]
 23%|       | 18/79 [00:02<00:13,  4.49it/s]
 27%|       | 21/79 [00:02<00:09,  5.95it/s]
 30%|       | 24/79 [00:02<00:07,  7.72it/s]
 34%|      | 27/79 [00:02<00:05,  9.75it/s]
 38%|      | 30/79 [00:02<00:04, 11.89it/s]
 42%|     | 33/79 [00:02<00:03, 14.13it/s]
 46%|     | 36/79 [00:03<00:02, 16.29it/s]
 49%|     | 39/79 [00:03<00:02, 18.03it/s]
 53%|    | 42/79 [00:03<00:01, 19.50it/s]
 57%|    | 45/79 [00:03<00:01, 20.59it/s]
 61%|    | 48/79 [00:03<00:01, 21.49it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:59,  1.54s/it]
  5%|         | 4/79 [00:01<01:21,  1.09s/it]
  9%|         | 7/79 [00:01<00:55,  1.29it/s]
 13%|        | 10/79 [00:01<00:38,  1.80it/s]
 16%|        | 13/79 [00:02<00:26,  2.50it/s]
 20%|        | 16/79 [00:02<00:18,  3.43it/s]
 24%|       | 19/79 [00:02<00:12,  4.63it/s]
 28%|       | 22/79 [00:02<00:09,  6.13it/s]
 32%|      | 25/79 [00:02<00:06,  7.94it/s]
 35%|      | 28/79 [00:02<00:05,  9.97it/s]
 39%|      | 31/79 [00:02<00:03, 12.14it/s]
 43%|     | 34/79 [00:02<00:03, 14.30it/s]
 47%|     | 37/79 [00:02<00:02, 16.32it/s]
 51%|     | 40/79 [00:03<00:02, 18.07it/s]
 54%|    | 43/79 [00:03<00:01, 19.46it/s]
 58%|    | 46/79 [00:03<00:01, 20.78it/s]
 62%|   | 49/79 [00:03<00:01, 21.44it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:59,  1.53s/it]
  4%|         | 3/79 [00:01<01:22,  1.09s/it]
  8%|         | 6/79 [00:01<00:56,  1.30it/s]
 11%|        | 9/79 [00:01<00:38,  1.81it/s]
 15%|        | 12/79 [00:02<00:26,  2.50it/s]
 19%|        | 15/79 [00:02<00:18,  3.42it/s]
 23%|       | 18/79 [00:02<00:13,  4.61it/s]
 27%|       | 21/79 [00:02<00:09,  6.10it/s]
 30%|       | 24/79 [00:02<00:07,  7.83it/s]
 34%|      | 27/79 [00:02<00:05,  9.81it/s]
 38%|      | 30/79 [00:02<00:04, 12.00it/s]
 42%|     | 33/79 [00:02<00:03, 14.19it/s]
 46%|     | 36/79 [00:02<00:02, 16.13it/s]
 49%|     | 39/79 [00:03<00:02, 17.86it/s]
 53%|    | 42/79 [00:03<00:01, 19.28it/s]
 57%|    | 45/79 [00:03<00:01, 20.49it/s]
 61%|    | 48/79 [00:03<00:01, 21.29it/s]
 65%|   | 51/79 [00:03<00:01, 21.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:01,  1.55s/it]
  5%|         | 4/79 [00:01<01:22,  1.10s/it]
  9%|         | 7/79 [00:01<00:56,  1.28it/s]
 13%|        | 10/79 [00:01<00:38,  1.79it/s]
 16%|        | 13/79 [00:02<00:26,  2.47it/s]
 20%|        | 16/79 [00:02<00:18,  3.39it/s]
 24%|       | 19/79 [00:02<00:13,  4.58it/s]
 28%|       | 22/79 [00:02<00:09,  6.05it/s]
 32%|      | 25/79 [00:02<00:06,  7.81it/s]
 35%|      | 28/79 [00:02<00:05,  9.85it/s]
 39%|      | 31/79 [00:02<00:03, 12.06it/s]
 43%|     | 34/79 [00:02<00:03, 14.29it/s]
 47%|     | 37/79 [00:03<00:02, 16.23it/s]
 51%|     | 40/79 [00:03<00:02, 18.08it/s]
 54%|    | 43/79 [00:03<00:01, 19.67it/s]
 58%|    | 46/79 [00:03<00:01, 20.75it/s]
 62%|   | 49/79 [00:03<00:01, 21.70it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:05,  1.61s/it]
  5%|         | 4/79 [00:01<01:25,  1.14s/it]
  9%|         | 7/79 [00:01<00:58,  1.24it/s]
 13%|        | 10/79 [00:01<00:39,  1.73it/s]
 16%|        | 13/79 [00:02<00:27,  2.40it/s]
 20%|        | 16/79 [00:02<00:19,  3.29it/s]
 24%|       | 19/79 [00:02<00:13,  4.44it/s]
 28%|       | 22/79 [00:02<00:09,  5.90it/s]
 32%|      | 25/79 [00:02<00:07,  7.64it/s]
 35%|      | 28/79 [00:02<00:05,  9.65it/s]
 39%|      | 31/79 [00:02<00:04, 11.83it/s]
 43%|     | 34/79 [00:02<00:03, 14.04it/s]
 47%|     | 37/79 [00:03<00:02, 16.12it/s]
 51%|     | 40/79 [00:03<00:02, 18.01it/s]
 54%|    | 43/79 [00:03<00:01, 19.60it/s]
 58%|    | 46/79 [00:03<00:01, 20.88it/s]
 62%|   | 49/79 [00:03<00:01, 21.85it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:00,  1.54s/it]
  5%|         | 4/79 [00:01<01:22,  1.09s/it]
  9%|         | 7/79 [00:01<00:56,  1.28it/s]
 13%|        | 10/79 [00:01<00:38,  1.79it/s]
 16%|        | 13/79 [00:02<00:26,  2.49it/s]
 20%|        | 16/79 [00:02<00:18,  3.40it/s]
 24%|       | 19/79 [00:02<00:13,  4.58it/s]
 28%|       | 22/79 [00:02<00:09,  6.05it/s]
 32%|      | 25/79 [00:02<00:06,  7.83it/s]
 35%|      | 28/79 [00:02<00:05,  9.82it/s]
 39%|      | 31/79 [00:02<00:04, 11.94it/s]
 43%|     | 34/79 [00:02<00:03, 14.06it/s]
 47%|     | 37/79 [00:03<00:02, 16.18it/s]
 51%|     | 40/79 [00:03<00:02, 17.91it/s]
 54%|    | 43/79 [00:03<00:01, 19.40it/s]
 58%|    | 46/79 [00:03<00:01, 20.52it/s]
 62%|   | 49/79 [00:03<00:01, 21.63it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:03,  1.59s/it]
  5%|         | 4/79 [00:01<01:24,  1.12s/it]
  9%|         | 7/79 [00:01<00:57,  1.25it/s]
 13%|        | 10/79 [00:01<00:39,  1.75it/s]
 16%|        | 13/79 [00:02<00:27,  2.43it/s]
 20%|        | 16/79 [00:02<00:18,  3.33it/s]
 24%|       | 19/79 [00:02<00:13,  4.49it/s]
 28%|       | 22/79 [00:02<00:09,  5.93it/s]
 32%|      | 25/79 [00:02<00:07,  7.67it/s]
 35%|      | 28/79 [00:02<00:05,  9.68it/s]
 39%|      | 31/79 [00:02<00:04, 11.86it/s]
 43%|     | 34/79 [00:02<00:03, 13.93it/s]
 47%|     | 37/79 [00:03<00:02, 15.95it/s]
 51%|     | 40/79 [00:03<00:02, 17.83it/s]
 54%|    | 43/79 [00:03<00:01, 19.50it/s]
 58%|    | 46/79 [00:03<00:01, 20.75it/s]
 62%|   | 49/79 [00:03<00:01, 21.84it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:03,  1.59s/it]
  5%|         | 4/79 [00:01<01:24,  1.12s/it]
  9%|         | 7/79 [00:01<00:57,  1.25it/s]
 13%|        | 10/79 [00:01<00:39,  1.75it/s]
 16%|        | 13/79 [00:02<00:27,  2.43it/s]
 20%|        | 16/79 [00:02<00:18,  3.33it/s]
 24%|       | 19/79 [00:02<00:13,  4.50it/s]
 28%|       | 22/79 [00:02<00:09,  5.96it/s]
 32%|      | 25/79 [00:02<00:07,  7.71it/s]
 35%|      | 28/79 [00:02<00:05,  9.73it/s]
 39%|      | 31/79 [00:02<00:04, 11.87it/s]
 43%|     | 34/79 [00:02<00:03, 14.04it/s]
 47%|     | 37/79 [00:03<00:02, 16.08it/s]
 51%|     | 40/79 [00:03<00:02, 17.79it/s]
 54%|    | 43/79 [00:03<00:01, 19.38it/s]
 58%|    | 46/79 [00:03<00:01, 20.43it/s]
 62%|   | 49/79 [00:03<00:01, 21.31it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:07,  1.64s/it]
  5%|         | 4/79 [00:01<01:26,  1.16s/it]
  9%|         | 7/79 [00:01<00:59,  1.22it/s]
 13%|        | 10/79 [00:02<00:40,  1.70it/s]
 16%|        | 13/79 [00:02<00:27,  2.36it/s]
 20%|        | 16/79 [00:02<00:19,  3.25it/s]
 24%|       | 19/79 [00:02<00:13,  4.38it/s]
 28%|       | 22/79 [00:02<00:09,  5.82it/s]
 32%|      | 25/79 [00:02<00:07,  7.57it/s]
 35%|      | 28/79 [00:02<00:05,  9.55it/s]
 39%|      | 31/79 [00:02<00:04, 11.71it/s]
 43%|     | 34/79 [00:02<00:03, 13.95it/s]
 47%|     | 37/79 [00:03<00:02, 15.99it/s]
 51%|     | 40/79 [00:03<00:02, 17.99it/s]
 54%|    | 43/79 [00:03<00:01, 19.49it/s]
 58%|    | 46/79 [00:03<00:01, 20.74it/s]
 62%|   | 49/79 [00:03<00:01, 21.70it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:01,  1.56s/it]
  5%|         | 4/79 [00:01<01:23,  1.11s/it]
  9%|         | 7/79 [00:01<00:56,  1.27it/s]
 13%|        | 10/79 [00:01<00:38,  1.77it/s]
 16%|        | 13/79 [00:02<00:26,  2.46it/s]
 20%|        | 16/79 [00:02<00:18,  3.37it/s]
 24%|       | 19/79 [00:02<00:13,  4.54it/s]
 28%|       | 22/79 [00:02<00:09,  5.99it/s]
 32%|      | 25/79 [00:02<00:06,  7.74it/s]
 35%|      | 28/79 [00:02<00:05,  9.73it/s]
 39%|      | 31/79 [00:02<00:04, 11.89it/s]
 43%|     | 34/79 [00:02<00:03, 14.03it/s]
 47%|     | 37/79 [00:03<00:02, 15.96it/s]
 51%|     | 40/79 [00:03<00:02, 17.86it/s]
 54%|    | 43/79 [00:03<00:01, 19.22it/s]
 58%|    | 46/79 [00:03<00:01, 20.37it/s]
 62%|   | 49/79 [00:03<00:01, 21.24it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:06,  1.62s/it]
  5%|         | 4/79 [00:01<01:26,  1.15s/it]
  9%|         | 7/79 [00:01<00:58,  1.22it/s]
 13%|        | 10/79 [00:01<00:40,  1.71it/s]
 16%|        | 13/79 [00:02<00:27,  2.38it/s]
 20%|        | 16/79 [00:02<00:19,  3.26it/s]
 24%|       | 19/79 [00:02<00:13,  4.41it/s]
 28%|       | 22/79 [00:02<00:09,  5.85it/s]
 32%|      | 25/79 [00:02<00:07,  7.58it/s]
 35%|      | 28/79 [00:02<00:05,  9.56it/s]
 39%|      | 31/79 [00:02<00:04, 11.65it/s]
 43%|     | 34/79 [00:02<00:03, 13.82it/s]
 47%|     | 37/79 [00:03<00:02, 15.94it/s]
 51%|     | 40/79 [00:03<00:02, 17.92it/s]
 54%|    | 43/79 [00:03<00:01, 19.69it/s]
 58%|    | 46/79 [00:03<00:01, 20.69it/s]
 62%|   | 49/79 [00:03<00:01, 21.97it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:05,  1.61s/it]
  5%|         | 4/79 [00:01<01:25,  1.14s/it]
  9%|         | 7/79 [00:01<00:58,  1.23it/s]
 13%|        | 10/79 [00:01<00:40,  1.72it/s]
 16%|        | 13/79 [00:02<00:27,  2.39it/s]
 20%|        | 16/79 [00:02<00:19,  3.27it/s]
 24%|       | 19/79 [00:02<00:13,  4.42it/s]
 28%|       | 22/79 [00:02<00:09,  5.88it/s]
 32%|      | 25/79 [00:02<00:07,  7.63it/s]
 35%|      | 28/79 [00:02<00:05,  9.60it/s]
 39%|      | 31/79 [00:02<00:04, 11.71it/s]
 43%|     | 34/79 [00:02<00:03, 13.90it/s]
 47%|     | 37/79 [00:03<00:02, 16.01it/s]
 51%|     | 40/79 [00:03<00:02, 17.80it/s]
 54%|    | 43/79 [00:03<00:01, 19.23it/s]
 58%|    | 46/79 [00:03<00:01, 20.52it/s]
 62%|   | 49/79 [00:03<00:01, 21.56it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:04,  1.60s/it]
  5%|         | 4/79 [00:01<01:25,  1.13s/it]
  9%|         | 7/79 [00:01<00:58,  1.24it/s]
 13%|        | 10/79 [00:01<00:39,  1.74it/s]
 16%|        | 13/79 [00:02<00:27,  2.41it/s]
 20%|        | 16/79 [00:02<00:19,  3.30it/s]
 24%|       | 19/79 [00:02<00:13,  4.46it/s]
 28%|       | 22/79 [00:02<00:09,  5.90it/s]
 32%|      | 25/79 [00:02<00:07,  7.64it/s]
 35%|      | 28/79 [00:02<00:05,  9.64it/s]
 39%|      | 31/79 [00:02<00:04, 11.82it/s]
 43%|     | 34/79 [00:02<00:03, 13.95it/s]
 47%|     | 37/79 [00:03<00:02, 15.93it/s]
 51%|     | 40/79 [00:03<00:02, 17.79it/s]
 54%|    | 43/79 [00:03<00:01, 19.28it/s]
 58%|    | 46/79 [00:03<00:01, 20.45it/s]
 62%|   | 49/79 [00:03<00:01, 21.31it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:04,  1.60s/it]
  5%|         | 4/79 [00:01<01:25,  1.13s/it]
  9%|         | 7/79 [00:01<00:58,  1.24it/s]
 13%|        | 10/79 [00:02<00:39,  1.73it/s]
 16%|        | 13/79 [00:02<00:27,  2.40it/s]
 20%|        | 16/79 [00:02<00:19,  3.30it/s]
 24%|       | 19/79 [00:02<00:13,  4.45it/s]
 28%|       | 22/79 [00:02<00:09,  5.91it/s]
 32%|      | 25/79 [00:02<00:07,  7.65it/s]
 35%|      | 28/79 [00:02<00:05,  9.67it/s]
 39%|      | 31/79 [00:02<00:04, 11.79it/s]
 43%|     | 34/79 [00:02<00:03, 13.91it/s]
 47%|     | 37/79 [00:03<00:02, 16.01it/s]
 51%|     | 40/79 [00:03<00:02, 17.64it/s]
 54%|    | 43/79 [00:03<00:01, 19.09it/s]
 58%|    | 46/79 [00:03<00:01, 19.92it/s]
 62%|   | 49/79 [00:03<00:01, 20.41it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:10,  1.67s/it]
  5%|         | 4/79 [00:01<01:28,  1.18s/it]
  9%|         | 7/79 [00:01<01:00,  1.19it/s]
 13%|        | 10/79 [00:02<00:41,  1.67it/s]
 16%|        | 13/79 [00:02<00:28,  2.31it/s]
 20%|        | 16/79 [00:02<00:19,  3.18it/s]
 24%|       | 19/79 [00:02<00:13,  4.30it/s]
 28%|       | 22/79 [00:02<00:09,  5.73it/s]
 32%|      | 25/79 [00:02<00:07,  7.45it/s]
 35%|      | 28/79 [00:02<00:05,  9.43it/s]
 39%|      | 31/79 [00:02<00:04, 11.66it/s]
 43%|     | 34/79 [00:03<00:03, 13.88it/s]
 47%|     | 37/79 [00:03<00:02, 16.11it/s]
 51%|     | 40/79 [00:03<00:02, 18.01it/s]
 54%|    | 43/79 [00:03<00:01, 19.54it/s]
 58%|    | 46/79 [00:03<00:01, 19.19it/s]
 62%|   | 49/79 [00:03<00:01, 20.47it/s]
 66%|   | 52/79 [00:03<00:01/s]
 67%|   | 53/79 [00:03<00:01, 24.19it/s]
 71%|   | 56/79 [00:03<00:00, 24.67it/s]
 75%|  | 59/79 [00:03<00:00, 25.06it/s]
 78%|  | 62/79 [00:03<00:00, 25.29it/s]
 82%| | 65/79 [00:04<00:00, 25.48it/s]
 86%| | 68/79 [00:04<00:00, 25.71it/s]
 90%| | 71/79 [00:04<00:00, 25.87it/s]
 94%|| 74/79 [00:04<00:00, 26.24it/s]
 97%|| 77/79 [00:04<00:00, 26.66it/s]
100%|| 79/79 [00:04<00:00, 17.14it/s]
, 23.69it/s]
 70%|   | 55/79 [00:03<00:00, 24.28it/s]
 73%|  | 58/79 [00:03<00:00, 24.55it/s]
 77%|  | 61/79 [00:03<00:00, 25.01it/s]
 81%|  | 64/79 [00:04<00:00, 25.27it/s]
 85%| | 67/79 [00:04<00:00, 25.54it/s]
 89%| | 70/79 [00:04<00:00, 25.60it/s]
 92%|| 73/79 [00:04<00:00, 25.97it/s]
 96%|| 76/79 [00:04<00:00, 26.31it/s]
100%|| 79/79 [00:04<00:00, 27.18it/s]
57it/s]
 68%|   | 54/79 [00:03<00:01, 24.19it/s]
 72%|  | 57/79 [00:03<00:00, 24.60it/s]
 76%|  | 60/79 [00:03<00:00, 24.72it/s]
 80%|  | 63/79 [00:03<00:00, 24.67it/s]
 84%| | 66/79 [00:04<00:00, 24.86it/s]
 87%| | 69/79 [00:04<00:00, 24.97it/s]
 91%| | 72/79 [00:04<00:00, 24.95it/s]
 95%|| 75/79 [00:04<00:00, 25.57it/s]
 99%|| 78/79 [00:04<00:00, 25.99it/s]
100%|| 79/79 [00:04<00:00, 17.02it/s]
30it/s]
 68%|   | 54/79 [00:03<00:01, 23.97it/s]
 72%|  | 57/79 [00:03<00:00, 24.45it/s]
 76%|  | 60/79 [00:03<00:00, 24.79it/s]
 80%|  | 63/79 [00:04<00:00, 24.78it/s]
 84%| | 66/79 [00:04<00:00, 24.82it/s]
 87%| | 69/79 [00:04<00:00, 25.06it/s]
 91%| | 72/79 [00:04<00:00, 25.21it/s]
 95%|| 75/79 [00:04<00:00, 25.81it/s]
 99%|| 78/79 [00:04<00:00, 26.93it/s]
100%|| 79/79 [00:04<00:00, 16.87it/s]
, 23.43it/s]
 70%|   | 55/79 [00:03<00:01, 23.79it/s]
 73%|  | 58/79 [00:03<00:00, 24.38it/s]
 77%|  | 61/79 [00:03<00:00, 24.53it/s]
 81%|  | 64/79 [00:04<00:00, 24.85it/s]
 85%| | 67/79 [00:04<00:00, 25.14it/s]
 89%| | 70/79 [00:04<00:00, 25.28it/s]
 92%|| 73/79 [00:04<00:00, 25.70it/s]
 96%|| 76/79 [00:04<00:00, 26.21it/s]
100%|| 79/79 [00:04<00:00, 26.88it/s]
56it/s]
 68%|   | 54/79 [00:03<00:01, 24.27it/s]
 72%|  | 57/79 [00:03<00:00, 24.46it/s]
 76%|  | 60/79 [00:03<00:00, 24.73it/s]
 80%|  | 63/79 [00:03<00:00, 25.15it/s]
 84%| | 66/79 [00:04<00:00, 25.28it/s]
 87%| | 69/79 [00:04<00:00, 25.21it/s]
 91%| | 72/79 [00:04<00:00, 25.01it/s]
 95%|| 75/79 [00:04<00:00, 25.74it/s]
 99%|| 78/79 [00:04<00:00, 26.18it/s]
100%|| 79/79 [00:04<00:00, 16.95it/s]
, 23.59it/s]
 70%|   | 55/79 [00:03<00:00, 24.14it/s]
 73%|  | 58/79 [00:03<00:00, 24.78it/s]
 77%|  | 61/79 [00:03<00:00, 25.11it/s]
 81%|  | 64/79 [00:04<00:00, 25.27it/s]
 85%| | 67/79 [00:04<00:00, 25.19it/s]
 89%| | 70/79 [00:04<00:00, 25.35it/s]
 92%|| 73/79 [00:04<00:00, 25.63it/s]
 96%|| 76/79 [00:04<00:00, 26.12it/s]
100%|| 79/79 [00:04<00:00, 26.85it/s]
, 22.35it/s]
 70%|   | 55/79 [00:03<00:01, 23.33it/s]
 73%|  | 58/79 [00:03<00:00, 24.04it/s]
 77%|  | 61/79 [00:03<00:00, 24.46it/s]
 81%|  | 64/79 [00:04<00:00, 24.55it/s]
 85%| | 67/79 [00:04<00:00, 24.96it/s]
 89%| | 70/79 [00:04<00:00, 25.02it/s]
 92%|| 73/79 [00:04<00:00, 25.47it/s]
 96%|| 76/79 [00:04<00:00, 25.89it/s]
100%|| 79/79 [00:04<00:00, 26.86it/s]
22it/s]
 68%|   | 54/79 [00:03<00:01, 23.81it/s]
 72%|  | 57/79 [00:03<00:00, 24.27it/s]
 76%|  | 60/79 [00:03<00:00, 24.67it/s]
 80%|  | 63/79 [00:04<00:00, 25.12it/s]
 84%| | 66/79 [00:04<00:00, 25.34it/s]
 87%| | 69/79 [00:04<00:00, 25.46it/s]
 91%| | 72/79 [00:04<00:00, 25.27it/s]
 95%|| 75/79 [00:04<00:00, 26.24it/s]
 99%|| 78/79 [00:04<00:00, 26.33it/s]
100%|| 79/79 [00:04<00:00, 16.71it/s]
53it/s]
 68%|   | 54/79 [00:03<00:01, 23.30it/s]
 72%|  | 57/79 [00:03<00:00, 23.80it/s]
 76%|  | 60/79 [00:03<00:00, 24.26it/s]
 80%|  | 63/79 [00:04<00:00, 24.41it/s]
 84%| | 66/79 [00:04<00:00, 24.44it/s]
 87%| | 69/79 [00:04<00:00, 24.80it/s]
 91%| | 72/79 [00:04<00:00, 24.62it/s]
 95%|| 75/79 [00:04<00:00, 25.37it/s]
 99%|| 78/79 [00:04<00:00, 26.09it/s]
100%|| 79/79 [00:04<00:00, 16.70it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 23.56it/s]
 71%|   | 56/79 [00:03<00:00, 23.98it/s]
 75%|  | 59/79 [00:03<00:00, 24.28it/s]
 78%|  | 62/79 [00:03<00:00, 24.31it/s]
 82%| | 65/79 [00:04<00:00, 24.32it/s]
 86%| | 68/79 [00:04<00:00, 24.20it/s]
 90%| | 71/79 [00:04<00:00, 23.97it/s]
 94%|| 74/79 [00:04<00:00, 24.57it/s]
 97%|| 77/79 [00:04<00:00, 24.94it/s]
100%|| 79/79 [00:04<00:00, 16.70it/s]
, 22.72it/s]
 70%|   | 55/79 [00:03<00:01, 23.52it/s]
 73%|  | 58/79 [00:03<00:00, 23.85it/s]
 77%|  | 61/79 [00:03<00:00, 24.26it/s]
 81%|  | 64/79 [00:04<00:00, 24.48it/s]
 85%| | 67/79 [00:04<00:00, 24.73it/s]
 89%| | 70/79 [00:04<00:00, 24.36it/s]
 92%|| 73/79 [00:04<00:00, 25.09it/s]
 96%|| 76/79 [00:04<00:00, 25.67it/s]
100%|| 79/79 [00:04<00:00, 26.56it/s]
, 22.85it/s]
 70%|   | 55/79 [00:03<00:01, 23.26it/s]
 73%|  | 58/79 [00:03<00:00, 23.80it/s]
 77%|  | 61/79 [00:03<00:00, 24.18it/s]
 81%|  | 64/79 [00:04<00:00, 24.43it/s]
 85%| | 67/79 [00:04<00:00, 24.63it/s]
 89%| | 70/79 [00:04<00:00, 24.72it/s]
 92%|| 73/79 [00:04<00:00, 25.11it/s]
 96%|| 76/79 [00:04<00:00, 25.69it/s]
100%|| 79/79 [00:04<00:00, 26.46it/s]
, 22.94it/s]
 70%|   | 55/79 [00:03<00:01, 23.40it/s]
 73%|  | 58/79 [00:03<00:00, 24.02it/s]
 77%|  | 61/79 [00:03<00:00, 24.14it/s]
 81%|  | 64/79 [00:04<00:00, 24.32it/s]
 85%| | 67/79 [00:04<00:00, 24.54it/s]
 89%| | 70/79 [00:04<00:00, 24.70it/s]
 92%|| 73/79 [00:04<00:00, 24.32it/s]
 96%|| 76/79 [00:04<00:00, 25.15it/s]
100%|| 79/79 [00:04<00:00, 26.07it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 23.24it/s]
 71%|   | 56/79 [00:03<00:00, 23.58it/s]
 75%|  | 59/79 [00:03<00:00, 23.98it/s]
 78%|  | 62/79 [00:04<00:00, 24.26it/s]
 82%| | 65/79 [00:04<00:00, 24.51it/s]
 86%| | 68/79 [00:04<00:00, 24.48it/s]
 90%| | 71/79 [00:04<00:00, 24.45it/s]
 94%|| 74/79 [00:04<00:00, 25.22it/s]
 97%|| 77/79 [00:04<00:00, 25.92it/s]
100%|| 79/79 [00:04<00:00, 16.62it/s]
42it/s]
 68%|   | 54/79 [00:03<00:01, 22.72it/s]
 72%|  | 57/79 [00:03<00:00, 23.40it/s]
 76%|  | 60/79 [00:04<00:00, 23.88it/s]
 80%|  | 63/79 [00:04<00:00, 24.01it/s]
 84%| | 66/79 [00:04<00:00, 24.27it/s]
 87%| | 69/79 [00:04<00:00, 24.08it/s]
 91%| | 72/79 [00:04<00:00, 24.32it/s]
 95%|| 75/79 [00:04<00:00, 25.13it/s]
 99%|| 78/79 [00:04<00:00, 25.84it/s]
100%|| 79/79 [00:04<00:00, 16.45it/s]
, 22.49it/s]
 70%|   | 55/79 [00:03<00:01, 22.97it/s]
 73%|  | 58/79 [00:03<00:00, 23.39it/s]
 77%|  | 61/79 [00:04<00:00, 23.45it/s]
 81%|  | 64/79 [00:04<00:00, 23.59it/s]
 85%| | 67/79 [00:04<00:00, 23.93it/s]
 89%| | 70/79 [00:04<00:00, 24.01it/s]
 92%|| 73/79 [00:04<00:00, 24.45it/s]
 96%|| 76/79 [00:04<00:00, 25.17it/s]
100%|| 79/79 [00:04<00:00, 26.09it/s]
64it/s]
 68%|   | 54/79 [00:03<00:01, 23.20it/s]
 72%|  | 57/79 [00:03<00:00, 23.60it/s]
 76%|  | 60/79 [00:03<00:00, 24.04it/s]
 80%|  | 63/79 [00:04<00:00, 24.31it/s]
 84%| | 66/79 [00:04<00:00, 24.56it/s]
 87%| | 69/79 [00:04<00:00, 24.71it/s]
 91%| | 72/79 [00:04<00:00, 24.44it/s]
 95%|| 75/79 [00:04<00:00, 25.04it/s]
 99%|| 78/79 [00:04<00:00, 25.37it/s]
100%|| 79/79 [00:04<00:00, 16.56it/s]
, 22.50it/s]
 70%|   | 55/79 [00:03<00:01, 23.14it/s]
 73%|  | 58/79 [00:03<00:00, 23.58it/s]
 77%|  | 61/79 [00:04<00:00, 23.57it/s]
 81%|  | 64/79 [00:04<00:00, 23.91it/s]
 85%| | 67/79 [00:04<00:00, 24.15it/s]
 89%| | 70/79 [00:04<00:00, 24.33it/s]
 92%|| 73/79 [00:04<00:00, 24.54it/s]
 96%|| 76/79 [00:04<00:00, 25.21it/s]
100%|| 79/79 [00:04<00:00, 26.10it/s]
, 21.97it/s]
 70%|   | 55/79 [00:03<00:01, 22.51it/s]
 73%|  | 58/79 [00:03<00:00, 22.91it/s]
 77%|  | 61/79 [00:04<00:00, 23.09it/s]
 81%|  | 64/79 [00:04<00:00, 23.45it/s]
 85%| | 67/79 [00:04<00:00, 23.66it/s]
 89%| | 70/79 [00:04<00:00, 23.79it/s]
 92%|| 73/79 [00:04<00:00, 24.25it/s]
 96%|| 76/79 [00:04<00:00, 25.04it/s]
100%|| 79/79 [00:04<00:00, 25.88it/s]
44it/s]
 68%|   | 54/79 [00:03<00:01, 22.90it/s]
 72%|  | 57/79 [00:03<00:00, 23.33it/s]
 76%|  | 60/79 [00:04<00:00, 23.52it/s]
 80%|  | 63/79 [00:04<00:00, 23.76it/s]
 84%| | 66/79 [00:04<00:00, 23.84it/s]
 87%| | 69/79 [00:04<00:00, 23.95it/s]
 91%| | 72/79 [00:04<00:00, 24.32it/s]
 95%|| 75/79 [00:04<00:00, 25.17it/s]
 99%|| 78/79 [00:04<00:00, 25.93it/s]
100%|| 79/79 [00:04<00:00, 16.33it/s]
, 22.23it/s]
 70%|   | 55/79 [00:03<00:01, 22.78it/s]
 73%|  | 58/79 [00:03<00:00, 22.98it/s]
 77%|  | 61/79 [00:04<00:00, 23.40it/s]
 81%|  | 64/79 [00:04<00:00, 23.66it/s]
 85%| | 67/79 [00:04<00:00, 23.90it/s]
 89%| | 70/79 [00:04<00:00, 23.60it/s]
 92%|| 73/79 [00:04<00:00, 24.39it/s]
 96%|| 76/79 [00:04<00:00, 24.77it/s]
100%|| 79/79 [00:04<00:00, 25.74it/s]
, 21.99it/s]
 70%|   | 55/79 [00:03<00:01, 22.52it/s]
 73%|  | 58/79 [00:03<00:00, 23.14it/s]
 77%|  | 61/79 [00:04<00:00, 23.23it/s]
 81%|  | 64/79 [00:04<00:00, 23.43it/s]
 85%| | 67/79 [00:04<00:00, 23.63it/s]
 89%| | 70/79 [00:04<00:00, 23.69it/s]
 92%|| 73/79 [00:04<00:00, 24.24it/s]
 96%|| 76/79 [00:04<00:00, 24.90it/s]
100%|| 79/79 [00:04<00:00, 25.79it/s]
, 22.67it/s]
 70%|   | 55/79 [00:03<00:01, 23.10it/s]
 73%|  | 58/79 [00:03<00:00, 23.66it/s]
 77%|  | 61/79 [00:04<00:00, 24.17it/s]
 81%|  | 64/79 [00:04<00:00, 24.02it/s]
 85%| | 67/79 [00:04<00:00, 24.18it/s]
 89%| | 70/79 [00:04<00:00, 24.45it/s]
 92%|| 73/79 [00:04<00:00, 24.48it/s]
 96%|| 76/79 [00:04<00:00, 25.31it/s]
100%|| 79/79 [00:04<00:00, 26.28it/s]
, 22.42it/s]
 70%|   | 55/79 [00:03<00:01, 22.99it/s]
 73%|  | 58/79 [00:03<00:00, 23.54it/s]
 77%|  | 61/79 [00:04<00:00, 23.77it/s]
 81%|  | 64/79 [00:04<00:00, 23.96it/s]
 85%| | 67/79 [00:04<00:00, 24.29it/s]
 89%| | 70/79 [00:04<00:00, 24.41it/s]
 92%|| 73/79 [00:04<00:00, 24.78it/s]
 96%|| 76/79 [00:04<00:00, 25.59it/s]
100%|| 79/79 [00:04<00:00, 26.59it/s]
, 21.99it/s]
 70%|   | 55/79 [00:03<00:01, 22.60it/s]
 73%|  | 58/79 [00:03<00:00, 22.91it/s]
 77%|  | 61/79 [00:04<00:00, 23.30it/s]
 81%|  | 64/79 [00:04<00:00, 23.79it/s]
 85%| | 67/79 [00:04<00:00, 23.90it/s]
 89%| | 70/79 [00:04<00:00, 23.88it/s]
 92%|| 73/79 [00:04<00:00, 24.24it/s]
 96%|| 76/79 [00:04<00:00, 24.85it/s]
100%|| 79/79 [00:04<00:00, 25.68it/s]
, 22.00it/s]
 70%|   | 55/79 [00:03<00:01, 22.64it/s]
 73%|  | 58/79 [00:03<00:00, 23.07it/s]
 77%|  | 61/79 [00:04<00:00, 23.37it/s]
 81%|  | 64/79 [00:04<00:00, 23.53it/s]
 85%| | 67/79 [00:04<00:00, 23.77it/s]
 89%| | 70/79 [00:04<00:00, 23.99it/s]
 92%|| 73/79 [00:04<00:00, 24.38it/s]
 96%|| 76/79 [00:04<00:00, 25.61it/s]
100%|| 79/79 [00:04<00:00, 26.14it/s]
, 22.38it/s]
 70%|   | 55/79 [00:03<00:01, 22.85it/s]
 73%|  | 58/79 [00:03<00:00, 23.05it/s]
 77%|  | 61/79 [00:04<00:00, 22.79it/s]
 81%|  | 64/79 [00:04<00:00, 23.22it/s]
 85%| | 67/79 [00:04<00:00, 23.35it/s]
 89%| | 70/79 [00:04<00:00, 23.66it/s]
 92%|| 73/79 [00:04<00:00, 24.31it/s]
 96%|| 76/79 [00:04<00:00, 25.12it/s]
100%|| 79/79 [00:04<00:00, 26.21it/s]
95it/s]
 68%|   | 54/79 [00:03<00:01, 22.40it/s]
 72%|  | 57/79 [00:03<00:00, 22.71it/s]
 76%|  | 60/79 [00:04<00:00, 22.31it/s]
 80%|  | 63/79 [00:04<00:00, 21.38it/s]
 84%| | 66/79 [00:04<00:00, 21.81it/s]
 87%| | 69/79 [00:04<00:00, 22.43it/s]
 91%| | 72/79 [00:04<00:00, 23.02it/s]
 95%|| 75/79 [00:04<00:00, 24.03it/s]
 99%|| 78/79 [00:04<00:00, 24.84it/s]
100%|| 79/79 [00:04<00:00, 16.21it/s]
, 21.27it/s]
 70%|   | 55/79 [00:03<00:01, 22.18it/s]
 73%|  | 58/79 [00:04<00:00, 22.69it/s]
 77%|  | 61/79 [00:04<00:00, 22.88it/s]
 81%|  | 64/79 [00:04<00:00, 23.16it/s]
 85%| | 67/79 [00:04<00:00, 23.45it/s]
 89%| | 70/79 [00:04<00:00, 23.66it/s]
 92%|| 73/79 [00:04<00:00, 24.42it/s]
 96%|| 76/79 [00:04<00:00, 25.22it/s]
100%|| 79/79 [00:04<00:00, 26.30it/s]
, 20.72it/s]
 70%|   | 55/79 [00:03<00:01, 21.24it/s]
 73%|  | 58/79 [00:04<00:00, 21.52it/s]
 77%|  | 61/79 [00:04<00:00, 21.57it/s]
 81%|  | 64/79 [00:04<00:00, 21.63it/s]
 85%| | 67/79 [00:04<00:00, 22.32it/s]
 89%| | 70/79 [00:04<00:00, 22.76it/s]
 92%|| 73/79 [00:04<00:00, 23.31it/s]
 96%|| 76/79 [00:04<00:00, 24.38it/s]
100%|| 79/79 [00:04<00:00, 25.34it/s]
, 21.81it/s]
 70%|   | 55/79 [00:03<00:01, 21.97it/s]
 73%|  | 58/79 [00:03<00:00, 22.25it/s]
 77%|  | 61/79 [00:04<00:00, 22.92it/s]
 81%|  | 64/79 [00:04<00:00, 23.22it/s]
 85%| | 67/79 [00:04<00:00, 21.19it/s]
 89%| | 70/79 [00:04<00:00, 19.39it/s]
 92%|| 73/79 [00:04<00:00, 18.53it/s]
 95%|| 75/79 [00:04<00:00, 18.21it/s]
 97%|| 77/79 [00:04<00:00, 18.02it/s]
100%|| 79/79 [00:05<00:00, 18.25it/s]
2020-06-23 15:58:25,474 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:05.129028 (0.032825779724121096 s / img per device, on 32 devices)
2020-06-23 15:58:25,497 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:58:25,497 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:58:25,519 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592953119393, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 5, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592953119394, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 5}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 15:58:40,718 maskrcnn_benchmark.trainer INFO: eta: 1:19:27  iter: 3680  loss: 0.6794 (0.8620)  loss_classifier: 0.2561 (0.3213)  loss_box_reg: 0.1179 (0.1356)  loss_mask: 0.2841 (0.3353)  loss_objectness: 0.0252 (0.0470)  loss_rpn_box_reg: 0.0087 (0.0227)  time: 0.1093 (0.1313)  data: 0.0015 (0.0224)  lr: 0.160000  max mem: 5045
2020-06-23 15:58:42,882 maskrcnn_benchmark.trainer INFO: eta: 1:19:19  iter: 3700  loss: 0.6759 (0.8611)  loss_classifier: 0.2403 (0.3209)  loss_box_reg: 0.1131 (0.1356)  loss_mask: 0.2573 (0.3350)  loss_objectness: 0.0280 (0.0470)  loss_rpn_box_reg: 0.0115 (0.0227)  time: 0.1072 (0.1311)  data: 0.0015 (0.0223)  lr: 0.160000  max mem: 5045
2020-06-23 15:58:45,033 maskrcnn_benchmark.trainer INFO: eta: 1:19:12  iter: 3720  loss: 0.7061 (0.8601)  loss_classifier: 0.2488 (0.3205)  loss_box_reg: 0.1019 (0.1354)  loss_mask: 0.2671 (0.3346)  loss_objectness: 0.0175 (0.0469)  loss_rpn_box_reg: 0.0082 (0.0227)  time: 0.1072 (0.1310)  data: 0.0015 (0.0222)  lr: 0.160000  max mem: 5045
2020-06-23 15:58:47,209 maskrcnn_benchmark.trainer INFO: eta: 1:19:05  iter: 3740  loss: 0.6970 (0.8592)  loss_classifier: 0.2315 (0.3201)  loss_box_reg: 0.0981 (0.1353)  loss_mask: 0.2886 (0.3344)  loss_objectness: 0.0221 (0.0468)  loss_rpn_box_reg: 0.0095 (0.0227)  time: 0.1082 (0.1309)  data: 0.0015 (0.0221)  lr: 0.160000  max mem: 5045
2020-06-23 15:58:49,370 maskrcnn_benchmark.trainer INFO: eta: 1:18:58  iter: 3760  loss: 0.6902 (0.8586)  loss_classifier: 0.2749 (0.3198)  loss_box_reg: 0.1043 (0.1352)  loss_mask: 0.2762 (0.3341)  loss_objectness: 0.0179 (0.0468)  loss_rpn_box_reg: 0.0084 (0.0227)  time: 0.1081 (0.1308)  data: 0.0015 (0.0220)  lr: 0.160000  max mem: 5045
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 15:58:51,524 maskrcnn_benchmark.trainer INFO: eta: 1:18:51  iter: 3780  loss: 0.7984 (0.8584)  loss_classifier: 0.2852 (0.3197)  loss_box_reg: 0.1310 (0.1352)  loss_mask: 0.3168 (0.3340)  loss_objectness: 0.0306 (0.0467)  loss_rpn_box_reg: 0.0129 (0.0227)  time: 0.1070 (0.1306)  data: 0.0015 (0.0219)  lr: 0.160000  max mem: 5045
DONE (t=1.28s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 15:58:53,670 maskrcnn_benchmark.trainer INFO: eta: 1:18:44  iter: 3800  loss: 0.6580 (0.8576)  loss_classifier: 0.2259 (0.3194)  loss_box_reg: 0.1071 (0.1351)  loss_mask: 0.2786 (0.3337)  loss_objectness: 0.0224 (0.0466)  loss_rpn_box_reg: 0.0104 (0.0227)  time: 0.1073 (0.1305)  data: 0.0016 (0.0218)  lr: 0.160000  max mem: 5045
DONE (t=2.37s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.24389
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.43839
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.24831
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13928
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.26915
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.31439
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.23533
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.39253
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.41535
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24992
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.45361
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.50528
2020-06-23 15:58:55,830 maskrcnn_benchmark.trainer INFO: eta: 1:18:37  iter: 3820  loss: 0.6359 (0.8568)  loss_classifier: 0.2302 (0.3190)  loss_box_reg: 0.1016 (0.1351)  loss_mask: 0.2709 (0.3334)  loss_objectness: 0.0248 (0.0466)  loss_rpn_box_reg: 0.0099 (0.0227)  time: 0.1081 (0.1304)  data: 0.0014 (0.0217)  lr: 0.160000  max mem: 5045
2020-06-23 15:58:57,997 maskrcnn_benchmark.trainer INFO: eta: 1:18:31  iter: 3840  loss: 0.7340 (0.8562)  loss_classifier: 0.2776 (0.3188)  loss_box_reg: 0.1244 (0.1350)  loss_mask: 0.2845 (0.3332)  loss_objectness: 0.0260 (0.0465)  loss_rpn_box_reg: 0.0091 (0.0227)  time: 0.1078 (0.1303)  data: 0.0016 (0.0216)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:00,128 maskrcnn_benchmark.trainer INFO: eta: 1:18:23  iter: 3860  loss: 0.7437 (0.8556)  loss_classifier: 0.2536 (0.3186)  loss_box_reg: 0.1210 (0.1350)  loss_mask: 0.3190 (0.3330)  loss_objectness: 0.0240 (0.0464)  loss_rpn_box_reg: 0.0116 (0.0227)  time: 0.1058 (0.1302)  data: 0.0015 (0.0215)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:02,284 maskrcnn_benchmark.trainer INFO: eta: 1:18:17  iter: 3880  loss: 0.7384 (0.8552)  loss_classifier: 0.2690 (0.3183)  loss_box_reg: 0.1237 (0.1349)  loss_mask: 0.2878 (0.3328)  loss_objectness: 0.0258 (0.0464)  loss_rpn_box_reg: 0.0107 (0.0227)  time: 0.1076 (0.1300)  data: 0.0015 (0.0214)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:04,428 maskrcnn_benchmark.trainer INFO: eta: 1:18:10  iter: 3900  loss: 0.6550 (0.8543)  loss_classifier: 0.2324 (0.3179)  loss_box_reg: 0.0886 (0.1348)  loss_mask: 0.2926 (0.3327)  loss_objectness: 0.0255 (0.0463)  loss_rpn_box_reg: 0.0103 (0.0227)  time: 0.1067 (0.1299)  data: 0.0015 (0.0213)  lr: 0.160000  max mem: 5045
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:59:06,589 maskrcnn_benchmark.trainer INFO: eta: 1:18:03  iter: 3920  loss: 0.5847 (0.8530)  loss_classifier: 0.1868 (0.3173)  loss_box_reg: 0.0681 (0.1345)  loss_mask: 0.2690 (0.3323)  loss_objectness: 0.0166 (0.0462)  loss_rpn_box_reg: 0.0084 (0.0227)  time: 0.1076 (0.1298)  data: 0.0014 (0.0212)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:08,746 maskrcnn_benchmark.trainer INFO: eta: 1:17:57  iter: 3940  loss: 0.6779 (0.8521)  loss_classifier: 0.2537 (0.3170)  loss_box_reg: 0.1047 (0.1344)  loss_mask: 0.2615 (0.3320)  loss_objectness: 0.0207 (0.0461)  loss_rpn_box_reg: 0.0105 (0.0226)  time: 0.1067 (0.1297)  data: 0.0014 (0.0211)  lr: 0.160000  max mem: 5045
DONE (t=3.37s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:59:10,911 maskrcnn_benchmark.trainer INFO: eta: 1:17:50  iter: 3960  loss: 0.6908 (0.8514)  loss_classifier: 0.2362 (0.3167)  loss_box_reg: 0.1148 (0.1343)  loss_mask: 0.2734 (0.3317)  loss_objectness: 0.0211 (0.0461)  loss_rpn_box_reg: 0.0100 (0.0226)  time: 0.1073 (0.1296)  data: 0.0015 (0.0210)  lr: 0.160000  max mem: 5045
DONE (t=3.88s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.24317
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.42216
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.25124
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.10236
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.26343
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.36035
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.23705
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.37907
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.39846
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21589
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.44267
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.51092
2020-06-23 15:59:13,047 maskrcnn_benchmark.trainer INFO: eta: 1:17:43  iter: 3980  loss: 0.7802 (0.8511)  loss_classifier: 0.2837 (0.3166)  loss_box_reg: 0.1417 (0.1343)  loss_mask: 0.2977 (0.3316)  loss_objectness: 0.0325 (0.0460)  loss_rpn_box_reg: 0.0139 (0.0226)  time: 0.1068 (0.1295)  data: 0.0016 (0.0209)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:13,503 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.2438897324517829, segm mAP: 0.24317123623232365
:::MLLOG {"namespace": "", "time_ms": 1592953153503, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.2438897324517829, "SEGM": 0.24317123623232365}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1592953153504, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 4}}
2020-06-23 15:59:15,449 maskrcnn_benchmark.trainer INFO: eta: 1:17:39  iter: 4000  loss: 0.7513 (0.8505)  loss_classifier: 0.2732 (0.3164)  loss_box_reg: 0.1123 (0.1343)  loss_mask: 0.2953 (0.3314)  loss_objectness: 0.0182 (0.0459)  loss_rpn_box_reg: 0.0098 (0.0226)  time: 0.1076 (0.1294)  data: 0.0015 (0.0208)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:17,614 maskrcnn_benchmark.trainer INFO: eta: 1:17:33  iter: 4020  loss: 0.6013 (0.8496)  loss_classifier: 0.2289 (0.3160)  loss_box_reg: 0.0938 (0.1342)  loss_mask: 0.2512 (0.3311)  loss_objectness: 0.0172 (0.0458)  loss_rpn_box_reg: 0.0064 (0.0226)  time: 0.1073 (0.1293)  data: 0.0014 (0.0207)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:19,775 maskrcnn_benchmark.trainer INFO: eta: 1:17:26  iter: 4040  loss: 0.6580 (0.8488)  loss_classifier: 0.2288 (0.3157)  loss_box_reg: 0.1063 (0.1340)  loss_mask: 0.2694 (0.3307)  loss_objectness: 0.0287 (0.0458)  loss_rpn_box_reg: 0.0119 (0.0225)  time: 0.1079 (0.1292)  data: 0.0015 (0.0206)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:21,937 maskrcnn_benchmark.trainer INFO: eta: 1:17:20  iter: 4060  loss: 0.7890 (0.8484)  loss_classifier: 0.2600 (0.3155)  loss_box_reg: 0.1279 (0.1340)  loss_mask: 0.3062 (0.3306)  loss_objectness: 0.0377 (0.0457)  loss_rpn_box_reg: 0.0123 (0.0226)  time: 0.1071 (0.1291)  data: 0.0015 (0.0205)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:24,088 maskrcnn_benchmark.trainer INFO: eta: 1:17:14  iter: 4080  loss: 0.5971 (0.8476)  loss_classifier: 0.2462 (0.3151)  loss_box_reg: 0.0919 (0.1339)  loss_mask: 0.2640 (0.3303)  loss_objectness: 0.0210 (0.0457)  loss_rpn_box_reg: 0.0088 (0.0226)  time: 0.1068 (0.1290)  data: 0.0014 (0.0204)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:26,229 maskrcnn_benchmark.trainer INFO: eta: 1:17:07  iter: 4100  loss: 0.6837 (0.8468)  loss_classifier: 0.2585 (0.3148)  loss_box_reg: 0.1058 (0.1338)  loss_mask: 0.2713 (0.3300)  loss_objectness: 0.0265 (0.0456)  loss_rpn_box_reg: 0.0091 (0.0226)  time: 0.1063 (0.1289)  data: 0.0015 (0.0203)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:28,394 maskrcnn_benchmark.trainer INFO: eta: 1:17:01  iter: 4120  loss: 0.6348 (0.8461)  loss_classifier: 0.2298 (0.3145)  loss_box_reg: 0.1080 (0.1337)  loss_mask: 0.2600 (0.3297)  loss_objectness: 0.0207 (0.0455)  loss_rpn_box_reg: 0.0103 (0.0226)  time: 0.1080 (0.1288)  data: 0.0015 (0.0202)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:30,544 maskrcnn_benchmark.trainer INFO: eta: 1:16:55  iter: 4140  loss: 0.7015 (0.8453)  loss_classifier: 0.2339 (0.3142)  loss_box_reg: 0.0983 (0.1336)  loss_mask: 0.2822 (0.3295)  loss_objectness: 0.0206 (0.0455)  loss_rpn_box_reg: 0.0093 (0.0225)  time: 0.1071 (0.1287)  data: 0.0015 (0.0201)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:32,688 maskrcnn_benchmark.trainer INFO: eta: 1:16:49  iter: 4160  loss: 0.7246 (0.8448)  loss_classifier: 0.2556 (0.3140)  loss_box_reg: 0.0995 (0.1335)  loss_mask: 0.2859 (0.3293)  loss_objectness: 0.0183 (0.0454)  loss_rpn_box_reg: 0.0110 (0.0226)  time: 0.1074 (0.1286)  data: 0.0014 (0.0200)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:34,822 maskrcnn_benchmark.trainer INFO: eta: 1:16:42  iter: 4180  loss: 0.7019 (0.8441)  loss_classifier: 0.2457 (0.3136)  loss_box_reg: 0.1028 (0.1334)  loss_mask: 0.2800 (0.3291)  loss_objectness: 0.0300 (0.0454)  loss_rpn_box_reg: 0.0097 (0.0226)  time: 0.1067 (0.1285)  data: 0.0014 (0.0199)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:36,964 maskrcnn_benchmark.trainer INFO: eta: 1:16:36  iter: 4200  loss: 0.7265 (0.8439)  loss_classifier: 0.2745 (0.3135)  loss_box_reg: 0.1224 (0.1334)  loss_mask: 0.2959 (0.3290)  loss_objectness: 0.0302 (0.0454)  loss_rpn_box_reg: 0.0104 (0.0226)  time: 0.1064 (0.1284)  data: 0.0015 (0.0198)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:39,104 maskrcnn_benchmark.trainer INFO: eta: 1:16:30  iter: 4220  loss: 0.7930 (0.8435)  loss_classifier: 0.2897 (0.3134)  loss_box_reg: 0.1318 (0.1334)  loss_mask: 0.2863 (0.3288)  loss_objectness: 0.0247 (0.0453)  loss_rpn_box_reg: 0.0115 (0.0226)  time: 0.1064 (0.1283)  data: 0.0014 (0.0198)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:41,251 maskrcnn_benchmark.trainer INFO: eta: 1:16:24  iter: 4240  loss: 0.7556 (0.8431)  loss_classifier: 0.2949 (0.3133)  loss_box_reg: 0.1340 (0.1334)  loss_mask: 0.2928 (0.3285)  loss_objectness: 0.0240 (0.0453)  loss_rpn_box_reg: 0.0121 (0.0226)  time: 0.1070 (0.1282)  data: 0.0014 (0.0197)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:43,394 maskrcnn_benchmark.trainer INFO: eta: 1:16:18  iter: 4260  loss: 0.7671 (0.8430)  loss_classifier: 0.2569 (0.3133)  loss_box_reg: 0.1193 (0.1334)  loss_mask: 0.3093 (0.3284)  loss_objectness: 0.0228 (0.0453)  loss_rpn_box_reg: 0.0176 (0.0226)  time: 0.1066 (0.1281)  data: 0.0014 (0.0196)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:45,558 maskrcnn_benchmark.trainer INFO: eta: 1:16:12  iter: 4280  loss: 0.7267 (0.8425)  loss_classifier: 0.2586 (0.3131)  loss_box_reg: 0.1297 (0.1334)  loss_mask: 0.2673 (0.3282)  loss_objectness: 0.0286 (0.0452)  loss_rpn_box_reg: 0.0108 (0.0226)  time: 0.1078 (0.1280)  data: 0.0015 (0.0195)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:47,709 maskrcnn_benchmark.trainer INFO: eta: 1:16:06  iter: 4300  loss: 0.6358 (0.8418)  loss_classifier: 0.2069 (0.3128)  loss_box_reg: 0.0945 (0.1332)  loss_mask: 0.2801 (0.3280)  loss_objectness: 0.0302 (0.0452)  loss_rpn_box_reg: 0.0151 (0.0226)  time: 0.1072 (0.1279)  data: 0.0014 (0.0194)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:49,854 maskrcnn_benchmark.trainer INFO: eta: 1:16:00  iter: 4320  loss: 0.6899 (0.8413)  loss_classifier: 0.2764 (0.3127)  loss_box_reg: 0.1233 (0.1332)  loss_mask: 0.2689 (0.3277)  loss_objectness: 0.0196 (0.0451)  loss_rpn_box_reg: 0.0104 (0.0226)  time: 0.1062 (0.1278)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:51,989 maskrcnn_benchmark.trainer INFO: eta: 1:15:54  iter: 4340  loss: 0.6122 (0.8405)  loss_classifier: 0.2205 (0.3123)  loss_box_reg: 0.0754 (0.1330)  loss_mask: 0.2616 (0.3275)  loss_objectness: 0.0225 (0.0451)  loss_rpn_box_reg: 0.0080 (0.0226)  time: 0.1064 (0.1277)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:54,141 maskrcnn_benchmark.trainer INFO: eta: 1:15:48  iter: 4360  loss: 0.6591 (0.8397)  loss_classifier: 0.2493 (0.3120)  loss_box_reg: 0.1045 (0.1329)  loss_mask: 0.2672 (0.3272)  loss_objectness: 0.0229 (0.0450)  loss_rpn_box_reg: 0.0099 (0.0225)  time: 0.1071 (0.1276)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:56,278 maskrcnn_benchmark.trainer INFO: eta: 1:15:42  iter: 4380  loss: 0.7250 (0.8394)  loss_classifier: 0.2880 (0.3119)  loss_box_reg: 0.1117 (0.1329)  loss_mask: 0.2764 (0.3270)  loss_objectness: 0.0272 (0.0450)  loss_rpn_box_reg: 0.0103 (0.0225)  time: 0.1065 (0.1275)  data: 0.0015 (0.0191)  lr: 0.160000  max mem: 5045
2020-06-23 15:59:58,412 maskrcnn_benchmark.trainer INFO: eta: 1:15:36  iter: 4400  loss: 0.6299 (0.8387)  loss_classifier: 0.2253 (0.3116)  loss_box_reg: 0.0970 (0.1328)  loss_mask: 0.2717 (0.3268)  loss_objectness: 0.0167 (0.0450)  loss_rpn_box_reg: 0.0067 (0.0225)  time: 0.1063 (0.1274)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5045
2020-06-23 16:00:00,562 maskrcnn_benchmark.trainer INFO: eta: 1:15:30  iter: 4420  loss: 0.7254 (0.8382)  loss_classifier: 0.2458 (0.3114)  loss_box_reg: 0.1181 (0.1327)  loss_mask: 0.2617 (0.3266)  loss_objectness: 0.0192 (0.0450)  loss_rpn_box_reg: 0.0081 (0.0225)  time: 0.1074 (0.1273)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5045
2020-06-23 16:00:02,721 maskrcnn_benchmark.trainer INFO: eta: 1:15:25  iter: 4440  loss: 0.7150 (0.8378)  loss_classifier: 0.2969 (0.3112)  loss_box_reg: 0.1267 (0.1327)  loss_mask: 0.2987 (0.3265)  loss_objectness: 0.0224 (0.0449)  loss_rpn_box_reg: 0.0097 (0.0225)  time: 0.1074 (0.1273)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5045
2020-06-23 16:00:04,874 maskrcnn_benchmark.trainer INFO: eta: 1:15:19  iter: 4460  loss: 0.7651 (0.8373)  loss_classifier: 0.2461 (0.3110)  loss_box_reg: 0.1162 (0.1326)  loss_mask: 0.2872 (0.3263)  loss_objectness: 0.0249 (0.0449)  loss_rpn_box_reg: 0.0093 (0.0225)  time: 0.1075 (0.1272)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5045
2020-06-23 16:00:07,051 maskrcnn_benchmark.trainer INFO: eta: 1:15:14  iter: 4480  loss: 0.7671 (0.8370)  loss_classifier: 0.2720 (0.3108)  loss_box_reg: 0.1181 (0.1326)  loss_mask: 0.2865 (0.3262)  loss_objectness: 0.0298 (0.0449)  loss_rpn_box_reg: 0.0114 (0.0225)  time: 0.1079 (0.1271)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5045
2020-06-23 16:00:09,194 maskrcnn_benchmark.trainer INFO: eta: 1:15:08  iter: 4500  loss: 0.6556 (0.8362)  loss_classifier: 0.2381 (0.3106)  loss_box_reg: 0.1024 (0.1325)  loss_mask: 0.2729 (0.3260)  loss_objectness: 0.0147 (0.0448)  loss_rpn_box_reg: 0.0071 (0.0224)  time: 0.1066 (0.1270)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5045
2020-06-23 16:00:11,332 maskrcnn_benchmark.trainer INFO: eta: 1:15:02  iter: 4520  loss: 0.6055 (0.8355)  loss_classifier: 0.2151 (0.3102)  loss_box_reg: 0.0820 (0.1324)  loss_mask: 0.2747 (0.3258)  loss_objectness: 0.0184 (0.0447)  loss_rpn_box_reg: 0.0105 (0.0224)  time: 0.1060 (0.1269)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5045
2020-06-23 16:00:13,461 maskrcnn_benchmark.trainer INFO: eta: 1:14:56  iter: 4540  loss: 0.6808 (0.8348)  loss_classifier: 0.2134 (0.3099)  loss_box_reg: 0.0932 (0.1322)  loss_mask: 0.2821 (0.3257)  loss_objectness: 0.0208 (0.0446)  loss_rpn_box_reg: 0.0095 (0.0224)  time: 0.1065 (0.1268)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5045
2020-06-23 16:00:15,601 maskrcnn_benchmark.trainer INFO: eta: 1:14:51  iter: 4560  loss: 0.7324 (0.8344)  loss_classifier: 0.2504 (0.3097)  loss_box_reg: 0.1289 (0.1322)  loss_mask: 0.2872 (0.3256)  loss_objectness: 0.0239 (0.0445)  loss_rpn_box_reg: 0.0060 (0.0223)  time: 0.1062 (0.1267)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5045
2020-06-23 16:00:17,748 maskrcnn_benchmark.trainer INFO: eta: 1:14:45  iter: 4580  loss: 0.6607 (0.8337)  loss_classifier: 0.2326 (0.3095)  loss_box_reg: 0.0946 (0.1321)  loss_mask: 0.2670 (0.3254)  loss_objectness: 0.0243 (0.0444)  loss_rpn_box_reg: 0.0088 (0.0223)  time: 0.1064 (0.1266)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5045
:::MLLOG {"namespace": "", "time_ms": 1592953218283, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1592953218283, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1592953218283, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 5}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 16:00:18,522 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.30s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
2020-06-23 16:00:18,829 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:53,  1.47it/s]
  4%|         | 3/79 [00:00<00:37,  2.02it/s]
  8%|         | 6/79 [00:00<00:26,  2.78it/s]
 11%|        | 9/79 [00:01<00:18,  3.80it/s]
 15%|        | 12/79 [00:01<00:13,  5.11it/s]
 19%|        | 15/79 [00:01<00:09,  6.72it/s]
 23%|       | 18/79 [00:01<00:07,  8.61it/s]
 27%|       | 21/79 [00:01<00:05, 10.73it/s]
 30%|       | 24/79 [00:01<00:04, 12.98it/s]
 34%|      | 27/79 [00:01<00:03, 15.24it/s]
 38%|      | 30/79 [00:01<00:02, 17.21it/s]
 42%|     | 33/79 [00:01<00:02, 19.07it/s]
 46%|     | 36/79 [00:02<00:02, 20.65it/s]
 49%|     | 39/79 [00:02<00:01, 21.44it/s]
 53%|    | 42/79 [00:02<00:01, 22.50it/s]
 57%|    | 45/79 [00:02<00:01, 23.26it/s]
 61%|    | 48/79 [00:02<00:01, 23.65it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:58,  1.32it/s]
  5%|         | 4/79 [00:00<00:40,  1.85it/s]
  9%|         | 7/79 [00:00<00:28,  2.56it/s]
 13%|        | 10/79 [00:01<00:19,  3.51it/s]
 16%|        | 13/79 [00:01<00:13,  4.75it/s]
 20%|        | 16/79 [00:01<00:10,  6.30it/s]
 24%|       | 19/79 [00:01<00:07,  8.15it/s]
 28%|       | 22/79 [00:01<00:05, 10.28it/s]
 32%|      | 25/79 [00:01<00:04, 12.57it/s]
 35%|      | 28/79 [00:01<00:03, 14.95it/s]
 39%|      | 31/79 [00:01<00:02, 17.00it/s]
 43%|     | 34/79 [00:02<00:02, 18.93it/s]
 47%|     | 37/79 [00:02<00:02, 20.55it/s]
 51%|     | 40/79 [00:02<00:01, 21.97it/s]
 54%|    | 43/79 [00:02<00:01, 22.99it/s]
 58%|    | 46/79 [00:02<00:01, 23.68it/s]
 62%|   | 49/79 [00:02<00:01, 24.30it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.28it/s]
  5%|         | 4/79 [00:00<00:41,  1.79it/s]
  9%|         | 7/79 [00:01<00:28,  2.49it/s]
 13%|        | 10/79 [00:01<00:20,  3.41it/s]
 16%|        | 13/79 [00:01<00:14,  4.62it/s]
 20%|        | 16/79 [00:01<00:10,  6.14it/s]
 24%|       | 19/79 [00:01<00:07,  7.93it/s]
 28%|       | 22/79 [00:01<00:05, 10.07it/s]
 32%|      | 25/79 [00:01<00:04, 12.39it/s]
 35%|      | 28/79 [00:01<00:03, 14.66it/s]
 39%|      | 31/79 [00:01<00:02, 16.94it/s]
 43%|     | 34/79 [00:02<00:02, 18.86it/s]
 47%|     | 37/79 [00:02<00:02, 20.68it/s]
 51%|     | 40/79 [00:02<00:01, 21.97it/s]
 54%|    | 43/79 [00:02<00:01, 23.33it/s]
 58%|    | 46/79 [00:02<00:01, 24.03it/s]
 62%|   | 49/79 [00:02<00:01, 24.46it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.24it/s]
  4%|         | 3/79 [00:00<00:44,  1.72it/s]
  8%|         | 6/79 [00:01<00:30,  2.39it/s]
 11%|        | 9/79 [00:01<00:21,  3.29it/s]
 15%|        | 12/79 [00:01<00:15,  4.44it/s]
 19%|        | 15/79 [00:01<00:10,  5.90it/s]
 23%|       | 18/79 [00:01<00:07,  7.71it/s]
 27%|       | 21/79 [00:01<00:05,  9.68it/s]
 30%|       | 24/79 [00:01<00:04, 11.96it/s]
 34%|      | 27/79 [00:01<00:03, 14.29it/s]
 38%|      | 30/79 [00:01<00:02, 16.53it/s]
 42%|     | 33/79 [00:02<00:02, 18.62it/s]
 46%|     | 36/79 [00:02<00:02, 20.39it/s]
 49%|     | 39/79 [00:02<00:01, 21.88it/s]
 53%|    | 42/79 [00:02<00:01, 22.92it/s]
 57%|    | 45/79 [00:02<00:01, 23.85it/s]
 61%|    | 48/79 [00:02<00:01, 24.66it/s]
 65%|   | 51/79 [00:02<00:01, 25.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.42it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.64it/s]
 28%|       | 22/79 [00:01<00:05,  9.70it/s]
 32%|      | 25/79 [00:01<00:04, 11.91it/s]
 35%|      | 28/79 [00:01<00:03, 14.25it/s]
 39%|      | 31/79 [00:01<00:02, 16.49it/s]
 43%|     | 34/79 [00:02<00:02, 18.62it/s]
 47%|     | 37/79 [00:02<00:02, 20.31it/s]
 51%|     | 40/79 [00:02<00:01, 21.71it/s]
 54%|    | 43/79 [00:02<00:01, 23.11it/s]
 58%|    | 46/79 [00:02<00:01, 24.01it/s]
 62%|   | 49/79 [00:02<00:01, 24.36it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:30,  2.40it/s]
 13%|        | 10/79 [00:01<00:20,  3.30it/s]
 16%|        | 13/79 [00:01<00:14,  4.46it/s]
 20%|        | 16/79 [00:01<00:10,  5.94it/s]
 24%|       | 19/79 [00:01<00:07,  7.74it/s]
 28%|       | 22/79 [00:01<00:05,  9.80it/s]
 32%|      | 25/79 [00:01<00:04, 12.05it/s]
 35%|      | 28/79 [00:01<00:03, 14.37it/s]
 39%|      | 31/79 [00:01<00:02, 16.61it/s]
 43%|     | 34/79 [00:02<00:02, 18.73it/s]
 47%|     | 37/79 [00:02<00:02, 20.37it/s]
 51%|     | 40/79 [00:02<00:01, 21.90it/s]
 54%|    | 43/79 [00:02<00:01, 23.13it/s]
 58%|    | 46/79 [00:02<00:01, 24.10it/s]
 62%|   | 49/79 [00:02<00:01, 24.69it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.54it/s]
 28%|       | 22/79 [00:01<00:05,  9.56it/s]
 32%|      | 25/79 [00:01<00:04, 11.80it/s]
 35%|      | 28/79 [00:01<00:03, 14.13it/s]
 39%|      | 31/79 [00:02<00:02, 16.40it/s]
 43%|     | 34/79 [00:02<00:02, 18.41it/s]
 47%|     | 37/79 [00:02<00:02, 20.25it/s]
 51%|     | 40/79 [00:02<00:01, 21.66it/s]
 54%|    | 43/79 [00:02<00:01, 22.79it/s]
 58%|    | 46/79 [00:02<00:01, 23.66it/s]
 62%|   | 49/79 [00:02<00:01, 24.10it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  4%|         | 3/79 [00:00<00:46,  1.65it/s]
  8%|         | 6/79 [00:01<00:31,  2.29it/s]
 11%|        | 9/79 [00:01<00:22,  3.16it/s]
 15%|        | 12/79 [00:01<00:15,  4.29it/s]
 19%|        | 15/79 [00:01<00:11,  5.74it/s]
 23%|       | 18/79 [00:01<00:08,  7.47it/s]
 27%|       | 21/79 [00:01<00:06,  9.50it/s]
 30%|       | 24/79 [00:01<00:04, 11.74it/s]
 34%|      | 27/79 [00:01<00:03, 14.04it/s]
 38%|      | 30/79 [00:01<00:03, 16.28it/s]
 42%|     | 33/79 [00:02<00:02, 18.18it/s]
 46%|     | 36/79 [00:02<00:02, 20.07it/s]
 49%|     | 39/79 [00:02<00:01, 21.31it/s]
 53%|    | 42/79 [00:02<00:01, 22.40it/s]
 57%|    | 45/79 [00:02<00:01, 23.24it/s]
 61%|    | 48/79 [00:02<00:01, 23.98it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.43it/s]
 13%|        | 10/79 [00:01<00:20,  3.34it/s]
 16%|        | 13/79 [00:01<00:14,  4.50it/s]
 20%|        | 16/79 [00:01<00:10,  5.98it/s]
 24%|       | 19/79 [00:01<00:07,  7.76it/s]
 28%|       | 22/79 [00:01<00:05,  9.82it/s]
 32%|      | 25/79 [00:01<00:04, 12.00it/s]
 35%|      | 28/79 [00:01<00:03, 14.30it/s]
 39%|      | 31/79 [00:01<00:02, 16.47it/s]
 43%|     | 34/79 [00:02<00:02, 18.33it/s]
 47%|     | 37/79 [00:02<00:02, 19.84it/s]
 51%|     | 40/79 [00:02<00:01, 21.29it/s]
 54%|    | 43/79 [00:02<00:01, 22.39it/s]
 58%|    | 46/79 [00:02<00:01, 23.22it/s]
 62%|   | 49/79 [00:02<00:01, 23.86it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.56it/s]
 28%|       | 22/79 [00:01<00:05,  9.56it/s]
 32%|      | 25/79 [00:01<00:04, 11.79it/s]
 35%|      | 28/79 [00:01<00:03, 14.07it/s]
 39%|      | 31/79 [00:02<00:02, 16.32it/s]
 43%|     | 34/79 [00:02<00:02, 18.45it/s]
 47%|     | 37/79 [00:02<00:02, 20.07it/s]
 51%|     | 40/79 [00:02<00:01, 21.57it/s]
 54%|    | 43/79 [00:02<00:01, 22.66it/s]
 58%|    | 46/79 [00:02<00:01, 23.81it/s]
 62%|   | 49/79 [00:02<00:01, 23.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.74it/s]
  9%|         | 7/79 [00:01<00:29,  2.41it/s]
 13%|        | 10/79 [00:01<00:20,  3.31it/s]
 16%|        | 13/79 [00:01<00:14,  4.48it/s]
 20%|        | 16/79 [00:01<00:10,  5.96it/s]
 24%|       | 19/79 [00:01<00:07,  7.70it/s]
 28%|       | 22/79 [00:01<00:05,  9.75it/s]
 32%|      | 25/79 [00:01<00:04, 11.70it/s]
 35%|      | 28/79 [00:01<00:03, 14.03it/s]
 39%|      | 31/79 [00:02<00:02, 16.15it/s]
 43%|     | 34/79 [00:02<00:02, 18.19it/s]
 47%|     | 37/79 [00:02<00:02, 19.99it/s]
 51%|     | 40/79 [00:02<00:01, 21.31it/s]
 54%|    | 43/79 [00:02<00:01, 22.55it/s]
 58%|    | 46/79 [00:02<00:01, 23.37it/s]
 62%|   | 49/79 [00:02<00:01, 24.23it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.32it/s]
 32%|      | 25/79 [00:01<00:04, 11.51it/s]
 35%|      | 28/79 [00:01<00:03, 13.88it/s]
 39%|      | 31/79 [00:02<00:02, 16.25it/s]
 43%|     | 34/79 [00:02<00:02, 18.30it/s]
 47%|     | 37/79 [00:02<00:02, 20.21it/s]
 51%|     | 40/79 [00:02<00:01, 21.59it/s]
 54%|    | 43/79 [00:02<00:01, 22.72it/s]
 58%|    | 46/79 [00:02<00:01, 23.69it/s]
 62%|   | 49/79 [00:02<00:01, 24.31it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.27it/s]
  5%|         | 4/79 [00:00<00:42,  1.77it/s]
  9%|         | 7/79 [00:01<00:29,  2.45it/s]
 13%|        | 10/79 [00:01<00:20,  3.36it/s]
 16%|        | 13/79 [00:01<00:14,  4.53it/s]
 20%|        | 16/79 [00:01<00:10,  6.02it/s]
 24%|       | 19/79 [00:01<00:07,  7.80it/s]
 28%|       | 22/79 [00:01<00:05,  9.83it/s]
 32%|      | 25/79 [00:01<00:04, 12.06it/s]
 35%|      | 28/79 [00:01<00:03, 14.25it/s]
 39%|      | 31/79 [00:01<00:02, 16.46it/s]
 43%|     | 34/79 [00:02<00:02, 18.24it/s]
 47%|     | 37/79 [00:02<00:02, 19.79it/s]
 51%|     | 40/79 [00:02<00:01, 21.21it/s]
 54%|    | 43/79 [00:02<00:01, 22.18it/s]
 58%|    | 46/79 [00:02<00:01, 23.15it/s]
 62%|   | 49/79 [00:02<00:01, 23.67it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:43,  1.74it/s]
  9%|         | 7/79 [00:01<00:29,  2.41it/s]
 13%|        | 10/79 [00:01<00:20,  3.31it/s]
 16%|        | 13/79 [00:01<00:14,  4.47it/s]
 20%|        | 16/79 [00:01<00:10,  5.95it/s]
 24%|       | 19/79 [00:01<00:07,  7.72it/s]
 28%|       | 22/79 [00:01<00:05,  9.73it/s]
 32%|      | 25/79 [00:01<00:04, 11.89it/s]
 35%|      | 28/79 [00:01<00:03, 14.19it/s]
 39%|      | 31/79 [00:02<00:02, 16.23it/s]
 43%|     | 34/79 [00:02<00:02, 18.12it/s]
 47%|     | 37/79 [00:02<00:02, 19.57it/s]
 51%|     | 40/79 [00:02<00:01, 20.98it/s]
 54%|    | 43/79 [00:02<00:01, 21.87it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.57it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.36it/s]
 28%|       | 22/79 [00:01<00:06,  9.34it/s]
 32%|      | 25/79 [00:01<00:04, 11.55it/s]
 35%|      | 28/79 [00:01<00:03, 13.88it/s]
 39%|      | 31/79 [00:02<00:02, 16.20it/s]
 43%|     | 34/79 [00:02<00:02, 18.28it/s]
 47%|     | 37/79 [00:02<00:02, 20.06it/s]
 51%|     | 40/79 [00:02<00:01, 21.47it/s]
 54%|    | 43/79 [00:02<00:01, 22.56it/s]
 58%|    | 46/79 [00:02<00:01, 23.26it/s]
 62%|   | 49/79 [00:02<00:01, 24.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:00<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.23it/s]
 28%|       | 22/79 [00:01<00:06,  9.24it/s]
 32%|      | 25/79 [00:01<00:04, 11.42it/s]
 35%|      | 28/79 [00:01<00:03, 13.73it/s]
 39%|      | 31/79 [00:02<00:02, 16.08it/s]
 43%|     | 34/79 [00:02<00:02, 18.14it/s]
 47%|     | 37/79 [00:02<00:02, 20.01it/s]
 51%|     | 40/79 [00:02<00:01, 21.46it/s]
 54%|    | 43/79 [00:02<00:01, 22.67it/s]
 58%|    | 46/79 [00:02<00:01, 23.27it/s]
 62%|   | 49/79 [00:02<00:01, 23.81it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.77it/s]
 24%|       | 19/79 [00:01<00:08,  7.46it/s]
 28%|       | 22/79 [00:01<00:06,  9.41it/s]
 32%|      | 25/79 [00:01<00:04, 11.62it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:02, 16.13it/s]
 43%|     | 34/79 [00:02<00:02, 18.09it/s]
 47%|     | 37/79 [00:02<00:02, 19.70it/s]
 51%|     | 40/79 [00:02<00:01, 21.04it/s]
 54%|    | 43/79 [00:02<00:01, 21.97it/s]
 58%|    | 46/79 [00:02<00:01, 22.53it/s]
 62%|   | 49/79 [00:02<00:01, 23.39it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.41it/s]
 35%|      | 28/79 [00:01<00:03, 13.76it/s]
 39%|      | 31/79 [00:02<00:03, 15.99it/s]
 43%|     | 34/79 [00:02<00:02, 18.05it/s]
 47%|     | 37/79 [00:02<00:02, 19.84it/s]
 51%|     | 40/79 [00:02<00:01, 21.41it/s]
 54%|    | 43/79 [00:02<00:01, 22.65it/s]
 58%|    | 46/79 [00:02<00:01, 23.47it/s]
 62%|   | 49/79 [00:02<00:01, 24.25it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.60it/s]
 32%|      | 25/79 [00:01<00:04, 11.72it/s]
 35%|      | 28/79 [00:01<00:03, 13.91it/s]
 39%|      | 31/79 [00:02<00:02, 16.16it/s]
 43%|     | 34/79 [00:02<00:02, 18.05it/s]
 47%|     | 37/79 [00:02<00:02, 19.81it/s]
 51%|     | 40/79 [00:02<00:01, 21.11it/s]
 54%|    | 43/79 [00:02<00:01, 22.12it/s]
 58%|    | 46/79 [00:02<00:01, 22.91it/s]
 62%|   | 49/79 [00:02<00:01, 23.28it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  4%|         | 3/79 [00:00<00:45,  1.67it/s]
  8%|         | 6/79 [00:01<00:31,  2.31it/s]
 11%|        | 9/79 [00:01<00:22,  3.17it/s]
 15%|        | 12/79 [00:01<00:15,  4.30it/s]
 19%|        | 15/79 [00:01<00:11,  5.72it/s]
 23%|       | 18/79 [00:01<00:08,  7.42it/s]
 27%|       | 21/79 [00:01<00:06,  9.40it/s]
 30%|       | 24/79 [00:01<00:04, 11.57it/s]
 34%|      | 27/79 [00:01<00:03, 13.71it/s]
 38%|      | 30/79 [00:02<00:03, 15.84it/s]
 42%|     | 33/79 [00:02<00:02, 17.69it/s]
 46%|     | 36/79 [00:02<00:02, 19.40it/s]
 49%|     | 39/79 [00:02<00:01, 20.43it/s]
 53%|    | 42/79 [00:02<00:01, 21.45it/s]
 57%|    | 45/79 [00:02<00:01, 21.94it/s]
 61%|    | 48/79 [00:02<00:01, 22.56it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  4%|         | 3/79 [00:00<00:45,  1.67it/s]
  8%|         | 6/79 [00:01<00:31,  2.32it/s]
 11%|        | 9/79 [00:01<00:21,  3.18it/s]
 15%|        | 12/79 [00:01<00:15,  4.31it/s]
 19%|        | 15/79 [00:01<00:11,  5.74it/s]
 23%|       | 18/79 [00:01<00:08,  7.47it/s]
 27%|       | 21/79 [00:01<00:06,  9.47it/s]
 30%|       | 24/79 [00:01<00:04, 11.68it/s]
 34%|      | 27/79 [00:01<00:03, 13.78it/s]
 38%|      | 30/79 [00:02<00:03, 15.98it/s]
 42%|     | 33/79 [00:02<00:02, 17.72it/s]
 46%|     | 36/79 [00:02<00:02, 19.20it/s]
 49%|     | 39/79 [00:02<00:01, 20.51it/s]
 53%|    | 42/79 [00:02<00:01, 21.66it/s]
 57%|    | 45/79 [00:02<00:01, 22.38it/s]
 61%|    | 48/79 [00:02<00:01, 23.10it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.52it/s]
 39%|      | 31/79 [00:02<00:03, 15.81it/s]
 43%|     | 34/79 [00:02<00:02, 17.80it/s]
 47%|     | 37/79 [00:02<00:02, 19.68it/s]
 51%|     | 40/79 [00:02<00:01, 20.99it/s]
 54%|    | 43/79 [00:02<00:01, 22.19it/s]
 58%|    | 46/79 [00:02<00:01, 22.96it/s]
 62%|   | 49/79 [00:02<00:01, 23.69it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.78it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:05,  9.52it/s]
 32%|      | 25/79 [00:01<00:04, 11.70it/s]
 35%|      | 28/79 [00:01<00:03, 13.90it/s]
 39%|      | 31/79 [00:02<00:03, 15.99it/s]
 43%|     | 34/79 [00:02<00:02, 17.90it/s]
 47%|     | 37/79 [00:02<00:02, 19.25it/s]
 51%|     | 40/79 [00:02<00:01, 20.58it/s]
 54%|    | 43/79 [00:02<00:01, 21.58it/s]
 58%|    | 46/79 [00:02<00:01, 22.43it/s]
 62%|   | 49/79 [00:02<00:01, 23.01it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:16,  3.88it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.85it/s]
 28%|       | 22/79 [00:01<00:06,  8.78it/s]
 32%|      | 25/79 [00:01<00:04, 10.98it/s]
 35%|      | 28/79 [00:01<00:03, 13.20it/s]
 39%|      | 31/79 [00:02<00:03, 15.37it/s]
 43%|     | 34/79 [00:02<00:02, 17.43it/s]
 47%|     | 37/79 [00:02<00:02, 19.39it/s]
 51%|     | 40/79 [00:02<00:01, 20.87it/s]
 54%|    | 43/79 [00:02<00:01, 22.11it/s]
 58%|    | 46/79 [00:02<00:01, 22.85it/s]
 62%|   | 49/79 [00:02<00:01, 23.44it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.09it/s]
 28%|       | 22/79 [00:01<00:06,  9.07it/s]
 32%|      | 25/79 [00:01<00:04, 11.21it/s]
 35%|      | 28/79 [00:01<00:03, 13.48it/s]
 39%|      | 31/79 [00:02<00:03, 15.62it/s]
 43%|     | 34/79 [00:02<00:02, 17.65it/s]
 47%|     | 37/79 [00:02<00:02, 19.31it/s]
 51%|     | 40/79 [00:02<00:01, 20.80it/s]
 54%|    | 43/79 [00:02<00:01, 21.93it/s]
 58%|    | 46/79 [00:02<00:01, 22.83it/s]
 62%|   | 49/79 [00:02<00:01, 23.35it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.37it/s]
 32%|      | 25/79 [00:01<00:04, 11.50it/s]
 35%|      | 28/79 [00:01<00:03, 13.69it/s]
 39%|      | 31/79 [00:02<00:03, 15.75it/s]
 43%|     | 34/79 [00:02<00:02, 17.56it/s]
 47%|     | 37/79 [00:02<00:02, 19.25it/s]
 51%|     | 40/79 [00:02<00:01, 20.61it/s]
 54%|    | 43/79 [00:02<00:01, 21.62it/s]
 58%|    | 46/79 [00:02<00:01, 22.31it/s]
 62%|   | 49/79 [00:02<00:01, 22.97it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.16it/s]
 35%|      | 28/79 [00:01<00:03, 13.23it/s]
 39%|      | 31/79 [00:02<00:03, 15.35it/s]
 43%|     | 34/79 [00:02<00:02, 17.43it/s]
 47%|     | 37/79 [00:02<00:02, 19.26it/s]
 51%|     | 40/79 [00:02<00:01, 20.59it/s]
 54%|    | 43/79 [00:02<00:01, 21.82it/s]
 58%|    | 46/79 [00:02<00:01, 22.90it/s]
 62%|   | 49/79 [00:02<00:01, 23.75it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.53it/s]
 35%|      | 28/79 [00:01<00:03, 13.69it/s]
 39%|      | 31/79 [00:02<00:03, 15.84it/s]
 43%|     | 34/79 [00:02<00:02, 17.70it/s]
 47%|     | 37/79 [00:02<00:02, 19.34it/s]
 51%|     | 40/79 [00:02<00:01, 20.56it/s]
 54%|    | 43/79 [00:02<00:01, 21.69it/s]
 58%|    | 46/79 [00:02<00:01, 22.43it/s]
 62%|   | 49/79 [00:02<00:01, 23.26it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  6.98it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.05it/s]
 35%|      | 28/79 [00:02<00:03, 13.22it/s]
 39%|      | 31/79 [00:02<00:03, 15.38it/s]
 43%|     | 34/79 [00:02<00:02, 17.54it/s]
 47%|     | 37/79 [00:02<00:02, 19.28it/s]
 51%|     | 40/79 [00:02<00:01, 20.50it/s]
 54%|    | 43/79 [00:02<00:01, 21.74it/s]
 58%|    | 46/79 [00:02<00:01, 22.85it/s]
 62%|   | 49/79 [00:02<00:01, 23.50it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.00it/s]
 13%|        | 10/79 [00:01<00:24,  2.77it/s]
 16%|        | 13/79 [00:01<00:17,  3.78it/s]
 20%|        | 16/79 [00:01<00:12,  5.07it/s]
 24%|       | 19/79 [00:01<00:08,  6.68it/s]
 28%|       | 22/79 [00:01<00:06,  8.58it/s]
 32%|      | 25/79 [00:01<00:05, 10.72it/s]
 35%|      | 28/79 [00:02<00:03, 12.99it/s]
 39%|      | 31/79 [00:02<00:03, 15.21it/s]
 43%|     | 34/79 [00:02<00:02, 17.15it/s]
 47%|     | 37/79 [00:02<00:02, 18.99it/s]
 51%|     | 40/79 [00:02<00:01, 20.47it/s]
 54%|    | 43/79 [00:02<00:01, 21.50it/s]
 58%|    | 46/79 [00:02<00:01, 22.45it/s]
 62%|   | 49/79 [00:02<00:01, 23.40it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.45it/s]
 24%|       | 19/79 [00:01<00:08,  7.13it/s]
 28%|       | 22/79 [00:01<00:06,  9.04it/s]
 32%|      | 25/79 [00:01<00:04, 11.22it/s]
 35%|      | 28/79 [00:01<00:03, 13.35it/s]
 39%|      | 31/79 [00:02<00:03, 15.40it/s]
 43%|     | 34/79 [00:02<00:02, 17.36it/s]
 47%|     | 37/79 [00:02<00:02, 19.07it/s]
 51%|     | 40/79 [00:02<00:01, 20.29it/s]
 54%|    | 43/79 [00:02<00:01, 21.23it/s]
 58%|    | 46/79 [00:02<00:01, 22.20it/s]
 62%|   | 49/79 [00:02<00:01, 22.69it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.00it/s]
 13%|        | 10/79 [00:01<00:24,  2.77it/s]
 16%|        | 13/79 [00:01<00:17,  3.77it/s]
 20%|        | 16/79 [00:01<00:12,  5.06it/s]
 24%|       | 19/79 [00:01<00:09,  6.64it/s]
 28%|       | 22/79 [00:01<00:06,  8.55it/s]
 32%|      | 25/79 [00:01<00:05, 10.63it/s]
 35%|      | 28/79 [00:02<00:03, 12.88it/s]
 39%|      | 31/79 [00:02<00:03, 15.01it/s]
 43%|     | 34/79 [00:02<00:02, 17.04it/s]
 47%|     | 37/79 [00:02<00:02, 18.73it/s]
 51%|     | 40/79 [00:02<00:01, 20.33it/s]
 54%|    | 43/79 [00:02<00:01, 21.44it/s]
 58%|    | 46/79 [00:02<00:01, 22.38it/s]
 62%|   | 49/79 [00:02<00:01, 23.19it/s]
 66%|   | 52/79 [00:03<00:01, 24.97it/s]
 70%|   | 55/79 [00:02<00:00, 25.33it/s]
 73%|  | 58/79 [00:02<00:00, 25.65it/s]
 77%|  | 61/79 [00:03<00:00, 25.81it/s]
 81%|  | 64/79 [00:03<00:00, 25.72it/s]
 85%| | 67/79 [00:03<00:00, 25.86it/s]
 89%| | 70/79 [00:03<00:00, 25.88it/s]
 92%|| 73/79 [00:03<00:00, 26.05it/s]
 96%|| 76/79 [00:03<00:00, 26.51it/s]
100%|| 79/79 [00:03<00:00, 27.25it/s]
, 24.66it/s]
 70%|   | 55/79 [00:02<00:00, 24.88it/s]
 73%|  | 58/79 [00:02<00:00, 25.28it/s]
 77%|  | 61/79 [00:03<00:00, 25.53it/s]
 81%|  | 64/79 [00:03<00:00, 25.64it/s]
 85%| | 67/79 [00:03<00:00, 25.92it/s]
 89%| | 70/79 [00:03<00:00, 25.62it/s]
 92%|| 73/79 [00:03<00:00, 25.93it/s]
 96%|| 76/79 [00:03<00:00, 26.53it/s]
100%|| 79/79 [00:03<00:00, 27.48it/s]
, 25.09it/s]
 70%|   | 55/79 [00:02<00:00, 25.50it/s]
 73%|  | 58/79 [00:03<00:00, 25.47it/s]
 77%|  | 61/79 [00:03<00:00, 25.74it/s]
 81%|  | 64/79 [00:03<00:00, 25.79it/s]
 85%| | 67/79 [00:03<00:00, 26.00it/s]
 89%| | 70/79 [00:03<00:00, 26.03it/s]
 92%|| 73/79 [00:03<00:00, 26.31it/s]
 96%|| 76/79 [00:03<00:00, 26.72it/s]
100%|| 79/79 [00:03<00:00, 27.62it/s]
36it/s]
 68%|   | 54/79 [00:02<00:01, 24.78it/s]
 72%|  | 57/79 [00:02<00:00, 24.98it/s]
 76%|  | 60/79 [00:03<00:00, 24.78it/s]
 80%|  | 63/79 [00:03<00:00, 24.70it/s]
 84%| | 66/79 [00:03<00:00, 24.78it/s]
 87%| | 69/79 [00:03<00:00, 25.01it/s]
 91%| | 72/79 [00:03<00:00, 25.07it/s]
 95%|| 75/79 [00:03<00:00, 25.82it/s]
 99%|| 78/79 [00:03<00:00, 26.42it/s]
100%|| 79/79 [00:03<00:00, 20.36it/s]
, 24.98it/s]
 70%|   | 55/79 [00:02<00:00, 25.39it/s]
 73%|  | 58/79 [00:02<00:00, 25.65it/s]
 77%|  | 61/79 [00:03<00:00, 25.80it/s]
 81%|  | 64/79 [00:03<00:00, 25.38it/s]
 85%| | 67/79 [00:03<00:00, 25.62it/s]
 89%| | 70/79 [00:03<00:00, 25.68it/s]
 92%|| 73/79 [00:03<00:00, 26.07it/s]
 96%|| 76/79 [00:03<00:00, 26.56it/s]
100%|| 79/79 [00:03<00:00, 27.22it/s]
20it/s]
 68%|   | 54/79 [00:02<00:00, 25.52it/s]
 72%|  | 57/79 [00:02<00:00, 25.94it/s]
 76%|  | 60/79 [00:03<00:00, 26.05it/s]
 80%|  | 63/79 [00:03<00:00, 26.01it/s]
 84%| | 66/79 [00:03<00:00, 26.18it/s]
 87%| | 69/79 [00:03<00:00, 25.67it/s]
 91%| | 72/79 [00:03<00:00, 26.01it/s]
 95%|| 75/79 [00:03<00:00, 26.43it/s]
 99%|| 78/79 [00:03<00:00, 26.83it/s]
100%|| 79/79 [00:03<00:00, 20.35it/s]
, 24.30it/s]
 70%|   | 55/79 [00:02<00:00, 24.67it/s]
 73%|  | 58/79 [00:03<00:00, 25.07it/s]
 77%|  | 61/79 [00:03<00:00, 25.16it/s]
 81%|  | 64/79 [00:03<00:00, 25.60it/s]
 85%| | 67/79 [00:03<00:00, 25.63it/s]
 89%| | 70/79 [00:03<00:00, 25.59it/s]
 92%|| 73/79 [00:03<00:00, 26.08it/s]
 96%|| 76/79 [00:03<00:00, 26.75it/s]
100%|| 79/79 [00:03<00:00, 27.48it/s]
, 24.51it/s]
 70%|   | 55/79 [00:02<00:00, 24.80it/s]
 73%|  | 58/79 [00:03<00:00, 25.13it/s]
 77%|  | 61/79 [00:03<00:00, 25.42it/s]
 81%|  | 64/79 [00:03<00:00, 25.54it/s]
 85%| | 67/79 [00:03<00:00, 25.62it/s]
 89%| | 70/79 [00:03<00:00, 25.55it/s]
 92%|| 73/79 [00:03<00:00, 25.92it/s]
 96%|| 76/79 [00:03<00:00, 26.50it/s]
100%|| 79/79 [00:03<00:00, 27.27it/s]
, 24.70it/s]
 70%|   | 55/79 [00:02<00:00, 25.33it/s]
 73%|  | 58/79 [00:03<00:00, 25.52it/s]
 77%|  | 61/79 [00:03<00:00, 25.85it/s]
 81%|  | 64/79 [00:03<00:00, 25.91it/s]
 85%| | 67/79 [00:03<00:00, 25.99it/s]
 89%| | 70/79 [00:03<00:00, 25.76it/s]
 92%|| 73/79 [00:03<00:00, 26.26it/s]
 96%|| 76/79 [00:03<00:00, 26.76it/s]
100%|| 79/79 [00:03<00:00, 27.50it/s]
, 24.93it/s]
 70%|   | 55/79 [00:02<00:00, 24.71it/s]
 73%|  | 58/79 [00:03<00:00, 24.92it/s]
 77%|  | 61/79 [00:03<00:00, 25.24it/s]
 81%|  | 64/79 [00:03<00:00, 25.64it/s]
 85%| | 67/79 [00:03<00:00, 25.75it/s]
 89%| | 70/79 [00:03<00:00, 25.64it/s]
 92%|| 73/79 [00:03<00:00, 25.93it/s]
 96%|| 76/79 [00:03<00:00, 26.85it/s]
100%|| 79/79 [00:03<00:00, 26.94it/s]
32it/s]
 68%|   | 54/79 [00:02<00:01, 24.67it/s]
 72%|  | 57/79 [00:03<00:00, 24.92it/s]
 76%|  | 60/79 [00:03<00:00, 25.18it/s]
 80%|  | 63/79 [00:03<00:00, 25.39it/s]
 84%| | 66/79 [00:03<00:00, 25.31it/s]
 87%| | 69/79 [00:03<00:00, 25.59it/s]
 91%| | 72/79 [00:03<00:00, 25.66it/s]
 95%|| 75/79 [00:03<00:00, 26.41it/s]
 99%|| 78/79 [00:03<00:00, 26.97it/s]
100%|| 79/79 [00:03<00:00, 20.10it/s]
, 24.07it/s]
 70%|   | 55/79 [00:02<00:00, 24.50it/s]
 73%|  | 58/79 [00:03<00:00, 24.72it/s]
 77%|  | 61/79 [00:03<00:00, 25.05it/s]
 81%|  | 64/79 [00:03<00:00, 25.06it/s]
 85%| | 67/79 [00:03<00:00, 25.47it/s]
 89%| | 70/79 [00:03<00:00, 25.58it/s]
 92%|| 73/79 [00:03<00:00, 26.00it/s]
 96%|| 76/79 [00:03<00:00, 26.58it/s]
100%|| 79/79 [00:03<00:00, 27.50it/s]
, 24.60it/s]
 70%|   | 55/79 [00:02<00:00, 25.20it/s]
 73%|  | 58/79 [00:03<00:00, 25.04it/s]
 77%|  | 61/79 [00:03<00:00, 25.07it/s]
 81%|  | 64/79 [00:03<00:00, 25.38it/s]
 85%| | 67/79 [00:03<00:00, 25.21it/s]
 89%| | 70/79 [00:03<00:00, 25.32it/s]
 92%|| 73/79 [00:03<00:00, 25.63it/s]
 96%|| 76/79 [00:03<00:00, 26.13it/s]
100%|| 79/79 [00:03<00:00, 27.02it/s]
, 24.52it/s]
 70%|   | 55/79 [00:02<00:00, 24.57it/s]
 73%|  | 58/79 [00:03<00:00, 25.06it/s]
 77%|  | 61/79 [00:03<00:00, 24.79it/s]
 81%|  | 64/79 [00:03<00:00, 25.26it/s]
 85%| | 67/79 [00:03<00:00, 25.28it/s]
 89%| | 70/79 [00:03<00:00, 25.49it/s]
 92%|| 73/79 [00:03<00:00, 25.71it/s]
 96%|| 76/79 [00:03<00:00, 26.33it/s]
100%|| 79/79 [00:03<00:00, 27.10it/s]
, 23.70it/s]
 70%|   | 55/79 [00:02<00:00, 24.17it/s]
 73%|  | 58/79 [00:03<00:00, 24.35it/s]
 77%|  | 61/79 [00:03<00:00, 24.77it/s]
 81%|  | 64/79 [00:03<00:00, 24.96it/s]
 85%| | 67/79 [00:03<00:00, 24.85it/s]
 89%| | 70/79 [00:03<00:00, 24.88it/s]
 92%|| 73/79 [00:03<00:00, 25.50it/s]
 96%|| 76/79 [00:03<00:00, 26.34it/s]
100%|| 79/79 [00:03<00:00, 19.89it/s]
, 24.64it/s]
 70%|   | 55/79 [00:02<00:00, 24.92it/s]
 73%|  | 58/79 [00:03<00:00, 25.22it/s]
 77%|  | 61/79 [00:03<00:00, 25.39it/s]
 81%|  | 64/79 [00:03<00:00, 25.53it/s]
 85%| | 67/79 [00:03<00:00, 25.44it/s]
 89%| | 70/79 [00:03<00:00, 25.53it/s]
 92%|| 73/79 [00:03<00:00, 25.55it/s]
 96%|| 76/79 [00:03<00:00, 26.25it/s]
100%|| 79/79 [00:03<00:00, 27.00it/s]
, 24.11it/s]
 70%|   | 55/79 [00:02<00:00, 24.56it/s]
 73%|  | 58/79 [00:03<00:00, 24.82it/s]
 77%|  | 61/79 [00:03<00:00, 24.98it/s]
 81%|  | 64/79 [00:03<00:00, 25.00it/s]
 85%| | 67/79 [00:03<00:00, 25.02it/s]
 89%| | 70/79 [00:03<00:00, 25.10it/s]
 92%|| 73/79 [00:03<00:00, 25.60it/s]
 96%|| 76/79 [00:03<00:00, 26.31it/s]
100%|| 79/79 [00:03<00:00, 27.29it/s]
, 23.33it/s]
 70%|   | 55/79 [00:03<00:00, 24.03it/s]
 73%|  | 58/79 [00:03<00:00, 24.06it/s]
 77%|  | 61/79 [00:03<00:00, 24.39it/s]
 81%|  | 64/79 [00:03<00:00, 24.69it/s]
 85%| | 67/79 [00:03<00:00, 24.96it/s]
 89%| | 70/79 [00:03<00:00, 24.87it/s]
 92%|| 73/79 [00:03<00:00, 25.16it/s]
 96%|| 76/79 [00:03<00:00, 25.64it/s]
100%|| 79/79 [00:03<00:00, 26.32it/s]
, 23.77it/s]
 70%|   | 55/79 [00:02<00:00, 24.10it/s]
 73%|  | 58/79 [00:03<00:00, 24.09it/s]
 77%|  | 61/79 [00:03<00:00, 24.09it/s]
 81%|  | 64/79 [00:03<00:00, 24.20it/s]
 85%| | 67/79 [00:03<00:00, 24.54it/s]
 89%| | 70/79 [00:03<00:00, 24.60it/s]
 92%|| 73/79 [00:03<00:00, 24.95it/s]
 96%|| 76/79 [00:03<00:00, 25.61it/s]
100%|| 79/79 [00:03<00:00, 26.44it/s]
, 23.98it/s]
 70%|   | 55/79 [00:03<00:00, 24.46it/s]
 73%|  | 58/79 [00:03<00:00, 24.84it/s]
 77%|  | 61/79 [00:03<00:00, 24.71it/s]
 81%|  | 64/79 [00:03<00:00, 24.81it/s]
 85%| | 67/79 [00:03<00:00, 25.02it/s]
 89%| | 70/79 [00:03<00:00, 25.18it/s]
 92%|| 73/79 [00:03<00:00, 25.60it/s]
 96%|| 76/79 [00:03<00:00, 26.24it/s]
100%|| 79/79 [00:03<00:00, 27.07it/s]
, 23.91it/s]
 70%|   | 55/79 [00:03<00:00, 24.58it/s]
 73%|  | 58/79 [00:03<00:00, 25.13it/s]
 77%|  | 61/79 [00:03<00:00, 25.21it/s]
 81%|  | 64/79 [00:03<00:00, 25.33it/s]
 85%| | 67/79 [00:03<00:00, 25.38it/s]
 89%| | 70/79 [00:03<00:00, 25.52it/s]
 92%|| 73/79 [00:03<00:00, 26.02it/s]
 96%|| 76/79 [00:03<00:00, 26.62it/s]
100%|| 79/79 [00:03<00:00, 27.47it/s]
, 23.61it/s]
 70%|   | 55/79 [00:03<00:01, 23.82it/s]
 73%|  | 58/79 [00:03<00:00, 24.04it/s]
 77%|  | 61/79 [00:03<00:00, 24.74it/s]
 81%|  | 64/79 [00:03<00:00, 24.76it/s]
 85%| | 67/79 [00:03<00:00, 25.12it/s]
 89%| | 70/79 [00:03<00:00, 25.53it/s]
 92%|| 73/79 [00:03<00:00, 25.88it/s]
 96%|| 76/79 [00:03<00:00, 26.54it/s]
100%|| 79/79 [00:03<00:00, 27.47it/s]
, 23.76it/s]
 70%|   | 55/79 [00:03<00:00, 24.02it/s]
 73%|  | 58/79 [00:03<00:00, 24.40it/s]
 77%|  | 61/79 [00:03<00:00, 24.51it/s]
 81%|  | 64/79 [00:03<00:00, 24.66it/s]
 85%| | 67/79 [00:03<00:00, 24.84it/s]
 89%| | 70/79 [00:03<00:00, 24.73it/s]
 92%|| 73/79 [00:03<00:00, 25.22it/s]
 96%|| 76/79 [00:03<00:00, 25.89it/s]
100%|| 79/79 [00:03<00:00, 26.71it/s]
, 23.63it/s]
 70%|   | 55/79 [00:03<00:01, 23.93it/s]
 73%|  | 58/79 [00:03<00:00, 24.22it/s]
 77%|  | 61/79 [00:03<00:00, 24.49it/s]
 81%|  | 64/79 [00:03<00:00, 24.49it/s]
 85%| | 67/79 [00:03<00:00, 24.64it/s]
 89%| | 70/79 [00:03<00:00, 24.66it/s]
 92%|| 73/79 [00:03<00:00, 24.88it/s]
 96%|| 76/79 [00:03<00:00, 25.49it/s]
100%|| 79/79 [00:03<00:00, 26.18it/s]
, 24.09it/s]
 70%|   | 55/79 [00:03<00:00, 24.61it/s]
 73%|  | 58/79 [00:03<00:00, 25.06it/s]
 77%|  | 61/79 [00:03<00:00, 25.34it/s]
 81%|  | 64/79 [00:03<00:00, 25.59it/s]
 85%| | 67/79 [00:03<00:00, 25.68it/s]
 89%| | 70/79 [00:03<00:00, 25.82it/s]
 92%|| 73/79 [00:03<00:00, 26.12it/s]
 96%|| 76/79 [00:03<00:00, 27.12it/s]
100%|| 79/79 [00:04<00:00, 27.47it/s]
61it/s]
 68%|   | 54/79 [00:03<00:01, 23.85it/s]
 72%|  | 57/79 [00:03<00:00, 24.28it/s]
 76%|  | 60/79 [00:03<00:00, 24.36it/s]
 80%|  | 63/79 [00:03<00:00, 24.34it/s]
 84%| | 66/79 [00:03<00:00, 24.69it/s]
 87%| | 69/79 [00:03<00:00, 24.59it/s]
 91%| | 72/79 [00:03<00:00, 24.94it/s]
 95%|| 75/79 [00:03<00:00, 25.53it/s]
 99%|| 78/79 [00:03<00:00, 25.98it/s]
100%|| 79/79 [00:04<00:00, 19.38it/s]
, 23.38it/s]
 70%|   | 55/79 [00:03<00:01, 23.73it/s]
 73%|  | 58/79 [00:03<00:00, 24.02it/s]
 77%|  | 61/79 [00:03<00:00, 24.14it/s]
 81%|  | 64/79 [00:03<00:00, 24.36it/s]
 85%| | 67/79 [00:03<00:00, 24.40it/s]
 89%| | 70/79 [00:03<00:00, 24.64it/s]
 92%|| 73/79 [00:03<00:00, 24.91it/s]
 96%|| 76/79 [00:03<00:00, 25.56it/s]
100%|| 79/79 [00:03<00:00, 26.49it/s]
, 23.46it/s]
 70%|   | 55/79 [00:03<00:01, 23.93it/s]
 73%|  | 58/79 [00:03<00:00, 24.03it/s]
 77%|  | 61/79 [00:03<00:00, 24.32it/s]
 81%|  | 64/79 [00:03<00:00, 24.51it/s]
 85%| | 67/79 [00:03<00:00, 24.72it/s]
 89%| | 70/79 [00:03<00:00, 24.36it/s]
 92%|| 73/79 [00:03<00:00, 24.84it/s]
 96%|| 76/79 [00:03<00:00, 25.46it/s]
100%|| 79/79 [00:03<00:00, 26.36it/s]
07it/s]
 68%|   | 54/79 [00:03<00:01, 23.33it/s]
 72%|  | 57/79 [00:03<00:00, 23.62it/s]
 76%|  | 60/79 [00:03<00:00, 23.90it/s]
 80%|  | 63/79 [00:03<00:00, 24.22it/s]
 84%| | 66/79 [00:03<00:00, 24.16it/s]
 87%| | 69/79 [00:03<00:00, 24.26it/s]
 91%| | 72/79 [00:03<00:00, 24.49it/s]
 95%|| 75/79 [00:03<00:00, 25.42it/s]
 99%|| 78/79 [00:03<00:00, 25.83it/s]
100%|| 79/79 [00:04<00:00, 19.27it/s]
, 23.82it/s]
 70%|   | 55/79 [00:03<00:00, 24.06it/s]
 73%|  | 58/79 [00:03<00:00, 24.31it/s]
 77%|  | 61/79 [00:03<00:00, 24.23it/s]
 81%|  | 64/79 [00:03<00:00, 24.23it/s]
 85%| | 67/79 [00:03<00:00, 24.48it/s]
 89%| | 70/79 [00:03<00:00, 24.55it/s]
 92%|| 73/79 [00:03<00:00, 25.18it/s]
 96%|| 76/79 [00:03<00:00, 25.78it/s]
100%|| 79/79 [00:04<00:00, 19.27it/s]
, 23.26it/s]
 70%|   | 55/79 [00:03<00:01, 23.69it/s]
 73%|  | 58/79 [00:03<00:00, 24.37it/s]
 77%|  | 61/79 [00:03<00:00, 24.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.72it/s]
 85%| | 67/79 [00:03<00:00, 24.85it/s]
 89%| | 70/79 [00:03<00:00, 24.92it/s]
 92%|| 73/79 [00:03<00:00, 25.24it/s]
 96%|| 76/79 [00:03<00:00, 25.97it/s]
100%|| 79/79 [00:04<00:00, 26.81it/s]
, 23.74it/s]
 70%|   | 55/79 [00:03<00:00, 24.31it/s]
 73%|  | 58/79 [00:03<00:00, 24.54it/s]
 77%|  | 61/79 [00:03<00:00, 24.90it/s]
 81%|  | 64/79 [00:03<00:00, 24.88it/s]
 85%| | 67/79 [00:03<00:00, 24.88it/s]
 89%| | 70/79 [00:03<00:00, 25.03it/s]
 92%|| 73/79 [00:03<00:00, 25.33it/s]
 96%|| 76/79 [00:03<00:00, 26.15it/s]
100%|| 79/79 [00:04<00:00, 27.00it/s]
2020-06-23 16:00:22,954 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.124498 (0.02639678955078125 s / img per device, on 32 devices)
2020-06-23 16:00:22,975 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:00:22,975 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:00:22,995 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592953233280, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 6, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592953233281, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 6}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:00:34,898 maskrcnn_benchmark.trainer INFO: eta: 1:16:35  iter: 4600  loss: 0.6159 (0.8330)  loss_classifier: 0.2521 (0.3093)  loss_box_reg: 0.1044 (0.1320)  loss_mask: 0.2555 (0.3251)  loss_objectness: 0.0225 (0.0444)  loss_rpn_box_reg: 0.0077 (0.0222)  time: 0.1087 (0.1298)  data: 0.0015 (0.0215)  lr: 0.160000  max mem: 5045
2020-06-23 16:00:37,045 maskrcnn_benchmark.trainer INFO: eta: 1:16:29  iter: 4620  loss: 0.7092 (0.8326)  loss_classifier: 0.2577 (0.3091)  loss_box_reg: 0.0969 (0.1320)  loss_mask: 0.2985 (0.3250)  loss_objectness: 0.0223 (0.0443)  loss_rpn_box_reg: 0.0083 (0.0222)  time: 0.1065 (0.1297)  data: 0.0014 (0.0214)  lr: 0.160000  max mem: 5045
2020-06-23 16:00:39,199 maskrcnn_benchmark.trainer INFO: eta: 1:16:23  iter: 4640  loss: 0.6290 (0.8319)  loss_classifier: 0.2348 (0.3088)  loss_box_reg: 0.1074 (0.1319)  loss_mask: 0.2714 (0.3248)  loss_objectness: 0.0188 (0.0443)  loss_rpn_box_reg: 0.0054 (0.0222)  time: 0.1075 (0.1296)  data: 0.0014 (0.0213)  lr: 0.160000  max mem: 5045
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 16:00:41,357 maskrcnn_benchmark.trainer INFO: eta: 1:16:17  iter: 4660  loss: 0.7190 (0.8314)  loss_classifier: 0.2421 (0.3085)  loss_box_reg: 0.1307 (0.1318)  loss_mask: 0.2927 (0.3246)  loss_objectness: 0.0285 (0.0442)  loss_rpn_box_reg: 0.0142 (0.0221)  time: 0.1074 (0.1295)  data: 0.0014 (0.0213)  lr: 0.160000  max mem: 5045
DONE (t=0.90s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:00:43,535 maskrcnn_benchmark.trainer INFO: eta: 1:16:12  iter: 4680  loss: 0.6785 (0.8308)  loss_classifier: 0.2659 (0.3083)  loss_box_reg: 0.1057 (0.1318)  loss_mask: 0.2700 (0.3244)  loss_objectness: 0.0226 (0.0441)  loss_rpn_box_reg: 0.0090 (0.0221)  time: 0.1087 (0.1294)  data: 0.0015 (0.0212)  lr: 0.160000  max mem: 5045
DONE (t=1.94s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.26689
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.46916
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.27502
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15448
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.29546
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.33997
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.24697
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.40063
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.42471
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.25385
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.46836
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.52914
2020-06-23 16:00:45,714 maskrcnn_benchmark.trainer INFO: eta: 1:16:06  iter: 4700  loss: 0.5976 (0.8300)  loss_classifier: 0.2152 (0.3080)  loss_box_reg: 0.0888 (0.1316)  loss_mask: 0.2706 (0.3242)  loss_objectness: 0.0173 (0.0440)  loss_rpn_box_reg: 0.0050 (0.0221)  time: 0.1074 (0.1294)  data: 0.0014 (0.0211)  lr: 0.160000  max mem: 5045
2020-06-23 16:00:47,876 maskrcnn_benchmark.trainer INFO: eta: 1:16:00  iter: 4720  loss: 0.6867 (0.8296)  loss_classifier: 0.2762 (0.3079)  loss_box_reg: 0.1159 (0.1316)  loss_mask: 0.2840 (0.3241)  loss_objectness: 0.0268 (0.0440)  loss_rpn_box_reg: 0.0079 (0.0221)  time: 0.1080 (0.1293)  data: 0.0014 (0.0210)  lr: 0.160000  max mem: 5045
2020-06-23 16:00:50,038 maskrcnn_benchmark.trainer INFO: eta: 1:15:54  iter: 4740  loss: 0.6915 (0.8293)  loss_classifier: 0.2360 (0.3078)  loss_box_reg: 0.1108 (0.1316)  loss_mask: 0.2863 (0.3240)  loss_objectness: 0.0198 (0.0439)  loss_rpn_box_reg: 0.0090 (0.0220)  time: 0.1072 (0.1292)  data: 0.0014 (0.0209)  lr: 0.160000  max mem: 5045
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:00:52,182 maskrcnn_benchmark.trainer INFO: eta: 1:15:49  iter: 4760  loss: 0.6215 (0.8286)  loss_classifier: 0.2243 (0.3074)  loss_box_reg: 0.1065 (0.1315)  loss_mask: 0.2787 (0.3238)  loss_objectness: 0.0226 (0.0439)  loss_rpn_box_reg: 0.0091 (0.0220)  time: 0.1064 (0.1291)  data: 0.0014 (0.0208)  lr: 0.160000  max mem: 5045
DONE (t=2.52s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:00:54,329 maskrcnn_benchmark.trainer INFO: eta: 1:15:43  iter: 4780  loss: 0.6695 (0.8279)  loss_classifier: 0.2255 (0.3071)  loss_box_reg: 0.1007 (0.1314)  loss_mask: 0.2772 (0.3236)  loss_objectness: 0.0219 (0.0438)  loss_rpn_box_reg: 0.0086 (0.0220)  time: 0.1075 (0.1290)  data: 0.0014 (0.0208)  lr: 0.160000  max mem: 5045
2020-06-23 16:00:56,453 maskrcnn_benchmark.trainer INFO: eta: 1:15:37  iter: 4800  loss: 0.5784 (0.8270)  loss_classifier: 0.1732 (0.3067)  loss_box_reg: 0.0852 (0.1313)  loss_mask: 0.2679 (0.3233)  loss_objectness: 0.0199 (0.0437)  loss_rpn_box_reg: 0.0065 (0.0220)  time: 0.1058 (0.1289)  data: 0.0013 (0.0207)  lr: 0.160000  max mem: 5045
DONE (t=3.19s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.26205
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.44344
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.27344
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11560
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.28851
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.37663
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.24653
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.38824
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.40962
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22475
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.45691
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.52817
2020-06-23 16:00:57,904 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.2668914731617122, segm mAP: 0.26204823196828614
:::MLLOG {"namespace": "", "time_ms": 1592953257904, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.2668914731617122, "SEGM": 0.26204823196828614}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1592953257905, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 5}}
2020-06-23 16:00:58,760 maskrcnn_benchmark.trainer INFO: eta: 1:15:32  iter: 4820  loss: 0.6344 (0.8265)  loss_classifier: 0.2269 (0.3064)  loss_box_reg: 0.1230 (0.1313)  loss_mask: 0.2923 (0.3232)  loss_objectness: 0.0154 (0.0437)  loss_rpn_box_reg: 0.0145 (0.0219)  time: 0.1063 (0.1288)  data: 0.0014 (0.0206)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:00,917 maskrcnn_benchmark.trainer INFO: eta: 1:15:27  iter: 4840  loss: 0.7129 (0.8261)  loss_classifier: 0.2514 (0.3063)  loss_box_reg: 0.1178 (0.1312)  loss_mask: 0.2832 (0.3230)  loss_objectness: 0.0212 (0.0436)  loss_rpn_box_reg: 0.0091 (0.0219)  time: 0.1080 (0.1288)  data: 0.0014 (0.0205)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:03,054 maskrcnn_benchmark.trainer INFO: eta: 1:15:21  iter: 4860  loss: 0.7192 (0.8256)  loss_classifier: 0.2528 (0.3061)  loss_box_reg: 0.1083 (0.1311)  loss_mask: 0.2827 (0.3229)  loss_objectness: 0.0165 (0.0436)  loss_rpn_box_reg: 0.0078 (0.0220)  time: 0.1067 (0.1287)  data: 0.0014 (0.0204)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:05,216 maskrcnn_benchmark.trainer INFO: eta: 1:15:15  iter: 4880  loss: 0.7894 (0.8255)  loss_classifier: 0.3048 (0.3061)  loss_box_reg: 0.1380 (0.1312)  loss_mask: 0.2931 (0.3228)  loss_objectness: 0.0283 (0.0436)  loss_rpn_box_reg: 0.0134 (0.0219)  time: 0.1077 (0.1286)  data: 0.0015 (0.0204)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:07,362 maskrcnn_benchmark.trainer INFO: eta: 1:15:10  iter: 4900  loss: 0.6967 (0.8251)  loss_classifier: 0.2769 (0.3059)  loss_box_reg: 0.1167 (0.1311)  loss_mask: 0.2671 (0.3226)  loss_objectness: 0.0292 (0.0435)  loss_rpn_box_reg: 0.0143 (0.0219)  time: 0.1069 (0.1285)  data: 0.0014 (0.0203)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:09,520 maskrcnn_benchmark.trainer INFO: eta: 1:15:04  iter: 4920  loss: 0.6989 (0.8247)  loss_classifier: 0.2587 (0.3058)  loss_box_reg: 0.1226 (0.1311)  loss_mask: 0.2702 (0.3225)  loss_objectness: 0.0195 (0.0434)  loss_rpn_box_reg: 0.0091 (0.0219)  time: 0.1075 (0.1284)  data: 0.0014 (0.0202)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:11,656 maskrcnn_benchmark.trainer INFO: eta: 1:14:59  iter: 4940  loss: 0.6615 (0.8241)  loss_classifier: 0.2259 (0.3055)  loss_box_reg: 0.1039 (0.1310)  loss_mask: 0.2686 (0.3223)  loss_objectness: 0.0219 (0.0434)  loss_rpn_box_reg: 0.0088 (0.0219)  time: 0.1067 (0.1283)  data: 0.0014 (0.0201)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:13,836 maskrcnn_benchmark.trainer INFO: eta: 1:14:53  iter: 4960  loss: 0.6382 (0.8235)  loss_classifier: 0.2277 (0.3053)  loss_box_reg: 0.1002 (0.1309)  loss_mask: 0.2748 (0.3221)  loss_objectness: 0.0239 (0.0434)  loss_rpn_box_reg: 0.0115 (0.0219)  time: 0.1075 (0.1283)  data: 0.0014 (0.0201)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:15,978 maskrcnn_benchmark.trainer INFO: eta: 1:14:48  iter: 4980  loss: 0.6781 (0.8230)  loss_classifier: 0.2502 (0.3051)  loss_box_reg: 0.0962 (0.1308)  loss_mask: 0.2654 (0.3218)  loss_objectness: 0.0246 (0.0434)  loss_rpn_box_reg: 0.0084 (0.0218)  time: 0.1067 (0.1282)  data: 0.0014 (0.0200)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:18,132 maskrcnn_benchmark.trainer INFO: eta: 1:14:42  iter: 5000  loss: 0.6538 (0.8223)  loss_classifier: 0.2127 (0.3048)  loss_box_reg: 0.1243 (0.1308)  loss_mask: 0.2777 (0.3217)  loss_objectness: 0.0209 (0.0433)  loss_rpn_box_reg: 0.0072 (0.0218)  time: 0.1073 (0.1281)  data: 0.0014 (0.0199)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:20,290 maskrcnn_benchmark.trainer INFO: eta: 1:14:37  iter: 5020  loss: 0.6597 (0.8216)  loss_classifier: 0.1871 (0.3045)  loss_box_reg: 0.0970 (0.1307)  loss_mask: 0.2664 (0.3215)  loss_objectness: 0.0238 (0.0432)  loss_rpn_box_reg: 0.0079 (0.0218)  time: 0.1075 (0.1280)  data: 0.0015 (0.0198)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:22,451 maskrcnn_benchmark.trainer INFO: eta: 1:14:32  iter: 5040  loss: 0.6826 (0.8210)  loss_classifier: 0.2245 (0.3042)  loss_box_reg: 0.0992 (0.1306)  loss_mask: 0.2972 (0.3214)  loss_objectness: 0.0193 (0.0432)  loss_rpn_box_reg: 0.0096 (0.0218)  time: 0.1078 (0.1279)  data: 0.0014 (0.0198)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:24,593 maskrcnn_benchmark.trainer INFO: eta: 1:14:26  iter: 5060  loss: 0.6479 (0.8204)  loss_classifier: 0.2179 (0.3039)  loss_box_reg: 0.1004 (0.1305)  loss_mask: 0.2724 (0.3212)  loss_objectness: 0.0258 (0.0431)  loss_rpn_box_reg: 0.0094 (0.0217)  time: 0.1070 (0.1278)  data: 0.0014 (0.0197)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:26,760 maskrcnn_benchmark.trainer INFO: eta: 1:14:21  iter: 5080  loss: 0.6673 (0.8197)  loss_classifier: 0.2261 (0.3036)  loss_box_reg: 0.1066 (0.1303)  loss_mask: 0.2899 (0.3210)  loss_objectness: 0.0171 (0.0431)  loss_rpn_box_reg: 0.0072 (0.0217)  time: 0.1076 (0.1278)  data: 0.0014 (0.0196)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:28,896 maskrcnn_benchmark.trainer INFO: eta: 1:14:16  iter: 5100  loss: 0.6291 (0.8191)  loss_classifier: 0.2122 (0.3033)  loss_box_reg: 0.0856 (0.1302)  loss_mask: 0.2609 (0.3209)  loss_objectness: 0.0177 (0.0430)  loss_rpn_box_reg: 0.0099 (0.0217)  time: 0.1065 (0.1277)  data: 0.0014 (0.0195)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:31,033 maskrcnn_benchmark.trainer INFO: eta: 1:14:10  iter: 5120  loss: 0.7410 (0.8187)  loss_classifier: 0.2409 (0.3031)  loss_box_reg: 0.1334 (0.1302)  loss_mask: 0.2663 (0.3207)  loss_objectness: 0.0251 (0.0430)  loss_rpn_box_reg: 0.0160 (0.0217)  time: 0.1073 (0.1276)  data: 0.0014 (0.0195)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:33,179 maskrcnn_benchmark.trainer INFO: eta: 1:14:05  iter: 5140  loss: 0.6914 (0.8183)  loss_classifier: 0.2239 (0.3030)  loss_box_reg: 0.1007 (0.1301)  loss_mask: 0.2925 (0.3206)  loss_objectness: 0.0163 (0.0429)  loss_rpn_box_reg: 0.0100 (0.0217)  time: 0.1077 (0.1275)  data: 0.0014 (0.0194)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:35,324 maskrcnn_benchmark.trainer INFO: eta: 1:14:00  iter: 5160  loss: 0.5772 (0.8175)  loss_classifier: 0.2140 (0.3027)  loss_box_reg: 0.0906 (0.1300)  loss_mask: 0.2595 (0.3204)  loss_objectness: 0.0139 (0.0428)  loss_rpn_box_reg: 0.0074 (0.0217)  time: 0.1069 (0.1274)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:37,470 maskrcnn_benchmark.trainer INFO: eta: 1:13:54  iter: 5180  loss: 0.6451 (0.8172)  loss_classifier: 0.2101 (0.3025)  loss_box_reg: 0.1241 (0.1300)  loss_mask: 0.2868 (0.3203)  loss_objectness: 0.0227 (0.0428)  loss_rpn_box_reg: 0.0099 (0.0216)  time: 0.1063 (0.1274)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:39,631 maskrcnn_benchmark.trainer INFO: eta: 1:13:49  iter: 5200  loss: 0.7405 (0.8168)  loss_classifier: 0.2722 (0.3024)  loss_box_reg: 0.1224 (0.1300)  loss_mask: 0.2859 (0.3201)  loss_objectness: 0.0197 (0.0427)  loss_rpn_box_reg: 0.0091 (0.0216)  time: 0.1073 (0.1273)  data: 0.0013 (0.0192)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:41,787 maskrcnn_benchmark.trainer INFO: eta: 1:13:44  iter: 5220  loss: 0.6287 (0.8164)  loss_classifier: 0.2410 (0.3022)  loss_box_reg: 0.1064 (0.1299)  loss_mask: 0.2850 (0.3200)  loss_objectness: 0.0207 (0.0427)  loss_rpn_box_reg: 0.0101 (0.0216)  time: 0.1076 (0.1272)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:43,941 maskrcnn_benchmark.trainer INFO: eta: 1:13:39  iter: 5240  loss: 0.6204 (0.8158)  loss_classifier: 0.2077 (0.3019)  loss_box_reg: 0.1021 (0.1299)  loss_mask: 0.2661 (0.3198)  loss_objectness: 0.0211 (0.0426)  loss_rpn_box_reg: 0.0119 (0.0216)  time: 0.1071 (0.1271)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:46,110 maskrcnn_benchmark.trainer INFO: eta: 1:13:34  iter: 5260  loss: 0.5535 (0.8152)  loss_classifier: 0.2036 (0.3017)  loss_box_reg: 0.0937 (0.1298)  loss_mask: 0.2503 (0.3196)  loss_objectness: 0.0142 (0.0425)  loss_rpn_box_reg: 0.0089 (0.0216)  time: 0.1073 (0.1271)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:48,264 maskrcnn_benchmark.trainer INFO: eta: 1:13:29  iter: 5280  loss: 0.7064 (0.8146)  loss_classifier: 0.2095 (0.3014)  loss_box_reg: 0.1175 (0.1297)  loss_mask: 0.2739 (0.3194)  loss_objectness: 0.0212 (0.0425)  loss_rpn_box_reg: 0.0100 (0.0216)  time: 0.1073 (0.1270)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:50,429 maskrcnn_benchmark.trainer INFO: eta: 1:13:24  iter: 5300  loss: 0.6743 (0.8141)  loss_classifier: 0.2292 (0.3013)  loss_box_reg: 0.0926 (0.1296)  loss_mask: 0.2659 (0.3192)  loss_objectness: 0.0217 (0.0424)  loss_rpn_box_reg: 0.0077 (0.0216)  time: 0.1081 (0.1269)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:52,607 maskrcnn_benchmark.trainer INFO: eta: 1:13:19  iter: 5320  loss: 0.6236 (0.8135)  loss_classifier: 0.2104 (0.3010)  loss_box_reg: 0.0993 (0.1295)  loss_mask: 0.2719 (0.3191)  loss_objectness: 0.0222 (0.0423)  loss_rpn_box_reg: 0.0129 (0.0215)  time: 0.1083 (0.1269)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:54,760 maskrcnn_benchmark.trainer INFO: eta: 1:13:14  iter: 5340  loss: 0.6719 (0.8130)  loss_classifier: 0.2690 (0.3009)  loss_box_reg: 0.0959 (0.1294)  loss_mask: 0.2622 (0.3189)  loss_objectness: 0.0212 (0.0423)  loss_rpn_box_reg: 0.0104 (0.0215)  time: 0.1070 (0.1268)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:56,916 maskrcnn_benchmark.trainer INFO: eta: 1:13:09  iter: 5360  loss: 0.6483 (0.8124)  loss_classifier: 0.2002 (0.3007)  loss_box_reg: 0.1095 (0.1293)  loss_mask: 0.2863 (0.3187)  loss_objectness: 0.0168 (0.0422)  loss_rpn_box_reg: 0.0096 (0.0215)  time: 0.1083 (0.1267)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5045
2020-06-23 16:01:59,088 maskrcnn_benchmark.trainer INFO: eta: 1:13:04  iter: 5380  loss: 0.7526 (0.8123)  loss_classifier: 0.2780 (0.3006)  loss_box_reg: 0.1265 (0.1293)  loss_mask: 0.2858 (0.3186)  loss_objectness: 0.0285 (0.0422)  loss_rpn_box_reg: 0.0183 (0.0215)  time: 0.1074 (0.1267)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5045
2020-06-23 16:02:01,243 maskrcnn_benchmark.trainer INFO: eta: 1:12:59  iter: 5400  loss: 0.6668 (0.8120)  loss_classifier: 0.2480 (0.3005)  loss_box_reg: 0.1049 (0.1293)  loss_mask: 0.2940 (0.3185)  loss_objectness: 0.0224 (0.0422)  loss_rpn_box_reg: 0.0135 (0.0215)  time: 0.1070 (0.1266)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5045
2020-06-23 16:02:03,421 maskrcnn_benchmark.trainer INFO: eta: 1:12:54  iter: 5420  loss: 0.7097 (0.8117)  loss_classifier: 0.2384 (0.3004)  loss_box_reg: 0.1062 (0.1293)  loss_mask: 0.2772 (0.3184)  loss_objectness: 0.0210 (0.0422)  loss_rpn_box_reg: 0.0105 (0.0215)  time: 0.1080 (0.1265)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5045
2020-06-23 16:02:05,563 maskrcnn_benchmark.trainer INFO: eta: 1:12:49  iter: 5440  loss: 0.5942 (0.8112)  loss_classifier: 0.2272 (0.3002)  loss_box_reg: 0.0989 (0.1292)  loss_mask: 0.2635 (0.3183)  loss_objectness: 0.0145 (0.0421)  loss_rpn_box_reg: 0.0097 (0.0214)  time: 0.1074 (0.1264)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5045
2020-06-23 16:02:07,714 maskrcnn_benchmark.trainer INFO: eta: 1:12:44  iter: 5460  loss: 0.7664 (0.8110)  loss_classifier: 0.2846 (0.3001)  loss_box_reg: 0.1228 (0.1292)  loss_mask: 0.3014 (0.3182)  loss_objectness: 0.0353 (0.0421)  loss_rpn_box_reg: 0.0088 (0.0214)  time: 0.1078 (0.1264)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5045
2020-06-23 16:02:09,857 maskrcnn_benchmark.trainer INFO: eta: 1:12:40  iter: 5480  loss: 0.6250 (0.8106)  loss_classifier: 0.2305 (0.2999)  loss_box_reg: 0.1002 (0.1291)  loss_mask: 0.2593 (0.3180)  loss_objectness: 0.0217 (0.0421)  loss_rpn_box_reg: 0.0059 (0.0214)  time: 0.1069 (0.1263)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5045
2020-06-23 16:02:12,013 maskrcnn_benchmark.trainer INFO: eta: 1:12:35  iter: 5500  loss: 0.6960 (0.8102)  loss_classifier: 0.2546 (0.2998)  loss_box_reg: 0.1163 (0.1291)  loss_mask: 0.2760 (0.3178)  loss_objectness: 0.0240 (0.0421)  loss_rpn_box_reg: 0.0092 (0.0214)  time: 0.1075 (0.1262)  data: 0.0015 (0.0182)  lr: 0.160000  max mem: 5045
:::MLLOG {"namespace": "", "time_ms": 1592953332221, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 6}}
:::MLLOG {"namespace": "", "time_ms": 1592953332221, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 6}}
:::MLLOG {"namespace": "", "time_ms": 1592953332222, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 6}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 16:02:12,477 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
Done (t=0.26s)
creating index...
creating index...
index created!
Done (t=0.26s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 16:02:12,778 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:39,  2.00it/s]
  5%|         | 4/79 [00:00<00:27,  2.75it/s]
  9%|         | 7/79 [00:00<00:19,  3.75it/s]
 13%|        | 10/79 [00:00<00:13,  5.04it/s]
 16%|        | 13/79 [00:00<00:09,  6.65it/s]
 20%|        | 16/79 [00:01<00:07,  8.58it/s]
 24%|       | 19/79 [00:01<00:05, 10.74it/s]
 28%|       | 22/79 [00:01<00:04, 13.09it/s]
 32%|      | 25/79 [00:01<00:03, 15.18it/s]
 35%|      | 28/79 [00:01<00:02, 17.25it/s]
 39%|      | 31/79 [00:01<00:02, 19.13it/s]
 43%|     | 34/79 [00:01<00:02, 20.64it/s]
 47%|     | 37/79 [00:01<00:01, 22.01it/s]
 51%|     | 40/79 [00:02<00:01, 23.13it/s]
 54%|    | 43/79 [00:02<00:01, 23.78it/s]
 58%|    | 46/79 [00:02<00:01, 24.51it/s]
 62%|   | 49/79 [00:02<00:01, 25.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.28it/s]
  5%|         | 4/79 [00:00<00:42,  1.78it/s]
  9%|         | 7/79 [00:01<00:29,  2.48it/s]
 13%|        | 10/79 [00:01<00:20,  3.40it/s]
 16%|        | 13/79 [00:01<00:14,  4.60it/s]
 20%|        | 16/79 [00:01<00:10,  6.10it/s]
 24%|       | 19/79 [00:01<00:07,  7.95it/s]
 28%|       | 22/79 [00:01<00:05, 10.06it/s]
 32%|      | 25/79 [00:01<00:04, 12.35it/s]
 35%|      | 28/79 [00:01<00:03, 14.65it/s]
 39%|      | 31/79 [00:01<00:02, 16.96it/s]
 43%|     | 34/79 [00:02<00:02, 18.72it/s]
 47%|     | 37/79 [00:02<00:02, 20.62it/s]
 51%|     | 40/79 [00:02<00:01, 22.07it/s]
 54%|    | 43/79 [00:02<00:01, 23.27it/s]
 58%|    | 46/79 [00:02<00:01, 24.04it/s]
 62%|   | 49/79 [00:02<00:01, 24.84it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.28it/s]
  5%|         | 4/79 [00:00<00:41,  1.79it/s]
  9%|         | 7/79 [00:01<00:28,  2.49it/s]
 13%|        | 10/79 [00:01<00:20,  3.42it/s]
 16%|        | 13/79 [00:01<00:14,  4.62it/s]
 20%|        | 16/79 [00:01<00:10,  6.14it/s]
 24%|       | 19/79 [00:01<00:07,  7.97it/s]
 28%|       | 22/79 [00:01<00:05, 10.07it/s]
 32%|      | 25/79 [00:01<00:04, 12.39it/s]
 35%|      | 28/79 [00:01<00:03, 14.75it/s]
 39%|      | 31/79 [00:01<00:02, 17.00it/s]
 43%|     | 34/79 [00:02<00:02, 19.03it/s]
 47%|     | 37/79 [00:02<00:02, 20.70it/s]
 51%|     | 40/79 [00:02<00:01, 22.07it/s]
 54%|    | 43/79 [00:02<00:01, 23.28it/s]
 58%|    | 46/79 [00:02<00:01, 24.16it/s]
 62%|   | 49/79 [00:02<00:01, 24.89it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.29it/s]
  5%|         | 4/79 [00:00<00:41,  1.80it/s]
  9%|         | 7/79 [00:01<00:28,  2.50it/s]
 13%|        | 10/79 [00:01<00:20,  3.43it/s]
 16%|        | 13/79 [00:01<00:14,  4.63it/s]
 20%|        | 16/79 [00:01<00:10,  6.16it/s]
 24%|       | 19/79 [00:01<00:07,  7.96it/s]
 28%|       | 22/79 [00:01<00:05, 10.01it/s]
 32%|      | 25/79 [00:01<00:04, 12.21it/s]
 35%|      | 28/79 [00:01<00:03, 14.56it/s]
 39%|      | 31/79 [00:01<00:02, 16.73it/s]
 43%|     | 34/79 [00:02<00:02, 18.64it/s]
 47%|     | 37/79 [00:02<00:02, 20.33it/s]
 51%|     | 40/79 [00:02<00:01, 21.85it/s]
 54%|    | 43/79 [00:02<00:01, 22.69it/s]
 58%|    | 46/79 [00:02<00:01, 23.40it/s]
 62%|   | 49/79 [00:02<00:01, 23.89it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.28it/s]
  5%|         | 4/79 [00:00<00:41,  1.79it/s]
  9%|         | 7/79 [00:01<00:28,  2.49it/s]
 13%|        | 10/79 [00:01<00:20,  3.41it/s]
 16%|        | 13/79 [00:01<00:14,  4.61it/s]
 20%|        | 16/79 [00:01<00:10,  6.12it/s]
 24%|       | 19/79 [00:01<00:07,  7.94it/s]
 28%|       | 22/79 [00:01<00:05, 10.05it/s]
 32%|      | 25/79 [00:01<00:04, 12.32it/s]
 35%|      | 28/79 [00:01<00:03, 14.65it/s]
 39%|      | 31/79 [00:01<00:02, 16.94it/s]
 43%|     | 34/79 [00:02<00:02, 18.90it/s]
 47%|     | 37/79 [00:02<00:02, 20.58it/s]
 51%|     | 40/79 [00:02<00:01, 21.84it/s]
 54%|    | 43/79 [00:02<00:01, 22.83it/s]
 58%|    | 46/79 [00:02<00:01, 23.70it/s]
 62%|   | 49/79 [00:02<00:01, 24.24it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.42it/s]
 20%|        | 16/79 [00:01<00:10,  5.90it/s]
 24%|       | 19/79 [00:01<00:07,  7.71it/s]
 28%|       | 22/79 [00:01<00:05,  9.79it/s]
 32%|      | 25/79 [00:01<00:04, 12.05it/s]
 35%|      | 28/79 [00:01<00:03, 14.42it/s]
 39%|      | 31/79 [00:01<00:02, 16.69it/s]
 43%|     | 34/79 [00:02<00:02, 18.64it/s]
 47%|     | 37/79 [00:02<00:02, 20.44it/s]
 51%|     | 40/79 [00:02<00:01, 21.88it/s]
 54%|    | 43/79 [00:02<00:01, 23.03it/s]
 58%|    | 46/79 [00:02<00:01, 23.92it/s]
 62%|   | 49/79 [00:02<00:01, 24.60it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.28it/s]
  5%|         | 4/79 [00:00<00:42,  1.78it/s]
  9%|         | 7/79 [00:01<00:29,  2.47it/s]
 13%|        | 10/79 [00:01<00:20,  3.38it/s]
 16%|        | 13/79 [00:01<00:14,  4.57it/s]
 20%|        | 16/79 [00:01<00:10,  6.07it/s]
 24%|       | 19/79 [00:01<00:07,  7.85it/s]
 28%|       | 22/79 [00:01<00:05,  9.89it/s]
 32%|      | 25/79 [00:01<00:04, 12.10it/s]
 35%|      | 28/79 [00:01<00:03, 14.38it/s]
 39%|      | 31/79 [00:01<00:02, 16.50it/s]
 43%|     | 34/79 [00:02<00:02, 18.42it/s]
 47%|     | 37/79 [00:02<00:02, 20.00it/s]
 51%|     | 40/79 [00:02<00:01, 21.46it/s]
 54%|    | 43/79 [00:02<00:01, 22.29it/s]
 58%|    | 46/79 [00:02<00:01, 22.98it/s]
 62%|   | 49/79 [00:02<00:01, 23.62it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.43it/s]
 13%|        | 10/79 [00:01<00:20,  3.33it/s]
 16%|        | 13/79 [00:01<00:14,  4.50it/s]
 20%|        | 16/79 [00:01<00:10,  5.99it/s]
 24%|       | 19/79 [00:01<00:07,  7.78it/s]
 28%|       | 22/79 [00:01<00:05,  9.85it/s]
 32%|      | 25/79 [00:01<00:04, 12.11it/s]
 35%|      | 28/79 [00:01<00:03, 14.44it/s]
 39%|      | 31/79 [00:01<00:02, 16.68it/s]
 43%|     | 34/79 [00:02<00:02, 18.62it/s]
 47%|     | 37/79 [00:02<00:02, 20.31it/s]
 51%|     | 40/79 [00:02<00:01, 21.69it/s]
 54%|    | 43/79 [00:02<00:01, 23.03it/s]
 58%|    | 46/79 [00:02<00:01, 23.85it/s]
 62%|   | 49/79 [00:02<00:01, 24.55it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.27it/s]
 16%|        | 13/79 [00:01<00:14,  4.43it/s]
 20%|        | 16/79 [00:01<00:10,  5.89it/s]
 24%|       | 19/79 [00:01<00:07,  7.64it/s]
 28%|       | 22/79 [00:01<00:05,  9.69it/s]
 32%|      | 25/79 [00:01<00:04, 11.94it/s]
 35%|      | 28/79 [00:01<00:03, 14.26it/s]
 39%|      | 31/79 [00:01<00:02, 16.40it/s]
 43%|     | 34/79 [00:02<00:02, 18.57it/s]
 47%|     | 37/79 [00:02<00:02, 20.05it/s]
 51%|     | 40/79 [00:02<00:01, 21.47it/s]
 54%|    | 43/79 [00:02<00:01, 22.56it/s]
 58%|    | 46/79 [00:02<00:01, 23.52it/s]
 62%|   | 49/79 [00:02<00:01, 24.25it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.56it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.79it/s]
 35%|      | 28/79 [00:01<00:03, 14.11it/s]
 39%|      | 31/79 [00:02<00:02, 16.32it/s]
 43%|     | 34/79 [00:02<00:02, 18.38it/s]
 47%|     | 37/79 [00:02<00:02, 20.21it/s]
 51%|     | 40/79 [00:02<00:01, 21.80it/s]
 54%|    | 43/79 [00:02<00:01, 22.84it/s]
 58%|    | 46/79 [00:02<00:01, 23.77it/s]
 62%|   | 49/79 [00:02<00:01, 24.57it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.76it/s]
 24%|       | 19/79 [00:01<00:07,  7.51it/s]
 28%|       | 22/79 [00:01<00:05,  9.51it/s]
 32%|      | 25/79 [00:01<00:04, 11.72it/s]
 35%|      | 28/79 [00:01<00:03, 14.07it/s]
 39%|      | 31/79 [00:02<00:02, 16.13it/s]
 43%|     | 34/79 [00:02<00:02, 18.12it/s]
 47%|     | 37/79 [00:02<00:02, 19.66it/s]
 51%|     | 40/79 [00:02<00:01, 21.26it/s]
 54%|    | 43/79 [00:02<00:01, 22.19it/s]
 58%|    | 46/79 [00:02<00:01, 23.19it/s]
 62%|   | 49/79 [00:02<00:01, 23.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.57it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.33it/s]
 32%|      | 25/79 [00:01<00:04, 11.57it/s]
 35%|      | 28/79 [00:01<00:03, 13.93it/s]
 39%|      | 31/79 [00:02<00:02, 16.30it/s]
 43%|     | 34/79 [00:02<00:02, 18.41it/s]
 47%|     | 37/79 [00:02<00:02, 20.27it/s]
 51%|     | 40/79 [00:02<00:01, 21.69it/s]
 54%|    | 43/79 [00:02<00:01, 22.91it/s]
 58%|    | 46/79 [00:02<00:01, 23.77it/s]
 62%|   | 49/79 [00:02<00:01, 24.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.69it/s]
 24%|       | 19/79 [00:01<00:08,  7.43it/s]
 28%|       | 22/79 [00:01<00:06,  9.45it/s]
 32%|      | 25/79 [00:01<00:04, 11.61it/s]
 35%|      | 28/79 [00:01<00:03, 13.86it/s]
 39%|      | 31/79 [00:02<00:02, 16.13it/s]
 43%|     | 34/79 [00:02<00:02, 18.20it/s]
 47%|     | 37/79 [00:02<00:02, 19.86it/s]
 51%|     | 40/79 [00:02<00:01, 21.18it/s]
 54%|    | 43/79 [00:02<00:01, 22.40it/s]
 58%|    | 46/79 [00:02<00:01, 23.30it/s]
 62%|   | 49/79 [00:02<00:01, 23.90it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:14,  4.40it/s]
 20%|        | 16/79 [00:01<00:10,  5.85it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.60it/s]
 32%|      | 25/79 [00:01<00:04, 11.81it/s]
 35%|      | 28/79 [00:01<00:03, 14.16it/s]
 39%|      | 31/79 [00:02<00:02, 16.32it/s]
 43%|     | 34/79 [00:02<00:02, 18.17it/s]
 47%|     | 37/79 [00:02<00:02, 19.88it/s]
 51%|     | 40/79 [00:02<00:01, 21.47it/s]
 54%|    | 43/79 [00:02<00:01, 22.76it/s]
 58%|    | 46/79 [00:02<00:01, 23.25it/s]
 62%|   | 49/79 [00:02<00:01, 24.13it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.24it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.56it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.77it/s]
 35%|      | 28/79 [00:01<00:03, 13.95it/s]
 39%|      | 31/79 [00:02<00:02, 16.14it/s]
 43%|     | 34/79 [00:02<00:02, 18.07it/s]
 47%|     | 37/79 [00:02<00:02, 19.63it/s]
 51%|     | 40/79 [00:02<00:01, 21.20it/s]
 54%|    | 43/79 [00:02<00:01, 22.23it/s]
 58%|    | 46/79 [00:02<00:01, 22.93it/s]
 62%|   | 49/79 [00:02<00:01, 23.61it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  4%|         | 3/79 [00:00<00:45,  1.67it/s]
  8%|         | 6/79 [00:01<00:31,  2.33it/s]
 11%|        | 9/79 [00:01<00:21,  3.19it/s]
 15%|        | 12/79 [00:01<00:15,  4.33it/s]
 19%|        | 15/79 [00:01<00:11,  5.75it/s]
 23%|       | 18/79 [00:01<00:08,  7.46it/s]
 27%|       | 21/79 [00:01<00:06,  9.42it/s]
 30%|       | 24/79 [00:01<00:04, 11.61it/s]
 34%|      | 27/79 [00:01<00:03, 13.87it/s]
 38%|      | 30/79 [00:02<00:03, 16.02it/s]
 42%|     | 33/79 [00:02<00:02, 17.81it/s]
 46%|     | 36/79 [00:02<00:02, 19.62it/s]
 49%|     | 39/79 [00:02<00:01, 20.89it/s]
 53%|    | 42/79 [00:02<00:01, 21.91it/s]
 57%|    | 45/79 [00:02<00:01, 22.44it/s]
 61%|    | 48/79 [00:02<00:01, 23.02it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  9.04it/s]
 32%|      | 25/79 [00:01<00:04, 11.24it/s]
 35%|      | 28/79 [00:01<00:03, 13.56it/s]
 39%|      | 31/79 [00:02<00:03, 15.91it/s]
 43%|     | 34/79 [00:02<00:02, 18.15it/s]
 47%|     | 37/79 [00:02<00:02, 19.89it/s]
 51%|     | 40/79 [00:02<00:01, 21.36it/s]
 54%|    | 43/79 [00:02<00:01, 22.79it/s]
 58%|    | 46/79 [00:02<00:01, 23.68it/s]
 62%|   | 49/79 [00:02<00:01, 24.18it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  4%|         | 3/79 [00:00<00:47,  1.60it/s]
  8%|         | 6/79 [00:01<00:32,  2.22it/s]
 11%|        | 9/79 [00:01<00:22,  3.06it/s]
 15%|        | 12/79 [00:01<00:16,  4.15it/s]
 19%|        | 15/79 [00:01<00:11,  5.55it/s]
 23%|       | 18/79 [00:01<00:08,  7.26it/s]
 27%|       | 21/79 [00:01<00:06,  9.19it/s]
 30%|       | 24/79 [00:01<00:04, 11.30it/s]
 34%|      | 27/79 [00:01<00:03, 13.59it/s]
 38%|      | 30/79 [00:02<00:03, 15.82it/s]
 42%|     | 33/79 [00:02<00:02, 17.87it/s]
 46%|     | 36/79 [00:02<00:02, 19.58it/s]
 49%|     | 39/79 [00:02<00:01, 21.09it/s]
 53%|    | 42/79 [00:02<00:01, 22.26it/s]
 57%|    | 45/79 [00:02<00:01, 23.10it/s]
 61%|    | 48/79 [00:02<00:01, 23.51it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.57it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.27it/s]
 32%|      | 25/79 [00:01<00:04, 11.44it/s]
 35%|      | 28/79 [00:01<00:03, 13.71it/s]
 39%|      | 31/79 [00:02<00:03, 15.96it/s]
 43%|     | 34/79 [00:02<00:02, 18.12it/s]
 47%|     | 37/79 [00:02<00:02, 19.89it/s]
 51%|     | 40/79 [00:02<00:01, 21.31it/s]
 54%|    | 43/79 [00:02<00:01, 22.17it/s]
 58%|    | 46/79 [00:02<00:01, 23.05it/s]
 62%|   | 49/79 [00:02<00:01, 23.70it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.23it/s]
 28%|       | 22/79 [00:01<00:06,  9.18it/s]
 32%|      | 25/79 [00:01<00:04, 11.36it/s]
 35%|      | 28/79 [00:01<00:03, 13.64it/s]
 39%|      | 31/79 [00:02<00:03, 15.89it/s]
 43%|     | 34/79 [00:02<00:02, 17.96it/s]
 47%|     | 37/79 [00:02<00:02, 19.74it/s]
 51%|     | 40/79 [00:02<00:01, 21.22it/s]
 54%|    | 43/79 [00:02<00:01, 22.40it/s]
 58%|    | 46/79 [00:02<00:01, 23.27it/s]
 62%|   | 49/79 [00:02<00:01, 23.72it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.24it/s]
 28%|       | 22/79 [00:01<00:06,  9.22it/s]
 32%|      | 25/79 [00:01<00:04, 11.36it/s]
 35%|      | 28/79 [00:01<00:03, 13.70it/s]
 39%|      | 31/79 [00:02<00:03, 15.97it/s]
 43%|     | 34/79 [00:02<00:02, 17.98it/s]
 47%|     | 37/79 [00:02<00:02, 19.67it/s]
 51%|     | 40/79 [00:02<00:01, 21.28it/s]
 54%|    | 43/79 [00:02<00:01, 22.52it/s]
 58%|    | 46/79 [00:02<00:01, 23.20it/s]
 62%|   | 49/79 [00:02<00:01, 24.04it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 28%|       | 22/79 [00:01<00:06,  9.13it/s]
 32%|      | 25/79 [00:01<00:04, 11.27it/s]
 35%|      | 28/79 [00:01<00:03, 13.55it/s]
 39%|      | 31/79 [00:02<00:03, 15.71it/s]
 43%|     | 34/79 [00:02<00:02, 17.75it/s]
 47%|     | 37/79 [00:02<00:02, 19.56it/s]
 51%|     | 40/79 [00:02<00:01, 21.01it/s]
 54%|    | 43/79 [00:02<00:01, 22.25it/s]
 58%|    | 46/79 [00:02<00:01, 23.23it/s]
 62%|   | 49/79 [00:02<00:01, 23.97it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.13it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.20it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.38it/s]
 35%|      | 28/79 [00:01<00:03, 13.62it/s]
 39%|      | 31/79 [00:02<00:03, 15.87it/s]
 43%|     | 34/79 [00:02<00:02, 17.80it/s]
 47%|     | 37/79 [00:02<00:02, 19.58it/s]
 51%|     | 40/79 [00:02<00:01, 20.70it/s]
 54%|    | 43/79 [00:02<00:01, 21.42it/s]
 58%|    | 46/79 [00:02<00:01, 22.45it/s]
 62%|   | 49/79 [00:02<00:01, 23.32it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.38it/s]
 35%|      | 28/79 [00:01<00:03, 13.64it/s]
 39%|      | 31/79 [00:02<00:03, 15.92it/s]
 43%|     | 34/79 [00:02<00:02, 17.94it/s]
 47%|     | 37/79 [00:02<00:02, 19.80it/s]
 51%|     | 40/79 [00:02<00:01, 20.93it/s]
 54%|    | 43/79 [00:02<00:01, 22.07it/s]
 58%|    | 46/79 [00:02<00:01, 22.36it/s]
 62%|   | 49/79 [00:02<00:01, 23.14it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.09it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.15it/s]
 28%|       | 22/79 [00:01<00:06,  9.11it/s]
 32%|      | 25/79 [00:01<00:04, 11.25it/s]
 35%|      | 28/79 [00:01<00:03, 13.51it/s]
 39%|      | 31/79 [00:02<00:03, 15.69it/s]
 43%|     | 34/79 [00:02<00:02, 17.73it/s]
 47%|     | 37/79 [00:02<00:02, 19.46it/s]
 51%|     | 40/79 [00:02<00:01, 20.84it/s]
 54%|    | 43/79 [00:02<00:01, 22.07it/s]
 58%|    | 46/79 [00:02<00:01, 23.00it/s]
 62%|   | 49/79 [00:02<00:01, 23.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.39it/s]
 24%|       | 19/79 [00:01<00:08,  7.05it/s]
 28%|       | 22/79 [00:01<00:06,  9.03it/s]
 32%|      | 25/79 [00:01<00:04, 11.18it/s]
 35%|      | 28/79 [00:01<00:03, 13.46it/s]
 39%|      | 31/79 [00:02<00:03, 15.54it/s]
 43%|     | 34/79 [00:02<00:02, 17.46it/s]
 47%|     | 37/79 [00:02<00:02, 19.17it/s]
 51%|     | 40/79 [00:02<00:01, 20.55it/s]
 54%|    | 43/79 [00:02<00:01, 21.57it/s]
 58%|    | 46/79 [00:02<00:01, 22.55it/s]
 62%|   | 49/79 [00:02<00:01, 23.01it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.48it/s]
 24%|       | 19/79 [00:01<00:08,  7.14it/s]
 28%|       | 22/79 [00:01<00:06,  9.09it/s]
 32%|      | 25/79 [00:01<00:04, 11.19it/s]
 35%|      | 28/79 [00:01<00:03, 13.34it/s]
 39%|      | 31/79 [00:02<00:03, 15.48it/s]
 43%|     | 34/79 [00:02<00:02, 17.35it/s]
 47%|     | 37/79 [00:02<00:02, 19.13it/s]
 51%|     | 40/79 [00:02<00:01, 20.43it/s]
 54%|    | 43/79 [00:02<00:01, 21.17it/s]
 58%|    | 46/79 [00:02<00:01, 21.87it/s]
 62%|   | 49/79 [00:02<00:01, 22.53it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.36it/s]
 24%|       | 19/79 [00:01<00:08,  7.02it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.03it/s]
 35%|      | 28/79 [00:02<00:03, 13.26it/s]
 39%|      | 31/79 [00:02<00:03, 15.38it/s]
 43%|     | 34/79 [00:02<00:02, 17.35it/s]
 47%|     | 37/79 [00:02<00:02, 18.72it/s]
 51%|     | 40/79 [00:02<00:01, 20.21it/s]
 54%|    | 43/79 [00:02<00:01, 21.17it/s]
 58%|    | 46/79 [00:02<00:01, 22.11it/s]
 62%|   | 49/79 [00:02<00:01, 22.98it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.87it/s]
 20%|        | 16/79 [00:01<00:12,  5.19it/s]
 24%|       | 19/79 [00:01<00:08,  6.80it/s]
 28%|       | 22/79 [00:01<00:06,  8.71it/s]
 32%|      | 25/79 [00:01<00:04, 10.83it/s]
 35%|      | 28/79 [00:02<00:03, 13.10it/s]
 39%|      | 31/79 [00:02<00:03, 15.35it/s]
 43%|     | 34/79 [00:02<00:02, 17.30it/s]
 47%|     | 37/79 [00:02<00:02, 19.03it/s]
 51%|     | 40/79 [00:02<00:01, 20.57it/s]
 54%|    | 43/79 [00:02<00:01, 21.75it/s]
 58%|    | 46/79 [00:02<00:01, 22.67it/s]
 62%|   | 49/79 [00:02<00:01, 23.59it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.18it/s]
 24%|       | 19/79 [00:01<00:08,  6.80it/s]
 28%|       | 22/79 [00:01<00:06,  8.70it/s]
 32%|      | 25/79 [00:01<00:04, 10.84it/s]
 35%|      | 28/79 [00:02<00:03, 13.06it/s]
 39%|      | 31/79 [00:02<00:03, 15.25it/s]
 43%|     | 34/79 [00:02<00:02, 17.17it/s]
 47%|     | 37/79 [00:02<00:02, 18.84it/s]
 51%|     | 40/79 [00:02<00:01, 20.32it/s]
 54%|    | 43/79 [00:02<00:01, 21.49it/s]
 58%|    | 46/79 [00:02<00:01, 22.45it/s]
 62%|   | 49/79 [00:02<00:01, 23.12it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  5%|         | 4/79 [00:01<00:52,  1.42it/s]
  9%|         | 7/79 [00:01<00:36,  1.98it/s]
 13%|        | 10/79 [00:01<00:25,  2.74it/s]
 16%|        | 13/79 [00:01<00:17,  3.74it/s]
 20%|        | 16/79 [00:01<00:12,  5.01it/s]
 24%|       | 19/79 [00:01<00:09,  6.61it/s]
 28%|       | 22/79 [00:01<00:06,  8.47it/s]
 32%|      | 25/79 [00:01<00:05, 10.61it/s]
 35%|      | 28/79 [00:02<00:03, 12.81it/s]
 39%|      | 31/79 [00:02<00:03, 15.09it/s]
 43%|     | 34/79 [00:02<00:02, 17.01it/s]
 47%|     | 37/79 [00:02<00:02, 18.82it/s]
 51%|     | 40/79 [00:02<00:01, 20.30it/s]
 54%|    | 43/79 [00:02<00:01, 21.59it/s]
 58%|    | 46/79 [00:02<00:01, 22.38it/s]
 62%|   | 49/79 [00:02<00:01, 22.97it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.26it/s]
 24%|       | 19/79 [00:01<00:08,  6.89it/s]
 28%|       | 22/79 [00:01<00:06,  8.81it/s]
 32%|      | 25/79 [00:01<00:04, 10.87it/s]
 35%|      | 28/79 [00:02<00:03, 13.05it/s]
 39%|      | 31/79 [00:02<00:03, 15.18it/s]
 43%|     | 34/79 [00:02<00:02, 17.04it/s]
 47%|     | 37/79 [00:02<00:02, 18.58it/s]
 51%|     | 40/79 [00:02<00:01, 19.73it/s]
 54%|    | 43/79 [00:02<00:01, 21.09it/s]
 58%|    | 46/79 [00:02<00:01, 21.64it/s]
 62%|   | 49/79 [00:02<00:01, 22.14it/s]
 66%|   | 52/79 [00:03<00:01, 25.33it/s]
 70%|   | 55/79 [00:02<00:00, 25.73it/s]
 73%|  | 58/79 [00:02<00:00, 25.79it/s]
 77%|  | 61/79 [00:02<00:00, 25.70it/s]
 81%|  | 64/79 [00:02<00:00, 25.81it/s]
 85%| | 67/79 [00:03<00:00, 25.85it/s]
 89%| | 70/79 [00:03<00:00, 25.75it/s]
 92%|| 73/79 [00:03<00:00, 26.27it/s]
 96%|| 76/79 [00:03<00:00, 26.91it/s]
100%|| 79/79 [00:03<00:00, 22.17it/s]
, 24.97it/s]
 70%|   | 55/79 [00:02<00:00, 25.24it/s]
 73%|  | 58/79 [00:02<00:00, 25.26it/s]
 77%|  | 61/79 [00:03<00:00, 25.52it/s]
 81%|  | 64/79 [00:03<00:00, 25.67it/s]
 85%| | 67/79 [00:03<00:00, 25.95it/s]
 89%| | 70/79 [00:03<00:00, 26.06it/s]
 92%|| 73/79 [00:03<00:00, 26.49it/s]
 96%|| 76/79 [00:03<00:00, 27.05it/s]
100%|| 79/79 [00:03<00:00, 27.82it/s]
, 25.40it/s]
 70%|   | 55/79 [00:02<00:00, 25.54it/s]
 73%|  | 58/79 [00:02<00:00, 25.86it/s]
 77%|  | 61/79 [00:03<00:00, 25.87it/s]
 81%|  | 64/79 [00:03<00:00, 25.93it/s]
 85%| | 67/79 [00:03<00:00, 25.87it/s]
 89%| | 70/79 [00:03<00:00, 26.17it/s]
 92%|| 73/79 [00:03<00:00, 25.93it/s]
 96%|| 76/79 [00:03<00:00, 26.56it/s]
100%|| 79/79 [00:03<00:00, 27.26it/s]
, 25.20it/s]
 70%|   | 55/79 [00:02<00:00, 25.51it/s]
 73%|  | 58/79 [00:02<00:00, 25.95it/s]
 77%|  | 61/79 [00:03<00:00, 25.93it/s]
 81%|  | 64/79 [00:03<00:00, 25.96it/s]
 85%| | 67/79 [00:03<00:00, 26.17it/s]
 89%| | 70/79 [00:03<00:00, 26.35it/s]
 92%|| 73/79 [00:03<00:00, 26.54it/s]
 96%|| 76/79 [00:03<00:00, 27.48it/s]
100%|| 79/79 [00:03<00:00, 27.70it/s]
, 24.50it/s]
 70%|   | 55/79 [00:02<00:00, 24.51it/s]
 73%|  | 58/79 [00:03<00:00, 24.93it/s]
 77%|  | 61/79 [00:03<00:00, 25.18it/s]
 81%|  | 64/79 [00:03<00:00, 25.46it/s]
 85%| | 67/79 [00:03<00:00, 25.57it/s]
 89%| | 70/79 [00:03<00:00, 25.28it/s]
 92%|| 73/79 [00:03<00:00, 25.75it/s]
 96%|| 76/79 [00:03<00:00, 26.47it/s]
100%|| 79/79 [00:03<00:00, 20.38it/s]
, 24.98it/s]
 70%|   | 55/79 [00:02<00:00, 25.45it/s]
 73%|  | 58/79 [00:03<00:00, 25.80it/s]
 77%|  | 61/79 [00:03<00:00, 25.83it/s]
 81%|  | 64/79 [00:03<00:00, 25.80it/s]
 85%| | 67/79 [00:03<00:00, 26.10it/s]
 89%| | 70/79 [00:03<00:00, 25.87it/s]
 92%|| 73/79 [00:03<00:00, 26.29it/s]
 96%|| 76/79 [00:03<00:00, 26.76it/s]
100%|| 79/79 [00:03<00:00, 20.50it/s]
, 25.18it/s]
 70%|   | 55/79 [00:02<00:00, 25.55it/s]
 73%|  | 58/79 [00:03<00:00, 25.76it/s]
 77%|  | 61/79 [00:03<00:00, 26.04it/s]
 81%|  | 64/79 [00:03<00:00, 26.06it/s]
 85%| | 67/79 [00:03<00:00, 26.04it/s]
 89%| | 70/79 [00:03<00:00, 25.78it/s]
 92%|| 73/79 [00:03<00:00, 26.15it/s]
 96%|| 76/79 [00:03<00:00, 26.46it/s]
100%|| 79/79 [00:03<00:00, 27.39it/s]
, 24.51it/s]
 70%|   | 55/79 [00:02<00:00, 24.93it/s]
 73%|  | 58/79 [00:02<00:00, 25.10it/s]
 77%|  | 61/79 [00:03<00:00, 25.29it/s]
 81%|  | 64/79 [00:03<00:00, 25.26it/s]
 85%| | 67/79 [00:03<00:00, 25.26it/s]
 89%| | 70/79 [00:03<00:00, 25.38it/s]
 92%|| 73/79 [00:03<00:00, 25.49it/s]
 96%|| 76/79 [00:03<00:00, 26.23it/s]
100%|| 79/79 [00:03<00:00, 27.16it/s]
, 24.63it/s]
 70%|   | 55/79 [00:02<00:00, 25.04it/s]
 73%|  | 58/79 [00:03<00:00, 25.31it/s]
 77%|  | 61/79 [00:03<00:00, 25.36it/s]
 81%|  | 64/79 [00:03<00:00, 25.53it/s]
 85%| | 67/79 [00:03<00:00, 25.77it/s]
 89%| | 70/79 [00:03<00:00, 25.68it/s]
 92%|| 73/79 [00:03<00:00, 26.21it/s]
 96%|| 76/79 [00:03<00:00, 26.87it/s]
100%|| 79/79 [00:03<00:00, 27.62it/s]
, 24.34it/s]
 70%|   | 55/79 [00:02<00:00, 24.78it/s]
 73%|  | 58/79 [00:03<00:00, 24.99it/s]
 77%|  | 61/79 [00:03<00:00, 25.18it/s]
 81%|  | 64/79 [00:03<00:00, 25.21it/s]
 85%| | 67/79 [00:03<00:00, 25.17it/s]
 89%| | 70/79 [00:03<00:00, 24.84it/s]
 92%|| 73/79 [00:03<00:00, 25.36it/s]
 96%|| 76/79 [00:03<00:00, 26.11it/s]
100%|| 79/79 [00:03<00:00, 27.04it/s]
, 24.30it/s]
 70%|   | 55/79 [00:02<00:00, 24.68it/s]
 73%|  | 58/79 [00:03<00:00, 24.86it/s]
 77%|  | 61/79 [00:03<00:00, 25.25it/s]
 81%|  | 64/79 [00:03<00:00, 25.40it/s]
 85%| | 67/79 [00:03<00:00, 25.36it/s]
 89%| | 70/79 [00:03<00:00, 25.58it/s]
 92%|| 73/79 [00:03<00:00, 26.06it/s]
 96%|| 76/79 [00:03<00:00, 26.79it/s]
100%|| 79/79 [00:03<00:00, 27.66it/s]
, 24.85it/s]
 70%|   | 55/79 [00:02<00:00, 25.06it/s]
 73%|  | 58/79 [00:03<00:00, 25.42it/s]
 77%|  | 61/79 [00:03<00:00, 25.53it/s]
 81%|  | 64/79 [00:03<00:00, 25.64it/s]
 85%| | 67/79 [00:03<00:00, 25.80it/s]
 89%| | 70/79 [00:03<00:00, 25.80it/s]
 92%|| 73/79 [00:03<00:00, 26.14it/s]
 96%|| 76/79 [00:03<00:00, 26.72it/s]
100%|| 79/79 [00:03<00:00, 27.40it/s]
, 24.27it/s]
 70%|   | 55/79 [00:02<00:00, 24.69it/s]
 73%|  | 58/79 [00:03<00:00, 24.88it/s]
 77%|  | 61/79 [00:03<00:00, 24.69it/s]
 81%|  | 64/79 [00:03<00:00, 24.77it/s]
 85%| | 67/79 [00:03<00:00, 25.01it/s]
 89%| | 70/79 [00:03<00:00, 25.01it/s]
 92%|| 73/79 [00:03<00:00, 25.39it/s]
 96%|| 76/79 [00:03<00:00, 26.03it/s]
100%|| 79/79 [00:03<00:00, 19.98it/s]
, 24.63it/s]
 70%|   | 55/79 [00:02<00:00, 24.94it/s]
 73%|  | 58/79 [00:03<00:00, 25.23it/s]
 77%|  | 61/79 [00:03<00:00, 25.53it/s]
 81%|  | 64/79 [00:03<00:00, 25.55it/s]
 85%| | 67/79 [00:03<00:00, 25.66it/s]
 89%| | 70/79 [00:03<00:00, 25.77it/s]
 92%|| 73/79 [00:03<00:00, 25.96it/s]
 96%|| 76/79 [00:03<00:00, 26.64it/s]
100%|| 79/79 [00:03<00:00, 27.56it/s]
, 24.37it/s]
 70%|   | 55/79 [00:02<00:00, 24.68it/s]
 73%|  | 58/79 [00:03<00:00, 24.77it/s]
 77%|  | 61/79 [00:03<00:00, 24.71it/s]
 81%|  | 64/79 [00:03<00:00, 24.87it/s]
 85%| | 67/79 [00:03<00:00, 24.56it/s]
 89%| | 70/79 [00:03<00:00, 24.88it/s]
 92%|| 73/79 [00:03<00:00, 24.79it/s]
 96%|| 76/79 [00:03<00:00, 25.64it/s]
100%|| 79/79 [00:03<00:00, 26.58it/s]
, 24.09it/s]
 70%|   | 55/79 [00:02<00:00, 24.57it/s]
 73%|  | 58/79 [00:03<00:00, 24.66it/s]
 77%|  | 61/79 [00:03<00:00, 24.90it/s]
 81%|  | 64/79 [00:03<00:00, 24.76it/s]
 85%| | 67/79 [00:03<00:00, 24.58it/s]
 89%| | 70/79 [00:03<00:00, 24.94it/s]
 92%|| 73/79 [00:03<00:00, 25.21it/s]
 96%|| 76/79 [00:03<00:00, 26.00it/s]
100%|| 79/79 [00:03<00:00, 26.84it/s]
, 24.73it/s]
 70%|   | 55/79 [00:02<00:00, 25.13it/s]
 73%|  | 58/79 [00:03<00:00, 25.06it/s]
 77%|  | 61/79 [00:03<00:00, 25.28it/s]
 81%|  | 64/79 [00:03<00:00, 25.44it/s]
 85%| | 67/79 [00:03<00:00, 25.21it/s]
 89%| | 70/79 [00:03<00:00, 25.15it/s]
 92%|| 73/79 [00:03<00:00, 25.73it/s]
 96%|| 76/79 [00:03<00:00, 26.48it/s]
100%|| 79/79 [00:03<00:00, 27.27it/s]
15it/s]
 68%|   | 54/79 [00:03<00:01, 24.45it/s]
 72%|  | 57/79 [00:03<00:00, 24.65it/s]
 76%|  | 60/79 [00:03<00:00, 24.85it/s]
 80%|  | 63/79 [00:03<00:00, 25.16it/s]
 84%| | 66/79 [00:03<00:00, 25.46it/s]
 87%| | 69/79 [00:03<00:00, 25.42it/s]
 91%| | 72/79 [00:03<00:00, 25.47it/s]
 95%|| 75/79 [00:03<00:00, 26.25it/s]
 99%|| 78/79 [00:03<00:00, 26.83it/s]
100%|| 79/79 [00:04<00:00, 19.73it/s]
61it/s]
 68%|   | 54/79 [00:02<00:01, 23.96it/s]
 72%|  | 57/79 [00:03<00:00, 24.23it/s]
 76%|  | 60/79 [00:03<00:00, 24.29it/s]
 80%|  | 63/79 [00:03<00:00, 24.72it/s]
 84%| | 66/79 [00:03<00:00, 25.05it/s]
 87%| | 69/79 [00:03<00:00, 24.75it/s]
 91%| | 72/79 [00:03<00:00, 24.96it/s]
 95%|| 75/79 [00:03<00:00, 25.83it/s]
 99%|| 78/79 [00:03<00:00, 26.46it/s]
100%|| 79/79 [00:04<00:00, 19.65it/s]
, 24.25it/s]
 70%|   | 55/79 [00:03<00:00, 24.45it/s]
 73%|  | 58/79 [00:03<00:00, 24.65it/s]
 77%|  | 61/79 [00:03<00:00, 25.00it/s]
 81%|  | 64/79 [00:03<00:00, 25.21it/s]
 85%| | 67/79 [00:03<00:00, 25.36it/s]
 89%| | 70/79 [00:03<00:00, 25.22it/s]
 92%|| 73/79 [00:03<00:00, 25.61it/s]
 96%|| 76/79 [00:03<00:00, 26.48it/s]
100%|| 79/79 [00:03<00:00, 26.66it/s]
, 23.64it/s]
 70%|   | 55/79 [00:03<00:01, 23.99it/s]
 73%|  | 58/79 [00:03<00:00, 24.54it/s]
 77%|  | 61/79 [00:03<00:00, 24.77it/s]
 81%|  | 64/79 [00:03<00:00, 24.92it/s]
 85%| | 67/79 [00:03<00:00, 24.96it/s]
 89%| | 70/79 [00:03<00:00, 25.31it/s]
 92%|| 73/79 [00:03<00:00, 25.47it/s]
 96%|| 76/79 [00:03<00:00, 26.39it/s]
100%|| 79/79 [00:04<00:00, 19.63it/s]
, 24.11it/s]
 70%|   | 55/79 [00:02<00:00, 24.65it/s]
 73%|  | 58/79 [00:03<00:00, 24.79it/s]
 77%|  | 61/79 [00:03<00:00, 24.92it/s]
 81%|  | 64/79 [00:03<00:00, 24.88it/s]
 85%| | 67/79 [00:03<00:00, 25.26it/s]
 89%| | 70/79 [00:03<00:00, 22.72it/s]
 92%|| 73/79 [00:03<00:00, 22.47it/s]
 96%|| 76/79 [00:03<00:00, 23.89it/s]
100%|| 79/79 [00:03<00:00, 25.40it/s]
, 23.55it/s]
 70%|   | 55/79 [00:03<00:00, 24.16it/s]
 73%|  | 58/79 [00:03<00:00, 24.14it/s]
 77%|  | 61/79 [00:03<00:00, 24.42it/s]
 81%|  | 64/79 [00:03<00:00, 24.73it/s]
 85%| | 67/79 [00:03<00:00, 24.68it/s]
 89%| | 70/79 [00:03<00:00, 24.80it/s]
 92%|| 73/79 [00:03<00:00, 25.34it/s]
 96%|| 76/79 [00:03<00:00, 26.10it/s]
100%|| 79/79 [00:03<00:00, 27.14it/s]
, 24.34it/s]
 70%|   | 55/79 [00:03<00:00, 24.59it/s]
 73%|  | 58/79 [00:03<00:00, 22.67it/s]
 77%|  | 61/79 [00:03<00:00, 23.49it/s]
 81%|  | 64/79 [00:03<00:00, 23.77it/s]
 85%| | 67/79 [00:03<00:00, 24.33it/s]
 89%| | 70/79 [00:03<00:00, 24.54it/s]
 92%|| 73/79 [00:03<00:00, 25.20it/s]
 96%|| 76/79 [00:03<00:00, 25.96it/s]
100%|| 79/79 [00:03<00:00, 26.89it/s]
, 24.03it/s]
 70%|   | 55/79 [00:03<00:00, 24.44it/s]
 73%|  | 58/79 [00:03<00:00, 24.69it/s]
 77%|  | 61/79 [00:03<00:00, 24.85it/s]
 81%|  | 64/79 [00:03<00:00, 24.87it/s]
 85%| | 67/79 [00:03<00:00, 24.99it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 25.20it/s]
 96%|| 76/79 [00:03<00:00, 25.84it/s]
100%|| 79/79 [00:03<00:00, 26.61it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:01, 23.72it/s]
 73%|  | 58/79 [00:03<00:00, 24.04it/s]
 77%|  | 61/79 [00:03<00:00, 24.11it/s]
 81%|  | 64/79 [00:03<00:00, 24.31it/s]
 85%| | 67/79 [00:03<00:00, 24.42it/s]
 89%| | 70/79 [00:03<00:00, 24.46it/s]
 92%|| 73/79 [00:03<00:00, 24.94it/s]
 96%|| 76/79 [00:03<00:00, 25.75it/s]
100%|| 79/79 [00:04<00:00, 26.65it/s]
, 23.95it/s]
 70%|   | 55/79 [00:03<00:00, 24.38it/s]
 73%|  | 58/79 [00:03<00:00, 24.55it/s]
 77%|  | 61/79 [00:03<00:00, 24.57it/s]
 81%|  | 64/79 [00:03<00:00, 24.99it/s]
 85%| | 67/79 [00:03<00:00, 24.88it/s]
 89%| | 70/79 [00:03<00:00, 24.92it/s]
 92%|| 73/79 [00:03<00:00, 25.14it/s]
 96%|| 76/79 [00:03<00:00, 25.76it/s]
100%|| 79/79 [00:04<00:00, 26.63it/s]
, 23.55it/s]
 70%|   | 55/79 [00:03<00:01, 23.61it/s]
 73%|  | 58/79 [00:03<00:00, 23.92it/s]
 77%|  | 61/79 [00:03<00:00, 24.27it/s]
 81%|  | 64/79 [00:03<00:00, 24.26it/s]
 85%| | 67/79 [00:03<00:00, 24.41it/s]
 89%| | 70/79 [00:03<00:00, 24.52it/s]
 92%|| 73/79 [00:03<00:00, 25.06it/s]
 96%|| 76/79 [00:03<00:00, 25.69it/s]
100%|| 79/79 [00:04<00:00, 26.56it/s]
, 23.80it/s]
 70%|   | 55/79 [00:03<00:00, 24.01it/s]
 73%|  | 58/79 [00:03<00:00, 24.26it/s]
 77%|  | 61/79 [00:03<00:00, 24.32it/s]
 81%|  | 64/79 [00:03<00:00, 24.43it/s]
 85%| | 67/79 [00:03<00:00, 24.63it/s]
 89%| | 70/79 [00:03<00:00, 24.77it/s]
 92%|| 73/79 [00:03<00:00, 24.91it/s]
 96%|| 76/79 [00:03<00:00, 25.53it/s]
100%|| 79/79 [00:04<00:00, 26.27it/s]
, 23.08it/s]
 70%|   | 55/79 [00:03<00:01, 23.03it/s]
 73%|  | 58/79 [00:03<00:00, 23.17it/s]
 77%|  | 61/79 [00:03<00:00, 23.37it/s]
 81%|  | 64/79 [00:03<00:00, 23.55it/s]
 85%| | 67/79 [00:03<00:00, 23.36it/s]
 89%| | 70/79 [00:03<00:00, 23.00it/s]
 92%|| 73/79 [00:03<00:00, 23.68it/s]
 96%|| 76/79 [00:03<00:00, 24.67it/s]
100%|| 79/79 [00:04<00:00, 25.82it/s]
, 23.48it/s]
 70%|   | 55/79 [00:03<00:00, 24.21it/s]
 73%|  | 58/79 [00:03<00:00, 24.41it/s]
 77%|  | 61/79 [00:03<00:00, 24.80it/s]
 81%|  | 64/79 [00:03<00:00, 25.06it/s]
 85%| | 67/79 [00:03<00:00, 25.36it/s]
 89%| | 70/79 [00:03<00:00, 25.27it/s]
 92%|| 73/79 [00:03<00:00, 25.32it/s]
 96%|| 76/79 [00:03<00:00, 25.87it/s]
100%|| 79/79 [00:04<00:00, 26.55it/s]
, 22.62it/s]
 70%|   | 55/79 [00:03<00:01, 23.44it/s]
 73%|  | 58/79 [00:03<00:00, 23.67it/s]
 77%|  | 61/79 [00:03<00:00, 23.80it/s]
 81%|  | 64/79 [00:03<00:00, 23.94it/s]
 85%| | 67/79 [00:03<00:00, 24.28it/s]
 89%| | 70/79 [00:03<00:00, 24.44it/s]
 92%|| 73/79 [00:03<00:00, 24.71it/s]
 96%|| 76/79 [00:04<00:00, 25.66it/s]
100%|| 79/79 [00:04<00:00, 26.38it/s]
2020-06-23 16:02:17,002 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.224145 (0.027034530639648436 s / img per device, on 32 devices)
2020-06-23 16:02:17,021 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:02:17,021 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:02:17,040 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592953345299, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 7, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592953345300, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 7}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:02:27,272 maskrcnn_benchmark.trainer INFO: eta: 1:13:52  iter: 5520  loss: 0.6573 (0.8097)  loss_classifier: 0.2292 (0.2996)  loss_box_reg: 0.0962 (0.1290)  loss_mask: 0.2679 (0.3177)  loss_objectness: 0.0159 (0.0420)  loss_rpn_box_reg: 0.0103 (0.0214)  time: 0.1090 (0.1285)  data: 0.0014 (0.0205)  lr: 0.160000  max mem: 5045
2020-06-23 16:02:29,435 maskrcnn_benchmark.trainer INFO: eta: 1:13:47  iter: 5540  loss: 0.6608 (0.8094)  loss_classifier: 0.2482 (0.2995)  loss_box_reg: 0.1028 (0.1290)  loss_mask: 0.2907 (0.3176)  loss_objectness: 0.0245 (0.0420)  loss_rpn_box_reg: 0.0103 (0.0214)  time: 0.1079 (0.1285)  data: 0.0014 (0.0205)  lr: 0.160000  max mem: 5045
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 16:02:31,602 maskrcnn_benchmark.trainer INFO: eta: 1:13:42  iter: 5560  loss: 0.7745 (0.8093)  loss_classifier: 0.2710 (0.2995)  loss_box_reg: 0.1265 (0.1289)  loss_mask: 0.2789 (0.3175)  loss_objectness: 0.0423 (0.0420)  loss_rpn_box_reg: 0.0147 (0.0214)  time: 0.1080 (0.1284)  data: 0.0014 (0.0204)  lr: 0.160000  max mem: 5045
DONE (t=0.70s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:02:33,767 maskrcnn_benchmark.trainer INFO: eta: 1:13:36  iter: 5580  loss: 0.6257 (0.8088)  loss_classifier: 0.2323 (0.2992)  loss_box_reg: 0.1018 (0.1289)  loss_mask: 0.2789 (0.3173)  loss_objectness: 0.0183 (0.0419)  loss_rpn_box_reg: 0.0095 (0.0214)  time: 0.1077 (0.1283)  data: 0.0013 (0.0203)  lr: 0.160000  max mem: 5045
DONE (t=1.77s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.27611
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.47734
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.29163
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.16006
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.30917
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.35722
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25833
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.41208
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.43171
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24404
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47337
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.56968
2020-06-23 16:02:35,939 maskrcnn_benchmark.trainer INFO: eta: 1:13:31  iter: 5600  loss: 0.7510 (0.8084)  loss_classifier: 0.2571 (0.2991)  loss_box_reg: 0.1129 (0.1289)  loss_mask: 0.2928 (0.3172)  loss_objectness: 0.0245 (0.0419)  loss_rpn_box_reg: 0.0103 (0.0214)  time: 0.1080 (0.1283)  data: 0.0015 (0.0203)  lr: 0.160000  max mem: 5045
2020-06-23 16:02:38,119 maskrcnn_benchmark.trainer INFO: eta: 1:13:27  iter: 5620  loss: 0.6400 (0.8080)  loss_classifier: 0.2390 (0.2988)  loss_box_reg: 0.1062 (0.1288)  loss_mask: 0.2866 (0.3171)  loss_objectness: 0.0261 (0.0419)  loss_rpn_box_reg: 0.0079 (0.0214)  time: 0.1083 (0.1282)  data: 0.0014 (0.0202)  lr: 0.160000  max mem: 5045
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:02:40,280 maskrcnn_benchmark.trainer INFO: eta: 1:13:22  iter: 5640  loss: 0.6880 (0.8075)  loss_classifier: 0.2259 (0.2986)  loss_box_reg: 0.0839 (0.1287)  loss_mask: 0.2606 (0.3169)  loss_objectness: 0.0238 (0.0419)  loss_rpn_box_reg: 0.0092 (0.0214)  time: 0.1078 (0.1281)  data: 0.0014 (0.0201)  lr: 0.160000  max mem: 5045
DONE (t=2.06s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:02:42,439 maskrcnn_benchmark.trainer INFO: eta: 1:13:17  iter: 5660  loss: 0.6816 (0.8070)  loss_classifier: 0.2281 (0.2984)  loss_box_reg: 0.0980 (0.1286)  loss_mask: 0.2714 (0.3168)  loss_objectness: 0.0179 (0.0419)  loss_rpn_box_reg: 0.0094 (0.0214)  time: 0.1076 (0.1280)  data: 0.0014 (0.0201)  lr: 0.160000  max mem: 5045
2020-06-23 16:02:44,584 maskrcnn_benchmark.trainer INFO: eta: 1:13:11  iter: 5680  loss: 0.5857 (0.8065)  loss_classifier: 0.2012 (0.2981)  loss_box_reg: 0.0968 (0.1285)  loss_mask: 0.2674 (0.3167)  loss_objectness: 0.0203 (0.0418)  loss_rpn_box_reg: 0.0072 (0.0214)  time: 0.1068 (0.1280)  data: 0.0014 (0.0200)  lr: 0.160000  max mem: 5045
DONE (t=2.87s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.26420
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.44966
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.27189
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11655
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.28617
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.39553
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25395
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.39282
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.40961
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21192
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.45240
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.56194
2020-06-23 16:02:45,487 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.2761061897448513, segm mAP: 0.2642018693429552
:::MLLOG {"namespace": "", "time_ms": 1592953365487, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.2761061897448513, "SEGM": 0.2642018693429552}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 6}}
:::MLLOG {"namespace": "", "time_ms": 1592953365487, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 6}}
2020-06-23 16:02:46,881 maskrcnn_benchmark.trainer INFO: eta: 1:13:07  iter: 5700  loss: 0.6826 (0.8061)  loss_classifier: 0.2202 (0.2980)  loss_box_reg: 0.1210 (0.1284)  loss_mask: 0.2903 (0.3166)  loss_objectness: 0.0219 (0.0418)  loss_rpn_box_reg: 0.0149 (0.0214)  time: 0.1075 (0.1279)  data: 0.0016 (0.0199)  lr: 0.160000  max mem: 5045
2020-06-23 16:02:49,028 maskrcnn_benchmark.trainer INFO: eta: 1:13:02  iter: 5720  loss: 0.8124 (0.8060)  loss_classifier: 0.3378 (0.2980)  loss_box_reg: 0.1416 (0.1285)  loss_mask: 0.2746 (0.3164)  loss_objectness: 0.0274 (0.0417)  loss_rpn_box_reg: 0.0109 (0.0214)  time: 0.1071 (0.1279)  data: 0.0015 (0.0199)  lr: 0.160000  max mem: 5045
2020-06-23 16:02:51,194 maskrcnn_benchmark.trainer INFO: eta: 1:12:57  iter: 5740  loss: 0.6565 (0.8057)  loss_classifier: 0.2197 (0.2979)  loss_box_reg: 0.1093 (0.1284)  loss_mask: 0.2749 (0.3163)  loss_objectness: 0.0199 (0.0417)  loss_rpn_box_reg: 0.0135 (0.0214)  time: 0.1080 (0.1278)  data: 0.0015 (0.0198)  lr: 0.160000  max mem: 5045
2020-06-23 16:02:53,361 maskrcnn_benchmark.trainer INFO: eta: 1:12:53  iter: 5760  loss: 0.6638 (0.8053)  loss_classifier: 0.2388 (0.2977)  loss_box_reg: 0.0952 (0.1284)  loss_mask: 0.2541 (0.3161)  loss_objectness: 0.0211 (0.0417)  loss_rpn_box_reg: 0.0081 (0.0214)  time: 0.1079 (0.1277)  data: 0.0014 (0.0197)  lr: 0.160000  max mem: 5045
2020-06-23 16:02:55,507 maskrcnn_benchmark.trainer INFO: eta: 1:12:48  iter: 5780  loss: 0.7122 (0.8050)  loss_classifier: 0.2325 (0.2975)  loss_box_reg: 0.1076 (0.1283)  loss_mask: 0.2734 (0.3160)  loss_objectness: 0.0300 (0.0417)  loss_rpn_box_reg: 0.0240 (0.0214)  time: 0.1066 (0.1276)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5045
2020-06-23 16:02:57,678 maskrcnn_benchmark.trainer INFO: eta: 1:12:43  iter: 5800  loss: 0.6584 (0.8045)  loss_classifier: 0.2403 (0.2973)  loss_box_reg: 0.0938 (0.1283)  loss_mask: 0.2655 (0.3158)  loss_objectness: 0.0166 (0.0417)  loss_rpn_box_reg: 0.0086 (0.0214)  time: 0.1086 (0.1276)  data: 0.0015 (0.0196)  lr: 0.160000  max mem: 5045
2020-06-23 16:02:59,828 maskrcnn_benchmark.trainer INFO: eta: 1:12:38  iter: 5820  loss: 0.6146 (0.8040)  loss_classifier: 0.2282 (0.2971)  loss_box_reg: 0.1042 (0.1282)  loss_mask: 0.2616 (0.3157)  loss_objectness: 0.0178 (0.0416)  loss_rpn_box_reg: 0.0089 (0.0214)  time: 0.1075 (0.1275)  data: 0.0014 (0.0196)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:01,996 maskrcnn_benchmark.trainer INFO: eta: 1:12:33  iter: 5840  loss: 0.7731 (0.8039)  loss_classifier: 0.2884 (0.2971)  loss_box_reg: 0.1330 (0.1282)  loss_mask: 0.2962 (0.3156)  loss_objectness: 0.0299 (0.0416)  loss_rpn_box_reg: 0.0199 (0.0214)  time: 0.1079 (0.1274)  data: 0.0015 (0.0195)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:04,166 maskrcnn_benchmark.trainer INFO: eta: 1:12:28  iter: 5860  loss: 0.7020 (0.8035)  loss_classifier: 0.2210 (0.2969)  loss_box_reg: 0.1075 (0.1282)  loss_mask: 0.2676 (0.3154)  loss_objectness: 0.0200 (0.0415)  loss_rpn_box_reg: 0.0078 (0.0214)  time: 0.1085 (0.1274)  data: 0.0014 (0.0194)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:06,324 maskrcnn_benchmark.trainer INFO: eta: 1:12:23  iter: 5880  loss: 0.6307 (0.8029)  loss_classifier: 0.1952 (0.2967)  loss_box_reg: 0.1002 (0.1281)  loss_mask: 0.2587 (0.3152)  loss_objectness: 0.0212 (0.0415)  loss_rpn_box_reg: 0.0096 (0.0214)  time: 0.1081 (0.1273)  data: 0.0013 (0.0194)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:08,472 maskrcnn_benchmark.trainer INFO: eta: 1:12:19  iter: 5900  loss: 0.6131 (0.8024)  loss_classifier: 0.2003 (0.2964)  loss_box_reg: 0.0871 (0.1280)  loss_mask: 0.2709 (0.3151)  loss_objectness: 0.0214 (0.0415)  loss_rpn_box_reg: 0.0111 (0.0214)  time: 0.1074 (0.1272)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:10,635 maskrcnn_benchmark.trainer INFO: eta: 1:12:14  iter: 5920  loss: 0.6284 (0.8020)  loss_classifier: 0.2120 (0.2962)  loss_box_reg: 0.1048 (0.1280)  loss_mask: 0.2879 (0.3150)  loss_objectness: 0.0200 (0.0414)  loss_rpn_box_reg: 0.0071 (0.0214)  time: 0.1085 (0.1272)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:12,768 maskrcnn_benchmark.trainer INFO: eta: 1:12:09  iter: 5940  loss: 0.7265 (0.8018)  loss_classifier: 0.2548 (0.2962)  loss_box_reg: 0.1135 (0.1279)  loss_mask: 0.2590 (0.3148)  loss_objectness: 0.0300 (0.0414)  loss_rpn_box_reg: 0.0108 (0.0214)  time: 0.1065 (0.1271)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:14,919 maskrcnn_benchmark.trainer INFO: eta: 1:12:04  iter: 5960  loss: 0.7445 (0.8016)  loss_classifier: 0.2961 (0.2961)  loss_box_reg: 0.1387 (0.1280)  loss_mask: 0.2986 (0.3148)  loss_objectness: 0.0228 (0.0414)  loss_rpn_box_reg: 0.0151 (0.0214)  time: 0.1082 (0.1270)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:17,050 maskrcnn_benchmark.trainer INFO: eta: 1:11:59  iter: 5980  loss: 0.7153 (0.8014)  loss_classifier: 0.2526 (0.2961)  loss_box_reg: 0.1262 (0.1279)  loss_mask: 0.2759 (0.3147)  loss_objectness: 0.0231 (0.0414)  loss_rpn_box_reg: 0.0071 (0.0213)  time: 0.1062 (0.1270)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:19,194 maskrcnn_benchmark.trainer INFO: eta: 1:11:55  iter: 6000  loss: 0.6953 (0.8010)  loss_classifier: 0.3000 (0.2960)  loss_box_reg: 0.0930 (0.1279)  loss_mask: 0.2571 (0.3145)  loss_objectness: 0.0241 (0.0413)  loss_rpn_box_reg: 0.0100 (0.0213)  time: 0.1064 (0.1269)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:21,344 maskrcnn_benchmark.trainer INFO: eta: 1:11:50  iter: 6020  loss: 0.6748 (0.8007)  loss_classifier: 0.2526 (0.2959)  loss_box_reg: 0.1114 (0.1279)  loss_mask: 0.2708 (0.3144)  loss_objectness: 0.0256 (0.0413)  loss_rpn_box_reg: 0.0085 (0.0213)  time: 0.1072 (0.1268)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:23,495 maskrcnn_benchmark.trainer INFO: eta: 1:11:45  iter: 6040  loss: 0.5965 (0.8002)  loss_classifier: 0.2284 (0.2957)  loss_box_reg: 0.0839 (0.1278)  loss_mask: 0.2716 (0.3142)  loss_objectness: 0.0117 (0.0412)  loss_rpn_box_reg: 0.0067 (0.0213)  time: 0.1068 (0.1268)  data: 0.0013 (0.0189)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:25,655 maskrcnn_benchmark.trainer INFO: eta: 1:11:40  iter: 6060  loss: 0.6845 (0.7999)  loss_classifier: 0.2427 (0.2956)  loss_box_reg: 0.1077 (0.1278)  loss_mask: 0.2776 (0.3141)  loss_objectness: 0.0241 (0.0412)  loss_rpn_box_reg: 0.0108 (0.0213)  time: 0.1075 (0.1267)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:27,811 maskrcnn_benchmark.trainer INFO: eta: 1:11:36  iter: 6080  loss: 0.6140 (0.7994)  loss_classifier: 0.2043 (0.2954)  loss_box_reg: 0.0956 (0.1277)  loss_mask: 0.2535 (0.3139)  loss_objectness: 0.0216 (0.0411)  loss_rpn_box_reg: 0.0079 (0.0213)  time: 0.1076 (0.1267)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:29,977 maskrcnn_benchmark.trainer INFO: eta: 1:11:31  iter: 6100  loss: 0.7771 (0.7993)  loss_classifier: 0.2803 (0.2953)  loss_box_reg: 0.1143 (0.1277)  loss_mask: 0.2894 (0.3138)  loss_objectness: 0.0238 (0.0411)  loss_rpn_box_reg: 0.0152 (0.0213)  time: 0.1077 (0.1266)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:32,146 maskrcnn_benchmark.trainer INFO: eta: 1:11:27  iter: 6120  loss: 0.6826 (0.7992)  loss_classifier: 0.2584 (0.2953)  loss_box_reg: 0.1159 (0.1277)  loss_mask: 0.2661 (0.3137)  loss_objectness: 0.0231 (0.0412)  loss_rpn_box_reg: 0.0093 (0.0213)  time: 0.1081 (0.1265)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:34,294 maskrcnn_benchmark.trainer INFO: eta: 1:11:22  iter: 6140  loss: 0.6135 (0.7986)  loss_classifier: 0.2079 (0.2950)  loss_box_reg: 0.0926 (0.1276)  loss_mask: 0.2661 (0.3136)  loss_objectness: 0.0219 (0.0411)  loss_rpn_box_reg: 0.0105 (0.0213)  time: 0.1067 (0.1265)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:36,450 maskrcnn_benchmark.trainer INFO: eta: 1:11:18  iter: 6160  loss: 0.6133 (0.7982)  loss_classifier: 0.2198 (0.2948)  loss_box_reg: 0.0981 (0.1275)  loss_mask: 0.2695 (0.3135)  loss_objectness: 0.0203 (0.0411)  loss_rpn_box_reg: 0.0070 (0.0213)  time: 0.1074 (0.1264)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:38,610 maskrcnn_benchmark.trainer INFO: eta: 1:11:13  iter: 6180  loss: 0.6246 (0.7977)  loss_classifier: 0.2185 (0.2947)  loss_box_reg: 0.1074 (0.1275)  loss_mask: 0.2669 (0.3133)  loss_objectness: 0.0124 (0.0410)  loss_rpn_box_reg: 0.0093 (0.0212)  time: 0.1075 (0.1264)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:40,766 maskrcnn_benchmark.trainer INFO: eta: 1:11:08  iter: 6200  loss: 0.7363 (0.7976)  loss_classifier: 0.2483 (0.2946)  loss_box_reg: 0.1168 (0.1275)  loss_mask: 0.2835 (0.3133)  loss_objectness: 0.0296 (0.0410)  loss_rpn_box_reg: 0.0094 (0.0212)  time: 0.1078 (0.1263)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:42,923 maskrcnn_benchmark.trainer INFO: eta: 1:11:04  iter: 6220  loss: 0.7338 (0.7973)  loss_classifier: 0.2497 (0.2945)  loss_box_reg: 0.1325 (0.1274)  loss_mask: 0.2879 (0.3131)  loss_objectness: 0.0233 (0.0410)  loss_rpn_box_reg: 0.0070 (0.0212)  time: 0.1070 (0.1262)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:45,067 maskrcnn_benchmark.trainer INFO: eta: 1:10:59  iter: 6240  loss: 0.6629 (0.7969)  loss_classifier: 0.2643 (0.2944)  loss_box_reg: 0.1116 (0.1274)  loss_mask: 0.2693 (0.3130)  loss_objectness: 0.0185 (0.0409)  loss_rpn_box_reg: 0.0072 (0.0212)  time: 0.1071 (0.1262)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:47,224 maskrcnn_benchmark.trainer INFO: eta: 1:10:55  iter: 6260  loss: 0.6774 (0.7966)  loss_classifier: 0.2570 (0.2943)  loss_box_reg: 0.1091 (0.1273)  loss_mask: 0.2715 (0.3129)  loss_objectness: 0.0175 (0.0409)  loss_rpn_box_reg: 0.0085 (0.0212)  time: 0.1068 (0.1261)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:49,374 maskrcnn_benchmark.trainer INFO: eta: 1:10:50  iter: 6280  loss: 0.5525 (0.7960)  loss_classifier: 0.1742 (0.2940)  loss_box_reg: 0.0828 (0.1273)  loss_mask: 0.2425 (0.3127)  loss_objectness: 0.0243 (0.0408)  loss_rpn_box_reg: 0.0106 (0.0212)  time: 0.1069 (0.1261)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:51,519 maskrcnn_benchmark.trainer INFO: eta: 1:10:46  iter: 6300  loss: 0.6625 (0.7958)  loss_classifier: 0.2428 (0.2939)  loss_box_reg: 0.1046 (0.1272)  loss_mask: 0.2803 (0.3126)  loss_objectness: 0.0251 (0.0408)  loss_rpn_box_reg: 0.0110 (0.0212)  time: 0.1073 (0.1260)  data: 0.0015 (0.0182)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:53,681 maskrcnn_benchmark.trainer INFO: eta: 1:10:41  iter: 6320  loss: 0.6652 (0.7956)  loss_classifier: 0.2573 (0.2939)  loss_box_reg: 0.1311 (0.1272)  loss_mask: 0.2818 (0.3125)  loss_objectness: 0.0172 (0.0408)  loss_rpn_box_reg: 0.0081 (0.0212)  time: 0.1078 (0.1259)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5045
2020-06-23 16:03:55,826 maskrcnn_benchmark.trainer INFO: eta: 1:10:37  iter: 6340  loss: 0.6985 (0.7953)  loss_classifier: 0.2576 (0.2937)  loss_box_reg: 0.1135 (0.1272)  loss_mask: 0.2812 (0.3124)  loss_objectness: 0.0309 (0.0408)  loss_rpn_box_reg: 0.0153 (0.0212)  time: 0.1076 (0.1259)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5047
2020-06-23 16:03:58,005 maskrcnn_benchmark.trainer INFO: eta: 1:10:33  iter: 6360  loss: 0.6483 (0.7949)  loss_classifier: 0.2301 (0.2935)  loss_box_reg: 0.1138 (0.1272)  loss_mask: 0.2753 (0.3123)  loss_objectness: 0.0220 (0.0408)  loss_rpn_box_reg: 0.0077 (0.0212)  time: 0.1093 (0.1258)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5047
2020-06-23 16:04:00,139 maskrcnn_benchmark.trainer INFO: eta: 1:10:28  iter: 6380  loss: 0.6731 (0.7946)  loss_classifier: 0.2448 (0.2934)  loss_box_reg: 0.0882 (0.1271)  loss_mask: 0.2658 (0.3122)  loss_objectness: 0.0177 (0.0407)  loss_rpn_box_reg: 0.0087 (0.0212)  time: 0.1072 (0.1258)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5047
2020-06-23 16:04:02,302 maskrcnn_benchmark.trainer INFO: eta: 1:10:24  iter: 6400  loss: 0.6688 (0.7941)  loss_classifier: 0.2173 (0.2932)  loss_box_reg: 0.1074 (0.1271)  loss_mask: 0.2598 (0.3121)  loss_objectness: 0.0141 (0.0406)  loss_rpn_box_reg: 0.0078 (0.0211)  time: 0.1083 (0.1257)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5047
:::MLLOG {"namespace": "", "time_ms": 1592953444361, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1592953444361, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1592953444361, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 7}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
2020-06-23 16:04:04,591 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
Done (t=0.27s)
creating index...
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
Done (t=0.27s)
creating index...
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
Done (t=0.28s)
creating index...
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.28s)
index created!
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
2020-06-23 16:04:04,896 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.29it/s]
  5%|         | 4/79 [00:00<00:41,  1.80it/s]
  9%|         | 7/79 [00:01<00:28,  2.50it/s]
 13%|        | 10/79 [00:01<00:20,  3.42it/s]
 16%|        | 13/79 [00:01<00:14,  4.62it/s]
 20%|        | 16/79 [00:01<00:10,  6.13it/s]
 24%|       | 19/79 [00:01<00:07,  7.92it/s]
 28%|       | 22/79 [00:01<00:05,  9.97it/s]
 32%|      | 25/79 [00:01<00:04, 12.16it/s]
 35%|      | 28/79 [00:01<00:03, 14.41it/s]
 39%|      | 31/79 [00:01<00:02, 16.50it/s]
 43%|     | 34/79 [00:02<00:02, 18.31it/s]
 47%|     | 37/79 [00:02<00:02, 19.84it/s]
 51%|     | 40/79 [00:02<00:01, 20.73it/s]
 54%|    | 43/79 [00:02<00:01, 21.88it/s]
 58%|    | 46/79 [00:02<00:01, 22.59it/s]
 62%|   | 49/79 [00:02<00:01, 23.24it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.24it/s]
  4%|         | 3/79 [00:00<00:44,  1.71it/s]
  8%|         | 6/79 [00:01<00:30,  2.37it/s]
 11%|        | 9/79 [00:01<00:21,  3.25it/s]
 15%|        | 12/79 [00:01<00:15,  4.41it/s]
 19%|        | 15/79 [00:01<00:10,  5.87it/s]
 23%|       | 18/79 [00:01<00:08,  7.62it/s]
 27%|       | 21/79 [00:01<00:06,  9.65it/s]
 30%|       | 24/79 [00:01<00:04, 11.89it/s]
 34%|      | 27/79 [00:01<00:03, 14.21it/s]
 38%|      | 30/79 [00:02<00:02, 16.35it/s]
 42%|     | 33/79 [00:02<00:02, 18.19it/s]
 46%|     | 36/79 [00:02<00:02, 19.94it/s]
 49%|     | 39/79 [00:02<00:01, 21.37it/s]
 53%|    | 42/79 [00:02<00:01, 22.43it/s]
 57%|    | 45/79 [00:02<00:01, 23.47it/s]
 61%|    | 48/79 [00:02<00:01, 24.18it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.60it/s]
 32%|      | 25/79 [00:01<00:04, 11.80it/s]
 35%|      | 28/79 [00:01<00:03, 14.12it/s]
 39%|      | 31/79 [00:02<00:02, 16.38it/s]
 43%|     | 34/79 [00:02<00:02, 18.36it/s]
 47%|     | 37/79 [00:02<00:02, 20.20it/s]
 51%|     | 40/79 [00:02<00:01, 21.50it/s]
 54%|    | 43/79 [00:02<00:01, 22.47it/s]
 58%|    | 46/79 [00:02<00:01, 23.37it/s]
 62%|   | 49/79 [00:02<00:01, 23.94it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  4%|         | 3/79 [00:00<00:43,  1.74it/s]
  8%|         | 6/79 [00:01<00:30,  2.40it/s]
 11%|        | 9/79 [00:01<00:21,  3.30it/s]
 15%|        | 12/79 [00:01<00:15,  4.45it/s]
 19%|        | 15/79 [00:01<00:10,  5.93it/s]
 23%|       | 18/79 [00:01<00:07,  7.67it/s]
 27%|       | 21/79 [00:01<00:05,  9.70it/s]
 30%|       | 24/79 [00:01<00:04, 11.85it/s]
 34%|      | 27/79 [00:01<00:03, 14.01it/s]
 38%|      | 30/79 [00:02<00:03, 16.10it/s]
 42%|     | 33/79 [00:02<00:02, 17.98it/s]
 46%|     | 36/79 [00:02<00:02, 19.65it/s]
 49%|     | 39/79 [00:02<00:01, 21.02it/s]
 53%|    | 42/79 [00:02<00:01, 22.27it/s]
 57%|    | 45/79 [00:02<00:01, 23.17it/s]
 61%|    | 48/79 [00:02<00:01, 23.72it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 11%|        | 9/79 [00:01<00:23,  3.03it/s]
 15%|        | 12/79 [00:01<00:16,  4.13it/s]
 19%|        | 15/79 [00:01<00:11,  5.51it/s]
 23%|       | 18/79 [00:01<00:08,  7.21it/s]
 27%|       | 21/79 [00:01<00:06,  9.21it/s]
 30%|       | 24/79 [00:01<00:04, 11.40it/s]
 34%|      | 27/79 [00:01<00:03, 13.72it/s]
 38%|      | 30/79 [00:02<00:03, 16.02it/s]
 42%|     | 33/79 [00:02<00:02, 17.97it/s]
 46%|     | 36/79 [00:02<00:02, 19.73it/s]
 49%|     | 39/79 [00:02<00:01, 21.21it/s]
 53%|    | 42/79 [00:02<00:01, 22.40it/s]
 57%|    | 45/79 [00:02<00:01, 23.17it/s]
 61%|    | 48/79 [00:02<00:01, 23.98it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.73it/s]
 39%|      | 31/79 [00:02<00:03, 15.96it/s]
 43%|     | 34/79 [00:02<00:02, 17.99it/s]
 47%|     | 37/79 [00:02<00:02, 19.83it/s]
 51%|     | 40/79 [00:02<00:01, 21.30it/s]
 54%|    | 43/79 [00:02<00:01, 22.38it/s]
 58%|    | 46/79 [00:02<00:01, 23.42it/s]
 62%|   | 49/79 [00:02<00:01, 24.23it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.37it/s]
 32%|      | 25/79 [00:01<00:04, 11.58it/s]
 35%|      | 28/79 [00:01<00:03, 13.84it/s]
 39%|      | 31/79 [00:02<00:02, 16.05it/s]
 43%|     | 34/79 [00:02<00:02, 18.06it/s]
 47%|     | 37/79 [00:02<00:02, 19.82it/s]
 51%|     | 40/79 [00:02<00:01, 21.34it/s]
 54%|    | 43/79 [00:02<00:01, 22.18it/s]
 58%|    | 46/79 [00:02<00:01, 22.89it/s]
 62%|   | 49/79 [00:02<00:01, 23.50it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  4%|         | 3/79 [00:00<00:47,  1.61it/s]
  8%|         | 6/79 [00:01<00:32,  2.23it/s]
 11%|        | 9/79 [00:01<00:22,  3.07it/s]
 15%|        | 12/79 [00:01<00:16,  4.18it/s]
 19%|        | 15/79 [00:01<00:11,  5.58it/s]
 23%|       | 18/79 [00:01<00:08,  7.28it/s]
 27%|       | 21/79 [00:01<00:06,  9.25it/s]
 30%|       | 24/79 [00:01<00:04, 11.44it/s]
 34%|      | 27/79 [00:01<00:03, 13.76it/s]
 38%|      | 30/79 [00:02<00:03, 15.91it/s]
 42%|     | 33/79 [00:02<00:02, 17.96it/s]
 46%|     | 36/79 [00:02<00:02, 19.62it/s]
 49%|     | 39/79 [00:02<00:01, 20.68it/s]
 53%|    | 42/79 [00:02<00:01, 22.04it/s]
 57%|    | 45/79 [00:02<00:01, 22.88it/s]
 61%|    | 48/79 [00:02<00:01, 23.66it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.13it/s]
 28%|       | 22/79 [00:01<00:06,  9.11it/s]
 32%|      | 25/79 [00:01<00:04, 11.31it/s]
 35%|      | 28/79 [00:01<00:03, 13.64it/s]
 39%|      | 31/79 [00:02<00:03, 15.84it/s]
 43%|     | 34/79 [00:02<00:02, 17.84it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 21.04it/s]
 54%|    | 43/79 [00:02<00:01, 22.08it/s]
 58%|    | 46/79 [00:02<00:01, 23.16it/s]
 62%|   | 49/79 [00:02<00:01, 24.15it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.36it/s]
 35%|      | 28/79 [00:01<00:03, 13.70it/s]
 39%|      | 31/79 [00:02<00:03, 15.96it/s]
 43%|     | 34/79 [00:02<00:02, 17.82it/s]
 47%|     | 37/79 [00:02<00:02, 19.59it/s]
 51%|     | 40/79 [00:02<00:01, 21.05it/s]
 54%|    | 43/79 [00:02<00:01, 22.20it/s]
 58%|    | 46/79 [00:02<00:01, 23.01it/s]
 62%|   | 49/79 [00:02<00:01, 23.74it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:00<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.25it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.37it/s]
 35%|      | 28/79 [00:01<00:03, 13.63it/s]
 39%|      | 31/79 [00:02<00:03, 15.91it/s]
 43%|     | 34/79 [00:02<00:02, 17.75it/s]
 47%|     | 37/79 [00:02<00:02, 19.43it/s]
 51%|     | 40/79 [00:02<00:01, 20.95it/s]
 54%|    | 43/79 [00:02<00:01, 22.26it/s]
 58%|    | 46/79 [00:02<00:01, 22.98it/s]
 62%|   | 49/79 [00:02<00:01, 23.54it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.48it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.13it/s]
 32%|      | 25/79 [00:01<00:04, 11.31it/s]
 35%|      | 28/79 [00:01<00:03, 13.63it/s]
 39%|      | 31/79 [00:02<00:03, 15.87it/s]
 43%|     | 34/79 [00:02<00:02, 17.77it/s]
 47%|     | 37/79 [00:02<00:02, 19.42it/s]
 51%|     | 40/79 [00:02<00:01, 20.88it/s]
 54%|    | 43/79 [00:02<00:01, 22.13it/s]
 58%|    | 46/79 [00:02<00:01, 23.20it/s]
 62%|   | 49/79 [00:02<00:01, 23.75it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.41it/s]
 32%|      | 25/79 [00:01<00:04, 11.17it/s]
 35%|      | 28/79 [00:01<00:03, 13.16it/s]
 39%|      | 31/79 [00:02<00:03, 15.42it/s]
 43%|     | 34/79 [00:02<00:02, 17.30it/s]
 47%|     | 37/79 [00:02<00:02, 19.07it/s]
 51%|     | 40/79 [00:02<00:01, 20.65it/s]
 54%|    | 43/79 [00:02<00:01, 21.75it/s]
 58%|    | 46/79 [00:02<00:01, 22.61it/s]
 62%|   | 49/79 [00:02<00:01, 23.30it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.23it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.33it/s]
 32%|      | 25/79 [00:01<00:04, 11.55it/s]
 35%|      | 28/79 [00:01<00:03, 13.81it/s]
 39%|      | 31/79 [00:02<00:03, 15.90it/s]
 43%|     | 34/79 [00:02<00:02, 17.84it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.84it/s]
 54%|    | 43/79 [00:02<00:01, 21.80it/s]
 58%|    | 46/79 [00:02<00:01, 22.84it/s]
 62%|   | 49/79 [00:02<00:01, 23.23it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:43,  1.74it/s]
  9%|         | 7/79 [00:01<00:29,  2.42it/s]
 13%|        | 10/79 [00:01<00:20,  3.31it/s]
 16%|        | 13/79 [00:01<00:14,  4.48it/s]
 20%|        | 16/79 [00:01<00:10,  5.94it/s]
 24%|       | 19/79 [00:01<00:07,  7.68it/s]
 28%|       | 22/79 [00:01<00:05,  9.68it/s]
 32%|      | 25/79 [00:01<00:04, 11.86it/s]
 35%|      | 28/79 [00:01<00:03, 14.04it/s]
 39%|      | 31/79 [00:02<00:02, 16.18it/s]
 43%|     | 34/79 [00:02<00:02, 17.85it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.57it/s]
 54%|    | 43/79 [00:02<00:01, 21.65it/s]
 58%|    | 46/79 [00:02<00:01, 22.34it/s]
 62%|   | 49/79 [00:02<00:01, 23.26it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.05it/s]
 32%|      | 25/79 [00:01<00:04, 11.23it/s]
 35%|      | 28/79 [00:01<00:03, 13.46it/s]
 39%|      | 31/79 [00:02<00:03, 15.77it/s]
 43%|     | 34/79 [00:02<00:02, 17.71it/s]
 47%|     | 37/79 [00:02<00:02, 19.52it/s]
 51%|     | 40/79 [00:02<00:01, 20.89it/s]
 54%|    | 43/79 [00:02<00:01, 22.10it/s]
 58%|    | 46/79 [00:02<00:01, 22.81it/s]
 62%|   | 49/79 [00:02<00:01, 23.39it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.45it/s]
 24%|       | 19/79 [00:01<00:08,  7.12it/s]
 28%|       | 22/79 [00:01<00:06,  9.01it/s]
 32%|      | 25/79 [00:01<00:04, 11.22it/s]
 35%|      | 28/79 [00:01<00:03, 13.41it/s]
 39%|      | 31/79 [00:02<00:03, 15.72it/s]
 43%|     | 34/79 [00:02<00:02, 17.65it/s]
 47%|     | 37/79 [00:02<00:02, 19.35it/s]
 51%|     | 40/79 [00:02<00:01, 20.79it/s]
 54%|    | 43/79 [00:02<00:01, 21.93it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.34it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.39it/s]
 24%|       | 19/79 [00:01<00:08,  7.05it/s]
 28%|       | 22/79 [00:01<00:06,  9.00it/s]
 32%|      | 25/79 [00:01<00:04, 11.15it/s]
 35%|      | 28/79 [00:01<00:03, 13.43it/s]
 39%|      | 31/79 [00:02<00:03, 15.52it/s]
 43%|     | 34/79 [00:02<00:02, 17.62it/s]
 47%|     | 37/79 [00:02<00:02, 19.34it/s]
 51%|     | 40/79 [00:02<00:01, 20.72it/s]
 54%|    | 43/79 [00:02<00:01, 22.00it/s]
 58%|    | 46/79 [00:02<00:01, 22.87it/s]
 62%|   | 49/79 [00:02<00:01, 23.35it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:11,  5.25it/s]
 24%|       | 19/79 [00:01<00:08,  6.84it/s]
 28%|       | 22/79 [00:01<00:06,  8.79it/s]
 32%|      | 25/79 [00:01<00:04, 10.96it/s]
 35%|      | 28/79 [00:02<00:03, 13.26it/s]
 39%|      | 31/79 [00:02<00:03, 15.56it/s]
 43%|     | 34/79 [00:02<00:02, 17.69it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 21.07it/s]
 54%|    | 43/79 [00:02<00:01, 22.40it/s]
 58%|    | 46/79 [00:02<00:01, 23.24it/s]
 62%|   | 49/79 [00:02<00:01, 23.78it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.16it/s]
 32%|      | 25/79 [00:01<00:04, 11.40it/s]
 35%|      | 28/79 [00:01<00:03, 13.53it/s]
 39%|      | 31/79 [00:02<00:03, 15.66it/s]
 43%|     | 34/79 [00:02<00:02, 17.63it/s]
 47%|     | 37/79 [00:02<00:02, 19.41it/s]
 51%|     | 40/79 [00:02<00:01, 20.83it/s]
 54%|    | 43/79 [00:02<00:01, 21.89it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.38it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.14it/s]
 28%|       | 22/79 [00:01<00:06,  9.11it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.50it/s]
 39%|      | 31/79 [00:02<00:03, 15.54it/s]
 43%|     | 34/79 [00:02<00:02, 17.48it/s]
 47%|     | 37/79 [00:02<00:02, 19.25it/s]
 51%|     | 40/79 [00:02<00:01, 20.81it/s]
 54%|    | 43/79 [00:02<00:01, 21.68it/s]
 58%|    | 46/79 [00:02<00:01, 22.65it/s]
 62%|   | 49/79 [00:02<00:01, 23.48it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.07it/s]
 28%|       | 22/79 [00:01<00:06,  9.01it/s]
 32%|      | 25/79 [00:01<00:04, 11.14it/s]
 35%|      | 28/79 [00:01<00:03, 13.38it/s]
 39%|      | 31/79 [00:02<00:03, 15.50it/s]
 43%|     | 34/79 [00:02<00:02, 17.45it/s]
 47%|     | 37/79 [00:02<00:02, 19.18it/s]
 51%|     | 40/79 [00:02<00:01, 20.62it/s]
 54%|    | 43/79 [00:02<00:01, 21.67it/s]
 58%|    | 46/79 [00:02<00:01, 22.30it/s]
 62%|   | 49/79 [00:02<00:01, 23.13it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.08it/s]
 28%|       | 22/79 [00:01<00:06,  8.97it/s]
 32%|      | 25/79 [00:01<00:04, 11.12it/s]
 35%|      | 28/79 [00:01<00:03, 13.35it/s]
 39%|      | 31/79 [00:02<00:03, 15.56it/s]
 43%|     | 34/79 [00:02<00:02, 17.55it/s]
 47%|     | 37/79 [00:02<00:02, 19.27it/s]
 51%|     | 40/79 [00:02<00:01, 20.58it/s]
 54%|    | 43/79 [00:02<00:01, 21.74it/s]
 58%|    | 46/79 [00:02<00:01, 22.52it/s]
 62%|   | 49/79 [00:02<00:01, 23.26it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.09it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.05it/s]
 35%|      | 28/79 [00:02<00:03, 13.30it/s]
 39%|      | 31/79 [00:02<00:03, 15.52it/s]
 43%|     | 34/79 [00:02<00:02, 17.48it/s]
 47%|     | 37/79 [00:02<00:02, 19.24it/s]
 51%|     | 40/79 [00:02<00:01, 20.67it/s]
 54%|    | 43/79 [00:02<00:01, 21.83it/s]
 58%|    | 46/79 [00:02<00:01, 22.58it/s]
 62%|   | 49/79 [00:02<00:01, 23.03it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 27%|       | 21/79 [00:01<00:06,  8.81it/s]
 29%|       | 23/79 [00:01<00:05, 10.57it/s]
 33%|      | 26/79 [00:01<00:04, 12.72it/s]
 37%|      | 29/79 [00:02<00:03, 14.78it/s]
 41%|      | 32/79 [00:02<00:02, 16.91it/s]
 44%|     | 35/79 [00:02<00:02, 18.56it/s]
 48%|     | 38/79 [00:02<00:02, 19.89it/s]
 52%|    | 41/79 [00:02<00:01, 20.99it/s]
 56%|    | 44/79 [00:02<00:01, 21.90it/s]
 59%|    | 47/79 [00:02<00:01, 22.60it/s]
 63%|   | 50/79 [00:02<00:01, 23.0
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.28it/s]
 32%|      | 25/79 [00:01<00:04, 11.31it/s]
 35%|      | 28/79 [00:01<00:03, 12.90it/s]
 39%|      | 31/79 [00:02<00:03, 14.38it/s]
 43%|     | 34/79 [00:02<00:02, 15.98it/s]
 47%|     | 37/79 [00:02<00:02, 17.87it/s]
 51%|     | 40/79 [00:02<00:01, 19.67it/s]
 54%|    | 43/79 [00:02<00:01, 21.09it/s]
 58%|    | 46/79 [00:02<00:01, 21.95it/s]
 62%|   | 49/79 [00:02<00:01, 23.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:01<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.34it/s]
 28%|       | 22/79 [00:01<00:06,  9.27it/s]
 32%|      | 25/79 [00:01<00:04, 11.38it/s]
 35%|      | 28/79 [00:01<00:03, 13.60it/s]
 39%|      | 31/79 [00:02<00:03, 15.67it/s]
 43%|     | 34/79 [00:02<00:02, 17.57it/s]
 47%|     | 37/79 [00:02<00:02, 18.97it/s]
 51%|     | 40/79 [00:02<00:01, 20.38it/s]
 54%|    | 43/79 [00:02<00:01, 21.54it/s]
 58%|    | 46/79 [00:02<00:01, 21.99it/s]
 62%|   | 49/79 [00:02<00:01, 22.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:35,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.85it/s]
 20%|        | 16/79 [00:01<00:12,  5.17it/s]
 24%|       | 19/79 [00:01<00:08,  6.77it/s]
 28%|       | 22/79 [00:01<00:06,  8.68it/s]
 32%|      | 25/79 [00:01<00:05, 10.77it/s]
 35%|      | 28/79 [00:02<00:03, 13.01it/s]
 39%|      | 31/79 [00:02<00:03, 15.31it/s]
 43%|     | 34/79 [00:02<00:02, 17.30it/s]
 47%|     | 37/79 [00:02<00:02, 18.99it/s]
 51%|     | 40/79 [00:02<00:01, 20.68it/s]
 54%|    | 43/79 [00:02<00:01, 21.94it/s]
 58%|    | 46/79 [00:02<00:01, 22.87it/s]
 62%|   | 49/79 [00:02<00:01, 23.52it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.17it/s]
 28%|       | 22/79 [00:01<00:06,  9.13it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.47it/s]
 39%|      | 31/79 [00:02<00:03, 15.47it/s]
 43%|     | 34/79 [00:02<00:02, 17.27it/s]
 47%|     | 37/79 [00:02<00:02, 19.08it/s]
 51%|     | 40/79 [00:02<00:01, 20.23it/s]
 54%|    | 43/79 [00:02<00:01, 21.22it/s]
 58%|    | 46/79 [00:02<00:01, 21.66it/s]
 62%|   | 49/79 [00:02<00:01, 22.30it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.20it/s]
 24%|       | 19/79 [00:01<00:08,  6.82it/s]
 28%|       | 22/79 [00:01<00:06,  8.67it/s]
 32%|      | 25/79 [00:01<00:04, 10.83it/s]
 35%|      | 28/79 [00:02<00:03, 12.92it/s]
 39%|      | 31/79 [00:02<00:03, 15.15it/s]
 43%|     | 34/79 [00:02<00:02, 17.13it/s]
 47%|     | 37/79 [00:02<00:02, 18.77it/s]
 51%|     | 40/79 [00:02<00:01, 20.24it/s]
 54%|    | 43/79 [00:02<00:01, 21.12it/s]
 58%|    | 46/79 [00:02<00:01, 22.10it/s]
 62%|   | 49/79 [00:02<00:01, 22.77it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:01<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.27it/s]
 32%|      | 25/79 [00:01<00:04, 11.44it/s]
 35%|      | 28/79 [00:02<00:04, 12.25it/s]
 39%|      | 31/79 [00:02<00:03, 13.57it/s]
 43%|     | 34/79 [00:02<00:02, 15.02it/s]
 47%|     | 37/79 [00:02<00:02, 16.32it/s]
 51%|     | 40/79 [00:02<00:02, 18.19it/s]
 54%|    | 43/79 [00:02<00:01, 19.83it/s]
 58%|    | 46/79 [00:02<00:01, 21.15it/s]
 62%|   | 49/79 [00:02<00:01, 22.37it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.46it/s]
 28%|       | 22/79 [00:01<00:06,  9.40it/s]
 32%|      | 25/79 [00:01<00:04, 11.50it/s]
 35%|      | 28/79 [00:01<00:03, 13.57it/s]
 39%|      | 31/79 [00:02<00:03, 15.51it/s]
 43%|     | 34/79 [00:02<00:02, 17.21it/s]
 47%|     | 37/79 [00:02<00:02, 18.69it/s]
 51%|     | 40/79 [00:02<00:01, 19.93it/s]
 54%|    | 43/79 [00:02<00:01, 20.90it/s]
 58%|    | 46/79 [00:02<00:01, 21.69it/s]
 62%|   | 49/79 [00:02<00:01, 20.58it/s]
 66%|   | 52/79 [00:03<00:01, 24.72it/s]
 70%|   | 55/79 [00:02<00:00, 25.09it/s]
 73%|  | 58/79 [00:03<00:00, 25.37it/s]
 77%|  | 61/79 [00:03<00:00, 25.56it/s]
 81%|  | 64/79 [00:03<00:00, 25.44it/s]
 85%| | 67/79 [00:03<00:00, 25.42it/s]
 89%| | 70/79 [00:03<00:00, 25.24it/s]
 92%|| 73/79 [00:03<00:00, 25.65it/s]
 96%|| 76/79 [00:03<00:00, 26.05it/s]
100%|| 79/79 [00:03<00:00, 26.99it/s]
, 23.81it/s]
 70%|   | 55/79 [00:02<00:01, 23.91it/s]
 73%|  | 58/79 [00:03<00:00, 24.18it/s]
 77%|  | 61/79 [00:03<00:00, 24.21it/s]
 81%|  | 64/79 [00:03<00:00, 24.52it/s]
 85%| | 67/79 [00:03<00:00, 24.52it/s]
 89%| | 70/79 [00:03<00:00, 24.32it/s]
 92%|| 73/79 [00:03<00:00, 24.84it/s]
 96%|| 76/79 [00:03<00:00, 25.70it/s]
100%|| 79/79 [00:03<00:00, 26.57it/s]
, 24.31it/s]
 70%|   | 55/79 [00:02<00:00, 24.87it/s]
 73%|  | 58/79 [00:03<00:00, 24.85it/s]
 77%|  | 61/79 [00:03<00:00, 25.33it/s]
 81%|  | 64/79 [00:03<00:00, 25.32it/s]
 85%| | 67/79 [00:03<00:00, 25.38it/s]
 89%| | 70/79 [00:03<00:00, 25.08it/s]
 92%|| 73/79 [00:03<00:00, 25.62it/s]
 96%|| 76/79 [00:03<00:00, 26.20it/s]
100%|| 79/79 [00:03<00:00, 27.07it/s]
, 24.14it/s]
 70%|   | 55/79 [00:03<00:00, 24.73it/s]
 73%|  | 58/79 [00:03<00:00, 24.86it/s]
 77%|  | 61/79 [00:03<00:00, 25.35it/s]
 81%|  | 64/79 [00:03<00:00, 25.62it/s]
 85%| | 67/79 [00:03<00:00, 25.71it/s]
 89%| | 70/79 [00:03<00:00, 25.67it/s]
 92%|| 73/79 [00:03<00:00, 25.98it/s]
 96%|| 76/79 [00:03<00:00, 26.60it/s]
100%|| 79/79 [00:03<00:00, 27.46it/s]
, 24.67it/s]
 70%|   | 55/79 [00:03<00:00, 25.00it/s]
 73%|  | 58/79 [00:03<00:00, 25.30it/s]
 77%|  | 61/79 [00:03<00:00, 25.33it/s]
 81%|  | 64/79 [00:03<00:00, 25.60it/s]
 85%| | 67/79 [00:03<00:00, 25.80it/s]
 89%| | 70/79 [00:03<00:00, 26.09it/s]
 92%|| 73/79 [00:03<00:00, 26.23it/s]
 96%|| 76/79 [00:03<00:00, 26.87it/s]
100%|| 79/79 [00:03<00:00, 27.62it/s]
, 23.95it/s]
 70%|   | 55/79 [00:03<00:00, 24.47it/s]
 73%|  | 58/79 [00:03<00:00, 24.80it/s]
 77%|  | 61/79 [00:03<00:00, 25.21it/s]
 81%|  | 64/79 [00:03<00:00, 25.36it/s]
 85%| | 67/79 [00:03<00:00, 25.85it/s]
 89%| | 70/79 [00:03<00:00, 26.24it/s]
 92%|| 73/79 [00:03<00:00, 26.45it/s]
 96%|| 76/79 [00:03<00:00, 26.95it/s]
100%|| 79/79 [00:03<00:00, 27.74it/s]
54it/s]
 68%|   | 54/79 [00:02<00:01, 24.83it/s]
 72%|  | 57/79 [00:03<00:00, 24.85it/s]
 76%|  | 60/79 [00:03<00:00, 25.06it/s]
 80%|  | 63/79 [00:03<00:00, 24.87it/s]
 84%| | 66/79 [00:03<00:00, 24.99it/s]
 87%| | 69/79 [00:03<00:00, 24.86it/s]
 91%| | 72/79 [00:03<00:00, 25.24it/s]
 95%|| 75/79 [00:03<00:00, 25.79it/s]
 99%|| 78/79 [00:03<00:00, 26.40it/s]
100%|| 79/79 [00:03<00:00, 19.85it/s]
, 23.87it/s]
 70%|   | 55/79 [00:03<00:00, 24.28it/s]
 73%|  | 58/79 [00:03<00:00, 24.57it/s]
 77%|  | 61/79 [00:03<00:00, 24.64it/s]
 81%|  | 64/79 [00:03<00:00, 24.79it/s]
 85%| | 67/79 [00:03<00:00, 24.76it/s]
 89%| | 70/79 [00:03<00:00, 24.92it/s]
 92%|| 73/79 [00:03<00:00, 25.28it/s]
 96%|| 76/79 [00:03<00:00, 25.92it/s]
100%|| 79/79 [00:03<00:00, 26.82it/s]
63it/s]
 68%|   | 54/79 [00:03<00:01, 24.82it/s]
 72%|  | 57/79 [00:03<00:00, 25.22it/s]
 76%|  | 60/79 [00:03<00:00, 25.40it/s]
 80%|  | 63/79 [00:03<00:00, 25.63it/s]
 84%| | 66/79 [00:03<00:00, 25.89it/s]
 87%| | 69/79 [00:03<00:00, 26.19it/s]
 91%| | 72/79 [00:03<00:00, 25.96it/s]
 95%|| 75/79 [00:03<00:00, 26.62it/s]
 99%|| 78/79 [00:03<00:00, 27.05it/s]
100%|| 79/79 [00:04<00:00, 19.69it/s]
22it/s]
 68%|   | 54/79 [00:02<00:01, 24.20it/s]
 72%|  | 57/79 [00:03<00:00, 24.16it/s]
 76%|  | 60/79 [00:03<00:00, 24.34it/s]
 80%|  | 63/79 [00:03<00:00, 24.32it/s]
 84%| | 66/79 [00:03<00:00, 24.74it/s]
 87%| | 69/79 [00:03<00:00, 24.73it/s]
 91%| | 72/79 [00:03<00:00, 24.89it/s]
 95%|| 75/79 [00:03<00:00, 25.77it/s]
 99%|| 78/79 [00:03<00:00, 26.89it/s]
100%|| 79/79 [00:03<00:00, 19.80it/s]
, 24.35it/s]
 70%|   | 55/79 [00:03<00:00, 24.83it/s]
 73%|  | 58/79 [00:03<00:00, 25.06it/s]
 77%|  | 61/79 [00:03<00:00, 25.14it/s]
 81%|  | 64/79 [00:03<00:00, 25.38it/s]
 85%| | 67/79 [00:03<00:00, 25.60it/s]
 89%| | 70/79 [00:03<00:00, 25.74it/s]
 92%|| 73/79 [00:03<00:00, 26.08it/s]
 96%|| 76/79 [00:03<00:00, 27.05it/s]
100%|| 79/79 [00:03<00:00, 27.33it/s]
, 24.00it/s]
 70%|   | 55/79 [00:03<00:00, 24.39it/s]
 73%|  | 58/79 [00:03<00:00, 24.62it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 25.11it/s]
 85%| | 67/79 [00:03<00:00, 25.17it/s]
 89%| | 70/79 [00:03<00:00, 25.15it/s]
 92%|| 73/79 [00:03<00:00, 25.57it/s]
 96%|| 76/79 [00:03<00:00, 26.10it/s]
100%|| 79/79 [00:03<00:00, 26.89it/s]
, 23.57it/s]
 70%|   | 55/79 [00:03<00:01, 23.86it/s]
 73%|  | 58/79 [00:03<00:00, 24.49it/s]
 77%|  | 61/79 [00:03<00:00, 24.54it/s]
 81%|  | 64/79 [00:03<00:00, 24.60it/s]
 85%| | 67/79 [00:03<00:00, 24.67it/s]
 89%| | 70/79 [00:03<00:00, 24.90it/s]
 92%|| 73/79 [00:03<00:00, 25.22it/s]
 96%|| 76/79 [00:03<00:00, 25.91it/s]
100%|| 79/79 [00:03<00:00, 26.67it/s]
, 23.85it/s]
 70%|   | 55/79 [00:03<00:00, 24.01it/s]
 73%|  | 58/79 [00:03<00:00, 24.36it/s]
 77%|  | 61/79 [00:03<00:00, 24.77it/s]
 81%|  | 64/79 [00:03<00:00, 24.77it/s]
 85%| | 67/79 [00:03<00:00, 24.94it/s]
 89%| | 70/79 [00:03<00:00, 24.97it/s]
 92%|| 73/79 [00:03<00:00, 25.49it/s]
 96%|| 76/79 [00:03<00:00, 26.18it/s]
100%|| 79/79 [00:03<00:00, 27.00it/s]
, 24.27it/s]
 70%|   | 55/79 [00:03<00:00, 24.48it/s]
 73%|  | 58/79 [00:03<00:00, 24.87it/s]
 77%|  | 61/79 [00:03<00:00, 25.13it/s]
 81%|  | 64/79 [00:03<00:00, 25.25it/s]
 85%| | 67/79 [00:03<00:00, 25.33it/s]
 89%| | 70/79 [00:03<00:00, 24.98it/s]
 92%|| 73/79 [00:03<00:00, 25.31it/s]
 96%|| 76/79 [00:03<00:00, 26.01it/s]
100%|| 79/79 [00:03<00:00, 27.04it/s]
17it/s]
 68%|   | 54/79 [00:02<00:01, 24.56it/s]
 72%|  | 57/79 [00:03<00:00, 24.81it/s]
 76%|  | 60/79 [00:03<00:00, 24.75it/s]
 80%|  | 63/79 [00:03<00:00, 24.69it/s]
 84%| | 66/79 [00:03<00:00, 24.85it/s]
 87%| | 69/79 [00:03<00:00, 24.91it/s]
 91%| | 72/79 [00:03<00:00, 25.07it/s]
 95%|| 75/79 [00:03<00:00, 25.69it/s]
 99%|| 78/79 [00:03<00:00, 26.08it/s]
100%|| 79/79 [00:04<00:00, 19.51it/s]
, 23.32it/s]
 70%|   | 55/79 [00:03<00:01, 23.73it/s]
 73%|  | 58/79 [00:03<00:00, 23.91it/s]
 77%|  | 61/79 [00:03<00:00, 24.19it/s]
 81%|  | 64/79 [00:03<00:00, 24.43it/s]
 85%| | 67/79 [00:03<00:00, 24.23it/s]
 89%| | 70/79 [00:03<00:00, 24.29it/s]
 92%|| 73/79 [00:03<00:00, 24.77it/s]
 96%|| 76/79 [00:03<00:00, 25.37it/s]
100%|| 79/79 [00:03<00:00, 26.30it/s]
, 23.99it/s]
 70%|   | 55/79 [00:03<00:00, 24.32it/s]
 73%|  | 58/79 [00:03<00:00, 24.55it/s]
 77%|  | 61/79 [00:03<00:00, 25.11it/s]
 81%|  | 64/79 [00:03<00:00, 25.29it/s]
 85%| | 67/79 [00:03<00:00, 25.44it/s]
 89%| | 70/79 [00:03<00:00, 25.50it/s]
 92%|| 73/79 [00:03<00:00, 25.86it/s]
 96%|| 76/79 [00:03<00:00, 26.40it/s]
100%|| 79/79 [00:03<00:00, 27.38it/s]
, 24.14it/s]
 70%|   | 55/79 [00:03<00:00, 24.25it/s]
 73%|  | 58/79 [00:03<00:00, 24.52it/s]
 77%|  | 61/79 [00:03<00:00, 24.45it/s]
 81%|  | 64/79 [00:03<00:00, 24.88it/s]
 85%| | 67/79 [00:03<00:00, 24.93it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 25.34it/s]
 96%|| 76/79 [00:03<00:00, 25.97it/s]
100%|| 79/79 [00:03<00:00, 26.81it/s]
, 23.83it/s]
 70%|   | 55/79 [00:03<00:00, 24.52it/s]
 73%|  | 58/79 [00:03<00:00, 24.91it/s]
 77%|  | 61/79 [00:03<00:00, 25.29it/s]
 81%|  | 64/79 [00:03<00:00, 25.17it/s]
 85%| | 67/79 [00:03<00:00, 25.54it/s]
 89%| | 70/79 [00:03<00:00, 25.58it/s]
 92%|| 73/79 [00:03<00:00, 25.70it/s]
 96%|| 76/79 [00:03<00:00, 26.31it/s]
100%|| 79/79 [00:04<00:00, 27.22it/s]
, 23.69it/s]
 70%|   | 55/79 [00:03<00:00, 24.06it/s]
 73%|  | 58/79 [00:03<00:00, 24.10it/s]
 77%|  | 61/79 [00:03<00:00, 24.48it/s]
 81%|  | 64/79 [00:03<00:00, 24.50it/s]
 85%| | 67/79 [00:03<00:00, 24.44it/s]
 89%| | 70/79 [00:03<00:00, 24.43it/s]
 92%|| 73/79 [00:03<00:00, 24.90it/s]
 96%|| 76/79 [00:03<00:00, 25.78it/s]
100%|| 79/79 [00:04<00:00, 26.67it/s]
, 23.63it/s]
 70%|   | 55/79 [00:03<00:01, 23.89it/s]
 73%|  | 58/79 [00:03<00:00, 24.20it/s]
 77%|  | 61/79 [00:03<00:00, 23.98it/s]
 81%|  | 64/79 [00:03<00:00, 24.14it/s]
 85%| | 67/79 [00:03<00:00, 24.39it/s]
 89%| | 70/79 [00:03<00:00, 24.61it/s]
 92%|| 73/79 [00:03<00:00, 24.83it/s]
 96%|| 76/79 [00:03<00:00, 25.58it/s]
100%|| 79/79 [00:04<00:00, 26.44it/s]
, 23.70it/s]
 70%|   | 55/79 [00:03<00:01, 23.87it/s]
 73%|  | 58/79 [00:03<00:00, 24.39it/s]
 77%|  | 61/79 [00:03<00:00, 24.49it/s]
 81%|  | 64/79 [00:03<00:00, 24.43it/s]
 85%| | 67/79 [00:03<00:00, 24.70it/s]
 89%| | 70/79 [00:03<00:00, 24.82it/s]
 92%|| 73/79 [00:03<00:00, 25.30it/s]
 96%|| 76/79 [00:03<00:00, 25.92it/s]
100%|| 79/79 [00:04<00:00, 26.71it/s]
, 23.68it/s]
 70%|   | 55/79 [00:03<00:00, 24.16it/s]
 73%|  | 58/79 [00:03<00:00, 24.26it/s]
 77%|  | 61/79 [00:03<00:00, 24.27it/s]
 81%|  | 64/79 [00:03<00:00, 24.47it/s]
 85%| | 67/79 [00:03<00:00, 24.69it/s]
 89%| | 70/79 [00:03<00:00, 24.40it/s]
 92%|| 73/79 [00:03<00:00, 24.86it/s]
 96%|| 76/79 [00:03<00:00, 25.48it/s]
100%|| 79/79 [00:03<00:00, 26.30it/s]
, 23.72it/s]
 70%|   | 55/79 [00:03<00:01, 23.92it/s]
 73%|  | 58/79 [00:03<00:00, 23.99it/s]
 77%|  | 61/79 [00:03<00:00, 24.34it/s]
 81%|  | 64/79 [00:03<00:00, 24.49it/s]
 85%| | 67/79 [00:03<00:00, 24.85it/s]
 89%| | 70/79 [00:03<00:00, 24.87it/s]
 92%|| 73/79 [00:03<00:00, 25.01it/s]
 96%|| 76/79 [00:03<00:00, 26.05it/s]
100%|| 79/79 [00:04<00:00, 26.30it/s]
, 23.04it/s]
 70%|   | 55/79 [00:03<00:01, 23.37it/s]
 73%|  | 58/79 [00:03<00:00, 23.86it/s]
 77%|  | 61/79 [00:03<00:00, 23.98it/s]
 81%|  | 64/79 [00:03<00:00, 23.97it/s]
 85%| | 67/79 [00:03<00:00, 24.14it/s]
 89%| | 70/79 [00:03<00:00, 24.17it/s]
 92%|| 73/79 [00:03<00:00, 24.69it/s]
 96%|| 76/79 [00:03<00:00, 25.36it/s]
100%|| 79/79 [00:04<00:00, 26.23it/s]
, 23.82it/s]
 70%|   | 55/79 [00:03<00:00, 24.24it/s]
 73%|  | 58/79 [00:03<00:00, 24.29it/s]
 77%|  | 61/79 [00:03<00:00, 24.31it/s]
 81%|  | 64/79 [00:03<00:00, 24.37it/s]
 85%| | 67/79 [00:03<00:00, 24.59it/s]
 89%| | 70/79 [00:03<00:00, 24.51it/s]
 92%|| 73/79 [00:03<00:00, 24.81it/s]
 96%|| 76/79 [00:03<00:00, 25.51it/s]
100%|| 79/79 [00:04<00:00, 26.60it/s]
, 22.78it/s]
 70%|   | 55/79 [00:03<00:01, 23.19it/s]
 73%|  | 58/79 [00:03<00:00, 23.39it/s]
 77%|  | 61/79 [00:03<00:00, 23.61it/s]
 81%|  | 64/79 [00:03<00:00, 23.92it/s]
 85%| | 67/79 [00:03<00:00, 23.99it/s]
 89%| | 70/79 [00:03<00:00, 24.05it/s]
 92%|| 73/79 [00:03<00:00, 24.26it/s]
 96%|| 76/79 [00:03<00:00, 25.28it/s]
100%|| 79/79 [00:04<00:00, 26.01it/s]
, 23.08it/s]
 70%|   | 55/79 [00:03<00:01, 23.52it/s]
 73%|  | 58/79 [00:03<00:00, 23.62it/s]
 77%|  | 61/79 [00:03<00:00, 24.12it/s]
 81%|  | 64/79 [00:03<00:00, 24.18it/s]
 85%| | 67/79 [00:03<00:00, 24.47it/s]
 89%| | 70/79 [00:03<00:00, 24.54it/s]
 92%|| 73/79 [00:03<00:00, 24.92it/s]
 96%|| 76/79 [00:03<00:00, 25.48it/s]
100%|| 79/79 [00:04<00:00, 26.15it/s]
, 23.06it/s]
 70%|   | 55/79 [00:03<00:01, 23.71it/s]
 73%|  | 58/79 [00:03<00:00, 24.13it/s]
 77%|  | 61/79 [00:03<00:00, 24.34it/s]
 81%|  | 64/79 [00:03<00:00, 24.47it/s]
 85%| | 67/79 [00:03<00:00, 24.62it/s]
 89%| | 70/79 [00:03<00:00, 24.76it/s]
 92%|| 73/79 [00:03<00:00, 25.32it/s]
 96%|| 76/79 [00:04<00:00, 26.07it/s]
100%|| 79/79 [00:04<00:00, 27.03it/s]
0it/s]
 67%|   | 53/79 [00:03<00:01, 23.32it/s]
 71%|   | 56/79 [00:03<00:00, 23.66it/s]
 75%|  | 59/79 [00:03<00:00, 24.23it/s]
 78%|  | 62/79 [00:03<00:00, 23.74it/s]
 82%| | 65/79 [00:03<00:00, 23.94it/s]
 86%| | 68/79 [00:03<00:00, 23.95it/s]
 90%| | 71/79 [00:03<00:00, 23.88it/s]
 94%|| 74/79 [00:03<00:00, 24.79it/s]
 97%|| 77/79 [00:04<00:00, 25.47it/s]
100%|| 79/79 [00:04<00:00, 18.85it/s]
, 18.50it/s]
 68%|   | 54/79 [00:03<00:01, 17.37it/s]
 71%|   | 56/79 [00:03<00:01, 16.82it/s]
 73%|  | 58/79 [00:03<00:01, 17.02it/s]
 76%|  | 60/79 [00:03<00:01, 17.47it/s]
 78%|  | 62/79 [00:03<00:00, 17.71it/s]
 82%| | 65/79 [00:03<00:00, 18.33it/s]
 85%| | 67/79 [00:03<00:00, 18.27it/s]
 87%| | 69/79 [00:04<00:00, 18.44it/s]
 90%| | 71/79 [00:04<00:00, 18.87it/s]
 94%|| 74/79 [00:04<00:00, 20.68it/s]
 97%|| 77/79 [00:04<00:00, 22.22it/s]
100%|| 79/79 [00:04<00:00, 17.50it/s]
2020-06-23 16:04:09,404 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.507721 (0.028849417114257814 s / img per device, on 32 devices)
2020-06-23 16:04:09,425 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:04:09,425 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:04:09,445 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592953460415, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 8, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592953460416, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 8}}
2020-06-23 16:04:20,512 maskrcnn_benchmark.trainer INFO: eta: 1:11:43  iter: 6420  loss: 0.6363 (0.7937)  loss_classifier: 0.2318 (0.2930)  loss_box_reg: 0.0971 (0.1270)  loss_mask: 0.2728 (0.3120)  loss_objectness: 0.0160 (0.0406)  loss_rpn_box_reg: 0.0063 (0.0211)  time: 0.1084 (0.1282)  data: 0.0013 (0.0204)  lr: 0.160000  max mem: 5047
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:04:22,695 maskrcnn_benchmark.trainer INFO: eta: 1:11:39  iter: 6440  loss: 0.6702 (0.7932)  loss_classifier: 0.2083 (0.2927)  loss_box_reg: 0.0940 (0.1269)  loss_mask: 0.2728 (0.3119)  loss_objectness: 0.0199 (0.0406)  loss_rpn_box_reg: 0.0063 (0.0211)  time: 0.1080 (0.1281)  data: 0.0014 (0.0203)  lr: 0.160000  max mem: 5047
2020-06-23 16:04:24,875 maskrcnn_benchmark.trainer INFO: eta: 1:11:34  iter: 6460  loss: 0.5144 (0.7928)  loss_classifier: 0.1750 (0.2925)  loss_box_reg: 0.0796 (0.1268)  loss_mask: 0.2586 (0.3117)  loss_objectness: 0.0148 (0.0406)  loss_rpn_box_reg: 0.0107 (0.0211)  time: 0.1084 (0.1280)  data: 0.0014 (0.0203)  lr: 0.160000  max mem: 5047
2020-06-23 16:04:27,043 maskrcnn_benchmark.trainer INFO: eta: 1:11:30  iter: 6480  loss: 0.6960 (0.7925)  loss_classifier: 0.2723 (0.2925)  loss_box_reg: 0.1275 (0.1268)  loss_mask: 0.2742 (0.3116)  loss_objectness: 0.0177 (0.0405)  loss_rpn_box_reg: 0.0096 (0.0211)  time: 0.1075 (0.1280)  data: 0.0014 (0.0202)  lr: 0.160000  max mem: 5047
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 16:04:29,193 maskrcnn_benchmark.trainer INFO: eta: 1:11:25  iter: 6500  loss: 0.6637 (0.7922)  loss_classifier: 0.2441 (0.2924)  loss_box_reg: 0.1043 (0.1268)  loss_mask: 0.2701 (0.3115)  loss_objectness: 0.0228 (0.0405)  loss_rpn_box_reg: 0.0109 (0.0211)  time: 0.1073 (0.1279)  data: 0.0014 (0.0201)  lr: 0.160000  max mem: 5047
DONE (t=0.96s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:04:31,341 maskrcnn_benchmark.trainer INFO: eta: 1:11:20  iter: 6520  loss: 0.7622 (0.7922)  loss_classifier: 0.2576 (0.2923)  loss_box_reg: 0.1328 (0.1268)  loss_mask: 0.2931 (0.3114)  loss_objectness: 0.0371 (0.0405)  loss_rpn_box_reg: 0.0149 (0.0211)  time: 0.1072 (0.1279)  data: 0.0015 (0.0201)  lr: 0.160000  max mem: 5047
DONE (t=2.02s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.28732
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.49534
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.30547
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.16248
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.30806
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.37279
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.26328
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.42486
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44921
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27843
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47609
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.55835
2020-06-23 16:04:33,484 maskrcnn_benchmark.trainer INFO: eta: 1:11:15  iter: 6540  loss: 0.6036 (0.7916)  loss_classifier: 0.1880 (0.2920)  loss_box_reg: 0.0849 (0.1267)  loss_mask: 0.2693 (0.3113)  loss_objectness: 0.0241 (0.0405)  loss_rpn_box_reg: 0.0106 (0.0211)  time: 0.1067 (0.1278)  data: 0.0014 (0.0200)  lr: 0.160000  max mem: 5047
2020-06-23 16:04:35,642 maskrcnn_benchmark.trainer INFO: eta: 1:11:11  iter: 6560  loss: 0.6149 (0.7911)  loss_classifier: 0.1968 (0.2918)  loss_box_reg: 0.1067 (0.1266)  loss_mask: 0.2900 (0.3111)  loss_objectness: 0.0149 (0.0404)  loss_rpn_box_reg: 0.0064 (0.0211)  time: 0.1078 (0.1277)  data: 0.0014 (0.0200)  lr: 0.160000  max mem: 5047
2020-06-23 16:04:37,810 maskrcnn_benchmark.trainer INFO: eta: 1:11:06  iter: 6580  loss: 0.6471 (0.7907)  loss_classifier: 0.2230 (0.2916)  loss_box_reg: 0.1092 (0.1266)  loss_mask: 0.2653 (0.3110)  loss_objectness: 0.0256 (0.0404)  loss_rpn_box_reg: 0.0110 (0.0211)  time: 0.1084 (0.1277)  data: 0.0015 (0.0199)  lr: 0.160000  max mem: 5047
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:04:39,978 maskrcnn_benchmark.trainer INFO: eta: 1:11:02  iter: 6600  loss: 0.6407 (0.7904)  loss_classifier: 0.2481 (0.2915)  loss_box_reg: 0.0998 (0.1265)  loss_mask: 0.2711 (0.3109)  loss_objectness: 0.0223 (0.0404)  loss_rpn_box_reg: 0.0100 (0.0211)  time: 0.1081 (0.1276)  data: 0.0014 (0.0199)  lr: 0.160000  max mem: 5047
2020-06-23 16:04:42,137 maskrcnn_benchmark.trainer INFO: eta: 1:10:57  iter: 6620  loss: 0.6212 (0.7899)  loss_classifier: 0.2062 (0.2913)  loss_box_reg: 0.1020 (0.1264)  loss_mask: 0.2513 (0.3107)  loss_objectness: 0.0159 (0.0403)  loss_rpn_box_reg: 0.0088 (0.0211)  time: 0.1071 (0.1276)  data: 0.0015 (0.0198)  lr: 0.160000  max mem: 5047
DONE (t=2.46s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:04:44,279 maskrcnn_benchmark.trainer INFO: eta: 1:10:53  iter: 6640  loss: 0.6472 (0.7896)  loss_classifier: 0.2531 (0.2912)  loss_box_reg: 0.1062 (0.1264)  loss_mask: 0.2671 (0.3106)  loss_objectness: 0.0272 (0.0403)  loss_rpn_box_reg: 0.0094 (0.0211)  time: 0.1069 (0.1275)  data: 0.0014 (0.0197)  lr: 0.160000  max mem: 5047
DONE (t=3.12s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.27384
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.46742
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.28641
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11782
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.29395
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.40988
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25884
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.40386
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.42463
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.23733
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.45634
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.56174
2020-06-23 16:04:46,085 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.287315156656991, segm mAP: 0.27384066703157317
:::MLLOG {"namespace": "", "time_ms": 1592953486085, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.287315156656991, "SEGM": 0.27384066703157317}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1592953486085, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 7}}
2020-06-23 16:04:46,624 maskrcnn_benchmark.trainer INFO: eta: 1:10:49  iter: 6660  loss: 0.7080 (0.7894)  loss_classifier: 0.2480 (0.2911)  loss_box_reg: 0.1072 (0.1264)  loss_mask: 0.2716 (0.3105)  loss_objectness: 0.0167 (0.0404)  loss_rpn_box_reg: 0.0080 (0.0211)  time: 0.1078 (0.1275)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5047
2020-06-23 16:04:48,766 maskrcnn_benchmark.trainer INFO: eta: 1:10:45  iter: 6680  loss: 0.6754 (0.7889)  loss_classifier: 0.2388 (0.2909)  loss_box_reg: 0.1078 (0.1263)  loss_mask: 0.2549 (0.3104)  loss_objectness: 0.0249 (0.0403)  loss_rpn_box_reg: 0.0081 (0.0211)  time: 0.1064 (0.1274)  data: 0.0014 (0.0196)  lr: 0.160000  max mem: 5047
2020-06-23 16:04:50,924 maskrcnn_benchmark.trainer INFO: eta: 1:10:40  iter: 6700  loss: 0.6418 (0.7885)  loss_classifier: 0.2307 (0.2907)  loss_box_reg: 0.1000 (0.1262)  loss_mask: 0.2486 (0.3102)  loss_objectness: 0.0169 (0.0403)  loss_rpn_box_reg: 0.0080 (0.0211)  time: 0.1082 (0.1273)  data: 0.0014 (0.0196)  lr: 0.160000  max mem: 5047
2020-06-23 16:04:53,086 maskrcnn_benchmark.trainer INFO: eta: 1:10:36  iter: 6720  loss: 0.5860 (0.7882)  loss_classifier: 0.2026 (0.2906)  loss_box_reg: 0.1029 (0.1262)  loss_mask: 0.2719 (0.3101)  loss_objectness: 0.0282 (0.0403)  loss_rpn_box_reg: 0.0101 (0.0211)  time: 0.1079 (0.1273)  data: 0.0014 (0.0195)  lr: 0.160000  max mem: 5047
2020-06-23 16:04:55,249 maskrcnn_benchmark.trainer INFO: eta: 1:10:31  iter: 6740  loss: 0.5509 (0.7876)  loss_classifier: 0.2063 (0.2904)  loss_box_reg: 0.0793 (0.1261)  loss_mask: 0.2690 (0.3100)  loss_objectness: 0.0136 (0.0402)  loss_rpn_box_reg: 0.0090 (0.0210)  time: 0.1077 (0.1272)  data: 0.0013 (0.0195)  lr: 0.160000  max mem: 5047
2020-06-23 16:04:57,398 maskrcnn_benchmark.trainer INFO: eta: 1:10:27  iter: 6760  loss: 0.6696 (0.7873)  loss_classifier: 0.2183 (0.2902)  loss_box_reg: 0.1109 (0.1261)  loss_mask: 0.2569 (0.3098)  loss_objectness: 0.0229 (0.0402)  loss_rpn_box_reg: 0.0117 (0.0210)  time: 0.1071 (0.1272)  data: 0.0014 (0.0194)  lr: 0.160000  max mem: 5047
2020-06-23 16:04:59,561 maskrcnn_benchmark.trainer INFO: eta: 1:10:22  iter: 6780  loss: 0.6921 (0.7871)  loss_classifier: 0.2803 (0.2902)  loss_box_reg: 0.1214 (0.1261)  loss_mask: 0.2780 (0.3098)  loss_objectness: 0.0152 (0.0401)  loss_rpn_box_reg: 0.0085 (0.0210)  time: 0.1081 (0.1271)  data: 0.0015 (0.0194)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:01,709 maskrcnn_benchmark.trainer INFO: eta: 1:10:18  iter: 6800  loss: 0.6052 (0.7867)  loss_classifier: 0.2068 (0.2899)  loss_box_reg: 0.0887 (0.1260)  loss_mask: 0.2675 (0.3096)  loss_objectness: 0.0186 (0.0401)  loss_rpn_box_reg: 0.0069 (0.0210)  time: 0.1064 (0.1271)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:03,860 maskrcnn_benchmark.trainer INFO: eta: 1:10:13  iter: 6820  loss: 0.6122 (0.7862)  loss_classifier: 0.2105 (0.2898)  loss_box_reg: 0.0845 (0.1259)  loss_mask: 0.2795 (0.3096)  loss_objectness: 0.0104 (0.0400)  loss_rpn_box_reg: 0.0066 (0.0210)  time: 0.1071 (0.1270)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:06,030 maskrcnn_benchmark.trainer INFO: eta: 1:10:09  iter: 6840  loss: 0.6101 (0.7858)  loss_classifier: 0.2091 (0.2896)  loss_box_reg: 0.1069 (0.1258)  loss_mask: 0.2389 (0.3094)  loss_objectness: 0.0210 (0.0400)  loss_rpn_box_reg: 0.0099 (0.0210)  time: 0.1081 (0.1269)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:08,177 maskrcnn_benchmark.trainer INFO: eta: 1:10:05  iter: 6860  loss: 0.7406 (0.7856)  loss_classifier: 0.2838 (0.2895)  loss_box_reg: 0.1199 (0.1258)  loss_mask: 0.2585 (0.3093)  loss_objectness: 0.0207 (0.0400)  loss_rpn_box_reg: 0.0176 (0.0210)  time: 0.1073 (0.1269)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:10,334 maskrcnn_benchmark.trainer INFO: eta: 1:10:00  iter: 6880  loss: 0.5492 (0.7852)  loss_classifier: 0.1902 (0.2893)  loss_box_reg: 0.0811 (0.1257)  loss_mask: 0.2746 (0.3091)  loss_objectness: 0.0160 (0.0399)  loss_rpn_box_reg: 0.0066 (0.0211)  time: 0.1079 (0.1268)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:12,475 maskrcnn_benchmark.trainer INFO: eta: 1:09:56  iter: 6900  loss: 0.6592 (0.7849)  loss_classifier: 0.2415 (0.2892)  loss_box_reg: 0.1094 (0.1257)  loss_mask: 0.2662 (0.3090)  loss_objectness: 0.0181 (0.0399)  loss_rpn_box_reg: 0.0137 (0.0211)  time: 0.1068 (0.1268)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:14,613 maskrcnn_benchmark.trainer INFO: eta: 1:09:51  iter: 6920  loss: 0.6487 (0.7846)  loss_classifier: 0.2253 (0.2891)  loss_box_reg: 0.0998 (0.1256)  loss_mask: 0.2684 (0.3089)  loss_objectness: 0.0224 (0.0399)  loss_rpn_box_reg: 0.0081 (0.0211)  time: 0.1067 (0.1267)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:16,780 maskrcnn_benchmark.trainer INFO: eta: 1:09:47  iter: 6940  loss: 0.6293 (0.7843)  loss_classifier: 0.2159 (0.2890)  loss_box_reg: 0.1078 (0.1256)  loss_mask: 0.2715 (0.3088)  loss_objectness: 0.0270 (0.0398)  loss_rpn_box_reg: 0.0150 (0.0211)  time: 0.1076 (0.1267)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:18,923 maskrcnn_benchmark.trainer INFO: eta: 1:09:43  iter: 6960  loss: 0.6538 (0.7840)  loss_classifier: 0.2013 (0.2888)  loss_box_reg: 0.0952 (0.1256)  loss_mask: 0.2782 (0.3087)  loss_objectness: 0.0242 (0.0398)  loss_rpn_box_reg: 0.0076 (0.0211)  time: 0.1072 (0.1266)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:21,083 maskrcnn_benchmark.trainer INFO: eta: 1:09:38  iter: 6980  loss: 0.6821 (0.7836)  loss_classifier: 0.2285 (0.2887)  loss_box_reg: 0.1078 (0.1255)  loss_mask: 0.2607 (0.3086)  loss_objectness: 0.0205 (0.0398)  loss_rpn_box_reg: 0.0094 (0.0210)  time: 0.1080 (0.1266)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:23,236 maskrcnn_benchmark.trainer INFO: eta: 1:09:34  iter: 7000  loss: 0.5374 (0.7833)  loss_classifier: 0.1814 (0.2885)  loss_box_reg: 0.0796 (0.1255)  loss_mask: 0.2567 (0.3085)  loss_objectness: 0.0162 (0.0397)  loss_rpn_box_reg: 0.0073 (0.0210)  time: 0.1071 (0.1265)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:25,382 maskrcnn_benchmark.trainer INFO: eta: 1:09:30  iter: 7020  loss: 0.7533 (0.7832)  loss_classifier: 0.2675 (0.2884)  loss_box_reg: 0.1139 (0.1255)  loss_mask: 0.3102 (0.3085)  loss_objectness: 0.0255 (0.0397)  loss_rpn_box_reg: 0.0103 (0.0211)  time: 0.1069 (0.1264)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:27,539 maskrcnn_benchmark.trainer INFO: eta: 1:09:26  iter: 7040  loss: 0.6540 (0.7829)  loss_classifier: 0.2322 (0.2883)  loss_box_reg: 0.1099 (0.1254)  loss_mask: 0.2648 (0.3084)  loss_objectness: 0.0198 (0.0397)  loss_rpn_box_reg: 0.0082 (0.0210)  time: 0.1075 (0.1264)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:29,687 maskrcnn_benchmark.trainer INFO: eta: 1:09:21  iter: 7060  loss: 0.6603 (0.7826)  loss_classifier: 0.2016 (0.2881)  loss_box_reg: 0.0941 (0.1254)  loss_mask: 0.2662 (0.3083)  loss_objectness: 0.0251 (0.0397)  loss_rpn_box_reg: 0.0132 (0.0211)  time: 0.1077 (0.1263)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:31,850 maskrcnn_benchmark.trainer INFO: eta: 1:09:17  iter: 7080  loss: 0.5791 (0.7820)  loss_classifier: 0.1958 (0.2879)  loss_box_reg: 0.0785 (0.1253)  loss_mask: 0.2615 (0.3082)  loss_objectness: 0.0109 (0.0396)  loss_rpn_box_reg: 0.0059 (0.0210)  time: 0.1070 (0.1263)  data: 0.0013 (0.0186)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:33,995 maskrcnn_benchmark.trainer INFO: eta: 1:09:13  iter: 7100  loss: 0.6849 (0.7817)  loss_classifier: 0.2309 (0.2878)  loss_box_reg: 0.0998 (0.1252)  loss_mask: 0.2708 (0.3081)  loss_objectness: 0.0226 (0.0396)  loss_rpn_box_reg: 0.0090 (0.0210)  time: 0.1069 (0.1262)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:36,159 maskrcnn_benchmark.trainer INFO: eta: 1:09:09  iter: 7120  loss: 0.6253 (0.7814)  loss_classifier: 0.2243 (0.2877)  loss_box_reg: 0.0987 (0.1252)  loss_mask: 0.2579 (0.3080)  loss_objectness: 0.0184 (0.0396)  loss_rpn_box_reg: 0.0078 (0.0210)  time: 0.1067 (0.1262)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:38,303 maskrcnn_benchmark.trainer INFO: eta: 1:09:04  iter: 7140  loss: 0.6960 (0.7812)  loss_classifier: 0.2413 (0.2876)  loss_box_reg: 0.1037 (0.1252)  loss_mask: 0.2418 (0.3079)  loss_objectness: 0.0300 (0.0396)  loss_rpn_box_reg: 0.0148 (0.0210)  time: 0.1067 (0.1261)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:40,444 maskrcnn_benchmark.trainer INFO: eta: 1:09:00  iter: 7160  loss: 0.6789 (0.7810)  loss_classifier: 0.2438 (0.2875)  loss_box_reg: 0.1153 (0.1251)  loss_mask: 0.2701 (0.3078)  loss_objectness: 0.0272 (0.0396)  loss_rpn_box_reg: 0.0120 (0.0210)  time: 0.1074 (0.1261)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:42,606 maskrcnn_benchmark.trainer INFO: eta: 1:08:56  iter: 7180  loss: 0.7020 (0.7808)  loss_classifier: 0.2532 (0.2874)  loss_box_reg: 0.1228 (0.1251)  loss_mask: 0.2707 (0.3078)  loss_objectness: 0.0171 (0.0395)  loss_rpn_box_reg: 0.0072 (0.0210)  time: 0.1078 (0.1260)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:44,772 maskrcnn_benchmark.trainer INFO: eta: 1:08:52  iter: 7200  loss: 0.7714 (0.7807)  loss_classifier: 0.2844 (0.2873)  loss_box_reg: 0.1203 (0.1251)  loss_mask: 0.2913 (0.3077)  loss_objectness: 0.0261 (0.0395)  loss_rpn_box_reg: 0.0105 (0.0210)  time: 0.1083 (0.1260)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:46,947 maskrcnn_benchmark.trainer INFO: eta: 1:08:48  iter: 7220  loss: 0.6985 (0.7804)  loss_classifier: 0.2566 (0.2873)  loss_box_reg: 0.1204 (0.1251)  loss_mask: 0.2622 (0.3076)  loss_objectness: 0.0215 (0.0395)  loss_rpn_box_reg: 0.0088 (0.0210)  time: 0.1074 (0.1259)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:49,087 maskrcnn_benchmark.trainer INFO: eta: 1:08:43  iter: 7240  loss: 0.7597 (0.7804)  loss_classifier: 0.2937 (0.2872)  loss_box_reg: 0.1255 (0.1251)  loss_mask: 0.2900 (0.3076)  loss_objectness: 0.0253 (0.0395)  loss_rpn_box_reg: 0.0114 (0.0210)  time: 0.1064 (0.1259)  data: 0.0015 (0.0182)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:51,264 maskrcnn_benchmark.trainer INFO: eta: 1:08:39  iter: 7260  loss: 0.5762 (0.7800)  loss_classifier: 0.2085 (0.2871)  loss_box_reg: 0.1069 (0.1251)  loss_mask: 0.2588 (0.3074)  loss_objectness: 0.0138 (0.0394)  loss_rpn_box_reg: 0.0063 (0.0210)  time: 0.1076 (0.1258)  data: 0.0015 (0.0182)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:53,436 maskrcnn_benchmark.trainer INFO: eta: 1:08:35  iter: 7280  loss: 0.6880 (0.7799)  loss_classifier: 0.2454 (0.2870)  loss_box_reg: 0.1036 (0.1251)  loss_mask: 0.2671 (0.3074)  loss_objectness: 0.0313 (0.0394)  loss_rpn_box_reg: 0.0164 (0.0210)  time: 0.1077 (0.1258)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:55,586 maskrcnn_benchmark.trainer INFO: eta: 1:08:31  iter: 7300  loss: 0.6502 (0.7796)  loss_classifier: 0.2466 (0.2869)  loss_box_reg: 0.0939 (0.1250)  loss_mask: 0.2651 (0.3072)  loss_objectness: 0.0182 (0.0394)  loss_rpn_box_reg: 0.0103 (0.0210)  time: 0.1074 (0.1257)  data: 0.0015 (0.0181)  lr: 0.160000  max mem: 5047
2020-06-23 16:05:57,752 maskrcnn_benchmark.trainer INFO: eta: 1:08:27  iter: 7320  loss: 0.5975 (0.7793)  loss_classifier: 0.1991 (0.2868)  loss_box_reg: 0.0961 (0.1250)  loss_mask: 0.2910 (0.3072)  loss_objectness: 0.0134 (0.0394)  loss_rpn_box_reg: 0.0058 (0.0210)  time: 0.1081 (0.1257)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5047
:::MLLOG {"namespace": "", "time_ms": 1592953559482, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 8}}
:::MLLOG {"namespace": "", "time_ms": 1592953559483, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 8}}
:::MLLOG {"namespace": "", "time_ms": 1592953559483, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 8}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
2020-06-23 16:05:59,706 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.26s)
Done (t=0.26s)
creating index...
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
index created!
index created!
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
2020-06-23 16:06:00,009 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  4%|         | 3/79 [00:01<00:51,  1.47it/s]
  8%|         | 6/79 [00:01<00:35,  2.05it/s]
 11%|        | 9/79 [00:01<00:24,  2.83it/s]
 15%|        | 12/79 [00:01<00:17,  3.86it/s]
 19%|        | 15/79 [00:01<00:12,  5.19it/s]
 23%|       | 18/79 [00:01<00:08,  6.84it/s]
 27%|       | 21/79 [00:01<00:06,  8.79it/s]
 30%|       | 24/79 [00:01<00:04, 11.00it/s]
 34%|      | 27/79 [00:01<00:03, 13.29it/s]
 38%|      | 30/79 [00:02<00:03, 15.60it/s]
 42%|     | 33/79 [00:02<00:02, 17.70it/s]
 46%|     | 36/79 [00:02<00:02, 19.63it/s]
 49%|     | 39/79 [00:02<00:01, 21.16it/s]
 53%|    | 42/79 [00:02<00:01, 22.63it/s]
 57%|    | 45/79 [00:02<00:01, 23.70it/s]
 61%|    | 48/79 [00:02<00:01, 24.46it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.99it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  6.99it/s]
 28%|       | 22/79 [00:01<00:06,  8.98it/s]
 32%|      | 25/79 [00:01<00:04, 11.14it/s]
 35%|      | 28/79 [00:01<00:03, 13.49it/s]
 39%|      | 31/79 [00:02<00:03, 15.68it/s]
 43%|     | 34/79 [00:02<00:02, 17.74it/s]
 47%|     | 37/79 [00:02<00:02, 19.57it/s]
 51%|     | 40/79 [00:02<00:01, 21.03it/s]
 54%|    | 43/79 [00:02<00:01, 22.24it/s]
 58%|    | 46/79 [00:02<00:01, 23.07it/s]
 62%|   | 49/79 [00:02<00:01, 23.66it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  4%|         | 3/79 [00:01<00:49,  1.55it/s]
  8%|         | 6/79 [00:01<00:33,  2.15it/s]
 11%|        | 9/79 [00:01<00:23,  2.97it/s]
 15%|        | 12/79 [00:01<00:16,  4.04it/s]
 19%|        | 15/79 [00:01<00:11,  5.40it/s]
 23%|       | 18/79 [00:01<00:08,  7.05it/s]
 27%|       | 21/79 [00:01<00:06,  8.97it/s]
 30%|       | 24/79 [00:01<00:04, 11.14it/s]
 34%|      | 27/79 [00:01<00:03, 13.43it/s]
 38%|      | 30/79 [00:02<00:03, 15.48it/s]
 42%|     | 33/79 [00:02<00:02, 17.47it/s]
 46%|     | 36/79 [00:02<00:02, 19.36it/s]
 49%|     | 39/79 [00:02<00:01, 20.60it/s]
 53%|    | 42/79 [00:02<00:01, 21.67it/s]
 57%|    | 45/79 [00:02<00:01, 22.36it/s]
 61%|    | 48/79 [00:02<00:01, 23.04it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:11,  5.26it/s]
 24%|       | 19/79 [00:01<00:08,  6.91it/s]
 28%|       | 22/79 [00:01<00:06,  8.84it/s]
 32%|      | 25/79 [00:01<00:04, 11.00it/s]
 35%|      | 28/79 [00:01<00:03, 13.33it/s]
 39%|      | 31/79 [00:02<00:03, 15.60it/s]
 43%|     | 34/79 [00:02<00:02, 17.79it/s]
 47%|     | 37/79 [00:02<00:02, 19.55it/s]
 51%|     | 40/79 [00:02<00:01, 21.17it/s]
 54%|    | 43/79 [00:02<00:01, 22.46it/s]
 58%|    | 46/79 [00:02<00:01, 23.57it/s]
 62%|   | 49/79 [00:02<00:01, 24.39it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.06it/s]
 28%|       | 22/79 [00:01<00:06,  9.01it/s]
 32%|      | 25/79 [00:01<00:04, 11.18it/s]
 35%|      | 28/79 [00:01<00:03, 13.42it/s]
 39%|      | 31/79 [00:02<00:03, 15.71it/s]
 43%|     | 34/79 [00:02<00:02, 17.75it/s]
 47%|     | 37/79 [00:02<00:02, 19.42it/s]
 51%|     | 40/79 [00:02<00:01, 20.94it/s]
 54%|    | 43/79 [00:02<00:01, 22.09it/s]
 58%|    | 46/79 [00:02<00:01, 22.84it/s]
 62%|   | 49/79 [00:02<00:01, 23.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:51,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.17it/s]
 24%|       | 19/79 [00:01<00:08,  6.79it/s]
 28%|       | 22/79 [00:01<00:06,  8.70it/s]
 32%|      | 25/79 [00:01<00:04, 10.85it/s]
 35%|      | 28/79 [00:02<00:03, 13.11it/s]
 39%|      | 31/79 [00:02<00:03, 15.41it/s]
 43%|     | 34/79 [00:02<00:02, 17.54it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.99it/s]
 54%|    | 43/79 [00:02<00:01, 22.18it/s]
 58%|    | 46/79 [00:02<00:01, 23.21it/s]
 62%|   | 49/79 [00:02<00:01, 23.73it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  4%|         | 3/79 [00:01<00:51,  1.47it/s]
  8%|         | 6/79 [00:01<00:35,  2.05it/s]
 11%|        | 9/79 [00:01<00:24,  2.83it/s]
 15%|        | 12/79 [00:01<00:17,  3.86it/s]
 19%|        | 15/79 [00:01<00:12,  5.17it/s]
 23%|       | 18/79 [00:01<00:09,  6.77it/s]
 27%|       | 21/79 [00:01<00:06,  8.68it/s]
 30%|       | 24/79 [00:01<00:05, 10.81it/s]
 34%|      | 27/79 [00:02<00:03, 13.05it/s]
 38%|      | 30/79 [00:02<00:03, 15.19it/s]
 42%|     | 33/79 [00:02<00:02, 17.23it/s]
 46%|     | 36/79 [00:02<00:02, 19.00it/s]
 49%|     | 39/79 [00:02<00:01, 20.45it/s]
 53%|    | 42/79 [00:02<00:01, 21.59it/s]
 57%|    | 45/79 [00:02<00:01, 22.45it/s]
 61%|    | 48/79 [00:02<00:01, 23.13it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  4%|         | 3/79 [00:01<00:51,  1.47it/s]
  8%|         | 6/79 [00:01<00:35,  2.05it/s]
 11%|        | 9/79 [00:01<00:24,  2.82it/s]
 15%|        | 12/79 [00:01<00:17,  3.85it/s]
 19%|        | 15/79 [00:01<00:12,  5.16it/s]
 23%|       | 18/79 [00:01<00:09,  6.77it/s]
 27%|       | 21/79 [00:01<00:06,  8.68it/s]
 30%|       | 24/79 [00:01<00:05, 10.83it/s]
 34%|      | 27/79 [00:02<00:03, 13.01it/s]
 38%|      | 30/79 [00:02<00:03, 15.20it/s]
 42%|     | 33/79 [00:02<00:02, 17.16it/s]
 46%|     | 36/79 [00:02<00:02, 19.05it/s]
 49%|     | 39/79 [00:02<00:01, 20.36it/s]
 53%|    | 42/79 [00:02<00:01, 21.51it/s]
 57%|    | 45/79 [00:02<00:01, 22.50it/s]
 61%|    | 48/79 [00:02<00:01, 23.41it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:51,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.82it/s]
 16%|        | 13/79 [00:01<00:17,  3.85it/s]
 20%|        | 16/79 [00:01<00:12,  5.16it/s]
 24%|       | 19/79 [00:01<00:08,  6.79it/s]
 28%|       | 22/79 [00:01<00:06,  8.72it/s]
 32%|      | 25/79 [00:01<00:04, 10.83it/s]
 35%|      | 28/79 [00:02<00:03, 13.07it/s]
 39%|      | 31/79 [00:02<00:03, 15.44it/s]
 43%|     | 34/79 [00:02<00:02, 17.51it/s]
 47%|     | 37/79 [00:02<00:02, 19.33it/s]
 51%|     | 40/79 [00:02<00:01, 20.73it/s]
 54%|    | 43/79 [00:02<00:01, 22.01it/s]
 58%|    | 46/79 [00:02<00:01, 22.90it/s]
 62%|   | 49/79 [00:02<00:01, 23.29it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.95it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.87it/s]
 32%|      | 25/79 [00:01<00:04, 11.01it/s]
 35%|      | 28/79 [00:02<00:03, 13.30it/s]
 39%|      | 31/79 [00:02<00:03, 15.34it/s]
 43%|     | 34/79 [00:02<00:02, 17.51it/s]
 47%|     | 37/79 [00:02<00:02, 19.04it/s]
 51%|     | 40/79 [00:02<00:01, 20.38it/s]
 54%|    | 43/79 [00:02<00:01, 21.53it/s]
 58%|    | 46/79 [00:02<00:01, 22.67it/s]
 62%|   | 49/79 [00:02<00:01, 23.25it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:18,  1.00s/it]
  5%|         | 4/79 [00:01<00:53,  1.40it/s]
  9%|         | 7/79 [00:01<00:36,  1.95it/s]
 13%|        | 10/79 [00:01<00:25,  2.70it/s]
 16%|        | 13/79 [00:01<00:17,  3.69it/s]
 20%|        | 16/79 [00:01<00:12,  4.96it/s]
 24%|       | 19/79 [00:01<00:09,  6.52it/s]
 28%|       | 22/79 [00:01<00:06,  8.42it/s]
 32%|      | 25/79 [00:01<00:05, 10.55it/s]
 35%|      | 28/79 [00:02<00:03, 12.84it/s]
 39%|      | 31/79 [00:02<00:03, 15.14it/s]
 43%|     | 34/79 [00:02<00:02, 17.36it/s]
 47%|     | 37/79 [00:02<00:02, 19.35it/s]
 51%|     | 40/79 [00:02<00:01, 20.94it/s]
 54%|    | 43/79 [00:02<00:01, 22.40it/s]
 58%|    | 46/79 [00:02<00:01, 23.21it/s]
 62%|   | 49/79 [00:02<00:01, 23.89it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:51,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.01it/s]
 13%|        | 10/79 [00:01<00:24,  2.78it/s]
 16%|        | 13/79 [00:01<00:17,  3.79it/s]
 20%|        | 16/79 [00:01<00:12,  5.10it/s]
 24%|       | 19/79 [00:01<00:08,  6.71it/s]
 28%|       | 22/79 [00:01<00:06,  8.61it/s]
 32%|      | 25/79 [00:01<00:05, 10.76it/s]
 35%|      | 28/79 [00:02<00:03, 13.09it/s]
 39%|      | 31/79 [00:02<00:03, 15.40it/s]
 43%|     | 34/79 [00:02<00:02, 17.52it/s]
 47%|     | 37/79 [00:02<00:02, 19.23it/s]
 51%|     | 40/79 [00:02<00:01, 20.78it/s]
 54%|    | 43/79 [00:02<00:01, 22.02it/s]
 58%|    | 46/79 [00:02<00:01, 22.95it/s]
 62%|   | 49/79 [00:02<00:01, 23.76it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.00it/s]
 13%|        | 10/79 [00:01<00:24,  2.76it/s]
 16%|        | 13/79 [00:01<00:17,  3.77it/s]
 20%|        | 16/79 [00:01<00:12,  5.07it/s]
 24%|       | 19/79 [00:01<00:08,  6.68it/s]
 28%|       | 22/79 [00:01<00:06,  8.63it/s]
 32%|      | 25/79 [00:01<00:05, 10.72it/s]
 35%|      | 28/79 [00:02<00:03, 13.04it/s]
 39%|      | 31/79 [00:02<00:03, 15.38it/s]
 43%|     | 34/79 [00:02<00:02, 17.58it/s]
 47%|     | 37/79 [00:02<00:02, 19.40it/s]
 51%|     | 40/79 [00:02<00:01, 20.73it/s]
 54%|    | 43/79 [00:02<00:01, 22.13it/s]
 58%|    | 46/79 [00:02<00:01, 22.77it/s]
 62%|   | 49/79 [00:02<00:01, 23.50it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.02it/s]
 13%|        | 10/79 [00:01<00:24,  2.79it/s]
 16%|        | 13/79 [00:01<00:17,  3.81it/s]
 20%|        | 16/79 [00:01<00:12,  5.12it/s]
 24%|       | 19/79 [00:01<00:08,  6.73it/s]
 28%|       | 22/79 [00:01<00:06,  8.64it/s]
 32%|      | 25/79 [00:01<00:05, 10.75it/s]
 35%|      | 28/79 [00:02<00:03, 12.92it/s]
 39%|      | 31/79 [00:02<00:03, 15.03it/s]
 43%|     | 34/79 [00:02<00:02, 16.96it/s]
 47%|     | 37/79 [00:02<00:02, 18.94it/s]
 51%|     | 40/79 [00:02<00:01, 20.54it/s]
 54%|    | 43/79 [00:02<00:01, 21.67it/s]
 58%|    | 46/79 [00:02<00:01, 22.66it/s]
 62%|   | 49/79 [00:02<00:01, 23.54it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.87it/s]
 20%|        | 16/79 [00:01<00:12,  5.18it/s]
 24%|       | 19/79 [00:01<00:08,  6.82it/s]
 28%|       | 22/79 [00:01<00:06,  8.70it/s]
 32%|      | 25/79 [00:01<00:04, 10.82it/s]
 35%|      | 28/79 [00:02<00:03, 13.07it/s]
 39%|      | 31/79 [00:02<00:03, 15.32it/s]
 43%|     | 34/79 [00:02<00:02, 17.43it/s]
 47%|     | 37/79 [00:02<00:02, 19.19it/s]
 51%|     | 40/79 [00:02<00:01, 20.65it/s]
 54%|    | 43/79 [00:02<00:01, 21.75it/s]
 58%|    | 46/79 [00:02<00:01, 22.52it/s]
 62%|   | 49/79 [00:02<00:01, 23.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.30it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.87it/s]
 32%|      | 25/79 [00:01<00:04, 11.01it/s]
 35%|      | 28/79 [00:02<00:03, 13.22it/s]
 39%|      | 31/79 [00:02<00:03, 15.42it/s]
 43%|     | 34/79 [00:02<00:02, 17.49it/s]
 47%|     | 37/79 [00:02<00:02, 19.30it/s]
 51%|     | 40/79 [00:02<00:01, 20.70it/s]
 54%|    | 43/79 [00:02<00:01, 21.91it/s]
 58%|    | 46/79 [00:02<00:01, 22.93it/s]
 62%|   | 49/79 [00:02<00:01, 23.61it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:11,  5.25it/s]
 24%|       | 19/79 [00:01<00:08,  6.89it/s]
 28%|       | 22/79 [00:01<00:06,  8.78it/s]
 32%|      | 25/79 [00:01<00:04, 10.87it/s]
 35%|      | 28/79 [00:02<00:03, 13.08it/s]
 39%|      | 31/79 [00:02<00:03, 15.27it/s]
 43%|     | 34/79 [00:02<00:02, 17.34it/s]
 47%|     | 37/79 [00:02<00:02, 18.98it/s]
 51%|     | 40/79 [00:02<00:01, 20.54it/s]
 54%|    | 43/79 [00:02<00:01, 21.68it/s]
 58%|    | 46/79 [00:02<00:01, 22.76it/s]
 62%|   | 49/79 [00:02<00:01, 22.84it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  4%|         | 3/79 [00:01<00:54,  1.40it/s]
  8%|         | 6/79 [00:01<00:37,  1.96it/s]
 11%|        | 9/79 [00:01<00:25,  2.71it/s]
 15%|        | 12/79 [00:01<00:18,  3.70it/s]
 19%|        | 15/79 [00:01<00:12,  4.98it/s]
 23%|       | 18/79 [00:01<00:09,  6.57it/s]
 27%|       | 21/79 [00:01<00:06,  8.46it/s]
 30%|       | 24/79 [00:01<00:05, 10.57it/s]
 34%|      | 27/79 [00:02<00:04, 12.91it/s]
 38%|      | 30/79 [00:02<00:03, 15.20it/s]
 42%|     | 33/79 [00:02<00:02, 17.21it/s]
 46%|     | 36/79 [00:02<00:02, 19.08it/s]
 49%|     | 39/79 [00:02<00:01, 20.69it/s]
 53%|    | 42/79 [00:02<00:01, 22.04it/s]
 57%|    | 45/79 [00:02<00:01, 22.87it/s]
 61%|    | 48/79 [00:02<00:01, 23.59it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:22,  1.06s/it]
  5%|         | 4/79 [00:01<00:56,  1.33it/s]
  9%|         | 7/79 [00:01<00:38,  1.86it/s]
 13%|        | 10/79 [00:01<00:26,  2.57it/s]
 16%|        | 13/79 [00:01<00:18,  3.52it/s]
 20%|        | 16/79 [00:01<00:13,  4.76it/s]
 24%|       | 19/79 [00:01<00:09,  6.30it/s]
 28%|       | 22/79 [00:01<00:06,  8.15it/s]
 32%|      | 25/79 [00:01<00:05, 10.24it/s]
 35%|      | 28/79 [00:02<00:04, 12.56it/s]
 39%|      | 31/79 [00:02<00:03, 14.81it/s]
 43%|     | 34/79 [00:02<00:02, 16.94it/s]
 47%|     | 37/79 [00:02<00:02, 18.71it/s]
 51%|     | 40/79 [00:02<00:01, 20.41it/s]
 54%|    | 43/79 [00:02<00:01, 21.88it/s]
 58%|    | 46/79 [00:02<00:01, 22.70it/s]
 62%|   | 49/79 [00:02<00:01, 23.20it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:19,  1.02s/it]
  5%|         | 4/79 [00:01<00:54,  1.38it/s]
  9%|         | 7/79 [00:01<00:37,  1.92it/s]
 13%|        | 10/79 [00:01<00:25,  2.67it/s]
 16%|        | 13/79 [00:01<00:18,  3.65it/s]
 20%|        | 16/79 [00:01<00:12,  4.92it/s]
 24%|       | 19/79 [00:01<00:09,  6.48it/s]
 28%|       | 22/79 [00:01<00:06,  8.37it/s]
 32%|      | 25/79 [00:01<00:05, 10.52it/s]
 35%|      | 28/79 [00:02<00:03, 12.80it/s]
 39%|      | 31/79 [00:02<00:03, 15.05it/s]
 43%|     | 34/79 [00:02<00:02, 17.17it/s]
 47%|     | 37/79 [00:02<00:02, 19.08it/s]
 51%|     | 40/79 [00:02<00:01, 20.78it/s]
 54%|    | 43/79 [00:02<00:01, 22.12it/s]
 58%|    | 46/79 [00:02<00:01, 23.08it/s]
 62%|   | 49/79 [00:02<00:01, 23.99it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:18,  1.01s/it]
  5%|         | 4/79 [00:01<00:53,  1.39it/s]
  9%|         | 7/79 [00:01<00:37,  1.94it/s]
 13%|        | 10/79 [00:01<00:25,  2.69it/s]
 16%|        | 13/79 [00:01<00:17,  3.67it/s]
 20%|        | 16/79 [00:01<00:12,  4.94it/s]
 24%|       | 19/79 [00:01<00:09,  6.51it/s]
 28%|       | 22/79 [00:01<00:06,  8.37it/s]
 32%|      | 25/79 [00:01<00:05, 10.45it/s]
 35%|      | 28/79 [00:02<00:04, 12.70it/s]
 39%|      | 31/79 [00:02<00:03, 14.96it/s]
 43%|     | 34/79 [00:02<00:02, 16.97it/s]
 47%|     | 37/79 [00:02<00:02, 18.93it/s]
 51%|     | 40/79 [00:02<00:01, 20.50it/s]
 54%|    | 43/79 [00:02<00:01, 21.90it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.65it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  5%|         | 4/79 [00:01<00:52,  1.42it/s]
  9%|         | 7/79 [00:01<00:36,  1.98it/s]
 13%|        | 10/79 [00:01<00:25,  2.74it/s]
 16%|        | 13/79 [00:01<00:17,  3.73it/s]
 20%|        | 16/79 [00:01<00:12,  5.01it/s]
 24%|       | 19/79 [00:01<00:09,  6.60it/s]
 28%|       | 22/79 [00:01<00:06,  8.51it/s]
 32%|      | 25/79 [00:01<00:05, 10.58it/s]
 35%|      | 28/79 [00:02<00:03, 12.83it/s]
 39%|      | 31/79 [00:02<00:03, 15.12it/s]
 43%|     | 34/79 [00:02<00:02, 17.24it/s]
 47%|     | 37/79 [00:02<00:02, 18.91it/s]
 51%|     | 40/79 [00:02<00:01, 20.58it/s]
 54%|    | 43/79 [00:02<00:01, 21.89it/s]
 58%|    | 46/79 [00:02<00:01, 22.85it/s]
 62%|   | 49/79 [00:02<00:01, 23.72it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.01it/s]
 13%|        | 10/79 [00:01<00:24,  2.78it/s]
 16%|        | 13/79 [00:01<00:17,  3.78it/s]
 20%|        | 16/79 [00:01<00:12,  5.08it/s]
 24%|       | 19/79 [00:01<00:08,  6.68it/s]
 28%|       | 22/79 [00:01<00:06,  8.56it/s]
 32%|      | 25/79 [00:01<00:05, 10.65it/s]
 35%|      | 28/79 [00:02<00:03, 12.90it/s]
 39%|      | 31/79 [00:02<00:03, 15.16it/s]
 43%|     | 34/79 [00:02<00:02, 17.12it/s]
 47%|     | 37/79 [00:02<00:02, 18.93it/s]
 51%|     | 40/79 [00:02<00:01, 20.43it/s]
 54%|    | 43/79 [00:02<00:01, 21.76it/s]
 58%|    | 46/79 [00:02<00:01, 22.43it/s]
 62%|   | 49/79 [00:02<00:01, 23.04it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:18,  1.00s/it]
  5%|         | 4/79 [00:01<00:53,  1.40it/s]
  9%|         | 7/79 [00:01<00:36,  1.95it/s]
 13%|        | 10/79 [00:01<00:25,  2.70it/s]
 16%|        | 13/79 [00:01<00:17,  3.68it/s]
 20%|        | 16/79 [00:01<00:12,  4.95it/s]
 24%|       | 19/79 [00:01<00:09,  6.52it/s]
 28%|       | 22/79 [00:01<00:06,  8.32it/s]
 32%|      | 25/79 [00:01<00:05, 10.42it/s]
 35%|      | 28/79 [00:02<00:04, 12.62it/s]
 39%|      | 31/79 [00:02<00:03, 14.80it/s]
 43%|     | 34/79 [00:02<00:02, 16.82it/s]
 47%|     | 37/79 [00:02<00:02, 18.71it/s]
 51%|     | 40/79 [00:02<00:01, 20.12it/s]
 54%|    | 43/79 [00:02<00:01, 21.37it/s]
 58%|    | 46/79 [00:02<00:01, 22.33it/s]
 62%|   | 49/79 [00:02<00:01, 23.20it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.02it/s]
 13%|        | 10/79 [00:01<00:24,  2.78it/s]
 16%|        | 13/79 [00:01<00:17,  3.80it/s]
 20%|        | 16/79 [00:01<00:12,  5.09it/s]
 24%|       | 19/79 [00:01<00:08,  6.69it/s]
 28%|       | 22/79 [00:01<00:06,  8.61it/s]
 32%|      | 25/79 [00:01<00:05, 10.74it/s]
 35%|      | 28/79 [00:02<00:03, 12.94it/s]
 39%|      | 31/79 [00:02<00:03, 15.14it/s]
 43%|     | 34/79 [00:02<00:02, 16.99it/s]
 47%|     | 37/79 [00:02<00:02, 18.73it/s]
 51%|     | 40/79 [00:02<00:01, 20.23it/s]
 54%|    | 43/79 [00:02<00:01, 21.05it/s]
 58%|    | 46/79 [00:02<00:01, 22.02it/s]
 62%|   | 49/79 [00:02<00:01, 22.49it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:22,  1.05s/it]
  5%|         | 4/79 [00:01<00:56,  1.33it/s]
  9%|         | 7/79 [00:01<00:38,  1.86it/s]
 13%|        | 10/79 [00:01<00:26,  2.58it/s]
 16%|        | 13/79 [00:01<00:18,  3.54it/s]
 20%|        | 16/79 [00:01<00:13,  4.76it/s]
 24%|       | 19/79 [00:01<00:09,  6.30it/s]
 28%|       | 22/79 [00:01<00:06,  8.15it/s]
 32%|      | 25/79 [00:01<00:05, 10.21it/s]
 35%|      | 28/79 [00:02<00:04, 12.50it/s]
 39%|      | 31/79 [00:02<00:03, 14.73it/s]
 43%|     | 34/79 [00:02<00:02, 16.89it/s]
 47%|     | 37/79 [00:02<00:02, 18.61it/s]
 51%|     | 40/79 [00:02<00:01, 20.38it/s]
 54%|    | 43/79 [00:02<00:01, 21.77it/s]
 58%|    | 46/79 [00:02<00:01, 22.59it/s]
 62%|   | 49/79 [00:02<00:01, 23.52it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:18,  1.00s/it]
  4%|         | 3/79 [00:01<00:54,  1.39it/s]
  8%|         | 6/79 [00:01<00:37,  1.94it/s]
 11%|        | 9/79 [00:01<00:26,  2.67it/s]
 15%|        | 12/79 [00:01<00:18,  3.65it/s]
 19%|        | 15/79 [00:01<00:13,  4.91it/s]
 23%|       | 18/79 [00:01<00:09,  6.47it/s]
 27%|       | 21/79 [00:01<00:06,  8.30it/s]
 30%|       | 24/79 [00:01<00:05, 10.37it/s]
 34%|      | 27/79 [00:02<00:04, 12.57it/s]
 38%|      | 30/79 [00:02<00:03, 14.68it/s]
 42%|     | 33/79 [00:02<00:02, 16.59it/s]
 46%|     | 36/79 [00:02<00:02, 18.16it/s]
 49%|     | 39/79 [00:02<00:02, 19.66it/s]
 53%|    | 42/79 [00:02<00:01, 20.72it/s]
 57%|    | 45/79 [00:02<00:01, 21.56it/s]
 61%|    | 48/79 [00:02<00:01, 22.36it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:18,  1.01s/it]
  4%|         | 3/79 [00:01<00:54,  1.39it/s]
  8%|         | 6/79 [00:01<00:37,  1.94it/s]
 11%|        | 9/79 [00:01<00:26,  2.68it/s]
 15%|        | 12/79 [00:01<00:18,  3.66it/s]
 19%|        | 15/79 [00:01<00:13,  4.90it/s]
 23%|       | 18/79 [00:01<00:09,  6.45it/s]
 27%|       | 21/79 [00:01<00:07,  8.27it/s]
 30%|       | 24/79 [00:01<00:05, 10.31it/s]
 34%|      | 27/79 [00:02<00:04, 12.49it/s]
 38%|      | 30/79 [00:02<00:03, 14.68it/s]
 42%|     | 33/79 [00:02<00:02, 16.64it/s]
 46%|     | 36/79 [00:02<00:02, 18.49it/s]
 49%|     | 39/79 [00:02<00:02, 19.77it/s]
 53%|    | 42/79 [00:02<00:01, 21.21it/s]
 57%|    | 45/79 [00:02<00:01, 22.21it/s]
 61%|    | 48/79 [00:02<00:01, 22.97it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  4%|         | 3/79 [00:01<00:53,  1.41it/s]
  8%|         | 6/79 [00:01<00:37,  1.97it/s]
 11%|        | 9/79 [00:01<00:25,  2.72it/s]
 15%|        | 12/79 [00:01<00:18,  3.71it/s]
 19%|        | 15/79 [00:01<00:12,  4.98it/s]
 23%|       | 18/79 [00:01<00:09,  6.57it/s]
 27%|       | 21/79 [00:01<00:06,  8.41it/s]
 30%|       | 24/79 [00:01<00:05, 10.49it/s]
 34%|      | 27/79 [00:02<00:04, 12.68it/s]
 38%|      | 30/79 [00:02<00:03, 14.77it/s]
 42%|     | 33/79 [00:02<00:02, 16.77it/s]
 46%|     | 36/79 [00:02<00:02, 18.40it/s]
 49%|     | 39/79 [00:02<00:02, 19.87it/s]
 53%|    | 42/79 [00:02<00:01, 21.01it/s]
 57%|    | 45/79 [00:02<00:01, 22.01it/s]
 61%|    | 48/79 [00:02<00:01, 22.59it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:18,  1.01s/it]
  5%|         | 4/79 [00:01<00:53,  1.39it/s]
  9%|         | 7/79 [00:01<00:37,  1.94it/s]
 13%|        | 10/79 [00:01<00:25,  2.68it/s]
 16%|        | 13/79 [00:01<00:18,  3.66it/s]
 20%|        | 16/79 [00:01<00:12,  4.91it/s]
 24%|       | 19/79 [00:01<00:09,  6.47it/s]
 28%|       | 22/79 [00:01<00:06,  8.33it/s]
 32%|      | 25/79 [00:01<00:05, 10.34it/s]
 35%|      | 28/79 [00:02<00:04, 12.52it/s]
 39%|      | 31/79 [00:02<00:03, 14.59it/s]
 43%|     | 34/79 [00:02<00:02, 16.52it/s]
 47%|     | 37/79 [00:02<00:02, 18.25it/s]
 51%|     | 40/79 [00:02<00:01, 19.69it/s]
 54%|    | 43/79 [00:02<00:01, 20.77it/s]
 58%|    | 46/79 [00:02<00:01, 21.59it/s]
 62%|   | 49/79 [00:02<00:01, 22.14it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:21,  1.04s/it]
  5%|         | 4/79 [00:01<00:55,  1.35it/s]
  9%|         | 7/79 [00:01<00:38,  1.88it/s]
 13%|        | 10/79 [00:01<00:26,  2.60it/s]
 16%|        | 13/79 [00:01<00:18,  3.55it/s]
 20%|        | 16/79 [00:01<00:13,  4.76it/s]
 24%|       | 19/79 [00:01<00:09,  6.30it/s]
 28%|       | 22/79 [00:01<00:07,  8.10it/s]
 32%|      | 25/79 [00:02<00:05, 10.15it/s]
 35%|      | 28/79 [00:02<00:04, 12.29it/s]
 39%|      | 31/79 [00:02<00:03, 14.56it/s]
 43%|     | 34/79 [00:02<00:02, 16.62it/s]
 47%|     | 37/79 [00:02<00:02, 18.44it/s]
 51%|     | 40/79 [00:02<00:01, 19.79it/s]
 54%|    | 43/79 [00:02<00:01, 21.03it/s]
 58%|    | 46/79 [00:02<00:01, 21.88it/s]
 62%|   | 49/79 [00:03<00:01, 22.52it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:22,  1.05s/it]
  5%|         | 4/79 [00:01<00:56,  1.33it/s]
  9%|         | 7/79 [00:01<00:38,  1.86it/s]
 13%|        | 10/79 [00:01<00:26,  2.57it/s]
 16%|        | 13/79 [00:01<00:18,  3.52it/s]
 20%|        | 16/79 [00:01<00:13,  4.73it/s]
 24%|       | 19/79 [00:01<00:09,  6.24it/s]
 28%|       | 22/79 [00:01<00:07,  8.03it/s]
 32%|      | 25/79 [00:02<00:05, 10.08it/s]
 35%|      | 28/79 [00:02<00:04, 12.22it/s]
 39%|      | 31/79 [00:02<00:03, 14.41it/s]
 43%|     | 34/79 [00:02<00:02, 16.43it/s]
 47%|     | 37/79 [00:02<00:02, 18.12it/s]
 51%|     | 40/79 [00:02<00:01, 19.61it/s]
 54%|    | 43/79 [00:02<00:01, 20.88it/s]
 58%|    | 46/79 [00:02<00:01, 21.68it/s]
 62%|   | 49/79 [00:03<00:01, 22.52it/s]
 66%|   | 52/79 [00:03<00:01, 24.10it/s]
 70%|   | 55/79 [00:03<00:00, 24.25it/s]
 73%|  | 58/79 [00:03<00:00, 24.93it/s]
 77%|  | 61/79 [00:03<00:00, 25.14it/s]
 81%|  | 64/79 [00:03<00:00, 25.39it/s]
 85%| | 67/79 [00:03<00:00, 25.56it/s]
 89%| | 70/79 [00:03<00:00, 26.01it/s]
 92%|| 73/79 [00:03<00:00, 26.02it/s]
 96%|| 76/79 [00:03<00:00, 26.71it/s]
100%|| 79/79 [00:03<00:00, 27.43it/s]
84it/s]
 68%|   | 54/79 [00:03<00:00, 25.32it/s]
 72%|  | 57/79 [00:03<00:00, 25.66it/s]
 76%|  | 60/79 [00:03<00:00, 25.79it/s]
 80%|  | 63/79 [00:03<00:00, 26.10it/s]
 84%| | 66/79 [00:03<00:00, 25.85it/s]
 87%| | 69/79 [00:03<00:00, 25.71it/s]
 91%| | 72/79 [00:03<00:00, 26.09it/s]
 95%|| 75/79 [00:03<00:00, 26.49it/s]
 99%|| 78/79 [00:03<00:00, 27.00it/s]
100%|| 79/79 [00:04<00:00, 19.69it/s]
, 23.96it/s]
 70%|   | 55/79 [00:03<00:00, 24.56it/s]
 73%|  | 58/79 [00:03<00:00, 24.87it/s]
 77%|  | 61/79 [00:03<00:00, 25.08it/s]
 81%|  | 64/79 [00:03<00:00, 24.94it/s]
 85%| | 67/79 [00:03<00:00, 25.26it/s]
 89%| | 70/79 [00:03<00:00, 25.48it/s]
 92%|| 73/79 [00:03<00:00, 25.67it/s]
 96%|| 76/79 [00:03<00:00, 26.30it/s]
100%|| 79/79 [00:03<00:00, 27.27it/s]
, 24.77it/s]
 70%|   | 55/79 [00:03<00:00, 25.16it/s]
 73%|  | 58/79 [00:03<00:00, 25.27it/s]
 77%|  | 61/79 [00:03<00:00, 25.32it/s]
 81%|  | 64/79 [00:03<00:00, 25.01it/s]
 85%| | 67/79 [00:03<00:00, 25.22it/s]
 89%| | 70/79 [00:03<00:00, 25.16it/s]
 92%|| 73/79 [00:03<00:00, 25.59it/s]
 96%|| 76/79 [00:03<00:00, 26.09it/s]
100%|| 79/79 [00:03<00:00, 26.85it/s]
, 23.76it/s]
 70%|   | 55/79 [00:03<00:00, 24.20it/s]
 73%|  | 58/79 [00:03<00:00, 24.45it/s]
 77%|  | 61/79 [00:03<00:00, 25.06it/s]
 81%|  | 64/79 [00:03<00:00, 24.93it/s]
 85%| | 67/79 [00:03<00:00, 25.06it/s]
 89%| | 70/79 [00:03<00:00, 25.28it/s]
 92%|| 73/79 [00:03<00:00, 25.74it/s]
 96%|| 76/79 [00:03<00:00, 26.47it/s]
100%|| 79/79 [00:04<00:00, 27.38it/s]
, 24.31it/s]
 70%|   | 55/79 [00:03<00:00, 24.45it/s]
 73%|  | 58/79 [00:03<00:00, 24.60it/s]
 77%|  | 61/79 [00:03<00:00, 24.83it/s]
 81%|  | 64/79 [00:03<00:00, 24.97it/s]
 85%| | 67/79 [00:03<00:00, 25.11it/s]
 89%| | 70/79 [00:03<00:00, 25.10it/s]
 92%|| 73/79 [00:03<00:00, 25.30it/s]
 96%|| 76/79 [00:03<00:00, 26.24it/s]
100%|| 79/79 [00:04<00:00, 26.47it/s]
, 23.96it/s]
 70%|   | 55/79 [00:03<00:00, 24.52it/s]
 73%|  | 58/79 [00:03<00:00, 24.75it/s]
 77%|  | 61/79 [00:03<00:00, 25.05it/s]
 81%|  | 64/79 [00:03<00:00, 24.96it/s]
 85%| | 67/79 [00:03<00:00, 25.07it/s]
 89%| | 70/79 [00:03<00:00, 25.21it/s]
 92%|| 73/79 [00:03<00:00, 25.72it/s]
 96%|| 76/79 [00:03<00:00, 26.36it/s]
100%|| 79/79 [00:04<00:00, 27.32it/s]
, 24.14it/s]
 70%|   | 55/79 [00:03<00:00, 24.15it/s]
 73%|  | 58/79 [00:03<00:00, 24.51it/s]
 77%|  | 61/79 [00:03<00:00, 24.82it/s]
 81%|  | 64/79 [00:03<00:00, 24.65it/s]
 85%| | 67/79 [00:03<00:00, 25.08it/s]
 89%| | 70/79 [00:03<00:00, 24.85it/s]
 92%|| 73/79 [00:03<00:00, 25.46it/s]
 96%|| 76/79 [00:03<00:00, 26.14it/s]
100%|| 79/79 [00:04<00:00, 27.17it/s]
, 24.11it/s]
 70%|   | 55/79 [00:03<00:00, 24.60it/s]
 73%|  | 58/79 [00:03<00:00, 24.93it/s]
 77%|  | 61/79 [00:03<00:00, 24.95it/s]
 81%|  | 64/79 [00:03<00:00, 25.20it/s]
 85%| | 67/79 [00:03<00:00, 25.11it/s]
 89%| | 70/79 [00:03<00:00, 25.14it/s]
 92%|| 73/79 [00:03<00:00, 25.57it/s]
 96%|| 76/79 [00:03<00:00, 26.28it/s]
100%|| 79/79 [00:04<00:00, 27.26it/s]
, 23.88it/s]
 70%|   | 55/79 [00:03<00:00, 24.48it/s]
 73%|  | 58/79 [00:03<00:00, 24.86it/s]
 77%|  | 61/79 [00:03<00:00, 25.03it/s]
 81%|  | 64/79 [00:03<00:00, 25.09it/s]
 85%| | 67/79 [00:03<00:00, 25.34it/s]
 89%| | 70/79 [00:03<00:00, 24.96it/s]
 92%|| 73/79 [00:03<00:00, 25.36it/s]
 96%|| 76/79 [00:03<00:00, 25.85it/s]
100%|| 79/79 [00:04<00:00, 26.60it/s]
, 24.31it/s]
 70%|   | 55/79 [00:03<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 24.97it/s]
 77%|  | 61/79 [00:03<00:00, 25.14it/s]
 81%|  | 64/79 [00:03<00:00, 25.24it/s]
 85%| | 67/79 [00:03<00:00, 25.24it/s]
 89%| | 70/79 [00:03<00:00, 25.42it/s]
 92%|| 73/79 [00:03<00:00, 25.73it/s]
 96%|| 76/79 [00:03<00:00, 26.85it/s]
100%|| 79/79 [00:03<00:00, 27.19it/s]
, 23.83it/s]
 70%|   | 55/79 [00:03<00:00, 24.34it/s]
 73%|  | 58/79 [00:03<00:00, 24.39it/s]
 77%|  | 61/79 [00:03<00:00, 24.78it/s]
 81%|  | 64/79 [00:03<00:00, 24.80it/s]
 85%| | 67/79 [00:03<00:00, 25.02it/s]
 89%| | 70/79 [00:03<00:00, 24.63it/s]
 92%|| 73/79 [00:03<00:00, 25.22it/s]
 96%|| 76/79 [00:03<00:00, 25.96it/s]
100%|| 79/79 [00:04<00:00, 26.90it/s]
, 23.53it/s]
 70%|   | 55/79 [00:03<00:01, 23.82it/s]
 73%|  | 58/79 [00:03<00:00, 24.37it/s]
 77%|  | 61/79 [00:03<00:00, 24.38it/s]
 81%|  | 64/79 [00:03<00:00, 24.61it/s]
 85%| | 67/79 [00:03<00:00, 24.81it/s]
 89%| | 70/79 [00:03<00:00, 24.92it/s]
 92%|| 73/79 [00:03<00:00, 25.13it/s]
 96%|| 76/79 [00:03<00:00, 25.86it/s]
100%|| 79/79 [00:04<00:00, 26.66it/s]
58it/s]
 68%|   | 54/79 [00:03<00:01, 23.83it/s]
 72%|  | 57/79 [00:03<00:00, 23.94it/s]
 76%|  | 60/79 [00:03<00:00, 23.95it/s]
 80%|  | 63/79 [00:03<00:00, 24.17it/s]
 84%| | 66/79 [00:03<00:00, 24.31it/s]
 87%| | 69/79 [00:03<00:00, 24.41it/s]
 91%| | 72/79 [00:03<00:00, 24.74it/s]
 95%|| 75/79 [00:03<00:00, 25.59it/s]
 99%|| 78/79 [00:04<00:00, 26.23it/s]
100%|| 79/79 [00:04<00:00, 19.24it/s]
54it/s]
 68%|   | 54/79 [00:03<00:01, 24.04it/s]
 72%|  | 57/79 [00:03<00:00, 24.46it/s]
 76%|  | 60/79 [00:03<00:00, 24.53it/s]
 80%|  | 63/79 [00:03<00:00, 24.46it/s]
 84%| | 66/79 [00:03<00:00, 24.67it/s]
 87%| | 69/79 [00:03<00:00, 24.69it/s]
 91%| | 72/79 [00:03<00:00, 24.80it/s]
 95%|| 75/79 [00:03<00:00, 25.65it/s]
 99%|| 78/79 [00:04<00:00, 26.01it/s]
100%|| 79/79 [00:04<00:00, 19.16it/s]
97it/s]
 68%|   | 54/79 [00:03<00:01, 24.15it/s]
 72%|  | 57/79 [00:03<00:00, 24.50it/s]
 76%|  | 60/79 [00:03<00:00, 24.54it/s]
 80%|  | 63/79 [00:03<00:00, 24.53it/s]
 84%| | 66/79 [00:03<00:00, 24.66it/s]
 87%| | 69/79 [00:03<00:00, 25.18it/s]
 91%| | 72/79 [00:03<00:00, 25.20it/s]
 95%|| 75/79 [00:03<00:00, 26.05it/s]
 99%|| 78/79 [00:04<00:00, 26.71it/s]
100%|| 79/79 [00:04<00:00, 19.23it/s]
, 23.09it/s]
 70%|   | 55/79 [00:03<00:01, 23.36it/s]
 73%|  | 58/79 [00:03<00:00, 23.75it/s]
 77%|  | 61/79 [00:03<00:00, 24.02it/s]
 81%|  | 64/79 [00:03<00:00, 24.39it/s]
 85%| | 67/79 [00:03<00:00, 24.67it/s]
 89%| | 70/79 [00:03<00:00, 24.74it/s]
 92%|| 73/79 [00:03<00:00, 25.26it/s]
 96%|| 76/79 [00:03<00:00, 26.01it/s]
100%|| 79/79 [00:04<00:00, 26.84it/s]
, 23.93it/s]
 70%|   | 55/79 [00:03<00:00, 24.06it/s]
 73%|  | 58/79 [00:03<00:00, 24.30it/s]
 77%|  | 61/79 [00:03<00:00, 24.46it/s]
 81%|  | 64/79 [00:03<00:00, 24.62it/s]
 85%| | 67/79 [00:03<00:00, 24.64it/s]
 89%| | 70/79 [00:03<00:00, 24.85it/s]
 92%|| 73/79 [00:03<00:00, 25.36it/s]
 96%|| 76/79 [00:04<00:00, 26.02it/s]
100%|| 79/79 [00:04<00:00, 27.09it/s]
, 24.01it/s]
 70%|   | 55/79 [00:03<00:00, 24.35it/s]
 73%|  | 58/79 [00:03<00:00, 24.41it/s]
 77%|  | 61/79 [00:03<00:00, 24.79it/s]
 81%|  | 64/79 [00:03<00:00, 24.81it/s]
 85%| | 67/79 [00:03<00:00, 25.18it/s]
 89%| | 70/79 [00:03<00:00, 25.30it/s]
 92%|| 73/79 [00:03<00:00, 25.70it/s]
 96%|| 76/79 [00:03<00:00, 26.43it/s]
100%|| 79/79 [00:04<00:00, 27.38it/s]
, 23.64it/s]
 70%|   | 55/79 [00:03<00:01, 23.92it/s]
 73%|  | 58/79 [00:03<00:00, 24.31it/s]
 77%|  | 61/79 [00:03<00:00, 24.20it/s]
 81%|  | 64/79 [00:03<00:00, 24.53it/s]
 85%| | 67/79 [00:03<00:00, 24.85it/s]
 89%| | 70/79 [00:03<00:00, 24.92it/s]
 92%|| 73/79 [00:03<00:00, 25.23it/s]
 96%|| 76/79 [00:03<00:00, 25.89it/s]
100%|| 79/79 [00:04<00:00, 26.73it/s]
, 24.26it/s]
 70%|   | 55/79 [00:03<00:00, 24.37it/s]
 73%|  | 58/79 [00:03<00:00, 24.72it/s]
 77%|  | 61/79 [00:03<00:00, 25.09it/s]
 81%|  | 64/79 [00:03<00:00, 24.71it/s]
 85%| | 67/79 [00:03<00:00, 24.69it/s]
 89%| | 70/79 [00:03<00:00, 24.64it/s]
 92%|| 73/79 [00:03<00:00, 25.07it/s]
 96%|| 76/79 [00:03<00:00, 25.82it/s]
100%|| 79/79 [00:04<00:00, 26.67it/s]
26it/s]
 68%|   | 54/79 [00:03<00:01, 24.54it/s]
 72%|  | 57/79 [00:03<00:00, 24.87it/s]
 76%|  | 60/79 [00:03<00:00, 25.00it/s]
 80%|  | 63/79 [00:03<00:00, 25.16it/s]
 84%| | 66/79 [00:03<00:00, 25.12it/s]
 87%| | 69/79 [00:03<00:00, 25.20it/s]
 91%| | 72/79 [00:03<00:00, 25.15it/s]
 95%|| 75/79 [00:03<00:00, 25.90it/s]
 99%|| 78/79 [00:04<00:00, 26.36it/s]
100%|| 79/79 [00:04<00:00, 19.07it/s]
, 24.30it/s]
 70%|   | 55/79 [00:03<00:00, 25.08it/s]
 73%|  | 58/79 [00:03<00:00, 25.07it/s]
 77%|  | 61/79 [00:03<00:00, 25.44it/s]
 81%|  | 64/79 [00:03<00:00, 25.52it/s]
 85%| | 67/79 [00:03<00:00, 25.32it/s]
 89%| | 70/79 [00:03<00:00, 25.10it/s]
 92%|| 73/79 [00:03<00:00, 25.48it/s]
 96%|| 76/79 [00:03<00:00, 26.25it/s]
100%|| 79/79 [00:04<00:00, 27.11it/s]
, 23.98it/s]
 70%|   | 55/79 [00:03<00:00, 24.43it/s]
 73%|  | 58/79 [00:03<00:00, 24.26it/s]
 77%|  | 61/79 [00:03<00:00, 24.26it/s]
 81%|  | 64/79 [00:03<00:00, 24.40it/s]
 85%| | 67/79 [00:03<00:00, 24.71it/s]
 89%| | 70/79 [00:03<00:00, 24.64it/s]
 92%|| 73/79 [00:03<00:00, 25.05it/s]
 96%|| 76/79 [00:03<00:00, 25.73it/s]
100%|| 79/79 [00:04<00:00, 26.80it/s]
, 22.43it/s]
 70%|   | 55/79 [00:03<00:01, 23.03it/s]
 73%|  | 58/79 [00:03<00:00, 23.87it/s]
 77%|  | 61/79 [00:03<00:00, 23.88it/s]
 81%|  | 64/79 [00:03<00:00, 24.21it/s]
 85%| | 67/79 [00:03<00:00, 24.46it/s]
 89%| | 70/79 [00:03<00:00, 24.68it/s]
 92%|| 73/79 [00:03<00:00, 24.91it/s]
 96%|| 76/79 [00:04<00:00, 25.70it/s]
100%|| 79/79 [00:04<00:00, 26.53it/s]
, 23.65it/s]
 70%|   | 55/79 [00:03<00:00, 24.03it/s]
 73%|  | 58/79 [00:03<00:00, 24.20it/s]
 77%|  | 61/79 [00:03<00:00, 24.84it/s]
 81%|  | 64/79 [00:03<00:00, 24.86it/s]
 85%| | 67/79 [00:03<00:00, 24.65it/s]
 89%| | 70/79 [00:03<00:00, 24.82it/s]
 92%|| 73/79 [00:03<00:00, 25.42it/s]
 96%|| 76/79 [00:04<00:00, 25.88it/s]
100%|| 79/79 [00:04<00:00, 26.89it/s]
, 22.90it/s]
 70%|   | 55/79 [00:03<00:01, 23.50it/s]
 73%|  | 58/79 [00:03<00:00, 23.84it/s]
 77%|  | 61/79 [00:03<00:00, 24.22it/s]
 81%|  | 64/79 [00:03<00:00, 24.53it/s]
 85%| | 67/79 [00:03<00:00, 24.67it/s]
 89%| | 70/79 [00:03<00:00, 24.67it/s]
 92%|| 73/79 [00:03<00:00, 24.90it/s]
 96%|| 76/79 [00:04<00:00, 25.72it/s]
100%|| 79/79 [00:04<00:00, 26.31it/s]
05it/s]
 68%|   | 54/79 [00:03<00:01, 23.52it/s]
 72%|  | 57/79 [00:03<00:00, 23.82it/s]
 76%|  | 60/79 [00:03<00:00, 24.22it/s]
 80%|  | 63/79 [00:03<00:00, 24.33it/s]
 84%| | 66/79 [00:03<00:00, 24.57it/s]
 87%| | 69/79 [00:03<00:00, 24.77it/s]
 91%| | 72/79 [00:03<00:00, 24.59it/s]
 95%|| 75/79 [00:04<00:00, 25.28it/s]
 99%|| 78/79 [00:04<00:00, 25.67it/s]
100%|| 79/79 [00:04<00:00, 18.64it/s]
14it/s]
 68%|   | 54/79 [00:03<00:01, 23.50it/s]
 72%|  | 57/79 [00:03<00:00, 23.52it/s]
 76%|  | 60/79 [00:03<00:00, 23.61it/s]
 80%|  | 63/79 [00:03<00:00, 23.87it/s]
 84%| | 66/79 [00:03<00:00, 23.92it/s]
 87%| | 69/79 [00:03<00:00, 24.08it/s]
 91%| | 72/79 [00:03<00:00, 24.49it/s]
 95%|| 75/79 [00:04<00:00, 25.25it/s]
 99%|| 78/79 [00:04<00:00, 25.80it/s]
100%|| 79/79 [00:04<00:00, 18.40it/s]
22it/s]
 68%|   | 54/79 [00:03<00:01, 23.83it/s]
 72%|  | 57/79 [00:03<00:00, 24.19it/s]
 76%|  | 60/79 [00:03<00:00, 24.04it/s]
 80%|  | 63/79 [00:03<00:00, 24.15it/s]
 84%| | 66/79 [00:03<00:00, 24.07it/s]
 87%| | 69/79 [00:03<00:00, 24.08it/s]
 91%| | 72/79 [00:03<00:00, 24.12it/s]
 95%|| 75/79 [00:04<00:00, 24.95it/s]
 99%|| 78/79 [00:04<00:00, 25.60it/s]
100%|| 79/79 [00:04<00:00, 18.51it/s]
, 23.09it/s]
 70%|   | 55/79 [00:03<00:01, 23.44it/s]
 73%|  | 58/79 [00:03<00:00, 23.63it/s]
 77%|  | 61/79 [00:03<00:00, 23.71it/s]
 81%|  | 64/79 [00:03<00:00, 23.84it/s]
 85%| | 67/79 [00:03<00:00, 24.14it/s]
 89%| | 70/79 [00:03<00:00, 24.16it/s]
 92%|| 73/79 [00:03<00:00, 24.60it/s]
 96%|| 76/79 [00:04<00:00, 25.34it/s]
100%|| 79/79 [00:04<00:00, 26.32it/s]
, 22.50it/s]
 70%|   | 55/79 [00:03<00:01, 23.19it/s]
 73%|  | 58/79 [00:03<00:00, 23.52it/s]
 77%|  | 61/79 [00:03<00:00, 23.79it/s]
 81%|  | 64/79 [00:03<00:00, 23.82it/s]
 85%| | 67/79 [00:03<00:00, 23.92it/s]
 89%| | 70/79 [00:03<00:00, 23.78it/s]
 92%|| 73/79 [00:04<00:00, 24.17it/s]
 96%|| 76/79 [00:04<00:00, 24.92it/s]
100%|| 79/79 [00:04<00:00, 25.82it/s]
2020-06-23 16:06:04,349 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.339996 (0.02777597198486328 s / img per device, on 32 devices)
2020-06-23 16:06:04,370 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:06:04,370 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:06:04,390 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592953574680, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 9, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592953574681, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 9}}

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336


Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0


Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
Grad overflow on iteration  7336

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0


Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0


Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336

Grad overflow on iteration  7336
Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Grad overflow on iteration  7336


Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
2020-06-23 16:06:15,113 maskrcnn_benchmark.trainer INFO: eta: 1:09:31  iter: 7340  loss: 0.7191 (0.7790)  loss_classifier: 0.2228 (0.2867)  loss_box_reg: 0.1138 (0.1249)  loss_mask: 0.2647 (0.3071)  loss_objectness: 0.0212 (0.0393)  loss_rpn_box_reg: 0.0107 (0.0210)  time: 0.1081 (0.1277)  data: 0.0014 (0.0201)  lr: 0.160000  max mem: 5047
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:06:17,281 maskrcnn_benchmark.trainer INFO: eta: 1:09:26  iter: 7360  loss: 0.6044 (0.7787)  loss_classifier: 0.2131 (0.2865)  loss_box_reg: 0.0932 (0.1249)  loss_mask: 0.2732 (0.3070)  loss_objectness: 0.0220 (0.0393)  loss_rpn_box_reg: 0.0088 (0.0210)  time: 0.1077 (0.1277)  data: 0.0014 (0.0200)  lr: 0.160000  max mem: 5047
2020-06-23 16:06:19,466 maskrcnn_benchmark.trainer INFO: eta: 1:09:22  iter: 7380  loss: 0.6990 (0.7785)  loss_classifier: 0.2439 (0.2865)  loss_box_reg: 0.1266 (0.1249)  loss_mask: 0.2822 (0.3070)  loss_objectness: 0.0215 (0.0393)  loss_rpn_box_reg: 0.0086 (0.0209)  time: 0.1085 (0.1276)  data: 0.0014 (0.0200)  lr: 0.160000  max mem: 5047
2020-06-23 16:06:21,622 maskrcnn_benchmark.trainer INFO: eta: 1:09:18  iter: 7400  loss: 0.5907 (0.7781)  loss_classifier: 0.2311 (0.2863)  loss_box_reg: 0.0909 (0.1248)  loss_mask: 0.2522 (0.3068)  loss_objectness: 0.0163 (0.0392)  loss_rpn_box_reg: 0.0087 (0.0209)  time: 0.1070 (0.1276)  data: 0.0014 (0.0199)  lr: 0.160000  max mem: 5047
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.88s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:06:23,792 maskrcnn_benchmark.trainer INFO: eta: 1:09:14  iter: 7420  loss: 0.6702 (0.7777)  loss_classifier: 0.2589 (0.2861)  loss_box_reg: 0.1185 (0.1247)  loss_mask: 0.2521 (0.3067)  loss_objectness: 0.0169 (0.0392)  loss_rpn_box_reg: 0.0099 (0.0209)  time: 0.1079 (0.1275)  data: 0.0014 (0.0199)  lr: 0.160000  max mem: 5047
DONE (t=1.92s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.29101
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.49493
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.31067
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.16258
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.31385
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.37410
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.26412
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43158
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.45338
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.26926
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.48825
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.56465
2020-06-23 16:06:25,943 maskrcnn_benchmark.trainer INFO: eta: 1:09:09  iter: 7440  loss: 0.6773 (0.7775)  loss_classifier: 0.2387 (0.2860)  loss_box_reg: 0.1087 (0.1247)  loss_mask: 0.2973 (0.3067)  loss_objectness: 0.0175 (0.0392)  loss_rpn_box_reg: 0.0085 (0.0209)  time: 0.1076 (0.1275)  data: 0.0014 (0.0198)  lr: 0.160000  max mem: 5047
2020-06-23 16:06:28,099 maskrcnn_benchmark.trainer INFO: eta: 1:09:05  iter: 7460  loss: 0.5603 (0.7770)  loss_classifier: 0.1947 (0.2858)  loss_box_reg: 0.0959 (0.1246)  loss_mask: 0.2385 (0.3065)  loss_objectness: 0.0128 (0.0391)  loss_rpn_box_reg: 0.0061 (0.0209)  time: 0.1075 (0.1274)  data: 0.0013 (0.0198)  lr: 0.160000  max mem: 5047
2020-06-23 16:06:30,257 maskrcnn_benchmark.trainer INFO: eta: 1:09:01  iter: 7480  loss: 0.5923 (0.7766)  loss_classifier: 0.2217 (0.2856)  loss_box_reg: 0.0888 (0.1245)  loss_mask: 0.2682 (0.3064)  loss_objectness: 0.0185 (0.0391)  loss_rpn_box_reg: 0.0123 (0.0209)  time: 0.1079 (0.1273)  data: 0.0014 (0.0197)  lr: 0.160000  max mem: 5047
2020-06-23 16:06:32,426 maskrcnn_benchmark.trainer INFO: eta: 1:08:57  iter: 7500  loss: 0.6543 (0.7763)  loss_classifier: 0.2535 (0.2856)  loss_box_reg: 0.1096 (0.1245)  loss_mask: 0.2631 (0.3063)  loss_objectness: 0.0191 (0.0391)  loss_rpn_box_reg: 0.0084 (0.0209)  time: 0.1071 (0.1273)  data: 0.0014 (0.0197)  lr: 0.160000  max mem: 5047
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:06:34,596 maskrcnn_benchmark.trainer INFO: eta: 1:08:52  iter: 7520  loss: 0.6954 (0.7761)  loss_classifier: 0.2264 (0.2854)  loss_box_reg: 0.1337 (0.1245)  loss_mask: 0.2741 (0.3062)  loss_objectness: 0.0233 (0.0390)  loss_rpn_box_reg: 0.0136 (0.0209)  time: 0.1080 (0.1272)  data: 0.0014 (0.0196)  lr: 0.160000  max mem: 5047
DONE (t=2.34s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:06:36,759 maskrcnn_benchmark.trainer INFO: eta: 1:08:48  iter: 7540  loss: 0.5926 (0.7757)  loss_classifier: 0.1999 (0.2853)  loss_box_reg: 0.0795 (0.1244)  loss_mask: 0.2589 (0.3061)  loss_objectness: 0.0193 (0.0390)  loss_rpn_box_reg: 0.0195 (0.0209)  time: 0.1072 (0.1272)  data: 0.0014 (0.0196)  lr: 0.160000  max mem: 5047
DONE (t=3.06s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.27771
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.46848
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.28986
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.12168
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.30033
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.40919
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25880
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.40880
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.42757
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.23468
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.46520
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.55658
2020-06-23 16:06:38,654 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.291011700225408, segm mAP: 0.2777114851502472
:::MLLOG {"namespace": "", "time_ms": 1592953598654, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.291011700225408, "SEGM": 0.2777114851502472}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 8}}
:::MLLOG {"namespace": "", "time_ms": 1592953598655, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 8}}
2020-06-23 16:06:39,086 maskrcnn_benchmark.trainer INFO: eta: 1:08:45  iter: 7560  loss: 0.6233 (0.7754)  loss_classifier: 0.2111 (0.2852)  loss_box_reg: 0.1035 (0.1244)  loss_mask: 0.2536 (0.3060)  loss_objectness: 0.0179 (0.0390)  loss_rpn_box_reg: 0.0156 (0.0209)  time: 0.1077 (0.1272)  data: 0.0015 (0.0195)  lr: 0.160000  max mem: 5047
2020-06-23 16:06:41,247 maskrcnn_benchmark.trainer INFO: eta: 1:08:41  iter: 7580  loss: 0.6967 (0.7753)  loss_classifier: 0.2240 (0.2851)  loss_box_reg: 0.1081 (0.1244)  loss_mask: 0.2526 (0.3058)  loss_objectness: 0.0221 (0.0390)  loss_rpn_box_reg: 0.0111 (0.0210)  time: 0.1075 (0.1271)  data: 0.0014 (0.0195)  lr: 0.160000  max mem: 5047
2020-06-23 16:06:43,415 maskrcnn_benchmark.trainer INFO: eta: 1:08:36  iter: 7600  loss: 0.6426 (0.7750)  loss_classifier: 0.2295 (0.2850)  loss_box_reg: 0.1057 (0.1243)  loss_mask: 0.2462 (0.3057)  loss_objectness: 0.0150 (0.0390)  loss_rpn_box_reg: 0.0075 (0.0209)  time: 0.1078 (0.1271)  data: 0.0014 (0.0194)  lr: 0.160000  max mem: 5047
2020-06-23 16:06:45,581 maskrcnn_benchmark.trainer INFO: eta: 1:08:32  iter: 7620  loss: 0.6575 (0.7748)  loss_classifier: 0.2381 (0.2850)  loss_box_reg: 0.1066 (0.1243)  loss_mask: 0.2782 (0.3057)  loss_objectness: 0.0168 (0.0389)  loss_rpn_box_reg: 0.0094 (0.0209)  time: 0.1074 (0.1270)  data: 0.0015 (0.0194)  lr: 0.160000  max mem: 5047
2020-06-23 16:06:47,747 maskrcnn_benchmark.trainer INFO: eta: 1:08:28  iter: 7640  loss: 0.6312 (0.7744)  loss_classifier: 0.2243 (0.2848)  loss_box_reg: 0.0973 (0.1242)  loss_mask: 0.2779 (0.3056)  loss_objectness: 0.0196 (0.0389)  loss_rpn_box_reg: 0.0107 (0.0209)  time: 0.1074 (0.1270)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5047
2020-06-23 16:06:49,904 maskrcnn_benchmark.trainer INFO: eta: 1:08:24  iter: 7660  loss: 0.5636 (0.7740)  loss_classifier: 0.1894 (0.2847)  loss_box_reg: 0.0808 (0.1242)  loss_mask: 0.2302 (0.3054)  loss_objectness: 0.0154 (0.0389)  loss_rpn_box_reg: 0.0069 (0.0209)  time: 0.1071 (0.1269)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5047
2020-06-23 16:06:52,065 maskrcnn_benchmark.trainer INFO: eta: 1:08:20  iter: 7680  loss: 0.6442 (0.7738)  loss_classifier: 0.2354 (0.2846)  loss_box_reg: 0.1069 (0.1242)  loss_mask: 0.2859 (0.3053)  loss_objectness: 0.0254 (0.0388)  loss_rpn_box_reg: 0.0083 (0.0209)  time: 0.1078 (0.1269)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5047
2020-06-23 16:06:54,234 maskrcnn_benchmark.trainer INFO: eta: 1:08:16  iter: 7700  loss: 0.6757 (0.7735)  loss_classifier: 0.2504 (0.2845)  loss_box_reg: 0.0933 (0.1241)  loss_mask: 0.2582 (0.3052)  loss_objectness: 0.0181 (0.0388)  loss_rpn_box_reg: 0.0084 (0.0209)  time: 0.1085 (0.1268)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 5047
2020-06-23 16:06:56,413 maskrcnn_benchmark.trainer INFO: eta: 1:08:12  iter: 7720  loss: 0.6609 (0.7733)  loss_classifier: 0.2439 (0.2844)  loss_box_reg: 0.1120 (0.1241)  loss_mask: 0.2671 (0.3052)  loss_objectness: 0.0247 (0.0388)  loss_rpn_box_reg: 0.0087 (0.0209)  time: 0.1076 (0.1268)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5047
2020-06-23 16:06:58,571 maskrcnn_benchmark.trainer INFO: eta: 1:08:08  iter: 7740  loss: 0.5686 (0.7729)  loss_classifier: 0.1905 (0.2842)  loss_box_reg: 0.0800 (0.1240)  loss_mask: 0.2466 (0.3051)  loss_objectness: 0.0204 (0.0388)  loss_rpn_box_reg: 0.0083 (0.0209)  time: 0.1079 (0.1267)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:00,749 maskrcnn_benchmark.trainer INFO: eta: 1:08:04  iter: 7760  loss: 0.6529 (0.7726)  loss_classifier: 0.2353 (0.2841)  loss_box_reg: 0.1040 (0.1240)  loss_mask: 0.2742 (0.3050)  loss_objectness: 0.0243 (0.0387)  loss_rpn_box_reg: 0.0084 (0.0209)  time: 0.1078 (0.1267)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:02,914 maskrcnn_benchmark.trainer INFO: eta: 1:08:00  iter: 7780  loss: 0.6661 (0.7725)  loss_classifier: 0.2371 (0.2840)  loss_box_reg: 0.1102 (0.1240)  loss_mask: 0.2747 (0.3049)  loss_objectness: 0.0188 (0.0387)  loss_rpn_box_reg: 0.0076 (0.0209)  time: 0.1077 (0.1266)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:05,093 maskrcnn_benchmark.trainer INFO: eta: 1:07:56  iter: 7800  loss: 0.5857 (0.7722)  loss_classifier: 0.2222 (0.2839)  loss_box_reg: 0.0961 (0.1239)  loss_mask: 0.2483 (0.3048)  loss_objectness: 0.0240 (0.0387)  loss_rpn_box_reg: 0.0117 (0.0209)  time: 0.1092 (0.1266)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:07,255 maskrcnn_benchmark.trainer INFO: eta: 1:07:52  iter: 7820  loss: 0.7635 (0.7721)  loss_classifier: 0.2885 (0.2839)  loss_box_reg: 0.1205 (0.1239)  loss_mask: 0.2798 (0.3047)  loss_objectness: 0.0241 (0.0387)  loss_rpn_box_reg: 0.0178 (0.0209)  time: 0.1084 (0.1265)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:09,426 maskrcnn_benchmark.trainer INFO: eta: 1:07:48  iter: 7840  loss: 0.6154 (0.7719)  loss_classifier: 0.2207 (0.2838)  loss_box_reg: 0.0990 (0.1239)  loss_mask: 0.2511 (0.3046)  loss_objectness: 0.0168 (0.0387)  loss_rpn_box_reg: 0.0105 (0.0209)  time: 0.1083 (0.1265)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:11,590 maskrcnn_benchmark.trainer INFO: eta: 1:07:44  iter: 7860  loss: 0.5590 (0.7715)  loss_classifier: 0.2040 (0.2837)  loss_box_reg: 0.0832 (0.1238)  loss_mask: 0.2442 (0.3045)  loss_objectness: 0.0195 (0.0386)  loss_rpn_box_reg: 0.0075 (0.0209)  time: 0.1081 (0.1264)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:13,762 maskrcnn_benchmark.trainer INFO: eta: 1:07:40  iter: 7880  loss: 0.5839 (0.7712)  loss_classifier: 0.2046 (0.2835)  loss_box_reg: 0.0887 (0.1238)  loss_mask: 0.2670 (0.3044)  loss_objectness: 0.0200 (0.0386)  loss_rpn_box_reg: 0.0085 (0.0209)  time: 0.1076 (0.1264)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:15,931 maskrcnn_benchmark.trainer INFO: eta: 1:07:36  iter: 7900  loss: 0.5906 (0.7708)  loss_classifier: 0.2130 (0.2833)  loss_box_reg: 0.0914 (0.1237)  loss_mask: 0.2565 (0.3043)  loss_objectness: 0.0146 (0.0386)  loss_rpn_box_reg: 0.0089 (0.0209)  time: 0.1079 (0.1264)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:18,088 maskrcnn_benchmark.trainer INFO: eta: 1:07:32  iter: 7920  loss: 0.6817 (0.7707)  loss_classifier: 0.2679 (0.2833)  loss_box_reg: 0.1124 (0.1237)  loss_mask: 0.2745 (0.3042)  loss_objectness: 0.0233 (0.0385)  loss_rpn_box_reg: 0.0100 (0.0209)  time: 0.1077 (0.1263)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:20,260 maskrcnn_benchmark.trainer INFO: eta: 1:07:28  iter: 7940  loss: 0.6801 (0.7704)  loss_classifier: 0.2291 (0.2833)  loss_box_reg: 0.1181 (0.1237)  loss_mask: 0.2516 (0.3041)  loss_objectness: 0.0267 (0.0385)  loss_rpn_box_reg: 0.0109 (0.0209)  time: 0.1074 (0.1263)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:22,405 maskrcnn_benchmark.trainer INFO: eta: 1:07:24  iter: 7960  loss: 0.6499 (0.7702)  loss_classifier: 0.2235 (0.2832)  loss_box_reg: 0.1069 (0.1237)  loss_mask: 0.2683 (0.3040)  loss_objectness: 0.0215 (0.0385)  loss_rpn_box_reg: 0.0098 (0.0208)  time: 0.1066 (0.1262)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:24,571 maskrcnn_benchmark.trainer INFO: eta: 1:07:20  iter: 7980  loss: 0.6852 (0.7701)  loss_classifier: 0.2628 (0.2831)  loss_box_reg: 0.1047 (0.1237)  loss_mask: 0.2679 (0.3040)  loss_objectness: 0.0325 (0.0385)  loss_rpn_box_reg: 0.0105 (0.0208)  time: 0.1066 (0.1262)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:26,733 maskrcnn_benchmark.trainer INFO: eta: 1:07:16  iter: 8000  loss: 0.6666 (0.7698)  loss_classifier: 0.2199 (0.2830)  loss_box_reg: 0.0917 (0.1236)  loss_mask: 0.2551 (0.3039)  loss_objectness: 0.0322 (0.0385)  loss_rpn_box_reg: 0.0123 (0.0209)  time: 0.1084 (0.1261)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:28,900 maskrcnn_benchmark.trainer INFO: eta: 1:07:12  iter: 8020  loss: 0.6368 (0.7696)  loss_classifier: 0.2204 (0.2829)  loss_box_reg: 0.0912 (0.1236)  loss_mask: 0.2632 (0.3038)  loss_objectness: 0.0282 (0.0385)  loss_rpn_box_reg: 0.0138 (0.0209)  time: 0.1077 (0.1261)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:31,083 maskrcnn_benchmark.trainer INFO: eta: 1:07:08  iter: 8040  loss: 0.7067 (0.7695)  loss_classifier: 0.2280 (0.2828)  loss_box_reg: 0.1121 (0.1236)  loss_mask: 0.2774 (0.3037)  loss_objectness: 0.0240 (0.0385)  loss_rpn_box_reg: 0.0105 (0.0209)  time: 0.1082 (0.1260)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:33,254 maskrcnn_benchmark.trainer INFO: eta: 1:07:04  iter: 8060  loss: 0.6712 (0.7692)  loss_classifier: 0.2124 (0.2827)  loss_box_reg: 0.1141 (0.1235)  loss_mask: 0.2705 (0.3036)  loss_objectness: 0.0236 (0.0385)  loss_rpn_box_reg: 0.0112 (0.0209)  time: 0.1080 (0.1260)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:35,421 maskrcnn_benchmark.trainer INFO: eta: 1:07:00  iter: 8080  loss: 0.6478 (0.7689)  loss_classifier: 0.2182 (0.2825)  loss_box_reg: 0.0986 (0.1235)  loss_mask: 0.2818 (0.3036)  loss_objectness: 0.0203 (0.0385)  loss_rpn_box_reg: 0.0130 (0.0209)  time: 0.1079 (0.1260)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:37,579 maskrcnn_benchmark.trainer INFO: eta: 1:06:56  iter: 8100  loss: 0.6950 (0.7688)  loss_classifier: 0.2550 (0.2825)  loss_box_reg: 0.1214 (0.1235)  loss_mask: 0.2753 (0.3035)  loss_objectness: 0.0255 (0.0385)  loss_rpn_box_reg: 0.0066 (0.0209)  time: 0.1073 (0.1259)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:39,723 maskrcnn_benchmark.trainer INFO: eta: 1:06:52  iter: 8120  loss: 0.7341 (0.7688)  loss_classifier: 0.2723 (0.2825)  loss_box_reg: 0.1357 (0.1235)  loss_mask: 0.2926 (0.3035)  loss_objectness: 0.0257 (0.0385)  loss_rpn_box_reg: 0.0101 (0.0209)  time: 0.1068 (0.1259)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:41,877 maskrcnn_benchmark.trainer INFO: eta: 1:06:48  iter: 8140  loss: 0.6595 (0.7686)  loss_classifier: 0.2256 (0.2823)  loss_box_reg: 0.0953 (0.1234)  loss_mask: 0.2720 (0.3034)  loss_objectness: 0.0224 (0.0385)  loss_rpn_box_reg: 0.0097 (0.0209)  time: 0.1075 (0.1258)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:44,039 maskrcnn_benchmark.trainer INFO: eta: 1:06:44  iter: 8160  loss: 0.6828 (0.7684)  loss_classifier: 0.2539 (0.2822)  loss_box_reg: 0.1039 (0.1234)  loss_mask: 0.2797 (0.3034)  loss_objectness: 0.0179 (0.0385)  loss_rpn_box_reg: 0.0107 (0.0209)  time: 0.1079 (0.1258)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:46,196 maskrcnn_benchmark.trainer INFO: eta: 1:06:40  iter: 8180  loss: 0.6240 (0.7681)  loss_classifier: 0.2156 (0.2821)  loss_box_reg: 0.0895 (0.1234)  loss_mask: 0.2673 (0.3033)  loss_objectness: 0.0275 (0.0385)  loss_rpn_box_reg: 0.0116 (0.0209)  time: 0.1069 (0.1257)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:48,356 maskrcnn_benchmark.trainer INFO: eta: 1:06:36  iter: 8200  loss: 0.6131 (0.7679)  loss_classifier: 0.2041 (0.2820)  loss_box_reg: 0.1050 (0.1233)  loss_mask: 0.2904 (0.3032)  loss_objectness: 0.0162 (0.0384)  loss_rpn_box_reg: 0.0068 (0.0209)  time: 0.1080 (0.1257)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:50,505 maskrcnn_benchmark.trainer INFO: eta: 1:06:32  iter: 8220  loss: 0.5885 (0.7676)  loss_classifier: 0.1807 (0.2819)  loss_box_reg: 0.0849 (0.1233)  loss_mask: 0.2284 (0.3031)  loss_objectness: 0.0184 (0.0384)  loss_rpn_box_reg: 0.0083 (0.0209)  time: 0.1068 (0.1256)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5047
2020-06-23 16:07:52,651 maskrcnn_benchmark.trainer INFO: eta: 1:06:29  iter: 8240  loss: 0.6011 (0.7673)  loss_classifier: 0.2186 (0.2818)  loss_box_reg: 0.0996 (0.1233)  loss_mask: 0.2537 (0.3030)  loss_objectness: 0.0162 (0.0384)  loss_rpn_box_reg: 0.0099 (0.0209)  time: 0.1073 (0.1256)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5047
:::MLLOG {"namespace": "", "time_ms": 1592953674060, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 9}}
:::MLLOG {"namespace": "", "time_ms": 1592953674060, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 9}}
:::MLLOG {"namespace": "", "time_ms": 1592953674060, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 9}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 16:07:54,284 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
index created!
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
2020-06-23 16:07:54,587 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:57,  1.35it/s]
  5%|         | 4/79 [00:00<00:39,  1.89it/s]
  9%|         | 7/79 [00:00<00:27,  2.61it/s]
 13%|        | 10/79 [00:01<00:19,  3.57it/s]
 16%|        | 13/79 [00:01<00:13,  4.80it/s]
 20%|        | 16/79 [00:01<00:09,  6.32it/s]
 24%|       | 19/79 [00:01<00:07,  8.13it/s]
 28%|       | 22/79 [00:01<00:05, 10.25it/s]
 32%|      | 25/79 [00:01<00:04, 12.48it/s]
 35%|      | 28/79 [00:01<00:03, 14.72it/s]
 39%|      | 31/79 [00:01<00:02, 16.76it/s]
 43%|     | 34/79 [00:02<00:02, 18.79it/s]
 47%|     | 37/79 [00:02<00:02, 20.26it/s]
 51%|     | 40/79 [00:02<00:01, 21.57it/s]
 54%|    | 43/79 [00:02<00:01, 22.74it/s]
 58%|    | 46/79 [00:02<00:01, 23.56it/s]
 62%|   | 49/79 [00:02<00:01, 23.84it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.76it/s]
  9%|         | 7/79 [00:01<00:29,  2.45it/s]
 13%|        | 10/79 [00:01<00:20,  3.35it/s]
 16%|        | 13/79 [00:01<00:14,  4.54it/s]
 20%|        | 16/79 [00:01<00:10,  6.02it/s]
 24%|       | 19/79 [00:01<00:07,  7.82it/s]
 28%|       | 22/79 [00:01<00:05,  9.92it/s]
 32%|      | 25/79 [00:01<00:04, 12.11it/s]
 35%|      | 28/79 [00:01<00:03, 14.46it/s]
 39%|      | 31/79 [00:01<00:02, 16.71it/s]
 43%|     | 34/79 [00:02<00:02, 18.70it/s]
 47%|     | 37/79 [00:02<00:02, 20.50it/s]
 51%|     | 40/79 [00:02<00:01, 21.66it/s]
 54%|    | 43/79 [00:02<00:01, 22.73it/s]
 58%|    | 46/79 [00:02<00:01, 23.59it/s]
 62%|   | 49/79 [00:02<00:01, 24.01it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.28it/s]
  5%|         | 4/79 [00:00<00:42,  1.78it/s]
  9%|         | 7/79 [00:01<00:29,  2.47it/s]
 13%|        | 10/79 [00:01<00:20,  3.39it/s]
 16%|        | 13/79 [00:01<00:14,  4.58it/s]
 20%|        | 16/79 [00:01<00:10,  6.08it/s]
 24%|       | 19/79 [00:01<00:07,  7.87it/s]
 28%|       | 22/79 [00:01<00:05,  9.95it/s]
 32%|      | 25/79 [00:01<00:04, 12.19it/s]
 35%|      | 28/79 [00:01<00:03, 14.50it/s]
 39%|      | 31/79 [00:01<00:02, 16.65it/s]
 43%|     | 34/79 [00:02<00:02, 18.57it/s]
 47%|     | 37/79 [00:02<00:02, 20.23it/s]
 51%|     | 40/79 [00:02<00:01, 21.63it/s]
 54%|    | 43/79 [00:02<00:01, 22.63it/s]
 58%|    | 46/79 [00:02<00:01, 23.38it/s]
 62%|   | 49/79 [00:02<00:01, 24.08it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.28it/s]
  5%|         | 4/79 [00:00<00:42,  1.78it/s]
  9%|         | 7/79 [00:01<00:29,  2.47it/s]
 13%|        | 10/79 [00:01<00:20,  3.38it/s]
 16%|        | 13/79 [00:01<00:14,  4.56it/s]
 20%|        | 16/79 [00:01<00:10,  6.06it/s]
 24%|       | 19/79 [00:01<00:07,  7.83it/s]
 28%|       | 22/79 [00:01<00:05,  9.85it/s]
 32%|      | 25/79 [00:01<00:04, 12.06it/s]
 35%|      | 28/79 [00:01<00:03, 14.33it/s]
 39%|      | 31/79 [00:01<00:02, 16.38it/s]
 43%|     | 34/79 [00:02<00:02, 18.21it/s]
 47%|     | 37/79 [00:02<00:02, 19.78it/s]
 51%|     | 40/79 [00:02<00:01, 21.14it/s]
 54%|    | 43/79 [00:02<00:01, 22.28it/s]
 58%|    | 46/79 [00:02<00:01, 22.91it/s]
 62%|   | 49/79 [00:02<00:01, 23.51it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.45it/s]
 20%|        | 16/79 [00:01<00:10,  5.92it/s]
 24%|       | 19/79 [00:01<00:07,  7.69it/s]
 28%|       | 22/79 [00:01<00:05,  9.73it/s]
 32%|      | 25/79 [00:01<00:04, 11.96it/s]
 35%|      | 28/79 [00:01<00:03, 14.29it/s]
 39%|      | 31/79 [00:01<00:02, 16.47it/s]
 43%|     | 34/79 [00:02<00:02, 18.26it/s]
 47%|     | 37/79 [00:02<00:02, 19.97it/s]
 51%|     | 40/79 [00:02<00:01, 21.41it/s]
 54%|    | 43/79 [00:02<00:01, 22.43it/s]
 58%|    | 46/79 [00:02<00:01, 23.14it/s]
 62%|   | 49/79 [00:02<00:01, 23.88it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.63it/s]
 28%|       | 22/79 [00:01<00:05,  9.66it/s]
 32%|      | 25/79 [00:01<00:04, 11.81it/s]
 35%|      | 28/79 [00:01<00:03, 13.95it/s]
 39%|      | 31/79 [00:02<00:02, 16.15it/s]
 43%|     | 34/79 [00:02<00:02, 18.00it/s]
 47%|     | 37/79 [00:02<00:02, 19.85it/s]
 51%|     | 40/79 [00:02<00:01, 21.41it/s]
 54%|    | 43/79 [00:02<00:01, 22.30it/s]
 58%|    | 46/79 [00:02<00:01, 23.24it/s]
 62%|   | 49/79 [00:02<00:01, 24.23it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:29,  2.40it/s]
 13%|        | 10/79 [00:01<00:20,  3.29it/s]
 16%|        | 13/79 [00:01<00:14,  4.45it/s]
 20%|        | 16/79 [00:01<00:10,  5.90it/s]
 24%|       | 19/79 [00:01<00:07,  7.64it/s]
 28%|       | 22/79 [00:01<00:05,  9.63it/s]
 32%|      | 25/79 [00:01<00:04, 11.81it/s]
 35%|      | 28/79 [00:01<00:03, 13.98it/s]
 39%|      | 31/79 [00:02<00:02, 16.05it/s]
 43%|     | 34/79 [00:02<00:02, 17.87it/s]
 47%|     | 37/79 [00:02<00:02, 19.52it/s]
 51%|     | 40/79 [00:02<00:01, 20.84it/s]
 54%|    | 43/79 [00:02<00:01, 22.09it/s]
 58%|    | 46/79 [00:02<00:01, 22.83it/s]
 62%|   | 49/79 [00:02<00:01, 23.61it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.16it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.34it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.55it/s]
 35%|      | 28/79 [00:01<00:03, 13.82it/s]
 39%|      | 31/79 [00:02<00:02, 16.04it/s]
 43%|     | 34/79 [00:02<00:02, 18.07it/s]
 47%|     | 37/79 [00:02<00:02, 19.81it/s]
 51%|     | 40/79 [00:02<00:01, 21.12it/s]
 54%|    | 43/79 [00:02<00:01, 22.35it/s]
 58%|    | 46/79 [00:02<00:01, 23.07it/s]
 62%|   | 49/79 [00:02<00:01, 23.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.27it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.85it/s]
 24%|       | 19/79 [00:01<00:07,  7.59it/s]
 28%|       | 22/79 [00:01<00:05,  9.62it/s]
 32%|      | 25/79 [00:01<00:04, 11.80it/s]
 35%|      | 28/79 [00:01<00:03, 14.03it/s]
 39%|      | 31/79 [00:02<00:02, 16.10it/s]
 43%|     | 34/79 [00:02<00:02, 18.06it/s]
 47%|     | 37/79 [00:02<00:02, 19.67it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 22.05it/s]
 58%|    | 46/79 [00:02<00:01, 22.88it/s]
 62%|   | 49/79 [00:02<00:01, 23.49it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:06,  9.42it/s]
 32%|      | 25/79 [00:01<00:04, 11.59it/s]
 35%|      | 28/79 [00:01<00:03, 13.80it/s]
 39%|      | 31/79 [00:02<00:02, 16.04it/s]
 43%|     | 34/79 [00:02<00:02, 17.75it/s]
 47%|     | 37/79 [00:02<00:02, 19.41it/s]
 51%|     | 40/79 [00:02<00:01, 20.83it/s]
 54%|    | 43/79 [00:02<00:01, 22.16it/s]
 58%|    | 46/79 [00:02<00:01, 22.46it/s]
 62%|   | 49/79 [00:02<00:01, 23.16it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  4%|         | 3/79 [00:00<00:46,  1.62it/s]
  8%|         | 6/79 [00:01<00:32,  2.25it/s]
 11%|        | 9/79 [00:01<00:22,  3.10it/s]
 15%|        | 12/79 [00:01<00:15,  4.21it/s]
 19%|        | 15/79 [00:01<00:11,  5.61it/s]
 23%|       | 18/79 [00:01<00:08,  7.31it/s]
 27%|       | 21/79 [00:01<00:06,  9.29it/s]
 30%|       | 24/79 [00:01<00:04, 11.51it/s]
 34%|      | 27/79 [00:01<00:03, 13.74it/s]
 38%|      | 30/79 [00:02<00:03, 15.94it/s]
 42%|     | 33/79 [00:02<00:02, 17.99it/s]
 46%|     | 36/79 [00:02<00:02, 19.82it/s]
 49%|     | 39/79 [00:02<00:01, 21.00it/s]
 53%|    | 42/79 [00:02<00:01, 22.14it/s]
 57%|    | 45/79 [00:02<00:01, 22.97it/s]
 61%|    | 48/79 [00:02<00:01, 23.40it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.37it/s]
 32%|      | 25/79 [00:01<00:04, 11.61it/s]
 35%|      | 28/79 [00:01<00:03, 13.87it/s]
 39%|      | 31/79 [00:02<00:02, 16.19it/s]
 43%|     | 34/79 [00:02<00:02, 18.16it/s]
 47%|     | 37/79 [00:02<00:02, 19.99it/s]
 51%|     | 40/79 [00:02<00:01, 21.29it/s]
 54%|    | 43/79 [00:02<00:01, 22.43it/s]
 58%|    | 46/79 [00:02<00:01, 23.27it/s]
 62%|   | 49/79 [00:02<00:01, 23.95it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.71it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.40it/s]
 32%|      | 25/79 [00:01<00:04, 11.58it/s]
 35%|      | 28/79 [00:01<00:03, 13.89it/s]
 39%|      | 31/79 [00:02<00:02, 16.03it/s]
 43%|     | 34/79 [00:02<00:02, 18.01it/s]
 47%|     | 37/79 [00:02<00:02, 19.66it/s]
 51%|     | 40/79 [00:02<00:01, 21.12it/s]
 54%|    | 43/79 [00:02<00:01, 22.44it/s]
 58%|    | 46/79 [00:02<00:01, 23.10it/s]
 62%|   | 49/79 [00:02<00:01, 23.54it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  4%|         | 3/79 [00:00<00:47,  1.59it/s]
  8%|         | 6/79 [00:01<00:32,  2.21it/s]
 11%|        | 9/79 [00:01<00:22,  3.05it/s]
 15%|        | 12/79 [00:01<00:16,  4.14it/s]
 19%|        | 15/79 [00:01<00:11,  5.53it/s]
 23%|       | 18/79 [00:01<00:08,  7.24it/s]
 27%|       | 21/79 [00:01<00:06,  9.20it/s]
 30%|       | 24/79 [00:01<00:04, 11.31it/s]
 34%|      | 27/79 [00:01<00:03, 13.59it/s]
 38%|      | 30/79 [00:02<00:03, 15.75it/s]
 42%|     | 33/79 [00:02<00:02, 17.81it/s]
 46%|     | 36/79 [00:02<00:02, 19.55it/s]
 49%|     | 39/79 [00:02<00:01, 20.94it/s]
 53%|    | 42/79 [00:02<00:01, 22.05it/s]
 57%|    | 45/79 [00:02<00:01, 22.97it/s]
 61%|    | 48/79 [00:02<00:01, 23.39it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.33it/s]
 35%|      | 28/79 [00:01<00:03, 13.60it/s]
 39%|      | 31/79 [00:02<00:03, 15.90it/s]
 43%|     | 34/79 [00:02<00:02, 17.96it/s]
 47%|     | 37/79 [00:02<00:02, 19.71it/s]
 51%|     | 40/79 [00:02<00:01, 21.11it/s]
 54%|    | 43/79 [00:02<00:01, 22.22it/s]
 58%|    | 46/79 [00:02<00:01, 22.94it/s]
 62%|   | 49/79 [00:02<00:01, 23.70it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.23it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.34it/s]
 32%|      | 25/79 [00:01<00:04, 11.55it/s]
 35%|      | 28/79 [00:01<00:03, 13.81it/s]
 39%|      | 31/79 [00:02<00:03, 15.95it/s]
 43%|     | 34/79 [00:02<00:02, 17.74it/s]
 47%|     | 37/79 [00:02<00:02, 19.17it/s]
 51%|     | 40/79 [00:02<00:01, 20.46it/s]
 54%|    | 43/79 [00:02<00:01, 21.41it/s]
 58%|    | 46/79 [00:02<00:01, 22.42it/s]
 62%|   | 49/79 [00:02<00:01, 22.64it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.34it/s]
 32%|      | 25/79 [00:01<00:04, 11.43it/s]
 35%|      | 28/79 [00:01<00:03, 13.67it/s]
 39%|      | 31/79 [00:02<00:03, 15.80it/s]
 43%|     | 34/79 [00:02<00:02, 17.71it/s]
 47%|     | 37/79 [00:02<00:02, 19.44it/s]
 51%|     | 40/79 [00:02<00:01, 20.92it/s]
 54%|    | 43/79 [00:02<00:01, 21.98it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.50it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.26it/s]
 28%|       | 22/79 [00:01<00:06,  9.23it/s]
 32%|      | 25/79 [00:01<00:04, 11.40it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.81it/s]
 47%|     | 37/79 [00:02<00:02, 19.34it/s]
 51%|     | 40/79 [00:02<00:01, 20.77it/s]
 54%|    | 43/79 [00:02<00:01, 21.90it/s]
 58%|    | 46/79 [00:02<00:01, 22.68it/s]
 62%|   | 49/79 [00:02<00:01, 23.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.23it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.37it/s]
 35%|      | 28/79 [00:01<00:03, 13.66it/s]
 39%|      | 31/79 [00:02<00:03, 15.80it/s]
 43%|     | 34/79 [00:02<00:02, 17.86it/s]
 47%|     | 37/79 [00:02<00:02, 19.57it/s]
 51%|     | 40/79 [00:02<00:01, 20.88it/s]
 54%|    | 43/79 [00:02<00:01, 22.01it/s]
 58%|    | 46/79 [00:02<00:01, 22.76it/s]
 62%|   | 49/79 [00:02<00:01, 23.48it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.34it/s]
 35%|      | 28/79 [00:01<00:03, 13.59it/s]
 39%|      | 31/79 [00:02<00:03, 15.57it/s]
 43%|     | 34/79 [00:02<00:02, 17.63it/s]
 47%|     | 37/79 [00:02<00:02, 19.20it/s]
 51%|     | 40/79 [00:02<00:01, 20.51it/s]
 54%|    | 43/79 [00:02<00:01, 21.55it/s]
 58%|    | 46/79 [00:02<00:01, 22.62it/s]
 62%|   | 49/79 [00:02<00:01, 23.38it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.07it/s]
 32%|      | 25/79 [00:01<00:04, 11.18it/s]
 35%|      | 28/79 [00:01<00:03, 13.37it/s]
 39%|      | 31/79 [00:02<00:03, 15.64it/s]
 43%|     | 34/79 [00:02<00:02, 17.38it/s]
 47%|     | 37/79 [00:02<00:02, 18.95it/s]
 51%|     | 40/79 [00:02<00:01, 20.42it/s]
 54%|    | 43/79 [00:02<00:01, 21.62it/s]
 58%|    | 46/79 [00:02<00:01, 22.32it/s]
 62%|   | 49/79 [00:02<00:01, 22.59it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.33it/s]
 24%|       | 19/79 [00:01<00:08,  6.95it/s]
 28%|       | 22/79 [00:01<00:06,  8.90it/s]
 32%|      | 25/79 [00:01<00:04, 10.99it/s]
 35%|      | 28/79 [00:02<00:03, 13.26it/s]
 39%|      | 31/79 [00:02<00:03, 15.43it/s]
 43%|     | 34/79 [00:02<00:02, 17.48it/s]
 47%|     | 37/79 [00:02<00:02, 19.21it/s]
 51%|     | 40/79 [00:02<00:01, 20.55it/s]
 54%|    | 43/79 [00:02<00:01, 21.71it/s]
 58%|    | 46/79 [00:02<00:01, 22.74it/s]
 62%|   | 49/79 [00:02<00:01, 23.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  4%|         | 3/79 [00:00<00:48,  1.58it/s]
  8%|         | 6/79 [00:01<00:33,  2.20it/s]
 10%|         | 8/79 [00:01<00:23,  2.99it/s]
 13%|        | 10/79 [00:01<00:17,  3.99it/s]
 16%|        | 13/79 [00:01<00:12,  5.34it/s]
 20%|        | 16/79 [00:01<00:09,  6.99it/s]
 24%|       | 19/79 [00:01<00:06,  8.93it/s]
 28%|       | 22/79 [00:01<00:05, 11.11it/s]
 32%|      | 25/79 [00:01<00:04, 13.40it/s]
 35%|      | 28/79 [00:02<00:03, 15.66it/s]
 39%|      | 31/79 [00:02<00:02, 17.68it/s]
 43%|     | 34/79 [00:02<00:02, 19.46it/s]
 47%|     | 37/79 [00:02<00:02, 20.83it/s]
 51%|     | 40/79 [00:02<00:01, 21.96it/s]
 54%|    | 43/79 [00:02<00:01, 22.66it/s]
 58%|    | 46/79 [00:02<00:01, 23.46it/s]
 62%|   | 49/79 [00:02<00:01, 24.16it/s]

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  4%|         | 3/79 [00:01<00:50,  1.51it/s]
  8%|         | 6/79 [00:01<00:34,  2.10it/s]
 11%|        | 9/79 [00:01<00:24,  2.89it/s]
 15%|        | 12/79 [00:01<00:17,  3.93it/s]
 19%|        | 15/79 [00:01<00:12,  5.26it/s]
 23%|       | 18/79 [00:01<00:08,  6.86it/s]
 27%|       | 21/79 [00:01<00:06,  8.79it/s]
 30%|       | 24/79 [00:01<00:05, 10.89it/s]
 34%|      | 27/79 [00:02<00:03, 13.07it/s]
 38%|      | 30/79 [00:02<00:03, 15.34it/s]
 42%|     | 33/79 [00:02<00:02, 17.39it/s]
 46%|     | 36/79 [00:02<00:02, 19.18it/s]
 49%|     | 39/79 [00:02<00:01, 20.39it/s]
 53%|    | 42/79 [00:02<00:01, 21.55it/s]
 57%|    | 45/79 [00:02<00:01, 22.35it/s]
 61%|    | 48/79 [00:02<00:01, 22.68it/s]
 65%|   | 51/79 [00:02<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.42it/s]
  9%|         | 7/79 [00:01<00:36,  1.99it/s]
 13%|        | 10/79 [00:01<00:25,  2.75it/s]
 16%|        | 13/79 [00:01<00:17,  3.75it/s]
 20%|        | 16/79 [00:01<00:12,  5.04it/s]
 24%|       | 19/79 [00:01<00:09,  6.63it/s]
 28%|       | 22/79 [00:01<00:06,  8.54it/s]
 32%|      | 25/79 [00:01<00:05, 10.64it/s]
 35%|      | 28/79 [00:02<00:03, 12.91it/s]
 39%|      | 31/79 [00:02<00:03, 15.12it/s]
 43%|     | 34/79 [00:02<00:02, 17.08it/s]
 47%|     | 37/79 [00:02<00:02, 18.93it/s]
 51%|     | 40/79 [00:02<00:01, 20.17it/s]
 54%|    | 43/79 [00:02<00:01, 21.43it/s]
 58%|    | 46/79 [00:02<00:01, 21.90it/s]
 62%|   | 49/79 [00:02<00:01, 22.78it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.02it/s]
 13%|        | 10/79 [00:01<00:24,  2.79it/s]
 16%|        | 13/79 [00:01<00:17,  3.81it/s]
 20%|        | 16/79 [00:01<00:12,  5.11it/s]
 24%|       | 19/79 [00:01<00:08,  6.70it/s]
 28%|       | 22/79 [00:01<00:06,  8.57it/s]
 32%|      | 25/79 [00:01<00:05, 10.70it/s]
 35%|      | 28/79 [00:02<00:03, 12.85it/s]
 39%|      | 31/79 [00:02<00:03, 15.01it/s]
 43%|     | 34/79 [00:02<00:02, 17.04it/s]
 47%|     | 37/79 [00:02<00:02, 18.81it/s]
 51%|     | 40/79 [00:02<00:01, 20.30it/s]
 54%|    | 43/79 [00:02<00:01, 21.44it/s]
 58%|    | 46/79 [00:02<00:01, 22.34it/s]
 62%|   | 49/79 [00:02<00:01, 23.09it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.87it/s]
 32%|      | 25/79 [00:01<00:04, 10.93it/s]
 35%|      | 28/79 [00:02<00:03, 13.09it/s]
 39%|      | 31/79 [00:02<00:03, 15.34it/s]
 43%|     | 34/79 [00:02<00:02, 17.20it/s]
 47%|     | 37/79 [00:02<00:02, 18.90it/s]
 51%|     | 40/79 [00:02<00:01, 20.17it/s]
 54%|    | 43/79 [00:02<00:01, 21.37it/s]
 58%|    | 46/79 [00:02<00:01, 22.08it/s]
 62%|   | 49/79 [00:02<00:01, 22.36it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:51,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.01it/s]
 13%|        | 10/79 [00:01<00:24,  2.78it/s]
 16%|        | 13/79 [00:01<00:17,  3.79it/s]
 20%|        | 16/79 [00:01<00:12,  5.09it/s]
 24%|       | 19/79 [00:01<00:08,  6.69it/s]
 28%|       | 22/79 [00:01<00:06,  8.58it/s]
 32%|      | 25/79 [00:01<00:05, 10.68it/s]
 35%|      | 28/79 [00:02<00:03, 12.89it/s]
 39%|      | 31/79 [00:02<00:03, 15.07it/s]
 43%|     | 34/79 [00:02<00:02, 17.12it/s]
 47%|     | 37/79 [00:02<00:02, 18.69it/s]
 51%|     | 40/79 [00:02<00:01, 20.08it/s]
 54%|    | 43/79 [00:02<00:01, 21.13it/s]
 58%|    | 46/79 [00:02<00:01, 22.02it/s]
 62%|   | 49/79 [00:02<00:01, 22.70it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.23it/s]
 24%|       | 19/79 [00:01<00:08,  6.83it/s]
 28%|       | 22/79 [00:01<00:06,  8.70it/s]
 32%|      | 25/79 [00:01<00:05, 10.79it/s]
 35%|      | 28/79 [00:02<00:03, 12.98it/s]
 39%|      | 31/79 [00:02<00:03, 15.12it/s]
 43%|     | 34/79 [00:02<00:02, 17.02it/s]
 47%|     | 37/79 [00:02<00:02, 18.57it/s]
 51%|     | 40/79 [00:02<00:01, 20.08it/s]
 54%|    | 43/79 [00:02<00:01, 21.03it/s]
 58%|    | 46/79 [00:02<00:01, 21.66it/s]
 62%|   | 49/79 [00:02<00:01, 22.53it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  4%|         | 3/79 [00:01<00:49,  1.53it/s]
  8%|         | 6/79 [00:01<00:34,  2.12it/s]
 11%|        | 9/79 [00:01<00:24,  2.92it/s]
 15%|        | 12/79 [00:01<00:16,  3.96it/s]
 19%|        | 15/79 [00:01<00:12,  5.28it/s]
 23%|       | 18/79 [00:01<00:08,  6.90it/s]
 27%|       | 21/79 [00:01<00:06,  8.75it/s]
 30%|       | 24/79 [00:01<00:05, 10.80it/s]
 34%|      | 27/79 [00:02<00:04, 12.89it/s]
 38%|      | 30/79 [00:02<00:03, 14.83it/s]
 42%|     | 33/79 [00:02<00:02, 16.77it/s]
 46%|     | 36/79 [00:02<00:02, 18.15it/s]
 49%|     | 39/79 [00:02<00:02, 19.41it/s]
 53%|    | 42/79 [00:02<00:01, 20.44it/s]
 57%|    | 45/79 [00:02<00:01, 21.32it/s]
 61%|    | 48/79 [00:02<00:01, 22.04it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:52,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.00it/s]
 13%|        | 10/79 [00:01<00:24,  2.77it/s]
 16%|        | 13/79 [00:01<00:17,  3.78it/s]
 20%|        | 16/79 [00:01<00:12,  5.07it/s]
 24%|       | 19/79 [00:01<00:09,  6.62it/s]
 28%|       | 22/79 [00:01<00:06,  8.45it/s]
 32%|      | 25/79 [00:01<00:05, 10.56it/s]
 35%|      | 28/79 [00:02<00:04, 12.67it/s]
 39%|      | 31/79 [00:02<00:03, 14.82it/s]
 43%|     | 34/79 [00:02<00:02, 16.83it/s]
 47%|     | 37/79 [00:02<00:02, 18.49it/s]
 51%|     | 40/79 [00:02<00:01, 20.11it/s]
 54%|    | 43/79 [00:02<00:01, 21.07it/s]
 58%|    | 46/79 [00:02<00:01, 21.77it/s]
 62%|   | 49/79 [00:02<00:01, 22.64it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.31it/s]
 24%|       | 19/79 [00:01<00:08,  6.92it/s]
 28%|       | 22/79 [00:01<00:06,  8.78it/s]
 32%|      | 25/79 [00:01<00:04, 10.83it/s]
 35%|      | 28/79 [00:02<00:03, 12.88it/s]
 39%|      | 31/79 [00:02<00:03, 14.99it/s]
 43%|     | 34/79 [00:02<00:02, 16.80it/s]
 47%|     | 37/79 [00:02<00:02, 18.33it/s]
 51%|     | 40/79 [00:02<00:01, 19.51it/s]
 54%|    | 43/79 [00:02<00:01, 20.58it/s]
 58%|    | 46/79 [00:02<00:01, 21.36it/s]
 62%|   | 49/79 [00:02<00:01, 22.21it/s]
 66%|   | 52/79 [00:03<00:01, 24.71it/s]
 70%|   | 55/79 [00:02<00:00, 25.30it/s]
 73%|  | 58/79 [00:03<00:00, 25.28it/s]
 77%|  | 61/79 [00:03<00:00, 25.50it/s]
 81%|  | 64/79 [00:03<00:00, 25.46it/s]
 85%| | 67/79 [00:03<00:00, 25.48it/s]
 89%| | 70/79 [00:03<00:00, 25.58it/s]
 92%|| 73/79 [00:03<00:00, 25.77it/s]
 96%|| 76/79 [00:03<00:00, 26.39it/s]
100%|| 79/79 [00:03<00:00, 27.13it/s]
, 24.51it/s]
 70%|   | 55/79 [00:02<00:00, 24.95it/s]
 73%|  | 58/79 [00:03<00:00, 24.99it/s]
 77%|  | 61/79 [00:03<00:00, 25.40it/s]
 81%|  | 64/79 [00:03<00:00, 25.60it/s]
 85%| | 67/79 [00:03<00:00, 25.72it/s]
 89%| | 70/79 [00:03<00:00, 25.27it/s]
 92%|| 73/79 [00:03<00:00, 25.84it/s]
 96%|| 76/79 [00:03<00:00, 26.33it/s]
100%|| 79/79 [00:03<00:00, 27.01it/s]
, 24.30it/s]
 70%|   | 55/79 [00:02<00:00, 24.39it/s]
 73%|  | 58/79 [00:03<00:00, 24.63it/s]
 77%|  | 61/79 [00:03<00:00, 24.60it/s]
 81%|  | 64/79 [00:03<00:00, 24.73it/s]
 85%| | 67/79 [00:03<00:00, 24.91it/s]
 89%| | 70/79 [00:03<00:00, 25.10it/s]
 92%|| 73/79 [00:03<00:00, 25.16it/s]
 96%|| 76/79 [00:03<00:00, 25.74it/s]
100%|| 79/79 [00:03<00:00, 26.78it/s]
, 24.40it/s]
 70%|   | 55/79 [00:02<00:00, 24.79it/s]
 73%|  | 58/79 [00:03<00:00, 25.01it/s]
 77%|  | 61/79 [00:03<00:00, 25.07it/s]
 81%|  | 64/79 [00:03<00:00, 25.13it/s]
 85%| | 67/79 [00:03<00:00, 25.34it/s]
 89%| | 70/79 [00:03<00:00, 25.17it/s]
 92%|| 73/79 [00:03<00:00, 25.65it/s]
 96%|| 76/79 [00:03<00:00, 26.16it/s]
100%|| 79/79 [00:03<00:00, 27.13it/s]
, 23.81it/s]
 70%|   | 55/79 [00:02<00:01, 23.86it/s]
 73%|  | 58/79 [00:03<00:00, 24.12it/s]
 77%|  | 61/79 [00:03<00:00, 24.17it/s]
 81%|  | 64/79 [00:03<00:00, 24.32it/s]
 85%| | 67/79 [00:03<00:00, 24.60it/s]
 89%| | 70/79 [00:03<00:00, 24.79it/s]
 92%|| 73/79 [00:03<00:00, 24.91it/s]
 96%|| 76/79 [00:03<00:00, 25.69it/s]
100%|| 79/79 [00:03<00:00, 26.49it/s]
, 24.35it/s]
 70%|   | 55/79 [00:02<00:00, 24.64it/s]
 73%|  | 58/79 [00:03<00:00, 25.02it/s]
 77%|  | 61/79 [00:03<00:00, 25.27it/s]
 81%|  | 64/79 [00:03<00:00, 25.39it/s]
 85%| | 67/79 [00:03<00:00, 25.44it/s]
 89%| | 70/79 [00:03<00:00, 25.49it/s]
 92%|| 73/79 [00:03<00:00, 25.70it/s]
 96%|| 76/79 [00:03<00:00, 26.77it/s]
100%|| 79/79 [00:03<00:00, 26.99it/s]
, 23.50it/s]
 70%|   | 55/79 [00:03<00:01, 23.78it/s]
 73%|  | 58/79 [00:03<00:00, 23.86it/s]
 77%|  | 61/79 [00:03<00:00, 24.18it/s]
 81%|  | 64/79 [00:03<00:00, 24.24it/s]
 85%| | 67/79 [00:03<00:00, 24.62it/s]
 89%| | 70/79 [00:03<00:00, 25.11it/s]
 92%|| 73/79 [00:03<00:00, 25.62it/s]
 96%|| 76/79 [00:03<00:00, 26.28it/s]
100%|| 79/79 [00:03<00:00, 27.22it/s]
, 24.24it/s]
 70%|   | 55/79 [00:02<00:00, 24.61it/s]
 73%|  | 58/79 [00:03<00:00, 25.00it/s]
 77%|  | 61/79 [00:03<00:00, 25.01it/s]
 81%|  | 64/79 [00:03<00:00, 25.17it/s]
 85%| | 67/79 [00:03<00:00, 25.37it/s]
 89%| | 70/79 [00:03<00:00, 25.44it/s]
 92%|| 73/79 [00:03<00:00, 25.85it/s]
 96%|| 76/79 [00:03<00:00, 26.32it/s]
100%|| 79/79 [00:03<00:00, 26.98it/s]
, 24.31it/s]
 70%|   | 55/79 [00:02<00:00, 24.22it/s]
 73%|  | 58/79 [00:03<00:00, 24.49it/s]
 77%|  | 61/79 [00:03<00:00, 24.65it/s]
 81%|  | 64/79 [00:03<00:00, 25.01it/s]
 85%| | 67/79 [00:03<00:00, 25.10it/s]
 89%| | 70/79 [00:03<00:00, 25.15it/s]
 92%|| 73/79 [00:03<00:00, 25.60it/s]
 96%|| 76/79 [00:03<00:00, 26.27it/s]
100%|| 79/79 [00:03<00:00, 27.05it/s]
, 24.04it/s]
 70%|   | 55/79 [00:02<00:00, 24.26it/s]
 73%|  | 58/79 [00:03<00:00, 24.28it/s]
 77%|  | 61/79 [00:03<00:00, 24.44it/s]
 81%|  | 64/79 [00:03<00:00, 24.20it/s]
 85%| | 67/79 [00:03<00:00, 24.52it/s]
 89%| | 70/79 [00:03<00:00, 24.42it/s]
 92%|| 73/79 [00:03<00:00, 25.09it/s]
 96%|| 76/79 [00:03<00:00, 25.63it/s]
100%|| 79/79 [00:03<00:00, 26.71it/s]
, 23.92it/s]
 70%|   | 55/79 [00:03<00:00, 24.05it/s]
 73%|  | 58/79 [00:03<00:00, 24.20it/s]
 77%|  | 61/79 [00:03<00:00, 24.47it/s]
 81%|  | 64/79 [00:03<00:00, 24.57it/s]
 85%| | 67/79 [00:03<00:00, 25.00it/s]
 89%| | 70/79 [00:03<00:00, 24.66it/s]
 92%|| 73/79 [00:03<00:00, 25.12it/s]
 96%|| 76/79 [00:03<00:00, 25.87it/s]
100%|| 79/79 [00:03<00:00, 26.87it/s]
, 23.52it/s]
 70%|   | 55/79 [00:03<00:01, 23.96it/s]
 73%|  | 58/79 [00:03<00:00, 24.45it/s]
 77%|  | 61/79 [00:03<00:00, 24.53it/s]
 81%|  | 64/79 [00:03<00:00, 24.11it/s]
 85%| | 67/79 [00:03<00:00, 24.37it/s]
 89%| | 70/79 [00:03<00:00, 24.30it/s]
 92%|| 73/79 [00:03<00:00, 24.65it/s]
 96%|| 76/79 [00:03<00:00, 25.40it/s]
100%|| 79/79 [00:03<00:00, 26.29it/s]
13it/s]
 68%|   | 54/79 [00:02<00:01, 24.48it/s]
 72%|  | 57/79 [00:03<00:00, 24.73it/s]
 76%|  | 60/79 [00:03<00:00, 24.68it/s]
 80%|  | 63/79 [00:03<00:00, 24.95it/s]
 84%| | 66/79 [00:03<00:00, 25.05it/s]
 87%| | 69/79 [00:03<00:00, 25.28it/s]
 91%| | 72/79 [00:03<00:00, 25.20it/s]
 95%|| 75/79 [00:03<00:00, 25.81it/s]
 99%|| 78/79 [00:03<00:00, 26.33it/s]
100%|| 79/79 [00:04<00:00, 19.70it/s]
, 24.16it/s]
 70%|   | 55/79 [00:03<00:00, 24.35it/s]
 73%|  | 58/79 [00:03<00:00, 24.80it/s]
 77%|  | 61/79 [00:03<00:00, 24.82it/s]
 81%|  | 64/79 [00:03<00:00, 25.09it/s]
 85%| | 67/79 [00:03<00:00, 25.01it/s]
 89%| | 70/79 [00:03<00:00, 24.93it/s]
 92%|| 73/79 [00:03<00:00, 25.13it/s]
 96%|| 76/79 [00:03<00:00, 25.73it/s]
100%|| 79/79 [00:03<00:00, 26.50it/s]
, 23.76it/s]
 70%|   | 55/79 [00:03<00:00, 24.16it/s]
 73%|  | 58/79 [00:03<00:00, 24.57it/s]
 77%|  | 61/79 [00:03<00:00, 24.79it/s]
 81%|  | 64/79 [00:03<00:00, 24.77it/s]
 85%| | 67/79 [00:03<00:00, 25.08it/s]
 89%| | 70/79 [00:03<00:00, 25.01it/s]
 92%|| 73/79 [00:03<00:00, 25.35it/s]
 96%|| 76/79 [00:03<00:00, 25.93it/s]
100%|| 79/79 [00:03<00:00, 26.78it/s]
, 23.30it/s]
 70%|   | 55/79 [00:03<00:01, 23.38it/s]
 73%|  | 58/79 [00:03<00:00, 24.05it/s]
 77%|  | 61/79 [00:03<00:00, 23.98it/s]
 81%|  | 64/79 [00:03<00:00, 24.13it/s]
 85%| | 67/79 [00:03<00:00, 24.25it/s]
 89%| | 70/79 [00:03<00:00, 24.38it/s]
 92%|| 73/79 [00:03<00:00, 24.84it/s]
 96%|| 76/79 [00:03<00:00, 25.60it/s]
100%|| 79/79 [00:03<00:00, 26.42it/s]
87it/s]
 68%|   | 54/79 [00:03<00:01, 24.35it/s]
 72%|  | 57/79 [00:03<00:00, 24.34it/s]
 76%|  | 60/79 [00:03<00:00, 24.58it/s]
 80%|  | 63/79 [00:03<00:00, 24.98it/s]
 84%| | 66/79 [00:03<00:00, 25.13it/s]
 87%| | 69/79 [00:03<00:00, 25.27it/s]
 91%| | 72/79 [00:03<00:00, 25.03it/s]
 95%|| 75/79 [00:03<00:00, 26.07it/s]
 99%|| 78/79 [00:03<00:00, 26.19it/s]
100%|| 79/79 [00:04<00:00, 19.54it/s]
, 24.06it/s]
 70%|   | 55/79 [00:03<00:00, 24.56it/s]
 73%|  | 58/79 [00:03<00:00, 24.85it/s]
 77%|  | 61/79 [00:03<00:00, 25.05it/s]
 81%|  | 64/79 [00:03<00:00, 25.02it/s]
 85%| | 67/79 [00:03<00:00, 25.13it/s]
 89%| | 70/79 [00:03<00:00, 24.60it/s]
 92%|| 73/79 [00:03<00:00, 25.07it/s]
 96%|| 76/79 [00:03<00:00, 25.61it/s]
100%|| 79/79 [00:03<00:00, 26.53it/s]
, 23.97it/s]
 70%|   | 55/79 [00:03<00:00, 24.36it/s]
 73%|  | 58/79 [00:03<00:00, 24.58it/s]
 77%|  | 61/79 [00:03<00:00, 24.53it/s]
 81%|  | 64/79 [00:03<00:00, 24.34it/s]
 85%| | 67/79 [00:03<00:00, 24.36it/s]
 89%| | 70/79 [00:03<00:00, 24.54it/s]
 92%|| 73/79 [00:03<00:00, 24.93it/s]
 96%|| 76/79 [00:03<00:00, 25.47it/s]
100%|| 79/79 [00:03<00:00, 26.37it/s]
, 23.60it/s]
 70%|   | 55/79 [00:03<00:01, 23.89it/s]
 73%|  | 58/79 [00:03<00:00, 24.27it/s]
 77%|  | 61/79 [00:03<00:00, 24.66it/s]
 81%|  | 64/79 [00:03<00:00, 24.68it/s]
 85%| | 67/79 [00:03<00:00, 24.60it/s]
 89%| | 70/79 [00:03<00:00, 24.70it/s]
 92%|| 73/79 [00:03<00:00, 25.00it/s]
 96%|| 76/79 [00:03<00:00, 25.83it/s]
100%|| 79/79 [00:03<00:00, 26.82it/s]
, 23.32it/s]
 70%|   | 55/79 [00:03<00:01, 23.69it/s]
 73%|  | 58/79 [00:03<00:00, 24.05it/s]
 77%|  | 61/79 [00:03<00:00, 24.19it/s]
 81%|  | 64/79 [00:03<00:00, 24.52it/s]
 85%| | 67/79 [00:03<00:00, 24.66it/s]
 89%| | 70/79 [00:03<00:00, 24.74it/s]
 92%|| 73/79 [00:03<00:00, 25.29it/s]
 96%|| 76/79 [00:03<00:00, 25.91it/s]
100%|| 79/79 [00:04<00:00, 26.75it/s]
, 24.03it/s]
 70%|   | 55/79 [00:03<00:00, 24.33it/s]
 73%|  | 58/79 [00:03<00:00, 24.41it/s]
 77%|  | 61/79 [00:03<00:00, 24.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.52it/s]
 85%| | 67/79 [00:03<00:00, 24.72it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 25.19it/s]
 96%|| 76/79 [00:03<00:00, 25.75it/s]
100%|| 79/79 [00:04<00:00, 26.67it/s]
 66%|   | 52/79 [00:02<00:01, 24.53it/s]
 70%|   | 55/79 [00:03<00:00, 24.83it/s]
 73%|  | 58/79 [00:03<00:00, 25.04it/s]
 77%|  | 61/79 [00:03<00:00, 25.09it/s]
 81%|  | 64/79 [00:03<00:00, 25.15it/s]
 85%| | 67/79 [00:03<00:00, 25.18it/s]
 89%| | 70/79 [00:03<00:00, 25.42it/s]
 92%|| 73/79 [00:03<00:00, 25.45it/s]
 96%|| 76/79 [00:03<00:00, 26.23it/s]
100%|| 79/79 [00:04<00:00, 27.08it/s]
99it/s]
 68%|   | 54/79 [00:03<00:01, 23.48it/s]
 72%|  | 57/79 [00:03<00:00, 23.80it/s]
 76%|  | 60/79 [00:03<00:00, 23.86it/s]
 80%|  | 63/79 [00:03<00:00, 24.15it/s]
 84%| | 66/79 [00:03<00:00, 24.25it/s]
 87%| | 69/79 [00:03<00:00, 24.15it/s]
 91%| | 72/79 [00:03<00:00, 24.59it/s]
 95%|| 75/79 [00:03<00:00, 25.52it/s]
 99%|| 78/79 [00:04<00:00, 26.07it/s]
100%|| 79/79 [00:04<00:00, 19.05it/s]
, 23.44it/s]
 70%|   | 55/79 [00:03<00:01, 23.99it/s]
 73%|  | 58/79 [00:03<00:00, 24.40it/s]
 77%|  | 61/79 [00:03<00:00, 24.69it/s]
 81%|  | 64/79 [00:03<00:00, 24.88it/s]
 85%| | 67/79 [00:03<00:00, 25.08it/s]
 89%| | 70/79 [00:03<00:00, 25.03it/s]
 92%|| 73/79 [00:03<00:00, 25.16it/s]
 96%|| 76/79 [00:03<00:00, 25.87it/s]
100%|| 79/79 [00:04<00:00, 26.43it/s]
, 23.25it/s]
 70%|   | 55/79 [00:03<00:01, 23.72it/s]
 73%|  | 58/79 [00:03<00:00, 24.04it/s]
 77%|  | 61/79 [00:03<00:00, 24.40it/s]
 81%|  | 64/79 [00:03<00:00, 24.47it/s]
 85%| | 67/79 [00:03<00:00, 24.69it/s]
 89%| | 70/79 [00:03<00:00, 24.53it/s]
 92%|| 73/79 [00:03<00:00, 24.98it/s]
 96%|| 76/79 [00:03<00:00, 25.67it/s]
100%|| 79/79 [00:04<00:00, 26.73it/s]
, 23.46it/s]
 70%|   | 55/79 [00:03<00:00, 24.04it/s]
 73%|  | 58/79 [00:03<00:00, 24.32it/s]
 77%|  | 61/79 [00:03<00:00, 24.48it/s]
 81%|  | 64/79 [00:03<00:00, 24.58it/s]
 85%| | 67/79 [00:03<00:00, 24.89it/s]
 89%| | 70/79 [00:03<00:00, 24.39it/s]
 92%|| 73/79 [00:03<00:00, 24.61it/s]
 96%|| 76/79 [00:03<00:00, 25.21it/s]
100%|| 79/79 [00:04<00:00, 26.13it/s]
, 23.16it/s]
 70%|   | 55/79 [00:03<00:01, 23.46it/s]
 73%|  | 58/79 [00:03<00:00, 24.09it/s]
 77%|  | 61/79 [00:03<00:00, 24.10it/s]
 81%|  | 64/79 [00:03<00:00, 24.14it/s]
 85%| | 67/79 [00:03<00:00, 24.18it/s]
 89%| | 70/79 [00:03<00:00, 24.33it/s]
 92%|| 73/79 [00:03<00:00, 24.72it/s]
 96%|| 76/79 [00:04<00:00, 25.34it/s]
100%|| 79/79 [00:04<00:00, 26.23it/s]
, 22.88it/s]
 70%|   | 55/79 [00:03<00:01, 23.28it/s]
 73%|  | 58/79 [00:03<00:00, 23.62it/s]
 77%|  | 61/79 [00:03<00:00, 23.46it/s]
 81%|  | 64/79 [00:03<00:00, 23.56it/s]
 85%| | 67/79 [00:03<00:00, 23.86it/s]
 89%| | 70/79 [00:03<00:00, 23.78it/s]
 92%|| 73/79 [00:03<00:00, 24.24it/s]
 96%|| 76/79 [00:03<00:00, 25.06it/s]
100%|| 79/79 [00:04<00:00, 25.97it/s]
, 22.54it/s]
 70%|   | 55/79 [00:03<00:01, 23.17it/s]
 73%|  | 58/79 [00:03<00:00, 23.29it/s]
 77%|  | 61/79 [00:03<00:00, 23.77it/s]
 81%|  | 64/79 [00:03<00:00, 24.19it/s]
 85%| | 67/79 [00:03<00:00, 24.33it/s]
 89%| | 70/79 [00:03<00:00, 24.33it/s]
 92%|| 73/79 [00:03<00:00, 24.53it/s]
 96%|| 76/79 [00:04<00:00, 25.16it/s]
100%|| 79/79 [00:04<00:00, 25.93it/s]
, 22.34it/s]
 70%|   | 55/79 [00:03<00:01, 22.89it/s]
 73%|  | 58/79 [00:03<00:00, 23.25it/s]
 77%|  | 61/79 [00:03<00:00, 23.20it/s]
 81%|  | 64/79 [00:03<00:00, 23.40it/s]
 85%| | 67/79 [00:03<00:00, 23.45it/s]
 89%| | 70/79 [00:03<00:00, 23.85it/s]
 92%|| 73/79 [00:03<00:00, 24.16it/s]
 96%|| 76/79 [00:04<00:00, 24.94it/s]
100%|| 79/79 [00:04<00:00, 25.95it/s]
36it/s]
 68%|   | 54/79 [00:03<00:01, 22.69it/s]
 72%|  | 57/79 [00:03<00:00, 23.01it/s]
 76%|  | 60/79 [00:03<00:00, 23.44it/s]
 80%|  | 63/79 [00:03<00:00, 23.44it/s]
 84%| | 66/79 [00:03<00:00, 23.72it/s]
 87%| | 69/79 [00:03<00:00, 23.85it/s]
 91%| | 72/79 [00:03<00:00, 23.71it/s]
 95%|| 75/79 [00:04<00:00, 24.53it/s]
 99%|| 78/79 [00:04<00:00, 25.02it/s]
100%|| 79/79 [00:04<00:00, 18.43it/s]
2020-06-23 16:07:58,908 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.320997 (0.027654380798339845 s / img per device, on 32 devices)
2020-06-23 16:07:58,930 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:07:58,930 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:07:58,951 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592953691658, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 10, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592953691658, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 10}}
2020-06-23 16:08:12,444 maskrcnn_benchmark.trainer INFO: eta: 1:07:32  iter: 8260  loss: 0.7273 (0.7672)  loss_classifier: 0.2512 (0.2818)  loss_box_reg: 0.1094 (0.1233)  loss_mask: 0.2943 (0.3030)  loss_objectness: 0.0192 (0.0383)  loss_rpn_box_reg: 0.0132 (0.0209)  time: 0.1092 (0.1277)  data: 0.0014 (0.0201)  lr: 0.160000  max mem: 5047
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:08:14,621 maskrcnn_benchmark.trainer INFO: eta: 1:07:28  iter: 8280  loss: 0.6113 (0.7671)  loss_classifier: 0.2302 (0.2817)  loss_box_reg: 0.1090 (0.1232)  loss_mask: 0.2555 (0.3029)  loss_objectness: 0.0254 (0.0384)  loss_rpn_box_reg: 0.0115 (0.0209)  time: 0.1089 (0.1276)  data: 0.0014 (0.0201)  lr: 0.160000  max mem: 5047
2020-06-23 16:08:16,787 maskrcnn_benchmark.trainer INFO: eta: 1:07:24  iter: 8300  loss: 0.6899 (0.7669)  loss_classifier: 0.2416 (0.2816)  loss_box_reg: 0.1260 (0.1232)  loss_mask: 0.2806 (0.3028)  loss_objectness: 0.0209 (0.0383)  loss_rpn_box_reg: 0.0122 (0.0209)  time: 0.1085 (0.1276)  data: 0.0015 (0.0200)  lr: 0.160000  max mem: 5047
2020-06-23 16:08:18,957 maskrcnn_benchmark.trainer INFO: eta: 1:07:20  iter: 8320  loss: 0.5661 (0.7667)  loss_classifier: 0.1998 (0.2815)  loss_box_reg: 0.0880 (0.1231)  loss_mask: 0.2755 (0.3028)  loss_objectness: 0.0171 (0.0383)  loss_rpn_box_reg: 0.0086 (0.0209)  time: 0.1084 (0.1276)  data: 0.0014 (0.0200)  lr: 0.160000  max mem: 5047
2020-06-23 16:08:21,131 maskrcnn_benchmark.trainer INFO: eta: 1:07:16  iter: 8340  loss: 0.7084 (0.7666)  loss_classifier: 0.2739 (0.2814)  loss_box_reg: 0.1328 (0.1232)  loss_mask: 0.2818 (0.3027)  loss_objectness: 0.0253 (0.0383)  loss_rpn_box_reg: 0.0120 (0.0209)  time: 0.1086 (0.1275)  data: 0.0014 (0.0200)  lr: 0.160000  max mem: 5047
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=1.14s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:08:23,291 maskrcnn_benchmark.trainer INFO: eta: 1:07:12  iter: 8360  loss: 0.6653 (0.7663)  loss_classifier: 0.2211 (0.2813)  loss_box_reg: 0.1102 (0.1231)  loss_mask: 0.2635 (0.3026)  loss_objectness: 0.0224 (0.0383)  loss_rpn_box_reg: 0.0128 (0.0210)  time: 0.1081 (0.1275)  data: 0.0015 (0.0199)  lr: 0.160000  max mem: 5047
DONE (t=2.21s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.28585
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.48251
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.30536
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.16870
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.30965
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.36700
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.26571
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43139
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.45536
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27930
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.48929
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.57170
2020-06-23 16:08:25,439 maskrcnn_benchmark.trainer INFO: eta: 1:07:08  iter: 8380  loss: 0.6134 (0.7661)  loss_classifier: 0.2205 (0.2812)  loss_box_reg: 0.0908 (0.1231)  loss_mask: 0.2618 (0.3025)  loss_objectness: 0.0247 (0.0383)  loss_rpn_box_reg: 0.0097 (0.0209)  time: 0.1062 (0.1274)  data: 0.0015 (0.0199)  lr: 0.160000  max mem: 5047
2020-06-23 16:08:27,597 maskrcnn_benchmark.trainer INFO: eta: 1:07:04  iter: 8400  loss: 0.5563 (0.7657)  loss_classifier: 0.2254 (0.2811)  loss_box_reg: 0.0921 (0.1230)  loss_mask: 0.2485 (0.3024)  loss_objectness: 0.0119 (0.0382)  loss_rpn_box_reg: 0.0075 (0.0209)  time: 0.1071 (0.1274)  data: 0.0014 (0.0198)  lr: 0.160000  max mem: 5047
2020-06-23 16:08:29,758 maskrcnn_benchmark.trainer INFO: eta: 1:07:00  iter: 8420  loss: 0.5921 (0.7655)  loss_classifier: 0.2120 (0.2810)  loss_box_reg: 0.0852 (0.1230)  loss_mask: 0.2593 (0.3023)  loss_objectness: 0.0170 (0.0382)  loss_rpn_box_reg: 0.0104 (0.0209)  time: 0.1082 (0.1273)  data: 0.0014 (0.0198)  lr: 0.160000  max mem: 5047
2020-06-23 16:08:31,920 maskrcnn_benchmark.trainer INFO: eta: 1:06:56  iter: 8440  loss: 0.5779 (0.7652)  loss_classifier: 0.1970 (0.2809)  loss_box_reg: 0.0915 (0.1230)  loss_mask: 0.2803 (0.3022)  loss_objectness: 0.0221 (0.0382)  loss_rpn_box_reg: 0.0098 (0.0209)  time: 0.1077 (0.1273)  data: 0.0014 (0.0197)  lr: 0.160000  max mem: 5047
2020-06-23 16:08:34,061 maskrcnn_benchmark.trainer INFO: eta: 1:06:52  iter: 8460  loss: 0.6614 (0.7650)  loss_classifier: 0.2329 (0.2809)  loss_box_reg: 0.1011 (0.1229)  loss_mask: 0.2684 (0.3022)  loss_objectness: 0.0232 (0.0381)  loss_rpn_box_reg: 0.0160 (0.0209)  time: 0.1067 (0.1272)  data: 0.0014 (0.0197)  lr: 0.160000  max mem: 5047
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:08:36,219 maskrcnn_benchmark.trainer INFO: eta: 1:06:48  iter: 8480  loss: 0.6931 (0.7649)  loss_classifier: 0.2752 (0.2809)  loss_box_reg: 0.1313 (0.1229)  loss_mask: 0.2669 (0.3021)  loss_objectness: 0.0224 (0.0381)  loss_rpn_box_reg: 0.0113 (0.0209)  time: 0.1073 (0.1272)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5047
DONE (t=2.91s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:08:38,366 maskrcnn_benchmark.trainer INFO: eta: 1:06:44  iter: 8500  loss: 0.6528 (0.7647)  loss_classifier: 0.2201 (0.2808)  loss_box_reg: 0.1057 (0.1229)  loss_mask: 0.2657 (0.3020)  loss_objectness: 0.0236 (0.0381)  loss_rpn_box_reg: 0.0077 (0.0209)  time: 0.1076 (0.1271)  data: 0.0015 (0.0196)  lr: 0.160000  max mem: 5047
2020-06-23 16:08:40,532 maskrcnn_benchmark.trainer INFO: eta: 1:06:40  iter: 8520  loss: 0.7337 (0.7647)  loss_classifier: 0.2833 (0.2808)  loss_box_reg: 0.1036 (0.1229)  loss_mask: 0.2842 (0.3020)  loss_objectness: 0.0295 (0.0381)  loss_rpn_box_reg: 0.0155 (0.0209)  time: 0.1083 (0.1271)  data: 0.0015 (0.0196)  lr: 0.160000  max mem: 5047
DONE (t=3.52s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.27251
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.45856
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.28606
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11840
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.29431
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.40293
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25897
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.40669
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.42682
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24047
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.46353
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.56143
2020-06-23 16:08:41,948 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.2858479878842974, segm mAP: 0.27250638293542095
:::MLLOG {"namespace": "", "time_ms": 1592953721948, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.2858479878842974, "SEGM": 0.27250638293542095}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 9}}
:::MLLOG {"namespace": "", "time_ms": 1592953721948, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 9}}
2020-06-23 16:08:42,910 maskrcnn_benchmark.trainer INFO: eta: 1:06:37  iter: 8540  loss: 0.7961 (0.7647)  loss_classifier: 0.2768 (0.2808)  loss_box_reg: 0.1259 (0.1229)  loss_mask: 0.2901 (0.3019)  loss_objectness: 0.0414 (0.0381)  loss_rpn_box_reg: 0.0189 (0.0209)  time: 0.1070 (0.1271)  data: 0.0015 (0.0195)  lr: 0.160000  max mem: 5047
2020-06-23 16:08:45,072 maskrcnn_benchmark.trainer INFO: eta: 1:06:33  iter: 8560  loss: 0.5714 (0.7644)  loss_classifier: 0.2074 (0.2807)  loss_box_reg: 0.0934 (0.1228)  loss_mask: 0.2392 (0.3018)  loss_objectness: 0.0157 (0.0381)  loss_rpn_box_reg: 0.0076 (0.0209)  time: 0.1079 (0.1270)  data: 0.0014 (0.0195)  lr: 0.160000  max mem: 5047
2020-06-23 16:08:47,241 maskrcnn_benchmark.trainer INFO: eta: 1:06:29  iter: 8580  loss: 0.6497 (0.7641)  loss_classifier: 0.2293 (0.2806)  loss_box_reg: 0.0878 (0.1228)  loss_mask: 0.2742 (0.3018)  loss_objectness: 0.0192 (0.0381)  loss_rpn_box_reg: 0.0098 (0.0209)  time: 0.1082 (0.1270)  data: 0.0014 (0.0194)  lr: 0.160000  max mem: 5047
2020-06-23 16:08:49,409 maskrcnn_benchmark.trainer INFO: eta: 1:06:25  iter: 8600  loss: 0.6400 (0.7639)  loss_classifier: 0.2309 (0.2804)  loss_box_reg: 0.1031 (0.1228)  loss_mask: 0.2591 (0.3017)  loss_objectness: 0.0173 (0.0381)  loss_rpn_box_reg: 0.0127 (0.0209)  time: 0.1081 (0.1269)  data: 0.0015 (0.0194)  lr: 0.160000  max mem: 5047
2020-06-23 16:08:51,576 maskrcnn_benchmark.trainer INFO: eta: 1:06:22  iter: 8620  loss: 0.6065 (0.7636)  loss_classifier: 0.2137 (0.2803)  loss_box_reg: 0.0885 (0.1227)  loss_mask: 0.2537 (0.3016)  loss_objectness: 0.0230 (0.0380)  loss_rpn_box_reg: 0.0103 (0.0209)  time: 0.1079 (0.1269)  data: 0.0014 (0.0194)  lr: 0.160000  max mem: 5047
2020-06-23 16:08:53,738 maskrcnn_benchmark.trainer INFO: eta: 1:06:18  iter: 8640  loss: 0.6236 (0.7633)  loss_classifier: 0.2260 (0.2802)  loss_box_reg: 0.1014 (0.1227)  loss_mask: 0.2645 (0.3015)  loss_objectness: 0.0190 (0.0380)  loss_rpn_box_reg: 0.0059 (0.0209)  time: 0.1073 (0.1269)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5047
2020-06-23 16:08:55,897 maskrcnn_benchmark.trainer INFO: eta: 1:06:14  iter: 8660  loss: 0.5835 (0.7630)  loss_classifier: 0.2118 (0.2801)  loss_box_reg: 0.0970 (0.1226)  loss_mask: 0.2419 (0.3014)  loss_objectness: 0.0161 (0.0380)  loss_rpn_box_reg: 0.0121 (0.0209)  time: 0.1072 (0.1268)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5047
2020-06-23 16:08:58,045 maskrcnn_benchmark.trainer INFO: eta: 1:06:10  iter: 8680  loss: 0.5581 (0.7627)  loss_classifier: 0.2404 (0.2800)  loss_box_reg: 0.0847 (0.1226)  loss_mask: 0.2412 (0.3013)  loss_objectness: 0.0139 (0.0380)  loss_rpn_box_reg: 0.0116 (0.0209)  time: 0.1073 (0.1268)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5047
2020-06-23 16:09:00,202 maskrcnn_benchmark.trainer INFO: eta: 1:06:06  iter: 8700  loss: 0.6978 (0.7625)  loss_classifier: 0.2263 (0.2799)  loss_box_reg: 0.1142 (0.1226)  loss_mask: 0.2771 (0.3012)  loss_objectness: 0.0219 (0.0379)  loss_rpn_box_reg: 0.0107 (0.0209)  time: 0.1071 (0.1267)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5047
2020-06-23 16:09:02,357 maskrcnn_benchmark.trainer INFO: eta: 1:06:02  iter: 8720  loss: 0.6917 (0.7624)  loss_classifier: 0.2493 (0.2798)  loss_box_reg: 0.1032 (0.1225)  loss_mask: 0.2697 (0.3012)  loss_objectness: 0.0138 (0.0379)  loss_rpn_box_reg: 0.0110 (0.0209)  time: 0.1075 (0.1267)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5047
2020-06-23 16:09:04,505 maskrcnn_benchmark.trainer INFO: eta: 1:05:58  iter: 8740  loss: 0.6441 (0.7623)  loss_classifier: 0.2438 (0.2798)  loss_box_reg: 0.0990 (0.1225)  loss_mask: 0.2672 (0.3011)  loss_objectness: 0.0244 (0.0379)  loss_rpn_box_reg: 0.0122 (0.0209)  time: 0.1071 (0.1266)  data: 0.0015 (0.0191)  lr: 0.160000  max mem: 5047
2020-06-23 16:09:06,663 maskrcnn_benchmark.trainer INFO: eta: 1:05:54  iter: 8760  loss: 0.7155 (0.7622)  loss_classifier: 0.2360 (0.2797)  loss_box_reg: 0.1167 (0.1225)  loss_mask: 0.2718 (0.3011)  loss_objectness: 0.0152 (0.0379)  loss_rpn_box_reg: 0.0099 (0.0209)  time: 0.1070 (0.1266)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5047
2020-06-23 16:09:08,830 maskrcnn_benchmark.trainer INFO: eta: 1:05:50  iter: 8780  loss: 0.5873 (0.7619)  loss_classifier: 0.2120 (0.2796)  loss_box_reg: 0.1133 (0.1225)  loss_mask: 0.2419 (0.3010)  loss_objectness: 0.0133 (0.0379)  loss_rpn_box_reg: 0.0070 (0.0209)  time: 0.1078 (0.1266)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5047
2020-06-23 16:09:10,993 maskrcnn_benchmark.trainer INFO: eta: 1:05:47  iter: 8800  loss: 0.5365 (0.7614)  loss_classifier: 0.2061 (0.2794)  loss_box_reg: 0.0743 (0.1224)  loss_mask: 0.2433 (0.3008)  loss_objectness: 0.0141 (0.0379)  loss_rpn_box_reg: 0.0078 (0.0209)  time: 0.1080 (0.1265)  data: 0.0013 (0.0190)  lr: 0.160000  max mem: 5047
2020-06-23 16:09:13,154 maskrcnn_benchmark.trainer INFO: eta: 1:05:43  iter: 8820  loss: 0.6132 (0.7612)  loss_classifier: 0.2185 (0.2793)  loss_box_reg: 0.1129 (0.1224)  loss_mask: 0.2565 (0.3008)  loss_objectness: 0.0188 (0.0379)  loss_rpn_box_reg: 0.0071 (0.0209)  time: 0.1082 (0.1265)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5047
2020-06-23 16:09:15,349 maskrcnn_benchmark.trainer INFO: eta: 1:05:39  iter: 8840  loss: 0.7370 (0.7611)  loss_classifier: 0.2570 (0.2793)  loss_box_reg: 0.1339 (0.1224)  loss_mask: 0.2694 (0.3007)  loss_objectness: 0.0192 (0.0378)  loss_rpn_box_reg: 0.0095 (0.0209)  time: 0.1099 (0.1264)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5047
2020-06-23 16:09:17,509 maskrcnn_benchmark.trainer INFO: eta: 1:05:35  iter: 8860  loss: 0.5854 (0.7608)  loss_classifier: 0.2081 (0.2792)  loss_box_reg: 0.0962 (0.1223)  loss_mask: 0.2508 (0.3006)  loss_objectness: 0.0333 (0.0378)  loss_rpn_box_reg: 0.0151 (0.0209)  time: 0.1082 (0.1264)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5047
2020-06-23 16:09:19,679 maskrcnn_benchmark.trainer INFO: eta: 1:05:31  iter: 8880  loss: 0.6901 (0.7606)  loss_classifier: 0.2472 (0.2791)  loss_box_reg: 0.1100 (0.1223)  loss_mask: 0.2782 (0.3006)  loss_objectness: 0.0202 (0.0378)  loss_rpn_box_reg: 0.0113 (0.0209)  time: 0.1078 (0.1263)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5047
2020-06-23 16:09:21,844 maskrcnn_benchmark.trainer INFO: eta: 1:05:28  iter: 8900  loss: 0.6832 (0.7605)  loss_classifier: 0.2489 (0.2790)  loss_box_reg: 0.1015 (0.1223)  loss_mask: 0.2892 (0.3005)  loss_objectness: 0.0302 (0.0378)  loss_rpn_box_reg: 0.0145 (0.0209)  time: 0.1080 (0.1263)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5047
2020-06-23 16:09:24,004 maskrcnn_benchmark.trainer INFO: eta: 1:05:24  iter: 8920  loss: 0.5596 (0.7602)  loss_classifier: 0.1809 (0.2789)  loss_box_reg: 0.0727 (0.1222)  loss_mask: 0.2507 (0.3004)  loss_objectness: 0.0146 (0.0378)  loss_rpn_box_reg: 0.0106 (0.0209)  time: 0.1077 (0.1263)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5047
2020-06-23 16:09:26,154 maskrcnn_benchmark.trainer INFO: eta: 1:05:20  iter: 8940  loss: 0.6110 (0.7599)  loss_classifier: 0.2276 (0.2788)  loss_box_reg: 0.0852 (0.1222)  loss_mask: 0.2465 (0.3003)  loss_objectness: 0.0184 (0.0378)  loss_rpn_box_reg: 0.0069 (0.0208)  time: 0.1071 (0.1262)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5047
2020-06-23 16:09:28,332 maskrcnn_benchmark.trainer INFO: eta: 1:05:16  iter: 8960  loss: 0.6978 (0.7598)  loss_classifier: 0.2476 (0.2787)  loss_box_reg: 0.1159 (0.1221)  loss_mask: 0.2777 (0.3003)  loss_objectness: 0.0284 (0.0378)  loss_rpn_box_reg: 0.0198 (0.0208)  time: 0.1081 (0.1262)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5047
2020-06-23 16:09:30,492 maskrcnn_benchmark.trainer INFO: eta: 1:05:13  iter: 8980  loss: 0.6454 (0.7595)  loss_classifier: 0.2150 (0.2786)  loss_box_reg: 0.0993 (0.1221)  loss_mask: 0.2568 (0.3002)  loss_objectness: 0.0239 (0.0378)  loss_rpn_box_reg: 0.0083 (0.0209)  time: 0.1080 (0.1261)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5047
2020-06-23 16:09:32,663 maskrcnn_benchmark.trainer INFO: eta: 1:05:09  iter: 9000  loss: 0.6021 (0.7593)  loss_classifier: 0.2030 (0.2785)  loss_box_reg: 0.0926 (0.1221)  loss_mask: 0.2610 (0.3001)  loss_objectness: 0.0177 (0.0378)  loss_rpn_box_reg: 0.0140 (0.0209)  time: 0.1077 (0.1261)  data: 0.0014 (0.0186)  lr: 0.016000  max mem: 5047
2020-06-23 16:09:34,831 maskrcnn_benchmark.trainer INFO: eta: 1:05:05  iter: 9020  loss: 0.6794 (0.7592)  loss_classifier: 0.2500 (0.2784)  loss_box_reg: 0.1121 (0.1221)  loss_mask: 0.2875 (0.3001)  loss_objectness: 0.0287 (0.0378)  loss_rpn_box_reg: 0.0082 (0.0209)  time: 0.1078 (0.1261)  data: 0.0014 (0.0186)  lr: 0.016000  max mem: 5047
2020-06-23 16:09:37,005 maskrcnn_benchmark.trainer INFO: eta: 1:05:01  iter: 9040  loss: 0.6220 (0.7589)  loss_classifier: 0.2179 (0.2783)  loss_box_reg: 0.0944 (0.1220)  loss_mask: 0.2372 (0.3000)  loss_objectness: 0.0235 (0.0377)  loss_rpn_box_reg: 0.0119 (0.0209)  time: 0.1082 (0.1260)  data: 0.0014 (0.0185)  lr: 0.016000  max mem: 5047
2020-06-23 16:09:39,174 maskrcnn_benchmark.trainer INFO: eta: 1:04:58  iter: 9060  loss: 0.6503 (0.7586)  loss_classifier: 0.1901 (0.2781)  loss_box_reg: 0.0970 (0.1220)  loss_mask: 0.2490 (0.2999)  loss_objectness: 0.0222 (0.0377)  loss_rpn_box_reg: 0.0147 (0.0209)  time: 0.1079 (0.1260)  data: 0.0015 (0.0185)  lr: 0.016000  max mem: 5047
2020-06-23 16:09:41,332 maskrcnn_benchmark.trainer INFO: eta: 1:04:54  iter: 9080  loss: 0.5599 (0.7582)  loss_classifier: 0.1882 (0.2780)  loss_box_reg: 0.0834 (0.1219)  loss_mask: 0.2308 (0.2997)  loss_objectness: 0.0133 (0.0377)  loss_rpn_box_reg: 0.0078 (0.0209)  time: 0.1069 (0.1259)  data: 0.0014 (0.0185)  lr: 0.016000  max mem: 5047
2020-06-23 16:09:43,518 maskrcnn_benchmark.trainer INFO: eta: 1:04:50  iter: 9100  loss: 0.6688 (0.7580)  loss_classifier: 0.2347 (0.2779)  loss_box_reg: 0.1182 (0.1219)  loss_mask: 0.2569 (0.2997)  loss_objectness: 0.0317 (0.0377)  loss_rpn_box_reg: 0.0221 (0.0209)  time: 0.1086 (0.1259)  data: 0.0015 (0.0184)  lr: 0.016000  max mem: 5047
2020-06-23 16:09:45,667 maskrcnn_benchmark.trainer INFO: eta: 1:04:46  iter: 9120  loss: 0.5207 (0.7577)  loss_classifier: 0.1851 (0.2777)  loss_box_reg: 0.0964 (0.1218)  loss_mask: 0.2467 (0.2995)  loss_objectness: 0.0155 (0.0377)  loss_rpn_box_reg: 0.0194 (0.0209)  time: 0.1072 (0.1259)  data: 0.0014 (0.0184)  lr: 0.016000  max mem: 5047
2020-06-23 16:09:47,828 maskrcnn_benchmark.trainer INFO: eta: 1:04:43  iter: 9140  loss: 0.6034 (0.7574)  loss_classifier: 0.1879 (0.2776)  loss_box_reg: 0.1113 (0.1218)  loss_mask: 0.2511 (0.2995)  loss_objectness: 0.0132 (0.0376)  loss_rpn_box_reg: 0.0079 (0.0209)  time: 0.1070 (0.1258)  data: 0.0014 (0.0183)  lr: 0.016000  max mem: 5047
2020-06-23 16:09:50,011 maskrcnn_benchmark.trainer INFO: eta: 1:04:39  iter: 9160  loss: 0.6423 (0.7572)  loss_classifier: 0.2228 (0.2775)  loss_box_reg: 0.0978 (0.1218)  loss_mask: 0.2601 (0.2995)  loss_objectness: 0.0212 (0.0376)  loss_rpn_box_reg: 0.0081 (0.0209)  time: 0.1080 (0.1258)  data: 0.0015 (0.0183)  lr: 0.016000  max mem: 5047
:::MLLOG {"namespace": "", "time_ms": 1592953791086, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 10}}
:::MLLOG {"namespace": "", "time_ms": 1592953791086, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 10}}
:::MLLOG {"namespace": "", "time_ms": 1592953791086, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 10}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 16:09:51,321 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
index created!
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
2020-06-23 16:09:51,624 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:10,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.47it/s]
 28%|       | 22/79 [00:01<00:05,  9.53it/s]
 32%|      | 25/79 [00:01<00:04, 11.79it/s]
 35%|      | 28/79 [00:01<00:03, 14.08it/s]
 39%|      | 31/79 [00:01<00:02, 16.42it/s]
 43%|     | 34/79 [00:02<00:02, 18.56it/s]
 47%|     | 37/79 [00:02<00:02, 20.19it/s]
 51%|     | 40/79 [00:02<00:01, 21.81it/s]
 54%|    | 43/79 [00:02<00:01, 22.92it/s]
 58%|    | 46/79 [00:02<00:01, 23.94it/s]
 62%|   | 49/79 [00:02<00:01, 24.88it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:43,  1.74it/s]
  9%|         | 7/79 [00:01<00:29,  2.42it/s]
 13%|        | 10/79 [00:01<00:20,  3.32it/s]
 16%|        | 13/79 [00:01<00:14,  4.50it/s]
 20%|        | 16/79 [00:01<00:10,  5.99it/s]
 24%|       | 19/79 [00:01<00:07,  7.77it/s]
 28%|       | 22/79 [00:01<00:05,  9.85it/s]
 32%|      | 25/79 [00:01<00:04, 12.16it/s]
 35%|      | 28/79 [00:01<00:03, 14.46it/s]
 39%|      | 31/79 [00:01<00:02, 16.78it/s]
 43%|     | 34/79 [00:02<00:02, 18.81it/s]
 47%|     | 37/79 [00:02<00:02, 20.58it/s]
 51%|     | 40/79 [00:02<00:01, 21.93it/s]
 54%|    | 43/79 [00:02<00:01, 22.89it/s]
 58%|    | 46/79 [00:02<00:01, 23.72it/s]
 62%|   | 49/79 [00:02<00:01, 24.34it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.43it/s]
 13%|        | 10/79 [00:01<00:20,  3.33it/s]
 16%|        | 13/79 [00:01<00:14,  4.52it/s]
 20%|        | 16/79 [00:01<00:10,  6.01it/s]
 24%|       | 19/79 [00:01<00:07,  7.79it/s]
 28%|       | 22/79 [00:01<00:05,  9.86it/s]
 32%|      | 25/79 [00:01<00:04, 12.12it/s]
 35%|      | 28/79 [00:01<00:03, 14.40it/s]
 39%|      | 31/79 [00:01<00:02, 16.57it/s]
 43%|     | 34/79 [00:02<00:02, 18.51it/s]
 47%|     | 37/79 [00:02<00:02, 20.10it/s]
 51%|     | 40/79 [00:02<00:01, 21.61it/s]
 54%|    | 43/79 [00:02<00:01, 22.48it/s]
 58%|    | 46/79 [00:02<00:01, 23.16it/s]
 62%|   | 49/79 [00:02<00:01, 23.68it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.74it/s]
  9%|         | 7/79 [00:01<00:29,  2.41it/s]
 13%|        | 10/79 [00:01<00:20,  3.31it/s]
 16%|        | 13/79 [00:01<00:14,  4.49it/s]
 20%|        | 16/79 [00:01<00:10,  5.96it/s]
 24%|       | 19/79 [00:01<00:07,  7.73it/s]
 28%|       | 22/79 [00:01<00:05,  9.82it/s]
 32%|      | 25/79 [00:01<00:04, 12.08it/s]
 35%|      | 28/79 [00:01<00:03, 14.44it/s]
 39%|      | 31/79 [00:01<00:02, 16.71it/s]
 43%|     | 34/79 [00:02<00:02, 18.76it/s]
 47%|     | 37/79 [00:02<00:02, 20.48it/s]
 51%|     | 40/79 [00:02<00:01, 21.83it/s]
 54%|    | 43/79 [00:02<00:01, 23.17it/s]
 58%|    | 46/79 [00:02<00:01, 23.67it/s]
 62%|   | 49/79 [00:02<00:01, 24.03it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.44it/s]
 20%|        | 16/79 [00:01<00:10,  5.91it/s]
 24%|       | 19/79 [00:01<00:07,  7.70it/s]
 28%|       | 22/79 [00:01<00:05,  9.75it/s]
 32%|      | 25/79 [00:01<00:04, 11.96it/s]
 35%|      | 28/79 [00:01<00:03, 14.27it/s]
 39%|      | 31/79 [00:01<00:02, 16.48it/s]
 43%|     | 34/79 [00:02<00:02, 18.52it/s]
 47%|     | 37/79 [00:02<00:02, 20.32it/s]
 51%|     | 40/79 [00:02<00:01, 21.84it/s]
 54%|    | 43/79 [00:02<00:01, 22.84it/s]
 58%|    | 46/79 [00:02<00:01, 23.76it/s]
 62%|   | 49/79 [00:02<00:01, 24.42it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.49it/s]
 32%|      | 25/79 [00:01<00:04, 11.75it/s]
 35%|      | 28/79 [00:01<00:03, 14.15it/s]
 39%|      | 31/79 [00:02<00:02, 16.43it/s]
 43%|     | 34/79 [00:02<00:02, 18.45it/s]
 47%|     | 37/79 [00:02<00:02, 20.31it/s]
 51%|     | 40/79 [00:02<00:01, 21.74it/s]
 54%|    | 43/79 [00:02<00:01, 22.95it/s]
 58%|    | 46/79 [00:02<00:01, 23.73it/s]
 62%|   | 49/79 [00:02<00:01, 24.52it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.44it/s]
 20%|        | 16/79 [00:01<00:10,  5.91it/s]
 24%|       | 19/79 [00:01<00:07,  7.70it/s]
 28%|       | 22/79 [00:01<00:05,  9.76it/s]
 32%|      | 25/79 [00:01<00:04, 12.02it/s]
 35%|      | 28/79 [00:01<00:03, 14.32it/s]
 39%|      | 31/79 [00:01<00:02, 16.58it/s]
 43%|     | 34/79 [00:02<00:02, 18.58it/s]
 47%|     | 37/79 [00:02<00:02, 20.17it/s]
 51%|     | 40/79 [00:02<00:01, 21.70it/s]
 54%|    | 43/79 [00:02<00:01, 22.68it/s]
 58%|    | 46/79 [00:02<00:01, 23.44it/s]
 62%|   | 49/79 [00:02<00:01, 24.06it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.45it/s]
 20%|        | 16/79 [00:01<00:10,  5.93it/s]
 24%|       | 19/79 [00:01<00:07,  7.69it/s]
 28%|       | 22/79 [00:01<00:05,  9.72it/s]
 32%|      | 25/79 [00:01<00:04, 11.98it/s]
 35%|      | 28/79 [00:01<00:03, 14.32it/s]
 39%|      | 31/79 [00:01<00:02, 16.41it/s]
 43%|     | 34/79 [00:02<00:02, 18.34it/s]
 47%|     | 37/79 [00:02<00:02, 20.04it/s]
 51%|     | 40/79 [00:02<00:01, 21.53it/s]
 54%|    | 43/79 [00:02<00:01, 22.64it/s]
 58%|    | 46/79 [00:02<00:01, 23.37it/s]
 62%|   | 49/79 [00:02<00:01, 24.28it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.27it/s]
  4%|         | 3/79 [00:00<00:43,  1.76it/s]
  8%|         | 6/79 [00:01<00:29,  2.44it/s]
 11%|        | 9/79 [00:01<00:20,  3.34it/s]
 15%|        | 12/79 [00:01<00:14,  4.52it/s]
 19%|        | 15/79 [00:01<00:10,  5.99it/s]
 23%|       | 18/79 [00:01<00:07,  7.77it/s]
 27%|       | 21/79 [00:01<00:05,  9.78it/s]
 30%|       | 24/79 [00:01<00:04, 11.98it/s]
 34%|      | 27/79 [00:01<00:03, 14.22it/s]
 38%|      | 30/79 [00:01<00:02, 16.40it/s]
 42%|     | 33/79 [00:02<00:02, 18.24it/s]
 46%|     | 36/79 [00:02<00:02, 19.98it/s]
 49%|     | 39/79 [00:02<00:01, 21.14it/s]
 53%|    | 42/79 [00:02<00:01, 22.41it/s]
 57%|    | 45/79 [00:02<00:01, 22.81it/s]
 61%|    | 48/79 [00:02<00:01, 23.33it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.36it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.56it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.82it/s]
 35%|      | 28/79 [00:01<00:03, 14.10it/s]
 39%|      | 31/79 [00:02<00:02, 16.28it/s]
 43%|     | 34/79 [00:02<00:02, 18.13it/s]
 47%|     | 37/79 [00:02<00:02, 19.97it/s]
 51%|     | 40/79 [00:02<00:01, 21.43it/s]
 54%|    | 43/79 [00:02<00:01, 22.39it/s]
 58%|    | 46/79 [00:02<00:01, 23.13it/s]
 62%|   | 49/79 [00:02<00:01, 24.14it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.44it/s]
 20%|        | 16/79 [00:01<00:10,  5.92it/s]
 24%|       | 19/79 [00:01<00:07,  7.67it/s]
 28%|       | 22/79 [00:01<00:05,  9.71it/s]
 32%|      | 25/79 [00:01<00:04, 11.93it/s]
 35%|      | 28/79 [00:01<00:03, 14.33it/s]
 39%|      | 31/79 [00:02<00:02, 16.51it/s]
 43%|     | 34/79 [00:02<00:02, 18.44it/s]
 47%|     | 37/79 [00:02<00:02, 20.18it/s]
 51%|     | 40/79 [00:02<00:01, 21.48it/s]
 54%|    | 43/79 [00:02<00:01, 22.59it/s]
 58%|    | 46/79 [00:02<00:01, 22.86it/s]
 62%|   | 49/79 [00:02<00:01, 23.65it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:00<00:47,  1.62it/s]
  8%|         | 6/79 [00:01<00:32,  2.24it/s]
 11%|        | 9/79 [00:01<00:22,  3.09it/s]
 15%|        | 12/79 [00:01<00:15,  4.20it/s]
 19%|        | 15/79 [00:01<00:11,  5.62it/s]
 23%|       | 18/79 [00:01<00:08,  7.35it/s]
 27%|       | 21/79 [00:01<00:06,  9.36it/s]
 30%|       | 24/79 [00:01<00:04, 11.56it/s]
 34%|      | 27/79 [00:01<00:03, 13.89it/s]
 38%|      | 30/79 [00:02<00:03, 16.08it/s]
 42%|     | 33/79 [00:02<00:02, 18.10it/s]
 46%|     | 36/79 [00:02<00:02, 19.83it/s]
 49%|     | 39/79 [00:02<00:01, 21.33it/s]
 53%|    | 42/79 [00:02<00:01, 22.48it/s]
 57%|    | 45/79 [00:02<00:01, 23.49it/s]
 61%|    | 48/79 [00:02<00:01, 24.10it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.13it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.23it/s]
 28%|       | 22/79 [00:01<00:06,  9.22it/s]
 32%|      | 25/79 [00:01<00:04, 11.42it/s]
 35%|      | 28/79 [00:01<00:03, 13.73it/s]
 39%|      | 31/79 [00:02<00:02, 16.01it/s]
 43%|     | 34/79 [00:02<00:02, 18.11it/s]
 47%|     | 37/79 [00:02<00:02, 20.02it/s]
 51%|     | 40/79 [00:02<00:01, 21.49it/s]
 54%|    | 43/79 [00:02<00:01, 22.79it/s]
 58%|    | 46/79 [00:02<00:01, 23.73it/s]
 62%|   | 49/79 [00:02<00:01, 24.42it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:00<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.57it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.48it/s]
 35%|      | 28/79 [00:01<00:03, 13.82it/s]
 39%|      | 31/79 [00:02<00:02, 16.05it/s]
 43%|     | 34/79 [00:02<00:02, 17.98it/s]
 47%|     | 37/79 [00:02<00:02, 19.67it/s]
 51%|     | 40/79 [00:02<00:01, 21.27it/s]
 54%|    | 43/79 [00:02<00:01, 22.50it/s]
 58%|    | 46/79 [00:02<00:01, 23.07it/s]
 62%|   | 49/79 [00:02<00:01, 23.92it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.43it/s]
 28%|       | 22/79 [00:01<00:06,  9.44it/s]
 32%|      | 25/79 [00:01<00:04, 11.60it/s]
 35%|      | 28/79 [00:01<00:03, 13.74it/s]
 39%|      | 31/79 [00:02<00:03, 15.85it/s]
 43%|     | 34/79 [00:02<00:02, 17.86it/s]
 47%|     | 37/79 [00:02<00:02, 19.71it/s]
 51%|     | 40/79 [00:02<00:01, 21.01it/s]
 54%|    | 43/79 [00:02<00:01, 22.12it/s]
 58%|    | 46/79 [00:02<00:01, 23.24it/s]
 62%|   | 49/79 [00:02<00:01, 24.02it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.28it/s]
 32%|      | 25/79 [00:01<00:04, 11.51it/s]
 35%|      | 28/79 [00:01<00:03, 13.82it/s]
 39%|      | 31/79 [00:02<00:02, 16.13it/s]
 43%|     | 34/79 [00:02<00:02, 18.31it/s]
 47%|     | 37/79 [00:02<00:02, 20.04it/s]
 51%|     | 40/79 [00:02<00:01, 21.29it/s]
 54%|    | 43/79 [00:02<00:01, 22.47it/s]
 58%|    | 46/79 [00:02<00:01, 23.11it/s]
 62%|   | 49/79 [00:02<00:01, 23.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.25it/s]
 32%|      | 25/79 [00:01<00:04, 11.39it/s]
 35%|      | 28/79 [00:01<00:03, 13.71it/s]
 39%|      | 31/79 [00:02<00:03, 15.86it/s]
 43%|     | 34/79 [00:02<00:02, 17.92it/s]
 47%|     | 37/79 [00:02<00:02, 19.76it/s]
 51%|     | 40/79 [00:02<00:01, 21.21it/s]
 54%|    | 43/79 [00:02<00:01, 22.25it/s]
 58%|    | 46/79 [00:02<00:01, 23.21it/s]
 62%|   | 49/79 [00:02<00:01, 24.12it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.13it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.56it/s]
 39%|      | 31/79 [00:02<00:03, 15.85it/s]
 43%|     | 34/79 [00:02<00:02, 17.86it/s]
 47%|     | 37/79 [00:02<00:02, 19.71it/s]
 51%|     | 40/79 [00:02<00:01, 21.05it/s]
 54%|    | 43/79 [00:02<00:01, 22.39it/s]
 58%|    | 46/79 [00:02<00:01, 23.27it/s]
 62%|   | 49/79 [00:02<00:01, 23.81it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.18it/s]
 32%|      | 25/79 [00:01<00:04, 11.35it/s]
 35%|      | 28/79 [00:01<00:03, 13.60it/s]
 39%|      | 31/79 [00:02<00:03, 15.87it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.78it/s]
 51%|     | 40/79 [00:02<00:01, 21.12it/s]
 54%|    | 43/79 [00:02<00:01, 22.29it/s]
 58%|    | 46/79 [00:02<00:01, 23.18it/s]
 62%|   | 49/79 [00:02<00:01, 23.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  4%|         | 3/79 [00:00<00:47,  1.59it/s]
  8%|         | 6/79 [00:01<00:32,  2.21it/s]
 11%|        | 9/79 [00:01<00:22,  3.05it/s]
 15%|        | 12/79 [00:01<00:16,  4.13it/s]
 19%|        | 15/79 [00:01<00:11,  5.52it/s]
 23%|       | 18/79 [00:01<00:08,  7.21it/s]
 27%|       | 21/79 [00:01<00:06,  9.16it/s]
 30%|       | 24/79 [00:01<00:04, 11.27it/s]
 34%|      | 27/79 [00:01<00:03, 13.48it/s]
 38%|      | 30/79 [00:02<00:03, 15.80it/s]
 42%|     | 33/79 [00:02<00:02, 17.83it/s]
 46%|     | 36/79 [00:02<00:02, 19.53it/s]
 49%|     | 39/79 [00:02<00:01, 20.95it/s]
 53%|    | 42/79 [00:02<00:01, 22.12it/s]
 57%|    | 45/79 [00:02<00:01, 23.07it/s]
 61%|    | 48/79 [00:02<00:01, 23.46it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.11it/s]
 32%|      | 25/79 [00:01<00:04, 11.13it/s]
 35%|      | 28/79 [00:01<00:03, 13.31it/s]
 39%|      | 31/79 [00:02<00:03, 15.56it/s]
 43%|     | 34/79 [00:02<00:02, 17.68it/s]
 47%|     | 37/79 [00:02<00:02, 19.47it/s]
 51%|     | 40/79 [00:02<00:01, 20.83it/s]
 54%|    | 43/79 [00:02<00:01, 22.11it/s]
 58%|    | 46/79 [00:02<00:01, 23.03it/s]
 62%|   | 49/79 [00:02<00:01, 23.86it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.09it/s]
 28%|       | 22/79 [00:01<00:06,  9.04it/s]
 32%|      | 25/79 [00:01<00:04, 11.22it/s]
 35%|      | 28/79 [00:01<00:03, 13.58it/s]
 39%|      | 31/79 [00:02<00:03, 15.71it/s]
 43%|     | 34/79 [00:02<00:02, 17.82it/s]
 47%|     | 37/79 [00:02<00:02, 19.57it/s]
 51%|     | 40/79 [00:02<00:01, 21.07it/s]
 54%|    | 43/79 [00:02<00:01, 22.28it/s]
 58%|    | 46/79 [00:02<00:01, 23.24it/s]
 62%|   | 49/79 [00:02<00:01, 24.05it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.36it/s]
 24%|       | 19/79 [00:01<00:08,  7.02it/s]
 28%|       | 22/79 [00:01<00:06,  8.94it/s]
 32%|      | 25/79 [00:01<00:04, 11.09it/s]
 35%|      | 28/79 [00:01<00:03, 13.37it/s]
 39%|      | 31/79 [00:02<00:03, 15.65it/s]
 43%|     | 34/79 [00:02<00:02, 17.84it/s]
 47%|     | 37/79 [00:02<00:02, 19.61it/s]
 51%|     | 40/79 [00:02<00:01, 21.24it/s]
 54%|    | 43/79 [00:02<00:01, 22.26it/s]
 58%|    | 46/79 [00:02<00:01, 23.23it/s]
 62%|   | 49/79 [00:02<00:01, 23.95it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.33it/s]
 24%|       | 19/79 [00:01<00:08,  6.99it/s]
 28%|       | 22/79 [00:01<00:06,  8.92it/s]
 32%|      | 25/79 [00:01<00:04, 11.07it/s]
 35%|      | 28/79 [00:01<00:03, 13.33it/s]
 39%|      | 31/79 [00:02<00:03, 15.53it/s]
 43%|     | 34/79 [00:02<00:02, 17.60it/s]
 47%|     | 37/79 [00:02<00:02, 19.40it/s]
 51%|     | 40/79 [00:02<00:01, 20.90it/s]
 54%|    | 43/79 [00:02<00:01, 22.09it/s]
 58%|    | 46/79 [00:02<00:01, 22.97it/s]
 62%|   | 49/79 [00:02<00:01, 23.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  4%|         | 3/79 [00:00<00:47,  1.59it/s]
  8%|         | 6/79 [00:01<00:33,  2.20it/s]
 11%|        | 9/79 [00:01<00:23,  3.03it/s]
 15%|        | 12/79 [00:01<00:16,  4.12it/s]
 19%|        | 15/79 [00:01<00:11,  5.50it/s]
 23%|       | 18/79 [00:01<00:08,  7.20it/s]
 27%|       | 21/79 [00:01<00:06,  9.14it/s]
 30%|       | 24/79 [00:01<00:04, 11.28it/s]
 34%|      | 27/79 [00:01<00:03, 13.50it/s]
 38%|      | 30/79 [00:02<00:03, 15.52it/s]
 42%|     | 33/79 [00:02<00:02, 17.30it/s]
 46%|     | 36/79 [00:02<00:02, 18.91it/s]
 49%|     | 39/79 [00:02<00:01, 20.22it/s]
 53%|    | 42/79 [00:02<00:01, 21.21it/s]
 57%|    | 45/79 [00:02<00:01, 22.16it/s]
 61%|    | 48/79 [00:02<00:01, 22.47it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.12it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.27it/s]
 35%|      | 28/79 [00:01<00:03, 13.42it/s]
 39%|      | 31/79 [00:02<00:03, 15.68it/s]
 43%|     | 34/79 [00:02<00:02, 17.78it/s]
 47%|     | 37/79 [00:02<00:02, 19.36it/s]
 51%|     | 40/79 [00:02<00:01, 20.73it/s]
 54%|    | 43/79 [00:02<00:01, 21.99it/s]
 58%|    | 46/79 [00:02<00:01, 22.89it/s]
 62%|   | 49/79 [00:02<00:01, 23.30it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.24it/s]
 24%|       | 19/79 [00:01<00:08,  6.89it/s]
 28%|       | 22/79 [00:01<00:06,  8.85it/s]
 32%|      | 25/79 [00:01<00:04, 10.97it/s]
 35%|      | 28/79 [00:02<00:03, 13.24it/s]
 39%|      | 31/79 [00:02<00:03, 15.45it/s]
 43%|     | 34/79 [00:02<00:02, 17.47it/s]
 47%|     | 37/79 [00:02<00:02, 19.18it/s]
 51%|     | 40/79 [00:02<00:01, 20.48it/s]
 54%|    | 43/79 [00:02<00:01, 21.63it/s]
 58%|    | 46/79 [00:02<00:01, 22.37it/s]
 62%|   | 49/79 [00:02<00:01, 22.88it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.17it/s]
 24%|       | 19/79 [00:01<00:08,  6.79it/s]
 28%|       | 22/79 [00:01<00:06,  8.71it/s]
 32%|      | 25/79 [00:01<00:04, 10.83it/s]
 35%|      | 28/79 [00:02<00:03, 13.04it/s]
 39%|      | 31/79 [00:02<00:03, 15.20it/s]
 43%|     | 34/79 [00:02<00:02, 17.30it/s]
 47%|     | 37/79 [00:02<00:02, 19.04it/s]
 51%|     | 40/79 [00:02<00:01, 20.55it/s]
 54%|    | 43/79 [00:02<00:01, 22.08it/s]
 58%|    | 46/79 [00:02<00:01, 23.07it/s]
 62%|   | 49/79 [00:02<00:01, 23.65it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  4%|         | 3/79 [00:01<00:48,  1.55it/s]
  8%|         | 6/79 [00:01<00:33,  2.16it/s]
 11%|        | 9/79 [00:01<00:23,  2.97it/s]
 15%|        | 12/79 [00:01<00:16,  4.04it/s]
 19%|        | 15/79 [00:01<00:11,  5.39it/s]
 23%|       | 18/79 [00:01<00:08,  7.05it/s]
 27%|       | 21/79 [00:01<00:06,  8.97it/s]
 30%|       | 24/79 [00:01<00:04, 11.10it/s]
 34%|      | 27/79 [00:01<00:03, 13.27it/s]
 38%|      | 30/79 [00:02<00:03, 15.32it/s]
 42%|     | 33/79 [00:02<00:02, 17.25it/s]
 46%|     | 36/79 [00:02<00:02, 18.81it/s]
 49%|     | 39/79 [00:02<00:01, 20.14it/s]
 53%|    | 42/79 [00:02<00:01, 21.16it/s]
 57%|    | 45/79 [00:02<00:01, 22.24it/s]
 61%|    | 48/79 [00:02<00:01, 22.77it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.93it/s]
 20%|        | 16/79 [00:01<00:11,  5.25it/s]
 24%|       | 19/79 [00:01<00:08,  6.90it/s]
 28%|       | 22/79 [00:01<00:06,  8.79it/s]
 32%|      | 25/79 [00:01<00:04, 10.92it/s]
 35%|      | 28/79 [00:02<00:03, 13.11it/s]
 39%|      | 31/79 [00:02<00:03, 15.33it/s]
 43%|     | 34/79 [00:02<00:02, 17.35it/s]
 47%|     | 37/79 [00:02<00:02, 18.95it/s]
 51%|     | 40/79 [00:02<00:01, 20.47it/s]
 54%|    | 43/79 [00:02<00:01, 21.62it/s]
 58%|    | 46/79 [00:02<00:01, 22.47it/s]
 62%|   | 49/79 [00:02<00:01, 23.21it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  6.97it/s]
 28%|       | 22/79 [00:01<00:06,  8.91it/s]
 32%|      | 25/79 [00:01<00:04, 11.01it/s]
 35%|      | 28/79 [00:02<00:03, 13.19it/s]
 39%|      | 31/79 [00:02<00:03, 15.39it/s]
 43%|     | 34/79 [00:02<00:02, 17.29it/s]
 47%|     | 37/79 [00:02<00:02, 18.94it/s]
 51%|     | 40/79 [00:02<00:01, 20.28it/s]
 54%|    | 43/79 [00:02<00:01, 21.50it/s]
 58%|    | 46/79 [00:02<00:01, 22.42it/s]
 62%|   | 49/79 [00:02<00:01, 23.22it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.87it/s]
 20%|        | 16/79 [00:01<00:12,  5.19it/s]
 24%|       | 19/79 [00:01<00:08,  6.80it/s]
 28%|       | 22/79 [00:01<00:06,  8.64it/s]
 32%|      | 25/79 [00:01<00:05, 10.70it/s]
 35%|      | 28/79 [00:02<00:03, 12.83it/s]
 39%|      | 31/79 [00:02<00:03, 14.94it/s]
 43%|     | 34/79 [00:02<00:02, 16.75it/s]
 47%|     | 37/79 [00:02<00:02, 18.25it/s]
 51%|     | 40/79 [00:02<00:01, 19.63it/s]
 54%|    | 43/79 [00:02<00:01, 20.86it/s]
 58%|    | 46/79 [00:02<00:01, 21.27it/s]
 62%|   | 49/79 [00:02<00:01, 22.06it/s]
 66%|   | 52/79 [00:03<00:01, 25.34it/s]
 70%|   | 55/79 [00:02<00:00, 25.89it/s]
 73%|  | 58/79 [00:03<00:00, 25.75it/s]
 77%|  | 61/79 [00:03<00:00, 25.90it/s]
 81%|  | 64/79 [00:03<00:00, 25.87it/s]
 85%| | 67/79 [00:03<00:00, 25.88it/s]
 89%| | 70/79 [00:03<00:00, 25.97it/s]
 92%|| 73/79 [00:03<00:00, 26.21it/s]
 96%|| 76/79 [00:03<00:00, 26.66it/s]
100%|| 79/79 [00:03<00:00, 27.57it/s]
, 25.04it/s]
 70%|   | 55/79 [00:02<00:00, 25.38it/s]
 73%|  | 58/79 [00:03<00:00, 25.59it/s]
 77%|  | 61/79 [00:03<00:00, 25.88it/s]
 81%|  | 64/79 [00:03<00:00, 25.72it/s]
 85%| | 67/79 [00:03<00:00, 25.58it/s]
 89%| | 70/79 [00:03<00:00, 25.34it/s]
 92%|| 73/79 [00:03<00:00, 25.78it/s]
 96%|| 76/79 [00:03<00:00, 26.23it/s]
100%|| 79/79 [00:03<00:00, 27.23it/s]
, 24.67it/s]
 70%|   | 55/79 [00:02<00:00, 25.13it/s]
 73%|  | 58/79 [00:03<00:00, 25.34it/s]
 77%|  | 61/79 [00:03<00:00, 25.60it/s]
 81%|  | 64/79 [00:03<00:00, 25.65it/s]
 85%| | 67/79 [00:03<00:00, 25.80it/s]
 89%| | 70/79 [00:03<00:00, 25.63it/s]
 92%|| 73/79 [00:03<00:00, 26.17it/s]
 96%|| 76/79 [00:03<00:00, 26.74it/s]
100%|| 79/79 [00:03<00:00, 27.57it/s]
, 24.31it/s]
 70%|   | 55/79 [00:02<00:00, 24.37it/s]
 73%|  | 58/79 [00:03<00:00, 24.82it/s]
 77%|  | 61/79 [00:03<00:00, 24.95it/s]
 81%|  | 64/79 [00:03<00:00, 25.00it/s]
 85%| | 67/79 [00:03<00:00, 25.51it/s]
 89%| | 70/79 [00:03<00:00, 25.02it/s]
 92%|| 73/79 [00:03<00:00, 25.50it/s]
 96%|| 76/79 [00:03<00:00, 26.24it/s]
100%|| 79/79 [00:03<00:00, 20.33it/s]
, 25.04it/s]
 70%|   | 55/79 [00:02<00:00, 25.41it/s]
 73%|  | 58/79 [00:03<00:00, 25.77it/s]
 77%|  | 61/79 [00:03<00:00, 25.79it/s]
 81%|  | 64/79 [00:03<00:00, 25.86it/s]
 85%| | 67/79 [00:03<00:00, 25.95it/s]
 89%| | 70/79 [00:03<00:00, 26.13it/s]
 92%|| 73/79 [00:03<00:00, 26.39it/s]
 96%|| 76/79 [00:03<00:00, 27.34it/s]
100%|| 79/79 [00:03<00:00, 27.60it/s]
, 24.46it/s]
 70%|   | 55/79 [00:02<00:00, 24.97it/s]
 73%|  | 58/79 [00:03<00:00, 25.22it/s]
 77%|  | 61/79 [00:03<00:00, 25.44it/s]
 81%|  | 64/79 [00:03<00:00, 25.40it/s]
 85%| | 67/79 [00:03<00:00, 25.58it/s]
 89%| | 70/79 [00:03<00:00, 25.62it/s]
 92%|| 73/79 [00:03<00:00, 25.92it/s]
 96%|| 76/79 [00:03<00:00, 26.56it/s]
100%|| 79/79 [00:03<00:00, 27.47it/s]
, 24.46it/s]
 70%|   | 55/79 [00:02<00:00, 24.75it/s]
 73%|  | 58/79 [00:03<00:00, 24.94it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 25.24it/s]
 85%| | 67/79 [00:03<00:00, 25.11it/s]
 89%| | 70/79 [00:03<00:00, 24.93it/s]
 92%|| 73/79 [00:03<00:00, 25.46it/s]
 96%|| 76/79 [00:03<00:00, 26.15it/s]
100%|| 79/79 [00:03<00:00, 27.10it/s]
, 24.62it/s]
 70%|   | 55/79 [00:02<00:00, 24.44it/s]
 73%|  | 58/79 [00:03<00:00, 24.66it/s]
 77%|  | 61/79 [00:03<00:00, 24.90it/s]
 81%|  | 64/79 [00:03<00:00, 24.81it/s]
 85%| | 67/79 [00:03<00:00, 24.50it/s]
 89%| | 70/79 [00:03<00:00, 24.79it/s]
 92%|| 73/79 [00:03<00:00, 24.91it/s]
 96%|| 76/79 [00:03<00:00, 25.86it/s]
100%|| 79/79 [00:03<00:00, 26.73it/s]
, 24.42it/s]
 70%|   | 55/79 [00:02<00:00, 24.93it/s]
 73%|  | 58/79 [00:03<00:00, 25.19it/s]
 77%|  | 61/79 [00:03<00:00, 25.13it/s]
 81%|  | 64/79 [00:03<00:00, 25.22it/s]
 85%| | 67/79 [00:03<00:00, 25.43it/s]
 89%| | 70/79 [00:03<00:00, 25.54it/s]
 92%|| 73/79 [00:03<00:00, 26.13it/s]
 96%|| 76/79 [00:03<00:00, 26.70it/s]
100%|| 79/79 [00:03<00:00, 27.60it/s]
, 24.87it/s]
 70%|   | 55/79 [00:02<00:00, 25.16it/s]
 73%|  | 58/79 [00:03<00:00, 25.44it/s]
 77%|  | 61/79 [00:03<00:00, 25.48it/s]
 81%|  | 64/79 [00:03<00:00, 25.38it/s]
 85%| | 67/79 [00:03<00:00, 25.64it/s]
 89%| | 70/79 [00:03<00:00, 25.60it/s]
 92%|| 73/79 [00:03<00:00, 26.10it/s]
 96%|| 76/79 [00:03<00:00, 26.51it/s]
100%|| 79/79 [00:03<00:00, 19.98it/s]
81it/s]
 68%|   | 54/79 [00:02<00:01, 24.20it/s]
 72%|  | 57/79 [00:03<00:00, 24.29it/s]
 76%|  | 60/79 [00:03<00:00, 24.30it/s]
 80%|  | 63/79 [00:03<00:00, 24.82it/s]
 84%| | 66/79 [00:03<00:00, 25.11it/s]
 87%| | 69/79 [00:03<00:00, 25.43it/s]
 91%| | 72/79 [00:03<00:00, 25.51it/s]
 95%|| 75/79 [00:03<00:00, 26.27it/s]
 99%|| 78/79 [00:03<00:00, 26.81it/s]
100%|| 79/79 [00:03<00:00, 19.94it/s]
, 24.44it/s]
 70%|   | 55/79 [00:02<00:00, 24.68it/s]
 73%|  | 58/79 [00:03<00:00, 25.09it/s]
 77%|  | 61/79 [00:03<00:00, 25.40it/s]
 81%|  | 64/79 [00:03<00:00, 25.39it/s]
 85%| | 67/79 [00:03<00:00, 25.40it/s]
 89%| | 70/79 [00:03<00:00, 25.47it/s]
 92%|| 73/79 [00:03<00:00, 25.79it/s]
 96%|| 76/79 [00:03<00:00, 26.52it/s]
100%|| 79/79 [00:03<00:00, 27.32it/s]
, 24.38it/s]
 70%|   | 55/79 [00:02<00:00, 24.78it/s]
 73%|  | 58/79 [00:03<00:00, 25.07it/s]
 77%|  | 61/79 [00:03<00:00, 25.19it/s]
 81%|  | 64/79 [00:03<00:00, 24.93it/s]
 85%| | 67/79 [00:03<00:00, 25.06it/s]
 89%| | 70/79 [00:03<00:00, 25.09it/s]
 92%|| 73/79 [00:03<00:00, 25.51it/s]
 96%|| 76/79 [00:03<00:00, 26.17it/s]
100%|| 79/79 [00:03<00:00, 26.95it/s]
, 24.00it/s]
 70%|   | 55/79 [00:02<00:00, 24.38it/s]
 73%|  | 58/79 [00:03<00:00, 24.20it/s]
 77%|  | 61/79 [00:03<00:00, 24.13it/s]
 81%|  | 64/79 [00:03<00:00, 24.39it/s]
 85%| | 67/79 [00:03<00:00, 24.48it/s]
 89%| | 70/79 [00:03<00:00, 24.43it/s]
 92%|| 73/79 [00:03<00:00, 25.21it/s]
 96%|| 76/79 [00:03<00:00, 26.05it/s]
100%|| 79/79 [00:03<00:00, 19.96it/s]
, 24.34it/s]
 70%|   | 55/79 [00:02<00:00, 24.74it/s]
 73%|  | 58/79 [00:03<00:00, 24.86it/s]
 77%|  | 61/79 [00:03<00:00, 25.25it/s]
 81%|  | 64/79 [00:03<00:00, 25.19it/s]
 85%| | 67/79 [00:03<00:00, 25.10it/s]
 89%| | 70/79 [00:03<00:00, 25.61it/s]
 92%|| 73/79 [00:03<00:00, 25.49it/s]
 96%|| 76/79 [00:03<00:00, 26.13it/s]
100%|| 79/79 [00:03<00:00, 26.91it/s]
, 24.19it/s]
 70%|   | 55/79 [00:03<00:00, 24.50it/s]
 73%|  | 58/79 [00:03<00:00, 24.83it/s]
 77%|  | 61/79 [00:03<00:00, 24.97it/s]
 81%|  | 64/79 [00:03<00:00, 25.02it/s]
 85%| | 67/79 [00:03<00:00, 25.53it/s]
 89%| | 70/79 [00:03<00:00, 25.89it/s]
 92%|| 73/79 [00:03<00:00, 26.19it/s]
 96%|| 76/79 [00:03<00:00, 26.83it/s]
100%|| 79/79 [00:03<00:00, 27.65it/s]
, 24.16it/s]
 70%|   | 55/79 [00:03<00:00, 24.56it/s]
 73%|  | 58/79 [00:03<00:00, 24.99it/s]
 77%|  | 61/79 [00:03<00:00, 25.24it/s]
 81%|  | 64/79 [00:03<00:00, 25.24it/s]
 85%| | 67/79 [00:03<00:00, 25.40it/s]
 89%| | 70/79 [00:03<00:00, 25.25it/s]
 92%|| 73/79 [00:03<00:00, 25.62it/s]
 96%|| 76/79 [00:03<00:00, 26.32it/s]
100%|| 79/79 [00:03<00:00, 27.12it/s]
, 24.58it/s]
 70%|   | 55/79 [00:03<00:00, 24.88it/s]
 73%|  | 58/79 [00:03<00:00, 25.29it/s]
 77%|  | 61/79 [00:03<00:00, 25.33it/s]
 81%|  | 64/79 [00:03<00:00, 25.66it/s]
 85%| | 67/79 [00:03<00:00, 25.70it/s]
 89%| | 70/79 [00:03<00:00, 25.98it/s]
 92%|| 73/79 [00:03<00:00, 26.17it/s]
 96%|| 76/79 [00:03<00:00, 26.93it/s]
100%|| 79/79 [00:03<00:00, 27.76it/s]
25it/s]
 68%|   | 54/79 [00:02<00:01, 24.55it/s]
 72%|  | 57/79 [00:03<00:00, 24.61it/s]
 76%|  | 60/79 [00:03<00:00, 25.08it/s]
 80%|  | 63/79 [00:03<00:00, 25.04it/s]
 84%| | 66/79 [00:03<00:00, 25.12it/s]
 87%| | 69/79 [00:03<00:00, 25.36it/s]
 91%| | 72/79 [00:03<00:00, 25.60it/s]
 95%|| 75/79 [00:03<00:00, 26.39it/s]
 99%|| 78/79 [00:03<00:00, 27.04it/s]
100%|| 79/79 [00:03<00:00, 19.80it/s]
, 24.29it/s]
 70%|   | 55/79 [00:03<00:00, 24.49it/s]
 73%|  | 58/79 [00:03<00:00, 25.08it/s]
 77%|  | 61/79 [00:03<00:00, 25.22it/s]
 81%|  | 64/79 [00:03<00:00, 25.27it/s]
 85%| | 67/79 [00:03<00:00, 25.24it/s]
 89%| | 70/79 [00:03<00:00, 25.42it/s]
 92%|| 73/79 [00:03<00:00, 25.78it/s]
 96%|| 76/79 [00:03<00:00, 26.54it/s]
100%|| 79/79 [00:03<00:00, 27.37it/s]
, 24.47it/s]
 70%|   | 55/79 [00:03<00:00, 24.58it/s]
 73%|  | 58/79 [00:03<00:00, 24.74it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 24.70it/s]
 85%| | 67/79 [00:03<00:00, 24.93it/s]
 89%| | 70/79 [00:03<00:00, 24.98it/s]
 92%|| 73/79 [00:03<00:00, 25.27it/s]
 96%|| 76/79 [00:03<00:00, 25.93it/s]
100%|| 79/79 [00:03<00:00, 26.87it/s]
, 24.40it/s]
 70%|   | 55/79 [00:03<00:00, 24.77it/s]
 73%|  | 58/79 [00:03<00:00, 24.83it/s]
 77%|  | 61/79 [00:03<00:00, 25.21it/s]
 81%|  | 64/79 [00:03<00:00, 25.42it/s]
 85%| | 67/79 [00:03<00:00, 25.65it/s]
 89%| | 70/79 [00:03<00:00, 25.67it/s]
 92%|| 73/79 [00:03<00:00, 25.62it/s]
 96%|| 76/79 [00:03<00:00, 26.52it/s]
100%|| 79/79 [00:03<00:00, 26.74it/s]
85it/s]
 68%|   | 54/79 [00:03<00:01, 24.23it/s]
 72%|  | 57/79 [00:03<00:00, 24.44it/s]
 76%|  | 60/79 [00:03<00:00, 24.64it/s]
 80%|  | 63/79 [00:03<00:00, 24.84it/s]
 84%| | 66/79 [00:03<00:00, 25.29it/s]
 87%| | 69/79 [00:03<00:00, 25.39it/s]
 91%| | 72/79 [00:03<00:00, 25.27it/s]
 95%|| 75/79 [00:03<00:00, 26.01it/s]
 99%|| 78/79 [00:03<00:00, 26.55it/s]
100%|| 79/79 [00:04<00:00, 19.55it/s]
, 24.14it/s]
 70%|   | 55/79 [00:03<00:00, 24.75it/s]
 73%|  | 58/79 [00:03<00:00, 25.06it/s]
 77%|  | 61/79 [00:03<00:00, 25.43it/s]
 81%|  | 64/79 [00:03<00:00, 25.34it/s]
 85%| | 67/79 [00:03<00:00, 25.59it/s]
 89%| | 70/79 [00:03<00:00, 25.30it/s]
 92%|| 73/79 [00:03<00:00, 25.63it/s]
 96%|| 76/79 [00:03<00:00, 26.19it/s]
100%|| 79/79 [00:03<00:00, 26.86it/s]
, 24.46it/s]
 70%|   | 55/79 [00:03<00:00, 25.06it/s]
 73%|  | 58/79 [00:03<00:00, 25.17it/s]
 77%|  | 61/79 [00:03<00:00, 25.44it/s]
 81%|  | 64/79 [00:03<00:00, 25.57it/s]
 85%| | 67/79 [00:03<00:00, 26.00it/s]
 89%| | 70/79 [00:03<00:00, 25.80it/s]
 92%|| 73/79 [00:03<00:00, 25.98it/s]
 96%|| 76/79 [00:03<00:00, 26.65it/s]
100%|| 79/79 [00:04<00:00, 19.42it/s]
, 23.61it/s]
 70%|   | 55/79 [00:03<00:00, 24.22it/s]
 73%|  | 58/79 [00:03<00:00, 24.57it/s]
 77%|  | 61/79 [00:03<00:00, 24.95it/s]
 81%|  | 64/79 [00:03<00:00, 25.23it/s]
 85%| | 67/79 [00:03<00:00, 25.39it/s]
 89%| | 70/79 [00:03<00:00, 25.43it/s]
 92%|| 73/79 [00:03<00:00, 25.62it/s]
 96%|| 76/79 [00:03<00:00, 26.32it/s]
100%|| 79/79 [00:03<00:00, 26.88it/s]
, 23.92it/s]
 70%|   | 55/79 [00:03<00:00, 24.28it/s]
 73%|  | 58/79 [00:03<00:00, 24.14it/s]
 77%|  | 61/79 [00:03<00:00, 23.99it/s]
 81%|  | 64/79 [00:03<00:00, 23.96it/s]
 85%| | 67/79 [00:03<00:00, 24.51it/s]
 89%| | 70/79 [00:03<00:00, 24.41it/s]
 92%|| 73/79 [00:03<00:00, 24.82it/s]
 96%|| 76/79 [00:03<00:00, 25.56it/s]
100%|| 79/79 [00:04<00:00, 26.48it/s]
, 23.43it/s]
 70%|   | 55/79 [00:03<00:00, 24.03it/s]
 73%|  | 58/79 [00:03<00:00, 24.29it/s]
 77%|  | 61/79 [00:03<00:00, 24.59it/s]
 81%|  | 64/79 [00:03<00:00, 24.89it/s]
 85%| | 67/79 [00:03<00:00, 25.00it/s]
 89%| | 70/79 [00:03<00:00, 24.99it/s]
 92%|| 73/79 [00:03<00:00, 25.25it/s]
 96%|| 76/79 [00:03<00:00, 25.86it/s]
100%|| 79/79 [00:04<00:00, 26.57it/s]
02it/s]
 68%|   | 54/79 [00:03<00:01, 23.55it/s]
 72%|  | 57/79 [00:03<00:00, 23.73it/s]
 76%|  | 60/79 [00:03<00:00, 24.00it/s]
 80%|  | 63/79 [00:03<00:00, 24.24it/s]
 84%| | 66/79 [00:03<00:00, 24.17it/s]
 87%| | 69/79 [00:03<00:00, 24.35it/s]
 91%| | 72/79 [00:03<00:00, 24.50it/s]
 95%|| 75/79 [00:03<00:00, 25.37it/s]
 99%|| 78/79 [00:04<00:00, 25.99it/s]
100%|| 79/79 [00:04<00:00, 19.22it/s]
24it/s]
 68%|   | 54/79 [00:03<00:01, 23.58it/s]
 72%|  | 57/79 [00:03<00:00, 23.95it/s]
 76%|  | 60/79 [00:03<00:00, 24.36it/s]
 80%|  | 63/79 [00:03<00:00, 24.41it/s]
 84%| | 66/79 [00:03<00:00, 24.58it/s]
 87%| | 69/79 [00:03<00:00, 24.88it/s]
 91%| | 72/79 [00:03<00:00, 24.78it/s]
 95%|| 75/79 [00:03<00:00, 25.39it/s]
 99%|| 78/79 [00:04<00:00, 25.80it/s]
100%|| 79/79 [00:04<00:00, 19.14it/s]
, 23.21it/s]
 70%|   | 55/79 [00:03<00:01, 23.60it/s]
 73%|  | 58/79 [00:03<00:00, 23.86it/s]
 77%|  | 61/79 [00:03<00:00, 23.80it/s]
 81%|  | 64/79 [00:03<00:00, 23.87it/s]
 85%| | 67/79 [00:03<00:00, 24.06it/s]
 89%| | 70/79 [00:03<00:00, 24.34it/s]
 92%|| 73/79 [00:03<00:00, 24.63it/s]
 96%|| 76/79 [00:03<00:00, 25.38it/s]
100%|| 79/79 [00:04<00:00, 26.31it/s]
, 22.54it/s]
 70%|   | 55/79 [00:03<00:01, 23.00it/s]
 73%|  | 58/79 [00:03<00:00, 23.19it/s]
 77%|  | 61/79 [00:03<00:00, 23.50it/s]
 81%|  | 64/79 [00:03<00:00, 23.65it/s]
 85%| | 67/79 [00:03<00:00, 24.09it/s]
 89%| | 70/79 [00:03<00:00, 24.22it/s]
 92%|| 73/79 [00:03<00:00, 24.81it/s]
 96%|| 76/79 [00:04<00:00, 25.47it/s]
100%|| 79/79 [00:04<00:00, 26.37it/s]
2020-06-23 16:09:55,857 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.232657 (0.027089007568359375 s / img per device, on 32 devices)
2020-06-23 16:09:55,877 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:09:55,877 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:09:55,895 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592953803253, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 11, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592953803253, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 11}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:10:04,340 maskrcnn_benchmark.trainer INFO: eta: 1:05:16  iter: 9180  loss: 0.5741 (0.7568)  loss_classifier: 0.1828 (0.2773)  loss_box_reg: 0.0941 (0.1218)  loss_mask: 0.2656 (0.2994)  loss_objectness: 0.0171 (0.0375)  loss_rpn_box_reg: 0.0084 (0.0209)  time: 0.1094 (0.1271)  data: 0.0015 (0.0196)  lr: 0.016000  max mem: 5047
2020-06-23 16:10:06,526 maskrcnn_benchmark.trainer INFO: eta: 1:05:12  iter: 9200  loss: 0.6361 (0.7565)  loss_classifier: 0.2031 (0.2771)  loss_box_reg: 0.1166 (0.1217)  loss_mask: 0.2590 (0.2993)  loss_objectness: 0.0182 (0.0375)  loss_rpn_box_reg: 0.0086 (0.0209)  time: 0.1090 (0.1270)  data: 0.0014 (0.0196)  lr: 0.016000  max mem: 5047
2020-06-23 16:10:08,696 maskrcnn_benchmark.trainer INFO: eta: 1:05:09  iter: 9220  loss: 0.4741 (0.7560)  loss_classifier: 0.1402 (0.2769)  loss_box_reg: 0.0644 (0.1216)  loss_mask: 0.2270 (0.2991)  loss_objectness: 0.0134 (0.0375)  loss_rpn_box_reg: 0.0066 (0.0208)  time: 0.1086 (0.1270)  data: 0.0014 (0.0195)  lr: 0.016000  max mem: 5047
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.63s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:10:10,867 maskrcnn_benchmark.trainer INFO: eta: 1:05:05  iter: 9240  loss: 0.5774 (0.7557)  loss_classifier: 0.1973 (0.2768)  loss_box_reg: 0.0976 (0.1216)  loss_mask: 0.2519 (0.2991)  loss_objectness: 0.0131 (0.0375)  loss_rpn_box_reg: 0.0071 (0.0208)  time: 0.1082 (0.1270)  data: 0.0015 (0.0195)  lr: 0.016000  max mem: 5047
DONE (t=1.59s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35436
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.56647
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.38284
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20513
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.38465
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.46080
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30191
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.47775
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.50226
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.31763
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.53619
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62553
2020-06-23 16:10:13,027 maskrcnn_benchmark.trainer INFO: eta: 1:05:01  iter: 9260  loss: 0.5425 (0.7554)  loss_classifier: 0.1899 (0.2766)  loss_box_reg: 0.1024 (0.1216)  loss_mask: 0.2588 (0.2990)  loss_objectness: 0.0140 (0.0374)  loss_rpn_box_reg: 0.0099 (0.0208)  time: 0.1070 (0.1269)  data: 0.0014 (0.0194)  lr: 0.016000  max mem: 5047
2020-06-23 16:10:15,195 maskrcnn_benchmark.trainer INFO: eta: 1:04:57  iter: 9280  loss: 0.6107 (0.7551)  loss_classifier: 0.2046 (0.2765)  loss_box_reg: 0.0988 (0.1215)  loss_mask: 0.2546 (0.2989)  loss_objectness: 0.0193 (0.0374)  loss_rpn_box_reg: 0.0067 (0.0208)  time: 0.1082 (0.1269)  data: 0.0015 (0.0194)  lr: 0.016000  max mem: 5047
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:10:17,371 maskrcnn_benchmark.trainer INFO: eta: 1:04:54  iter: 9300  loss: 0.5067 (0.7547)  loss_classifier: 0.1530 (0.2763)  loss_box_reg: 0.0758 (0.1214)  loss_mask: 0.2378 (0.2988)  loss_objectness: 0.0109 (0.0373)  loss_rpn_box_reg: 0.0074 (0.0208)  time: 0.1086 (0.1268)  data: 0.0014 (0.0194)  lr: 0.016000  max mem: 5047
DONE (t=1.61s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:10:19,535 maskrcnn_benchmark.trainer INFO: eta: 1:04:50  iter: 9320  loss: 0.6806 (0.7545)  loss_classifier: 0.2724 (0.2762)  loss_box_reg: 0.1148 (0.1214)  loss_mask: 0.2578 (0.2987)  loss_objectness: 0.0245 (0.0373)  loss_rpn_box_reg: 0.0100 (0.0208)  time: 0.1084 (0.1268)  data: 0.0015 (0.0193)  lr: 0.016000  max mem: 5047
DONE (t=2.51s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32413
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53351
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34280
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.14673
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.35059
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48184
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28531
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.44088
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.46067
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.26704
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.49648
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60358
2020-06-23 16:10:21,100 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.35435688099285667, segm mAP: 0.32413242341191306
:::MLLOG {"namespace": "", "time_ms": 1592953821100, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.35435688099285667, "SEGM": 0.32413242341191306}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 10}}
:::MLLOG {"namespace": "", "time_ms": 1592953821100, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 10}}
2020-06-23 16:10:21,867 maskrcnn_benchmark.trainer INFO: eta: 1:04:47  iter: 9340  loss: 0.4757 (0.7540)  loss_classifier: 0.1773 (0.2760)  loss_box_reg: 0.0658 (0.1213)  loss_mask: 0.2070 (0.2985)  loss_objectness: 0.0166 (0.0373)  loss_rpn_box_reg: 0.0047 (0.0208)  time: 0.1092 (0.1268)  data: 0.0016 (0.0193)  lr: 0.016000  max mem: 5047
2020-06-23 16:10:24,040 maskrcnn_benchmark.trainer INFO: eta: 1:04:43  iter: 9360  loss: 0.5860 (0.7537)  loss_classifier: 0.2205 (0.2759)  loss_box_reg: 0.0904 (0.1213)  loss_mask: 0.2546 (0.2985)  loss_objectness: 0.0154 (0.0373)  loss_rpn_box_reg: 0.0107 (0.0208)  time: 0.1082 (0.1267)  data: 0.0014 (0.0192)  lr: 0.016000  max mem: 5047
2020-06-23 16:10:26,198 maskrcnn_benchmark.trainer INFO: eta: 1:04:39  iter: 9380  loss: 0.4665 (0.7532)  loss_classifier: 0.1467 (0.2757)  loss_box_reg: 0.0642 (0.1212)  loss_mask: 0.2306 (0.2983)  loss_objectness: 0.0091 (0.0373)  loss_rpn_box_reg: 0.0039 (0.0207)  time: 0.1069 (0.1267)  data: 0.0013 (0.0192)  lr: 0.016000  max mem: 5047
2020-06-23 16:10:28,359 maskrcnn_benchmark.trainer INFO: eta: 1:04:35  iter: 9400  loss: 0.6343 (0.7531)  loss_classifier: 0.2048 (0.2756)  loss_box_reg: 0.1074 (0.1212)  loss_mask: 0.2670 (0.2983)  loss_objectness: 0.0200 (0.0373)  loss_rpn_box_reg: 0.0125 (0.0208)  time: 0.1077 (0.1267)  data: 0.0015 (0.0192)  lr: 0.016000  max mem: 5047
2020-06-23 16:10:30,541 maskrcnn_benchmark.trainer INFO: eta: 1:04:32  iter: 9420  loss: 0.5359 (0.7527)  loss_classifier: 0.2120 (0.2754)  loss_box_reg: 0.0911 (0.1211)  loss_mask: 0.2425 (0.2982)  loss_objectness: 0.0125 (0.0372)  loss_rpn_box_reg: 0.0078 (0.0207)  time: 0.1092 (0.1266)  data: 0.0015 (0.0191)  lr: 0.016000  max mem: 5047
2020-06-23 16:10:32,706 maskrcnn_benchmark.trainer INFO: eta: 1:04:28  iter: 9440  loss: 0.6753 (0.7526)  loss_classifier: 0.2134 (0.2753)  loss_box_reg: 0.1135 (0.1211)  loss_mask: 0.2660 (0.2981)  loss_objectness: 0.0207 (0.0372)  loss_rpn_box_reg: 0.0085 (0.0208)  time: 0.1081 (0.1266)  data: 0.0014 (0.0191)  lr: 0.016000  max mem: 5047

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0


Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0
Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0


Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0
Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9449
Using dynamic loss scale of  65536.0
2020-06-23 16:10:34,875 maskrcnn_benchmark.trainer INFO: eta: 1:04:24  iter: 9460  loss: 0.6200 (0.7523)  loss_classifier: 0.2071 (0.2752)  loss_box_reg: 0.0950 (0.1211)  loss_mask: 0.2476 (0.2980)  loss_objectness: 0.0207 (0.0372)  loss_rpn_box_reg: 0.0149 (0.0208)  time: 0.1086 (0.1265)  data: 0.0015 (0.0191)  lr: 0.016000  max mem: 5047
2020-06-23 16:10:37,043 maskrcnn_benchmark.trainer INFO: eta: 1:04:21  iter: 9480  loss: 0.5197 (0.7518)  loss_classifier: 0.1583 (0.2750)  loss_box_reg: 0.0786 (0.1210)  loss_mask: 0.2461 (0.2979)  loss_objectness: 0.0159 (0.0372)  loss_rpn_box_reg: 0.0037 (0.0207)  time: 0.1084 (0.1265)  data: 0.0014 (0.0190)  lr: 0.016000  max mem: 5047
2020-06-23 16:10:39,217 maskrcnn_benchmark.trainer INFO: eta: 1:04:17  iter: 9500  loss: 0.6707 (0.7516)  loss_classifier: 0.2278 (0.2749)  loss_box_reg: 0.1278 (0.1210)  loss_mask: 0.2622 (0.2979)  loss_objectness: 0.0203 (0.0372)  loss_rpn_box_reg: 0.0087 (0.0207)  time: 0.1084 (0.1265)  data: 0.0014 (0.0190)  lr: 0.016000  max mem: 5047
2020-06-23 16:10:41,385 maskrcnn_benchmark.trainer INFO: eta: 1:04:13  iter: 9520  loss: 0.5551 (0.7511)  loss_classifier: 0.1786 (0.2747)  loss_box_reg: 0.0788 (0.1209)  loss_mask: 0.2265 (0.2977)  loss_objectness: 0.0138 (0.0371)  loss_rpn_box_reg: 0.0069 (0.0207)  time: 0.1082 (0.1264)  data: 0.0014 (0.0189)  lr: 0.016000  max mem: 5047
2020-06-23 16:10:43,546 maskrcnn_benchmark.trainer INFO: eta: 1:04:10  iter: 9540  loss: 0.6353 (0.7509)  loss_classifier: 0.2097 (0.2746)  loss_box_reg: 0.0923 (0.1208)  loss_mask: 0.2402 (0.2976)  loss_objectness: 0.0212 (0.0371)  loss_rpn_box_reg: 0.0163 (0.0207)  time: 0.1083 (0.1264)  data: 0.0014 (0.0189)  lr: 0.016000  max mem: 5065
2020-06-23 16:10:45,728 maskrcnn_benchmark.trainer INFO: eta: 1:04:06  iter: 9560  loss: 0.5759 (0.7505)  loss_classifier: 0.1811 (0.2744)  loss_box_reg: 0.0971 (0.1208)  loss_mask: 0.2482 (0.2975)  loss_objectness: 0.0177 (0.0371)  loss_rpn_box_reg: 0.0069 (0.0207)  time: 0.1091 (0.1264)  data: 0.0014 (0.0189)  lr: 0.016000  max mem: 5065
2020-06-23 16:10:47,893 maskrcnn_benchmark.trainer INFO: eta: 1:04:02  iter: 9580  loss: 0.6425 (0.7502)  loss_classifier: 0.2111 (0.2743)  loss_box_reg: 0.0937 (0.1208)  loss_mask: 0.2525 (0.2974)  loss_objectness: 0.0136 (0.0371)  loss_rpn_box_reg: 0.0098 (0.0207)  time: 0.1079 (0.1263)  data: 0.0015 (0.0188)  lr: 0.016000  max mem: 5065
2020-06-23 16:10:50,065 maskrcnn_benchmark.trainer INFO: eta: 1:03:59  iter: 9600  loss: 0.5229 (0.7498)  loss_classifier: 0.1426 (0.2741)  loss_box_reg: 0.0961 (0.1207)  loss_mask: 0.2362 (0.2973)  loss_objectness: 0.0134 (0.0370)  loss_rpn_box_reg: 0.0080 (0.0207)  time: 0.1083 (0.1263)  data: 0.0014 (0.0188)  lr: 0.016000  max mem: 5065
2020-06-23 16:10:52,247 maskrcnn_benchmark.trainer INFO: eta: 1:03:55  iter: 9620  loss: 0.5473 (0.7495)  loss_classifier: 0.2059 (0.2739)  loss_box_reg: 0.0861 (0.1206)  loss_mask: 0.2562 (0.2973)  loss_objectness: 0.0143 (0.0370)  loss_rpn_box_reg: 0.0082 (0.0207)  time: 0.1086 (0.1263)  data: 0.0014 (0.0188)  lr: 0.016000  max mem: 5098
2020-06-23 16:10:54,426 maskrcnn_benchmark.trainer INFO: eta: 1:03:51  iter: 9640  loss: 0.5454 (0.7491)  loss_classifier: 0.1850 (0.2738)  loss_box_reg: 0.0813 (0.1206)  loss_mask: 0.2372 (0.2971)  loss_objectness: 0.0149 (0.0370)  loss_rpn_box_reg: 0.0087 (0.0207)  time: 0.1089 (0.1262)  data: 0.0014 (0.0187)  lr: 0.016000  max mem: 5098
2020-06-23 16:10:56,574 maskrcnn_benchmark.trainer INFO: eta: 1:03:48  iter: 9660  loss: 0.5624 (0.7488)  loss_classifier: 0.1816 (0.2736)  loss_box_reg: 0.0828 (0.1205)  loss_mask: 0.2575 (0.2971)  loss_objectness: 0.0135 (0.0369)  loss_rpn_box_reg: 0.0065 (0.0207)  time: 0.1072 (0.1262)  data: 0.0014 (0.0187)  lr: 0.016000  max mem: 5098
2020-06-23 16:10:58,746 maskrcnn_benchmark.trainer INFO: eta: 1:03:44  iter: 9680  loss: 0.4664 (0.7483)  loss_classifier: 0.1403 (0.2734)  loss_box_reg: 0.0760 (0.1205)  loss_mask: 0.2406 (0.2969)  loss_objectness: 0.0109 (0.0369)  loss_rpn_box_reg: 0.0064 (0.0206)  time: 0.1084 (0.1261)  data: 0.0013 (0.0187)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:00,925 maskrcnn_benchmark.trainer INFO: eta: 1:03:40  iter: 9700  loss: 0.5350 (0.7479)  loss_classifier: 0.1658 (0.2732)  loss_box_reg: 0.0823 (0.1204)  loss_mask: 0.2473 (0.2968)  loss_objectness: 0.0125 (0.0368)  loss_rpn_box_reg: 0.0071 (0.0206)  time: 0.1079 (0.1261)  data: 0.0014 (0.0186)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:03,074 maskrcnn_benchmark.trainer INFO: eta: 1:03:37  iter: 9720  loss: 0.6042 (0.7476)  loss_classifier: 0.2013 (0.2731)  loss_box_reg: 0.0951 (0.1204)  loss_mask: 0.2589 (0.2967)  loss_objectness: 0.0168 (0.0368)  loss_rpn_box_reg: 0.0096 (0.0206)  time: 0.1078 (0.1261)  data: 0.0015 (0.0186)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:05,240 maskrcnn_benchmark.trainer INFO: eta: 1:03:33  iter: 9740  loss: 0.6535 (0.7474)  loss_classifier: 0.2536 (0.2730)  loss_box_reg: 0.1121 (0.1204)  loss_mask: 0.2610 (0.2967)  loss_objectness: 0.0173 (0.0368)  loss_rpn_box_reg: 0.0090 (0.0206)  time: 0.1081 (0.1260)  data: 0.0015 (0.0186)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:07,409 maskrcnn_benchmark.trainer INFO: eta: 1:03:30  iter: 9760  loss: 0.5663 (0.7470)  loss_classifier: 0.1634 (0.2728)  loss_box_reg: 0.0911 (0.1203)  loss_mask: 0.2360 (0.2966)  loss_objectness: 0.0095 (0.0368)  loss_rpn_box_reg: 0.0079 (0.0206)  time: 0.1083 (0.1260)  data: 0.0014 (0.0185)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:09,573 maskrcnn_benchmark.trainer INFO: eta: 1:03:26  iter: 9780  loss: 0.6309 (0.7467)  loss_classifier: 0.1834 (0.2727)  loss_box_reg: 0.0899 (0.1202)  loss_mask: 0.2454 (0.2964)  loss_objectness: 0.0190 (0.0368)  loss_rpn_box_reg: 0.0098 (0.0206)  time: 0.1078 (0.1260)  data: 0.0014 (0.0185)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:11,745 maskrcnn_benchmark.trainer INFO: eta: 1:03:22  iter: 9800  loss: 0.4940 (0.7464)  loss_classifier: 0.1986 (0.2725)  loss_box_reg: 0.0925 (0.1202)  loss_mask: 0.2448 (0.2964)  loss_objectness: 0.0118 (0.0368)  loss_rpn_box_reg: 0.0046 (0.0206)  time: 0.1080 (0.1259)  data: 0.0014 (0.0184)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:13,920 maskrcnn_benchmark.trainer INFO: eta: 1:03:19  iter: 9820  loss: 0.6326 (0.7461)  loss_classifier: 0.2257 (0.2724)  loss_box_reg: 0.1119 (0.1202)  loss_mask: 0.2740 (0.2963)  loss_objectness: 0.0133 (0.0367)  loss_rpn_box_reg: 0.0061 (0.0205)  time: 0.1085 (0.1259)  data: 0.0014 (0.0184)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:16,074 maskrcnn_benchmark.trainer INFO: eta: 1:03:15  iter: 9840  loss: 0.5231 (0.7458)  loss_classifier: 0.1930 (0.2722)  loss_box_reg: 0.0911 (0.1201)  loss_mask: 0.2357 (0.2962)  loss_objectness: 0.0129 (0.0367)  loss_rpn_box_reg: 0.0095 (0.0205)  time: 0.1068 (0.1258)  data: 0.0014 (0.0184)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:18,237 maskrcnn_benchmark.trainer INFO: eta: 1:03:12  iter: 9860  loss: 0.5551 (0.7454)  loss_classifier: 0.1961 (0.2721)  loss_box_reg: 0.0937 (0.1201)  loss_mask: 0.2450 (0.2961)  loss_objectness: 0.0168 (0.0367)  loss_rpn_box_reg: 0.0116 (0.0205)  time: 0.1078 (0.1258)  data: 0.0014 (0.0183)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:20,417 maskrcnn_benchmark.trainer INFO: eta: 1:03:08  iter: 9880  loss: 0.5878 (0.7450)  loss_classifier: 0.1865 (0.2719)  loss_box_reg: 0.1004 (0.1200)  loss_mask: 0.2454 (0.2960)  loss_objectness: 0.0143 (0.0366)  loss_rpn_box_reg: 0.0059 (0.0205)  time: 0.1084 (0.1258)  data: 0.0014 (0.0183)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:22,581 maskrcnn_benchmark.trainer INFO: eta: 1:03:04  iter: 9900  loss: 0.5749 (0.7448)  loss_classifier: 0.2175 (0.2718)  loss_box_reg: 0.0979 (0.1200)  loss_mask: 0.2402 (0.2959)  loss_objectness: 0.0143 (0.0366)  loss_rpn_box_reg: 0.0055 (0.0205)  time: 0.1076 (0.1257)  data: 0.0015 (0.0183)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:24,734 maskrcnn_benchmark.trainer INFO: eta: 1:03:01  iter: 9920  loss: 0.5263 (0.7444)  loss_classifier: 0.1799 (0.2716)  loss_box_reg: 0.1004 (0.1199)  loss_mask: 0.2318 (0.2958)  loss_objectness: 0.0162 (0.0366)  loss_rpn_box_reg: 0.0065 (0.0205)  time: 0.1073 (0.1257)  data: 0.0014 (0.0182)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:26,902 maskrcnn_benchmark.trainer INFO: eta: 1:02:57  iter: 9940  loss: 0.5087 (0.7442)  loss_classifier: 0.1885 (0.2715)  loss_box_reg: 0.0842 (0.1199)  loss_mask: 0.2380 (0.2957)  loss_objectness: 0.0124 (0.0366)  loss_rpn_box_reg: 0.0046 (0.0205)  time: 0.1085 (0.1257)  data: 0.0014 (0.0182)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:29,090 maskrcnn_benchmark.trainer INFO: eta: 1:02:54  iter: 9960  loss: 0.5491 (0.7438)  loss_classifier: 0.1958 (0.2714)  loss_box_reg: 0.0931 (0.1199)  loss_mask: 0.2380 (0.2956)  loss_objectness: 0.0120 (0.0365)  loss_rpn_box_reg: 0.0069 (0.0205)  time: 0.1093 (0.1256)  data: 0.0014 (0.0182)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:31,255 maskrcnn_benchmark.trainer INFO: eta: 1:02:50  iter: 9980  loss: 0.4261 (0.7434)  loss_classifier: 0.1367 (0.2712)  loss_box_reg: 0.0543 (0.1198)  loss_mask: 0.2218 (0.2955)  loss_objectness: 0.0154 (0.0365)  loss_rpn_box_reg: 0.0068 (0.0205)  time: 0.1078 (0.1256)  data: 0.0015 (0.0181)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:33,427 maskrcnn_benchmark.trainer INFO: eta: 1:02:47  iter: 10000  loss: 0.5333 (0.7430)  loss_classifier: 0.1734 (0.2710)  loss_box_reg: 0.0801 (0.1198)  loss_mask: 0.2426 (0.2954)  loss_objectness: 0.0116 (0.0365)  loss_rpn_box_reg: 0.0079 (0.0205)  time: 0.1078 (0.1256)  data: 0.0015 (0.0181)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:35,604 maskrcnn_benchmark.trainer INFO: eta: 1:02:43  iter: 10020  loss: 0.5395 (0.7427)  loss_classifier: 0.1887 (0.2708)  loss_box_reg: 0.0842 (0.1197)  loss_mask: 0.2345 (0.2953)  loss_objectness: 0.0151 (0.0364)  loss_rpn_box_reg: 0.0050 (0.0204)  time: 0.1087 (0.1255)  data: 0.0014 (0.0181)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:37,759 maskrcnn_benchmark.trainer INFO: eta: 1:02:40  iter: 10040  loss: 0.5789 (0.7423)  loss_classifier: 0.1982 (0.2707)  loss_box_reg: 0.0986 (0.1196)  loss_mask: 0.2467 (0.2951)  loss_objectness: 0.0134 (0.0364)  loss_rpn_box_reg: 0.0080 (0.0204)  time: 0.1073 (0.1255)  data: 0.0015 (0.0180)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:39,922 maskrcnn_benchmark.trainer INFO: eta: 1:02:36  iter: 10060  loss: 0.5648 (0.7420)  loss_classifier: 0.1683 (0.2705)  loss_box_reg: 0.0857 (0.1196)  loss_mask: 0.2560 (0.2951)  loss_objectness: 0.0135 (0.0364)  loss_rpn_box_reg: 0.0091 (0.0204)  time: 0.1079 (0.1255)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:42,093 maskrcnn_benchmark.trainer INFO: eta: 1:02:33  iter: 10080  loss: 0.6043 (0.7418)  loss_classifier: 0.1970 (0.2704)  loss_box_reg: 0.0917 (0.1196)  loss_mask: 0.2606 (0.2950)  loss_objectness: 0.0113 (0.0363)  loss_rpn_box_reg: 0.0080 (0.0204)  time: 0.1079 (0.1254)  data: 0.0015 (0.0180)  lr: 0.016000  max mem: 5098
:::MLLOG {"namespace": "", "time_ms": 1592953902846, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1592953902846, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1592953902847, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 11}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
2020-06-23 16:11:43,062 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.26s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
index created!
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.26s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
2020-06-23 16:11:43,365 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:53,  1.45s/it]
  4%|         | 3/79 [00:01<01:19,  1.04s/it]
  8%|         | 6/79 [00:01<00:54,  1.35it/s]
 11%|        | 9/79 [00:01<00:37,  1.88it/s]
 15%|        | 12/79 [00:01<00:25,  2.61it/s]
 19%|        | 15/79 [00:02<00:17,  3.56it/s]
 23%|       | 18/79 [00:02<00:12,  4.81it/s]
 27%|       | 21/79 [00:02<00:09,  6.38it/s]
 30%|       | 24/79 [00:02<00:06,  8.21it/s]
 34%|      | 27/79 [00:02<00:05, 10.31it/s]
 38%|      | 30/79 [00:02<00:03, 12.55it/s]
 42%|     | 33/79 [00:02<00:03, 14.94it/s]
 46%|     | 36/79 [00:02<00:02, 16.98it/s]
 49%|     | 39/79 [00:03<00:02, 18.77it/s]
 53%|    | 42/79 [00:03<00:01, 20.22it/s]
 57%|    | 45/79 [00:03<00:01, 21.48it/s]
 61%|    | 48/79 [00:03<00:01, 22.54it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:58,  1.51s/it]
  5%|         | 4/79 [00:01<01:20,  1.07s/it]
  9%|         | 7/79 [00:01<00:54,  1.31it/s]
 13%|        | 10/79 [00:01<00:37,  1.83it/s]
 16%|        | 13/79 [00:02<00:25,  2.54it/s]
 20%|        | 16/79 [00:02<00:18,  3.48it/s]
 24%|       | 19/79 [00:02<00:12,  4.69it/s]
 28%|       | 22/79 [00:02<00:09,  6.21it/s]
 32%|      | 25/79 [00:02<00:06,  8.04it/s]
 35%|      | 28/79 [00:02<00:05, 10.09it/s]
 39%|      | 31/79 [00:02<00:03, 12.28it/s]
 43%|     | 34/79 [00:02<00:03, 14.49it/s]
 47%|     | 37/79 [00:02<00:02, 16.60it/s]
 51%|     | 40/79 [00:03<00:02, 18.49it/s]
 54%|    | 43/79 [00:03<00:01, 20.03it/s]
 58%|    | 46/79 [00:03<00:01, 21.13it/s]
 62%|   | 49/79 [00:03<00:01, 22.20it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:09,  1.66s/it]
  4%|         | 3/79 [00:01<01:29,  1.17s/it]
  8%|         | 6/79 [00:01<01:00,  1.20it/s]
 11%|        | 9/79 [00:01<00:41,  1.68it/s]
 15%|        | 12/79 [00:02<00:28,  2.33it/s]
 19%|        | 15/79 [00:02<00:19,  3.21it/s]
 23%|       | 18/79 [00:02<00:13,  4.36it/s]
 27%|       | 21/79 [00:02<00:10,  5.79it/s]
 30%|       | 24/79 [00:02<00:07,  7.57it/s]
 34%|      | 27/79 [00:02<00:05,  9.61it/s]
 38%|      | 30/79 [00:02<00:04, 11.90it/s]
 42%|     | 33/79 [00:02<00:03, 14.25it/s]
 46%|     | 36/79 [00:03<00:02, 16.47it/s]
 49%|     | 39/79 [00:03<00:02, 18.47it/s]
 53%|    | 42/79 [00:03<00:01, 20.11it/s]
 57%|    | 45/79 [00:03<00:01, 21.46it/s]
 61%|    | 48/79 [00:03<00:01, 22.31it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:03,  1.59s/it]
  3%|         | 2/79 [00:01<01:29,  1.16s/it]
  6%|         | 5/79 [00:01<01:01,  1.21it/s]
 10%|         | 8/79 [00:02<00:41,  1.69it/s]
 14%|        | 11/79 [00:02<00:28,  2.35it/s]
 18%|        | 14/79 [00:02<00:20,  3.23it/s]
 22%|       | 17/79 [00:02<00:14,  4.37it/s]
 25%|       | 20/79 [00:02<00:10,  5.83it/s]
 29%|       | 23/79 [00:02<00:07,  7.61it/s]
 33%|      | 26/79 [00:02<00:05,  9.69it/s]
 37%|      | 29/79 [00:02<00:04, 11.89it/s]
 41%|      | 32/79 [00:02<00:03, 14.19it/s]
 44%|     | 35/79 [00:03<00:02, 16.48it/s]
 48%|     | 38/79 [00:03<00:02, 18.60it/s]
 52%|    | 41/79 [00:03<00:01, 20.39it/s]
 56%|    | 44/79 [00:03<00:01, 21.99it/s]
 59%|    | 47/79 [00:03<00:01, 23.01it/s]
 63%|   | 50/79 [00:03<00:01, 23.87it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:10,  1.68s/it]
  5%|         | 4/79 [00:01<01:28,  1.19s/it]
  9%|         | 7/79 [00:01<01:00,  1.19it/s]
 13%|        | 10/79 [00:02<00:41,  1.66it/s]
 16%|        | 13/79 [00:02<00:28,  2.31it/s]
 20%|        | 16/79 [00:02<00:19,  3.19it/s]
 24%|       | 19/79 [00:02<00:13,  4.33it/s]
 28%|       | 22/79 [00:02<00:09,  5.77it/s]
 32%|      | 25/79 [00:02<00:07,  7.54it/s]
 35%|      | 28/79 [00:02<00:05,  9.64it/s]
 39%|      | 31/79 [00:02<00:04, 11.86it/s]
 43%|     | 34/79 [00:02<00:03, 14.26it/s]
 47%|     | 37/79 [00:03<00:02, 16.50it/s]
 51%|     | 40/79 [00:03<00:02, 18.68it/s]
 54%|    | 43/79 [00:03<00:01, 20.56it/s]
 58%|    | 46/79 [00:03<00:01, 22.11it/s]
 62%|   | 49/79 [00:03<00:01, 23.27it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:11,  1.69s/it]
  5%|         | 4/79 [00:01<01:29,  1.19s/it]
  9%|         | 7/79 [00:01<01:00,  1.18it/s]
 13%|        | 10/79 [00:02<00:41,  1.66it/s]
 16%|        | 13/79 [00:02<00:28,  2.31it/s]
 20%|        | 16/79 [00:02<00:19,  3.17it/s]
 24%|       | 19/79 [00:02<00:13,  4.30it/s]
 28%|       | 22/79 [00:02<00:09,  5.75it/s]
 32%|      | 25/79 [00:02<00:07,  7.50it/s]
 35%|      | 28/79 [00:02<00:05,  9.53it/s]
 39%|      | 31/79 [00:02<00:04, 11.76it/s]
 43%|     | 34/79 [00:02<00:03, 14.14it/s]
 47%|     | 37/79 [00:03<00:02, 16.45it/s]
 51%|     | 40/79 [00:03<00:02, 18.43it/s]
 54%|    | 43/79 [00:03<00:01, 20.25it/s]
 58%|    | 46/79 [00:03<00:01, 21.70it/s]
 62%|   | 49/79 [00:03<00:01, 22.99it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:11,  1.68s/it]
  5%|         | 4/79 [00:01<01:29,  1.19s/it]
  9%|         | 7/79 [00:01<01:00,  1.18it/s]
 13%|        | 10/79 [00:02<00:41,  1.66it/s]
 16%|        | 13/79 [00:02<00:28,  2.31it/s]
 20%|        | 16/79 [00:02<00:19,  3.18it/s]
 24%|       | 19/79 [00:02<00:13,  4.31it/s]
 28%|       | 22/79 [00:02<00:09,  5.75it/s]
 32%|      | 25/79 [00:02<00:07,  7.49it/s]
 35%|      | 28/79 [00:02<00:05,  9.54it/s]
 39%|      | 31/79 [00:02<00:04, 11.81it/s]
 43%|     | 34/79 [00:02<00:03, 14.19it/s]
 47%|     | 37/79 [00:03<00:02, 16.38it/s]
 51%|     | 40/79 [00:03<00:02, 18.60it/s]
 54%|    | 43/79 [00:03<00:01, 20.25it/s]
 58%|    | 46/79 [00:03<00:01, 21.77it/s]
 62%|   | 49/79 [00:03<00:01, 22.78it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:54,  1.47s/it]
  3%|         | 2/79 [00:01<01:24,  1.09s/it]
  6%|         | 5/79 [00:01<00:57,  1.28it/s]
 10%|         | 8/79 [00:01<00:39,  1.79it/s]
 14%|        | 11/79 [00:02<00:27,  2.49it/s]
 18%|        | 14/79 [00:02<00:19,  3.41it/s]
 22%|       | 17/79 [00:02<00:13,  4.61it/s]
 25%|       | 20/79 [00:02<00:09,  6.09it/s]
 29%|       | 23/79 [00:02<00:07,  7.86it/s]
 33%|      | 26/79 [00:02<00:05,  9.80it/s]
 37%|      | 29/79 [00:02<00:04, 11.91it/s]
 41%|      | 32/79 [00:02<00:03, 14.07it/s]
 44%|     | 35/79 [00:03<00:02, 16.18it/s]
 48%|     | 38/79 [00:03<00:02, 18.17it/s]
 52%|    | 41/79 [00:03<00:01, 19.79it/s]
 56%|    | 44/79 [00:03<00:01, 21.04it/s]
 59%|    | 47/79 [00:03<00:01, 22.07it/s]
 63%|   | 50/79 [00:03<00:01, 22.55it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:08,  1.65s/it]
  5%|         | 4/79 [00:01<01:27,  1.17s/it]
  9%|         | 7/79 [00:01<00:59,  1.20it/s]
 13%|        | 10/79 [00:02<00:40,  1.69it/s]
 16%|        | 13/79 [00:02<00:28,  2.34it/s]
 20%|        | 16/79 [00:02<00:19,  3.22it/s]
 24%|       | 19/79 [00:02<00:13,  4.38it/s]
 28%|       | 22/79 [00:02<00:09,  5.83it/s]
 32%|      | 25/79 [00:02<00:07,  7.60it/s]
 35%|      | 28/79 [00:02<00:05,  9.65it/s]
 39%|      | 31/79 [00:02<00:04, 11.87it/s]
 43%|     | 34/79 [00:02<00:03, 14.10it/s]
 47%|     | 37/79 [00:03<00:02, 16.34it/s]
 51%|     | 40/79 [00:03<00:02, 18.25it/s]
 54%|    | 43/79 [00:03<00:01, 19.92it/s]
 58%|    | 46/79 [00:03<00:01, 21.31it/s]
 62%|   | 49/79 [00:03<00:01, 22.53it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:06,  1.62s/it]
  5%|         | 4/79 [00:01<01:25,  1.15s/it]
  9%|         | 7/79 [00:01<00:58,  1.23it/s]
 13%|        | 10/79 [00:01<00:40,  1.72it/s]
 16%|        | 13/79 [00:02<00:27,  2.39it/s]
 20%|        | 16/79 [00:02<00:19,  3.28it/s]
 24%|       | 19/79 [00:02<00:13,  4.44it/s]
 28%|       | 22/79 [00:02<00:09,  5.91it/s]
 32%|      | 25/79 [00:02<00:07,  7.70it/s]
 35%|      | 28/79 [00:02<00:05,  9.71it/s]
 39%|      | 31/79 [00:02<00:04, 11.97it/s]
 43%|     | 34/79 [00:02<00:03, 14.24it/s]
 47%|     | 37/79 [00:03<00:02, 16.53it/s]
 51%|     | 40/79 [00:03<00:02, 18.36it/s]
 54%|    | 43/79 [00:03<00:01, 19.89it/s]
 58%|    | 46/79 [00:03<00:01, 21.32it/s]
 62%|   | 49/79 [00:03<00:01, 22.41it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:05,  1.61s/it]
  5%|         | 4/79 [00:01<01:25,  1.14s/it]
  9%|         | 7/79 [00:01<00:58,  1.23it/s]
 13%|        | 10/79 [00:01<00:39,  1.73it/s]
 16%|        | 13/79 [00:02<00:27,  2.40it/s]
 20%|        | 16/79 [00:02<00:19,  3.29it/s]
 24%|       | 19/79 [00:02<00:13,  4.45it/s]
 28%|       | 22/79 [00:02<00:09,  5.90it/s]
 32%|      | 25/79 [00:02<00:07,  7.67it/s]
 35%|      | 28/79 [00:02<00:05,  9.73it/s]
 39%|      | 31/79 [00:02<00:04, 11.94it/s]
 43%|     | 34/79 [00:02<00:03, 14.07it/s]
 47%|     | 37/79 [00:03<00:02, 16.34it/s]
 51%|     | 40/79 [00:03<00:02, 18.25it/s]
 54%|    | 43/79 [00:03<00:01, 19.82it/s]
 58%|    | 46/79 [00:03<00:01, 21.27it/s]
 62%|   | 49/79 [00:03<00:01, 22.14it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:08,  1.64s/it]
  5%|         | 4/79 [00:01<01:27,  1.16s/it]
  9%|         | 7/79 [00:01<00:59,  1.21it/s]
 13%|        | 10/79 [00:02<00:40,  1.70it/s]
 16%|        | 13/79 [00:02<00:28,  2.35it/s]
 20%|        | 16/79 [00:02<00:19,  3.24it/s]
 24%|       | 19/79 [00:02<00:13,  4.38it/s]
 28%|       | 22/79 [00:02<00:09,  5.84it/s]
 32%|      | 25/79 [00:02<00:07,  7.61it/s]
 35%|      | 28/79 [00:02<00:05,  9.70it/s]
 39%|      | 31/79 [00:02<00:04, 11.89it/s]
 43%|     | 34/79 [00:02<00:03, 14.11it/s]
 47%|     | 37/79 [00:03<00:02, 16.34it/s]
 51%|     | 40/79 [00:03<00:02, 18.42it/s]
 54%|    | 43/79 [00:03<00:01, 20.18it/s]
 58%|    | 46/79 [00:03<00:01, 21.51it/s]
 62%|   | 49/79 [00:03<00:01, 22.49it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:10,  1.68s/it]
  5%|         | 4/79 [00:01<01:29,  1.19s/it]
  9%|         | 7/79 [00:01<01:00,  1.19it/s]
 13%|        | 10/79 [00:02<00:41,  1.66it/s]
 16%|        | 13/79 [00:02<00:28,  2.31it/s]
 20%|        | 16/79 [00:02<00:19,  3.17it/s]
 24%|       | 19/79 [00:02<00:13,  4.30it/s]
 28%|       | 22/79 [00:02<00:09,  5.74it/s]
 32%|      | 25/79 [00:02<00:07,  7.49it/s]
 35%|      | 28/79 [00:02<00:05,  9.56it/s]
 39%|      | 31/79 [00:02<00:04, 11.85it/s]
 43%|     | 34/79 [00:02<00:03, 14.14it/s]
 47%|     | 37/79 [00:03<00:02, 16.50it/s]
 51%|     | 40/79 [00:03<00:02, 18.61it/s]
 54%|    | 43/79 [00:03<00:01, 20.28it/s]
 58%|    | 46/79 [00:03<00:01, 21.45it/s]
 62%|   | 49/79 [00:03<00:01, 22.78it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:09,  1.66s/it]
  5%|         | 4/79 [00:01<01:28,  1.18s/it]
  9%|         | 7/79 [00:01<01:00,  1.20it/s]
 13%|        | 10/79 [00:02<00:41,  1.67it/s]
 16%|        | 13/79 [00:02<00:28,  2.33it/s]
 20%|        | 16/79 [00:02<00:19,  3.20it/s]
 24%|       | 19/79 [00:02<00:13,  4.33it/s]
 28%|       | 22/79 [00:02<00:09,  5.76it/s]
 32%|      | 25/79 [00:02<00:07,  7.53it/s]
 35%|      | 28/79 [00:02<00:05,  9.56it/s]
 39%|      | 31/79 [00:02<00:04, 11.75it/s]
 43%|     | 34/79 [00:02<00:03, 14.02it/s]
 47%|     | 37/79 [00:03<00:02, 16.22it/s]
 51%|     | 40/79 [00:03<00:02, 18.25it/s]
 54%|    | 43/79 [00:03<00:01, 19.95it/s]
 58%|    | 46/79 [00:03<00:01, 21.42it/s]
 62%|   | 49/79 [00:03<00:01, 22.72it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:08,  1.64s/it]
  3%|         | 2/79 [00:01<01:31,  1.18s/it]
  6%|         | 5/79 [00:01<01:02,  1.19it/s]
 10%|         | 8/79 [00:01<00:42,  1.67it/s]
 14%|        | 11/79 [00:02<00:29,  2.31it/s]
 18%|        | 14/79 [00:02<00:20,  3.18it/s]
 22%|       | 17/79 [00:02<00:14,  4.31it/s]
 25%|       | 20/79 [00:02<00:10,  5.73it/s]
 29%|       | 23/79 [00:02<00:07,  7.44it/s]
 33%|      | 26/79 [00:02<00:05,  9.49it/s]
 37%|      | 29/79 [00:02<00:04, 11.71it/s]
 41%|      | 32/79 [00:02<00:03, 13.94it/s]
 44%|     | 35/79 [00:03<00:02, 16.17it/s]
 48%|     | 38/79 [00:03<00:02, 18.28it/s]
 52%|    | 41/79 [00:03<00:01, 19.96it/s]
 56%|    | 44/79 [00:03<00:01, 21.24it/s]
 59%|    | 47/79 [00:03<00:01, 22.18it/s]
 63%|   | 50/79 [00:03<00:01, 23.03it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:12,  1.70s/it]
  5%|         | 4/79 [00:01<01:29,  1.20s/it]
  9%|         | 7/79 [00:01<01:01,  1.17it/s]
 13%|        | 10/79 [00:02<00:41,  1.65it/s]
 16%|        | 13/79 [00:02<00:28,  2.29it/s]
 20%|        | 16/79 [00:02<00:20,  3.15it/s]
 24%|       | 19/79 [00:02<00:14,  4.28it/s]
 28%|       | 22/79 [00:02<00:09,  5.71it/s]
 32%|      | 25/79 [00:02<00:07,  7.45it/s]
 35%|      | 28/79 [00:02<00:05,  9.49it/s]
 39%|      | 31/79 [00:02<00:04, 11.76it/s]
 43%|     | 34/79 [00:02<00:03, 14.05it/s]
 47%|     | 37/79 [00:03<00:02, 16.34it/s]
 51%|     | 40/79 [00:03<00:02, 18.27it/s]
 54%|    | 43/79 [00:03<00:01, 20.05it/s]
 58%|    | 46/79 [00:03<00:01, 21.43it/s]
 62%|   | 49/79 [00:03<00:01, 22.56it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:12,  1.70s/it]
  5%|         | 4/79 [00:01<01:30,  1.20s/it]
  9%|         | 7/79 [00:01<01:01,  1.17it/s]
 13%|        | 10/79 [00:02<00:42,  1.64it/s]
 16%|        | 13/79 [00:02<00:28,  2.28it/s]
 20%|        | 16/79 [00:02<00:20,  3.14it/s]
 24%|       | 19/79 [00:02<00:14,  4.26it/s]
 28%|       | 22/79 [00:02<00:10,  5.69it/s]
 32%|      | 25/79 [00:02<00:07,  7.42it/s]
 35%|      | 28/79 [00:02<00:05,  9.45it/s]
 39%|      | 31/79 [00:02<00:04, 11.66it/s]
 43%|     | 34/79 [00:02<00:03, 13.98it/s]
 47%|     | 37/79 [00:03<00:02, 16.12it/s]
 51%|     | 40/79 [00:03<00:02, 18.12it/s]
 54%|    | 43/79 [00:03<00:01, 20.09it/s]
 58%|    | 46/79 [00:03<00:01, 21.37it/s]
 62%|   | 49/79 [00:03<00:01, 22.18it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:09,  1.66s/it]
  5%|         | 4/79 [00:01<01:28,  1.18s/it]
  9%|         | 7/79 [00:01<01:00,  1.20it/s]
 13%|        | 10/79 [00:02<00:41,  1.68it/s]
 16%|        | 13/79 [00:02<00:28,  2.33it/s]
 20%|        | 16/79 [00:02<00:19,  3.20it/s]
 24%|       | 19/79 [00:02<00:13,  4.35it/s]
 28%|       | 22/79 [00:02<00:09,  5.80it/s]
 32%|      | 25/79 [00:02<00:07,  7.56it/s]
 35%|      | 28/79 [00:02<00:05,  9.61it/s]
 39%|      | 31/79 [00:02<00:04, 11.78it/s]
 43%|     | 34/79 [00:02<00:03, 13.92it/s]
 47%|     | 37/79 [00:03<00:02, 16.05it/s]
 51%|     | 40/79 [00:03<00:02, 17.98it/s]
 54%|    | 43/79 [00:03<00:01, 19.53it/s]
 58%|    | 46/79 [00:03<00:01, 21.03it/s]
 62%|   | 49/79 [00:03<00:01, 22.17it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:11,  1.68s/it]
  5%|         | 4/79 [00:01<01:29,  1.19s/it]
  9%|         | 7/79 [00:01<01:00,  1.18it/s]
 13%|        | 10/79 [00:02<00:41,  1.66it/s]
 16%|        | 13/79 [00:02<00:28,  2.31it/s]
 20%|        | 16/79 [00:02<00:19,  3.18it/s]
 24%|       | 19/79 [00:02<00:13,  4.31it/s]
 28%|       | 22/79 [00:02<00:09,  5.72it/s]
 32%|      | 25/79 [00:02<00:07,  7.44it/s]
 35%|      | 28/79 [00:02<00:05,  9.48it/s]
 39%|      | 31/79 [00:02<00:04, 11.66it/s]
 43%|     | 34/79 [00:02<00:03, 13.72it/s]
 47%|     | 37/79 [00:03<00:02, 15.75it/s]
 51%|     | 40/79 [00:03<00:02, 17.77it/s]
 54%|    | 43/79 [00:03<00:01, 19.43it/s]
 58%|    | 46/79 [00:03<00:01, 20.95it/s]
 62%|   | 49/79 [00:03<00:01, 22.09it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:15,  1.73s/it]
  5%|         | 4/79 [00:01<01:31,  1.22s/it]
  9%|         | 7/79 [00:01<01:02,  1.15it/s]
 13%|        | 10/79 [00:02<00:42,  1.61it/s]
 16%|        | 13/79 [00:02<00:29,  2.25it/s]
 20%|        | 16/79 [00:02<00:20,  3.09it/s]
 24%|       | 19/79 [00:02<00:14,  4.21it/s]
 28%|       | 22/79 [00:02<00:10,  5.61it/s]
 32%|      | 25/79 [00:02<00:07,  7.34it/s]
 35%|      | 28/79 [00:02<00:05,  9.35it/s]
 39%|      | 31/79 [00:02<00:04, 11.57it/s]
 43%|     | 34/79 [00:03<00:03, 13.87it/s]
 47%|     | 37/79 [00:03<00:02, 15.98it/s]
 51%|     | 40/79 [00:03<00:02, 18.10it/s]
 54%|    | 43/79 [00:03<00:01, 19.81it/s]
 58%|    | 46/79 [00:03<00:01, 21.10it/s]
 62%|   | 49/79 [00:03<00:01, 22.44it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:15,  1.73s/it]
  5%|         | 4/79 [00:01<01:31,  1.22s/it]
  9%|         | 7/79 [00:01<01:02,  1.15it/s]
 13%|        | 10/79 [00:02<00:42,  1.61it/s]
 16%|        | 13/79 [00:02<00:29,  2.24it/s]
 20%|        | 16/79 [00:02<00:20,  3.09it/s]
 24%|       | 19/79 [00:02<00:14,  4.19it/s]
 28%|       | 22/79 [00:02<00:10,  5.60it/s]
 32%|      | 25/79 [00:02<00:07,  7.30it/s]
 35%|      | 28/79 [00:02<00:05,  9.27it/s]
 39%|      | 31/79 [00:02<00:04, 11.42it/s]
 43%|     | 34/79 [00:03<00:03, 13.68it/s]
 47%|     | 37/79 [00:03<00:02, 15.87it/s]
 51%|     | 40/79 [00:03<00:02, 17.73it/s]
 54%|    | 43/79 [00:03<00:01, 19.33it/s]
 58%|    | 46/79 [00:03<00:01, 20.86it/s]
 62%|   | 49/79 [00:03<00:01, 22.10it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:08,  1.65s/it]
  5%|         | 4/79 [00:01<01:27,  1.17s/it]
  9%|         | 7/79 [00:01<00:59,  1.20it/s]
 13%|        | 10/79 [00:02<00:40,  1.68it/s]
 16%|        | 13/79 [00:02<00:28,  2.34it/s]
 20%|        | 16/79 [00:02<00:19,  3.21it/s]
 24%|       | 19/79 [00:02<00:13,  4.35it/s]
 28%|       | 22/79 [00:02<00:09,  5.78it/s]
 32%|      | 25/79 [00:02<00:07,  7.52it/s]
 35%|      | 28/79 [00:02<00:05,  9.52it/s]
 39%|      | 31/79 [00:02<00:04, 11.72it/s]
 43%|     | 34/79 [00:02<00:03, 13.99it/s]
 47%|     | 37/79 [00:03<00:02, 16.08it/s]
 51%|     | 40/79 [00:03<00:02, 17.92it/s]
 54%|    | 43/79 [00:03<00:01, 19.57it/s]
 58%|    | 46/79 [00:03<00:01, 20.90it/s]
 62%|   | 49/79 [00:03<00:01, 22.14it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:16,  1.75s/it]
  5%|         | 4/79 [00:01<01:32,  1.23s/it]
  9%|         | 7/79 [00:01<01:03,  1.14it/s]
 13%|        | 10/79 [00:02<00:43,  1.60it/s]
 16%|        | 13/79 [00:02<00:29,  2.23it/s]
 20%|        | 16/79 [00:02<00:20,  3.08it/s]
 24%|       | 19/79 [00:02<00:14,  4.18it/s]
 28%|       | 22/79 [00:02<00:10,  5.57it/s]
 32%|      | 25/79 [00:02<00:07,  7.27it/s]
 35%|      | 28/79 [00:02<00:05,  9.29it/s]
 39%|      | 31/79 [00:02<00:04, 11.48it/s]
 43%|     | 34/79 [00:03<00:03, 13.77it/s]
 47%|     | 37/79 [00:03<00:02, 15.96it/s]
 51%|     | 40/79 [00:03<00:02, 18.08it/s]
 54%|    | 43/79 [00:03<00:01, 19.82it/s]
 58%|    | 46/79 [00:03<00:01, 21.13it/s]
 62%|   | 49/79 [00:03<00:01, 22.46it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:07,  1.64s/it]
  5%|         | 4/79 [00:01<01:26,  1.16s/it]
  9%|         | 7/79 [00:01<00:59,  1.21it/s]
 13%|        | 10/79 [00:02<00:40,  1.70it/s]
 16%|        | 13/79 [00:02<00:27,  2.36it/s]
 20%|        | 16/79 [00:02<00:19,  3.24it/s]
 24%|       | 19/79 [00:02<00:13,  4.38it/s]
 28%|       | 22/79 [00:02<00:09,  5.83it/s]
 32%|      | 25/79 [00:02<00:07,  7.59it/s]
 35%|      | 28/79 [00:02<00:05,  9.53it/s]
 39%|      | 31/79 [00:02<00:04, 11.70it/s]
 43%|     | 34/79 [00:02<00:03, 13.80it/s]
 47%|     | 37/79 [00:03<00:02, 15.82it/s]
 51%|     | 40/79 [00:03<00:02, 17.67it/s]
 54%|    | 43/79 [00:03<00:01, 19.42it/s]
 58%|    | 46/79 [00:03<00:01, 20.42it/s]
 62%|   | 49/79 [00:03<00:01, 21.46it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:11,  1.69s/it]
  5%|         | 4/79 [00:01<01:29,  1.20s/it]
  9%|         | 7/79 [00:01<01:01,  1.18it/s]
 13%|        | 10/79 [00:02<00:41,  1.65it/s]
 16%|        | 13/79 [00:02<00:28,  2.29it/s]
 20%|        | 16/79 [00:02<00:19,  3.15it/s]
 24%|       | 19/79 [00:02<00:14,  4.27it/s]
 28%|       | 22/79 [00:02<00:09,  5.70it/s]
 32%|      | 25/79 [00:02<00:07,  7.42it/s]
 35%|      | 28/79 [00:02<00:05,  9.42it/s]
 39%|      | 31/79 [00:02<00:04, 11.61it/s]
 43%|     | 34/79 [00:02<00:03, 13.90it/s]
 47%|     | 37/79 [00:03<00:02, 16.01it/s]
 51%|     | 40/79 [00:03<00:02, 18.00it/s]
 54%|    | 43/79 [00:03<00:01, 19.78it/s]
 58%|    | 46/79 [00:03<00:01, 21.04it/s]
 62%|   | 49/79 [00:03<00:01, 22.13it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:13,  1.71s/it]
  5%|         | 4/79 [00:01<01:30,  1.21s/it]
  9%|         | 7/79 [00:01<01:01,  1.16it/s]
 13%|        | 10/79 [00:02<00:42,  1.63it/s]
 16%|        | 13/79 [00:02<00:29,  2.27it/s]
 20%|        | 16/79 [00:02<00:20,  3.12it/s]
 24%|       | 19/79 [00:02<00:14,  4.23it/s]
 28%|       | 22/79 [00:02<00:10,  5.65it/s]
 32%|      | 25/79 [00:02<00:07,  7.36it/s]
 35%|      | 28/79 [00:02<00:05,  9.40it/s]
 39%|      | 31/79 [00:02<00:04, 11.61it/s]
 43%|     | 34/79 [00:03<00:03, 13.84it/s]
 47%|     | 37/79 [00:03<00:02, 15.97it/s]
 51%|     | 40/79 [00:03<00:02, 18.07it/s]
 54%|    | 43/79 [00:03<00:01, 19.85it/s]
 58%|    | 46/79 [00:03<00:01, 21.02it/s]
 62%|   | 49/79 [00:03<00:01, 22.24it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:12,  1.70s/it]
  5%|         | 4/79 [00:01<01:30,  1.20s/it]
  9%|         | 7/79 [00:01<01:01,  1.17it/s]
 13%|        | 10/79 [00:02<00:42,  1.64it/s]
 16%|        | 13/79 [00:02<00:28,  2.28it/s]
 20%|        | 16/79 [00:02<00:20,  3.13it/s]
 24%|       | 19/79 [00:02<00:14,  4.25it/s]
 28%|       | 22/79 [00:02<00:10,  5.65it/s]
 32%|      | 25/79 [00:02<00:07,  7.34it/s]
 35%|      | 28/79 [00:02<00:05,  9.29it/s]
 39%|      | 31/79 [00:02<00:04, 11.47it/s]
 43%|     | 34/79 [00:03<00:03, 13.73it/s]
 47%|     | 37/79 [00:03<00:02, 15.84it/s]
 51%|     | 40/79 [00:03<00:02, 17.83it/s]
 54%|    | 43/79 [00:03<00:01, 19.55it/s]
 58%|    | 46/79 [00:03<00:01, 20.90it/s]
 62%|   | 49/79 [00:03<00:01, 21.93it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:12,  1.70s/it]
  5%|         | 4/79 [00:01<01:30,  1.21s/it]
  9%|         | 7/79 [00:01<01:01,  1.17it/s]
 13%|        | 10/79 [00:02<00:42,  1.64it/s]
 16%|        | 13/79 [00:02<00:29,  2.27it/s]
 20%|        | 16/79 [00:02<00:20,  3.13it/s]
 24%|       | 19/79 [00:02<00:14,  4.25it/s]
 28%|       | 22/79 [00:02<00:10,  5.66it/s]
 32%|      | 25/79 [00:02<00:07,  7.37it/s]
 35%|      | 28/79 [00:02<00:05,  9.36it/s]
 39%|      | 31/79 [00:02<00:04, 11.52it/s]
 43%|     | 34/79 [00:03<00:03, 13.79it/s]
 47%|     | 37/79 [00:03<00:02, 15.79it/s]
 51%|     | 40/79 [00:03<00:02, 17.72it/s]
 54%|    | 43/79 [00:03<00:01, 19.17it/s]
 58%|    | 46/79 [00:03<00:01, 20.52it/s]
 62%|   | 49/79 [00:03<00:01, 21.64it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:11,  1.69s/it]
  5%|         | 4/79 [00:01<01:29,  1.20s/it]
  9%|         | 7/79 [00:01<01:01,  1.18it/s]
 13%|        | 10/79 [00:02<00:41,  1.65it/s]
 16%|        | 13/79 [00:02<00:28,  2.29it/s]
 20%|        | 16/79 [00:02<00:20,  3.14it/s]
 24%|       | 19/79 [00:02<00:14,  4.26it/s]
 28%|       | 22/79 [00:02<00:10,  5.67it/s]
 32%|      | 25/79 [00:02<00:07,  7.40it/s]
 35%|      | 28/79 [00:02<00:05,  9.39it/s]
 39%|      | 31/79 [00:02<00:04, 11.51it/s]
 43%|     | 34/79 [00:03<00:03, 13.79it/s]
 47%|     | 37/79 [00:03<00:02, 15.95it/s]
 51%|     | 40/79 [00:03<00:02, 17.71it/s]
 54%|    | 43/79 [00:03<00:01, 19.24it/s]
 58%|    | 46/79 [00:03<00:01, 20.39it/s]
 62%|   | 49/79 [00:03<00:01, 21.47it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:11,  1.69s/it]
  5%|         | 4/79 [00:01<01:29,  1.20s/it]
  9%|         | 7/79 [00:01<01:01,  1.18it/s]
 13%|        | 10/79 [00:02<00:41,  1.65it/s]
 16%|        | 13/79 [00:02<00:28,  2.29it/s]
 20%|        | 16/79 [00:02<00:20,  3.15it/s]
 24%|       | 19/79 [00:02<00:14,  4.26it/s]
 28%|       | 22/79 [00:02<00:10,  5.66it/s]
 32%|      | 25/79 [00:02<00:07,  7.36it/s]
 35%|      | 28/79 [00:02<00:05,  9.34it/s]
 39%|      | 31/79 [00:02<00:04, 11.48it/s]
 43%|     | 34/79 [00:03<00:03, 13.63it/s]
 47%|     | 37/79 [00:03<00:02, 15.77it/s]
 51%|     | 40/79 [00:03<00:02, 17.69it/s]
 54%|    | 43/79 [00:03<00:01, 19.31it/s]
 58%|    | 46/79 [00:03<00:01, 20.66it/s]
 62%|   | 49/79 [00:03<00:01, 21.70it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:08,  1.65s/it]
  5%|         | 4/79 [00:01<01:27,  1.17s/it]
  9%|         | 7/79 [00:01<00:59,  1.20it/s]
 13%|        | 10/79 [00:02<00:40,  1.68it/s]
 16%|        | 13/79 [00:02<00:28,  2.33it/s]
 20%|        | 16/79 [00:02<00:19,  3.20it/s]
 24%|       | 19/79 [00:02<00:13,  4.33it/s]
 28%|       | 22/79 [00:02<00:09,  5.74it/s]
 32%|      | 25/79 [00:02<00:07,  7.43it/s]
 35%|      | 28/79 [00:02<00:05,  9.37it/s]
 39%|      | 31/79 [00:02<00:04, 11.48it/s]
 43%|     | 34/79 [00:03<00:03, 13.58it/s]
 47%|     | 37/79 [00:03<00:02, 15.58it/s]
 51%|     | 40/79 [00:03<00:02, 17.42it/s]
 54%|    | 43/79 [00:03<00:01, 19.11it/s]
 58%|    | 46/79 [00:03<00:01, 20.34it/s]
 62%|   | 49/79 [00:03<00:01, 21.22it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:18,  1.78s/it]
  5%|         | 4/79 [00:01<01:34,  1.26s/it]
  9%|         | 7/79 [00:02<01:04,  1.12it/s]
 13%|        | 10/79 [00:02<00:43,  1.57it/s]
 16%|        | 13/79 [00:02<00:30,  2.18it/s]
 20%|        | 16/79 [00:02<00:20,  3.00it/s]
 24%|       | 19/79 [00:02<00:14,  4.08it/s]
 28%|       | 22/79 [00:02<00:10,  5.44it/s]
 32%|      | 25/79 [00:02<00:07,  7.11it/s]
 35%|      | 28/79 [00:02<00:05,  9.05it/s]
 39%|      | 31/79 [00:02<00:04, 11.24it/s]
 43%|     | 34/79 [00:03<00:03, 13.37it/s]
 47%|     | 37/79 [00:03<00:02, 15.46it/s]
 51%|     | 40/79 [00:03<00:02, 17.48it/s]
 54%|    | 43/79 [00:03<00:01, 19.09it/s]
 58%|    | 46/79 [00:03<00:01, 20.31it/s]
 62%|   | 49/79 [00:03<00:01, 21.43it/s]
 66%|   | 52/79 [00:03<00:01, 23.29it/s]
 70%|   | 55/79 [00:03<00:01, 23.85it/s]
 73%|  | 58/79 [00:03<00:00, 24.21it/s]
 77%|  | 61/79 [00:03<00:00, 24.83it/s]
 81%|  | 64/79 [00:04<00:00, 24.58it/s]
 85%| | 67/79 [00:04<00:00, 24.65it/s]
 89%| | 70/79 [00:04<00:00, 24.59it/s]
 92%|| 73/79 [00:04<00:00, 25.30it/s]
 96%|| 76/79 [00:04<00:00, 26.09it/s]
100%|| 79/79 [00:04<00:00, 26.98it/s]
25it/s]
 68%|   | 54/79 [00:03<00:01, 23.80it/s]
 72%|  | 57/79 [00:03<00:00, 24.05it/s]
 76%|  | 60/79 [00:03<00:00, 24.23it/s]
 80%|  | 63/79 [00:04<00:00, 24.39it/s]
 84%| | 66/79 [00:04<00:00, 24.71it/s]
 87%| | 69/79 [00:04<00:00, 25.05it/s]
 91%| | 72/79 [00:04<00:00, 25.09it/s]
 95%|| 75/79 [00:04<00:00, 25.75it/s]
 99%|| 78/79 [00:04<00:00, 26.22it/s]
100%|| 79/79 [00:04<00:00, 16.91it/s]
, 24.03it/s]
 70%|   | 55/79 [00:03<00:00, 24.44it/s]
 73%|  | 58/79 [00:03<00:00, 25.11it/s]
 77%|  | 61/79 [00:03<00:00, 25.36it/s]
 81%|  | 64/79 [00:04<00:00, 25.78it/s]
 85%| | 67/79 [00:04<00:00, 25.98it/s]
 89%| | 70/79 [00:04<00:00, 26.25it/s]
 92%|| 73/79 [00:04<00:00, 26.45it/s]
 96%|| 76/79 [00:04<00:00, 27.05it/s]
100%|| 79/79 [00:04<00:00, 27.79it/s]
, 24.04it/s]
 70%|   | 55/79 [00:03<00:00, 24.78it/s]
 73%|  | 58/79 [00:03<00:00, 25.23it/s]
 77%|  | 61/79 [00:03<00:00, 25.61it/s]
 81%|  | 64/79 [00:04<00:00, 25.46it/s]
 85%| | 67/79 [00:04<00:00, 25.79it/s]
 89%| | 70/79 [00:04<00:00, 25.77it/s]
 92%|| 73/79 [00:04<00:00, 26.19it/s]
 96%|| 76/79 [00:04<00:00, 26.61it/s]
100%|| 79/79 [00:04<00:00, 27.35it/s]
, 23.26it/s]
 70%|   | 55/79 [00:03<00:01, 23.94it/s]
 73%|  | 58/79 [00:03<00:00, 24.28it/s]
 77%|  | 61/79 [00:03<00:00, 24.82it/s]
 81%|  | 64/79 [00:04<00:00, 24.96it/s]
 85%| | 67/79 [00:04<00:00, 25.52it/s]
 89%| | 70/79 [00:04<00:00, 25.73it/s]
 92%|| 73/79 [00:04<00:00, 25.90it/s]
 96%|| 76/79 [00:04<00:00, 26.63it/s]
100%|| 79/79 [00:04<00:00, 27.53it/s]
, 23.72it/s]
 70%|   | 55/79 [00:03<00:00, 24.16it/s]
 73%|  | 58/79 [00:03<00:00, 24.58it/s]
 77%|  | 61/79 [00:03<00:00, 25.17it/s]
 81%|  | 64/79 [00:04<00:00, 25.39it/s]
 85%| | 67/79 [00:04<00:00, 25.80it/s]
 89%| | 70/79 [00:04<00:00, 25.80it/s]
 92%|| 73/79 [00:04<00:00, 25.98it/s]
 96%|| 76/79 [00:04<00:00, 26.84it/s]
100%|| 79/79 [00:04<00:00, 26.94it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:00, 24.54it/s]
 73%|  | 58/79 [00:03<00:00, 24.77it/s]
 77%|  | 61/79 [00:04<00:00, 24.85it/s]
 81%|  | 64/79 [00:04<00:00, 25.20it/s]
 85%| | 67/79 [00:04<00:00, 25.45it/s]
 89%| | 70/79 [00:04<00:00, 25.45it/s]
 92%|| 73/79 [00:04<00:00, 25.94it/s]
 96%|| 76/79 [00:04<00:00, 26.62it/s]
100%|| 79/79 [00:04<00:00, 16.64it/s]
, 23.46it/s]
 70%|   | 55/79 [00:03<00:01, 23.96it/s]
 73%|  | 58/79 [00:03<00:00, 24.51it/s]
 77%|  | 61/79 [00:03<00:00, 24.87it/s]
 81%|  | 64/79 [00:04<00:00, 25.04it/s]
 85%| | 67/79 [00:04<00:00, 25.17it/s]
 89%| | 70/79 [00:04<00:00, 25.33it/s]
 92%|| 73/79 [00:04<00:00, 25.67it/s]
 96%|| 76/79 [00:04<00:00, 26.83it/s]
100%|| 79/79 [00:04<00:00, 27.25it/s]
, 23.34it/s]
 70%|   | 55/79 [00:03<00:00, 24.06it/s]
 73%|  | 58/79 [00:03<00:00, 24.67it/s]
 77%|  | 61/79 [00:04<00:00, 25.04it/s]
 81%|  | 64/79 [00:04<00:00, 25.21it/s]
 85%| | 67/79 [00:04<00:00, 25.47it/s]
 89%| | 70/79 [00:04<00:00, 25.55it/s]
 92%|| 73/79 [00:04<00:00, 25.92it/s]
 96%|| 76/79 [00:04<00:00, 26.51it/s]
100%|| 79/79 [00:04<00:00, 27.26it/s]
10it/s]
 68%|   | 54/79 [00:03<00:01, 23.65it/s]
 72%|  | 57/79 [00:03<00:00, 24.26it/s]
 76%|  | 60/79 [00:03<00:00, 24.47it/s]
 80%|  | 63/79 [00:04<00:00, 24.78it/s]
 84%| | 66/79 [00:04<00:00, 24.83it/s]
 87%| | 69/79 [00:04<00:00, 25.06it/s]
 91%| | 72/79 [00:04<00:00, 25.20it/s]
 95%|| 75/79 [00:04<00:00, 25.93it/s]
 99%|| 78/79 [00:04<00:00, 26.42it/s]
100%|| 79/79 [00:04<00:00, 16.60it/s]
, 22.98it/s]
 70%|   | 55/79 [00:03<00:01, 23.79it/s]
 73%|  | 58/79 [00:03<00:00, 24.15it/s]
 77%|  | 61/79 [00:03<00:00, 24.94it/s]
 81%|  | 64/79 [00:04<00:00, 24.92it/s]
 85%| | 67/79 [00:04<00:00, 24.84it/s]
 89%| | 70/79 [00:04<00:00, 24.72it/s]
 92%|| 73/79 [00:04<00:00, 25.47it/s]
 96%|| 76/79 [00:04<00:00, 26.21it/s]
100%|| 79/79 [00:04<00:00, 27.20it/s]
, 23.66it/s]
 70%|   | 55/79 [00:03<00:01, 23.95it/s]
 73%|  | 58/79 [00:03<00:00, 24.50it/s]
 77%|  | 61/79 [00:04<00:00, 24.79it/s]
 81%|  | 64/79 [00:04<00:00, 24.96it/s]
 85%| | 67/79 [00:04<00:00, 24.96it/s]
 89%| | 70/79 [00:04<00:00, 25.41it/s]
 92%|| 73/79 [00:04<00:00, 25.53it/s]
 96%|| 76/79 [00:04<00:00, 26.31it/s]
100%|| 79/79 [00:04<00:00, 27.10it/s]
, 22.94it/s]
 70%|   | 55/79 [00:03<00:01, 23.24it/s]
 73%|  | 58/79 [00:03<00:00, 23.90it/s]
 77%|  | 61/79 [00:04<00:00, 24.38it/s]
 81%|  | 64/79 [00:04<00:00, 24.50it/s]
 85%| | 67/79 [00:04<00:00, 24.71it/s]
 89%| | 70/79 [00:04<00:00, 24.54it/s]
 92%|| 73/79 [00:04<00:00, 25.17it/s]
 96%|| 76/79 [00:04<00:00, 26.06it/s]
100%|| 79/79 [00:04<00:00, 16.57it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 24.33it/s]
 71%|   | 56/79 [00:03<00:00, 24.98it/s]
 75%|  | 59/79 [00:03<00:00, 25.34it/s]
 78%|  | 62/79 [00:04<00:00, 25.20it/s]
 82%| | 65/79 [00:04<00:00, 25.66it/s]
 86%| | 68/79 [00:04<00:00, 25.74it/s]
 90%| | 71/79 [00:04<00:00, 25.72it/s]
 94%|| 74/79 [00:04<00:00, 26.40it/s]
 97%|| 77/79 [00:04<00:00, 26.90it/s]
100%|| 79/79 [00:04<00:00, 16.56it/s]
, 22.60it/s]
 70%|   | 55/79 [00:03<00:01, 23.27it/s]
 73%|  | 58/79 [00:03<00:00, 24.08it/s]
 77%|  | 61/79 [00:04<00:00, 24.39it/s]
 81%|  | 64/79 [00:04<00:00, 24.64it/s]
 85%| | 67/79 [00:04<00:00, 24.93it/s]
 89%| | 70/79 [00:04<00:00, 25.12it/s]
 92%|| 73/79 [00:04<00:00, 25.46it/s]
 96%|| 76/79 [00:04<00:00, 26.15it/s]
100%|| 79/79 [00:04<00:00, 26.97it/s]
, 23.35it/s]
 70%|   | 55/79 [00:03<00:00, 24.07it/s]
 73%|  | 58/79 [00:03<00:00, 24.61it/s]
 77%|  | 61/79 [00:04<00:00, 25.08it/s]
 81%|  | 64/79 [00:04<00:00, 25.08it/s]
 85%| | 67/79 [00:04<00:00, 25.51it/s]
 89%| | 70/79 [00:04<00:00, 25.75it/s]
 92%|| 73/79 [00:04<00:00, 26.02it/s]
 96%|| 76/79 [00:04<00:00, 26.61it/s]
100%|| 79/79 [00:04<00:00, 27.54it/s]
, 22.63it/s]
 70%|   | 55/79 [00:03<00:01, 23.47it/s]
 73%|  | 58/79 [00:03<00:00, 23.86it/s]
 77%|  | 61/79 [00:04<00:00, 24.41it/s]
 81%|  | 64/79 [00:04<00:00, 24.79it/s]
 85%| | 67/79 [00:04<00:00, 25.05it/s]
 89%| | 70/79 [00:04<00:00, 25.17it/s]
 92%|| 73/79 [00:04<00:00, 25.74it/s]
 96%|| 76/79 [00:04<00:00, 26.54it/s]
100%|| 79/79 [00:04<00:00, 27.46it/s]
, 23.05it/s]
 70%|   | 55/79 [00:03<00:01, 23.68it/s]
 73%|  | 58/79 [00:03<00:00, 24.04it/s]
 77%|  | 61/79 [00:04<00:00, 24.49it/s]
 81%|  | 64/79 [00:04<00:00, 24.70it/s]
 85%| | 67/79 [00:04<00:00, 24.97it/s]
 89%| | 70/79 [00:04<00:00, 25.12it/s]
 92%|| 73/79 [00:04<00:00, 25.60it/s]
 96%|| 76/79 [00:04<00:00, 26.32it/s]
100%|| 79/79 [00:04<00:00, 27.32it/s]
, 23.20it/s]
 70%|   | 55/79 [00:03<00:00, 24.06it/s]
 73%|  | 58/79 [00:03<00:00, 24.45it/s]
 77%|  | 61/79 [00:04<00:00, 24.70it/s]
 81%|  | 64/79 [00:04<00:00, 24.91it/s]
 85%| | 67/79 [00:04<00:00, 24.93it/s]
 89%| | 70/79 [00:04<00:00, 25.12it/s]
 92%|| 73/79 [00:04<00:00, 25.45it/s]
 96%|| 76/79 [00:04<00:00, 26.29it/s]
100%|| 79/79 [00:04<00:00, 27.12it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 23.37it/s]
 71%|   | 56/79 [00:03<00:00, 23.78it/s]
 75%|  | 59/79 [00:04<00:00, 24.25it/s]
 78%|  | 62/79 [00:04<00:00, 24.30it/s]
 82%| | 65/79 [00:04<00:00, 24.40it/s]
 86%| | 68/79 [00:04<00:00, 24.46it/s]
 90%| | 71/79 [00:04<00:00, 24.76it/s]
 94%|| 74/79 [00:04<00:00, 25.53it/s]
 97%|| 77/79 [00:04<00:00, 26.21it/s]
100%|| 79/79 [00:04<00:00, 16.33it/s]
, 22.79it/s]
 70%|   | 55/79 [00:03<00:01, 23.40it/s]
 73%|  | 58/79 [00:03<00:00, 24.07it/s]
 77%|  | 61/79 [00:04<00:00, 24.35it/s]
 81%|  | 64/79 [00:04<00:00, 24.52it/s]
 85%| | 67/79 [00:04<00:00, 24.68it/s]
 89%| | 70/79 [00:04<00:00, 25.14it/s]
 92%|| 73/79 [00:04<00:00, 25.39it/s]
 96%|| 76/79 [00:04<00:00, 26.36it/s]
100%|| 79/79 [00:04<00:00, 16.20it/s]
, 22.93it/s]
 70%|   | 55/79 [00:03<00:01, 23.64it/s]
 73%|  | 58/79 [00:03<00:00, 24.05it/s]
 77%|  | 61/79 [00:04<00:00, 24.33it/s]
 81%|  | 64/79 [00:04<00:00, 24.68it/s]
 85%| | 67/79 [00:04<00:00, 25.22it/s]
 89%| | 70/79 [00:04<00:00, 24.97it/s]
 92%|| 73/79 [00:04<00:00, 25.53it/s]
 96%|| 76/79 [00:04<00:00, 26.29it/s]
100%|| 79/79 [00:04<00:00, 27.15it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 23.59it/s]
 71%|   | 56/79 [00:03<00:00, 23.93it/s]
 75%|  | 59/79 [00:04<00:00, 24.25it/s]
 78%|  | 62/79 [00:04<00:00, 24.44it/s]
 82%| | 65/79 [00:04<00:00, 24.70it/s]
 86%| | 68/79 [00:04<00:00, 24.54it/s]
 90%| | 71/79 [00:04<00:00, 24.55it/s]
 94%|| 74/79 [00:04<00:00, 25.41it/s]
 97%|| 77/79 [00:04<00:00, 26.08it/s]
100%|| 79/79 [00:04<00:00, 16.31it/s]
, 23.35it/s]
 70%|   | 55/79 [00:03<00:01, 23.90it/s]
 73%|  | 58/79 [00:03<00:00, 24.12it/s]
 77%|  | 61/79 [00:04<00:00, 24.54it/s]
 81%|  | 64/79 [00:04<00:00, 24.99it/s]
 85%| | 67/79 [00:04<00:00, 25.03it/s]
 89%| | 70/79 [00:04<00:00, 25.20it/s]
 92%|| 73/79 [00:04<00:00, 25.74it/s]
 96%|| 76/79 [00:04<00:00, 26.30it/s]
100%|| 79/79 [00:04<00:00, 27.29it/s]
, 22.78it/s]
 70%|   | 55/79 [00:03<00:01, 23.39it/s]
 73%|  | 58/79 [00:03<00:00, 23.78it/s]
 77%|  | 61/79 [00:04<00:00, 23.99it/s]
 81%|  | 64/79 [00:04<00:00, 24.43it/s]
 85%| | 67/79 [00:04<00:00, 24.44it/s]
 89%| | 70/79 [00:04<00:00, 24.80it/s]
 92%|| 73/79 [00:04<00:00, 25.04it/s]
 96%|| 76/79 [00:04<00:00, 25.72it/s]
100%|| 79/79 [00:04<00:00, 26.57it/s]
, 23.00it/s]
 70%|   | 55/79 [00:03<00:01, 23.64it/s]
 73%|  | 58/79 [00:03<00:00, 24.25it/s]
 77%|  | 61/79 [00:04<00:00, 24.67it/s]
 81%|  | 64/79 [00:04<00:00, 24.41it/s]
 85%| | 67/79 [00:04<00:00, 24.40it/s]
 89%| | 70/79 [00:04<00:00, 24.96it/s]
 92%|| 73/79 [00:04<00:00, 25.06it/s]
 96%|| 76/79 [00:04<00:00, 25.81it/s]
100%|| 79/79 [00:04<00:00, 26.70it/s]
, 22.42it/s]
 70%|   | 55/79 [00:03<00:01, 23.22it/s]
 73%|  | 58/79 [00:03<00:00, 23.49it/s]
 77%|  | 61/79 [00:04<00:00, 23.83it/s]
 81%|  | 64/79 [00:04<00:00, 24.20it/s]
 85%| | 67/79 [00:04<00:00, 24.48it/s]
 89%| | 70/79 [00:04<00:00, 24.57it/s]
 92%|| 73/79 [00:04<00:00, 25.07it/s]
 96%|| 76/79 [00:04<00:00, 25.90it/s]
100%|| 79/79 [00:04<00:00, 26.57it/s]
, 22.60it/s]
 70%|   | 55/79 [00:03<00:01, 23.28it/s]
 73%|  | 58/79 [00:04<00:00, 23.62it/s]
 77%|  | 61/79 [00:04<00:00, 23.87it/s]
 81%|  | 64/79 [00:04<00:00, 24.32it/s]
 85%| | 67/79 [00:04<00:00, 24.47it/s]
 89%| | 70/79 [00:04<00:00, 24.30it/s]
 92%|| 73/79 [00:04<00:00, 24.86it/s]
 96%|| 76/79 [00:04<00:00, 25.59it/s]
100%|| 79/79 [00:04<00:00, 26.41it/s]
, 22.29it/s]
 70%|   | 55/79 [00:03<00:01, 22.88it/s]
 73%|  | 58/79 [00:04<00:00, 23.35it/s]
 77%|  | 61/79 [00:04<00:00, 23.88it/s]
 81%|  | 64/79 [00:04<00:00, 24.25it/s]
 85%| | 67/79 [00:04<00:00, 24.13it/s]
 89%| | 70/79 [00:04<00:00, 24.36it/s]
 92%|| 73/79 [00:04<00:00, 24.78it/s]
 96%|| 76/79 [00:04<00:00, 25.69it/s]
100%|| 79/79 [00:04<00:00, 26.72it/s]
, 22.44it/s]
 70%|   | 55/79 [00:03<00:01, 22.86it/s]
 73%|  | 58/79 [00:04<00:00, 23.34it/s]
 77%|  | 61/79 [00:04<00:00, 23.71it/s]
 81%|  | 64/79 [00:04<00:00, 23.87it/s]
 85%| | 67/79 [00:04<00:00, 23.99it/s]
 89%| | 70/79 [00:04<00:00, 24.12it/s]
 92%|| 73/79 [00:04<00:00, 24.81it/s]
 96%|| 76/79 [00:04<00:00, 25.50it/s]
100%|| 79/79 [00:04<00:00, 26.40it/s]
, 22.06it/s]
 70%|   | 55/79 [00:03<00:01, 22.74it/s]
 73%|  | 58/79 [00:04<00:00, 23.23it/s]
 77%|  | 61/79 [00:04<00:00, 23.47it/s]
 81%|  | 64/79 [00:04<00:00, 23.67it/s]
 85%| | 67/79 [00:04<00:00, 23.88it/s]
 89%| | 70/79 [00:04<00:00, 24.07it/s]
 92%|| 73/79 [00:04<00:00, 24.30it/s]
 96%|| 76/79 [00:04<00:00, 25.07it/s]
100%|| 79/79 [00:04<00:00, 25.93it/s]
, 22.20it/s]
 70%|   | 55/79 [00:03<00:01, 23.08it/s]
 73%|  | 58/79 [00:04<00:00, 23.47it/s]
 77%|  | 61/79 [00:04<00:00, 23.93it/s]
 81%|  | 64/79 [00:04<00:00, 24.33it/s]
 85%| | 67/79 [00:04<00:00, 24.72it/s]
 89%| | 70/79 [00:04<00:00, 24.57it/s]
 92%|| 73/79 [00:04<00:00, 24.84it/s]
 96%|| 76/79 [00:04<00:00, 25.52it/s]
100%|| 79/79 [00:04<00:00, 26.30it/s]
2020-06-23 16:11:48,339 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.973684 (0.03183157806396485 s / img per device, on 32 devices)
2020-06-23 16:11:48,357 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:11:48,357 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:11:48,376 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592953915403, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 12, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592953915404, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 12}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:11:56,847 maskrcnn_benchmark.trainer INFO: eta: 1:03:06  iter: 10100  loss: 0.5458 (0.7415)  loss_classifier: 0.1730 (0.2702)  loss_box_reg: 0.0900 (0.1195)  loss_mask: 0.2433 (0.2949)  loss_objectness: 0.0176 (0.0363)  loss_rpn_box_reg: 0.0108 (0.0204)  time: 0.1096 (0.1266)  data: 0.0015 (0.0192)  lr: 0.016000  max mem: 5098
2020-06-23 16:11:59,064 maskrcnn_benchmark.trainer INFO: eta: 1:03:03  iter: 10120  loss: 0.5682 (0.7411)  loss_classifier: 0.1655 (0.2701)  loss_box_reg: 0.0815 (0.1195)  loss_mask: 0.2459 (0.2948)  loss_objectness: 0.0107 (0.0363)  loss_rpn_box_reg: 0.0060 (0.0204)  time: 0.1106 (0.1266)  data: 0.0014 (0.0192)  lr: 0.016000  max mem: 5098
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 16:12:01,240 maskrcnn_benchmark.trainer INFO: eta: 1:02:59  iter: 10140  loss: 0.5670 (0.7407)  loss_classifier: 0.2136 (0.2699)  loss_box_reg: 0.0865 (0.1194)  loss_mask: 0.2354 (0.2947)  loss_objectness: 0.0194 (0.0363)  loss_rpn_box_reg: 0.0082 (0.0204)  time: 0.1086 (0.1266)  data: 0.0014 (0.0191)  lr: 0.016000  max mem: 5098
DONE (t=0.59s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.53s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36720
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.58180
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.39926
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21136
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.39697
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48132
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30823
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.48764
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51277
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.32406
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.54783
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.64791
2020-06-23 16:12:03,436 maskrcnn_benchmark.trainer INFO: eta: 1:02:56  iter: 10160  loss: 0.5083 (0.7403)  loss_classifier: 0.1661 (0.2697)  loss_box_reg: 0.0700 (0.1193)  loss_mask: 0.2386 (0.2946)  loss_objectness: 0.0117 (0.0362)  loss_rpn_box_reg: 0.0095 (0.0204)  time: 0.1093 (0.1265)  data: 0.0014 (0.0191)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:05,625 maskrcnn_benchmark.trainer INFO: eta: 1:02:52  iter: 10180  loss: 0.5668 (0.7399)  loss_classifier: 0.1582 (0.2695)  loss_box_reg: 0.0802 (0.1193)  loss_mask: 0.2510 (0.2945)  loss_objectness: 0.0126 (0.0362)  loss_rpn_box_reg: 0.0051 (0.0204)  time: 0.1096 (0.1265)  data: 0.0014 (0.0191)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:07,809 maskrcnn_benchmark.trainer INFO: eta: 1:02:49  iter: 10200  loss: 0.5068 (0.7395)  loss_classifier: 0.1732 (0.2694)  loss_box_reg: 0.0698 (0.1192)  loss_mask: 0.2158 (0.2944)  loss_objectness: 0.0105 (0.0362)  loss_rpn_box_reg: 0.0044 (0.0204)  time: 0.1089 (0.1265)  data: 0.0014 (0.0190)  lr: 0.016000  max mem: 5098
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
DONE (t=1.56s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:12:09,988 maskrcnn_benchmark.trainer INFO: eta: 1:02:45  iter: 10220  loss: 0.5298 (0.7391)  loss_classifier: 0.1754 (0.2692)  loss_box_reg: 0.0786 (0.1191)  loss_mask: 0.2427 (0.2943)  loss_objectness: 0.0095 (0.0361)  loss_rpn_box_reg: 0.0053 (0.0204)  time: 0.1088 (0.1264)  data: 0.0014 (0.0190)  lr: 0.016000  max mem: 5098
DONE (t=2.47s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.33702
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.54977
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.35732
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15279
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36314
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49857
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29170
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.45045
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.47123
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27420
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50746
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62610
2020-06-23 16:12:12,297 maskrcnn_benchmark.trainer INFO: eta: 1:02:42  iter: 10240  loss: 0.5400 (0.7388)  loss_classifier: 0.1701 (0.2690)  loss_box_reg: 0.0974 (0.1191)  loss_mask: 0.2515 (0.2942)  loss_objectness: 0.0117 (0.0361)  loss_rpn_box_reg: 0.0111 (0.0204)  time: 0.1084 (0.1264)  data: 0.0014 (0.0189)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:12,297 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.36719692650288116, segm mAP: 0.3370196934564942
:::MLLOG {"namespace": "", "time_ms": 1592953932297, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.36719692650288116, "SEGM": 0.3370196934564942}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1592953932297, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 11}}
2020-06-23 16:12:14,483 maskrcnn_benchmark.trainer INFO: eta: 1:02:38  iter: 10260  loss: 0.4837 (0.7384)  loss_classifier: 0.1757 (0.2688)  loss_box_reg: 0.0638 (0.1190)  loss_mask: 0.2294 (0.2941)  loss_objectness: 0.0104 (0.0361)  loss_rpn_box_reg: 0.0070 (0.0203)  time: 0.1091 (0.1264)  data: 0.0016 (0.0189)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:16,646 maskrcnn_benchmark.trainer INFO: eta: 1:02:35  iter: 10280  loss: 0.5600 (0.7381)  loss_classifier: 0.1839 (0.2687)  loss_box_reg: 0.0904 (0.1190)  loss_mask: 0.2584 (0.2940)  loss_objectness: 0.0151 (0.0360)  loss_rpn_box_reg: 0.0077 (0.0203)  time: 0.1078 (0.1264)  data: 0.0014 (0.0189)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:18,820 maskrcnn_benchmark.trainer INFO: eta: 1:02:31  iter: 10300  loss: 0.5482 (0.7377)  loss_classifier: 0.1743 (0.2685)  loss_box_reg: 0.0889 (0.1189)  loss_mask: 0.2697 (0.2940)  loss_objectness: 0.0095 (0.0360)  loss_rpn_box_reg: 0.0046 (0.0203)  time: 0.1083 (0.1263)  data: 0.0015 (0.0188)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:20,984 maskrcnn_benchmark.trainer INFO: eta: 1:02:28  iter: 10320  loss: 0.5834 (0.7374)  loss_classifier: 0.1959 (0.2684)  loss_box_reg: 0.1002 (0.1189)  loss_mask: 0.2332 (0.2939)  loss_objectness: 0.0156 (0.0360)  loss_rpn_box_reg: 0.0093 (0.0203)  time: 0.1082 (0.1263)  data: 0.0015 (0.0188)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:23,150 maskrcnn_benchmark.trainer INFO: eta: 1:02:24  iter: 10340  loss: 0.5440 (0.7371)  loss_classifier: 0.1783 (0.2683)  loss_box_reg: 0.0956 (0.1189)  loss_mask: 0.2352 (0.2938)  loss_objectness: 0.0146 (0.0360)  loss_rpn_box_reg: 0.0099 (0.0203)  time: 0.1078 (0.1263)  data: 0.0014 (0.0188)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:25,304 maskrcnn_benchmark.trainer INFO: eta: 1:02:21  iter: 10360  loss: 0.5940 (0.7369)  loss_classifier: 0.2050 (0.2681)  loss_box_reg: 0.0915 (0.1188)  loss_mask: 0.2518 (0.2937)  loss_objectness: 0.0143 (0.0359)  loss_rpn_box_reg: 0.0099 (0.0203)  time: 0.1069 (0.1262)  data: 0.0015 (0.0187)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:27,472 maskrcnn_benchmark.trainer INFO: eta: 1:02:17  iter: 10380  loss: 0.5685 (0.7365)  loss_classifier: 0.1908 (0.2680)  loss_box_reg: 0.0974 (0.1188)  loss_mask: 0.2454 (0.2936)  loss_objectness: 0.0110 (0.0359)  loss_rpn_box_reg: 0.0087 (0.0203)  time: 0.1080 (0.1262)  data: 0.0015 (0.0187)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:29,657 maskrcnn_benchmark.trainer INFO: eta: 1:02:13  iter: 10400  loss: 0.5239 (0.7362)  loss_classifier: 0.1750 (0.2678)  loss_box_reg: 0.0761 (0.1187)  loss_mask: 0.2384 (0.2935)  loss_objectness: 0.0185 (0.0359)  loss_rpn_box_reg: 0.0089 (0.0203)  time: 0.1090 (0.1261)  data: 0.0015 (0.0187)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:31,810 maskrcnn_benchmark.trainer INFO: eta: 1:02:10  iter: 10420  loss: 0.5039 (0.7358)  loss_classifier: 0.1487 (0.2676)  loss_box_reg: 0.0774 (0.1187)  loss_mask: 0.2428 (0.2934)  loss_objectness: 0.0148 (0.0358)  loss_rpn_box_reg: 0.0060 (0.0202)  time: 0.1070 (0.1261)  data: 0.0014 (0.0186)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:33,985 maskrcnn_benchmark.trainer INFO: eta: 1:02:06  iter: 10440  loss: 0.5464 (0.7354)  loss_classifier: 0.1841 (0.2674)  loss_box_reg: 0.0713 (0.1186)  loss_mask: 0.2341 (0.2933)  loss_objectness: 0.0192 (0.0358)  loss_rpn_box_reg: 0.0095 (0.0203)  time: 0.1086 (0.1261)  data: 0.0014 (0.0186)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:36,152 maskrcnn_benchmark.trainer INFO: eta: 1:02:03  iter: 10460  loss: 0.5512 (0.7350)  loss_classifier: 0.1910 (0.2673)  loss_box_reg: 0.0778 (0.1185)  loss_mask: 0.2328 (0.2932)  loss_objectness: 0.0156 (0.0358)  loss_rpn_box_reg: 0.0052 (0.0202)  time: 0.1078 (0.1260)  data: 0.0015 (0.0186)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:38,314 maskrcnn_benchmark.trainer INFO: eta: 1:01:59  iter: 10480  loss: 0.6008 (0.7349)  loss_classifier: 0.2002 (0.2672)  loss_box_reg: 0.0973 (0.1185)  loss_mask: 0.2619 (0.2932)  loss_objectness: 0.0184 (0.0358)  loss_rpn_box_reg: 0.0136 (0.0202)  time: 0.1074 (0.1260)  data: 0.0014 (0.0185)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:40,495 maskrcnn_benchmark.trainer INFO: eta: 1:01:56  iter: 10500  loss: 0.4825 (0.7344)  loss_classifier: 0.1576 (0.2670)  loss_box_reg: 0.0764 (0.1185)  loss_mask: 0.2176 (0.2930)  loss_objectness: 0.0137 (0.0357)  loss_rpn_box_reg: 0.0055 (0.0202)  time: 0.1090 (0.1260)  data: 0.0014 (0.0185)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:42,676 maskrcnn_benchmark.trainer INFO: eta: 1:01:52  iter: 10520  loss: 0.5590 (0.7341)  loss_classifier: 0.1683 (0.2668)  loss_box_reg: 0.0885 (0.1184)  loss_mask: 0.2527 (0.2929)  loss_objectness: 0.0154 (0.0357)  loss_rpn_box_reg: 0.0077 (0.0202)  time: 0.1086 (0.1259)  data: 0.0014 (0.0185)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:44,856 maskrcnn_benchmark.trainer INFO: eta: 1:01:49  iter: 10540  loss: 0.5120 (0.7337)  loss_classifier: 0.1862 (0.2667)  loss_box_reg: 0.0799 (0.1184)  loss_mask: 0.2440 (0.2928)  loss_objectness: 0.0134 (0.0357)  loss_rpn_box_reg: 0.0088 (0.0202)  time: 0.1091 (0.1259)  data: 0.0014 (0.0185)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:47,021 maskrcnn_benchmark.trainer INFO: eta: 1:01:45  iter: 10560  loss: 0.6835 (0.7335)  loss_classifier: 0.2136 (0.2665)  loss_box_reg: 0.1091 (0.1183)  loss_mask: 0.2494 (0.2928)  loss_objectness: 0.0136 (0.0356)  loss_rpn_box_reg: 0.0124 (0.0202)  time: 0.1076 (0.1259)  data: 0.0015 (0.0184)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:49,197 maskrcnn_benchmark.trainer INFO: eta: 1:01:42  iter: 10580  loss: 0.5567 (0.7331)  loss_classifier: 0.1813 (0.2664)  loss_box_reg: 0.0857 (0.1183)  loss_mask: 0.2454 (0.2927)  loss_objectness: 0.0141 (0.0356)  loss_rpn_box_reg: 0.0063 (0.0202)  time: 0.1090 (0.1258)  data: 0.0015 (0.0184)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:51,381 maskrcnn_benchmark.trainer INFO: eta: 1:01:39  iter: 10600  loss: 0.5388 (0.7328)  loss_classifier: 0.1578 (0.2662)  loss_box_reg: 0.0879 (0.1182)  loss_mask: 0.2389 (0.2926)  loss_objectness: 0.0138 (0.0356)  loss_rpn_box_reg: 0.0092 (0.0202)  time: 0.1093 (0.1258)  data: 0.0014 (0.0184)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:53,528 maskrcnn_benchmark.trainer INFO: eta: 1:01:35  iter: 10620  loss: 0.5146 (0.7324)  loss_classifier: 0.1636 (0.2660)  loss_box_reg: 0.0726 (0.1182)  loss_mask: 0.2292 (0.2925)  loss_objectness: 0.0114 (0.0356)  loss_rpn_box_reg: 0.0061 (0.0201)  time: 0.1069 (0.1258)  data: 0.0014 (0.0183)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:55,701 maskrcnn_benchmark.trainer INFO: eta: 1:01:32  iter: 10640  loss: 0.5053 (0.7320)  loss_classifier: 0.1687 (0.2659)  loss_box_reg: 0.0843 (0.1181)  loss_mask: 0.2130 (0.2924)  loss_objectness: 0.0109 (0.0355)  loss_rpn_box_reg: 0.0063 (0.0201)  time: 0.1082 (0.1258)  data: 0.0015 (0.0183)  lr: 0.016000  max mem: 5098
2020-06-23 16:12:57,873 maskrcnn_benchmark.trainer INFO: eta: 1:01:28  iter: 10660  loss: 0.5977 (0.7317)  loss_classifier: 0.2081 (0.2657)  loss_box_reg: 0.1061 (0.1181)  loss_mask: 0.2661 (0.2923)  loss_objectness: 0.0148 (0.0355)  loss_rpn_box_reg: 0.0061 (0.0201)  time: 0.1086 (0.1257)  data: 0.0015 (0.0183)  lr: 0.016000  max mem: 5098
2020-06-23 16:13:00,036 maskrcnn_benchmark.trainer INFO: eta: 1:01:25  iter: 10680  loss: 0.5204 (0.7314)  loss_classifier: 0.1627 (0.2656)  loss_box_reg: 0.0939 (0.1181)  loss_mask: 0.2373 (0.2922)  loss_objectness: 0.0151 (0.0355)  loss_rpn_box_reg: 0.0080 (0.0201)  time: 0.1073 (0.1257)  data: 0.0014 (0.0182)  lr: 0.016000  max mem: 5098
2020-06-23 16:13:02,211 maskrcnn_benchmark.trainer INFO: eta: 1:01:21  iter: 10700  loss: 0.5738 (0.7312)  loss_classifier: 0.1974 (0.2655)  loss_box_reg: 0.0985 (0.1180)  loss_mask: 0.2429 (0.2921)  loss_objectness: 0.0157 (0.0354)  loss_rpn_box_reg: 0.0060 (0.0201)  time: 0.1089 (0.1257)  data: 0.0015 (0.0182)  lr: 0.016000  max mem: 5098
2020-06-23 16:13:04,387 maskrcnn_benchmark.trainer INFO: eta: 1:01:18  iter: 10720  loss: 0.5835 (0.7310)  loss_classifier: 0.2016 (0.2654)  loss_box_reg: 0.0915 (0.1180)  loss_mask: 0.2474 (0.2921)  loss_objectness: 0.0216 (0.0354)  loss_rpn_box_reg: 0.0058 (0.0201)  time: 0.1087 (0.1256)  data: 0.0015 (0.0182)  lr: 0.016000  max mem: 5098
2020-06-23 16:13:06,570 maskrcnn_benchmark.trainer INFO: eta: 1:01:14  iter: 10740  loss: 0.5507 (0.7307)  loss_classifier: 0.1921 (0.2653)  loss_box_reg: 0.1024 (0.1180)  loss_mask: 0.2591 (0.2920)  loss_objectness: 0.0154 (0.0354)  loss_rpn_box_reg: 0.0057 (0.0201)  time: 0.1089 (0.1256)  data: 0.0015 (0.0181)  lr: 0.016000  max mem: 5098
2020-06-23 16:13:08,743 maskrcnn_benchmark.trainer INFO: eta: 1:01:11  iter: 10760  loss: 0.5438 (0.7304)  loss_classifier: 0.1609 (0.2651)  loss_box_reg: 0.0725 (0.1180)  loss_mask: 0.2403 (0.2919)  loss_objectness: 0.0144 (0.0354)  loss_rpn_box_reg: 0.0087 (0.0201)  time: 0.1085 (0.1256)  data: 0.0014 (0.0181)  lr: 0.016000  max mem: 5098
2020-06-23 16:13:10,916 maskrcnn_benchmark.trainer INFO: eta: 1:01:07  iter: 10780  loss: 0.5269 (0.7301)  loss_classifier: 0.1796 (0.2649)  loss_box_reg: 0.0928 (0.1179)  loss_mask: 0.2481 (0.2918)  loss_objectness: 0.0138 (0.0353)  loss_rpn_box_reg: 0.0052 (0.0201)  time: 0.1080 (0.1255)  data: 0.0014 (0.0181)  lr: 0.016000  max mem: 5098
2020-06-23 16:13:13,073 maskrcnn_benchmark.trainer INFO: eta: 1:01:04  iter: 10800  loss: 0.5569 (0.7298)  loss_classifier: 0.1899 (0.2648)  loss_box_reg: 0.0855 (0.1179)  loss_mask: 0.2384 (0.2918)  loss_objectness: 0.0158 (0.0353)  loss_rpn_box_reg: 0.0069 (0.0200)  time: 0.1076 (0.1255)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5098
2020-06-23 16:13:15,230 maskrcnn_benchmark.trainer INFO: eta: 1:01:01  iter: 10820  loss: 0.5077 (0.7294)  loss_classifier: 0.1625 (0.2646)  loss_box_reg: 0.0770 (0.1178)  loss_mask: 0.2262 (0.2917)  loss_objectness: 0.0134 (0.0353)  loss_rpn_box_reg: 0.0051 (0.0200)  time: 0.1077 (0.1255)  data: 0.0013 (0.0180)  lr: 0.016000  max mem: 5098
2020-06-23 16:13:17,418 maskrcnn_benchmark.trainer INFO: eta: 1:00:57  iter: 10840  loss: 0.5787 (0.7290)  loss_classifier: 0.1564 (0.2645)  loss_box_reg: 0.0668 (0.1177)  loss_mask: 0.2412 (0.2916)  loss_objectness: 0.0180 (0.0352)  loss_rpn_box_reg: 0.0111 (0.0200)  time: 0.1094 (0.1254)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5098
2020-06-23 16:13:19,582 maskrcnn_benchmark.trainer INFO: eta: 1:00:54  iter: 10860  loss: 0.5847 (0.7287)  loss_classifier: 0.1630 (0.2643)  loss_box_reg: 0.0875 (0.1177)  loss_mask: 0.2502 (0.2915)  loss_objectness: 0.0087 (0.0352)  loss_rpn_box_reg: 0.0071 (0.0200)  time: 0.1079 (0.1254)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5098
2020-06-23 16:13:21,742 maskrcnn_benchmark.trainer INFO: eta: 1:00:50  iter: 10880  loss: 0.4883 (0.7284)  loss_classifier: 0.1477 (0.2641)  loss_box_reg: 0.0881 (0.1176)  loss_mask: 0.2222 (0.2914)  loss_objectness: 0.0137 (0.0352)  loss_rpn_box_reg: 0.0080 (0.0200)  time: 0.1077 (0.1254)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5098
2020-06-23 16:13:23,900 maskrcnn_benchmark.trainer INFO: eta: 1:00:47  iter: 10900  loss: 0.5393 (0.7281)  loss_classifier: 0.2224 (0.2641)  loss_box_reg: 0.0813 (0.1176)  loss_mask: 0.2514 (0.2913)  loss_objectness: 0.0120 (0.0352)  loss_rpn_box_reg: 0.0059 (0.0200)  time: 0.1071 (0.1253)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5098
2020-06-23 16:13:26,071 maskrcnn_benchmark.trainer INFO: eta: 1:00:43  iter: 10920  loss: 0.5518 (0.7278)  loss_classifier: 0.1855 (0.2639)  loss_box_reg: 0.0931 (0.1176)  loss_mask: 0.2473 (0.2912)  loss_objectness: 0.0174 (0.0351)  loss_rpn_box_reg: 0.0075 (0.0200)  time: 0.1082 (0.1253)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5098
2020-06-23 16:13:28,247 maskrcnn_benchmark.trainer INFO: eta: 1:00:40  iter: 10940  loss: 0.4909 (0.7275)  loss_classifier: 0.1563 (0.2638)  loss_box_reg: 0.0716 (0.1175)  loss_mask: 0.2300 (0.2911)  loss_objectness: 0.0098 (0.0351)  loss_rpn_box_reg: 0.0066 (0.0200)  time: 0.1082 (0.1253)  data: 0.0014 (0.0178)  lr: 0.016000  max mem: 5098
2020-06-23 16:13:30,419 maskrcnn_benchmark.trainer INFO: eta: 1:00:37  iter: 10960  loss: 0.5066 (0.7272)  loss_classifier: 0.1821 (0.2636)  loss_box_reg: 0.0907 (0.1175)  loss_mask: 0.2258 (0.2910)  loss_objectness: 0.0108 (0.0351)  loss_rpn_box_reg: 0.0091 (0.0200)  time: 0.1084 (0.1252)  data: 0.0015 (0.0178)  lr: 0.016000  max mem: 5098

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0


Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0


Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0
Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0
Grad overflow on iteration  10967
Using dynamic loss scale of  65536.0
2020-06-23 16:13:32,615 maskrcnn_benchmark.trainer INFO: eta: 1:00:33  iter: 10980  loss: 0.5375 (0.7268)  loss_classifier: 0.1694 (0.2635)  loss_box_reg: 0.0803 (0.1174)  loss_mask: 0.2360 (0.2909)  loss_objectness: 0.0153 (0.0350)  loss_rpn_box_reg: 0.0053 (0.0200)  time: 0.1092 (0.1252)  data: 0.0014 (0.0178)  lr: 0.016000  max mem: 5098
2020-06-23 16:13:34,775 maskrcnn_benchmark.trainer INFO: eta: 1:00:30  iter: 11000  loss: 0.4827 (0.7264)  loss_classifier: 0.1539 (0.2633)  loss_box_reg: 0.0714 (0.1174)  loss_mask: 0.2317 (0.2908)  loss_objectness: 0.0100 (0.0350)  loss_rpn_box_reg: 0.0080 (0.0199)  time: 0.1078 (0.1252)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5098
:::MLLOG {"namespace": "", "time_ms": 1592954015192, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 12}}
:::MLLOG {"namespace": "", "time_ms": 1592954015192, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 12}}
:::MLLOG {"namespace": "", "time_ms": 1592954015193, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 12}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 16:13:35,393 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.27s)
Done (t=0.26s)
creating index...
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
index created!
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 16:13:35,697 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
index created!
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.56it/s]
 28%|       | 22/79 [00:01<00:05,  9.61it/s]
 32%|      | 25/79 [00:01<00:04, 11.89it/s]
 35%|      | 28/79 [00:01<00:03, 14.31it/s]
 39%|      | 31/79 [00:01<00:02, 16.46it/s]
 43%|     | 34/79 [00:02<00:02, 18.55it/s]
 47%|     | 37/79 [00:02<00:02, 20.30it/s]
 51%|     | 40/79 [00:02<00:01, 21.83it/s]
 54%|    | 43/79 [00:02<00:01, 23.04it/s]
 58%|    | 46/79 [00:02<00:01, 23.94it/s]
 62%|   | 49/79 [00:02<00:01, 24.83it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:59,  1.30it/s]
  4%|         | 3/79 [00:00<00:42,  1.80it/s]
  8%|         | 6/79 [00:01<00:29,  2.49it/s]
 11%|        | 9/79 [00:01<00:20,  3.41it/s]
 15%|        | 12/79 [00:01<00:14,  4.60it/s]
 19%|        | 15/79 [00:01<00:10,  6.11it/s]
 23%|       | 18/79 [00:01<00:07,  7.90it/s]
 27%|       | 21/79 [00:01<00:05,  9.93it/s]
 30%|       | 24/79 [00:01<00:04, 12.10it/s]
 34%|      | 27/79 [00:01<00:03, 14.23it/s]
 38%|      | 30/79 [00:01<00:03, 16.17it/s]
 42%|     | 33/79 [00:02<00:02, 18.00it/s]
 46%|     | 36/79 [00:02<00:02, 19.74it/s]
 49%|     | 39/79 [00:02<00:01, 21.20it/s]
 53%|    | 42/79 [00:02<00:01, 22.09it/s]
 57%|    | 45/79 [00:02<00:01, 22.88it/s]
 61%|    | 48/79 [00:02<00:01, 23.70it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.48it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 14.06it/s]
 39%|      | 31/79 [00:02<00:02, 16.50it/s]
 43%|     | 34/79 [00:02<00:02, 18.56it/s]
 47%|     | 37/79 [00:02<00:02, 20.47it/s]
 51%|     | 40/79 [00:02<00:01, 21.84it/s]
 54%|    | 43/79 [00:02<00:01, 22.91it/s]
 58%|    | 46/79 [00:02<00:01, 23.86it/s]
 62%|   | 49/79 [00:02<00:01, 24.38it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.59it/s]
 35%|      | 28/79 [00:01<00:03, 13.91it/s]
 39%|      | 31/79 [00:02<00:02, 16.24it/s]
 43%|     | 34/79 [00:02<00:02, 18.15it/s]
 47%|     | 37/79 [00:02<00:02, 20.03it/s]
 51%|     | 40/79 [00:02<00:01, 21.52it/s]
 54%|    | 43/79 [00:02<00:01, 22.65it/s]
 58%|    | 46/79 [00:02<00:01, 23.61it/s]
 62%|   | 49/79 [00:02<00:01, 24.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  4%|         | 3/79 [00:00<00:45,  1.66it/s]
  8%|         | 6/79 [00:01<00:31,  2.30it/s]
 11%|        | 9/79 [00:01<00:22,  3.16it/s]
 15%|        | 12/79 [00:01<00:15,  4.29it/s]
 19%|        | 15/79 [00:01<00:11,  5.73it/s]
 23%|       | 18/79 [00:01<00:08,  7.47it/s]
 27%|       | 21/79 [00:01<00:06,  9.49it/s]
 30%|       | 24/79 [00:01<00:04, 11.74it/s]
 34%|      | 27/79 [00:01<00:03, 14.09it/s]
 38%|      | 30/79 [00:02<00:03, 16.26it/s]
 42%|     | 33/79 [00:02<00:02, 18.17it/s]
 46%|     | 36/79 [00:02<00:02, 20.01it/s]
 49%|     | 39/79 [00:02<00:01, 21.46it/s]
 53%|    | 42/79 [00:02<00:01, 22.63it/s]
 57%|    | 45/79 [00:02<00:01, 23.57it/s]
 61%|    | 48/79 [00:02<00:01, 24.28it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.34it/s]
 32%|      | 25/79 [00:01<00:04, 11.54it/s]
 35%|      | 28/79 [00:01<00:03, 13.86it/s]
 39%|      | 31/79 [00:02<00:02, 16.12it/s]
 43%|     | 34/79 [00:02<00:02, 18.29it/s]
 47%|     | 37/79 [00:02<00:02, 19.94it/s]
 51%|     | 40/79 [00:02<00:01, 21.21it/s]
 54%|    | 43/79 [00:02<00:01, 22.46it/s]
 58%|    | 46/79 [00:02<00:01, 23.30it/s]
 62%|   | 49/79 [00:02<00:01, 24.15it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.24it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.49it/s]
 35%|      | 28/79 [00:01<00:03, 13.89it/s]
 39%|      | 31/79 [00:02<00:02, 16.28it/s]
 43%|     | 34/79 [00:02<00:02, 18.34it/s]
 47%|     | 37/79 [00:02<00:02, 20.36it/s]
 51%|     | 40/79 [00:02<00:01, 21.75it/s]
 54%|    | 43/79 [00:02<00:01, 22.90it/s]
 58%|    | 46/79 [00:02<00:01, 23.36it/s]
 62%|   | 49/79 [00:02<00:01, 24.21it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  4%|         | 3/79 [00:01<00:50,  1.50it/s]
  8%|         | 6/79 [00:01<00:34,  2.09it/s]
 11%|        | 9/79 [00:01<00:24,  2.89it/s]
 15%|        | 12/79 [00:01<00:17,  3.94it/s]
 19%|        | 15/79 [00:01<00:12,  5.29it/s]
 23%|       | 18/79 [00:01<00:08,  6.96it/s]
 27%|       | 21/79 [00:01<00:06,  8.93it/s]
 30%|       | 24/79 [00:01<00:04, 11.14it/s]
 34%|      | 27/79 [00:01<00:03, 13.46it/s]
 38%|      | 30/79 [00:02<00:03, 15.76it/s]
 42%|     | 33/79 [00:02<00:02, 17.79it/s]
 46%|     | 36/79 [00:02<00:02, 19.61it/s]
 49%|     | 39/79 [00:02<00:01, 21.06it/s]
 53%|    | 42/79 [00:02<00:01, 22.19it/s]
 57%|    | 45/79 [00:02<00:01, 23.18it/s]
 61%|    | 48/79 [00:02<00:01, 23.87it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.17it/s]
 20%|        | 16/79 [00:01<00:11,  5.57it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.51it/s]
 35%|      | 28/79 [00:01<00:03, 13.87it/s]
 39%|      | 31/79 [00:02<00:02, 16.08it/s]
 43%|     | 34/79 [00:02<00:02, 18.08it/s]
 47%|     | 37/79 [00:02<00:02, 20.04it/s]
 51%|     | 40/79 [00:02<00:01, 21.21it/s]
 54%|    | 43/79 [00:02<00:01, 22.10it/s]
 58%|    | 46/79 [00:02<00:01, 23.26it/s]
 62%|   | 49/79 [00:02<00:01, 23.83it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.17it/s]
 32%|      | 25/79 [00:01<00:04, 11.37it/s]
 35%|      | 28/79 [00:01<00:03, 13.73it/s]
 39%|      | 31/79 [00:02<00:03, 15.85it/s]
 43%|     | 34/79 [00:02<00:02, 17.99it/s]
 47%|     | 37/79 [00:02<00:02, 19.65it/s]
 51%|     | 40/79 [00:02<00:01, 21.29it/s]
 54%|    | 43/79 [00:02<00:01, 22.46it/s]
 58%|    | 46/79 [00:02<00:01, 23.60it/s]
 62%|   | 49/79 [00:02<00:01, 24.24it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.57it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.48it/s]
 35%|      | 28/79 [00:01<00:03, 13.73it/s]
 39%|      | 31/79 [00:02<00:03, 15.90it/s]
 43%|     | 34/79 [00:02<00:02, 17.92it/s]
 47%|     | 37/79 [00:02<00:02, 19.61it/s]
 51%|     | 40/79 [00:02<00:01, 21.09it/s]
 54%|    | 43/79 [00:02<00:01, 22.07it/s]
 58%|    | 46/79 [00:02<00:01, 22.72it/s]
 62%|   | 49/79 [00:02<00:01, 23.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.24it/s]
 28%|       | 22/79 [00:01<00:06,  9.23it/s]
 32%|      | 25/79 [00:01<00:04, 11.38it/s]
 35%|      | 28/79 [00:01<00:03, 13.64it/s]
 39%|      | 31/79 [00:02<00:03, 15.88it/s]
 43%|     | 34/79 [00:02<00:02, 17.93it/s]
 47%|     | 37/79 [00:02<00:02, 19.57it/s]
 51%|     | 40/79 [00:02<00:01, 21.10it/s]
 54%|    | 43/79 [00:02<00:01, 22.38it/s]
 58%|    | 46/79 [00:02<00:01, 23.16it/s]
 62%|   | 49/79 [00:02<00:01, 23.93it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.21it/s]
 28%|       | 22/79 [00:01<00:06,  9.16it/s]
 32%|      | 25/79 [00:01<00:04, 11.37it/s]
 35%|      | 28/79 [00:01<00:03, 13.70it/s]
 39%|      | 31/79 [00:02<00:02, 16.00it/s]
 43%|     | 34/79 [00:02<00:02, 18.23it/s]
 47%|     | 37/79 [00:02<00:02, 19.88it/s]
 51%|     | 40/79 [00:02<00:01, 21.28it/s]
 54%|    | 43/79 [00:02<00:01, 22.56it/s]
 58%|    | 46/79 [00:02<00:01, 23.30it/s]
 62%|   | 49/79 [00:02<00:01, 24.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.25it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.41it/s]
 35%|      | 28/79 [00:01<00:03, 13.65it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.84it/s]
 47%|     | 37/79 [00:02<00:02, 19.69it/s]
 51%|     | 40/79 [00:02<00:01, 21.06it/s]
 54%|    | 43/79 [00:02<00:01, 22.12it/s]
 58%|    | 46/79 [00:02<00:01, 23.14it/s]
 62%|   | 49/79 [00:02<00:01, 23.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.21it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.41it/s]
 35%|      | 28/79 [00:01<00:03, 13.69it/s]
 39%|      | 31/79 [00:02<00:03, 15.85it/s]
 43%|     | 34/79 [00:02<00:02, 17.97it/s]
 47%|     | 37/79 [00:02<00:02, 19.70it/s]
 51%|     | 40/79 [00:02<00:01, 21.22it/s]
 54%|    | 43/79 [00:02<00:01, 22.26it/s]
 58%|    | 46/79 [00:02<00:01, 22.95it/s]
 62%|   | 49/79 [00:02<00:01, 23.64it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.13it/s]
 28%|       | 22/79 [00:01<00:06,  9.06it/s]
 32%|      | 25/79 [00:01<00:04, 11.25it/s]
 35%|      | 28/79 [00:01<00:03, 13.49it/s]
 39%|      | 31/79 [00:02<00:03, 15.89it/s]
 43%|     | 34/79 [00:02<00:02, 17.94it/s]
 47%|     | 37/79 [00:02<00:02, 19.65it/s]
 51%|     | 40/79 [00:02<00:01, 21.26it/s]
 54%|    | 43/79 [00:02<00:01, 22.38it/s]
 58%|    | 46/79 [00:02<00:01, 23.35it/s]
 62%|   | 49/79 [00:02<00:01, 23.94it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.48it/s]
 24%|       | 19/79 [00:01<00:08,  7.17it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.30it/s]
 35%|      | 28/79 [00:01<00:03, 13.58it/s]
 39%|      | 31/79 [00:02<00:03, 15.69it/s]
 43%|     | 34/79 [00:02<00:02, 17.78it/s]
 47%|     | 37/79 [00:02<00:02, 19.46it/s]
 51%|     | 40/79 [00:02<00:01, 20.84it/s]
 54%|    | 43/79 [00:02<00:01, 22.13it/s]
 58%|    | 46/79 [00:02<00:01, 22.95it/s]
 62%|   | 49/79 [00:02<00:01, 23.33it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.46it/s]
 35%|      | 28/79 [00:01<00:03, 13.69it/s]
 39%|      | 31/79 [00:02<00:03, 15.98it/s]
 43%|     | 34/79 [00:02<00:02, 17.85it/s]
 47%|     | 37/79 [00:02<00:02, 19.46it/s]
 51%|     | 40/79 [00:02<00:01, 20.80it/s]
 54%|    | 43/79 [00:02<00:01, 21.82it/s]
 58%|    | 46/79 [00:02<00:01, 22.55it/s]
 62%|   | 49/79 [00:02<00:01, 23.10it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.08it/s]
 28%|       | 22/79 [00:01<00:06,  9.06it/s]
 32%|      | 25/79 [00:01<00:04, 11.23it/s]
 35%|      | 28/79 [00:01<00:03, 13.58it/s]
 39%|      | 31/79 [00:02<00:03, 15.76it/s]
 43%|     | 34/79 [00:02<00:02, 17.75it/s]
 47%|     | 37/79 [00:02<00:02, 19.57it/s]
 51%|     | 40/79 [00:02<00:01, 21.16it/s]
 54%|    | 43/79 [00:02<00:01, 22.34it/s]
 58%|    | 46/79 [00:02<00:01, 22.89it/s]
 62%|   | 49/79 [00:02<00:01, 23.84it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  4%|         | 3/79 [00:00<00:47,  1.60it/s]
  8%|         | 6/79 [00:01<00:32,  2.22it/s]
 11%|        | 9/79 [00:01<00:22,  3.06it/s]
 15%|        | 12/79 [00:01<00:16,  4.15it/s]
 19%|        | 15/79 [00:01<00:11,  5.52it/s]
 23%|       | 18/79 [00:01<00:08,  7.20it/s]
 27%|       | 21/79 [00:01<00:06,  9.17it/s]
 30%|       | 24/79 [00:01<00:04, 11.33it/s]
 34%|      | 27/79 [00:01<00:03, 13.52it/s]
 38%|      | 30/79 [00:02<00:03, 15.63it/s]
 42%|     | 33/79 [00:02<00:02, 17.69it/s]
 46%|     | 36/79 [00:02<00:02, 19.48it/s]
 49%|     | 39/79 [00:02<00:01, 20.54it/s]
 53%|    | 42/79 [00:02<00:01, 21.71it/s]
 57%|    | 45/79 [00:02<00:01, 22.57it/s]
 61%|    | 48/79 [00:02<00:01, 23.12it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  3.99it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.92it/s]
 32%|      | 25/79 [00:01<00:04, 11.09it/s]
 35%|      | 28/79 [00:01<00:03, 13.36it/s]
 39%|      | 31/79 [00:02<00:03, 15.67it/s]
 43%|     | 34/79 [00:02<00:02, 17.70it/s]
 47%|     | 37/79 [00:02<00:02, 19.52it/s]
 51%|     | 40/79 [00:02<00:01, 21.00it/s]
 54%|    | 43/79 [00:02<00:01, 22.15it/s]
 58%|    | 46/79 [00:02<00:01, 23.01it/s]
 62%|   | 49/79 [00:02<00:01, 23.59it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.36it/s]
 24%|       | 19/79 [00:01<00:08,  7.02it/s]
 28%|       | 22/79 [00:01<00:06,  8.97it/s]
 32%|      | 25/79 [00:01<00:04, 11.14it/s]
 35%|      | 28/79 [00:01<00:03, 13.45it/s]
 39%|      | 31/79 [00:02<00:03, 15.67it/s]
 43%|     | 34/79 [00:02<00:02, 17.80it/s]
 47%|     | 37/79 [00:02<00:02, 19.71it/s]
 51%|     | 40/79 [00:02<00:01, 20.93it/s]
 54%|    | 43/79 [00:02<00:01, 22.21it/s]
 58%|    | 46/79 [00:02<00:01, 23.23it/s]
 62%|   | 49/79 [00:02<00:01, 24.02it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.46it/s]
 24%|       | 19/79 [00:01<00:08,  7.15it/s]
 28%|       | 22/79 [00:01<00:06,  9.12it/s]
 32%|      | 25/79 [00:01<00:04, 11.22it/s]
 35%|      | 28/79 [00:01<00:03, 13.47it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.62it/s]
 47%|     | 37/79 [00:02<00:02, 19.40it/s]
 51%|     | 40/79 [00:02<00:01, 20.77it/s]
 54%|    | 43/79 [00:02<00:01, 21.61it/s]
 58%|    | 46/79 [00:02<00:01, 22.42it/s]
 62%|   | 49/79 [00:02<00:01, 23.06it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.30it/s]
 24%|       | 19/79 [00:01<00:08,  6.95it/s]
 28%|       | 22/79 [00:01<00:06,  8.91it/s]
 32%|      | 25/79 [00:01<00:04, 11.08it/s]
 35%|      | 28/79 [00:01<00:03, 13.40it/s]
 39%|      | 31/79 [00:02<00:03, 15.72it/s]
 43%|     | 34/79 [00:02<00:02, 17.76it/s]
 47%|     | 37/79 [00:02<00:02, 19.63it/s]
 51%|     | 40/79 [00:02<00:01, 21.04it/s]
 54%|    | 43/79 [00:02<00:01, 22.28it/s]
 58%|    | 46/79 [00:02<00:01, 23.04it/s]
 62%|   | 49/79 [00:02<00:01, 23.69it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.92it/s]
 28%|       | 22/79 [00:01<00:06,  8.87it/s]
 32%|      | 25/79 [00:01<00:04, 10.98it/s]
 35%|      | 28/79 [00:02<00:03, 13.24it/s]
 39%|      | 31/79 [00:02<00:03, 15.48it/s]
 43%|     | 34/79 [00:02<00:02, 17.70it/s]
 47%|     | 37/79 [00:02<00:02, 19.43it/s]
 51%|     | 40/79 [00:02<00:01, 20.81it/s]
 54%|    | 43/79 [00:02<00:01, 22.07it/s]
 58%|    | 46/79 [00:02<00:01, 23.19it/s]
 62%|   | 49/79 [00:02<00:01, 23.97it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.97it/s]
 20%|        | 16/79 [00:01<00:11,  5.32it/s]
 24%|       | 19/79 [00:01<00:08,  6.97it/s]
 28%|       | 22/79 [00:01<00:06,  8.95it/s]
 32%|      | 25/79 [00:01<00:04, 11.13it/s]
 35%|      | 28/79 [00:01<00:03, 13.46it/s]
 39%|      | 31/79 [00:02<00:03, 15.67it/s]
 43%|     | 34/79 [00:02<00:02, 17.37it/s]
 47%|     | 37/79 [00:02<00:02, 19.06it/s]
 51%|     | 40/79 [00:02<00:01, 20.64it/s]
 54%|    | 43/79 [00:02<00:01, 21.31it/s]
 58%|    | 46/79 [00:02<00:01, 22.29it/s]
 62%|   | 49/79 [00:02<00:01, 22.86it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.09it/s]
 32%|      | 25/79 [00:01<00:04, 11.25it/s]
 35%|      | 28/79 [00:01<00:03, 13.45it/s]
 39%|      | 31/79 [00:02<00:03, 15.54it/s]
 43%|     | 34/79 [00:02<00:02, 17.37it/s]
 47%|     | 37/79 [00:02<00:02, 19.09it/s]
 51%|     | 40/79 [00:02<00:01, 20.32it/s]
 54%|    | 43/79 [00:02<00:01, 21.44it/s]
 58%|    | 46/79 [00:02<00:01, 22.15it/s]
 62%|   | 49/79 [00:02<00:01, 23.06it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.80it/s]
 16%|        | 13/79 [00:01<00:17,  3.82it/s]
 20%|        | 16/79 [00:01<00:12,  5.12it/s]
 24%|       | 19/79 [00:01<00:08,  6.74it/s]
 28%|       | 22/79 [00:01<00:06,  8.60it/s]
 32%|      | 25/79 [00:01<00:05, 10.76it/s]
 35%|      | 28/79 [00:02<00:03, 12.94it/s]
 39%|      | 31/79 [00:02<00:03, 15.26it/s]
 43%|     | 34/79 [00:02<00:02, 17.33it/s]
 47%|     | 37/79 [00:02<00:02, 19.15it/s]
 51%|     | 40/79 [00:02<00:01, 20.54it/s]
 54%|    | 43/79 [00:02<00:01, 21.78it/s]
 58%|    | 46/79 [00:02<00:01, 22.38it/s]
 62%|   | 49/79 [00:02<00:01, 23.19it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.90it/s]
 32%|      | 25/79 [00:01<00:04, 10.98it/s]
 35%|      | 28/79 [00:02<00:03, 13.24it/s]
 39%|      | 31/79 [00:02<00:03, 15.37it/s]
 43%|     | 34/79 [00:02<00:02, 17.31it/s]
 47%|     | 37/79 [00:02<00:02, 18.76it/s]
 51%|     | 40/79 [00:02<00:01, 20.21it/s]
 54%|    | 43/79 [00:02<00:01, 21.27it/s]
 58%|    | 46/79 [00:02<00:01, 22.14it/s]
 62%|   | 49/79 [00:02<00:01, 22.81it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.27it/s]
 24%|       | 19/79 [00:01<00:08,  6.90it/s]
 28%|       | 22/79 [00:01<00:06,  8.78it/s]
 32%|      | 25/79 [00:01<00:04, 10.87it/s]
 35%|      | 28/79 [00:02<00:03, 13.07it/s]
 39%|      | 31/79 [00:02<00:03, 15.24it/s]
 43%|     | 34/79 [00:02<00:02, 17.28it/s]
 47%|     | 37/79 [00:02<00:02, 19.01it/s]
 51%|     | 40/79 [00:02<00:01, 20.37it/s]
 54%|    | 43/79 [00:02<00:01, 21.65it/s]
 58%|    | 46/79 [00:02<00:01, 22.69it/s]
 62%|   | 49/79 [00:02<00:01, 23.38it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:16,  3.88it/s]
 20%|        | 16/79 [00:01<00:12,  5.19it/s]
 24%|       | 19/79 [00:01<00:08,  6.81it/s]
 28%|       | 22/79 [00:01<00:06,  8.75it/s]
 32%|      | 25/79 [00:01<00:04, 10.84it/s]
 35%|      | 28/79 [00:02<00:03, 13.04it/s]
 39%|      | 31/79 [00:02<00:03, 15.10it/s]
 43%|     | 34/79 [00:02<00:02, 17.07it/s]
 47%|     | 37/79 [00:02<00:02, 18.96it/s]
 51%|     | 40/79 [00:02<00:01, 20.06it/s]
 54%|    | 43/79 [00:02<00:01, 21.25it/s]
 58%|    | 46/79 [00:02<00:01, 21.84it/s]
 62%|   | 49/79 [00:02<00:01, 22.58it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.36it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.86it/s]
 32%|      | 25/79 [00:01<00:04, 10.94it/s]
 35%|      | 28/79 [00:02<00:03, 13.11it/s]
 39%|      | 31/79 [00:02<00:03, 15.17it/s]
 43%|     | 34/79 [00:02<00:02, 16.88it/s]
 47%|     | 37/79 [00:02<00:02, 18.31it/s]
 51%|     | 40/79 [00:02<00:01, 19.78it/s]
 54%|    | 43/79 [00:02<00:01, 20.78it/s]
 58%|    | 46/79 [00:02<00:01, 21.56it/s]
 62%|   | 49/79 [00:02<00:01, 22.20it/s]
 66%|   | 52/79 [00:03<00:01, 25.37it/s]
 70%|   | 55/79 [00:02<00:00, 25.43it/s]
 73%|  | 58/79 [00:03<00:00, 25.58it/s]
 77%|  | 61/79 [00:03<00:00, 25.69it/s]
 81%|  | 64/79 [00:03<00:00, 25.89it/s]
 85%| | 67/79 [00:03<00:00, 25.84it/s]
 89%| | 70/79 [00:03<00:00, 26.25it/s]
 92%|| 73/79 [00:03<00:00, 26.09it/s]
 96%|| 76/79 [00:03<00:00, 26.73it/s]
100%|| 79/79 [00:03<00:00, 27.37it/s]
, 24.86it/s]
 70%|   | 55/79 [00:02<00:00, 25.45it/s]
 73%|  | 58/79 [00:03<00:00, 25.66it/s]
 77%|  | 61/79 [00:03<00:00, 26.10it/s]
 81%|  | 64/79 [00:03<00:00, 26.15it/s]
 85%| | 67/79 [00:03<00:00, 26.25it/s]
 89%| | 70/79 [00:03<00:00, 26.27it/s]
 92%|| 73/79 [00:03<00:00, 26.52it/s]
 96%|| 76/79 [00:03<00:00, 27.03it/s]
100%|| 79/79 [00:03<00:00, 27.78it/s]
, 24.58it/s]
 70%|   | 55/79 [00:02<00:00, 24.95it/s]
 73%|  | 58/79 [00:03<00:00, 25.07it/s]
 77%|  | 61/79 [00:03<00:00, 25.38it/s]
 81%|  | 64/79 [00:03<00:00, 25.33it/s]
 85%| | 67/79 [00:03<00:00, 25.25it/s]
 89%| | 70/79 [00:03<00:00, 25.55it/s]
 92%|| 73/79 [00:03<00:00, 26.04it/s]
 96%|| 76/79 [00:03<00:00, 26.72it/s]
100%|| 79/79 [00:03<00:00, 27.56it/s]
01it/s]
 68%|   | 54/79 [00:02<00:01, 24.48it/s]
 72%|  | 57/79 [00:03<00:00, 24.66it/s]
 76%|  | 60/79 [00:03<00:00, 24.95it/s]
 80%|  | 63/79 [00:03<00:00, 24.96it/s]
 84%| | 66/79 [00:03<00:00, 24.82it/s]
 87%| | 69/79 [00:03<00:00, 24.90it/s]
 91%| | 72/79 [00:03<00:00, 25.30it/s]
 95%|| 75/79 [00:03<00:00, 26.15it/s]
 99%|| 78/79 [00:03<00:00, 27.17it/s]
100%|| 79/79 [00:03<00:00, 19.97it/s]
, 24.56it/s]
 70%|   | 55/79 [00:02<00:00, 25.10it/s]
 73%|  | 58/79 [00:03<00:00, 25.27it/s]
 77%|  | 61/79 [00:03<00:00, 25.68it/s]
 81%|  | 64/79 [00:03<00:00, 25.87it/s]
 85%| | 67/79 [00:03<00:00, 25.93it/s]
 89%| | 70/79 [00:03<00:00, 26.13it/s]
 92%|| 73/79 [00:03<00:00, 26.42it/s]
 96%|| 76/79 [00:03<00:00, 26.95it/s]
100%|| 79/79 [00:03<00:00, 27.76it/s]
, 24.17it/s]
 70%|   | 55/79 [00:02<00:00, 24.52it/s]
 73%|  | 58/79 [00:03<00:00, 24.94it/s]
 77%|  | 61/79 [00:03<00:00, 25.09it/s]
 81%|  | 64/79 [00:03<00:00, 25.25it/s]
 85%| | 67/79 [00:03<00:00, 25.59it/s]
 89%| | 70/79 [00:03<00:00, 25.82it/s]
 92%|| 73/79 [00:03<00:00, 26.06it/s]
 96%|| 76/79 [00:03<00:00, 26.83it/s]
100%|| 79/79 [00:03<00:00, 27.70it/s]
, 24.86it/s]
 70%|   | 55/79 [00:02<00:00, 24.61it/s]
 73%|  | 58/79 [00:03<00:00, 25.06it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 25.45it/s]
 85%| | 67/79 [00:03<00:00, 25.53it/s]
 89%| | 70/79 [00:03<00:00, 25.53it/s]
 92%|| 73/79 [00:03<00:00, 26.08it/s]
 96%|| 76/79 [00:03<00:00, 26.75it/s]
100%|| 79/79 [00:03<00:00, 27.54it/s]
, 24.60it/s]
 70%|   | 55/79 [00:02<00:00, 25.14it/s]
 73%|  | 58/79 [00:03<00:00, 25.31it/s]
 77%|  | 61/79 [00:03<00:00, 25.39it/s]
 81%|  | 64/79 [00:03<00:00, 25.63it/s]
 85%| | 67/79 [00:03<00:00, 25.70it/s]
 89%| | 70/79 [00:03<00:00, 25.66it/s]
 92%|| 73/79 [00:03<00:00, 26.25it/s]
 96%|| 76/79 [00:03<00:00, 26.82it/s]
100%|| 79/79 [00:03<00:00, 20.02it/s]
, 24.28it/s]
 70%|   | 55/79 [00:03<00:00, 24.88it/s]
 73%|  | 58/79 [00:03<00:00, 25.40it/s]
 77%|  | 61/79 [00:03<00:00, 25.18it/s]
 81%|  | 64/79 [00:03<00:00, 25.41it/s]
 85%| | 67/79 [00:03<00:00, 24.97it/s]
 89%| | 70/79 [00:03<00:00, 25.30it/s]
 92%|| 73/79 [00:03<00:00, 25.39it/s]
 96%|| 76/79 [00:03<00:00, 26.10it/s]
100%|| 79/79 [00:03<00:00, 26.92it/s]
, 24.52it/s]
 70%|   | 55/79 [00:03<00:00, 24.78it/s]
 73%|  | 58/79 [00:03<00:00, 25.16it/s]
 77%|  | 61/79 [00:03<00:00, 25.32it/s]
 81%|  | 64/79 [00:03<00:00, 25.55it/s]
 85%| | 67/79 [00:03<00:00, 25.85it/s]
 89%| | 70/79 [00:03<00:00, 25.88it/s]
 92%|| 73/79 [00:03<00:00, 26.27it/s]
 96%|| 76/79 [00:03<00:00, 26.77it/s]
100%|| 79/79 [00:03<00:00, 27.50it/s]
68it/s]
 68%|   | 54/79 [00:02<00:01, 24.84it/s]
 72%|  | 57/79 [00:03<00:00, 24.93it/s]
 76%|  | 60/79 [00:03<00:00, 25.28it/s]
 80%|  | 63/79 [00:03<00:00, 25.37it/s]
 84%| | 66/79 [00:03<00:00, 24.99it/s]
 87%| | 69/79 [00:03<00:00, 24.93it/s]
 91%| | 72/79 [00:03<00:00, 25.29it/s]
 95%|| 75/79 [00:03<00:00, 26.07it/s]
 99%|| 78/79 [00:03<00:00, 26.71it/s]
100%|| 79/79 [00:03<00:00, 19.82it/s]
, 24.04it/s]
 70%|   | 55/79 [00:03<00:00, 24.43it/s]
 73%|  | 58/79 [00:03<00:00, 24.76it/s]
 77%|  | 61/79 [00:03<00:00, 25.08it/s]
 81%|  | 64/79 [00:03<00:00, 25.05it/s]
 85%| | 67/79 [00:03<00:00, 25.25it/s]
 89%| | 70/79 [00:03<00:00, 25.49it/s]
 92%|| 73/79 [00:03<00:00, 26.06it/s]
 96%|| 76/79 [00:03<00:00, 26.64it/s]
100%|| 79/79 [00:03<00:00, 27.54it/s]
, 24.24it/s]
 70%|   | 55/79 [00:03<00:00, 24.73it/s]
 73%|  | 58/79 [00:03<00:00, 25.15it/s]
 77%|  | 61/79 [00:03<00:00, 25.46it/s]
 81%|  | 64/79 [00:03<00:00, 25.18it/s]
 85%| | 67/79 [00:03<00:00, 25.16it/s]
 89%| | 70/79 [00:03<00:00, 25.31it/s]
 92%|| 73/79 [00:03<00:00, 25.73it/s]
 96%|| 76/79 [00:03<00:00, 26.42it/s]
100%|| 79/79 [00:03<00:00, 27.24it/s]
, 24.38it/s]
 70%|   | 55/79 [00:03<00:00, 24.64it/s]
 73%|  | 58/79 [00:03<00:00, 25.12it/s]
 77%|  | 61/79 [00:03<00:00, 25.01it/s]
 81%|  | 64/79 [00:03<00:00, 25.30it/s]
 85%| | 67/79 [00:03<00:00, 25.20it/s]
 89%| | 70/79 [00:03<00:00, 25.42it/s]
 92%|| 73/79 [00:03<00:00, 25.49it/s]
 96%|| 76/79 [00:03<00:00, 26.13it/s]
100%|| 79/79 [00:03<00:00, 26.92it/s]
, 24.51it/s]
 70%|   | 55/79 [00:03<00:00, 25.01it/s]
 73%|  | 58/79 [00:03<00:00, 25.21it/s]
 77%|  | 61/79 [00:03<00:00, 25.55it/s]
 81%|  | 64/79 [00:03<00:00, 25.76it/s]
 85%| | 67/79 [00:03<00:00, 25.38it/s]
 89%| | 70/79 [00:03<00:00, 25.40it/s]
 92%|| 73/79 [00:03<00:00, 25.77it/s]
 96%|| 76/79 [00:03<00:00, 26.55it/s]
100%|| 79/79 [00:03<00:00, 27.32it/s]
53it/s]
 68%|   | 54/79 [00:02<00:01, 24.78it/s]
 72%|  | 57/79 [00:03<00:00, 25.23it/s]
 76%|  | 60/79 [00:03<00:00, 25.45it/s]
 80%|  | 63/79 [00:03<00:00, 25.65it/s]
 84%| | 66/79 [00:03<00:00, 25.65it/s]
 87%| | 69/79 [00:03<00:00, 25.88it/s]
 91%| | 72/79 [00:03<00:00, 26.04it/s]
 95%|| 75/79 [00:03<00:00, 26.71it/s]
 99%|| 78/79 [00:03<00:00, 27.55it/s]
100%|| 79/79 [00:04<00:00, 19.65it/s]
, 24.42it/s]
 70%|   | 55/79 [00:03<00:00, 24.77it/s]
 73%|  | 58/79 [00:03<00:00, 25.10it/s]
 77%|  | 61/79 [00:03<00:00, 25.25it/s]
 81%|  | 64/79 [00:03<00:00, 25.11it/s]
 85%| | 67/79 [00:03<00:00, 24.98it/s]
 89%| | 70/79 [00:03<00:00, 24.86it/s]
 92%|| 73/79 [00:03<00:00, 25.37it/s]
 96%|| 76/79 [00:03<00:00, 25.95it/s]
100%|| 79/79 [00:03<00:00, 26.99it/s]
, 23.54it/s]
 70%|   | 55/79 [00:03<00:01, 23.91it/s]
 73%|  | 58/79 [00:03<00:00, 24.44it/s]
 77%|  | 61/79 [00:03<00:00, 24.74it/s]
 81%|  | 64/79 [00:03<00:00, 24.83it/s]
 85%| | 67/79 [00:03<00:00, 25.29it/s]
 89%| | 70/79 [00:03<00:00, 25.15it/s]
 92%|| 73/79 [00:03<00:00, 24.78it/s]
 96%|| 76/79 [00:03<00:00, 25.73it/s]
100%|| 79/79 [00:04<00:00, 19.60it/s]
, 23.91it/s]
 70%|   | 55/79 [00:03<00:00, 24.17it/s]
 73%|  | 58/79 [00:03<00:00, 24.36it/s]
 77%|  | 61/79 [00:03<00:00, 24.76it/s]
 81%|  | 64/79 [00:03<00:00, 24.87it/s]
 85%| | 67/79 [00:03<00:00, 25.01it/s]
 89%| | 70/79 [00:03<00:00, 25.14it/s]
 92%|| 73/79 [00:03<00:00, 25.58it/s]
 96%|| 76/79 [00:03<00:00, 26.33it/s]
100%|| 79/79 [00:03<00:00, 27.26it/s]
, 24.36it/s]
 70%|   | 55/79 [00:03<00:00, 24.74it/s]
 73%|  | 58/79 [00:03<00:00, 24.75it/s]
 77%|  | 61/79 [00:03<00:00, 25.02it/s]
 81%|  | 64/79 [00:03<00:00, 25.22it/s]
 85%| | 67/79 [00:03<00:00, 25.29it/s]
 89%| | 70/79 [00:03<00:00, 25.22it/s]
 92%|| 73/79 [00:03<00:00, 25.50it/s]
 96%|| 76/79 [00:03<00:00, 26.49it/s]
100%|| 79/79 [00:03<00:00, 26.72it/s]
, 24.05it/s]
 70%|   | 55/79 [00:03<00:00, 24.49it/s]
 73%|  | 58/79 [00:03<00:00, 24.76it/s]
 77%|  | 61/79 [00:03<00:00, 24.97it/s]
 81%|  | 64/79 [00:03<00:00, 25.12it/s]
 85%| | 67/79 [00:03<00:00, 25.25it/s]
 89%| | 70/79 [00:03<00:00, 25.24it/s]
 92%|| 73/79 [00:03<00:00, 25.75it/s]
 96%|| 76/79 [00:03<00:00, 26.40it/s]
100%|| 79/79 [00:03<00:00, 27.22it/s]
, 24.47it/s]
 70%|   | 55/79 [00:03<00:00, 24.70it/s]
 73%|  | 58/79 [00:03<00:00, 24.78it/s]
 77%|  | 61/79 [00:03<00:00, 24.80it/s]
 81%|  | 64/79 [00:03<00:00, 24.92it/s]
 85%| | 67/79 [00:03<00:00, 25.17it/s]
 89%| | 70/79 [00:03<00:00, 25.26it/s]
 92%|| 73/79 [00:03<00:00, 25.72it/s]
 96%|| 76/79 [00:03<00:00, 26.32it/s]
100%|| 79/79 [00:03<00:00, 27.27it/s]
55it/s]
 68%|   | 54/79 [00:03<00:01, 24.03it/s]
 72%|  | 57/79 [00:03<00:00, 24.61it/s]
 76%|  | 60/79 [00:03<00:00, 24.55it/s]
 80%|  | 63/79 [00:03<00:00, 24.78it/s]
 84%| | 66/79 [00:03<00:00, 24.82it/s]
 87%| | 69/79 [00:03<00:00, 24.99it/s]
 91%| | 72/79 [00:03<00:00, 25.17it/s]
 95%|| 75/79 [00:03<00:00, 26.00it/s]
 99%|| 78/79 [00:03<00:00, 26.61it/s]
100%|| 79/79 [00:04<00:00, 19.47it/s]
, 24.42it/s]
 70%|   | 55/79 [00:03<00:00, 24.58it/s]
 73%|  | 58/79 [00:03<00:00, 24.79it/s]
 77%|  | 61/79 [00:03<00:00, 24.90it/s]
 81%|  | 64/79 [00:03<00:00, 24.85it/s]
 85%| | 67/79 [00:03<00:00, 25.01it/s]
 89%| | 70/79 [00:03<00:00, 25.03it/s]
 92%|| 73/79 [00:03<00:00, 25.46it/s]
 96%|| 76/79 [00:03<00:00, 26.13it/s]
100%|| 79/79 [00:03<00:00, 27.01it/s]
, 23.71it/s]
 70%|   | 55/79 [00:03<00:01, 23.81it/s]
 73%|  | 58/79 [00:03<00:00, 23.82it/s]
 77%|  | 61/79 [00:03<00:00, 24.02it/s]
 81%|  | 64/79 [00:03<00:00, 24.22it/s]
 85%| | 67/79 [00:03<00:00, 24.43it/s]
 89%| | 70/79 [00:03<00:00, 24.40it/s]
 92%|| 73/79 [00:03<00:00, 24.96it/s]
 96%|| 76/79 [00:03<00:00, 25.65it/s]
100%|| 79/79 [00:04<00:00, 26.60it/s]
, 23.10it/s]
 70%|   | 55/79 [00:03<00:01, 23.58it/s]
 73%|  | 58/79 [00:03<00:00, 24.32it/s]
 77%|  | 61/79 [00:03<00:00, 24.50it/s]
 81%|  | 64/79 [00:03<00:00, 24.67it/s]
 85%| | 67/79 [00:03<00:00, 24.77it/s]
 89%| | 70/79 [00:03<00:00, 24.89it/s]
 92%|| 73/79 [00:03<00:00, 25.27it/s]
 96%|| 76/79 [00:03<00:00, 25.99it/s]
100%|| 79/79 [00:04<00:00, 26.81it/s]
, 23.73it/s]
 70%|   | 55/79 [00:03<00:00, 24.29it/s]
 73%|  | 58/79 [00:03<00:00, 24.69it/s]
 77%|  | 61/79 [00:03<00:00, 24.83it/s]
 81%|  | 64/79 [00:03<00:00, 24.89it/s]
 85%| | 67/79 [00:03<00:00, 25.19it/s]
 89%| | 70/79 [00:03<00:00, 25.01it/s]
 92%|| 73/79 [00:03<00:00, 25.13it/s]
 96%|| 76/79 [00:03<00:00, 25.78it/s]
100%|| 79/79 [00:04<00:00, 26.57it/s]
, 23.29it/s]
 70%|   | 55/79 [00:03<00:01, 23.78it/s]
 73%|  | 58/79 [00:03<00:00, 23.93it/s]
 77%|  | 61/79 [00:03<00:00, 24.43it/s]
 81%|  | 64/79 [00:03<00:00, 24.70it/s]
 85%| | 67/79 [00:03<00:00, 24.83it/s]
 89%| | 70/79 [00:03<00:00, 24.69it/s]
 92%|| 73/79 [00:03<00:00, 24.97it/s]
 96%|| 76/79 [00:03<00:00, 25.61it/s]
100%|| 79/79 [00:04<00:00, 26.39it/s]
, 23.28it/s]
 70%|   | 55/79 [00:03<00:01, 23.52it/s]
 73%|  | 58/79 [00:03<00:00, 23.93it/s]
 77%|  | 61/79 [00:03<00:00, 24.08it/s]
 81%|  | 64/79 [00:03<00:00, 24.29it/s]
 85%| | 67/79 [00:03<00:00, 24.49it/s]
 89%| | 70/79 [00:03<00:00, 24.55it/s]
 92%|| 73/79 [00:03<00:00, 24.99it/s]
 96%|| 76/79 [00:03<00:00, 25.64it/s]
100%|| 79/79 [00:04<00:00, 26.51it/s]
, 23.25it/s]
 70%|   | 55/79 [00:03<00:01, 23.59it/s]
 73%|  | 58/79 [00:03<00:00, 23.71it/s]
 77%|  | 61/79 [00:03<00:00, 23.97it/s]
 81%|  | 64/79 [00:03<00:00, 24.10it/s]
 85%| | 67/79 [00:03<00:00, 24.21it/s]
 89%| | 70/79 [00:03<00:00, 24.31it/s]
 92%|| 73/79 [00:03<00:00, 24.80it/s]
 96%|| 76/79 [00:03<00:00, 25.56it/s]
100%|| 79/79 [00:04<00:00, 26.48it/s]
, 23.12it/s]
 70%|   | 55/79 [00:03<00:01, 23.66it/s]
 73%|  | 58/79 [00:03<00:00, 23.92it/s]
 77%|  | 61/79 [00:03<00:00, 24.25it/s]
 81%|  | 64/79 [00:03<00:00, 24.42it/s]
 85%| | 67/79 [00:03<00:00, 24.43it/s]
 89%| | 70/79 [00:03<00:00, 24.61it/s]
 92%|| 73/79 [00:03<00:00, 24.73it/s]
 96%|| 76/79 [00:03<00:00, 25.63it/s]
100%|| 79/79 [00:04<00:00, 26.42it/s]
, 22.88it/s]
 70%|   | 55/79 [00:03<00:01, 23.10it/s]
 73%|  | 58/79 [00:03<00:00, 23.37it/s]
 77%|  | 61/79 [00:03<00:00, 23.45it/s]
 81%|  | 64/79 [00:03<00:00, 23.76it/s]
 85%| | 67/79 [00:03<00:00, 23.71it/s]
 89%| | 70/79 [00:03<00:00, 23.90it/s]
 92%|| 73/79 [00:03<00:00, 24.17it/s]
 96%|| 76/79 [00:04<00:00, 24.97it/s]
100%|| 79/79 [00:04<00:00, 25.82it/s]
2020-06-23 16:13:39,928 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.230910 (0.027077825927734375 s / img per device, on 32 devices)
2020-06-23 16:13:39,947 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:13:39,947 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:13:39,966 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592954026773, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 13, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592954026774, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 13}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:13:48,534 maskrcnn_benchmark.trainer INFO: eta: 1:00:57  iter: 11020  loss: 0.5236 (0.7261)  loss_classifier: 0.1582 (0.2632)  loss_box_reg: 0.0811 (0.1173)  loss_mask: 0.2533 (0.2908)  loss_objectness: 0.0113 (0.0350)  loss_rpn_box_reg: 0.0111 (0.0199)  time: 0.1087 (0.1262)  data: 0.0015 (0.0188)  lr: 0.016000  max mem: 5098
2020-06-23 16:13:50,719 maskrcnn_benchmark.trainer INFO: eta: 1:00:54  iter: 11040  loss: 0.6216 (0.7259)  loss_classifier: 0.2150 (0.2631)  loss_box_reg: 0.1235 (0.1173)  loss_mask: 0.2501 (0.2907)  loss_objectness: 0.0144 (0.0350)  loss_rpn_box_reg: 0.0101 (0.0199)  time: 0.1093 (0.1262)  data: 0.0015 (0.0187)  lr: 0.016000  max mem: 5098
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.57s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:13:52,908 maskrcnn_benchmark.trainer INFO: eta: 1:00:50  iter: 11060  loss: 0.5640 (0.7257)  loss_classifier: 0.1743 (0.2629)  loss_box_reg: 0.0955 (0.1173)  loss_mask: 0.2407 (0.2906)  loss_objectness: 0.0108 (0.0350)  loss_rpn_box_reg: 0.0103 (0.0199)  time: 0.1085 (0.1261)  data: 0.0015 (0.0187)  lr: 0.016000  max mem: 5098
DONE (t=1.51s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37040
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.58437
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.40118
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21486
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.40053
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48818
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30901
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.48769
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51226
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.32556
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.54836
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.64934
2020-06-23 16:13:55,089 maskrcnn_benchmark.trainer INFO: eta: 1:00:47  iter: 11080  loss: 0.5328 (0.7254)  loss_classifier: 0.1572 (0.2628)  loss_box_reg: 0.0827 (0.1172)  loss_mask: 0.2292 (0.2905)  loss_objectness: 0.0109 (0.0349)  loss_rpn_box_reg: 0.0081 (0.0199)  time: 0.1087 (0.1261)  data: 0.0014 (0.0187)  lr: 0.016000  max mem: 5098
2020-06-23 16:13:57,272 maskrcnn_benchmark.trainer INFO: eta: 1:00:43  iter: 11100  loss: 0.4953 (0.7250)  loss_classifier: 0.1800 (0.2626)  loss_box_reg: 0.0852 (0.1172)  loss_mask: 0.2138 (0.2904)  loss_objectness: 0.0125 (0.0349)  loss_rpn_box_reg: 0.0085 (0.0199)  time: 0.1091 (0.1261)  data: 0.0015 (0.0186)  lr: 0.016000  max mem: 5098
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:13:59,446 maskrcnn_benchmark.trainer INFO: eta: 1:00:40  iter: 11120  loss: 0.5719 (0.7247)  loss_classifier: 0.1973 (0.2625)  loss_box_reg: 0.0816 (0.1171)  loss_mask: 0.2337 (0.2903)  loss_objectness: 0.0145 (0.0349)  loss_rpn_box_reg: 0.0074 (0.0199)  time: 0.1083 (0.1261)  data: 0.0014 (0.0186)  lr: 0.016000  max mem: 5098
DONE (t=1.51s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:14:01,612 maskrcnn_benchmark.trainer INFO: eta: 1:00:37  iter: 11140  loss: 0.4837 (0.7242)  loss_classifier: 0.1442 (0.2623)  loss_box_reg: 0.0593 (0.1171)  loss_mask: 0.2182 (0.2902)  loss_objectness: 0.0079 (0.0348)  loss_rpn_box_reg: 0.0053 (0.0199)  time: 0.1077 (0.1260)  data: 0.0014 (0.0186)  lr: 0.016000  max mem: 5098
DONE (t=2.44s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.33891
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.55526
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.35970
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15551
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36615
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.50053
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29207
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.44928
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.46986
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27384
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50659
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62933
2020-06-23 16:14:03,146 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.37039527586645427, segm mAP: 0.3389112739737384
:::MLLOG {"namespace": "", "time_ms": 1592954043147, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.37039527586645427, "SEGM": 0.3389112739737384}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 12}}
:::MLLOG {"namespace": "", "time_ms": 1592954043147, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 12}}
2020-06-23 16:14:03,903 maskrcnn_benchmark.trainer INFO: eta: 1:00:33  iter: 11160  loss: 0.4501 (0.7238)  loss_classifier: 0.1514 (0.2621)  loss_box_reg: 0.0620 (0.1170)  loss_mask: 0.2272 (0.2901)  loss_objectness: 0.0119 (0.0348)  loss_rpn_box_reg: 0.0058 (0.0198)  time: 0.1073 (0.1260)  data: 0.0015 (0.0185)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:06,067 maskrcnn_benchmark.trainer INFO: eta: 1:00:30  iter: 11180  loss: 0.5440 (0.7236)  loss_classifier: 0.1807 (0.2620)  loss_box_reg: 0.0894 (0.1170)  loss_mask: 0.2341 (0.2900)  loss_objectness: 0.0173 (0.0348)  loss_rpn_box_reg: 0.0074 (0.0199)  time: 0.1075 (0.1260)  data: 0.0015 (0.0185)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:08,220 maskrcnn_benchmark.trainer INFO: eta: 1:00:27  iter: 11200  loss: 0.5885 (0.7233)  loss_classifier: 0.2011 (0.2619)  loss_box_reg: 0.0985 (0.1169)  loss_mask: 0.2301 (0.2899)  loss_objectness: 0.0155 (0.0348)  loss_rpn_box_reg: 0.0089 (0.0199)  time: 0.1070 (0.1259)  data: 0.0015 (0.0185)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:10,406 maskrcnn_benchmark.trainer INFO: eta: 1:00:23  iter: 11220  loss: 0.5244 (0.7230)  loss_classifier: 0.2048 (0.2618)  loss_box_reg: 0.0943 (0.1169)  loss_mask: 0.2083 (0.2898)  loss_objectness: 0.0117 (0.0347)  loss_rpn_box_reg: 0.0070 (0.0198)  time: 0.1088 (0.1259)  data: 0.0014 (0.0185)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:12,579 maskrcnn_benchmark.trainer INFO: eta: 1:00:20  iter: 11240  loss: 0.5131 (0.7227)  loss_classifier: 0.1808 (0.2616)  loss_box_reg: 0.0888 (0.1168)  loss_mask: 0.2399 (0.2897)  loss_objectness: 0.0096 (0.0347)  loss_rpn_box_reg: 0.0052 (0.0198)  time: 0.1079 (0.1259)  data: 0.0014 (0.0184)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:14,753 maskrcnn_benchmark.trainer INFO: eta: 1:00:16  iter: 11260  loss: 0.5640 (0.7225)  loss_classifier: 0.1868 (0.2615)  loss_box_reg: 0.0965 (0.1168)  loss_mask: 0.2402 (0.2896)  loss_objectness: 0.0110 (0.0347)  loss_rpn_box_reg: 0.0121 (0.0198)  time: 0.1086 (0.1258)  data: 0.0015 (0.0184)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:16,917 maskrcnn_benchmark.trainer INFO: eta: 1:00:13  iter: 11280  loss: 0.4898 (0.7221)  loss_classifier: 0.1511 (0.2614)  loss_box_reg: 0.0751 (0.1167)  loss_mask: 0.2172 (0.2895)  loss_objectness: 0.0124 (0.0347)  loss_rpn_box_reg: 0.0090 (0.0198)  time: 0.1078 (0.1258)  data: 0.0014 (0.0184)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:19,102 maskrcnn_benchmark.trainer INFO: eta: 1:00:10  iter: 11300  loss: 0.5723 (0.7218)  loss_classifier: 0.1914 (0.2613)  loss_box_reg: 0.0806 (0.1167)  loss_mask: 0.2128 (0.2894)  loss_objectness: 0.0212 (0.0346)  loss_rpn_box_reg: 0.0132 (0.0198)  time: 0.1077 (0.1258)  data: 0.0014 (0.0183)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:21,282 maskrcnn_benchmark.trainer INFO: eta: 1:00:06  iter: 11320  loss: 0.5602 (0.7215)  loss_classifier: 0.1655 (0.2612)  loss_box_reg: 0.0936 (0.1167)  loss_mask: 0.2438 (0.2893)  loss_objectness: 0.0139 (0.0346)  loss_rpn_box_reg: 0.0052 (0.0198)  time: 0.1091 (0.1258)  data: 0.0014 (0.0183)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:23,471 maskrcnn_benchmark.trainer INFO: eta: 1:00:03  iter: 11340  loss: 0.4712 (0.7212)  loss_classifier: 0.1474 (0.2610)  loss_box_reg: 0.0691 (0.1166)  loss_mask: 0.2348 (0.2892)  loss_objectness: 0.0111 (0.0346)  loss_rpn_box_reg: 0.0073 (0.0198)  time: 0.1091 (0.1257)  data: 0.0014 (0.0183)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:25,652 maskrcnn_benchmark.trainer INFO: eta: 1:00:00  iter: 11360  loss: 0.5171 (0.7209)  loss_classifier: 0.1710 (0.2609)  loss_box_reg: 0.0913 (0.1166)  loss_mask: 0.2336 (0.2891)  loss_objectness: 0.0131 (0.0346)  loss_rpn_box_reg: 0.0083 (0.0198)  time: 0.1085 (0.1257)  data: 0.0015 (0.0182)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:27,832 maskrcnn_benchmark.trainer INFO: eta: 0:59:56  iter: 11380  loss: 0.4902 (0.7206)  loss_classifier: 0.1633 (0.2607)  loss_box_reg: 0.0924 (0.1165)  loss_mask: 0.2253 (0.2890)  loss_objectness: 0.0088 (0.0345)  loss_rpn_box_reg: 0.0075 (0.0198)  time: 0.1081 (0.1257)  data: 0.0015 (0.0182)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:30,009 maskrcnn_benchmark.trainer INFO: eta: 0:59:53  iter: 11400  loss: 0.5685 (0.7204)  loss_classifier: 0.1905 (0.2606)  loss_box_reg: 0.0921 (0.1165)  loss_mask: 0.2443 (0.2890)  loss_objectness: 0.0185 (0.0345)  loss_rpn_box_reg: 0.0056 (0.0198)  time: 0.1085 (0.1256)  data: 0.0015 (0.0182)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:32,169 maskrcnn_benchmark.trainer INFO: eta: 0:59:49  iter: 11420  loss: 0.5352 (0.7202)  loss_classifier: 0.1756 (0.2605)  loss_box_reg: 0.0797 (0.1165)  loss_mask: 0.2622 (0.2889)  loss_objectness: 0.0108 (0.0345)  loss_rpn_box_reg: 0.0068 (0.0198)  time: 0.1076 (0.1256)  data: 0.0015 (0.0182)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:34,347 maskrcnn_benchmark.trainer INFO: eta: 0:59:46  iter: 11440  loss: 0.5052 (0.7199)  loss_classifier: 0.1736 (0.2604)  loss_box_reg: 0.0857 (0.1165)  loss_mask: 0.2380 (0.2889)  loss_objectness: 0.0172 (0.0344)  loss_rpn_box_reg: 0.0096 (0.0198)  time: 0.1087 (0.1256)  data: 0.0015 (0.0181)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:36,508 maskrcnn_benchmark.trainer INFO: eta: 0:59:43  iter: 11460  loss: 0.5164 (0.7196)  loss_classifier: 0.1886 (0.2603)  loss_box_reg: 0.0912 (0.1164)  loss_mask: 0.2249 (0.2888)  loss_objectness: 0.0138 (0.0344)  loss_rpn_box_reg: 0.0065 (0.0198)  time: 0.1081 (0.1255)  data: 0.0015 (0.0181)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:38,678 maskrcnn_benchmark.trainer INFO: eta: 0:59:39  iter: 11480  loss: 0.5908 (0.7194)  loss_classifier: 0.2047 (0.2602)  loss_box_reg: 0.1044 (0.1164)  loss_mask: 0.2638 (0.2887)  loss_objectness: 0.0139 (0.0344)  loss_rpn_box_reg: 0.0068 (0.0198)  time: 0.1076 (0.1255)  data: 0.0015 (0.0181)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:40,842 maskrcnn_benchmark.trainer INFO: eta: 0:59:36  iter: 11500  loss: 0.4067 (0.7189)  loss_classifier: 0.1094 (0.2600)  loss_box_reg: 0.0696 (0.1163)  loss_mask: 0.2268 (0.2886)  loss_objectness: 0.0070 (0.0343)  loss_rpn_box_reg: 0.0057 (0.0197)  time: 0.1080 (0.1255)  data: 0.0013 (0.0180)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:43,011 maskrcnn_benchmark.trainer INFO: eta: 0:59:33  iter: 11520  loss: 0.5673 (0.7187)  loss_classifier: 0.1980 (0.2599)  loss_box_reg: 0.1113 (0.1163)  loss_mask: 0.2324 (0.2885)  loss_objectness: 0.0169 (0.0343)  loss_rpn_box_reg: 0.0116 (0.0197)  time: 0.1081 (0.1255)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:45,181 maskrcnn_benchmark.trainer INFO: eta: 0:59:29  iter: 11540  loss: 0.5037 (0.7184)  loss_classifier: 0.1638 (0.2597)  loss_box_reg: 0.0891 (0.1162)  loss_mask: 0.2215 (0.2884)  loss_objectness: 0.0148 (0.0343)  loss_rpn_box_reg: 0.0072 (0.0197)  time: 0.1084 (0.1254)  data: 0.0015 (0.0180)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:47,347 maskrcnn_benchmark.trainer INFO: eta: 0:59:26  iter: 11560  loss: 0.6687 (0.7182)  loss_classifier: 0.2268 (0.2596)  loss_box_reg: 0.1125 (0.1162)  loss_mask: 0.2705 (0.2884)  loss_objectness: 0.0190 (0.0343)  loss_rpn_box_reg: 0.0068 (0.0197)  time: 0.1088 (0.1254)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:49,498 maskrcnn_benchmark.trainer INFO: eta: 0:59:23  iter: 11580  loss: 0.4888 (0.7179)  loss_classifier: 0.1390 (0.2595)  loss_box_reg: 0.0805 (0.1162)  loss_mask: 0.2392 (0.2883)  loss_objectness: 0.0098 (0.0343)  loss_rpn_box_reg: 0.0045 (0.0197)  time: 0.1072 (0.1254)  data: 0.0013 (0.0179)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:51,665 maskrcnn_benchmark.trainer INFO: eta: 0:59:19  iter: 11600  loss: 0.5766 (0.7177)  loss_classifier: 0.1607 (0.2594)  loss_box_reg: 0.0895 (0.1162)  loss_mask: 0.2599 (0.2882)  loss_objectness: 0.0186 (0.0342)  loss_rpn_box_reg: 0.0155 (0.0197)  time: 0.1074 (0.1253)  data: 0.0015 (0.0179)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:53,845 maskrcnn_benchmark.trainer INFO: eta: 0:59:16  iter: 11620  loss: 0.6072 (0.7175)  loss_classifier: 0.1757 (0.2593)  loss_box_reg: 0.0778 (0.1161)  loss_mask: 0.2557 (0.2882)  loss_objectness: 0.0162 (0.0342)  loss_rpn_box_reg: 0.0070 (0.0197)  time: 0.1089 (0.1253)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:56,018 maskrcnn_benchmark.trainer INFO: eta: 0:59:13  iter: 11640  loss: 0.6163 (0.7173)  loss_classifier: 0.2199 (0.2592)  loss_box_reg: 0.1178 (0.1161)  loss_mask: 0.2497 (0.2881)  loss_objectness: 0.0168 (0.0342)  loss_rpn_box_reg: 0.0130 (0.0197)  time: 0.1080 (0.1253)  data: 0.0015 (0.0178)  lr: 0.016000  max mem: 5098
2020-06-23 16:14:58,183 maskrcnn_benchmark.trainer INFO: eta: 0:59:09  iter: 11660  loss: 0.5639 (0.7171)  loss_classifier: 0.1860 (0.2591)  loss_box_reg: 0.0918 (0.1161)  loss_mask: 0.2585 (0.2881)  loss_objectness: 0.0141 (0.0342)  loss_rpn_box_reg: 0.0049 (0.0197)  time: 0.1079 (0.1253)  data: 0.0014 (0.0178)  lr: 0.016000  max mem: 5098
2020-06-23 16:15:00,363 maskrcnn_benchmark.trainer INFO: eta: 0:59:06  iter: 11680  loss: 0.5317 (0.7168)  loss_classifier: 0.1737 (0.2589)  loss_box_reg: 0.0859 (0.1160)  loss_mask: 0.2377 (0.2880)  loss_objectness: 0.0159 (0.0342)  loss_rpn_box_reg: 0.0065 (0.0197)  time: 0.1079 (0.1252)  data: 0.0014 (0.0178)  lr: 0.016000  max mem: 5098
2020-06-23 16:15:02,538 maskrcnn_benchmark.trainer INFO: eta: 0:59:03  iter: 11700  loss: 0.5621 (0.7166)  loss_classifier: 0.1913 (0.2588)  loss_box_reg: 0.0920 (0.1160)  loss_mask: 0.2527 (0.2879)  loss_objectness: 0.0237 (0.0342)  loss_rpn_box_reg: 0.0098 (0.0197)  time: 0.1076 (0.1252)  data: 0.0015 (0.0178)  lr: 0.016000  max mem: 5098
2020-06-23 16:15:04,702 maskrcnn_benchmark.trainer INFO: eta: 0:58:59  iter: 11720  loss: 0.5173 (0.7163)  loss_classifier: 0.1707 (0.2587)  loss_box_reg: 0.0755 (0.1160)  loss_mask: 0.2291 (0.2878)  loss_objectness: 0.0151 (0.0341)  loss_rpn_box_reg: 0.0067 (0.0197)  time: 0.1081 (0.1252)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5098
2020-06-23 16:15:06,868 maskrcnn_benchmark.trainer INFO: eta: 0:58:56  iter: 11740  loss: 0.5746 (0.7161)  loss_classifier: 0.1939 (0.2586)  loss_box_reg: 0.0941 (0.1160)  loss_mask: 0.2473 (0.2878)  loss_objectness: 0.0133 (0.0341)  loss_rpn_box_reg: 0.0059 (0.0197)  time: 0.1074 (0.1251)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5098
2020-06-23 16:15:09,033 maskrcnn_benchmark.trainer INFO: eta: 0:58:53  iter: 11760  loss: 0.5284 (0.7158)  loss_classifier: 0.1517 (0.2585)  loss_box_reg: 0.0726 (0.1159)  loss_mask: 0.2432 (0.2877)  loss_objectness: 0.0127 (0.0341)  loss_rpn_box_reg: 0.0095 (0.0197)  time: 0.1077 (0.1251)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5098
2020-06-23 16:15:11,201 maskrcnn_benchmark.trainer INFO: eta: 0:58:49  iter: 11780  loss: 0.4767 (0.7155)  loss_classifier: 0.1224 (0.2583)  loss_box_reg: 0.0624 (0.1159)  loss_mask: 0.2300 (0.2876)  loss_objectness: 0.0076 (0.0341)  loss_rpn_box_reg: 0.0058 (0.0196)  time: 0.1080 (0.1251)  data: 0.0013 (0.0176)  lr: 0.016000  max mem: 5098
2020-06-23 16:15:13,371 maskrcnn_benchmark.trainer INFO: eta: 0:58:46  iter: 11800  loss: 0.4728 (0.7151)  loss_classifier: 0.1598 (0.2581)  loss_box_reg: 0.0695 (0.1158)  loss_mask: 0.2127 (0.2875)  loss_objectness: 0.0076 (0.0341)  loss_rpn_box_reg: 0.0051 (0.0196)  time: 0.1081 (0.1251)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5098
2020-06-23 16:15:15,554 maskrcnn_benchmark.trainer INFO: eta: 0:58:43  iter: 11820  loss: 0.4764 (0.7148)  loss_classifier: 0.1505 (0.2580)  loss_box_reg: 0.0786 (0.1158)  loss_mask: 0.2314 (0.2874)  loss_objectness: 0.0134 (0.0340)  loss_rpn_box_reg: 0.0058 (0.0196)  time: 0.1087 (0.1250)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5098
2020-06-23 16:15:17,721 maskrcnn_benchmark.trainer INFO: eta: 0:58:40  iter: 11840  loss: 0.5016 (0.7145)  loss_classifier: 0.1817 (0.2578)  loss_box_reg: 0.0751 (0.1157)  loss_mask: 0.2178 (0.2873)  loss_objectness: 0.0124 (0.0340)  loss_rpn_box_reg: 0.0104 (0.0196)  time: 0.1086 (0.1250)  data: 0.0015 (0.0176)  lr: 0.016000  max mem: 5098
2020-06-23 16:15:19,903 maskrcnn_benchmark.trainer INFO: eta: 0:58:36  iter: 11860  loss: 0.5914 (0.7142)  loss_classifier: 0.1943 (0.2577)  loss_box_reg: 0.0960 (0.1157)  loss_mask: 0.2338 (0.2873)  loss_objectness: 0.0147 (0.0340)  loss_rpn_box_reg: 0.0069 (0.0196)  time: 0.1086 (0.1250)  data: 0.0015 (0.0175)  lr: 0.016000  max mem: 5098
2020-06-23 16:15:22,103 maskrcnn_benchmark.trainer INFO: eta: 0:58:33  iter: 11880  loss: 0.5607 (0.7140)  loss_classifier: 0.1704 (0.2576)  loss_box_reg: 0.1049 (0.1156)  loss_mask: 0.2663 (0.2872)  loss_objectness: 0.0216 (0.0340)  loss_rpn_box_reg: 0.0090 (0.0196)  time: 0.1090 (0.1249)  data: 0.0015 (0.0175)  lr: 0.016000  max mem: 5098
2020-06-23 16:15:24,275 maskrcnn_benchmark.trainer INFO: eta: 0:58:30  iter: 11900  loss: 0.5413 (0.7137)  loss_classifier: 0.1792 (0.2575)  loss_box_reg: 0.0967 (0.1156)  loss_mask: 0.2454 (0.2871)  loss_objectness: 0.0124 (0.0339)  loss_rpn_box_reg: 0.0065 (0.0196)  time: 0.1076 (0.1249)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5098
2020-06-23 16:15:26,474 maskrcnn_benchmark.trainer INFO: eta: 0:58:27  iter: 11920  loss: 0.6268 (0.7136)  loss_classifier: 0.1953 (0.2574)  loss_box_reg: 0.0991 (0.1156)  loss_mask: 0.2616 (0.2871)  loss_objectness: 0.0166 (0.0339)  loss_rpn_box_reg: 0.0077 (0.0196)  time: 0.1098 (0.1249)  data: 0.0015 (0.0175)  lr: 0.016000  max mem: 5098
:::MLLOG {"namespace": "", "time_ms": 1592954126574, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 13}}
:::MLLOG {"namespace": "", "time_ms": 1592954126574, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 13}}
:::MLLOG {"namespace": "", "time_ms": 1592954126574, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 13}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 16:15:26,788 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.26s)
creating index...
index created!
Done (t=0.26s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
index created!
index created!
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 16:15:27,097 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.28it/s]
  5%|         | 4/79 [00:00<00:42,  1.78it/s]
  9%|         | 7/79 [00:01<00:29,  2.47it/s]
 13%|        | 10/79 [00:01<00:20,  3.40it/s]
 16%|        | 13/79 [00:01<00:14,  4.59it/s]
 20%|        | 16/79 [00:01<00:10,  6.11it/s]
 24%|       | 19/79 [00:01<00:07,  7.94it/s]
 28%|       | 22/79 [00:01<00:05, 10.04it/s]
 32%|      | 25/79 [00:01<00:04, 12.24it/s]
 35%|      | 28/79 [00:01<00:03, 14.44it/s]
 39%|      | 31/79 [00:01<00:02, 16.51it/s]
 43%|     | 34/79 [00:02<00:02, 18.53it/s]
 47%|     | 37/79 [00:02<00:02, 20.32it/s]
 51%|     | 40/79 [00:02<00:01, 21.90it/s]
 54%|    | 43/79 [00:02<00:01, 22.94it/s]
 58%|    | 46/79 [00:02<00:01, 23.83it/s]
 62%|   | 49/79 [00:02<00:01, 24.44it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.29it/s]
  5%|         | 4/79 [00:00<00:41,  1.80it/s]
  9%|         | 7/79 [00:01<00:28,  2.50it/s]
 13%|        | 10/79 [00:01<00:20,  3.42it/s]
 16%|        | 13/79 [00:01<00:14,  4.62it/s]
 20%|        | 16/79 [00:01<00:10,  6.11it/s]
 24%|       | 19/79 [00:01<00:07,  7.94it/s]
 28%|       | 22/79 [00:01<00:05, 10.04it/s]
 32%|      | 25/79 [00:01<00:04, 12.31it/s]
 35%|      | 28/79 [00:01<00:03, 14.55it/s]
 39%|      | 31/79 [00:01<00:02, 16.83it/s]
 43%|     | 34/79 [00:02<00:02, 18.40it/s]
 47%|     | 37/79 [00:02<00:02, 20.26it/s]
 51%|     | 40/79 [00:02<00:01, 21.61it/s]
 54%|    | 43/79 [00:02<00:01, 22.74it/s]
 58%|    | 46/79 [00:02<00:01, 23.84it/s]
 62%|   | 49/79 [00:02<00:01, 24.18it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  4%|         | 3/79 [00:00<00:45,  1.66it/s]
  8%|         | 6/79 [00:01<00:31,  2.30it/s]
 11%|        | 9/79 [00:01<00:22,  3.16it/s]
 15%|        | 12/79 [00:01<00:15,  4.30it/s]
 19%|        | 15/79 [00:01<00:11,  5.73it/s]
 23%|       | 18/79 [00:01<00:08,  7.48it/s]
 27%|       | 21/79 [00:01<00:06,  9.51it/s]
 30%|       | 24/79 [00:01<00:04, 11.78it/s]
 34%|      | 27/79 [00:01<00:03, 14.13it/s]
 38%|      | 30/79 [00:01<00:02, 16.34it/s]
 42%|     | 33/79 [00:02<00:02, 18.34it/s]
 46%|     | 36/79 [00:02<00:02, 20.28it/s]
 49%|     | 39/79 [00:02<00:01, 21.70it/s]
 53%|    | 42/79 [00:02<00:01, 22.92it/s]
 57%|    | 45/79 [00:02<00:01, 23.90it/s]
 61%|    | 48/79 [00:02<00:01, 24.54it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.42it/s]
 20%|        | 16/79 [00:01<00:10,  5.88it/s]
 24%|       | 19/79 [00:01<00:07,  7.63it/s]
 28%|       | 22/79 [00:01<00:05,  9.68it/s]
 32%|      | 25/79 [00:01<00:04, 11.93it/s]
 35%|      | 28/79 [00:01<00:03, 14.29it/s]
 39%|      | 31/79 [00:02<00:02, 16.47it/s]
 43%|     | 34/79 [00:02<00:02, 18.58it/s]
 47%|     | 37/79 [00:02<00:02, 20.20it/s]
 51%|     | 40/79 [00:02<00:01, 21.61it/s]
 54%|    | 43/79 [00:02<00:01, 22.68it/s]
 58%|    | 46/79 [00:02<00:01, 23.55it/s]
 62%|   | 49/79 [00:02<00:01, 24.33it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.83it/s]
 24%|       | 19/79 [00:01<00:07,  7.60it/s]
 28%|       | 22/79 [00:01<00:05,  9.63it/s]
 32%|      | 25/79 [00:01<00:04, 11.86it/s]
 35%|      | 28/79 [00:01<00:03, 14.17it/s]
 39%|      | 31/79 [00:02<00:02, 16.40it/s]
 43%|     | 34/79 [00:02<00:02, 18.41it/s]
 47%|     | 37/79 [00:02<00:02, 20.00it/s]
 51%|     | 40/79 [00:02<00:01, 21.55it/s]
 54%|    | 43/79 [00:02<00:01, 22.62it/s]
 58%|    | 46/79 [00:02<00:01, 23.28it/s]
 62%|   | 49/79 [00:02<00:01, 24.04it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.76it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:06,  9.48it/s]
 32%|      | 25/79 [00:01<00:04, 11.70it/s]
 35%|      | 28/79 [00:01<00:03, 14.00it/s]
 39%|      | 31/79 [00:02<00:02, 16.30it/s]
 43%|     | 34/79 [00:02<00:02, 18.29it/s]
 47%|     | 37/79 [00:02<00:02, 20.06it/s]
 51%|     | 40/79 [00:02<00:01, 21.34it/s]
 54%|    | 43/79 [00:02<00:01, 22.45it/s]
 58%|    | 46/79 [00:02<00:01, 23.05it/s]
 62%|   | 49/79 [00:02<00:01, 23.68it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.63it/s]
 35%|      | 28/79 [00:01<00:03, 13.98it/s]
 39%|      | 31/79 [00:02<00:02, 16.22it/s]
 43%|     | 34/79 [00:02<00:02, 18.18it/s]
 47%|     | 37/79 [00:02<00:02, 19.98it/s]
 51%|     | 40/79 [00:02<00:01, 21.35it/s]
 54%|    | 43/79 [00:02<00:01, 22.53it/s]
 58%|    | 46/79 [00:02<00:01, 23.30it/s]
 62%|   | 49/79 [00:02<00:01, 23.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  4%|         | 3/79 [00:00<00:45,  1.66it/s]
  8%|         | 6/79 [00:01<00:31,  2.31it/s]
 11%|        | 9/79 [00:01<00:22,  3.18it/s]
 15%|        | 12/79 [00:01<00:15,  4.31it/s]
 19%|        | 15/79 [00:01<00:11,  5.74it/s]
 23%|       | 18/79 [00:01<00:08,  7.49it/s]
 27%|       | 21/79 [00:01<00:06,  9.53it/s]
 30%|       | 24/79 [00:01<00:04, 11.70it/s]
 34%|      | 27/79 [00:01<00:03, 13.98it/s]
 38%|      | 30/79 [00:02<00:03, 16.14it/s]
 42%|     | 33/79 [00:02<00:02, 18.21it/s]
 46%|     | 36/79 [00:02<00:02, 20.00it/s]
 49%|     | 39/79 [00:02<00:01, 21.19it/s]
 53%|    | 42/79 [00:02<00:01, 22.41it/s]
 57%|    | 45/79 [00:02<00:01, 23.23it/s]
 61%|    | 48/79 [00:02<00:01, 23.82it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.36it/s]
 28%|       | 22/79 [00:01<00:06,  9.34it/s]
 32%|      | 25/79 [00:01<00:04, 11.59it/s]
 35%|      | 28/79 [00:01<00:03, 13.92it/s]
 39%|      | 31/79 [00:02<00:02, 16.15it/s]
 43%|     | 34/79 [00:02<00:02, 18.21it/s]
 47%|     | 37/79 [00:02<00:02, 20.07it/s]
 51%|     | 40/79 [00:02<00:01, 21.63it/s]
 54%|    | 43/79 [00:02<00:01, 22.71it/s]
 58%|    | 46/79 [00:02<00:01, 23.59it/s]
 62%|   | 49/79 [00:02<00:01, 24.25it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.32it/s]
 32%|      | 25/79 [00:01<00:04, 11.55it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:02, 16.08it/s]
 43%|     | 34/79 [00:02<00:02, 18.22it/s]
 47%|     | 37/79 [00:02<00:02, 19.93it/s]
 51%|     | 40/79 [00:02<00:01, 21.58it/s]
 54%|    | 43/79 [00:02<00:01, 22.79it/s]
 58%|    | 46/79 [00:02<00:01, 23.70it/s]
 62%|   | 49/79 [00:02<00:01, 24.47it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.33it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.53it/s]
 35%|      | 28/79 [00:01<00:03, 13.86it/s]
 39%|      | 31/79 [00:02<00:03, 16.00it/s]
 43%|     | 34/79 [00:02<00:02, 18.12it/s]
 47%|     | 37/79 [00:02<00:02, 19.79it/s]
 51%|     | 40/79 [00:02<00:01, 21.31it/s]
 54%|    | 43/79 [00:02<00:01, 22.45it/s]
 58%|    | 46/79 [00:02<00:01, 23.22it/s]
 62%|   | 49/79 [00:02<00:01, 24.02it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.78it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:05,  9.57it/s]
 32%|      | 25/79 [00:01<00:04, 11.78it/s]
 35%|      | 28/79 [00:01<00:03, 14.02it/s]
 39%|      | 31/79 [00:02<00:02, 16.30it/s]
 43%|     | 34/79 [00:02<00:02, 18.32it/s]
 47%|     | 37/79 [00:02<00:02, 20.09it/s]
 51%|     | 40/79 [00:02<00:01, 21.24it/s]
 54%|    | 43/79 [00:02<00:01, 22.21it/s]
 58%|    | 46/79 [00:02<00:01, 23.13it/s]
 62%|   | 49/79 [00:02<00:01, 23.54it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:00<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.34it/s]
 32%|      | 25/79 [00:01<00:04, 11.53it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:02, 16.03it/s]
 43%|     | 34/79 [00:02<00:02, 18.17it/s]
 47%|     | 37/79 [00:02<00:02, 19.91it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 22.32it/s]
 58%|    | 46/79 [00:02<00:01, 23.40it/s]
 62%|   | 49/79 [00:02<00:01, 24.19it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.27it/s]
  5%|         | 4/79 [00:00<00:42,  1.77it/s]
  9%|         | 7/79 [00:01<00:29,  2.45it/s]
 13%|        | 10/79 [00:01<00:20,  3.36it/s]
 16%|        | 13/79 [00:01<00:14,  4.54it/s]
 20%|        | 16/79 [00:01<00:10,  6.03it/s]
 24%|       | 19/79 [00:01<00:07,  7.79it/s]
 28%|       | 22/79 [00:01<00:05,  9.78it/s]
 32%|      | 25/79 [00:01<00:04, 11.96it/s]
 35%|      | 28/79 [00:01<00:03, 14.19it/s]
 39%|      | 31/79 [00:02<00:02, 16.34it/s]
 43%|     | 34/79 [00:02<00:02, 18.20it/s]
 47%|     | 37/79 [00:02<00:02, 19.86it/s]
 51%|     | 40/79 [00:02<00:01, 20.94it/s]
 54%|    | 43/79 [00:02<00:01, 22.01it/s]
 58%|    | 46/79 [00:02<00:01, 22.81it/s]
 62%|   | 49/79 [00:02<00:01, 23.68it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.27it/s]
 35%|      | 28/79 [00:01<00:03, 13.58it/s]
 39%|      | 31/79 [00:02<00:03, 15.88it/s]
 43%|     | 34/79 [00:02<00:02, 17.72it/s]
 47%|     | 37/79 [00:02<00:02, 19.39it/s]
 51%|     | 40/79 [00:02<00:01, 20.97it/s]
 54%|    | 43/79 [00:02<00:01, 22.13it/s]
 58%|    | 46/79 [00:02<00:01, 22.95it/s]
 62%|   | 49/79 [00:02<00:01, 23.77it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.13it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.23it/s]
 28%|       | 22/79 [00:01<00:06,  9.22it/s]
 32%|      | 25/79 [00:01<00:04, 11.44it/s]
 35%|      | 28/79 [00:01<00:03, 13.81it/s]
 39%|      | 31/79 [00:02<00:02, 16.08it/s]
 43%|     | 34/79 [00:02<00:02, 18.21it/s]
 47%|     | 37/79 [00:02<00:02, 19.86it/s]
 51%|     | 40/79 [00:02<00:01, 21.49it/s]
 54%|    | 43/79 [00:02<00:01, 22.82it/s]
 58%|    | 46/79 [00:02<00:01, 23.85it/s]
 62%|   | 49/79 [00:02<00:01, 24.51it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.32it/s]
 32%|      | 25/79 [00:01<00:04, 11.50it/s]
 35%|      | 28/79 [00:01<00:03, 13.84it/s]
 39%|      | 31/79 [00:02<00:02, 16.10it/s]
 43%|     | 34/79 [00:02<00:02, 18.07it/s]
 47%|     | 37/79 [00:02<00:02, 19.88it/s]
 51%|     | 40/79 [00:02<00:01, 21.47it/s]
 54%|    | 43/79 [00:02<00:01, 22.52it/s]
 58%|    | 46/79 [00:02<00:01, 23.19it/s]
 62%|   | 49/79 [00:02<00:01, 23.73it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.95it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.13it/s]
 35%|      | 28/79 [00:01<00:03, 13.45it/s]
 39%|      | 31/79 [00:02<00:03, 15.68it/s]
 43%|     | 34/79 [00:02<00:02, 17.84it/s]
 47%|     | 37/79 [00:02<00:02, 19.68it/s]
 51%|     | 40/79 [00:02<00:01, 21.20it/s]
 54%|    | 43/79 [00:02<00:01, 22.41it/s]
 58%|    | 46/79 [00:02<00:01, 23.41it/s]
 62%|   | 49/79 [00:02<00:01, 24.02it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.32it/s]
 32%|      | 25/79 [00:01<00:04, 11.52it/s]
 35%|      | 28/79 [00:01<00:03, 13.84it/s]
 39%|      | 31/79 [00:02<00:02, 16.24it/s]
 43%|     | 34/79 [00:02<00:02, 18.20it/s]
 47%|     | 37/79 [00:02<00:02, 20.08it/s]
 51%|     | 40/79 [00:02<00:01, 21.50it/s]
 54%|    | 43/79 [00:02<00:01, 22.77it/s]
 58%|    | 46/79 [00:02<00:01, 23.02it/s]
 62%|   | 49/79 [00:02<00:01, 23.70it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.97it/s]
 20%|        | 16/79 [00:01<00:11,  5.32it/s]
 24%|       | 19/79 [00:01<00:08,  6.98it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.11it/s]
 35%|      | 28/79 [00:01<00:03, 13.44it/s]
 39%|      | 31/79 [00:02<00:03, 15.75it/s]
 43%|     | 34/79 [00:02<00:02, 18.02it/s]
 47%|     | 37/79 [00:02<00:02, 19.79it/s]
 51%|     | 40/79 [00:02<00:01, 21.23it/s]
 54%|    | 43/79 [00:02<00:01, 22.50it/s]
 58%|    | 46/79 [00:02<00:01, 23.57it/s]
 62%|   | 49/79 [00:02<00:01, 24.04it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.48it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 28%|       | 22/79 [00:01<00:06,  9.17it/s]
 32%|      | 25/79 [00:01<00:04, 11.35it/s]
 35%|      | 28/79 [00:01<00:03, 13.69it/s]
 39%|      | 31/79 [00:02<00:03, 15.82it/s]
 43%|     | 34/79 [00:02<00:02, 17.91it/s]
 47%|     | 37/79 [00:02<00:02, 19.52it/s]
 51%|     | 40/79 [00:02<00:01, 21.05it/s]
 54%|    | 43/79 [00:02<00:01, 22.08it/s]
 58%|    | 46/79 [00:02<00:01, 23.02it/s]
 62%|   | 49/79 [00:02<00:01, 23.80it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.48it/s]
 28%|       | 22/79 [00:01<00:06,  9.47it/s]
 32%|      | 25/79 [00:01<00:04, 11.66it/s]
 35%|      | 28/79 [00:01<00:03, 13.86it/s]
 39%|      | 31/79 [00:02<00:02, 16.06it/s]
 43%|     | 34/79 [00:02<00:02, 18.06it/s]
 47%|     | 37/79 [00:02<00:02, 19.72it/s]
 51%|     | 40/79 [00:02<00:01, 21.02it/s]
 54%|    | 43/79 [00:02<00:01, 21.87it/s]
 58%|    | 46/79 [00:02<00:01, 22.78it/s]
 62%|   | 49/79 [00:02<00:01, 23.26it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  7.01it/s]
 28%|       | 22/79 [00:01<00:06,  8.98it/s]
 32%|      | 25/79 [00:01<00:04, 11.09it/s]
 35%|      | 28/79 [00:01<00:03, 13.37it/s]
 39%|      | 31/79 [00:02<00:03, 15.68it/s]
 43%|     | 34/79 [00:02<00:02, 17.80it/s]
 47%|     | 37/79 [00:02<00:02, 19.46it/s]
 51%|     | 40/79 [00:02<00:01, 21.07it/s]
 54%|    | 43/79 [00:02<00:01, 22.17it/s]
 58%|    | 46/79 [00:02<00:01, 23.16it/s]
 62%|   | 49/79 [00:02<00:01, 23.76it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.13it/s]
 28%|       | 22/79 [00:01<00:06,  9.09it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.51it/s]
 39%|      | 31/79 [00:02<00:03, 15.75it/s]
 43%|     | 34/79 [00:02<00:02, 17.87it/s]
 47%|     | 37/79 [00:02<00:02, 19.59it/s]
 51%|     | 40/79 [00:02<00:01, 20.83it/s]
 54%|    | 43/79 [00:02<00:01, 21.96it/s]
 58%|    | 46/79 [00:02<00:01, 22.96it/s]
 62%|   | 49/79 [00:02<00:01, 23.65it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.47it/s]
 28%|       | 22/79 [00:01<00:06,  9.48it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 13.72it/s]
 39%|      | 31/79 [00:02<00:03, 15.77it/s]
 43%|     | 34/79 [00:02<00:02, 17.53it/s]
 47%|     | 37/79 [00:02<00:02, 19.43it/s]
 51%|     | 40/79 [00:02<00:01, 20.51it/s]
 54%|    | 43/79 [00:02<00:01, 21.46it/s]
 58%|    | 46/79 [00:02<00:01, 21.84it/s]
 62%|   | 49/79 [00:02<00:01, 22.58it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.95it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.90it/s]
 32%|      | 25/79 [00:01<00:04, 11.07it/s]
 35%|      | 28/79 [00:01<00:03, 13.38it/s]
 39%|      | 31/79 [00:02<00:03, 15.65it/s]
 43%|     | 34/79 [00:02<00:02, 17.74it/s]
 47%|     | 37/79 [00:02<00:02, 19.76it/s]
 51%|     | 40/79 [00:02<00:01, 21.11it/s]
 54%|    | 43/79 [00:02<00:01, 22.36it/s]
 58%|    | 46/79 [00:02<00:01, 23.21it/s]
 62%|   | 49/79 [00:02<00:01, 23.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  4%|         | 3/79 [00:00<00:45,  1.67it/s]
  8%|         | 6/79 [00:01<00:31,  2.31it/s]
 11%|        | 9/79 [00:01<00:22,  3.16it/s]
 15%|        | 12/79 [00:01<00:15,  4.28it/s]
 19%|        | 15/79 [00:01<00:11,  5.69it/s]
 23%|       | 18/79 [00:01<00:08,  7.41it/s]
 27%|       | 21/79 [00:01<00:06,  9.40it/s]
 30%|       | 24/79 [00:01<00:04, 11.42it/s]
 34%|      | 27/79 [00:01<00:03, 13.64it/s]
 38%|      | 30/79 [00:02<00:03, 15.64it/s]
 42%|     | 33/79 [00:02<00:02, 17.50it/s]
 46%|     | 36/79 [00:02<00:02, 18.92it/s]
 49%|     | 39/79 [00:02<00:01, 20.16it/s]
 53%|    | 42/79 [00:02<00:01, 21.17it/s]
 57%|    | 45/79 [00:02<00:01, 22.13it/s]
 61%|    | 48/79 [00:02<00:01, 22.62it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  4%|         | 3/79 [00:00<00:48,  1.56it/s]
  8%|         | 6/79 [00:01<00:33,  2.17it/s]
 11%|        | 9/79 [00:01<00:23,  2.99it/s]
 15%|        | 12/79 [00:01<00:16,  4.06it/s]
 19%|        | 15/79 [00:01<00:11,  5.42it/s]
 23%|       | 18/79 [00:01<00:08,  7.09it/s]
 27%|       | 21/79 [00:01<00:06,  9.04it/s]
 30%|       | 24/79 [00:01<00:04, 11.18it/s]
 34%|      | 27/79 [00:01<00:03, 13.24it/s]
 38%|      | 30/79 [00:02<00:03, 15.44it/s]
 42%|     | 33/79 [00:02<00:02, 17.33it/s]
 46%|     | 36/79 [00:02<00:02, 18.78it/s]
 49%|     | 39/79 [00:02<00:01, 20.11it/s]
 53%|    | 42/79 [00:02<00:01, 21.26it/s]
 57%|    | 45/79 [00:02<00:01, 22.08it/s]
 61%|    | 48/79 [00:02<00:01, 22.72it/s]
 65%|   | 51/79 [00:02<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.86it/s]
 28%|       | 22/79 [00:01<00:06,  8.76it/s]
 32%|      | 25/79 [00:01<00:04, 10.86it/s]
 35%|      | 28/79 [00:02<00:03, 13.09it/s]
 39%|      | 31/79 [00:02<00:03, 15.22it/s]
 43%|     | 34/79 [00:02<00:02, 17.16it/s]
 47%|     | 37/79 [00:02<00:02, 18.88it/s]
 51%|     | 40/79 [00:02<00:01, 20.45it/s]
 54%|    | 43/79 [00:02<00:01, 21.41it/s]
 58%|    | 46/79 [00:02<00:01, 22.30it/s]
 62%|   | 49/79 [00:02<00:01, 22.98it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.24it/s]
 24%|       | 19/79 [00:01<00:08,  6.86it/s]
 28%|       | 22/79 [00:01<00:06,  8.77it/s]
 32%|      | 25/79 [00:01<00:04, 10.90it/s]
 35%|      | 28/79 [00:02<00:03, 13.08it/s]
 39%|      | 31/79 [00:02<00:03, 15.32it/s]
 43%|     | 34/79 [00:02<00:02, 17.36it/s]
 47%|     | 37/79 [00:02<00:02, 19.00it/s]
 51%|     | 40/79 [00:02<00:01, 20.33it/s]
 54%|    | 43/79 [00:02<00:01, 21.42it/s]
 58%|    | 46/79 [00:02<00:01, 22.27it/s]
 62%|   | 49/79 [00:02<00:01, 22.88it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.17it/s]
 28%|       | 22/79 [00:01<00:06,  9.17it/s]
 32%|      | 25/79 [00:01<00:04, 11.27it/s]
 35%|      | 28/79 [00:01<00:03, 13.43it/s]
 39%|      | 31/79 [00:02<00:03, 15.43it/s]
 43%|     | 34/79 [00:02<00:02, 17.33it/s]
 47%|     | 37/79 [00:02<00:02, 18.81it/s]
 51%|     | 40/79 [00:02<00:01, 20.05it/s]
 54%|    | 43/79 [00:02<00:01, 20.95it/s]
 58%|    | 46/79 [00:02<00:01, 22.06it/s]
 62%|   | 49/79 [00:02<00:01, 22.29it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.08it/s]
 28%|       | 22/79 [00:01<00:06,  8.96it/s]
 32%|      | 25/79 [00:01<00:04, 11.01it/s]
 35%|      | 28/79 [00:02<00:03, 13.16it/s]
 39%|      | 31/79 [00:02<00:03, 15.30it/s]
 43%|     | 34/79 [00:02<00:02, 17.15it/s]
 47%|     | 37/79 [00:02<00:02, 18.71it/s]
 51%|     | 40/79 [00:02<00:01, 19.97it/s]
 54%|    | 43/79 [00:02<00:01, 21.19it/s]
 58%|    | 46/79 [00:02<00:01, 22.08it/s]
 62%|   | 49/79 [00:02<00:01, 22.53it/s]
 66%|   | 52/79 [00:03<00:01, 24.78it/s]
 70%|   | 55/79 [00:02<00:00, 25.29it/s]
 73%|  | 58/79 [00:02<00:00, 25.50it/s]
 77%|  | 61/79 [00:03<00:00, 25.65it/s]
 81%|  | 64/79 [00:03<00:00, 25.85it/s]
 85%| | 67/79 [00:03<00:00, 25.71it/s]
 89%| | 70/79 [00:03<00:00, 25.68it/s]
 92%|| 73/79 [00:03<00:00, 26.23it/s]
 96%|| 76/79 [00:03<00:00, 26.84it/s]
100%|| 79/79 [00:03<00:00, 20.61it/s]
, 24.66it/s]
 70%|   | 55/79 [00:02<00:00, 24.48it/s]
 73%|  | 58/79 [00:03<00:00, 24.74it/s]
 77%|  | 61/79 [00:03<00:00, 25.25it/s]
 81%|  | 64/79 [00:03<00:00, 25.22it/s]
 85%| | 67/79 [00:03<00:00, 25.50it/s]
 89%| | 70/79 [00:03<00:00, 25.77it/s]
 92%|| 73/79 [00:03<00:00, 26.15it/s]
 96%|| 76/79 [00:03<00:00, 26.81it/s]
100%|| 79/79 [00:03<00:00, 27.65it/s]
, 24.77it/s]
 70%|   | 55/79 [00:02<00:00, 24.89it/s]
 73%|  | 58/79 [00:03<00:00, 25.40it/s]
 77%|  | 61/79 [00:03<00:00, 25.40it/s]
 81%|  | 64/79 [00:03<00:00, 25.23it/s]
 85%| | 67/79 [00:03<00:00, 25.25it/s]
 89%| | 70/79 [00:03<00:00, 25.69it/s]
 92%|| 73/79 [00:03<00:00, 25.52it/s]
 96%|| 76/79 [00:03<00:00, 26.32it/s]
100%|| 79/79 [00:03<00:00, 27.13it/s]
, 24.44it/s]
 70%|   | 55/79 [00:02<00:00, 24.77it/s]
 73%|  | 58/79 [00:03<00:00, 25.11it/s]
 77%|  | 61/79 [00:03<00:00, 25.43it/s]
 81%|  | 64/79 [00:03<00:00, 25.36it/s]
 85%| | 67/79 [00:03<00:00, 25.66it/s]
 89%| | 70/79 [00:03<00:00, 25.80it/s]
 92%|| 73/79 [00:03<00:00, 26.09it/s]
 96%|| 76/79 [00:03<00:00, 26.66it/s]
100%|| 79/79 [00:03<00:00, 27.56it/s]
91it/s]
 68%|   | 54/79 [00:02<00:00, 25.18it/s]
 72%|  | 57/79 [00:03<00:00, 25.32it/s]
 76%|  | 60/79 [00:03<00:00, 25.67it/s]
 80%|  | 63/79 [00:03<00:00, 25.41it/s]
 84%| | 66/79 [00:03<00:00, 25.74it/s]
 87%| | 69/79 [00:03<00:00, 25.61it/s]
 91%| | 72/79 [00:03<00:00, 25.89it/s]
 95%|| 75/79 [00:03<00:00, 26.47it/s]
 99%|| 78/79 [00:03<00:00, 27.00it/s]
100%|| 79/79 [00:03<00:00, 20.11it/s]
, 24.92it/s]
 70%|   | 55/79 [00:02<00:00, 25.33it/s]
 73%|  | 58/79 [00:03<00:00, 25.46it/s]
 77%|  | 61/79 [00:03<00:00, 25.70it/s]
 81%|  | 64/79 [00:03<00:00, 25.84it/s]
 85%| | 67/79 [00:03<00:00, 25.79it/s]
 89%| | 70/79 [00:03<00:00, 25.29it/s]
 92%|| 73/79 [00:03<00:00, 25.74it/s]
 96%|| 76/79 [00:03<00:00, 26.19it/s]
100%|| 79/79 [00:03<00:00, 27.15it/s]
, 24.51it/s]
 70%|   | 55/79 [00:02<00:00, 24.99it/s]
 73%|  | 58/79 [00:03<00:00, 25.19it/s]
 77%|  | 61/79 [00:03<00:00, 25.28it/s]
 81%|  | 64/79 [00:03<00:00, 25.52it/s]
 85%| | 67/79 [00:03<00:00, 25.62it/s]
 89%| | 70/79 [00:03<00:00, 25.77it/s]
 92%|| 73/79 [00:03<00:00, 26.08it/s]
 96%|| 76/79 [00:03<00:00, 27.12it/s]
100%|| 79/79 [00:03<00:00, 27.43it/s]
, 24.99it/s]
 70%|   | 55/79 [00:02<00:00, 25.52it/s]
 73%|  | 58/79 [00:03<00:00, 25.44it/s]
 77%|  | 61/79 [00:03<00:00, 25.44it/s]
 81%|  | 64/79 [00:03<00:00, 25.61it/s]
 85%| | 67/79 [00:03<00:00, 25.71it/s]
 89%| | 70/79 [00:03<00:00, 25.67it/s]
 92%|| 73/79 [00:03<00:00, 25.95it/s]
 96%|| 76/79 [00:03<00:00, 26.48it/s]
100%|| 79/79 [00:03<00:00, 27.43it/s]
, 24.23it/s]
 70%|   | 55/79 [00:02<00:00, 24.58it/s]
 73%|  | 58/79 [00:03<00:00, 24.46it/s]
 77%|  | 61/79 [00:03<00:00, 24.45it/s]
 81%|  | 64/79 [00:03<00:00, 24.64it/s]
 85%| | 67/79 [00:03<00:00, 24.80it/s]
 89%| | 70/79 [00:03<00:00, 24.92it/s]
 92%|| 73/79 [00:03<00:00, 25.43it/s]
 96%|| 76/79 [00:03<00:00, 26.11it/s]
100%|| 79/79 [00:03<00:00, 26.90it/s]
, 24.74it/s]
 70%|   | 55/79 [00:02<00:00, 25.03it/s]
 73%|  | 58/79 [00:03<00:00, 25.64it/s]
 77%|  | 61/79 [00:03<00:00, 25.66it/s]
 81%|  | 64/79 [00:03<00:00, 26.00it/s]
 85%| | 67/79 [00:03<00:00, 26.05it/s]
 89%| | 70/79 [00:03<00:00, 26.38it/s]
 92%|| 73/79 [00:03<00:00, 26.54it/s]
 96%|| 76/79 [00:03<00:00, 27.12it/s]
100%|| 79/79 [00:03<00:00, 27.80it/s]
17it/s]
 68%|   | 54/79 [00:02<00:01, 24.79it/s]
 72%|  | 57/79 [00:03<00:00, 25.33it/s]
 76%|  | 60/79 [00:03<00:00, 25.55it/s]
 80%|  | 63/79 [00:03<00:00, 25.49it/s]
 84%| | 66/79 [00:03<00:00, 25.48it/s]
 87%| | 69/79 [00:03<00:00, 25.64it/s]
 91%| | 72/79 [00:03<00:00, 25.50it/s]
 95%|| 75/79 [00:03<00:00, 26.28it/s]
 99%|| 78/79 [00:03<00:00, 26.69it/s]
100%|| 79/79 [00:03<00:00, 20.07it/s]
, 24.43it/s]
 70%|   | 55/79 [00:02<00:00, 24.73it/s]
 73%|  | 58/79 [00:03<00:00, 25.28it/s]
 77%|  | 61/79 [00:03<00:00, 25.58it/s]
 81%|  | 64/79 [00:03<00:00, 25.78it/s]
 85%| | 67/79 [00:03<00:00, 25.75it/s]
 89%| | 70/79 [00:03<00:00, 26.04it/s]
 92%|| 73/79 [00:03<00:00, 25.99it/s]
 96%|| 76/79 [00:03<00:00, 26.69it/s]
100%|| 79/79 [00:03<00:00, 27.45it/s]
, 23.77it/s]
 70%|   | 55/79 [00:02<00:00, 24.30it/s]
 73%|  | 58/79 [00:03<00:00, 24.59it/s]
 77%|  | 61/79 [00:03<00:00, 24.90it/s]
 81%|  | 64/79 [00:03<00:00, 24.80it/s]
 85%| | 67/79 [00:03<00:00, 24.99it/s]
 89%| | 70/79 [00:03<00:00, 24.80it/s]
 92%|| 73/79 [00:03<00:00, 25.38it/s]
 96%|| 76/79 [00:03<00:00, 26.14it/s]
100%|| 79/79 [00:03<00:00, 27.11it/s]
, 24.68it/s]
 70%|   | 55/79 [00:03<00:00, 24.96it/s]
 73%|  | 58/79 [00:03<00:00, 25.28it/s]
 77%|  | 61/79 [00:03<00:00, 25.58it/s]
 81%|  | 64/79 [00:03<00:00, 25.58it/s]
 85%| | 67/79 [00:03<00:00, 25.78it/s]
 89%| | 70/79 [00:03<00:00, 25.84it/s]
 92%|| 73/79 [00:03<00:00, 26.20it/s]
 96%|| 76/79 [00:03<00:00, 26.78it/s]
100%|| 79/79 [00:03<00:00, 27.65it/s]
, 24.18it/s]
 70%|   | 55/79 [00:02<00:00, 24.34it/s]
 73%|  | 58/79 [00:03<00:00, 24.65it/s]
 77%|  | 61/79 [00:03<00:00, 25.03it/s]
 81%|  | 64/79 [00:03<00:00, 25.38it/s]
 85%| | 67/79 [00:03<00:00, 25.18it/s]
 89%| | 70/79 [00:03<00:00, 25.12it/s]
 92%|| 73/79 [00:03<00:00, 25.72it/s]
 96%|| 76/79 [00:03<00:00, 26.39it/s]
100%|| 79/79 [00:03<00:00, 19.90it/s]
, 24.97it/s]
 70%|   | 55/79 [00:02<00:00, 25.21it/s]
 73%|  | 58/79 [00:03<00:00, 25.35it/s]
 77%|  | 61/79 [00:03<00:00, 25.45it/s]
 81%|  | 64/79 [00:03<00:00, 25.24it/s]
 85%| | 67/79 [00:03<00:00, 25.49it/s]
 89%| | 70/79 [00:03<00:00, 25.54it/s]
 92%|| 73/79 [00:03<00:00, 25.95it/s]
 96%|| 76/79 [00:03<00:00, 26.41it/s]
100%|| 79/79 [00:03<00:00, 27.19it/s]
, 24.20it/s]
 70%|   | 55/79 [00:03<00:00, 24.62it/s]
 73%|  | 58/79 [00:03<00:00, 24.66it/s]
 77%|  | 61/79 [00:03<00:00, 25.09it/s]
 81%|  | 64/79 [00:03<00:00, 25.30it/s]
 85%| | 67/79 [00:03<00:00, 25.37it/s]
 89%| | 70/79 [00:03<00:00, 25.48it/s]
 92%|| 73/79 [00:03<00:00, 25.91it/s]
 96%|| 76/79 [00:03<00:00, 26.66it/s]
100%|| 79/79 [00:03<00:00, 27.49it/s]
, 24.12it/s]
 70%|   | 55/79 [00:02<00:00, 24.86it/s]
 73%|  | 58/79 [00:03<00:00, 24.94it/s]
 77%|  | 61/79 [00:03<00:00, 24.88it/s]
 81%|  | 64/79 [00:03<00:00, 25.00it/s]
 85%| | 67/79 [00:03<00:00, 25.40it/s]
 89%| | 70/79 [00:03<00:00, 25.51it/s]
 92%|| 73/79 [00:03<00:00, 25.88it/s]
 96%|| 76/79 [00:03<00:00, 26.56it/s]
100%|| 79/79 [00:03<00:00, 19.87it/s]
, 24.57it/s]
 70%|   | 55/79 [00:03<00:00, 24.88it/s]
 73%|  | 58/79 [00:03<00:00, 24.94it/s]
 77%|  | 61/79 [00:03<00:00, 24.79it/s]
 81%|  | 64/79 [00:03<00:00, 24.63it/s]
 85%| | 67/79 [00:03<00:00, 25.11it/s]
 89%| | 70/79 [00:03<00:00, 24.72it/s]
 92%|| 73/79 [00:03<00:00, 25.12it/s]
 96%|| 76/79 [00:03<00:00, 25.88it/s]
100%|| 79/79 [00:03<00:00, 26.74it/s]
, 24.70it/s]
 70%|   | 55/79 [00:03<00:00, 24.91it/s]
 73%|  | 58/79 [00:03<00:00, 25.10it/s]
 77%|  | 61/79 [00:03<00:00, 25.45it/s]
 81%|  | 64/79 [00:03<00:00, 25.54it/s]
 85%| | 67/79 [00:03<00:00, 25.72it/s]
 89%| | 70/79 [00:03<00:00, 25.74it/s]
 92%|| 73/79 [00:03<00:00, 25.68it/s]
 96%|| 76/79 [00:03<00:00, 26.58it/s]
100%|| 79/79 [00:03<00:00, 26.76it/s]
, 23.71it/s]
 70%|   | 55/79 [00:02<00:00, 24.13it/s]
 73%|  | 58/79 [00:03<00:00, 24.40it/s]
 77%|  | 61/79 [00:03<00:00, 24.42it/s]
 81%|  | 64/79 [00:03<00:00, 24.62it/s]
 85%| | 67/79 [00:03<00:00, 24.69it/s]
 89%| | 70/79 [00:03<00:00, 24.86it/s]
 92%|| 73/79 [00:03<00:00, 25.08it/s]
 96%|| 76/79 [00:03<00:00, 25.72it/s]
100%|| 79/79 [00:03<00:00, 26.54it/s]
, 24.52it/s]
 70%|   | 55/79 [00:03<00:00, 24.76it/s]
 73%|  | 58/79 [00:03<00:00, 25.05it/s]
 77%|  | 61/79 [00:03<00:00, 25.09it/s]
 81%|  | 64/79 [00:03<00:00, 25.32it/s]
 85%| | 67/79 [00:03<00:00, 25.46it/s]
 89%| | 70/79 [00:03<00:00, 25.50it/s]
 92%|| 73/79 [00:03<00:00, 25.91it/s]
 96%|| 76/79 [00:03<00:00, 26.58it/s]
100%|| 79/79 [00:03<00:00, 27.37it/s]
, 24.26it/s]
 70%|   | 55/79 [00:03<00:00, 24.78it/s]
 73%|  | 58/79 [00:03<00:00, 25.45it/s]
 77%|  | 61/79 [00:03<00:00, 25.32it/s]
 81%|  | 64/79 [00:03<00:00, 25.54it/s]
 85%| | 67/79 [00:03<00:00, 25.63it/s]
 89%| | 70/79 [00:03<00:00, 25.81it/s]
 92%|| 73/79 [00:03<00:00, 26.01it/s]
 96%|| 76/79 [00:03<00:00, 26.60it/s]
100%|| 79/79 [00:03<00:00, 27.42it/s]
, 23.68it/s]
 70%|   | 55/79 [00:03<00:01, 23.76it/s]
 73%|  | 58/79 [00:03<00:00, 24.07it/s]
 77%|  | 61/79 [00:03<00:00, 23.97it/s]
 81%|  | 64/79 [00:03<00:00, 24.02it/s]
 85%| | 67/79 [00:03<00:00, 24.37it/s]
 89%| | 70/79 [00:03<00:00, 24.62it/s]
 92%|| 73/79 [00:03<00:00, 25.09it/s]
 96%|| 76/79 [00:03<00:00, 25.75it/s]
100%|| 79/79 [00:03<00:00, 26.63it/s]
, 24.19it/s]
 70%|   | 55/79 [00:03<00:00, 24.53it/s]
 73%|  | 58/79 [00:03<00:00, 24.92it/s]
 77%|  | 61/79 [00:03<00:00, 25.17it/s]
 81%|  | 64/79 [00:03<00:00, 25.07it/s]
 85%| | 67/79 [00:03<00:00, 25.16it/s]
 89%| | 70/79 [00:03<00:00, 25.25it/s]
 92%|| 73/79 [00:03<00:00, 25.75it/s]
 96%|| 76/79 [00:03<00:00, 26.39it/s]
100%|| 79/79 [00:03<00:00, 27.21it/s]
, 23.21it/s]
 70%|   | 55/79 [00:03<00:01, 23.77it/s]
 73%|  | 58/79 [00:03<00:00, 23.91it/s]
 77%|  | 61/79 [00:03<00:00, 24.19it/s]
 81%|  | 64/79 [00:03<00:00, 24.55it/s]
 85%| | 67/79 [00:03<00:00, 24.73it/s]
 89%| | 70/79 [00:03<00:00, 24.75it/s]
 92%|| 73/79 [00:03<00:00, 24.86it/s]
 96%|| 76/79 [00:03<00:00, 25.74it/s]
100%|| 79/79 [00:03<00:00, 26.51it/s]
, 23.56it/s]
 70%|   | 55/79 [00:03<00:01, 23.96it/s]
 73%|  | 58/79 [00:03<00:00, 24.21it/s]
 77%|  | 61/79 [00:03<00:00, 24.26it/s]
 81%|  | 64/79 [00:03<00:00, 24.55it/s]
 85%| | 67/79 [00:03<00:00, 24.70it/s]
 89%| | 70/79 [00:03<00:00, 24.87it/s]
 92%|| 73/79 [00:03<00:00, 25.40it/s]
 96%|| 76/79 [00:03<00:00, 26.32it/s]
100%|| 79/79 [00:04<00:00, 27.25it/s]
26it/s]
 68%|   | 54/79 [00:03<00:01, 23.71it/s]
 72%|  | 57/79 [00:03<00:00, 23.90it/s]
 76%|  | 60/79 [00:03<00:00, 24.07it/s]
 80%|  | 63/79 [00:03<00:00, 24.08it/s]
 84%| | 66/79 [00:03<00:00, 24.34it/s]
 87%| | 69/79 [00:03<00:00, 24.48it/s]
 91%| | 72/79 [00:03<00:00, 24.32it/s]
 95%|| 75/79 [00:03<00:00, 25.07it/s]
 99%|| 78/79 [00:04<00:00, 25.58it/s]
100%|| 79/79 [00:04<00:00, 19.28it/s]
, 22.57it/s]
 70%|   | 55/79 [00:03<00:01, 22.96it/s]
 73%|  | 58/79 [00:03<00:00, 23.71it/s]
 77%|  | 61/79 [00:03<00:00, 23.83it/s]
 81%|  | 64/79 [00:03<00:00, 23.72it/s]
 85%| | 67/79 [00:03<00:00, 23.98it/s]
 89%| | 70/79 [00:03<00:00, 24.33it/s]
 92%|| 73/79 [00:03<00:00, 24.53it/s]
 96%|| 76/79 [00:03<00:00, 25.41it/s]
100%|| 79/79 [00:04<00:00, 26.38it/s]
, 23.30it/s]
 70%|   | 55/79 [00:03<00:01, 23.81it/s]
 73%|  | 58/79 [00:03<00:00, 24.13it/s]
 77%|  | 61/79 [00:03<00:00, 24.30it/s]
 81%|  | 64/79 [00:03<00:00, 24.48it/s]
 85%| | 67/79 [00:03<00:00, 24.63it/s]
 89%| | 70/79 [00:03<00:00, 24.71it/s]
 92%|| 73/79 [00:03<00:00, 24.80it/s]
 96%|| 76/79 [00:03<00:00, 25.48it/s]
100%|| 79/79 [00:04<00:00, 26.26it/s]
99it/s]
 68%|   | 54/79 [00:03<00:01, 23.39it/s]
 72%|  | 57/79 [00:03<00:00, 23.87it/s]
 76%|  | 60/79 [00:03<00:00, 23.89it/s]
 80%|  | 63/79 [00:03<00:00, 23.71it/s]
 84%| | 66/79 [00:03<00:00, 24.07it/s]
 87%| | 69/79 [00:03<00:00, 24.17it/s]
 91%| | 72/79 [00:03<00:00, 24.31it/s]
 95%|| 75/79 [00:03<00:00, 25.14it/s]
 99%|| 78/79 [00:04<00:00, 25.67it/s]
100%|| 79/79 [00:04<00:00, 19.02it/s]
, 22.87it/s]
 70%|   | 55/79 [00:03<00:01, 23.62it/s]
 73%|  | 58/79 [00:03<00:00, 23.71it/s]
 77%|  | 61/79 [00:03<00:00, 23.73it/s]
 81%|  | 64/79 [00:03<00:00, 23.79it/s]
 85%| | 67/79 [00:03<00:00, 24.11it/s]
 89%| | 70/79 [00:03<00:00, 23.84it/s]
 92%|| 73/79 [00:03<00:00, 24.16it/s]
 96%|| 76/79 [00:03<00:00, 25.04it/s]
100%|| 79/79 [00:04<00:00, 25.97it/s]
2020-06-23 16:15:31,281 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.183726 (0.026775843811035156 s / img per device, on 32 devices)
2020-06-23 16:15:31,299 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:15:31,299 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:15:31,318 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592954138219, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 14, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592954138219, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 14}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:15:40,306 maskrcnn_benchmark.trainer INFO: eta: 0:58:51  iter: 11940  loss: 0.4418 (0.7133)  loss_classifier: 0.1355 (0.2573)  loss_box_reg: 0.0803 (0.1155)  loss_mask: 0.2286 (0.2870)  loss_objectness: 0.0101 (0.0339)  loss_rpn_box_reg: 0.0050 (0.0196)  time: 0.1094 (0.1258)  data: 0.0015 (0.0184)  lr: 0.016000  max mem: 5098
2020-06-23 16:15:42,494 maskrcnn_benchmark.trainer INFO: eta: 0:58:47  iter: 11960  loss: 0.4804 (0.7129)  loss_classifier: 0.1509 (0.2571)  loss_box_reg: 0.0695 (0.1155)  loss_mask: 0.2300 (0.2869)  loss_objectness: 0.0096 (0.0339)  loss_rpn_box_reg: 0.0066 (0.0196)  time: 0.1090 (0.1258)  data: 0.0014 (0.0184)  lr: 0.016000  max mem: 5098
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.58s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:15:44,672 maskrcnn_benchmark.trainer INFO: eta: 0:58:44  iter: 11980  loss: 0.5010 (0.7126)  loss_classifier: 0.1543 (0.2569)  loss_box_reg: 0.0842 (0.1154)  loss_mask: 0.2302 (0.2868)  loss_objectness: 0.0124 (0.0339)  loss_rpn_box_reg: 0.0066 (0.0195)  time: 0.1082 (0.1258)  data: 0.0014 (0.0184)  lr: 0.016000  max mem: 5098
DONE (t=1.54s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37369
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.58877
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.40495
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21909
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.40306
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48845
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.31063
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.49079
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51627
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.33476
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.54913
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.64375
2020-06-23 16:15:46,833 maskrcnn_benchmark.trainer INFO: eta: 0:58:41  iter: 12000  loss: 0.4478 (0.7122)  loss_classifier: 0.1359 (0.2568)  loss_box_reg: 0.0640 (0.1154)  loss_mask: 0.2146 (0.2867)  loss_objectness: 0.0146 (0.0338)  loss_rpn_box_reg: 0.0077 (0.0195)  time: 0.1075 (0.1258)  data: 0.0015 (0.0183)  lr: 0.001600  max mem: 5098
2020-06-23 16:15:49,019 maskrcnn_benchmark.trainer INFO: eta: 0:58:37  iter: 12020  loss: 0.5782 (0.7119)  loss_classifier: 0.1735 (0.2566)  loss_box_reg: 0.0854 (0.1153)  loss_mask: 0.2451 (0.2866)  loss_objectness: 0.0149 (0.0338)  loss_rpn_box_reg: 0.0054 (0.0195)  time: 0.1090 (0.1257)  data: 0.0014 (0.0183)  lr: 0.001600  max mem: 5098
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:15:51,179 maskrcnn_benchmark.trainer INFO: eta: 0:58:34  iter: 12040  loss: 0.4656 (0.7116)  loss_classifier: 0.1746 (0.2565)  loss_box_reg: 0.0885 (0.1153)  loss_mask: 0.2392 (0.2865)  loss_objectness: 0.0063 (0.0338)  loss_rpn_box_reg: 0.0055 (0.0195)  time: 0.1077 (0.1257)  data: 0.0014 (0.0183)  lr: 0.001600  max mem: 5098
DONE (t=1.50s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:15:53,350 maskrcnn_benchmark.trainer INFO: eta: 0:58:31  iter: 12060  loss: 0.6046 (0.7114)  loss_classifier: 0.1998 (0.2564)  loss_box_reg: 0.0772 (0.1152)  loss_mask: 0.2567 (0.2865)  loss_objectness: 0.0145 (0.0338)  loss_rpn_box_reg: 0.0114 (0.0195)  time: 0.1088 (0.1257)  data: 0.0015 (0.0182)  lr: 0.001600  max mem: 5098
DONE (t=2.42s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.34146
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.55572
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.36392
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15828
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36824
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.50310
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29315
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.45161
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.47302
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.28178
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50701
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62223
2020-06-23 16:15:54,888 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3736907093967439, segm mAP: 0.34145943406753504
:::MLLOG {"namespace": "", "time_ms": 1592954154889, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.3736907093967439, "SEGM": 0.34145943406753504}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 13}}
:::MLLOG {"namespace": "", "time_ms": 1592954154889, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 13}}
2020-06-23 16:15:55,654 maskrcnn_benchmark.trainer INFO: eta: 0:58:28  iter: 12080  loss: 0.5351 (0.7111)  loss_classifier: 0.1766 (0.2563)  loss_box_reg: 0.1005 (0.1152)  loss_mask: 0.2276 (0.2864)  loss_objectness: 0.0120 (0.0337)  loss_rpn_box_reg: 0.0055 (0.0195)  time: 0.1088 (0.1257)  data: 0.0015 (0.0182)  lr: 0.001600  max mem: 5098
2020-06-23 16:15:57,833 maskrcnn_benchmark.trainer INFO: eta: 0:58:25  iter: 12100  loss: 0.5211 (0.7109)  loss_classifier: 0.1693 (0.2562)  loss_box_reg: 0.0883 (0.1152)  loss_mask: 0.2398 (0.2863)  loss_objectness: 0.0150 (0.0337)  loss_rpn_box_reg: 0.0084 (0.0195)  time: 0.1083 (0.1256)  data: 0.0014 (0.0182)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:00,007 maskrcnn_benchmark.trainer INFO: eta: 0:58:21  iter: 12120  loss: 0.4816 (0.7106)  loss_classifier: 0.1617 (0.2560)  loss_box_reg: 0.0722 (0.1151)  loss_mask: 0.2213 (0.2862)  loss_objectness: 0.0087 (0.0337)  loss_rpn_box_reg: 0.0078 (0.0195)  time: 0.1079 (0.1256)  data: 0.0013 (0.0182)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:02,166 maskrcnn_benchmark.trainer INFO: eta: 0:58:18  iter: 12140  loss: 0.5140 (0.7104)  loss_classifier: 0.1881 (0.2559)  loss_box_reg: 0.0921 (0.1151)  loss_mask: 0.2453 (0.2862)  loss_objectness: 0.0124 (0.0337)  loss_rpn_box_reg: 0.0095 (0.0195)  time: 0.1080 (0.1256)  data: 0.0015 (0.0181)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:04,342 maskrcnn_benchmark.trainer INFO: eta: 0:58:15  iter: 12160  loss: 0.5699 (0.7101)  loss_classifier: 0.1755 (0.2558)  loss_box_reg: 0.0954 (0.1151)  loss_mask: 0.2484 (0.2861)  loss_objectness: 0.0222 (0.0337)  loss_rpn_box_reg: 0.0108 (0.0195)  time: 0.1081 (0.1255)  data: 0.0015 (0.0181)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:06,521 maskrcnn_benchmark.trainer INFO: eta: 0:58:11  iter: 12180  loss: 0.4987 (0.7099)  loss_classifier: 0.1632 (0.2557)  loss_box_reg: 0.0964 (0.1151)  loss_mask: 0.2269 (0.2860)  loss_objectness: 0.0143 (0.0336)  loss_rpn_box_reg: 0.0085 (0.0195)  time: 0.1086 (0.1255)  data: 0.0014 (0.0181)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:08,700 maskrcnn_benchmark.trainer INFO: eta: 0:58:08  iter: 12200  loss: 0.5214 (0.7096)  loss_classifier: 0.1605 (0.2556)  loss_box_reg: 0.0747 (0.1150)  loss_mask: 0.2404 (0.2859)  loss_objectness: 0.0147 (0.0336)  loss_rpn_box_reg: 0.0065 (0.0195)  time: 0.1081 (0.1255)  data: 0.0014 (0.0180)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:10,891 maskrcnn_benchmark.trainer INFO: eta: 0:58:05  iter: 12220  loss: 0.4702 (0.7093)  loss_classifier: 0.1622 (0.2554)  loss_box_reg: 0.0594 (0.1150)  loss_mask: 0.2304 (0.2859)  loss_objectness: 0.0145 (0.0336)  loss_rpn_box_reg: 0.0078 (0.0195)  time: 0.1090 (0.1255)  data: 0.0015 (0.0180)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:13,078 maskrcnn_benchmark.trainer INFO: eta: 0:58:02  iter: 12240  loss: 0.5824 (0.7092)  loss_classifier: 0.1927 (0.2554)  loss_box_reg: 0.1034 (0.1149)  loss_mask: 0.2357 (0.2858)  loss_objectness: 0.0167 (0.0336)  loss_rpn_box_reg: 0.0092 (0.0195)  time: 0.1089 (0.1254)  data: 0.0015 (0.0180)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:15,257 maskrcnn_benchmark.trainer INFO: eta: 0:57:58  iter: 12260  loss: 0.5261 (0.7089)  loss_classifier: 0.1824 (0.2553)  loss_box_reg: 0.0908 (0.1149)  loss_mask: 0.2352 (0.2857)  loss_objectness: 0.0188 (0.0336)  loss_rpn_box_reg: 0.0065 (0.0195)  time: 0.1088 (0.1254)  data: 0.0014 (0.0180)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:17,430 maskrcnn_benchmark.trainer INFO: eta: 0:57:55  iter: 12280  loss: 0.5329 (0.7087)  loss_classifier: 0.1738 (0.2552)  loss_box_reg: 0.0767 (0.1149)  loss_mask: 0.2546 (0.2857)  loss_objectness: 0.0150 (0.0335)  loss_rpn_box_reg: 0.0082 (0.0195)  time: 0.1077 (0.1254)  data: 0.0014 (0.0179)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:19,605 maskrcnn_benchmark.trainer INFO: eta: 0:57:52  iter: 12300  loss: 0.4739 (0.7085)  loss_classifier: 0.1466 (0.2550)  loss_box_reg: 0.0768 (0.1148)  loss_mask: 0.2352 (0.2856)  loss_objectness: 0.0127 (0.0335)  loss_rpn_box_reg: 0.0071 (0.0195)  time: 0.1081 (0.1254)  data: 0.0015 (0.0179)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:21,771 maskrcnn_benchmark.trainer INFO: eta: 0:57:49  iter: 12320  loss: 0.4548 (0.7081)  loss_classifier: 0.1372 (0.2549)  loss_box_reg: 0.0687 (0.1148)  loss_mask: 0.2342 (0.2855)  loss_objectness: 0.0090 (0.0335)  loss_rpn_box_reg: 0.0045 (0.0195)  time: 0.1078 (0.1253)  data: 0.0014 (0.0179)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:23,938 maskrcnn_benchmark.trainer INFO: eta: 0:57:45  iter: 12340  loss: 0.4391 (0.7077)  loss_classifier: 0.1320 (0.2547)  loss_box_reg: 0.0719 (0.1147)  loss_mask: 0.2371 (0.2854)  loss_objectness: 0.0086 (0.0335)  loss_rpn_box_reg: 0.0031 (0.0194)  time: 0.1084 (0.1253)  data: 0.0014 (0.0179)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:26,110 maskrcnn_benchmark.trainer INFO: eta: 0:57:42  iter: 12360  loss: 0.5105 (0.7074)  loss_classifier: 0.1525 (0.2545)  loss_box_reg: 0.0788 (0.1147)  loss_mask: 0.2527 (0.2854)  loss_objectness: 0.0138 (0.0334)  loss_rpn_box_reg: 0.0042 (0.0194)  time: 0.1086 (0.1253)  data: 0.0014 (0.0178)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:28,277 maskrcnn_benchmark.trainer INFO: eta: 0:57:39  iter: 12380  loss: 0.5922 (0.7072)  loss_classifier: 0.1945 (0.2544)  loss_box_reg: 0.0900 (0.1146)  loss_mask: 0.2441 (0.2853)  loss_objectness: 0.0209 (0.0334)  loss_rpn_box_reg: 0.0123 (0.0194)  time: 0.1080 (0.1252)  data: 0.0014 (0.0178)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:30,438 maskrcnn_benchmark.trainer INFO: eta: 0:57:36  iter: 12400  loss: 0.4550 (0.7069)  loss_classifier: 0.1385 (0.2543)  loss_box_reg: 0.0720 (0.1146)  loss_mask: 0.2352 (0.2852)  loss_objectness: 0.0092 (0.0334)  loss_rpn_box_reg: 0.0084 (0.0194)  time: 0.1073 (0.1252)  data: 0.0014 (0.0178)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:32,608 maskrcnn_benchmark.trainer INFO: eta: 0:57:32  iter: 12420  loss: 0.4285 (0.7065)  loss_classifier: 0.1243 (0.2541)  loss_box_reg: 0.0619 (0.1145)  loss_mask: 0.2250 (0.2851)  loss_objectness: 0.0096 (0.0333)  loss_rpn_box_reg: 0.0069 (0.0194)  time: 0.1083 (0.1252)  data: 0.0014 (0.0178)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:34,784 maskrcnn_benchmark.trainer INFO: eta: 0:57:29  iter: 12440  loss: 0.5111 (0.7063)  loss_classifier: 0.1792 (0.2540)  loss_box_reg: 0.0803 (0.1145)  loss_mask: 0.2452 (0.2851)  loss_objectness: 0.0124 (0.0333)  loss_rpn_box_reg: 0.0092 (0.0194)  time: 0.1082 (0.1252)  data: 0.0014 (0.0177)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:36,945 maskrcnn_benchmark.trainer INFO: eta: 0:57:26  iter: 12460  loss: 0.5441 (0.7060)  loss_classifier: 0.1770 (0.2539)  loss_box_reg: 0.0853 (0.1144)  loss_mask: 0.2382 (0.2850)  loss_objectness: 0.0114 (0.0333)  loss_rpn_box_reg: 0.0083 (0.0194)  time: 0.1071 (0.1251)  data: 0.0014 (0.0177)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:39,115 maskrcnn_benchmark.trainer INFO: eta: 0:57:23  iter: 12480  loss: 0.5739 (0.7059)  loss_classifier: 0.1881 (0.2538)  loss_box_reg: 0.0908 (0.1144)  loss_mask: 0.2438 (0.2849)  loss_objectness: 0.0155 (0.0333)  loss_rpn_box_reg: 0.0075 (0.0194)  time: 0.1085 (0.1251)  data: 0.0014 (0.0177)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:41,285 maskrcnn_benchmark.trainer INFO: eta: 0:57:19  iter: 12500  loss: 0.5294 (0.7056)  loss_classifier: 0.1953 (0.2537)  loss_box_reg: 0.0866 (0.1144)  loss_mask: 0.2269 (0.2848)  loss_objectness: 0.0172 (0.0333)  loss_rpn_box_reg: 0.0055 (0.0194)  time: 0.1082 (0.1251)  data: 0.0014 (0.0177)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:43,443 maskrcnn_benchmark.trainer INFO: eta: 0:57:16  iter: 12520  loss: 0.4584 (0.7053)  loss_classifier: 0.1451 (0.2535)  loss_box_reg: 0.0677 (0.1143)  loss_mask: 0.2206 (0.2848)  loss_objectness: 0.0119 (0.0332)  loss_rpn_box_reg: 0.0068 (0.0194)  time: 0.1076 (0.1251)  data: 0.0014 (0.0176)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:45,606 maskrcnn_benchmark.trainer INFO: eta: 0:57:13  iter: 12540  loss: 0.5227 (0.7050)  loss_classifier: 0.1320 (0.2534)  loss_box_reg: 0.0729 (0.1143)  loss_mask: 0.2253 (0.2847)  loss_objectness: 0.0127 (0.0332)  loss_rpn_box_reg: 0.0074 (0.0194)  time: 0.1079 (0.1250)  data: 0.0014 (0.0176)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:47,762 maskrcnn_benchmark.trainer INFO: eta: 0:57:10  iter: 12560  loss: 0.5048 (0.7047)  loss_classifier: 0.1863 (0.2533)  loss_box_reg: 0.0732 (0.1142)  loss_mask: 0.2364 (0.2846)  loss_objectness: 0.0118 (0.0332)  loss_rpn_box_reg: 0.0047 (0.0194)  time: 0.1077 (0.1250)  data: 0.0015 (0.0176)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:49,923 maskrcnn_benchmark.trainer INFO: eta: 0:57:06  iter: 12580  loss: 0.5619 (0.7045)  loss_classifier: 0.2041 (0.2532)  loss_box_reg: 0.0855 (0.1142)  loss_mask: 0.2427 (0.2845)  loss_objectness: 0.0120 (0.0332)  loss_rpn_box_reg: 0.0094 (0.0194)  time: 0.1075 (0.1250)  data: 0.0014 (0.0175)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:52,099 maskrcnn_benchmark.trainer INFO: eta: 0:57:03  iter: 12600  loss: 0.4589 (0.7041)  loss_classifier: 0.1394 (0.2530)  loss_box_reg: 0.0758 (0.1142)  loss_mask: 0.2186 (0.2844)  loss_objectness: 0.0066 (0.0331)  loss_rpn_box_reg: 0.0047 (0.0194)  time: 0.1090 (0.1250)  data: 0.0014 (0.0175)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:54,265 maskrcnn_benchmark.trainer INFO: eta: 0:57:00  iter: 12620  loss: 0.4078 (0.7037)  loss_classifier: 0.1092 (0.2528)  loss_box_reg: 0.0680 (0.1141)  loss_mask: 0.2277 (0.2843)  loss_objectness: 0.0086 (0.0331)  loss_rpn_box_reg: 0.0042 (0.0193)  time: 0.1086 (0.1249)  data: 0.0014 (0.0175)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:56,442 maskrcnn_benchmark.trainer INFO: eta: 0:56:57  iter: 12640  loss: 0.5470 (0.7035)  loss_classifier: 0.1677 (0.2527)  loss_box_reg: 0.0989 (0.1141)  loss_mask: 0.2421 (0.2843)  loss_objectness: 0.0154 (0.0331)  loss_rpn_box_reg: 0.0064 (0.0193)  time: 0.1077 (0.1249)  data: 0.0014 (0.0175)  lr: 0.001600  max mem: 5098
2020-06-23 16:16:58,620 maskrcnn_benchmark.trainer INFO: eta: 0:56:54  iter: 12660  loss: 0.4450 (0.7031)  loss_classifier: 0.1393 (0.2526)  loss_box_reg: 0.0628 (0.1140)  loss_mask: 0.2151 (0.2842)  loss_objectness: 0.0126 (0.0331)  loss_rpn_box_reg: 0.0055 (0.0193)  time: 0.1082 (0.1249)  data: 0.0014 (0.0174)  lr: 0.001600  max mem: 5098
2020-06-23 16:17:00,806 maskrcnn_benchmark.trainer INFO: eta: 0:56:50  iter: 12680  loss: 0.5608 (0.7029)  loss_classifier: 0.1654 (0.2525)  loss_box_reg: 0.0936 (0.1140)  loss_mask: 0.2514 (0.2841)  loss_objectness: 0.0142 (0.0330)  loss_rpn_box_reg: 0.0101 (0.0193)  time: 0.1088 (0.1248)  data: 0.0015 (0.0174)  lr: 0.001600  max mem: 5098
2020-06-23 16:17:02,974 maskrcnn_benchmark.trainer INFO: eta: 0:56:47  iter: 12700  loss: 0.5499 (0.7027)  loss_classifier: 0.1652 (0.2524)  loss_box_reg: 0.1052 (0.1140)  loss_mask: 0.2495 (0.2841)  loss_objectness: 0.0183 (0.0330)  loss_rpn_box_reg: 0.0103 (0.0193)  time: 0.1082 (0.1248)  data: 0.0015 (0.0174)  lr: 0.001600  max mem: 5098
2020-06-23 16:17:05,153 maskrcnn_benchmark.trainer INFO: eta: 0:56:44  iter: 12720  loss: 0.5367 (0.7025)  loss_classifier: 0.1842 (0.2523)  loss_box_reg: 0.0757 (0.1139)  loss_mask: 0.2413 (0.2840)  loss_objectness: 0.0079 (0.0330)  loss_rpn_box_reg: 0.0061 (0.0193)  time: 0.1081 (0.1248)  data: 0.0014 (0.0174)  lr: 0.001600  max mem: 5098
2020-06-23 16:17:07,324 maskrcnn_benchmark.trainer INFO: eta: 0:56:41  iter: 12740  loss: 0.5578 (0.7023)  loss_classifier: 0.1714 (0.2522)  loss_box_reg: 0.0915 (0.1139)  loss_mask: 0.2336 (0.2839)  loss_objectness: 0.0160 (0.0330)  loss_rpn_box_reg: 0.0083 (0.0193)  time: 0.1081 (0.1248)  data: 0.0015 (0.0173)  lr: 0.001600  max mem: 5098
2020-06-23 16:17:09,493 maskrcnn_benchmark.trainer INFO: eta: 0:56:38  iter: 12760  loss: 0.4150 (0.7019)  loss_classifier: 0.1343 (0.2520)  loss_box_reg: 0.0654 (0.1138)  loss_mask: 0.2156 (0.2838)  loss_objectness: 0.0066 (0.0329)  loss_rpn_box_reg: 0.0057 (0.0193)  time: 0.1077 (0.1247)  data: 0.0014 (0.0173)  lr: 0.001600  max mem: 5098
2020-06-23 16:17:11,668 maskrcnn_benchmark.trainer INFO: eta: 0:56:34  iter: 12780  loss: 0.6087 (0.7018)  loss_classifier: 0.1796 (0.2520)  loss_box_reg: 0.0994 (0.1138)  loss_mask: 0.2476 (0.2838)  loss_objectness: 0.0185 (0.0329)  loss_rpn_box_reg: 0.0082 (0.0193)  time: 0.1080 (0.1247)  data: 0.0016 (0.0173)  lr: 0.001600  max mem: 5098
2020-06-23 16:17:13,859 maskrcnn_benchmark.trainer INFO: eta: 0:56:31  iter: 12800  loss: 0.5573 (0.7015)  loss_classifier: 0.2077 (0.2519)  loss_box_reg: 0.0995 (0.1138)  loss_mask: 0.2324 (0.2837)  loss_objectness: 0.0145 (0.0329)  loss_rpn_box_reg: 0.0065 (0.0193)  time: 0.1079 (0.1247)  data: 0.0015 (0.0173)  lr: 0.001600  max mem: 5098
2020-06-23 16:17:16,030 maskrcnn_benchmark.trainer INFO: eta: 0:56:28  iter: 12820  loss: 0.5273 (0.7013)  loss_classifier: 0.1737 (0.2518)  loss_box_reg: 0.0847 (0.1138)  loss_mask: 0.2610 (0.2836)  loss_objectness: 0.0132 (0.0329)  loss_rpn_box_reg: 0.0056 (0.0192)  time: 0.1079 (0.1247)  data: 0.0014 (0.0172)  lr: 0.001600  max mem: 5098

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0


Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0
Grad overflow on iteration  12832

Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0


Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0
Grad overflow on iteration  12832
Using dynamic loss scale of  65536.0
:::MLLOG {"namespace": "", "time_ms": 1592954237985, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 14}}
:::MLLOG {"namespace": "", "time_ms": 1592954237985, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 14}}
:::MLLOG {"namespace": "", "time_ms": 1592954237986, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 14}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 16:17:18,221 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
Done (t=0.29s)
creating index...
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 16:17:18,525 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:16,  3.29s/it]
  4%|         | 3/79 [00:03<02:56,  2.32s/it]
  8%|         | 6/79 [00:03<01:59,  1.64s/it]
 11%|        | 9/79 [00:03<01:20,  1.16s/it]
 15%|        | 12/79 [00:03<00:55,  1.22it/s]
 19%|        | 15/79 [00:03<00:37,  1.70it/s]
 23%|       | 18/79 [00:03<00:25,  2.37it/s]
 27%|       | 21/79 [00:04<00:17,  3.26it/s]
 30%|       | 24/79 [00:04<00:12,  4.42it/s]
 34%|      | 27/79 [00:04<00:08,  5.88it/s]
 38%|      | 30/79 [00:04<00:06,  7.65it/s]
 42%|     | 33/79 [00:04<00:04,  9.75it/s]
 46%|     | 36/79 [00:04<00:03, 12.03it/s]
 49%|     | 39/79 [00:04<00:02, 14.32it/s]
 53%|    | 42/79 [00:04<00:02, 16.59it/s]
 57%|    | 45/79 [00:05<00:01, 18.63it/s]
 61%|    | 48/79 [00:05<00:01, 20.50it/s]
 65%|   | 51/79 [00:05<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:18,  3.31s/it]
  4%|         | 3/79 [00:03<02:57,  2.34s/it]
  8%|         | 6/79 [00:03<02:00,  1.65s/it]
 11%|        | 9/79 [00:03<01:21,  1.17s/it]
 15%|        | 12/79 [00:03<00:55,  1.21it/s]
 19%|        | 15/79 [00:03<00:37,  1.69it/s]
 23%|       | 18/79 [00:04<00:25,  2.35it/s]
 27%|       | 21/79 [00:04<00:17,  3.23it/s]
 30%|       | 24/79 [00:04<00:12,  4.39it/s]
 34%|      | 27/79 [00:04<00:08,  5.84it/s]
 38%|      | 30/79 [00:04<00:06,  7.62it/s]
 42%|     | 33/79 [00:04<00:04,  9.69it/s]
 46%|     | 36/79 [00:04<00:03, 11.98it/s]
 49%|     | 39/79 [00:04<00:02, 14.20it/s]
 53%|    | 42/79 [00:04<00:02, 16.48it/s]
 57%|    | 45/79 [00:05<00:01, 18.43it/s]
 61%|    | 48/79 [00:05<00:01, 20.12it/s]
 65%|   | 51/79 [00:05<00:01, 21.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:23,  3.38s/it]
  5%|         | 4/79 [00:03<02:58,  2.38s/it]
  9%|         | 7/79 [00:03<02:00,  1.68s/it]
 13%|        | 10/79 [00:03<01:21,  1.18s/it]
 16%|        | 13/79 [00:03<00:55,  1.19it/s]
 20%|        | 16/79 [00:03<00:37,  1.67it/s]
 24%|       | 19/79 [00:04<00:25,  2.32it/s]
 28%|       | 22/79 [00:04<00:17,  3.19it/s]
 32%|      | 25/79 [00:04<00:12,  4.33it/s]
 35%|      | 28/79 [00:04<00:08,  5.77it/s]
 39%|      | 31/79 [00:04<00:06,  7.53it/s]
 43%|     | 34/79 [00:04<00:04,  9.58it/s]
 47%|     | 37/79 [00:04<00:03, 11.88it/s]
 51%|     | 40/79 [00:04<00:02, 14.23it/s]
 54%|    | 43/79 [00:04<00:02, 16.43it/s]
 58%|    | 46/79 [00:05<00:01, 18.54it/s]
 62%|   | 49/79 [00:05<00:01, 20.37it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:23,  3.38s/it]
  5%|         | 4/79 [00:03<02:58,  2.38s/it]
  9%|         | 7/79 [00:03<02:00,  1.68s/it]
 13%|        | 10/79 [00:03<01:21,  1.18s/it]
 16%|        | 13/79 [00:03<00:55,  1.19it/s]
 20%|        | 16/79 [00:03<00:37,  1.67it/s]
 24%|       | 19/79 [00:04<00:25,  2.32it/s]
 28%|       | 22/79 [00:04<00:17,  3.19it/s]
 32%|      | 25/79 [00:04<00:12,  4.33it/s]
 35%|      | 28/79 [00:04<00:08,  5.77it/s]
 39%|      | 31/79 [00:04<00:06,  7.54it/s]
 43%|     | 34/79 [00:04<00:04,  9.57it/s]
 47%|     | 37/79 [00:04<00:03, 11.83it/s]
 51%|     | 40/79 [00:04<00:02, 14.13it/s]
 54%|    | 43/79 [00:05<00:02, 16.42it/s]
 58%|    | 46/79 [00:05<00:01, 18.46it/s]
 62%|   | 49/79 [00:05<00:01, 20.24it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:22,  3.37s/it]
  5%|         | 4/79 [00:03<02:57,  2.37s/it]
  9%|         | 7/79 [00:03<02:00,  1.67s/it]
 13%|        | 10/79 [00:03<01:21,  1.18s/it]
 16%|        | 13/79 [00:03<00:55,  1.19it/s]
 20%|        | 16/79 [00:03<00:37,  1.67it/s]
 24%|       | 19/79 [00:04<00:25,  2.32it/s]
 28%|       | 22/79 [00:04<00:17,  3.20it/s]
 32%|      | 25/79 [00:04<00:12,  4.33it/s]
 35%|      | 28/79 [00:04<00:08,  5.78it/s]
 39%|      | 31/79 [00:04<00:06,  7.52it/s]
 43%|     | 34/79 [00:04<00:04,  9.56it/s]
 47%|     | 37/79 [00:04<00:03, 11.84it/s]
 51%|     | 40/79 [00:04<00:02, 14.10it/s]
 54%|    | 43/79 [00:05<00:02, 16.24it/s]
 58%|    | 46/79 [00:05<00:01, 18.33it/s]
 62%|   | 49/79 [00:05<00:01, 19.88it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:19,  3.32s/it]
  5%|         | 4/79 [00:03<02:55,  2.34s/it]
  9%|         | 7/79 [00:03<01:58,  1.65s/it]
 13%|        | 10/79 [00:03<01:20,  1.17s/it]
 16%|        | 13/79 [00:03<00:54,  1.21it/s]
 20%|        | 16/79 [00:03<00:37,  1.69it/s]
 24%|       | 19/79 [00:04<00:25,  2.35it/s]
 28%|       | 22/79 [00:04<00:17,  3.23it/s]
 32%|      | 25/79 [00:04<00:12,  4.37it/s]
 35%|      | 28/79 [00:04<00:08,  5.83it/s]
 39%|      | 31/79 [00:04<00:06,  7.58it/s]
 43%|     | 34/79 [00:04<00:04,  9.61it/s]
 47%|     | 37/79 [00:04<00:03, 11.78it/s]
 51%|     | 40/79 [00:04<00:02, 14.03it/s]
 54%|    | 43/79 [00:04<00:02, 16.14it/s]
 58%|    | 46/79 [00:05<00:01, 18.22it/s]
 62%|   | 49/79 [00:05<00:01, 19.95it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:23,  3.38s/it]
  5%|         | 4/79 [00:03<02:58,  2.38s/it]
  9%|         | 7/79 [00:03<02:00,  1.68s/it]
 13%|        | 10/79 [00:03<01:21,  1.19s/it]
 16%|        | 13/79 [00:03<00:55,  1.19it/s]
 20%|        | 16/79 [00:03<00:37,  1.66it/s]
 24%|       | 19/79 [00:04<00:25,  2.31it/s]
 28%|       | 22/79 [00:04<00:17,  3.18it/s]
 32%|      | 25/79 [00:04<00:12,  4.32it/s]
 35%|      | 28/79 [00:04<00:08,  5.76it/s]
 39%|      | 31/79 [00:04<00:06,  7.52it/s]
 43%|     | 34/79 [00:04<00:04,  9.56it/s]
 47%|     | 37/79 [00:04<00:03, 11.76it/s]
 51%|     | 40/79 [00:04<00:02, 14.05it/s]
 54%|    | 43/79 [00:05<00:02, 16.32it/s]
 58%|    | 46/79 [00:05<00:01, 18.45it/s]
 62%|   | 49/79 [00:05<00:01, 20.28it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:20,  3.35s/it]
  5%|         | 4/79 [00:03<02:56,  2.35s/it]
  9%|         | 7/79 [00:03<01:59,  1.66s/it]
 13%|        | 10/79 [00:03<01:21,  1.17s/it]
 16%|        | 13/79 [00:03<00:55,  1.20it/s]
 20%|        | 16/79 [00:03<00:37,  1.68it/s]
 24%|       | 19/79 [00:04<00:25,  2.33it/s]
 28%|       | 22/79 [00:04<00:17,  3.20it/s]
 32%|      | 25/79 [00:04<00:12,  4.34it/s]
 35%|      | 28/79 [00:04<00:08,  5.77it/s]
 39%|      | 31/79 [00:04<00:06,  7.51it/s]
 43%|     | 34/79 [00:04<00:04,  9.52it/s]
 47%|     | 37/79 [00:04<00:03, 11.68it/s]
 51%|     | 40/79 [00:04<00:02, 13.94it/s]
 54%|    | 43/79 [00:05<00:02, 16.09it/s]
 58%|    | 46/79 [00:05<00:01, 18.12it/s]
 62%|   | 49/79 [00:05<00:01, 19.49it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:22,  3.37s/it]
  5%|         | 4/79 [00:03<02:57,  2.37s/it]
  9%|         | 7/79 [00:03<02:00,  1.67s/it]
 13%|        | 10/79 [00:03<01:21,  1.18s/it]
 16%|        | 13/79 [00:03<00:55,  1.19it/s]
 20%|        | 16/79 [00:03<00:37,  1.67it/s]
 24%|       | 19/79 [00:04<00:25,  2.32it/s]
 28%|       | 22/79 [00:04<00:17,  3.19it/s]
 32%|      | 25/79 [00:04<00:12,  4.31it/s]
 35%|      | 28/79 [00:04<00:08,  5.75it/s]
 39%|      | 31/79 [00:04<00:06,  7.51it/s]
 43%|     | 34/79 [00:04<00:04,  9.55it/s]
 47%|     | 37/79 [00:04<00:03, 11.76it/s]
 51%|     | 40/79 [00:04<00:02, 13.97it/s]
 54%|    | 43/79 [00:05<00:02, 16.26it/s]
 58%|    | 46/79 [00:05<00:01, 18.26it/s]
 62%|   | 49/79 [00:05<00:01, 19.82it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:26,  3.42s/it]
  5%|         | 4/79 [00:03<03:00,  2.41s/it]
  9%|         | 7/79 [00:03<02:02,  1.69s/it]
 13%|        | 10/79 [00:03<01:22,  1.20s/it]
 16%|        | 13/79 [00:03<00:56,  1.18it/s]
 20%|        | 16/79 [00:04<00:38,  1.65it/s]
 24%|       | 19/79 [00:04<00:26,  2.29it/s]
 28%|       | 22/79 [00:04<00:18,  3.15it/s]
 32%|      | 25/79 [00:04<00:12,  4.28it/s]
 35%|      | 28/79 [00:04<00:08,  5.70it/s]
 39%|      | 31/79 [00:04<00:06,  7.44it/s]
 43%|     | 34/79 [00:04<00:04,  9.41it/s]
 47%|     | 37/79 [00:04<00:03, 11.66it/s]
 51%|     | 40/79 [00:04<00:02, 13.96it/s]
 54%|    | 43/79 [00:05<00:02, 16.25it/s]
 58%|    | 46/79 [00:05<00:01, 18.24it/s]
 62%|   | 49/79 [00:05<00:01, 20.08it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:23,  3.38s/it]
  5%|         | 4/79 [00:03<02:58,  2.38s/it]
  9%|         | 7/79 [00:03<02:00,  1.68s/it]
 13%|        | 10/79 [00:03<01:21,  1.18s/it]
 16%|        | 13/79 [00:03<00:55,  1.19it/s]
 20%|        | 16/79 [00:03<00:37,  1.66it/s]
 24%|       | 19/79 [00:04<00:25,  2.32it/s]
 28%|       | 22/79 [00:04<00:17,  3.19it/s]
 32%|      | 25/79 [00:04<00:12,  4.33it/s]
 35%|      | 28/79 [00:04<00:08,  5.75it/s]
 39%|      | 31/79 [00:04<00:06,  7.47it/s]
 43%|     | 34/79 [00:04<00:04,  9.51it/s]
 47%|     | 37/79 [00:04<00:03, 11.62it/s]
 51%|     | 40/79 [00:04<00:02, 13.92it/s]
 54%|    | 43/79 [00:05<00:02, 16.11it/s]
 58%|    | 46/79 [00:05<00:01, 18.04it/s]
 62%|   | 49/79 [00:05<00:01, 19.86it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:23,  3.38s/it]
  5%|         | 4/79 [00:03<02:58,  2.38s/it]
  9%|         | 7/79 [00:03<02:00,  1.68s/it]
 13%|        | 10/79 [00:03<01:21,  1.19s/it]
 16%|        | 13/79 [00:03<00:55,  1.19it/s]
 20%|        | 16/79 [00:03<00:37,  1.66it/s]
 24%|       | 19/79 [00:04<00:25,  2.31it/s]
 28%|       | 22/79 [00:04<00:17,  3.17it/s]
 32%|      | 25/79 [00:04<00:12,  4.31it/s]
 35%|      | 28/79 [00:04<00:08,  5.75it/s]
 39%|      | 31/79 [00:04<00:06,  7.50it/s]
 43%|     | 34/79 [00:04<00:04,  9.51it/s]
 47%|     | 37/79 [00:04<00:03, 11.79it/s]
 51%|     | 40/79 [00:04<00:02, 14.06it/s]
 54%|    | 43/79 [00:05<00:02, 16.17it/s]
 58%|    | 46/79 [00:05<00:01, 18.05it/s]
 62%|   | 49/79 [00:05<00:01, 19.84it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:23,  3.38s/it]
  5%|         | 4/79 [00:03<02:58,  2.38s/it]
  9%|         | 7/79 [00:03<02:00,  1.68s/it]
 13%|        | 10/79 [00:03<01:21,  1.19s/it]
 16%|        | 13/79 [00:03<00:55,  1.19it/s]
 20%|        | 16/79 [00:03<00:37,  1.66it/s]
 24%|       | 19/79 [00:04<00:25,  2.31it/s]
 28%|       | 22/79 [00:04<00:17,  3.19it/s]
 32%|      | 25/79 [00:04<00:12,  4.32it/s]
 35%|      | 28/79 [00:04<00:08,  5.75it/s]
 39%|      | 31/79 [00:04<00:06,  7.51it/s]
 43%|     | 34/79 [00:04<00:04,  9.52it/s]
 47%|     | 37/79 [00:04<00:03, 11.76it/s]
 51%|     | 40/79 [00:04<00:02, 13.99it/s]
 54%|    | 43/79 [00:05<00:02, 16.01it/s]
 58%|    | 46/79 [00:05<00:01, 18.01it/s]
 62%|   | 49/79 [00:05<00:01, 19.69it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:23,  3.37s/it]
  5%|         | 4/79 [00:03<02:58,  2.38s/it]
  9%|         | 7/79 [00:03<02:00,  1.67s/it]
 13%|        | 10/79 [00:03<01:21,  1.18s/it]
 16%|        | 13/79 [00:03<00:55,  1.19it/s]
 20%|        | 16/79 [00:03<00:37,  1.67it/s]
 24%|       | 19/79 [00:04<00:25,  2.32it/s]
 28%|       | 22/79 [00:04<00:17,  3.18it/s]
 32%|      | 25/79 [00:04<00:12,  4.32it/s]
 35%|      | 28/79 [00:04<00:08,  5.75it/s]
 39%|      | 31/79 [00:04<00:06,  7.48it/s]
 43%|     | 34/79 [00:04<00:04,  9.51it/s]
 47%|     | 37/79 [00:04<00:03, 11.70it/s]
 51%|     | 40/79 [00:04<00:02, 13.82it/s]
 54%|    | 43/79 [00:05<00:02, 15.95it/s]
 58%|    | 46/79 [00:05<00:01, 17.80it/s]
 62%|   | 49/79 [00:05<00:01, 19.50it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:23,  3.37s/it]
  5%|         | 4/79 [00:03<02:58,  2.38s/it]
  9%|         | 7/79 [00:03<02:00,  1.67s/it]
 13%|        | 10/79 [00:03<01:21,  1.18s/it]
 16%|        | 13/79 [00:03<00:55,  1.19it/s]
 20%|        | 16/79 [00:03<00:37,  1.67it/s]
 24%|       | 19/79 [00:04<00:25,  2.31it/s]
 28%|       | 22/79 [00:04<00:17,  3.18it/s]
 32%|      | 25/79 [00:04<00:12,  4.32it/s]
 35%|      | 28/79 [00:04<00:08,  5.76it/s]
 39%|      | 31/79 [00:04<00:06,  7.50it/s]
 43%|     | 34/79 [00:04<00:04,  9.48it/s]
 47%|     | 37/79 [00:04<00:03, 11.62it/s]
 51%|     | 40/79 [00:04<00:02, 13.88it/s]
 54%|    | 43/79 [00:05<00:02, 16.12it/s]
 58%|    | 46/79 [00:05<00:01, 18.14it/s]
 62%|   | 49/79 [00:05<00:01, 19.85it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:24,  3.39s/it]
  5%|         | 4/79 [00:03<02:58,  2.38s/it]
  9%|         | 7/79 [00:03<02:01,  1.68s/it]
 13%|        | 10/79 [00:03<01:22,  1.19s/it]
 16%|        | 13/79 [00:03<00:55,  1.18it/s]
 20%|        | 16/79 [00:03<00:37,  1.66it/s]
 24%|       | 19/79 [00:04<00:26,  2.30it/s]
 28%|       | 22/79 [00:04<00:17,  3.17it/s]
 32%|      | 25/79 [00:04<00:12,  4.30it/s]
 35%|      | 28/79 [00:04<00:08,  5.72it/s]
 39%|      | 31/79 [00:04<00:06,  7.45it/s]
 43%|     | 34/79 [00:04<00:04,  9.44it/s]
 47%|     | 37/79 [00:04<00:03, 11.66it/s]
 51%|     | 40/79 [00:04<00:02, 13.91it/s]
 54%|    | 43/79 [00:05<00:02, 16.02it/s]
 58%|    | 46/79 [00:05<00:01, 17.87it/s]
 62%|   | 49/79 [00:05<00:01, 19.66it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:25,  3.41s/it]
  5%|         | 4/79 [00:03<02:59,  2.40s/it]
  9%|         | 7/79 [00:03<02:01,  1.69s/it]
 13%|        | 10/79 [00:03<01:22,  1.20s/it]
 16%|        | 13/79 [00:03<00:56,  1.18it/s]
 20%|        | 16/79 [00:04<00:38,  1.65it/s]
 24%|       | 19/79 [00:04<00:26,  2.30it/s]
 28%|       | 22/79 [00:04<00:18,  3.16it/s]
 32%|      | 25/79 [00:04<00:12,  4.28it/s]
 35%|      | 28/79 [00:04<00:08,  5.71it/s]
 39%|      | 31/79 [00:04<00:06,  7.44it/s]
 43%|     | 34/79 [00:04<00:04,  9.45it/s]
 47%|     | 37/79 [00:04<00:03, 11.64it/s]
 51%|     | 40/79 [00:04<00:02, 13.90it/s]
 54%|    | 43/79 [00:05<00:02, 16.03it/s]
 58%|    | 46/79 [00:05<00:01, 18.05it/s]
 62%|   | 49/79 [00:05<00:01, 19.77it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:24,  3.39s/it]
  5%|         | 4/79 [00:03<02:59,  2.39s/it]
  9%|         | 7/79 [00:03<02:01,  1.68s/it]
 13%|        | 10/79 [00:03<01:22,  1.19s/it]
 16%|        | 13/79 [00:03<00:55,  1.18it/s]
 20%|        | 16/79 [00:03<00:37,  1.66it/s]
 24%|       | 19/79 [00:04<00:26,  2.30it/s]
 28%|       | 22/79 [00:04<00:18,  3.15it/s]
 32%|      | 25/79 [00:04<00:12,  4.27it/s]
 35%|      | 28/79 [00:04<00:08,  5.67it/s]
 39%|      | 31/79 [00:04<00:06,  7.39it/s]
 43%|     | 34/79 [00:04<00:04,  9.40it/s]
 47%|     | 37/79 [00:04<00:03, 11.65it/s]
 51%|     | 40/79 [00:04<00:02, 13.97it/s]
 54%|    | 43/79 [00:05<00:02, 16.14it/s]
 58%|    | 46/79 [00:05<00:01, 18.17it/s]
 62%|   | 49/79 [00:05<00:01, 19.80it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:29,  3.46s/it]
  5%|         | 4/79 [00:03<03:02,  2.43s/it]
  9%|         | 7/79 [00:03<02:03,  1.72s/it]
 13%|        | 10/79 [00:03<01:23,  1.21s/it]
 16%|        | 13/79 [00:03<00:56,  1.16it/s]
 20%|        | 16/79 [00:04<00:38,  1.63it/s]
 24%|       | 19/79 [00:04<00:26,  2.27it/s]
 28%|       | 22/79 [00:04<00:18,  3.12it/s]
 32%|      | 25/79 [00:04<00:12,  4.24it/s]
 35%|      | 28/79 [00:04<00:09,  5.63it/s]
 39%|      | 31/79 [00:04<00:06,  7.33it/s]
 43%|     | 34/79 [00:04<00:04,  9.30it/s]
 47%|     | 37/79 [00:04<00:03, 11.46it/s]
 51%|     | 40/79 [00:04<00:02, 13.79it/s]
 54%|    | 43/79 [00:05<00:02, 15.88it/s]
 58%|    | 46/79 [00:05<00:01, 17.95it/s]
 62%|   | 49/79 [00:05<00:01, 19.83it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:27,  3.42s/it]
  5%|         | 4/79 [00:03<03:00,  2.41s/it]
  9%|         | 7/79 [00:03<02:02,  1.70s/it]
 13%|        | 10/79 [00:03<01:22,  1.20s/it]
 16%|        | 13/79 [00:03<00:56,  1.17it/s]
 20%|        | 16/79 [00:04<00:38,  1.65it/s]
 24%|       | 19/79 [00:04<00:26,  2.29it/s]
 28%|       | 22/79 [00:04<00:18,  3.16it/s]
 32%|      | 25/79 [00:04<00:12,  4.28it/s]
 35%|      | 28/79 [00:04<00:08,  5.70it/s]
 39%|      | 31/79 [00:04<00:06,  7.41it/s]
 43%|     | 34/79 [00:04<00:04,  9.40it/s]
 47%|     | 37/79 [00:04<00:03, 11.57it/s]
 51%|     | 40/79 [00:04<00:02, 13.76it/s]
 54%|    | 43/79 [00:05<00:02, 15.99it/s]
 58%|    | 46/79 [00:05<00:01, 17.86it/s]
 62%|   | 49/79 [00:05<00:01, 19.24it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:26,  3.41s/it]
  4%|         | 3/79 [00:03<03:02,  2.40s/it]
  8%|         | 6/79 [00:03<02:03,  1.70s/it]
 11%|        | 9/79 [00:03<01:23,  1.20s/it]
 15%|        | 12/79 [00:03<00:57,  1.18it/s]
 19%|        | 15/79 [00:03<00:38,  1.65it/s]
 23%|       | 18/79 [00:04<00:26,  2.29it/s]
 27%|       | 21/79 [00:04<00:18,  3.14it/s]
 30%|       | 24/79 [00:04<00:12,  4.27it/s]
 34%|      | 27/79 [00:04<00:09,  5.67it/s]
 38%|      | 30/79 [00:04<00:06,  7.41it/s]
 42%|     | 33/79 [00:04<00:04,  9.42it/s]
 46%|     | 36/79 [00:04<00:03, 11.61it/s]
 49%|     | 39/79 [00:04<00:02, 13.60it/s]
 53%|    | 42/79 [00:05<00:02, 15.64it/s]
 57%|    | 45/79 [00:05<00:01, 17.45it/s]
 61%|    | 48/79 [00:05<00:01, 19.15it/s]
 65%|   | 51/79 [00:05<00:01, 20.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:30,  3.47s/it]
  5%|         | 4/79 [00:03<03:03,  2.44s/it]
  9%|         | 7/79 [00:03<02:03,  1.72s/it]
 13%|        | 10/79 [00:03<01:23,  1.22s/it]
 16%|        | 13/79 [00:03<00:56,  1.16it/s]
 20%|        | 16/79 [00:04<00:38,  1.62it/s]
 24%|       | 19/79 [00:04<00:26,  2.26it/s]
 28%|       | 22/79 [00:04<00:18,  3.11it/s]
 32%|      | 25/79 [00:04<00:12,  4.22it/s]
 35%|      | 28/79 [00:04<00:09,  5.64it/s]
 39%|      | 31/79 [00:04<00:06,  7.34it/s]
 43%|     | 34/79 [00:04<00:04,  9.37it/s]
 47%|     | 37/79 [00:04<00:03, 11.54it/s]
 51%|     | 40/79 [00:04<00:02, 13.79it/s]
 54%|    | 43/79 [00:05<00:02, 15.99it/s]
 58%|    | 46/79 [00:05<00:01, 17.96it/s]
 62%|   | 49/79 [00:05<00:01, 19.92it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:28,  3.44s/it]
  5%|         | 4/79 [00:03<03:01,  2.42s/it]
  9%|         | 7/79 [00:03<02:02,  1.71s/it]
 13%|        | 10/79 [00:03<01:23,  1.21s/it]
 16%|        | 13/79 [00:03<00:56,  1.17it/s]
 20%|        | 16/79 [00:04<00:38,  1.64it/s]
 24%|       | 19/79 [00:04<00:26,  2.28it/s]
 28%|       | 22/79 [00:04<00:18,  3.13it/s]
 32%|      | 25/79 [00:04<00:12,  4.25it/s]
 35%|      | 28/79 [00:04<00:09,  5.67it/s]
 39%|      | 31/79 [00:04<00:06,  7.39it/s]
 43%|     | 34/79 [00:04<00:04,  9.40it/s]
 47%|     | 37/79 [00:04<00:03, 11.61it/s]
 51%|     | 40/79 [00:04<00:02, 13.89it/s]
 54%|    | 43/79 [00:05<00:02, 16.13it/s]
 58%|    | 46/79 [00:05<00:01, 18.15it/s]
 62%|   | 49/79 [00:05<00:01, 19.97it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:24,  3.39s/it]
  4%|         | 3/79 [00:03<03:01,  2.39s/it]
  8%|         | 6/79 [00:03<02:02,  1.68s/it]
 11%|        | 9/79 [00:03<01:23,  1.19s/it]
 15%|        | 12/79 [00:03<00:56,  1.18it/s]
 19%|        | 15/79 [00:03<00:38,  1.66it/s]
 23%|       | 18/79 [00:04<00:26,  2.30it/s]
 27%|       | 21/79 [00:04<00:18,  3.16it/s]
 30%|       | 24/79 [00:04<00:12,  4.27it/s]
 34%|      | 27/79 [00:04<00:09,  5.69it/s]
 38%|      | 30/79 [00:04<00:06,  7.40it/s]
 42%|     | 33/79 [00:04<00:04,  9.40it/s]
 46%|     | 36/79 [00:04<00:03, 11.52it/s]
 49%|     | 39/79 [00:04<00:02, 13.72it/s]
 53%|    | 42/79 [00:05<00:02, 15.70it/s]
 57%|    | 45/79 [00:05<00:01, 17.72it/s]
 61%|    | 48/79 [00:05<00:01, 19.34it/s]
 65%|   | 51/79 [00:05<00:01, 20.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:27,  3.43s/it]
  5%|         | 4/79 [00:03<03:01,  2.42s/it]
  9%|         | 7/79 [00:03<02:02,  1.70s/it]
 13%|        | 10/79 [00:03<01:23,  1.20s/it]
 16%|        | 13/79 [00:03<00:56,  1.17it/s]
 20%|        | 16/79 [00:04<00:38,  1.64it/s]
 24%|       | 19/79 [00:04<00:26,  2.27it/s]
 28%|       | 22/79 [00:04<00:18,  3.13it/s]
 32%|      | 25/79 [00:04<00:12,  4.24it/s]
 35%|      | 28/79 [00:04<00:09,  5.66it/s]
 39%|      | 31/79 [00:04<00:06,  7.36it/s]
 43%|     | 34/79 [00:04<00:04,  9.32it/s]
 47%|     | 37/79 [00:04<00:03, 11.44it/s]
 51%|     | 40/79 [00:05<00:02, 13.70it/s]
 54%|    | 43/79 [00:05<00:02, 15.84it/s]
 58%|    | 46/79 [00:05<00:01, 17.70it/s]
 62%|   | 49/79 [00:05<00:01, 19.52it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:23,  3.38s/it]
  5%|         | 4/79 [00:03<02:58,  2.38s/it]
  9%|         | 7/79 [00:03<02:00,  1.68s/it]
 13%|        | 10/79 [00:03<01:21,  1.19s/it]
 16%|        | 13/79 [00:03<00:55,  1.19it/s]
 20%|        | 16/79 [00:04<00:37,  1.66it/s]
 24%|       | 19/79 [00:04<00:26,  2.30it/s]
 28%|       | 22/79 [00:04<00:18,  3.16it/s]
 32%|      | 25/79 [00:04<00:12,  4.28it/s]
 35%|      | 28/79 [00:04<00:08,  5.69it/s]
 39%|      | 31/79 [00:04<00:06,  7.40it/s]
 43%|     | 34/79 [00:04<00:04,  9.32it/s]
 47%|     | 37/79 [00:04<00:03, 11.42it/s]
 51%|     | 40/79 [00:04<00:02, 13.61it/s]
 54%|    | 43/79 [00:05<00:02, 15.65it/s]
 58%|    | 46/79 [00:05<00:01, 17.47it/s]
 62%|   | 49/79 [00:05<00:01, 19.10it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:32,  3.49s/it]
  5%|         | 4/79 [00:03<03:04,  2.46s/it]
  9%|         | 7/79 [00:03<02:04,  1.73s/it]
 13%|        | 10/79 [00:03<01:24,  1.22s/it]
 16%|        | 13/79 [00:03<00:57,  1.15it/s]
 20%|        | 16/79 [00:04<00:39,  1.61it/s]
 24%|       | 19/79 [00:04<00:26,  2.24it/s]
 28%|       | 22/79 [00:04<00:18,  3.09it/s]
 32%|      | 25/79 [00:04<00:12,  4.19it/s]
 35%|      | 28/79 [00:04<00:09,  5.58it/s]
 39%|      | 31/79 [00:04<00:06,  7.29it/s]
 43%|     | 34/79 [00:04<00:04,  9.28it/s]
 47%|     | 37/79 [00:04<00:03, 11.51it/s]
 51%|     | 40/79 [00:05<00:02, 13.72it/s]
 54%|    | 43/79 [00:05<00:02, 15.86it/s]
 58%|    | 46/79 [00:05<00:01, 17.87it/s]
 62%|   | 49/79 [00:05<00:01, 19.61it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:30,  3.46s/it]
  5%|         | 4/79 [00:03<03:02,  2.44s/it]
  9%|         | 7/79 [00:03<02:03,  1.72s/it]
 13%|        | 10/79 [00:03<01:23,  1.21s/it]
 16%|        | 13/79 [00:03<00:56,  1.16it/s]
 20%|        | 16/79 [00:04<00:38,  1.63it/s]
 24%|       | 19/79 [00:04<00:26,  2.26it/s]
 28%|       | 22/79 [00:04<00:18,  3.11it/s]
 32%|      | 25/79 [00:04<00:12,  4.23it/s]
 35%|      | 28/79 [00:04<00:09,  5.64it/s]
 39%|      | 31/79 [00:04<00:06,  7.34it/s]
 43%|     | 34/79 [00:04<00:04,  9.31it/s]
 47%|     | 37/79 [00:04<00:03, 11.45it/s]
 51%|     | 40/79 [00:05<00:02, 13.67it/s]
 54%|    | 43/79 [00:05<00:02, 15.85it/s]
 58%|    | 46/79 [00:05<00:01, 17.79it/s]
 62%|   | 49/79 [00:05<00:01, 19.21it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:30,  3.47s/it]
  5%|         | 4/79 [00:03<03:02,  2.44s/it]
  9%|         | 7/79 [00:03<02:03,  1.72s/it]
 13%|        | 10/79 [00:03<01:23,  1.22s/it]
 16%|        | 13/79 [00:03<00:56,  1.16it/s]
 20%|        | 16/79 [00:04<00:38,  1.62it/s]
 24%|       | 19/79 [00:04<00:26,  2.26it/s]
 28%|       | 22/79 [00:04<00:18,  3.10it/s]
 32%|      | 25/79 [00:04<00:12,  4.22it/s]
 35%|      | 28/79 [00:04<00:09,  5.62it/s]
 39%|      | 31/79 [00:04<00:06,  7.34it/s]
 43%|     | 34/79 [00:04<00:04,  9.34it/s]
 47%|     | 37/79 [00:04<00:03, 11.49it/s]
 51%|     | 40/79 [00:05<00:02, 13.67it/s]
 54%|    | 43/79 [00:05<00:02, 15.95it/s]
 58%|    | 46/79 [00:05<00:01, 17.74it/s]
 62%|   | 49/79 [00:05<00:01, 19.33it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:22,  3.37s/it]
  5%|         | 4/79 [00:03<02:57,  2.37s/it]
  9%|         | 7/79 [00:03<02:00,  1.67s/it]
 13%|        | 10/79 [00:03<01:21,  1.18s/it]
 16%|        | 13/79 [00:03<00:55,  1.19it/s]
 20%|        | 16/79 [00:04<00:37,  1.66it/s]
 24%|       | 19/79 [00:04<00:25,  2.31it/s]
 28%|       | 22/79 [00:04<00:17,  3.17it/s]
 32%|      | 25/79 [00:04<00:12,  4.29it/s]
 35%|      | 28/79 [00:04<00:08,  5.68it/s]
 39%|      | 31/79 [00:04<00:06,  7.41it/s]
 43%|     | 34/79 [00:04<00:04,  9.38it/s]
 47%|     | 37/79 [00:04<00:03, 11.48it/s]
 51%|     | 40/79 [00:04<00:02, 13.64it/s]
 54%|    | 43/79 [00:05<00:02, 15.57it/s]
 58%|    | 46/79 [00:05<00:01, 17.41it/s]
 62%|   | 49/79 [00:05<00:01, 18.75it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:27,  3.43s/it]
  5%|         | 4/79 [00:03<03:01,  2.42s/it]
  9%|         | 7/79 [00:03<02:02,  1.70s/it]
 13%|        | 10/79 [00:03<01:23,  1.20s/it]
 16%|        | 13/79 [00:03<00:56,  1.17it/s]
 20%|        | 16/79 [00:04<00:38,  1.64it/s]
 24%|       | 19/79 [00:04<00:26,  2.28it/s]
 28%|       | 22/79 [00:04<00:18,  3.13it/s]
 32%|      | 25/79 [00:04<00:12,  4.25it/s]
 35%|      | 28/79 [00:04<00:09,  5.61it/s]
 39%|      | 31/79 [00:04<00:06,  7.31it/s]
 43%|     | 34/79 [00:04<00:04,  9.23it/s]
 47%|     | 37/79 [00:04<00:03, 11.33it/s]
 51%|     | 40/79 [00:05<00:02, 13.29it/s]
 54%|    | 43/79 [00:05<00:02, 15.44it/s]
 58%|    | 46/79 [00:05<00:01, 17.05it/s]
 62%|   | 49/79 [00:05<00:01, 18.61it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:23,  3.38s/it]
  5%|         | 4/79 [00:03<02:58,  2.38s/it]
  9%|         | 7/79 [00:03<02:00,  1.68s/it]
 13%|        | 10/79 [00:03<01:21,  1.19s/it]
 16%|        | 13/79 [00:03<00:55,  1.18it/s]
 20%|        | 16/79 [00:04<00:38,  1.66it/s]
 24%|       | 19/79 [00:04<00:26,  2.30it/s]
 28%|       | 22/79 [00:04<00:18,  3.16it/s]
 32%|      | 25/79 [00:04<00:12,  4.26it/s]
 35%|      | 28/79 [00:04<00:09,  5.65it/s]
 39%|      | 31/79 [00:04<00:06,  7.34it/s]
 43%|     | 34/79 [00:04<00:04,  9.28it/s]
 47%|     | 37/79 [00:04<00:03, 11.20it/s]
 51%|     | 40/79 [00:05<00:02, 13.30it/s]
 54%|    | 43/79 [00:05<00:02, 15.28it/s]
 58%|    | 46/79 [00:05<00:01, 17.05it/s]
 62%|   | 49/79 [00:05<00:01, 18.50it/s]
 66%|   | 52/79 [00:05<00:0102it/s]
 68%|   | 54/79 [00:05<00:01, 23.03it/s]
 72%|  | 57/79 [00:05<00:00, 24.17it/s]
 76%|  | 60/79 [00:05<00:00, 24.66it/s]
 80%|  | 63/79 [00:05<00:00, 25.19it/s]
 84%| | 66/79 [00:05<00:00, 25.71it/s]
 87%| | 69/79 [00:05<00:00, 25.99it/s]
 91%| | 72/79 [00:06<00:00, 26.09it/s]
 95%|| 75/79 [00:06<00:00, 26.70it/s]
 99%|| 78/79 [00:06<00:00, 27.17it/s]
100%|| 79/79 [00:06<00:00, 12.45it/s]
73it/s]
 68%|   | 54/79 [00:05<00:01, 22.65it/s]
 72%|  | 57/79 [00:05<00:00, 23.69it/s]
 76%|  | 60/79 [00:05<00:00, 24.17it/s]
 80%|  | 63/79 [00:05<00:00, 24.86it/s]
 84%| | 66/79 [00:05<00:00, 25.06it/s]
 87%| | 69/79 [00:05<00:00, 25.32it/s]
 91%| | 72/79 [00:06<00:00, 25.61it/s]
 95%|| 75/79 [00:06<00:00, 26.36it/s]
 99%|| 78/79 [00:06<00:00, 26.87it/s]
100%|| 79/79 [00:06<00:00, 12.32it/s]
, 22.01it/s]
 70%|   | 55/79 [00:05<00:01, 23.23it/s]
 73%|  | 58/79 [00:05<00:00, 24.13it/s]
 77%|  | 61/79 [00:05<00:00, 24.85it/s]
 81%|  | 64/79 [00:05<00:00, 25.22it/s]
 85%| | 67/79 [00:05<00:00, 25.42it/s]
 89%| | 70/79 [00:06<00:00, 25.38it/s]
 92%|| 73/79 [00:06<00:00, 25.83it/s]
 96%|| 76/79 [00:06<00:00, 26.29it/s]
100%|| 79/79 [00:06<00:00, 27.23it/s]
, 21.61it/s]
 70%|   | 55/79 [00:05<00:01, 22.73it/s]
 73%|  | 58/79 [00:05<00:00, 23.67it/s]
 77%|  | 61/79 [00:05<00:00, 24.24it/s]
 81%|  | 64/79 [00:05<00:00, 24.54it/s]
 85%| | 67/79 [00:05<00:00, 25.02it/s]
 89%| | 70/79 [00:06<00:00, 25.12it/s]
 92%|| 73/79 [00:06<00:00, 25.75it/s]
 96%|| 76/79 [00:06<00:00, 26.28it/s]
100%|| 79/79 [00:06<00:00, 12.26it/s]
, 21.46it/s]
 70%|   | 55/79 [00:05<00:01, 22.70it/s]
 73%|  | 58/79 [00:05<00:00, 23.64it/s]
 77%|  | 61/79 [00:05<00:00, 24.31it/s]
 81%|  | 64/79 [00:05<00:00, 24.73it/s]
 85%| | 67/79 [00:05<00:00, 25.11it/s]
 89%| | 70/79 [00:06<00:00, 25.11it/s]
 92%|| 73/79 [00:06<00:00, 25.63it/s]
 96%|| 76/79 [00:06<00:00, 26.33it/s]
100%|| 79/79 [00:06<00:00, 27.21it/s]
, 21.35it/s]
 70%|   | 55/79 [00:05<00:01, 22.51it/s]
 73%|  | 58/79 [00:05<00:00, 23.34it/s]
 77%|  | 61/79 [00:05<00:00, 23.89it/s]
 81%|  | 64/79 [00:05<00:00, 24.32it/s]
 85%| | 67/79 [00:05<00:00, 24.64it/s]
 89%| | 70/79 [00:06<00:00, 24.97it/s]
 92%|| 73/79 [00:06<00:00, 25.49it/s]
 96%|| 76/79 [00:06<00:00, 26.32it/s]
100%|| 79/79 [00:06<00:00, 27.29it/s]
, 21.57it/s]
 70%|   | 55/79 [00:05<00:01, 22.66it/s]
 73%|  | 58/79 [00:05<00:00, 23.54it/s]
 77%|  | 61/79 [00:05<00:00, 24.22it/s]
 81%|  | 64/79 [00:05<00:00, 24.34it/s]
 85%| | 67/79 [00:05<00:00, 24.74it/s]
 89%| | 70/79 [00:06<00:00, 24.91it/s]
 92%|| 73/79 [00:06<00:00, 25.48it/s]
 96%|| 76/79 [00:06<00:00, 26.14it/s]
100%|| 79/79 [00:06<00:00, 27.03it/s]
, 21.32it/s]
 70%|   | 55/79 [00:05<00:01, 22.32it/s]
 73%|  | 58/79 [00:05<00:00, 23.01it/s]
 77%|  | 61/79 [00:05<00:00, 23.85it/s]
 81%|  | 64/79 [00:05<00:00, 24.33it/s]
 85%| | 67/79 [00:05<00:00, 24.99it/s]
 89%| | 70/79 [00:06<00:00, 25.33it/s]
 92%|| 73/79 [00:06<00:00, 25.76it/s]
 96%|| 76/79 [00:06<00:00, 26.50it/s]
100%|| 79/79 [00:06<00:00, 27.42it/s]
, 21.39it/s]
 70%|   | 55/79 [00:05<00:01, 22.64it/s]
 73%|  | 58/79 [00:05<00:00, 23.56it/s]
 77%|  | 61/79 [00:05<00:00, 24.32it/s]
 81%|  | 64/79 [00:05<00:00, 24.51it/s]
 85%| | 67/79 [00:05<00:00, 25.14it/s]
 89%| | 70/79 [00:06<00:00, 25.30it/s]
 92%|| 73/79 [00:06<00:00, 25.41it/s]
 96%|| 76/79 [00:06<00:00, 26.24it/s]
100%|| 79/79 [00:06<00:00, 27.10it/s]
, 21.03it/s]
 70%|   | 55/79 [00:05<00:01, 22.14it/s]
 73%|  | 58/79 [00:05<00:00, 23.02it/s]
 77%|  | 61/79 [00:05<00:00, 23.55it/s]
 81%|  | 64/79 [00:05<00:00, 24.07it/s]
 85%| | 67/79 [00:05<00:00, 24.77it/s]
 89%| | 70/79 [00:06<00:00, 24.61it/s]
 92%|| 73/79 [00:06<00:00, 25.24it/s]
 96%|| 76/79 [00:06<00:00, 26.03it/s]
100%|| 79/79 [00:06<00:00, 26.94it/s]
, 21.16it/s]
 70%|   | 55/79 [00:05<00:01, 22.28it/s]
 73%|  | 58/79 [00:05<00:00, 23.05it/s]
 77%|  | 61/79 [00:05<00:00, 23.75it/s]
 81%|  | 64/79 [00:05<00:00, 24.08it/s]
 85%| | 67/79 [00:05<00:00, 24.61it/s]
 89%| | 70/79 [00:06<00:00, 24.75it/s]
 92%|| 73/79 [00:06<00:00, 24.82it/s]
 96%|| 76/79 [00:06<00:00, 26.01it/s]
100%|| 79/79 [00:06<00:00, 26.41it/s]
, 21.03it/s]
 70%|   | 55/79 [00:05<00:01, 22.14it/s]
 73%|  | 58/79 [00:05<00:00, 23.02it/s]
 77%|  | 61/79 [00:05<00:00, 23.76it/s]
 81%|  | 64/79 [00:05<00:00, 24.07it/s]
 85%| | 67/79 [00:06<00:00, 24.47it/s]
 89%| | 70/79 [00:06<00:00, 24.61it/s]
 92%|| 73/79 [00:06<00:00, 25.28it/s]
 96%|| 76/79 [00:06<00:00, 26.05it/s]
100%|| 79/79 [00:06<00:00, 27.09it/s]
, 21.24it/s]
 70%|   | 55/79 [00:05<00:01, 22.26it/s]
 73%|  | 58/79 [00:05<00:00, 23.19it/s]
 77%|  | 61/79 [00:05<00:00, 23.81it/s]
 81%|  | 64/79 [00:05<00:00, 24.15it/s]
 85%| | 67/79 [00:05<00:00, 24.53it/s]
 89%| | 70/79 [00:06<00:00, 24.62it/s]
 92%|| 73/79 [00:06<00:00, 25.28it/s]
 96%|| 76/79 [00:06<00:00, 26.08it/s]
100%|| 79/79 [00:06<00:00, 26.98it/s]
, 20.91it/s]
 70%|   | 55/79 [00:05<00:01, 22.10it/s]
 73%|  | 58/79 [00:05<00:00, 22.90it/s]
 77%|  | 61/79 [00:05<00:00, 23.83it/s]
 81%|  | 64/79 [00:05<00:00, 24.12it/s]
 85%| | 67/79 [00:05<00:00, 24.46it/s]
 89%| | 70/79 [00:06<00:00, 24.35it/s]
 92%|| 73/79 [00:06<00:00, 25.27it/s]
 96%|| 76/79 [00:06<00:00, 26.09it/s]
100%|| 79/79 [00:06<00:00, 27.08it/s]
, 21.35it/s]
 70%|   | 55/79 [00:05<00:01, 22.33it/s]
 73%|  | 58/79 [00:05<00:00, 23.23it/s]
 77%|  | 61/79 [00:05<00:00, 23.60it/s]
 81%|  | 64/79 [00:05<00:00, 24.02it/s]
 85%| | 67/79 [00:05<00:00, 24.41it/s]
 89%| | 70/79 [00:06<00:00, 24.83it/s]
 92%|| 73/79 [00:06<00:00, 25.08it/s]
 96%|| 76/79 [00:06<00:00, 25.97it/s]
100%|| 79/79 [00:06<00:00, 26.85it/s]
, 21.15it/s]
 70%|   | 55/79 [00:05<00:01, 22.10it/s]
 73%|  | 58/79 [00:05<00:00, 23.06it/s]
 77%|  | 61/79 [00:05<00:00, 23.80it/s]
 81%|  | 64/79 [00:05<00:00, 24.32it/s]
 85%| | 67/79 [00:06<00:00, 24.70it/s]
 89%| | 70/79 [00:06<00:00, 24.76it/s]
 92%|| 73/79 [00:06<00:00, 25.42it/s]
 96%|| 76/79 [00:06<00:00, 26.22it/s]
100%|| 79/79 [00:06<00:00, 27.24it/s]
, 21.09it/s]
 70%|   | 55/79 [00:05<00:01, 22.32it/s]
 73%|  | 58/79 [00:05<00:00, 23.11it/s]
 77%|  | 61/79 [00:05<00:00, 24.04it/s]
 81%|  | 64/79 [00:05<00:00, 24.47it/s]
 85%| | 67/79 [00:06<00:00, 24.64it/s]
 89%| | 70/79 [00:06<00:00, 24.85it/s]
 92%|| 73/79 [00:06<00:00, 25.36it/s]
 96%|| 76/79 [00:06<00:00, 26.17it/s]
100%|| 79/79 [00:06<00:00, 27.19it/s]
, 20.87it/s]
 70%|   | 55/79 [00:05<00:01, 21.78it/s]
 73%|  | 58/79 [00:05<00:00, 22.80it/s]
 77%|  | 61/79 [00:05<00:00, 23.46it/s]
 81%|  | 64/79 [00:05<00:00, 23.54it/s]
 85%| | 67/79 [00:06<00:00, 23.86it/s]
 89%| | 70/79 [00:06<00:00, 24.28it/s]
 92%|| 73/79 [00:06<00:00, 24.82it/s]
 96%|| 76/79 [00:06<00:00, 25.71it/s]
100%|| 79/79 [00:06<00:00, 26.69it/s]
, 20.69it/s]
 70%|   | 55/79 [00:05<00:01, 21.86it/s]
 73%|  | 58/79 [00:05<00:00, 22.62it/s]
 77%|  | 61/79 [00:05<00:00, 23.39it/s]
 81%|  | 64/79 [00:05<00:00, 23.84it/s]
 85%| | 67/79 [00:06<00:00, 24.29it/s]
 89%| | 70/79 [00:06<00:00, 24.49it/s]
 92%|| 73/79 [00:06<00:00, 25.01it/s]
 96%|| 76/79 [00:06<00:00, 25.95it/s]
100%|| 79/79 [00:06<00:00, 26.98it/s]
, 21.13it/s]
 70%|   | 55/79 [00:05<00:01, 22.30it/s]
 73%|  | 58/79 [00:05<00:00, 23.14it/s]
 77%|  | 61/79 [00:05<00:00, 23.76it/s]
 81%|  | 64/79 [00:05<00:00, 24.22it/s]
 85%| | 67/79 [00:06<00:00, 24.64it/s]
 89%| | 70/79 [00:06<00:00, 25.08it/s]
 92%|| 73/79 [00:06<00:00, 25.44it/s]
 96%|| 76/79 [00:06<00:00, 26.35it/s]
100%|| 79/79 [00:06<00:00, 27.28it/s]
, 21.16it/s]
 70%|   | 55/79 [00:05<00:01, 22.37it/s]
 73%|  | 58/79 [00:05<00:00, 23.20it/s]
 77%|  | 61/79 [00:05<00:00, 23.94it/s]
 81%|  | 64/79 [00:05<00:00, 24.44it/s]
 85%| | 67/79 [00:06<00:00, 24.97it/s]
 89%| | 70/79 [00:06<00:00, 24.94it/s]
 92%|| 73/79 [00:06<00:00, 25.35it/s]
 96%|| 76/79 [00:06<00:00, 25.92it/s]
100%|| 79/79 [00:06<00:00, 26.66it/s]
, 21.45it/s]
 70%|   | 55/79 [00:05<00:01, 22.65it/s]
 73%|  | 58/79 [00:05<00:00, 23.15it/s]
 77%|  | 61/79 [00:05<00:00, 23.81it/s]
 81%|  | 64/79 [00:05<00:00, 24.41it/s]
 85%| | 67/79 [00:06<00:00, 24.49it/s]
 89%| | 70/79 [00:06<00:00, 24.78it/s]
 92%|| 73/79 [00:06<00:00, 25.32it/s]
 96%|| 76/79 [00:06<00:00, 26.03it/s]
100%|| 79/79 [00:06<00:00, 27.09it/s]
42it/s]
 68%|   | 54/79 [00:05<00:01, 21.61it/s]
 72%|  | 57/79 [00:05<00:00, 22.37it/s]
 76%|  | 60/79 [00:05<00:00, 22.76it/s]
 80%|  | 63/79 [00:05<00:00, 23.30it/s]
 84%| | 66/79 [00:06<00:00, 23.73it/s]
 87%| | 69/79 [00:06<00:00, 24.02it/s]
 91%| | 72/79 [00:06<00:00, 24.76it/s]
 95%|| 75/79 [00:06<00:00, 25.71it/s]
 99%|| 78/79 [00:06<00:00, 26.40it/s]
100%|| 79/79 [00:06<00:00, 11.97it/s]
63it/s]
 68%|   | 54/79 [00:05<00:01, 21.74it/s]
 72%|  | 57/79 [00:05<00:00, 22.62it/s]
 76%|  | 60/79 [00:05<00:00, 23.42it/s]
 80%|  | 63/79 [00:05<00:00, 23.83it/s]
 84%| | 66/79 [00:06<00:00, 24.24it/s]
 87%| | 69/79 [00:06<00:00, 24.59it/s]
 91%| | 72/79 [00:06<00:00, 24.63it/s]
 95%|| 75/79 [00:06<00:00, 25.31it/s]
 99%|| 78/79 [00:06<00:00, 25.76it/s]
100%|| 79/79 [00:06<00:00, 11.98it/s]
, 20.88it/s]
 70%|   | 55/79 [00:05<00:01, 21.68it/s]
 73%|  | 58/79 [00:05<00:00, 22.61it/s]
 77%|  | 61/79 [00:05<00:00, 23.50it/s]
 81%|  | 64/79 [00:05<00:00, 23.42it/s]
 85%| | 67/79 [00:06<00:00, 23.73it/s]
 89%| | 70/79 [00:06<00:00, 24.20it/s]
 92%|| 73/79 [00:06<00:00, 24.50it/s]
 96%|| 76/79 [00:06<00:00, 25.40it/s]
100%|| 79/79 [00:06<00:00, 26.37it/s]
, 21.01it/s]
 70%|   | 55/79 [00:05<00:01, 22.08it/s]
 73%|  | 58/79 [00:05<00:00, 23.11it/s]
 77%|  | 61/79 [00:05<00:00, 23.70it/s]
 81%|  | 64/79 [00:06<00:00, 24.08it/s]
 85%| | 67/79 [00:06<00:00, 24.38it/s]
 89%| | 70/79 [00:06<00:00, 24.78it/s]
 92%|| 73/79 [00:06<00:00, 25.11it/s]
 96%|| 76/79 [00:06<00:00, 26.37it/s]
100%|| 79/79 [00:06<00:00, 26.90it/s]
, 20.60it/s]
 70%|   | 55/79 [00:05<00:01, 21.83it/s]
 73%|  | 58/79 [00:05<00:00, 22.63it/s]
 77%|  | 61/79 [00:05<00:00, 23.30it/s]
 81%|  | 64/79 [00:05<00:00, 23.76it/s]
 85%| | 67/79 [00:06<00:00, 24.45it/s]
 89%| | 70/79 [00:06<00:00, 24.50it/s]
 92%|| 73/79 [00:06<00:00, 24.69it/s]
 96%|| 76/79 [00:06<00:00, 25.43it/s]
100%|| 79/79 [00:06<00:00, 26.28it/s]
, 20.36it/s]
 70%|   | 55/79 [00:05<00:01, 21.54it/s]
 73%|  | 58/79 [00:05<00:00, 22.11it/s]
 77%|  | 61/79 [00:05<00:00, 22.46it/s]
 81%|  | 64/79 [00:05<00:00, 23.11it/s]
 85%| | 67/79 [00:06<00:00, 23.44it/s]
 89%| | 70/79 [00:06<00:00, 23.62it/s]
 92%|| 73/79 [00:06<00:00, 24.21it/s]
 96%|| 76/79 [00:06<00:00, 25.08it/s]
100%|| 79/79 [00:06<00:00, 26.11it/s]
, 20.58it/s]
 70%|   | 55/79 [00:05<00:01, 21.52it/s]
 73%|  | 58/79 [00:05<00:00, 22.56it/s]
 77%|  | 61/79 [00:05<00:00, 23.06it/s]
 81%|  | 64/79 [00:05<00:00, 23.45it/s]
 85%| | 67/79 [00:06<00:00, 23.62it/s]
 89%| | 70/79 [00:06<00:00, 24.04it/s]
 92%|| 73/79 [00:06<00:00, 24.56it/s]
 96%|| 76/79 [00:06<00:00, 25.47it/s]
100%|| 79/79 [00:06<00:00, 26.48it/s]
, 20.16it/s]
 70%|   | 55/79 [00:05<00:01, 20.97it/s]
 73%|  | 58/79 [00:05<00:00, 21.83it/s]
 77%|  | 61/79 [00:05<00:00, 22.01it/s]
 81%|  | 64/79 [00:06<00:00, 22.45it/s]
 85%| | 67/79 [00:06<00:00, 22.91it/s]
 89%| | 70/79 [00:06<00:00, 23.19it/s]
 92%|| 73/79 [00:06<00:00, 23.93it/s]
 96%|| 76/79 [00:06<00:00, 24.89it/s]
100%|| 79/79 [00:06<00:00, 26.03it/s]
, 20.02it/s]
 70%|   | 55/79 [00:05<00:01, 21.09it/s]
 73%|  | 58/79 [00:05<00:00, 21.79it/s]
 77%|  | 61/79 [00:05<00:00, 22.43it/s]
 81%|  | 64/79 [00:06<00:00, 23.08it/s]
 85%| | 67/79 [00:06<00:00, 23.40it/s]
 89%| | 70/79 [00:06<00:00, 23.74it/s]
 92%|| 73/79 [00:06<00:00, 24.07it/s]
 96%|| 76/79 [00:06<00:00, 25.13it/s]
100%|| 79/79 [00:06<00:00, 26.09it/s]
, 19.75it/s]
 70%|   | 55/79 [00:05<00:01, 20.90it/s]
 73%|  | 58/79 [00:05<00:00, 21.80it/s]
 77%|  | 61/79 [00:05<00:00, 22.11it/s]
 81%|  | 64/79 [00:06<00:00, 22.20it/s]
 85%| | 67/79 [00:06<00:00, 22.82it/s]
 89%| | 70/79 [00:06<00:00, 23.07it/s]
 92%|| 73/79 [00:06<00:00, 23.85it/s]
 96%|| 76/79 [00:06<00:00, 24.81it/s]
100%|| 79/79 [00:06<00:00, 25.91it/s]
2020-06-23 16:17:25,246 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:06.720696 (0.043012457275390624 s / img per device, on 32 devices)
2020-06-23 16:17:25,265 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:17:25,265 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:17:25,283 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592954251588, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 15, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592954251589, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 15}}
2020-06-23 16:17:31,811 maskrcnn_benchmark.trainer INFO: eta: 0:56:54  iter: 12840  loss: 0.5795 (0.7011)  loss_classifier: 0.1733 (0.2517)  loss_box_reg: 0.0864 (0.1137)  loss_mask: 0.2371 (0.2836)  loss_objectness: 0.0199 (0.0329)  loss_rpn_box_reg: 0.0163 (0.0192)  time: 0.1083 (0.1257)  data: 0.0015 (0.0183)  lr: 0.001600  max mem: 5098
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:17:34,026 maskrcnn_benchmark.trainer INFO: eta: 0:56:51  iter: 12860  loss: 0.4838 (0.7009)  loss_classifier: 0.1578 (0.2516)  loss_box_reg: 0.0729 (0.1137)  loss_mask: 0.2317 (0.2835)  loss_objectness: 0.0195 (0.0329)  loss_rpn_box_reg: 0.0049 (0.0192)  time: 0.1095 (0.1257)  data: 0.0015 (0.0183)  lr: 0.001600  max mem: 5098
2020-06-23 16:17:36,206 maskrcnn_benchmark.trainer INFO: eta: 0:56:47  iter: 12880  loss: 0.5456 (0.7007)  loss_classifier: 0.1610 (0.2515)  loss_box_reg: 0.0880 (0.1137)  loss_mask: 0.2424 (0.2835)  loss_objectness: 0.0127 (0.0328)  loss_rpn_box_reg: 0.0079 (0.0192)  time: 0.1089 (0.1257)  data: 0.0014 (0.0182)  lr: 0.001600  max mem: 5098
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.54s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.46s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37736
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.59216
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.40866
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21845
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.40772
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49841
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.31348
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.49243
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51674
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.32723
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.55271
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.64951
2020-06-23 16:17:38,405 maskrcnn_benchmark.trainer INFO: eta: 0:56:44  iter: 12900  loss: 0.4868 (0.7005)  loss_classifier: 0.1663 (0.2514)  loss_box_reg: 0.0806 (0.1137)  loss_mask: 0.2288 (0.2834)  loss_objectness: 0.0092 (0.0328)  loss_rpn_box_reg: 0.0060 (0.0192)  time: 0.1092 (0.1256)  data: 0.0014 (0.0182)  lr: 0.001600  max mem: 5098
2020-06-23 16:17:40,574 maskrcnn_benchmark.trainer INFO: eta: 0:56:41  iter: 12920  loss: 0.4982 (0.7002)  loss_classifier: 0.1663 (0.2513)  loss_box_reg: 0.0700 (0.1136)  loss_mask: 0.2355 (0.2833)  loss_objectness: 0.0104 (0.0328)  loss_rpn_box_reg: 0.0107 (0.0192)  time: 0.1085 (0.1256)  data: 0.0014 (0.0182)  lr: 0.001600  max mem: 5098
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:17:42,755 maskrcnn_benchmark.trainer INFO: eta: 0:56:38  iter: 12940  loss: 0.5169 (0.7000)  loss_classifier: 0.1510 (0.2511)  loss_box_reg: 0.0801 (0.1136)  loss_mask: 0.2567 (0.2833)  loss_objectness: 0.0086 (0.0328)  loss_rpn_box_reg: 0.0053 (0.0192)  time: 0.1082 (0.1256)  data: 0.0014 (0.0182)  lr: 0.001600  max mem: 5098
DONE (t=1.38s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:17:44,942 maskrcnn_benchmark.trainer INFO: eta: 0:56:35  iter: 12960  loss: 0.5386 (0.6997)  loss_classifier: 0.1604 (0.2510)  loss_box_reg: 0.0986 (0.1136)  loss_mask: 0.2462 (0.2832)  loss_objectness: 0.0135 (0.0328)  loss_rpn_box_reg: 0.0083 (0.0192)  time: 0.1091 (0.1256)  data: 0.0014 (0.0181)  lr: 0.001600  max mem: 5098
DONE (t=2.34s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.34324
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.55755
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.36565
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15775
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37110
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.50636
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29443
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.45101
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.47140
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27439
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50793
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62170
2020-06-23 16:17:46,937 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.37736238212009626, segm mAP: 0.3432402694524403
:::MLLOG {"namespace": "", "time_ms": 1592954266938, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.37736238212009626, "SEGM": 0.3432402694524403}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 14}}
:::MLLOG {"namespace": "", "time_ms": 1592954266938, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 14}}
2020-06-23 16:17:46,938 maskrcnn_benchmark.trainer INFO: Target mAP reached, exiting...
&&&& MLPERF METRIC THROUGHPUT=1019.4103 iterations / s
2020-06-23 16:17:47,068 maskrcnn_benchmark.trainer INFO: Total training time: 0:27:09.361234 (0.0407 s / it)
&&&& MLPERF METRIC THROUGHPUT=1019.4493 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.2865 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.1768 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.1909 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.1984 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.5052 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.2006 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.3057 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.2317 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.2602 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.1669 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.2603 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.1708 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.2256 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.2391 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.2119 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.4679 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.4022 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.1326 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.2612 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.1358 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.6239 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.1345 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.5202 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.5616 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.2140 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.1608 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.3106 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.4395 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.3617 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1019.4467 iterations / s
&&&& MLPERF METRIC TIME= 1667.2431132793427
&&&& MLPERF METRIC TIME= 1667.2529470920563
&&&& MLPERF METRIC TIME= 1667.273926973343
&&&& MLPERF METRIC TIME= 1667.399760723114
&&&& MLPERF METRIC TIME= 1667.2446043491364
&&&& MLPERF METRIC TIME= 1667.3860013484955
&&&& MLPERF METRIC TIME= 1667.2697706222534
&&&& MLPERF METRIC TIME= 1667.2666437625885
&&&& MLPERF METRIC TIME= 1667.5031583309174
&&&& MLPERF METRIC TIME= 1667.3525066375732
&&&& MLPERF METRIC TIME= 1667.266273021698
&&&& MLPERF METRIC TIME= 1667.3259100914001
&&&& MLPERF METRIC TIME= 1667.5659317970276
&&&& MLPERF METRIC TIME= 1667.438515663147
&&&& MLPERF METRIC TIME= 1667.2690982818604
&&&& MLPERF METRIC TIME= 1667.3278496265411
&&&& MLPERF METRIC TIME= 1667.2737278938293
&&&& MLPERF METRIC TIME= 1667.3771748542786
&&&& MLPERF METRIC TIME= 1667.5097208023071
&&&& MLPERF METRIC TIME= 1667.2795324325562
&&&& MLPERF METRIC TIME= 1667.2904262542725
&&&& MLPERF METRIC TIME= 1667.367977142334
&&&& MLPERF METRIC TIME= 1667.2829620838165
&&&& MLPERF METRIC TIME= 1667.3250744342804
&&&& MLPERF METRIC TIME= 1667.2841048240662
&&&& MLPERF METRIC TIME= 1667.3400168418884
&&&& MLPERF METRIC TIME= 1667.6073117256165
&&&& MLPERF METRIC TIME= 1667.5066087245941
&&&& MLPERF METRIC TIME= 1667.315128326416
&&&& MLPERF METRIC TIME= 1667.545310974121
&&&& MLPERF METRIC TIME= 1667.3388001918793
:::MLLOG {"namespace": "", "time_ms": 1592954269549, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 360, "status": "success"}}
&&&& MLPERF METRIC TIME= 1667.9318504333496
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ ret_code=0
+ set +x
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ ret_code=0
+ set +x
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
ENDING TIMING RUN AT 2020-06-23 04:17:53 PM
RESULT,OBJECT_DETECTION,,1674,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:53 PM
RESULT,OBJECT_DETECTION,,1674,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:53 PM
RESULT,OBJECT_DETECTION,,1674,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:53 PM
RESULT,OBJECT_DETECTION,,1674,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:53 PM
RESULT,OBJECT_DETECTION,,1674,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:54 PM
RESULT,OBJECT_DETECTION,,1675,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:55 PM
RESULT,OBJECT_DETECTION,,1676,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:55 PM
RESULT,OBJECT_DETECTION,,1676,nvidia,2020-06-23 03:49:59 PM
ENDING TIMING RUN AT 2020-06-23 04:17:55 PM
RESULT,OBJECT_DETECTION,,1676,nvidia,2020-06-23 03:49:59 PM
