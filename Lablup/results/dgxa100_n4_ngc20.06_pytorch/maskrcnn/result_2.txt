+ echo 'Beginning trial 4 of 5'
Beginning trial 4 of 5
+ srun --ntasks=4 --container-name=object_detection python -c '
from mlperf_logging.mllog import constants
from maskrcnn_benchmark.utils.mlperf_logger import mlperf_submission_log
mlperf_submission_log(constants.MASKRCNN)'
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
:::MLLOG {"namespace": "", "time_ms": 1592956086814, "event_type": "POINT_IN_TIME", "key": "submission_benchmark", "value": "maskrcnn", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 73}}
:::MLLOG {"namespace": "", "time_ms": 1592956086853, "event_type": "POINT_IN_TIME", "key": "submission_org", "value": "NVIDIA", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 78}}
:::MLLOG {"namespace": "", "time_ms": 1592956086853, "event_type": "POINT_IN_TIME", "key": "submission_division", "value": "closed", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 82}}
:::MLLOG {"namespace": "", "time_ms": 1592956086853, "event_type": "POINT_IN_TIME", "key": "submission_status", "value": "onprem", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 86}}
:::MLLOG {"namespace": "", "time_ms": 1592956086853, "event_type": "POINT_IN_TIME", "key": "submission_platform", "value": "4xNVIDIA DGX A100", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 90}}
+ '[' 1 -eq 1 ']'
+ srun --ntasks=4 bash -c 'echo -n '\''Clearing cache on '\'' && hostname && sync && sudo /sbin/sysctl vm.drop_caches=3'
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
Clearing cache on luna-0208
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
Clearing cache on luna-0205
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
Clearing cache on luna-0206
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
Clearing cache on luna-0207
vm.drop_caches = 3
vm.drop_caches = 3
vm.drop_caches = 3
vm.drop_caches = 3
+ srun --ntasks=4 --container-name=object_detection python -c '
from mlperf_logging.mllog import constants
from maskrcnn_benchmark.utils.mlperf_logger import log_event
log_event(key=constants.CACHE_CLEAR, value=True, stack_offset=1)'
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
:::MLLOG {"namespace": "", "time_ms": 1592956092114, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
:::MLLOG {"namespace": "", "time_ms": 1592956092136, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
:::MLLOG {"namespace": "", "time_ms": 1592956092261, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
:::MLLOG {"namespace": "", "time_ms": 1592956092287, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
+ srun --mpi=none --ntasks=32 --ntasks-per-node=8 --container-name=object_detection --container-mounts=/raid/datasets/coco/coco-2017:/data,/lustre/fsw/mlperf-ci/14126173/results:/results ./run_and_time.sh
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 4 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 7 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
++ ls /data
+ echo 'running benchmark'
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 1 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ ln -sTf /data/coco2017 /coco
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 0 ']'
++ ls /data
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
++ ls /data
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
+ echo coco2017
coco2017
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
+ declare -a CMD
+ echo coco2017
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
+ '[' -n 2 ']'
coco2017
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ declare -a CMD
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
+ '[' -n 5 ']'
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
+ '[' 32 -gt 4 ']'
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
++ ls /data
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 3 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 6 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 3 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
++ ls /data
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
++ ls /data
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ echo coco2017
coco2017
+ declare -a CMD
+ echo coco2017
+ echo coco2017
+ '[' -n 6 ']'
coco2017
coco2017
+ declare -a CMD
+ declare -a CMD
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ '[' -n 1 ']'
+ '[' -n 2 ']'
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
++ ls /data
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 0 ']'
++ ls /data
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 4 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 7 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 5 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
+ echo 'running benchmark'
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
+ echo coco2017
+ echo 'running benchmark'
+ DATASET_DIR=/data
coco2017
running benchmark
+ declare -a CMD
+ ln -sTf /data/coco2017 /coco
+ '[' -n 1 ']'
+ '[' 32 -gt 4 ']'
++ ls /data
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
++ ls /data
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 5 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
+ echo coco2017
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
coco2017
+ declare -a CMD
+ '[' -n 0 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 2 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
coco2017
+ echo coco2017
+ declare -a CMD
++ ls /data
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ '[' -n 4 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 7 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 6 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 3 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
++ ls /data
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 7 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 5 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
+ echo 'running benchmark'
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:48:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 2 ']'
+ '[' 32 -gt 4 ']'
++ ls /data
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 3 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 1 ']'
++ ls /data
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 4 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 0 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 6 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
:::MLLOG {"namespace": "", "time_ms": 1592956095562, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956095796, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956095835, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956095849, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956095886, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956095916, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956095973, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956095941, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956095966, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956095970, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956095991, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096044, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096044, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096047, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096026, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096025, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096041, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096082, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096147, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096141, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096170, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096184, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096195, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096195, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096198, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096203, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096213, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096216, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096216, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096216, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096213, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956096213, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592956104152, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3267192576, "metadata": {"file": "tools/train_mlperf.py", "lineno": 318}}
2020-06-23 16:48:24,159 maskrcnn_benchmark INFO: Using 32 GPUs
2020-06-23 16:48:24,159 maskrcnn_benchmark INFO: Namespace(config_file='configs/e2e_mask_rcnn_R_50_FPN_1x.yaml', distributed=True, local_rank=0, opts=['DTYPE', 'float16', 'PATHS_CATALOG', 'maskrcnn_benchmark/config/paths_catalog_dbcluster.py', 'MODEL.WEIGHT', '/coco/models/R-50.pkl', 'DISABLE_REDUCED_LOGGING', 'True', 'SOLVER.BASE_LR', '0.16', 'SOLVER.MAX_ITER', '40000', 'SOLVER.WARMUP_FACTOR', '0.000256', 'SOLVER.WARMUP_ITERS', '625', 'SOLVER.WARMUP_METHOD', 'mlperf_linear', 'SOLVER.STEPS', '(9000,12000)', 'SOLVER.IMS_PER_BATCH', '128', 'TEST.IMS_PER_BATCH', '64', 'MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN', '4000', 'NHWC', 'True'], seed=3267192576)
2020-06-23 16:48:24,160 maskrcnn_benchmark INFO: Worker 0: Setting seed 2418221332
2020-06-23 16:48:24,160 maskrcnn_benchmark INFO: Collecting env info (might take some time)
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
2020-06-23 16:48:34,676 maskrcnn_benchmark INFO:
PyTorch version: 1.6.0a0+9907a3e
Is debug build: No
CUDA used to build PyTorch: 11.0

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.14.0

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration:
GPU 0: A100-SXM4-40GB
GPU 1: A100-SXM4-40GB
GPU 2: A100-SXM4-40GB
GPU 3: A100-SXM4-40GB
GPU 4: A100-SXM4-40GB
GPU 5: A100-SXM4-40GB
GPU 6: A100-SXM4-40GB
GPU 7: A100-SXM4-40GB

Nvidia driver version: 450.36.06
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_adv_infer.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_adv_train.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_cnn_infer.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_cnn_train.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_ops_infer.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_ops_train.so.8.0.1

Versions of relevant libraries:
[pip] msgpack-numpy==0.4.3.2
[pip] numpy==1.17.4
[pip] pytorch-transformers==1.1.0
[pip] torch==1.6.0a0+9907a3e
[pip] torchtext==0.6.0
[pip] torchvision==0.7.0a0
[conda] magma-cuda110             2.5.2                         5    local
[conda] mkl                       2019.1                      144
[conda] mkl-include               2019.1                      144
[conda] msgpack-numpy             0.4.3.2                  py36_0
[conda] nomkl                     3.0                           0
[conda] numpy                     1.17.4           py36hd5be1e1_0
[conda] numpy-base                1.17.4           py36h2f8d375_0
[conda] pytorch-transformers      1.1.0                    pypi_0    pypi
[conda] torch                     1.6.0a0+9907a3e          pypi_0    pypi
[conda] torchtext                 0.6.0                    pypi_0    pypi
[conda] torchvision               0.7.0a0                  pypi_0    pypi
        Pillow (7.1.1)
2020-06-23 16:48:34,677 maskrcnn_benchmark INFO: Loaded configuration file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml
2020-06-23 16:48:34,677 maskrcnn_benchmark INFO:
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "catalog://ImageNetPretrained/MSRA/R-50"
  BACKBONE:
    CONV_BODY: "R-50-FPN"
    OUT_CHANNELS: 256
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
  ROI_MASK_HEAD:
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    FEATURE_EXTRACTOR: "MaskRCNNFPNFeatureExtractor"
    PREDICTOR: "MaskRCNNC4Predictor"
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  MASK_ON: True
DATASETS:
  TRAIN: ("coco_2017_train",)
  TEST: ("coco_2017_val",)
DATALOADER:
  SIZE_DIVISIBILITY: 32
SOLVER:
  BASE_LR: 0.02
  WEIGHT_DECAY: 0.0001
  STEPS: (60000, 80000)
  MAX_ITER: 90000

2020-06-23 16:48:34,677 maskrcnn_benchmark INFO: Running with config:
AMP_VERBOSE: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 4
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('coco_2017_val',)
  TRAIN: ('coco_2017_train',)
DISABLE_REDUCED_LOGGING: True
DTYPE: float16
INPUT:
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (800,)
  PIXEL_MEAN: [102.9801, 115.9465, 122.7717]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MLPERF:
  MIN_BBOX_MAP: 0.377
  MIN_SEGM_MAP: 0.339
MODEL:
  BACKBONE:
    CONV_BODY: R-50-FPN
    FREEZE_CONV_BODY_AT: 2
    OUT_CHANNELS: 256
    USE_GN: False
  CLS_AGNOSTIC_BBOX_REG: False
  DEVICE: cuda
  FPN:
    USE_GN: False
    USE_RELU: False
  GROUP_NORM:
    DIM_PER_GP: -1
    EPSILON: 1e-05
    NUM_GROUPS: 32
  KEYPOINT_ON: False
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    NUM_GROUPS: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 64
  RETINANET:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDES: (8, 16, 32, 64, 128)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BBOX_REG_BETA: 0.11
    BBOX_REG_WEIGHT: 4.0
    BG_IOU_THRESHOLD: 0.4
    FG_IOU_THRESHOLD: 0.5
    INFERENCE_TH: 0.05
    LOSS_ALPHA: 0.25
    LOSS_GAMMA: 2.0
    NMS_TH: 0.4
    NUM_CLASSES: 81
    NUM_CONVS: 4
    OCTAVE: 2.0
    PRE_NMS_TOP_N: 1000
    PRIOR_PROB: 0.01
    SCALES_PER_OCTAVE: 3
    STRADDLE_THRESH: 0
    USE_C5: True
  RETINANET_ON: False
  ROI_BOX_HEAD:
    CONV_HEAD_DIM: 256
    DILATION: 1
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 81
    NUM_STACKED_CONVS: 4
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
    USE_GN: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_KEYPOINT_HEAD:
    CONV_LAYERS: (512, 512, 512, 512, 512, 512, 512, 512)
    FEATURE_EXTRACTOR: KeypointRCNNFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_SCALES: (0.0625,)
    PREDICTOR: KeypointRCNNPredictor
    RESOLUTION: 14
    SHARE_BOX_FEATURE_EXTRACTOR: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    DILATION: 1
    FEATURE_EXTRACTOR: MaskRCNNFPNFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
    USE_GN: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 4000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 2000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: /coco/models/R-50.pkl
NHWC: True
OUTPUT_DIR: .
PATHS_CATALOG: maskrcnn_benchmark/config/paths_catalog_dbcluster.py
PER_EPOCH_EVAL: True
SAVE_CHECKPOINTS: False
SOLVER:
  BASE_LR: 0.16
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 2500
  GAMMA: 0.1
  IMS_PER_BATCH: 128
  MAX_ITER: 40000
  MOMENTUM: 0.9
  STEPS: (9000, 12000)
  WARMUP_FACTOR: 0.000256
  WARMUP_ITERS: 625
  WARMUP_METHOD: mlperf_linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  DETECTIONS_PER_IMG: 100
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 64
:::MLLOG {"namespace": "", "time_ms": 1592956114679, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 128, "metadata": {"file": "tools/train_mlperf.py", "lineno": 156}}
:::MLLOG {"namespace": "", "time_ms": 1592956114679, "event_type": "POINT_IN_TIME", "key": "num_image_candidates", "value": 4000, "metadata": {"file": "tools/train_mlperf.py", "lineno": 157}}
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
:::MLLOG {"namespace": "", "time_ms": 1592956120024, "event_type": "POINT_IN_TIME", "key": "opt_name", "value": "sgd_with_momentum", "metadata": {"file": "tools/train_mlperf.py", "lineno": 171}}
:::MLLOG {"namespace": "", "time_ms": 1592956120025, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.16, "metadata": {"file": "tools/train_mlperf.py", "lineno": 172}}
:::MLLOG {"namespace": "", "time_ms": 1592956120025, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 625, "metadata": {"file": "tools/train_mlperf.py", "lineno": 173}}
:::MLLOG {"namespace": "", "time_ms": 1592956120025, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0.000256, "metadata": {"file": "tools/train_mlperf.py", "lineno": 174}}
:::MLLOG {"namespace": "", "time_ms": 1592956120025, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_factor", "value": 0.1, "metadata": {"file": "tools/train_mlperf.py", "lineno": 175}}
:::MLLOG {"namespace": "", "time_ms": 1592956120025, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [9000, 12000], "metadata": {"file": "tools/train_mlperf.py", "lineno": 176}}
:::MLLOG {"namespace": "", "time_ms": 1592956120025, "event_type": "POINT_IN_TIME", "key": "min_image_size", "value": 800, "metadata": {"file": "tools/train_mlperf.py", "lineno": 177}}
:::MLLOG {"namespace": "", "time_ms": 1592956120025, "event_type": "POINT_IN_TIME", "key": "max_image_size", "value": 1333, "metadata": {"file": "tools/train_mlperf.py", "lineno": 178}}
2020-06-23 16:48:40,035 maskrcnn_benchmark.utils.checkpoint INFO: Loading checkpoint from /coco/models/R-50.pkl
2020-06-23 16:48:40,089 maskrcnn_benchmark.utils.c2_model_loading INFO: Remapping C2 weights
2020-06-23 16:48:40,089 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: conv1_b              mapped name: conv1.bias
2020-06-23 16:48:40,089 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: conv1_w              mapped name: conv1.weight
2020-06-23 16:48:40,089 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: fc1000_b             mapped name: fc1000.bias
2020-06-23 16:48:40,089 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: fc1000_w             mapped name: fc1000.weight
2020-06-23 16:48:40,089 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_b     mapped name: layer1.0.downsample.0.bias
2020-06-23 16:48:40,089 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_bn_b  mapped name: layer1.0.downsample.1.bias
2020-06-23 16:48:40,089 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_bn_s  mapped name: layer1.0.downsample.1.weight
2020-06-23 16:48:40,089 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_w     mapped name: layer1.0.downsample.0.weight
2020-06-23 16:48:40,089 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_b    mapped name: layer1.0.conv1.bias
2020-06-23 16:48:40,089 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_bn_b mapped name: layer1.0.bn1.bias
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_bn_s mapped name: layer1.0.bn1.weight
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_w    mapped name: layer1.0.conv1.weight
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_b    mapped name: layer1.0.conv2.bias
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_bn_b mapped name: layer1.0.bn2.bias
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_bn_s mapped name: layer1.0.bn2.weight
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_w    mapped name: layer1.0.conv2.weight
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_b    mapped name: layer1.0.conv3.bias
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_bn_b mapped name: layer1.0.bn3.bias
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_bn_s mapped name: layer1.0.bn3.weight
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_w    mapped name: layer1.0.conv3.weight
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_b    mapped name: layer1.1.conv1.bias
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_bn_b mapped name: layer1.1.bn1.bias
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_bn_s mapped name: layer1.1.bn1.weight
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_w    mapped name: layer1.1.conv1.weight
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_b    mapped name: layer1.1.conv2.bias
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_bn_b mapped name: layer1.1.bn2.bias
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_bn_s mapped name: layer1.1.bn2.weight
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_w    mapped name: layer1.1.conv2.weight
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_b    mapped name: layer1.1.conv3.bias
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_bn_b mapped name: layer1.1.bn3.bias
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_bn_s mapped name: layer1.1.bn3.weight
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_w    mapped name: layer1.1.conv3.weight
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_b    mapped name: layer1.2.conv1.bias
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_bn_b mapped name: layer1.2.bn1.bias
2020-06-23 16:48:40,090 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_bn_s mapped name: layer1.2.bn1.weight
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_w    mapped name: layer1.2.conv1.weight
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_b    mapped name: layer1.2.conv2.bias
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_bn_b mapped name: layer1.2.bn2.bias
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_bn_s mapped name: layer1.2.bn2.weight
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_w    mapped name: layer1.2.conv2.weight
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_b    mapped name: layer1.2.conv3.bias
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_bn_b mapped name: layer1.2.bn3.bias
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_bn_s mapped name: layer1.2.bn3.weight
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_w    mapped name: layer1.2.conv3.weight
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_b     mapped name: layer2.0.downsample.0.bias
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_bn_b  mapped name: layer2.0.downsample.1.bias
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_bn_s  mapped name: layer2.0.downsample.1.weight
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_w     mapped name: layer2.0.downsample.0.weight
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_b    mapped name: layer2.0.conv1.bias
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_bn_b mapped name: layer2.0.bn1.bias
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_bn_s mapped name: layer2.0.bn1.weight
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_w    mapped name: layer2.0.conv1.weight
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_b    mapped name: layer2.0.conv2.bias
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_bn_b mapped name: layer2.0.bn2.bias
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_bn_s mapped name: layer2.0.bn2.weight
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_w    mapped name: layer2.0.conv2.weight
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_b    mapped name: layer2.0.conv3.bias
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_bn_b mapped name: layer2.0.bn3.bias
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_bn_s mapped name: layer2.0.bn3.weight
2020-06-23 16:48:40,091 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_w    mapped name: layer2.0.conv3.weight
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_b    mapped name: layer2.1.conv1.bias
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_bn_b mapped name: layer2.1.bn1.bias
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_bn_s mapped name: layer2.1.bn1.weight
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_w    mapped name: layer2.1.conv1.weight
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_b    mapped name: layer2.1.conv2.bias
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_bn_b mapped name: layer2.1.bn2.bias
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_bn_s mapped name: layer2.1.bn2.weight
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_w    mapped name: layer2.1.conv2.weight
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_b    mapped name: layer2.1.conv3.bias
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_bn_b mapped name: layer2.1.bn3.bias
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_bn_s mapped name: layer2.1.bn3.weight
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_w    mapped name: layer2.1.conv3.weight
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_b    mapped name: layer2.2.conv1.bias
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_bn_b mapped name: layer2.2.bn1.bias
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_bn_s mapped name: layer2.2.bn1.weight
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_w    mapped name: layer2.2.conv1.weight
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_b    mapped name: layer2.2.conv2.bias
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_bn_b mapped name: layer2.2.bn2.bias
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_bn_s mapped name: layer2.2.bn2.weight
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_w    mapped name: layer2.2.conv2.weight
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_b    mapped name: layer2.2.conv3.bias
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_bn_b mapped name: layer2.2.bn3.bias
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_bn_s mapped name: layer2.2.bn3.weight
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_w    mapped name: layer2.2.conv3.weight
2020-06-23 16:48:40,092 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_b    mapped name: layer2.3.conv1.bias
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_bn_b mapped name: layer2.3.bn1.bias
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_bn_s mapped name: layer2.3.bn1.weight
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_w    mapped name: layer2.3.conv1.weight
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_b    mapped name: layer2.3.conv2.bias
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_bn_b mapped name: layer2.3.bn2.bias
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_bn_s mapped name: layer2.3.bn2.weight
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_w    mapped name: layer2.3.conv2.weight
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_b    mapped name: layer2.3.conv3.bias
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_bn_b mapped name: layer2.3.bn3.bias
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_bn_s mapped name: layer2.3.bn3.weight
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_w    mapped name: layer2.3.conv3.weight
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_b     mapped name: layer3.0.downsample.0.bias
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_bn_b  mapped name: layer3.0.downsample.1.bias
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_bn_s  mapped name: layer3.0.downsample.1.weight
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_w     mapped name: layer3.0.downsample.0.weight
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_b    mapped name: layer3.0.conv1.bias
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_bn_b mapped name: layer3.0.bn1.bias
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_bn_s mapped name: layer3.0.bn1.weight
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_w    mapped name: layer3.0.conv1.weight
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_b    mapped name: layer3.0.conv2.bias
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_bn_b mapped name: layer3.0.bn2.bias
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_bn_s mapped name: layer3.0.bn2.weight
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_w    mapped name: layer3.0.conv2.weight
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_b    mapped name: layer3.0.conv3.bias
2020-06-23 16:48:40,093 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_bn_b mapped name: layer3.0.bn3.bias
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_bn_s mapped name: layer3.0.bn3.weight
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_w    mapped name: layer3.0.conv3.weight
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_b    mapped name: layer3.1.conv1.bias
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_bn_b mapped name: layer3.1.bn1.bias
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_bn_s mapped name: layer3.1.bn1.weight
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_w    mapped name: layer3.1.conv1.weight
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_b    mapped name: layer3.1.conv2.bias
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_bn_b mapped name: layer3.1.bn2.bias
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_bn_s mapped name: layer3.1.bn2.weight
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_w    mapped name: layer3.1.conv2.weight
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_b    mapped name: layer3.1.conv3.bias
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_bn_b mapped name: layer3.1.bn3.bias
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_bn_s mapped name: layer3.1.bn3.weight
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_w    mapped name: layer3.1.conv3.weight
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_b    mapped name: layer3.2.conv1.bias
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_bn_b mapped name: layer3.2.bn1.bias
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_bn_s mapped name: layer3.2.bn1.weight
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_w    mapped name: layer3.2.conv1.weight
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_b    mapped name: layer3.2.conv2.bias
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_bn_b mapped name: layer3.2.bn2.bias
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_bn_s mapped name: layer3.2.bn2.weight
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_w    mapped name: layer3.2.conv2.weight
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_b    mapped name: layer3.2.conv3.bias
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_bn_b mapped name: layer3.2.bn3.bias
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_bn_s mapped name: layer3.2.bn3.weight
2020-06-23 16:48:40,094 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_w    mapped name: layer3.2.conv3.weight
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_b    mapped name: layer3.3.conv1.bias
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_bn_b mapped name: layer3.3.bn1.bias
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_bn_s mapped name: layer3.3.bn1.weight
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_w    mapped name: layer3.3.conv1.weight
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_b    mapped name: layer3.3.conv2.bias
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_bn_b mapped name: layer3.3.bn2.bias
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_bn_s mapped name: layer3.3.bn2.weight
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_w    mapped name: layer3.3.conv2.weight
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_b    mapped name: layer3.3.conv3.bias
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_bn_b mapped name: layer3.3.bn3.bias
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_bn_s mapped name: layer3.3.bn3.weight
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_w    mapped name: layer3.3.conv3.weight
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_b    mapped name: layer3.4.conv1.bias
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_bn_b mapped name: layer3.4.bn1.bias
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_bn_s mapped name: layer3.4.bn1.weight
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_w    mapped name: layer3.4.conv1.weight
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_b    mapped name: layer3.4.conv2.bias
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_bn_b mapped name: layer3.4.bn2.bias
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_bn_s mapped name: layer3.4.bn2.weight
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_w    mapped name: layer3.4.conv2.weight
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_b    mapped name: layer3.4.conv3.bias
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_bn_b mapped name: layer3.4.bn3.bias
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_bn_s mapped name: layer3.4.bn3.weight
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_w    mapped name: layer3.4.conv3.weight
2020-06-23 16:48:40,095 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_b    mapped name: layer3.5.conv1.bias
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_bn_b mapped name: layer3.5.bn1.bias
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_bn_s mapped name: layer3.5.bn1.weight
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_w    mapped name: layer3.5.conv1.weight
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_b    mapped name: layer3.5.conv2.bias
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_bn_b mapped name: layer3.5.bn2.bias
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_bn_s mapped name: layer3.5.bn2.weight
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_w    mapped name: layer3.5.conv2.weight
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_b    mapped name: layer3.5.conv3.bias
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_bn_b mapped name: layer3.5.bn3.bias
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_bn_s mapped name: layer3.5.bn3.weight
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_w    mapped name: layer3.5.conv3.weight
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_b     mapped name: layer4.0.downsample.0.bias
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_bn_b  mapped name: layer4.0.downsample.1.bias
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_bn_s  mapped name: layer4.0.downsample.1.weight
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_w     mapped name: layer4.0.downsample.0.weight
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_b    mapped name: layer4.0.conv1.bias
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_bn_b mapped name: layer4.0.bn1.bias
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_bn_s mapped name: layer4.0.bn1.weight
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_w    mapped name: layer4.0.conv1.weight
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_b    mapped name: layer4.0.conv2.bias
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_bn_b mapped name: layer4.0.bn2.bias
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_bn_s mapped name: layer4.0.bn2.weight
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_w    mapped name: layer4.0.conv2.weight
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_b    mapped name: layer4.0.conv3.bias
2020-06-23 16:48:40,096 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_bn_b mapped name: layer4.0.bn3.bias
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_bn_s mapped name: layer4.0.bn3.weight
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_w    mapped name: layer4.0.conv3.weight
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_b    mapped name: layer4.1.conv1.bias
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_bn_b mapped name: layer4.1.bn1.bias
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_bn_s mapped name: layer4.1.bn1.weight
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_w    mapped name: layer4.1.conv1.weight
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_b    mapped name: layer4.1.conv2.bias
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_bn_b mapped name: layer4.1.bn2.bias
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_bn_s mapped name: layer4.1.bn2.weight
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_w    mapped name: layer4.1.conv2.weight
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_b    mapped name: layer4.1.conv3.bias
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_bn_b mapped name: layer4.1.bn3.bias
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_bn_s mapped name: layer4.1.bn3.weight
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_w    mapped name: layer4.1.conv3.weight
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_b    mapped name: layer4.2.conv1.bias
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_bn_b mapped name: layer4.2.bn1.bias
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_bn_s mapped name: layer4.2.bn1.weight
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_w    mapped name: layer4.2.conv1.weight
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_b    mapped name: layer4.2.conv2.bias
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_bn_b mapped name: layer4.2.bn2.bias
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_bn_s mapped name: layer4.2.bn2.weight
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_w    mapped name: layer4.2.conv2.weight
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_b    mapped name: layer4.2.conv3.bias
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_bn_b mapped name: layer4.2.bn3.bias
2020-06-23 16:48:40,097 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_bn_s mapped name: layer4.2.bn3.weight
2020-06-23 16:48:40,098 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_w    mapped name: layer4.2.conv3.weight
2020-06-23 16:48:40,098 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res_conv1_bn_b       mapped name: bn1.bias
2020-06-23 16:48:40,098 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res_conv1_bn_s       mapped name: bn1.weight
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn1.bias                   loaded from layer1.0.bn1.bias            of shape (64,)
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn1.weight                 loaded from layer1.0.bn1.weight          of shape (64,)
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn2.bias                   loaded from layer1.0.bn2.bias            of shape (64,)
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn2.weight                 loaded from layer1.0.bn2.weight          of shape (64,)
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn3.bias                   loaded from layer1.0.bn3.bias            of shape (256,)
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn3.weight                 loaded from layer1.0.bn3.weight          of shape (256,)
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.conv1.weight               loaded from layer1.0.conv1.weight        of shape (64, 64, 1, 1)
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.conv2.weight               loaded from layer1.0.conv2.weight        of shape (64, 64, 3, 3)
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.conv3.weight               loaded from layer1.0.conv3.weight        of shape (256, 64, 1, 1)
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.downsample.0.weight        loaded from layer1.0.downsample.0.weight of shape (256, 64, 1, 1)
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.downsample.1.bias          loaded from layer1.0.downsample.1.bias   of shape (256,)
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.downsample.1.weight        loaded from layer1.0.downsample.1.weight of shape (256,)
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn1.bias                   loaded from layer1.1.bn1.bias            of shape (64,)
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn1.weight                 loaded from layer1.1.bn1.weight          of shape (64,)
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn2.bias                   loaded from layer1.1.bn2.bias            of shape (64,)
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn2.weight                 loaded from layer1.1.bn2.weight          of shape (64,)
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn3.bias                   loaded from layer1.1.bn3.bias            of shape (256,)
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn3.weight                 loaded from layer1.1.bn3.weight          of shape (256,)
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.conv1.weight               loaded from layer1.1.conv1.weight        of shape (64, 256, 1, 1)
2020-06-23 16:48:40,111 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.conv2.weight               loaded from layer1.1.conv2.weight        of shape (64, 64, 3, 3)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.conv3.weight               loaded from layer1.1.conv3.weight        of shape (256, 64, 1, 1)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn1.bias                   loaded from layer1.2.bn1.bias            of shape (64,)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn1.weight                 loaded from layer1.2.bn1.weight          of shape (64,)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn2.bias                   loaded from layer1.2.bn2.bias            of shape (64,)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn2.weight                 loaded from layer1.2.bn2.weight          of shape (64,)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn3.bias                   loaded from layer1.2.bn3.bias            of shape (256,)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn3.weight                 loaded from layer1.2.bn3.weight          of shape (256,)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.conv1.weight               loaded from layer1.2.conv1.weight        of shape (64, 256, 1, 1)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.conv2.weight               loaded from layer1.2.conv2.weight        of shape (64, 64, 3, 3)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.conv3.weight               loaded from layer1.2.conv3.weight        of shape (256, 64, 1, 1)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn1.bias                   loaded from layer2.0.bn1.bias            of shape (128,)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn1.weight                 loaded from layer2.0.bn1.weight          of shape (128,)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn2.bias                   loaded from layer2.0.bn2.bias            of shape (128,)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn2.weight                 loaded from layer2.0.bn2.weight          of shape (128,)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn3.bias                   loaded from layer2.0.bn3.bias            of shape (512,)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn3.weight                 loaded from layer2.0.bn3.weight          of shape (512,)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.conv1.weight               loaded from layer2.0.conv1.weight        of shape (128, 256, 1, 1)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.conv2.weight               loaded from layer2.0.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.conv3.weight               loaded from layer2.0.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.downsample.0.weight        loaded from layer2.0.downsample.0.weight of shape (512, 256, 1, 1)
2020-06-23 16:48:40,112 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.downsample.1.bias          loaded from layer2.0.downsample.1.bias   of shape (512,)
2020-06-23 16:48:40,113 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.downsample.1.weight        loaded from layer2.0.downsample.1.weight of shape (512,)
2020-06-23 16:48:40,113 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn1.bias                   loaded from layer2.1.bn1.bias            of shape (128,)
2020-06-23 16:48:40,113 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn1.weight                 loaded from layer2.1.bn1.weight          of shape (128,)
2020-06-23 16:48:40,113 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn2.bias                   loaded from layer2.1.bn2.bias            of shape (128,)
2020-06-23 16:48:40,113 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn2.weight                 loaded from layer2.1.bn2.weight          of shape (128,)
2020-06-23 16:48:40,113 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn3.bias                   loaded from layer2.1.bn3.bias            of shape (512,)
2020-06-23 16:48:40,113 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn3.weight                 loaded from layer2.1.bn3.weight          of shape (512,)
2020-06-23 16:48:40,113 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.conv1.weight               loaded from layer2.1.conv1.weight        of shape (128, 512, 1, 1)
2020-06-23 16:48:40,113 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.conv2.weight               loaded from layer2.1.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 16:48:40,113 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.conv3.weight               loaded from layer2.1.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 16:48:40,113 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn1.bias                   loaded from layer2.2.bn1.bias            of shape (128,)
2020-06-23 16:48:40,113 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn1.weight                 loaded from layer2.2.bn1.weight          of shape (128,)
2020-06-23 16:48:40,113 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn2.bias                   loaded from layer2.2.bn2.bias            of shape (128,)
2020-06-23 16:48:40,113 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn2.weight                 loaded from layer2.2.bn2.weight          of shape (128,)
2020-06-23 16:48:40,113 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn3.bias                   loaded from layer2.2.bn3.bias            of shape (512,)
2020-06-23 16:48:40,113 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn3.weight                 loaded from layer2.2.bn3.weight          of shape (512,)
2020-06-23 16:48:40,113 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.conv1.weight               loaded from layer2.2.conv1.weight        of shape (128, 512, 1, 1)
2020-06-23 16:48:40,114 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.conv2.weight               loaded from layer2.2.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 16:48:40,114 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.conv3.weight               loaded from layer2.2.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 16:48:40,114 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn1.bias                   loaded from layer2.3.bn1.bias            of shape (128,)
2020-06-23 16:48:40,114 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn1.weight                 loaded from layer2.3.bn1.weight          of shape (128,)
2020-06-23 16:48:40,114 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn2.bias                   loaded from layer2.3.bn2.bias            of shape (128,)
2020-06-23 16:48:40,114 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn2.weight                 loaded from layer2.3.bn2.weight          of shape (128,)
2020-06-23 16:48:40,114 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn3.bias                   loaded from layer2.3.bn3.bias            of shape (512,)
2020-06-23 16:48:40,114 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn3.weight                 loaded from layer2.3.bn3.weight          of shape (512,)
2020-06-23 16:48:40,114 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.conv1.weight               loaded from layer2.3.conv1.weight        of shape (128, 512, 1, 1)
2020-06-23 16:48:40,114 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.conv2.weight               loaded from layer2.3.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 16:48:40,114 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.conv3.weight               loaded from layer2.3.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 16:48:40,114 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn1.bias                   loaded from layer3.0.bn1.bias            of shape (256,)
2020-06-23 16:48:40,114 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn1.weight                 loaded from layer3.0.bn1.weight          of shape (256,)
2020-06-23 16:48:40,114 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn2.bias                   loaded from layer3.0.bn2.bias            of shape (256,)
2020-06-23 16:48:40,114 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn2.weight                 loaded from layer3.0.bn2.weight          of shape (256,)
2020-06-23 16:48:40,114 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn3.bias                   loaded from layer3.0.bn3.bias            of shape (1024,)
2020-06-23 16:48:40,114 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn3.weight                 loaded from layer3.0.bn3.weight          of shape (1024,)
2020-06-23 16:48:40,114 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.conv1.weight               loaded from layer3.0.conv1.weight        of shape (256, 512, 1, 1)
2020-06-23 16:48:40,115 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.conv2.weight               loaded from layer3.0.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 16:48:40,115 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.conv3.weight               loaded from layer3.0.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 16:48:40,115 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.downsample.0.weight        loaded from layer3.0.downsample.0.weight of shape (1024, 512, 1, 1)
2020-06-23 16:48:40,115 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.downsample.1.bias          loaded from layer3.0.downsample.1.bias   of shape (1024,)
2020-06-23 16:48:40,115 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.downsample.1.weight        loaded from layer3.0.downsample.1.weight of shape (1024,)
2020-06-23 16:48:40,115 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn1.bias                   loaded from layer3.1.bn1.bias            of shape (256,)
2020-06-23 16:48:40,115 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn1.weight                 loaded from layer3.1.bn1.weight          of shape (256,)
2020-06-23 16:48:40,115 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn2.bias                   loaded from layer3.1.bn2.bias            of shape (256,)
2020-06-23 16:48:40,115 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn2.weight                 loaded from layer3.1.bn2.weight          of shape (256,)
2020-06-23 16:48:40,115 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn3.bias                   loaded from layer3.1.bn3.bias            of shape (1024,)
2020-06-23 16:48:40,115 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn3.weight                 loaded from layer3.1.bn3.weight          of shape (1024,)
2020-06-23 16:48:40,115 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.conv1.weight               loaded from layer3.1.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 16:48:40,116 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.conv2.weight               loaded from layer3.1.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 16:48:40,116 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.conv3.weight               loaded from layer3.1.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 16:48:40,116 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn1.bias                   loaded from layer3.2.bn1.bias            of shape (256,)
2020-06-23 16:48:40,116 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn1.weight                 loaded from layer3.2.bn1.weight          of shape (256,)
2020-06-23 16:48:40,116 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn2.bias                   loaded from layer3.2.bn2.bias            of shape (256,)
2020-06-23 16:48:40,116 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn2.weight                 loaded from layer3.2.bn2.weight          of shape (256,)
2020-06-23 16:48:40,116 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn3.bias                   loaded from layer3.2.bn3.bias            of shape (1024,)
2020-06-23 16:48:40,116 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn3.weight                 loaded from layer3.2.bn3.weight          of shape (1024,)
2020-06-23 16:48:40,116 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.conv1.weight               loaded from layer3.2.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 16:48:40,117 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.conv2.weight               loaded from layer3.2.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 16:48:40,117 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.conv3.weight               loaded from layer3.2.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 16:48:40,117 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn1.bias                   loaded from layer3.3.bn1.bias            of shape (256,)
2020-06-23 16:48:40,117 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn1.weight                 loaded from layer3.3.bn1.weight          of shape (256,)
2020-06-23 16:48:40,117 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn2.bias                   loaded from layer3.3.bn2.bias            of shape (256,)
2020-06-23 16:48:40,117 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn2.weight                 loaded from layer3.3.bn2.weight          of shape (256,)
2020-06-23 16:48:40,117 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn3.bias                   loaded from layer3.3.bn3.bias            of shape (1024,)
2020-06-23 16:48:40,117 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn3.weight                 loaded from layer3.3.bn3.weight          of shape (1024,)
2020-06-23 16:48:40,117 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.conv1.weight               loaded from layer3.3.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 16:48:40,117 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.conv2.weight               loaded from layer3.3.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 16:48:40,117 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.conv3.weight               loaded from layer3.3.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 16:48:40,117 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn1.bias                   loaded from layer3.4.bn1.bias            of shape (256,)
2020-06-23 16:48:40,118 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn1.weight                 loaded from layer3.4.bn1.weight          of shape (256,)
2020-06-23 16:48:40,118 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn2.bias                   loaded from layer3.4.bn2.bias            of shape (256,)
2020-06-23 16:48:40,118 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn2.weight                 loaded from layer3.4.bn2.weight          of shape (256,)
2020-06-23 16:48:40,118 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn3.bias                   loaded from layer3.4.bn3.bias            of shape (1024,)
2020-06-23 16:48:40,118 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn3.weight                 loaded from layer3.4.bn3.weight          of shape (1024,)
2020-06-23 16:48:40,118 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.conv1.weight               loaded from layer3.4.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 16:48:40,118 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.conv2.weight               loaded from layer3.4.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 16:48:40,118 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.conv3.weight               loaded from layer3.4.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 16:48:40,118 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn1.bias                   loaded from layer3.5.bn1.bias            of shape (256,)
2020-06-23 16:48:40,118 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn1.weight                 loaded from layer3.5.bn1.weight          of shape (256,)
2020-06-23 16:48:40,118 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn2.bias                   loaded from layer3.5.bn2.bias            of shape (256,)
2020-06-23 16:48:40,118 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn2.weight                 loaded from layer3.5.bn2.weight          of shape (256,)
2020-06-23 16:48:40,118 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn3.bias                   loaded from layer3.5.bn3.bias            of shape (1024,)
2020-06-23 16:48:40,119 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn3.weight                 loaded from layer3.5.bn3.weight          of shape (1024,)
2020-06-23 16:48:40,119 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.conv1.weight               loaded from layer3.5.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 16:48:40,119 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.conv2.weight               loaded from layer3.5.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 16:48:40,119 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.conv3.weight               loaded from layer3.5.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 16:48:40,119 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn1.bias                   loaded from layer4.0.bn1.bias            of shape (512,)
2020-06-23 16:48:40,119 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn1.weight                 loaded from layer4.0.bn1.weight          of shape (512,)
2020-06-23 16:48:40,119 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn2.bias                   loaded from layer4.0.bn2.bias            of shape (512,)
2020-06-23 16:48:40,119 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn2.weight                 loaded from layer4.0.bn2.weight          of shape (512,)
2020-06-23 16:48:40,119 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn3.bias                   loaded from layer4.0.bn3.bias            of shape (2048,)
2020-06-23 16:48:40,119 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn3.weight                 loaded from layer4.0.bn3.weight          of shape (2048,)
2020-06-23 16:48:40,119 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.conv1.weight               loaded from layer4.0.conv1.weight        of shape (512, 1024, 1, 1)
2020-06-23 16:48:40,121 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.conv2.weight               loaded from layer4.0.conv2.weight        of shape (512, 512, 3, 3)
2020-06-23 16:48:40,121 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.conv3.weight               loaded from layer4.0.conv3.weight        of shape (2048, 512, 1, 1)
2020-06-23 16:48:40,121 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.downsample.0.weight        loaded from layer4.0.downsample.0.weight of shape (2048, 1024, 1, 1)
2020-06-23 16:48:40,121 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.downsample.1.bias          loaded from layer4.0.downsample.1.bias   of shape (2048,)
2020-06-23 16:48:40,122 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.downsample.1.weight        loaded from layer4.0.downsample.1.weight of shape (2048,)
2020-06-23 16:48:40,122 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn1.bias                   loaded from layer4.1.bn1.bias            of shape (512,)
2020-06-23 16:48:40,122 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn1.weight                 loaded from layer4.1.bn1.weight          of shape (512,)
2020-06-23 16:48:40,122 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn2.bias                   loaded from layer4.1.bn2.bias            of shape (512,)
2020-06-23 16:48:40,122 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn2.weight                 loaded from layer4.1.bn2.weight          of shape (512,)
2020-06-23 16:48:40,122 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn3.bias                   loaded from layer4.1.bn3.bias            of shape (2048,)
2020-06-23 16:48:40,122 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn3.weight                 loaded from layer4.1.bn3.weight          of shape (2048,)
2020-06-23 16:48:40,122 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.conv1.weight               loaded from layer4.1.conv1.weight        of shape (512, 2048, 1, 1)
2020-06-23 16:48:40,125 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.conv2.weight               loaded from layer4.1.conv2.weight        of shape (512, 512, 3, 3)
2020-06-23 16:48:40,125 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.conv3.weight               loaded from layer4.1.conv3.weight        of shape (2048, 512, 1, 1)
2020-06-23 16:48:40,125 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn1.bias                   loaded from layer4.2.bn1.bias            of shape (512,)
2020-06-23 16:48:40,126 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn1.weight                 loaded from layer4.2.bn1.weight          of shape (512,)
2020-06-23 16:48:40,126 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn2.bias                   loaded from layer4.2.bn2.bias            of shape (512,)
2020-06-23 16:48:40,126 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn2.weight                 loaded from layer4.2.bn2.weight          of shape (512,)
2020-06-23 16:48:40,126 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn3.bias                   loaded from layer4.2.bn3.bias            of shape (2048,)
2020-06-23 16:48:40,126 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn3.weight                 loaded from layer4.2.bn3.weight          of shape (2048,)
2020-06-23 16:48:40,126 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.conv1.weight               loaded from layer4.2.conv1.weight        of shape (512, 2048, 1, 1)
2020-06-23 16:48:40,129 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.conv2.weight               loaded from layer4.2.conv2.weight        of shape (512, 512, 3, 3)
2020-06-23 16:48:40,129 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.conv3.weight               loaded from layer4.2.conv3.weight        of shape (2048, 512, 1, 1)
2020-06-23 16:48:40,129 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.stem.bn1.bias                       loaded from bn1.bias                     of shape (64,)
2020-06-23 16:48:40,129 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.stem.bn1.weight                     loaded from bn1.weight                   of shape (64,)
2020-06-23 16:48:40,130 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.stem.conv1.weight                   loaded from conv1.weight                 of shape (64, 3, 7, 7)
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
:::MLLOG {"namespace": "", "time_ms": 1592956122602, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 205}}
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
:::MLLOG {"namespace": "", "time_ms": 1592956122771, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 207}}
2020-06-23 16:48:42,771 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
Done (t=6.81s)
creating index...
Done (t=6.85s)
creating index...
Done (t=6.89s)
creating index...
Done (t=6.88s)
creating index...
Done (t=6.90s)
creating index...
Done (t=6.95s)
creating index...
Done (t=6.95s)
creating index...
Done (t=6.97s)
creating index...
Done (t=6.98s)
creating index...
Done (t=7.00s)
creating index...
Done (t=7.05s)
creating index...
Done (t=7.06s)
creating index...
Done (t=7.06s)
creating index...
Done (t=7.08s)
creating index...
Done (t=7.06s)
creating index...
Done (t=7.07s)
creating index...
Done (t=7.08s)
creating index...
Done (t=7.09s)
creating index...
Done (t=7.09s)
creating index...
Done (t=7.12s)
creating index...
Done (t=7.15s)
creating index...
Done (t=7.24s)
creating index...
Done (t=7.28s)
creating index...
Done (t=7.31s)
creating index...
index created!
Done (t=7.33s)
creating index...
index created!
Done (t=7.36s)
creating index...
Done (t=7.38s)
creating index...
Done (t=7.38s)
creating index...
Done (t=7.38s)
creating index...
index created!
index created!
index created!
index created!
Done (t=7.47s)
creating index...
index created!
index created!
index created!
index created!
Done (t=7.53s)
creating index...
index created!
index created!
Done (t=7.56s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
:::MLLOG {"namespace": "", "time_ms": 1592956132388, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 40000, "metadata": {"file": "tools/train_mlperf.py", "lineno": 217}}
2020-06-23 16:48:52,389 maskrcnn_benchmark.trainer INFO: Start training
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
:::MLLOG {"namespace": "", "time_ms": 1592956133591, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 130, "first_epoch_num": 1, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592956133592, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 131, "epoch_num": 1}}
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)



Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536


Grad overflow on iteration  0
Using dynamic loss scale of  65536


Grad overflow on iteration  0
Using dynamic loss scale of  65536


Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536



Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  1


Grad overflow on iteration  1
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0


Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1


Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1

Using dynamic loss scale of  32768.0
Grad overflow on iteration  1

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0


Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1



Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  2

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0



Grad overflow on iteration  2

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0



Grad overflow on iteration  2


Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Grad overflow on iteration  2
Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0
Grad overflow on iteration  2

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Using dynamic loss scale of  16384.0

Using dynamic loss scale of  16384.0
Grad overflow on iteration  2
Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Using dynamic loss scale of  16384.0
Grad overflow on iteration  2

Using dynamic loss scale of  16384.0

Grad overflow on iteration  2

Using dynamic loss scale of  16384.0
Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3


Grad overflow on iteration  3

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0


Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0
Grad overflow on iteration  3

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0


Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0


Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4

Grad overflow on iteration  4

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0


Grad overflow on iteration  4
Grad overflow on iteration  4

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0


Grad overflow on iteration  4

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5

Grad overflow on iteration  5

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0




Grad overflow on iteration  5
Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Grad overflow on iteration  5
Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5


Grad overflow on iteration  5
Using dynamic loss scale of  2048.0


Grad overflow on iteration  5
Using dynamic loss scale of  2048.0


Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Grad overflow on iteration  5

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Grad overflow on iteration  5

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Grad overflow on iteration  5

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6


Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
2020-06-23 16:48:59,817 maskrcnn_benchmark.trainer INFO: eta: 4:07:24  iter: 20  loss: 2.4172 (3.6611)  loss_classifier: 1.1847 (2.0662)  loss_box_reg: 0.0197 (0.0476)  loss_mask: 0.9908 (1.0110)  loss_objectness: 0.5438 (0.4957)  loss_rpn_box_reg: 0.0265 (0.0406)  time: 0.1037 (0.3713)  data: 0.0013 (0.0613)  lr: 0.005120  max mem: 4232
2020-06-23 16:49:01,933 maskrcnn_benchmark.trainer INFO: eta: 2:38:53  iter: 40  loss: 1.4497 (2.5792)  loss_classifier: 0.3967 (1.2611)  loss_box_reg: 0.1010 (0.0775)  loss_mask: 0.6821 (0.8472)  loss_objectness: 0.1646 (0.3519)  loss_rpn_box_reg: 0.0230 (0.0416)  time: 0.1049 (0.2386)  data: 0.0015 (0.0314)  lr: 0.010240  max mem: 4340
2020-06-23 16:49:04,002 maskrcnn_benchmark.trainer INFO: eta: 2:08:49  iter: 60  loss: 1.2797 (2.1470)  loss_classifier: 0.3372 (0.9552)  loss_box_reg: 0.0956 (0.0846)  loss_mask: 0.6787 (0.7905)  loss_objectness: 0.1051 (0.2796)  loss_rpn_box_reg: 0.0129 (0.0371)  time: 0.1028 (0.1935)  data: 0.0014 (0.0214)  lr: 0.015360  max mem: 4410
2020-06-23 16:49:06,039 maskrcnn_benchmark.trainer INFO: eta: 1:53:30  iter: 80  loss: 1.2191 (1.9250)  loss_classifier: 0.3288 (0.8018)  loss_box_reg: 0.0878 (0.0860)  loss_mask: 0.6573 (0.7575)  loss_objectness: 0.1088 (0.2450)  loss_rpn_box_reg: 0.0163 (0.0346)  time: 0.1014 (0.1706)  data: 0.0014 (0.0164)  lr: 0.020480  max mem: 4527
2020-06-23 16:49:08,072 maskrcnn_benchmark.trainer INFO: eta: 1:44:16  iter: 100  loss: 1.2511 (1.8001)  loss_classifier: 0.3913 (0.7233)  loss_box_reg: 0.1308 (0.0967)  loss_mask: 0.6420 (0.7346)  loss_objectness: 0.0724 (0.2118)  loss_rpn_box_reg: 0.0158 (0.0337)  time: 0.1017 (0.1568)  data: 0.0013 (0.0134)  lr: 0.025600  max mem: 4527
2020-06-23 16:49:10,138 maskrcnn_benchmark.trainer INFO: eta: 1:38:17  iter: 120  loss: 1.3616 (1.7329)  loss_classifier: 0.4711 (0.6856)  loss_box_reg: 0.1675 (0.1095)  loss_mask: 0.6036 (0.7126)  loss_objectness: 0.0649 (0.1917)  loss_rpn_box_reg: 0.0212 (0.0334)  time: 0.1023 (0.1479)  data: 0.0014 (0.0114)  lr: 0.030720  max mem: 4527
2020-06-23 16:49:12,226 maskrcnn_benchmark.trainer INFO: eta: 1:34:07  iter: 140  loss: 1.5232 (1.7020)  loss_classifier: 0.6142 (0.6722)  loss_box_reg: 0.2281 (0.1264)  loss_mask: 0.5728 (0.6931)  loss_objectness: 0.0733 (0.1766)  loss_rpn_box_reg: 0.0168 (0.0337)  time: 0.1046 (0.1417)  data: 0.0014 (0.0100)  lr: 0.035840  max mem: 4608
2020-06-23 16:49:14,346 maskrcnn_benchmark.trainer INFO: eta: 1:31:06  iter: 160  loss: 1.2610 (1.6547)  loss_classifier: 0.4522 (0.6512)  loss_box_reg: 0.1774 (0.1355)  loss_mask: 0.5449 (0.6733)  loss_objectness: 0.0524 (0.1621)  loss_rpn_box_reg: 0.0160 (0.0326)  time: 0.1052 (0.1372)  data: 0.0013 (0.0089)  lr: 0.040960  max mem: 4676
2020-06-23 16:49:16,442 maskrcnn_benchmark.trainer INFO: eta: 1:28:40  iter: 180  loss: 1.3350 (1.6259)  loss_classifier: 0.5331 (0.6404)  loss_box_reg: 0.2141 (0.1442)  loss_mask: 0.4997 (0.6561)  loss_objectness: 0.0458 (0.1534)  loss_rpn_box_reg: 0.0089 (0.0318)  time: 0.1045 (0.1336)  data: 0.0013 (0.0081)  lr: 0.046080  max mem: 4676
2020-06-23 16:49:18,560 maskrcnn_benchmark.trainer INFO: eta: 1:26:47  iter: 200  loss: 1.3093 (1.5962)  loss_classifier: 0.5464 (0.6300)  loss_box_reg: 0.1968 (0.1506)  loss_mask: 0.4931 (0.6389)  loss_objectness: 0.0437 (0.1451)  loss_rpn_box_reg: 0.0152 (0.0316)  time: 0.1049 (0.1308)  data: 0.0014 (0.0074)  lr: 0.051200  max mem: 4676
2020-06-23 16:49:20,669 maskrcnn_benchmark.trainer INFO: eta: 1:25:13  iter: 220  loss: 1.2595 (1.5667)  loss_classifier: 0.5006 (0.6195)  loss_box_reg: 0.1936 (0.1551)  loss_mask: 0.4779 (0.6235)  loss_objectness: 0.0508 (0.1376)  loss_rpn_box_reg: 0.0108 (0.0310)  time: 0.1050 (0.1285)  data: 0.0014 (0.0068)  lr: 0.056320  max mem: 4676
2020-06-23 16:49:22,795 maskrcnn_benchmark.trainer INFO: eta: 1:23:56  iter: 240  loss: 1.3640 (1.5418)  loss_classifier: 0.5606 (0.6099)  loss_box_reg: 0.1778 (0.1591)  loss_mask: 0.4556 (0.6105)  loss_objectness: 0.0636 (0.1321)  loss_rpn_box_reg: 0.0177 (0.0303)  time: 0.1058 (0.1267)  data: 0.0014 (0.0064)  lr: 0.061440  max mem: 4846
2020-06-23 16:49:24,902 maskrcnn_benchmark.trainer INFO: eta: 1:22:49  iter: 260  loss: 1.2165 (1.5196)  loss_classifier: 0.5240 (0.6024)  loss_box_reg: 0.2097 (0.1631)  loss_mask: 0.4288 (0.5973)  loss_objectness: 0.0483 (0.1261)  loss_rpn_box_reg: 0.0199 (0.0307)  time: 0.1046 (0.1250)  data: 0.0014 (0.0060)  lr: 0.066560  max mem: 4846
2020-06-23 16:49:27,024 maskrcnn_benchmark.trainer INFO: eta: 1:21:52  iter: 280  loss: 1.1500 (1.4931)  loss_classifier: 0.4485 (0.5924)  loss_box_reg: 0.1751 (0.1648)  loss_mask: 0.4328 (0.5854)  loss_objectness: 0.0461 (0.1206)  loss_rpn_box_reg: 0.0106 (0.0299)  time: 0.1059 (0.1237)  data: 0.0014 (0.0057)  lr: 0.071680  max mem: 4846
2020-06-23 16:49:29,130 maskrcnn_benchmark.trainer INFO: eta: 1:21:01  iter: 300  loss: 1.0782 (1.4686)  loss_classifier: 0.3731 (0.5814)  loss_box_reg: 0.1712 (0.1659)  loss_mask: 0.3994 (0.5743)  loss_objectness: 0.0437 (0.1173)  loss_rpn_box_reg: 0.0129 (0.0297)  time: 0.1044 (0.1225)  data: 0.0013 (0.0054)  lr: 0.076800  max mem: 4846
2020-06-23 16:49:31,226 maskrcnn_benchmark.trainer INFO: eta: 1:20:15  iter: 320  loss: 1.2151 (1.4637)  loss_classifier: 0.5226 (0.5800)  loss_box_reg: 0.1754 (0.1668)  loss_mask: 0.4980 (0.5703)  loss_objectness: 0.0727 (0.1163)  loss_rpn_box_reg: 0.0224 (0.0302)  time: 0.1041 (0.1214)  data: 0.0014 (0.0051)  lr: 0.081920  max mem: 4846
2020-06-23 16:49:33,299 maskrcnn_benchmark.trainer INFO: eta: 1:19:31  iter: 340  loss: 1.1156 (1.4465)  loss_classifier: 0.3994 (0.5708)  loss_box_reg: 0.1350 (0.1654)  loss_mask: 0.5016 (0.5670)  loss_objectness: 0.0472 (0.1134)  loss_rpn_box_reg: 0.0091 (0.0298)  time: 0.1030 (0.1203)  data: 0.0013 (0.0049)  lr: 0.087040  max mem: 4846
2020-06-23 16:49:35,408 maskrcnn_benchmark.trainer INFO: eta: 1:18:56  iter: 360  loss: 1.2313 (1.4325)  loss_classifier: 0.4609 (0.5657)  loss_box_reg: 0.1896 (0.1663)  loss_mask: 0.4413 (0.5603)  loss_objectness: 0.0436 (0.1109)  loss_rpn_box_reg: 0.0139 (0.0293)  time: 0.1049 (0.1195)  data: 0.0014 (0.0047)  lr: 0.092160  max mem: 4846
2020-06-23 16:49:37,525 maskrcnn_benchmark.trainer INFO: eta: 1:18:25  iter: 380  loss: 1.1214 (1.4157)  loss_classifier: 0.3920 (0.5582)  loss_box_reg: 0.1493 (0.1662)  loss_mask: 0.4320 (0.5532)  loss_objectness: 0.0425 (0.1090)  loss_rpn_box_reg: 0.0136 (0.0292)  time: 0.1053 (0.1188)  data: 0.0013 (0.0045)  lr: 0.097280  max mem: 4846
2020-06-23 16:49:39,643 maskrcnn_benchmark.trainer INFO: eta: 1:17:57  iter: 400  loss: 1.0851 (1.4008)  loss_classifier: 0.4474 (0.5528)  loss_box_reg: 0.1829 (0.1665)  loss_mask: 0.4097 (0.5466)  loss_objectness: 0.0488 (0.1061)  loss_rpn_box_reg: 0.0111 (0.0288)  time: 0.1060 (0.1181)  data: 0.0014 (0.0044)  lr: 0.102400  max mem: 4846
2020-06-23 16:49:41,743 maskrcnn_benchmark.trainer INFO: eta: 1:17:30  iter: 420  loss: 1.0212 (1.3840)  loss_classifier: 0.3798 (0.5449)  loss_box_reg: 0.1555 (0.1660)  loss_mask: 0.3964 (0.5397)  loss_objectness: 0.0517 (0.1045)  loss_rpn_box_reg: 0.0116 (0.0289)  time: 0.1047 (0.1175)  data: 0.0014 (0.0042)  lr: 0.107520  max mem: 4846
2020-06-23 16:49:43,869 maskrcnn_benchmark.trainer INFO: eta: 1:17:08  iter: 440  loss: 0.9979 (1.3683)  loss_classifier: 0.4204 (0.5388)  loss_box_reg: 0.1512 (0.1658)  loss_mask: 0.3795 (0.5321)  loss_objectness: 0.0353 (0.1024)  loss_rpn_box_reg: 0.0117 (0.0292)  time: 0.1058 (0.1170)  data: 0.0013 (0.0041)  lr: 0.112640  max mem: 4846
2020-06-23 16:49:45,986 maskrcnn_benchmark.trainer INFO: eta: 1:16:46  iter: 460  loss: 1.0413 (1.3565)  loss_classifier: 0.3800 (0.5332)  loss_box_reg: 0.1611 (0.1658)  loss_mask: 0.4124 (0.5264)  loss_objectness: 0.0506 (0.1014)  loss_rpn_box_reg: 0.0165 (0.0297)  time: 0.1060 (0.1165)  data: 0.0014 (0.0040)  lr: 0.117760  max mem: 4846
2020-06-23 16:49:48,113 maskrcnn_benchmark.trainer INFO: eta: 1:16:27  iter: 480  loss: 1.0673 (1.3448)  loss_classifier: 0.3925 (0.5291)  loss_box_reg: 0.1612 (0.1664)  loss_mask: 0.3721 (0.5200)  loss_objectness: 0.0430 (0.0997)  loss_rpn_box_reg: 0.0192 (0.0297)  time: 0.1058 (0.1161)  data: 0.0014 (0.0039)  lr: 0.122880  max mem: 4846
2020-06-23 16:49:50,220 maskrcnn_benchmark.trainer INFO: eta: 1:16:08  iter: 500  loss: 0.9562 (1.3323)  loss_classifier: 0.3803 (0.5242)  loss_box_reg: 0.1753 (0.1667)  loss_mask: 0.3900 (0.5144)  loss_objectness: 0.0378 (0.0975)  loss_rpn_box_reg: 0.0115 (0.0295)  time: 0.1051 (0.1157)  data: 0.0013 (0.0038)  lr: 0.128000  max mem: 4846
2020-06-23 16:49:52,357 maskrcnn_benchmark.trainer INFO: eta: 1:15:52  iter: 520  loss: 0.9924 (1.3206)  loss_classifier: 0.3820 (0.5191)  loss_box_reg: 0.1680 (0.1671)  loss_mask: 0.3891 (0.5095)  loss_objectness: 0.0427 (0.0959)  loss_rpn_box_reg: 0.0142 (0.0290)  time: 0.1060 (0.1153)  data: 0.0014 (0.0037)  lr: 0.133120  max mem: 4846
2020-06-23 16:49:54,506 maskrcnn_benchmark.trainer INFO: eta: 1:15:39  iter: 540  loss: 0.9733 (1.3106)  loss_classifier: 0.3552 (0.5149)  loss_box_reg: 0.1671 (0.1671)  loss_mask: 0.3856 (0.5049)  loss_objectness: 0.0412 (0.0948)  loss_rpn_box_reg: 0.0154 (0.0289)  time: 0.1075 (0.1150)  data: 0.0014 (0.0036)  lr: 0.138240  max mem: 4846
2020-06-23 16:49:56,622 maskrcnn_benchmark.trainer INFO: eta: 1:15:23  iter: 560  loss: 1.0243 (1.3014)  loss_classifier: 0.3889 (0.5108)  loss_box_reg: 0.1718 (0.1673)  loss_mask: 0.3623 (0.5002)  loss_objectness: 0.0386 (0.0941)  loss_rpn_box_reg: 0.0163 (0.0290)  time: 0.1056 (0.1147)  data: 0.0014 (0.0035)  lr: 0.143360  max mem: 4846
2020-06-23 16:49:58,743 maskrcnn_benchmark.trainer INFO: eta: 1:15:09  iter: 580  loss: 0.9779 (1.2895)  loss_classifier: 0.3297 (0.5056)  loss_box_reg: 0.1737 (0.1672)  loss_mask: 0.3530 (0.4952)  loss_objectness: 0.0464 (0.0927)  loss_rpn_box_reg: 0.0128 (0.0287)  time: 0.1052 (0.1144)  data: 0.0013 (0.0035)  lr: 0.148480  max mem: 4846
2020-06-23 16:50:00,878 maskrcnn_benchmark.trainer INFO: eta: 1:14:57  iter: 600  loss: 1.0320 (1.2807)  loss_classifier: 0.3898 (0.5018)  loss_box_reg: 0.1557 (0.1670)  loss_mask: 0.3927 (0.4917)  loss_objectness: 0.0316 (0.0915)  loss_rpn_box_reg: 0.0097 (0.0287)  time: 0.1065 (0.1141)  data: 0.0013 (0.0034)  lr: 0.153600  max mem: 4846
2020-06-23 16:50:03,004 maskrcnn_benchmark.trainer INFO: eta: 1:14:45  iter: 620  loss: 0.8150 (1.2679)  loss_classifier: 0.3035 (0.4961)  loss_box_reg: 0.1298 (0.1661)  loss_mask: 0.3673 (0.4878)  loss_objectness: 0.0251 (0.0896)  loss_rpn_box_reg: 0.0102 (0.0283)  time: 0.1061 (0.1139)  data: 0.0013 (0.0033)  lr: 0.158720  max mem: 4846
2020-06-23 16:50:05,144 maskrcnn_benchmark.trainer INFO: eta: 1:14:34  iter: 640  loss: 0.9709 (1.2595)  loss_classifier: 0.3646 (0.4925)  loss_box_reg: 0.1606 (0.1661)  loss_mask: 0.3560 (0.4841)  loss_objectness: 0.0432 (0.0884)  loss_rpn_box_reg: 0.0202 (0.0284)  time: 0.1070 (0.1137)  data: 0.0014 (0.0033)  lr: 0.160000  max mem: 4846
2020-06-23 16:50:07,257 maskrcnn_benchmark.trainer INFO: eta: 1:14:22  iter: 660  loss: 0.9492 (1.2520)  loss_classifier: 0.3313 (0.4892)  loss_box_reg: 0.1722 (0.1665)  loss_mask: 0.3686 (0.4807)  loss_objectness: 0.0381 (0.0873)  loss_rpn_box_reg: 0.0143 (0.0282)  time: 0.1050 (0.1134)  data: 0.0013 (0.0032)  lr: 0.160000  max mem: 4848
2020-06-23 16:50:09,387 maskrcnn_benchmark.trainer INFO: eta: 1:14:12  iter: 680  loss: 0.8503 (1.2404)  loss_classifier: 0.3056 (0.4842)  loss_box_reg: 0.1227 (0.1655)  loss_mask: 0.3590 (0.4772)  loss_objectness: 0.0214 (0.0857)  loss_rpn_box_reg: 0.0099 (0.0278)  time: 0.1055 (0.1132)  data: 0.0013 (0.0032)  lr: 0.160000  max mem: 4848
2020-06-23 16:50:11,513 maskrcnn_benchmark.trainer INFO: eta: 1:14:02  iter: 700  loss: 1.0177 (1.2343)  loss_classifier: 0.3979 (0.4823)  loss_box_reg: 0.1754 (0.1662)  loss_mask: 0.3452 (0.4736)  loss_objectness: 0.0370 (0.0847)  loss_rpn_box_reg: 0.0155 (0.0276)  time: 0.1060 (0.1130)  data: 0.0014 (0.0031)  lr: 0.160000  max mem: 4848
2020-06-23 16:50:13,629 maskrcnn_benchmark.trainer INFO: eta: 1:13:51  iter: 720  loss: 0.9304 (1.2256)  loss_classifier: 0.3574 (0.4788)  loss_box_reg: 0.1393 (0.1656)  loss_mask: 0.3542 (0.4703)  loss_objectness: 0.0280 (0.0835)  loss_rpn_box_reg: 0.0124 (0.0275)  time: 0.1051 (0.1128)  data: 0.0013 (0.0031)  lr: 0.160000  max mem: 4848
2020-06-23 16:50:15,751 maskrcnn_benchmark.trainer INFO: eta: 1:13:42  iter: 740  loss: 0.9053 (1.2185)  loss_classifier: 0.3706 (0.4757)  loss_box_reg: 0.1552 (0.1654)  loss_mask: 0.3577 (0.4673)  loss_objectness: 0.0390 (0.0827)  loss_rpn_box_reg: 0.0119 (0.0273)  time: 0.1053 (0.1126)  data: 0.0014 (0.0030)  lr: 0.160000  max mem: 4848
2020-06-23 16:50:17,894 maskrcnn_benchmark.trainer INFO: eta: 1:13:34  iter: 760  loss: 0.7780 (1.2080)  loss_classifier: 0.2957 (0.4710)  loss_box_reg: 0.1280 (0.1645)  loss_mask: 0.3082 (0.4634)  loss_objectness: 0.0296 (0.0819)  loss_rpn_box_reg: 0.0119 (0.0272)  time: 0.1071 (0.1125)  data: 0.0013 (0.0030)  lr: 0.160000  max mem: 4848
2020-06-23 16:50:20,024 maskrcnn_benchmark.trainer INFO: eta: 1:13:26  iter: 780  loss: 0.8434 (1.1981)  loss_classifier: 0.2892 (0.4664)  loss_box_reg: 0.1188 (0.1635)  loss_mask: 0.3238 (0.4601)  loss_objectness: 0.0308 (0.0810)  loss_rpn_box_reg: 0.0129 (0.0272)  time: 0.1061 (0.1123)  data: 0.0013 (0.0029)  lr: 0.160000  max mem: 4848
2020-06-23 16:50:22,148 maskrcnn_benchmark.trainer INFO: eta: 1:13:18  iter: 800  loss: 0.9019 (1.1915)  loss_classifier: 0.3291 (0.4630)  loss_box_reg: 0.1463 (0.1632)  loss_mask: 0.3883 (0.4580)  loss_objectness: 0.0411 (0.0800)  loss_rpn_box_reg: 0.0173 (0.0273)  time: 0.1058 (0.1122)  data: 0.0013 (0.0029)  lr: 0.160000  max mem: 4848
2020-06-23 16:50:24,275 maskrcnn_benchmark.trainer INFO: eta: 1:13:10  iter: 820  loss: 0.8612 (1.1848)  loss_classifier: 0.3342 (0.4604)  loss_box_reg: 0.1338 (0.1629)  loss_mask: 0.3573 (0.4554)  loss_objectness: 0.0281 (0.0790)  loss_rpn_box_reg: 0.0123 (0.0271)  time: 0.1065 (0.1121)  data: 0.0013 (0.0028)  lr: 0.160000  max mem: 4923
2020-06-23 16:50:26,402 maskrcnn_benchmark.trainer INFO: eta: 1:13:02  iter: 840  loss: 0.8021 (1.1766)  loss_classifier: 0.2919 (0.4568)  loss_box_reg: 0.1320 (0.1624)  loss_mask: 0.3344 (0.4524)  loss_objectness: 0.0273 (0.0781)  loss_rpn_box_reg: 0.0091 (0.0269)  time: 0.1062 (0.1119)  data: 0.0013 (0.0028)  lr: 0.160000  max mem: 4923
2020-06-23 16:50:28,531 maskrcnn_benchmark.trainer INFO: eta: 1:12:55  iter: 860  loss: 0.8673 (1.1689)  loss_classifier: 0.3190 (0.4534)  loss_box_reg: 0.1388 (0.1618)  loss_mask: 0.3383 (0.4496)  loss_objectness: 0.0312 (0.0773)  loss_rpn_box_reg: 0.0106 (0.0269)  time: 0.1055 (0.1118)  data: 0.0013 (0.0028)  lr: 0.160000  max mem: 4923
2020-06-23 16:50:30,667 maskrcnn_benchmark.trainer INFO: eta: 1:12:48  iter: 880  loss: 0.8854 (1.1629)  loss_classifier: 0.2886 (0.4504)  loss_box_reg: 0.1417 (0.1614)  loss_mask: 0.3309 (0.4467)  loss_objectness: 0.0392 (0.0771)  loss_rpn_box_reg: 0.0223 (0.0273)  time: 0.1059 (0.1117)  data: 0.0014 (0.0027)  lr: 0.160000  max mem: 4923
2020-06-23 16:50:32,795 maskrcnn_benchmark.trainer INFO: eta: 1:12:41  iter: 900  loss: 0.9118 (1.1575)  loss_classifier: 0.3433 (0.4483)  loss_box_reg: 0.1433 (0.1612)  loss_mask: 0.3302 (0.4444)  loss_objectness: 0.0391 (0.0765)  loss_rpn_box_reg: 0.0133 (0.0272)  time: 0.1065 (0.1116)  data: 0.0014 (0.0027)  lr: 0.160000  max mem: 4923
:::MLLOG {"namespace": "", "time_ms": 1592956235966, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592956235966, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592956235966, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 1}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 16:50:36,117 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.30s)
creating index...
index created!
index created!
Done (t=0.31s)
creating index...
Done (t=0.30s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.30s)
creating index...
Done (t=0.31s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1592956236445, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 1, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/engine/tester.py", "lineno": 35}}
2020-06-23 16:50:36,446 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
Done (t=0.29s)
creating index...
Done (t=0.31s)
creating index...
Done (t=0.31s)
creating index...
Done (t=0.30s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<02:58,  2.29s/it]
  4%|         | 3/79 [00:02<02:03,  1.62s/it]
  8%|         | 6/79 [00:02<01:23,  1.15s/it]
 11%|        | 9/79 [00:02<00:57,  1.23it/s]
 15%|        | 12/79 [00:02<00:38,  1.72it/s]
 19%|        | 15/79 [00:02<00:26,  2.39it/s]
 23%|       | 18/79 [00:02<00:18,  3.27it/s]
 27%|       | 21/79 [00:03<00:13,  4.43it/s]
 30%|       | 24/79 [00:03<00:09,  5.88it/s]
 34%|      | 27/79 [00:03<00:06,  7.59it/s]
 38%|      | 30/79 [00:03<00:05,  9.57it/s]
 42%|     | 33/79 [00:03<00:03, 11.69it/s]
 46%|     | 36/79 [00:03<00:03, 13.90it/s]
 49%|     | 39/79 [00:03<00:02, 16.06it/s]
 53%|    | 42/79 [00:03<00:02, 18.06it/s]
 57%|    | 45/79 [00:04<00:01, 19.76it/s]
 61%|    | 48/79 [00:04<00:01, 21.22it/s]
 65%|   | 51/79 [00:04<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:00,  2.31s/it]
  5%|         | 4/79 [00:02<02:02,  1.63s/it]
  9%|         | 7/79 [00:02<01:23,  1.15s/it]
 13%|        | 10/79 [00:02<00:56,  1.22it/s]
 16%|        | 13/79 [00:02<00:38,  1.71it/s]
 20%|        | 16/79 [00:02<00:26,  2.37it/s]
 24%|       | 19/79 [00:03<00:18,  3.26it/s]
 28%|       | 22/79 [00:03<00:12,  4.41it/s]
 32%|      | 25/79 [00:03<00:09,  5.87it/s]
 35%|      | 28/79 [00:03<00:06,  7.65it/s]
 39%|      | 31/79 [00:03<00:04,  9.71it/s]
 43%|     | 34/79 [00:03<00:03, 11.89it/s]
 47%|     | 37/79 [00:03<00:02, 14.24it/s]
 51%|     | 40/79 [00:03<00:02, 16.37it/s]
 54%|    | 43/79 [00:03<00:01, 18.51it/s]
 58%|    | 46/79 [00:04<00:01, 20.22it/s]
 62%|   | 49/79 [00:04<00:01, 21.37it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<02:57,  2.28s/it]
  4%|         | 3/79 [00:02<02:02,  1.61s/it]
  8%|         | 6/79 [00:02<01:23,  1.14s/it]
 11%|        | 9/79 [00:02<00:56,  1.23it/s]
 15%|        | 12/79 [00:02<00:38,  1.72it/s]
 19%|        | 15/79 [00:02<00:26,  2.39it/s]
 23%|       | 18/79 [00:02<00:18,  3.29it/s]
 27%|       | 21/79 [00:03<00:13,  4.44it/s]
 30%|       | 24/79 [00:03<00:09,  5.91it/s]
 34%|      | 27/79 [00:03<00:06,  7.62it/s]
 38%|      | 30/79 [00:03<00:05,  9.61it/s]
 42%|     | 33/79 [00:03<00:03, 11.76it/s]
 46%|     | 36/79 [00:03<00:03, 13.79it/s]
 49%|     | 39/79 [00:03<00:02, 15.77it/s]
 53%|    | 42/79 [00:03<00:02, 17.81it/s]
 57%|    | 45/79 [00:04<00:01, 19.13it/s]
 61%|    | 48/79 [00:04<00:01, 20.60it/s]
 65%|   | 51/79 [00:04<00:01, 21.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:05,  2.38s/it]
  5%|         | 4/79 [00:02<02:05,  1.68s/it]
  9%|         | 7/79 [00:02<01:25,  1.19s/it]
 13%|        | 10/79 [00:02<00:58,  1.19it/s]
 16%|        | 13/79 [00:02<00:39,  1.66it/s]
 20%|        | 16/79 [00:02<00:27,  2.31it/s]
 24%|       | 19/79 [00:03<00:18,  3.18it/s]
 28%|       | 22/79 [00:03<00:13,  4.32it/s]
 32%|      | 25/79 [00:03<00:09,  5.75it/s]
 35%|      | 28/79 [00:03<00:06,  7.49it/s]
 39%|      | 31/79 [00:03<00:05,  9.53it/s]
 43%|     | 34/79 [00:03<00:03, 11.72it/s]
 47%|     | 37/79 [00:03<00:02, 14.06it/s]
 51%|     | 40/79 [00:03<00:02, 16.24it/s]
 54%|    | 43/79 [00:04<00:01, 18.39it/s]
 58%|    | 46/79 [00:04<00:01, 20.02it/s]
 62%|   | 49/79 [00:04<00:01, 21.48it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:04,  2.37s/it]
  5%|         | 4/79 [00:02<02:05,  1.67s/it]
  9%|         | 7/79 [00:02<01:24,  1.18s/it]
 13%|        | 10/79 [00:02<00:57,  1.20it/s]
 16%|        | 13/79 [00:02<00:39,  1.67it/s]
 20%|        | 16/79 [00:02<00:27,  2.33it/s]
 24%|       | 19/79 [00:03<00:18,  3.20it/s]
 28%|       | 22/79 [00:03<00:13,  4.33it/s]
 32%|      | 25/79 [00:03<00:09,  5.77it/s]
 35%|      | 28/79 [00:03<00:06,  7.53it/s]
 39%|      | 31/79 [00:03<00:05,  9.55it/s]
 43%|     | 34/79 [00:03<00:03, 11.82it/s]
 47%|     | 37/79 [00:03<00:02, 14.10it/s]
 51%|     | 40/79 [00:03<00:02, 16.29it/s]
 54%|    | 43/79 [00:03<00:01, 18.32it/s]
 58%|    | 46/79 [00:04<00:01, 20.00it/s]
 62%|   | 49/79 [00:04<00:01, 21.30it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:09,  2.43s/it]
  5%|         | 4/79 [00:02<02:08,  1.71s/it]
  9%|         | 7/79 [00:02<01:27,  1.21s/it]
 13%|        | 10/79 [00:02<00:59,  1.16it/s]
 16%|        | 13/79 [00:02<00:40,  1.63it/s]
 20%|        | 16/79 [00:03<00:27,  2.27it/s]
 24%|       | 19/79 [00:03<00:19,  3.13it/s]
 28%|       | 22/79 [00:03<00:13,  4.25it/s]
 32%|      | 25/79 [00:03<00:09,  5.67it/s]
 35%|      | 28/79 [00:03<00:06,  7.38it/s]
 39%|      | 31/79 [00:03<00:05,  9.39it/s]
 43%|     | 34/79 [00:03<00:03, 11.56it/s]
 47%|     | 37/79 [00:03<00:03, 13.90it/s]
 51%|     | 40/79 [00:03<00:02, 16.03it/s]
 54%|    | 43/79 [00:04<00:01, 18.07it/s]
 58%|    | 46/79 [00:04<00:01, 19.75it/s]
 62%|   | 49/79 [00:04<00:01, 21.42it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:01,  2.33s/it]
  5%|         | 4/79 [00:02<02:03,  1.64s/it]
  9%|         | 7/79 [00:02<01:23,  1.16s/it]
 13%|        | 10/79 [00:02<00:56,  1.21it/s]
 16%|        | 13/79 [00:02<00:38,  1.70it/s]
 20%|        | 16/79 [00:02<00:26,  2.35it/s]
 24%|       | 19/79 [00:03<00:18,  3.23it/s]
 28%|       | 22/79 [00:03<00:13,  4.36it/s]
 32%|      | 25/79 [00:03<00:09,  5.80it/s]
 35%|      | 28/79 [00:03<00:06,  7.53it/s]
 39%|      | 31/79 [00:03<00:05,  9.53it/s]
 43%|     | 34/79 [00:03<00:03, 11.70it/s]
 47%|     | 37/79 [00:03<00:03, 13.95it/s]
 51%|     | 40/79 [00:03<00:02, 15.98it/s]
 54%|    | 43/79 [00:04<00:02, 17.93it/s]
 58%|    | 46/79 [00:04<00:01, 19.42it/s]
 62%|   | 49/79 [00:04<00:01, 20.88it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:04,  2.37s/it]
  5%|         | 4/79 [00:02<02:05,  1.67s/it]
  9%|         | 7/79 [00:02<01:25,  1.18s/it]
 13%|        | 10/79 [00:02<00:57,  1.19it/s]
 16%|        | 13/79 [00:02<00:39,  1.67it/s]
 20%|        | 16/79 [00:02<00:27,  2.32it/s]
 24%|       | 19/79 [00:03<00:18,  3.19it/s]
 28%|       | 22/79 [00:03<00:13,  4.32it/s]
 32%|      | 25/79 [00:03<00:09,  5.75it/s]
 35%|      | 28/79 [00:03<00:06,  7.48it/s]
 39%|      | 31/79 [00:03<00:05,  9.48it/s]
 43%|     | 34/79 [00:03<00:03, 11.68it/s]
 47%|     | 37/79 [00:03<00:03, 13.91it/s]
 51%|     | 40/79 [00:03<00:02, 16.02it/s]
 54%|    | 43/79 [00:04<00:01, 18.11it/s]
 58%|    | 46/79 [00:04<00:01, 19.95it/s]
 62%|   | 49/79 [00:04<00:01, 21.39it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:03,  2.35s/it]
  5%|         | 4/79 [00:02<02:04,  1.66s/it]
  9%|         | 7/79 [00:02<01:24,  1.17s/it]
 13%|        | 10/79 [00:02<00:57,  1.20it/s]
 16%|        | 13/79 [00:02<00:39,  1.68it/s]
 20%|        | 16/79 [00:02<00:27,  2.33it/s]
 24%|       | 19/79 [00:03<00:18,  3.21it/s]
 28%|       | 22/79 [00:03<00:13,  4.34it/s]
 32%|      | 25/79 [00:03<00:09,  5.77it/s]
 35%|      | 28/79 [00:03<00:06,  7.52it/s]
 39%|      | 31/79 [00:03<00:05,  9.56it/s]
 43%|     | 34/79 [00:03<00:03, 11.73it/s]
 47%|     | 37/79 [00:03<00:02, 14.05it/s]
 51%|     | 40/79 [00:03<00:02, 16.15it/s]
 54%|    | 43/79 [00:04<00:01, 18.18it/s]
 58%|    | 46/79 [00:04<00:01, 19.91it/s]
 62%|   | 49/79 [00:04<00:01, 21.24it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:04,  2.37s/it]
  5%|         | 4/79 [00:02<02:05,  1.67s/it]
  9%|         | 7/79 [00:02<01:24,  1.18s/it]
 13%|        | 10/79 [00:02<00:57,  1.20it/s]
 16%|        | 13/79 [00:02<00:39,  1.67it/s]
 20%|        | 16/79 [00:02<00:27,  2.32it/s]
 24%|       | 19/79 [00:03<00:18,  3.19it/s]
 28%|       | 22/79 [00:03<00:13,  4.33it/s]
 32%|      | 25/79 [00:03<00:09,  5.76it/s]
 35%|      | 28/79 [00:03<00:06,  7.52it/s]
 39%|      | 31/79 [00:03<00:05,  9.49it/s]
 43%|     | 34/79 [00:03<00:03, 11.67it/s]
 47%|     | 37/79 [00:03<00:02, 14.00it/s]
 51%|     | 40/79 [00:03<00:02, 16.08it/s]
 54%|    | 43/79 [00:04<00:01, 18.03it/s]
 58%|    | 46/79 [00:04<00:01, 19.77it/s]
 62%|   | 49/79 [00:04<00:01, 21.26it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:06,  2.39s/it]
  5%|         | 4/79 [00:02<02:06,  1.68s/it]
  9%|         | 7/79 [00:02<01:25,  1.19s/it]
 13%|        | 10/79 [00:02<00:58,  1.18it/s]
 16%|        | 13/79 [00:02<00:39,  1.66it/s]
 20%|        | 16/79 [00:02<00:27,  2.30it/s]
 24%|       | 19/79 [00:03<00:18,  3.16it/s]
 28%|       | 22/79 [00:03<00:13,  4.29it/s]
 32%|      | 25/79 [00:03<00:09,  5.71it/s]
 35%|      | 28/79 [00:03<00:06,  7.46it/s]
 39%|      | 31/79 [00:03<00:05,  9.49it/s]
 43%|     | 34/79 [00:03<00:03, 11.68it/s]
 47%|     | 37/79 [00:03<00:03, 13.95it/s]
 51%|     | 40/79 [00:03<00:02, 16.17it/s]
 54%|    | 43/79 [00:04<00:01, 18.41it/s]
 58%|    | 46/79 [00:04<00:01, 19.96it/s]
 62%|   | 49/79 [00:04<00:01, 21.34it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:05,  2.38s/it]
  5%|         | 4/79 [00:02<02:05,  1.68s/it]
  9%|         | 7/79 [00:02<01:25,  1.19s/it]
 13%|        | 10/79 [00:02<00:58,  1.19it/s]
 16%|        | 13/79 [00:02<00:39,  1.66it/s]
 20%|        | 16/79 [00:02<00:27,  2.31it/s]
 24%|       | 19/79 [00:03<00:18,  3.18it/s]
 28%|       | 22/79 [00:03<00:13,  4.29it/s]
 32%|      | 25/79 [00:03<00:09,  5.72it/s]
 35%|      | 28/79 [00:03<00:06,  7.45it/s]
 39%|      | 31/79 [00:03<00:05,  9.48it/s]
 43%|     | 34/79 [00:03<00:03, 11.62it/s]
 47%|     | 37/79 [00:03<00:03, 13.87it/s]
 51%|     | 40/79 [00:03<00:02, 16.18it/s]
 54%|    | 43/79 [00:04<00:01, 18.10it/s]
 58%|    | 46/79 [00:04<00:01, 19.70it/s]
 62%|   | 49/79 [00:04<00:01, 21.20it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:03,  2.35s/it]
  5%|         | 4/79 [00:02<02:04,  1.66s/it]
  9%|         | 7/79 [00:02<01:24,  1.17s/it]
 13%|        | 10/79 [00:02<00:57,  1.20it/s]
 16%|        | 13/79 [00:02<00:39,  1.68it/s]
 20%|        | 16/79 [00:02<00:26,  2.33it/s]
 24%|       | 19/79 [00:03<00:18,  3.21it/s]
 28%|       | 22/79 [00:03<00:13,  4.34it/s]
 32%|      | 25/79 [00:03<00:09,  5.75it/s]
 35%|      | 28/79 [00:03<00:06,  7.51it/s]
 39%|      | 31/79 [00:03<00:05,  9.56it/s]
 43%|     | 34/79 [00:03<00:03, 11.76it/s]
 47%|     | 37/79 [00:03<00:03, 13.97it/s]
 51%|     | 40/79 [00:03<00:02, 16.07it/s]
 54%|    | 43/79 [00:04<00:01, 18.04it/s]
 58%|    | 46/79 [00:04<00:01, 19.58it/s]
 62%|   | 49/79 [00:04<00:01, 20.94it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:04,  2.36s/it]
  4%|         | 3/79 [00:02<02:06,  1.67s/it]
  8%|         | 6/79 [00:02<01:26,  1.18s/it]
 11%|        | 9/79 [00:02<00:58,  1.19it/s]
 15%|        | 12/79 [00:02<00:40,  1.67it/s]
 19%|        | 15/79 [00:02<00:27,  2.32it/s]
 23%|       | 18/79 [00:03<00:19,  3.19it/s]
 27%|       | 21/79 [00:03<00:13,  4.31it/s]
 30%|       | 24/79 [00:03<00:09,  5.76it/s]
 34%|      | 27/79 [00:03<00:06,  7.46it/s]
 38%|      | 30/79 [00:03<00:05,  9.41it/s]
 42%|     | 33/79 [00:03<00:03, 11.50it/s]
 46%|     | 36/79 [00:03<00:03, 13.70it/s]
 49%|     | 39/79 [00:03<00:02, 15.71it/s]
 53%|    | 42/79 [00:04<00:02, 17.62it/s]
 57%|    | 45/79 [00:04<00:01, 19.31it/s]
 61%|    | 48/79 [00:04<00:01, 20.80it/s]
 65%|   | 51/79 [00:04<00:01, 21.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:04,  2.37s/it]
  4%|         | 3/79 [00:02<02:07,  1.67s/it]
  8%|         | 6/79 [00:02<01:26,  1.18s/it]
 11%|        | 9/79 [00:02<00:58,  1.19it/s]
 15%|        | 12/79 [00:02<00:40,  1.67it/s]
 19%|        | 15/79 [00:02<00:27,  2.31it/s]
 23%|       | 18/79 [00:03<00:19,  3.18it/s]
 27%|       | 21/79 [00:03<00:13,  4.31it/s]
 30%|       | 24/79 [00:03<00:09,  5.72it/s]
 34%|      | 27/79 [00:03<00:07,  7.41it/s]
 38%|      | 30/79 [00:03<00:05,  9.41it/s]
 42%|     | 33/79 [00:03<00:03, 11.51it/s]
 46%|     | 36/79 [00:03<00:03, 13.72it/s]
 49%|     | 39/79 [00:03<00:02, 15.68it/s]
 53%|    | 42/79 [00:04<00:02, 17.51it/s]
 57%|    | 45/79 [00:04<00:01, 19.01it/s]
 61%|    | 48/79 [00:04<00:01, 20.38it/s]
 65%|   | 51/79 [00:04<00:01, 21.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:06,  2.40s/it]
  5%|         | 4/79 [00:02<02:06,  1.69s/it]
  9%|         | 7/79 [00:02<01:26,  1.19s/it]
 13%|        | 10/79 [00:02<00:58,  1.18it/s]
 16%|        | 13/79 [00:02<00:39,  1.65it/s]
 20%|        | 16/79 [00:02<00:27,  2.30it/s]
 24%|       | 19/79 [00:03<00:19,  3.16it/s]
 28%|       | 22/79 [00:03<00:13,  4.28it/s]
 32%|      | 25/79 [00:03<00:09,  5.69it/s]
 35%|      | 28/79 [00:03<00:06,  7.43it/s]
 39%|      | 31/79 [00:03<00:05,  9.44it/s]
 43%|     | 34/79 [00:03<00:03, 11.64it/s]
 47%|     | 37/79 [00:03<00:03, 13.87it/s]
 51%|     | 40/79 [00:03<00:02, 15.86it/s]
 54%|    | 43/79 [00:04<00:02, 17.82it/s]
 58%|    | 46/79 [00:04<00:01, 19.46it/s]
 62%|   | 49/79 [00:04<00:01, 20.83it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:06,  2.39s/it]
  5%|         | 4/79 [00:02<02:06,  1.68s/it]
  9%|         | 7/79 [00:02<01:25,  1.19s/it]
 13%|        | 10/79 [00:02<00:58,  1.18it/s]
 16%|        | 13/79 [00:02<00:39,  1.65it/s]
 20%|        | 16/79 [00:03<00:27,  2.29it/s]
 24%|       | 19/79 [00:03<00:19,  3.15it/s]
 28%|       | 22/79 [00:03<00:13,  4.28it/s]
 32%|      | 25/79 [00:03<00:09,  5.70it/s]
 35%|      | 28/79 [00:03<00:06,  7.40it/s]
 39%|      | 31/79 [00:03<00:05,  9.42it/s]
 43%|     | 34/79 [00:03<00:03, 11.60it/s]
 47%|     | 37/79 [00:03<00:03, 13.89it/s]
 51%|     | 40/79 [00:03<00:02, 15.97it/s]
 54%|    | 43/79 [00:04<00:01, 18.03it/s]
 58%|    | 46/79 [00:04<00:01, 19.69it/s]
 62%|   | 49/79 [00:04<00:01, 21.16it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<02:58,  2.29s/it]
  3%|         | 2/79 [00:02<02:06,  1.64s/it]
  6%|         | 5/79 [00:02<01:25,  1.16s/it]
 10%|         | 8/79 [00:02<00:58,  1.21it/s]
 14%|        | 11/79 [00:02<00:40,  1.70it/s]
 18%|        | 14/79 [00:02<00:27,  2.35it/s]
 22%|       | 17/79 [00:03<00:19,  3.22it/s]
 25%|       | 20/79 [00:03<00:13,  4.36it/s]
 29%|       | 23/79 [00:03<00:09,  5.77it/s]
 33%|      | 26/79 [00:03<00:07,  7.47it/s]
 37%|      | 29/79 [00:03<00:05,  9.38it/s]
 41%|      | 32/79 [00:03<00:04, 11.49it/s]
 44%|     | 35/79 [00:03<00:03, 13.51it/s]
 48%|     | 38/79 [00:03<00:02, 15.54it/s]
 52%|    | 41/79 [00:04<00:02, 17.28it/s]
 56%|    | 44/79 [00:04<00:01, 18.90it/s]
 59%|    | 47/79 [00:04<00:01, 20.29it/s]
 63%|   | 50/79 [00:04<00:01, 21.55it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:02,  2.33s/it]
  5%|         | 4/79 [00:02<02:03,  1.65s/it]
  9%|         | 7/79 [00:02<01:23,  1.16s/it]
 13%|        | 10/79 [00:02<00:57,  1.21it/s]
 16%|        | 13/79 [00:02<00:38,  1.69it/s]
 20%|        | 16/79 [00:02<00:26,  2.35it/s]
 24%|       | 19/79 [00:03<00:18,  3.24it/s]
 28%|       | 22/79 [00:03<00:13,  4.38it/s]
 32%|      | 25/79 [00:03<00:09,  5.83it/s]
 35%|      | 28/79 [00:03<00:06,  7.59it/s]
 39%|      | 31/79 [00:03<00:05,  9.59it/s]
 43%|     | 34/79 [00:03<00:03, 11.86it/s]
 47%|     | 37/79 [00:03<00:02, 14.09it/s]
 51%|     | 40/79 [00:03<00:02, 16.23it/s]
 54%|    | 43/79 [00:03<00:01, 18.16it/s]
 58%|    | 46/79 [00:04<00:01, 18.97it/s]
 62%|   | 49/79 [00:04<00:01, 18.35it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:11,  2.45s/it]
  5%|         | 4/79 [00:02<02:09,  1.73s/it]
  9%|         | 7/79 [00:02<01:28,  1.22s/it]
 13%|        | 10/79 [00:02<00:59,  1.15it/s]
 16%|        | 13/79 [00:02<00:40,  1.62it/s]
 20%|        | 16/79 [00:03<00:28,  2.24it/s]
 24%|       | 19/79 [00:03<00:19,  3.09it/s]
 28%|       | 22/79 [00:03<00:13,  4.20it/s]
 32%|      | 25/79 [00:03<00:09,  5.61it/s]
 35%|      | 28/79 [00:03<00:06,  7.36it/s]
 39%|      | 31/79 [00:03<00:05,  9.33it/s]
 43%|     | 34/79 [00:03<00:03, 11.52it/s]
 47%|     | 37/79 [00:03<00:03, 13.75it/s]
 51%|     | 40/79 [00:03<00:02, 15.98it/s]
 54%|    | 43/79 [00:04<00:01, 18.05it/s]
 58%|    | 46/79 [00:04<00:01, 19.78it/s]
 62%|   | 49/79 [00:04<00:01, 21.16it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:08,  2.41s/it]
  5%|         | 4/79 [00:02<02:07,  1.70s/it]
  9%|         | 7/79 [00:02<01:26,  1.20s/it]
 13%|        | 10/79 [00:02<00:58,  1.17it/s]
 16%|        | 13/79 [00:02<00:40,  1.64it/s]
 20%|        | 16/79 [00:03<00:27,  2.28it/s]
 24%|       | 19/79 [00:03<00:19,  3.13it/s]
 28%|       | 22/79 [00:03<00:13,  4.24it/s]
 32%|      | 25/79 [00:03<00:09,  5.66it/s]
 35%|      | 28/79 [00:03<00:06,  7.36it/s]
 39%|      | 31/79 [00:03<00:05,  9.37it/s]
 43%|     | 34/79 [00:03<00:03, 11.59it/s]
 47%|     | 37/79 [00:03<00:03, 13.86it/s]
 51%|     | 40/79 [00:03<00:02, 15.95it/s]
 54%|    | 43/79 [00:04<00:02, 17.95it/s]
 58%|    | 46/79 [00:04<00:01, 19.44it/s]
 62%|   | 49/79 [00:04<00:01, 20.76it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:03,  2.35s/it]
  5%|         | 4/79 [00:02<02:04,  1.66s/it]
  9%|         | 7/79 [00:02<01:24,  1.17s/it]
 13%|        | 10/79 [00:02<00:57,  1.20it/s]
 16%|        | 13/79 [00:02<00:39,  1.68it/s]
 20%|        | 16/79 [00:02<00:27,  2.33it/s]
 24%|       | 19/79 [00:03<00:18,  3.19it/s]
 28%|       | 22/79 [00:03<00:13,  4.32it/s]
 32%|      | 25/79 [00:03<00:09,  5.74it/s]
 35%|      | 28/79 [00:03<00:06,  7.48it/s]
 39%|      | 31/79 [00:03<00:05,  9.44it/s]
 43%|     | 34/79 [00:03<00:03, 11.62it/s]
 47%|     | 37/79 [00:03<00:03, 13.82it/s]
 51%|     | 40/79 [00:03<00:02, 15.76it/s]
 54%|    | 43/79 [00:04<00:02, 17.74it/s]
 58%|    | 46/79 [00:04<00:01, 19.40it/s]
 62%|   | 49/79 [00:04<00:01, 20.69it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:08,  2.42s/it]
  5%|         | 4/79 [00:02<02:07,  1.71s/it]
  9%|         | 7/79 [00:02<01:26,  1.21s/it]
 13%|        | 10/79 [00:02<00:59,  1.17it/s]
 16%|        | 13/79 [00:02<00:40,  1.64it/s]
 20%|        | 16/79 [00:03<00:27,  2.27it/s]
 24%|       | 19/79 [00:03<00:19,  3.12it/s]
 28%|       | 22/79 [00:03<00:13,  4.24it/s]
 32%|      | 25/79 [00:03<00:09,  5.63it/s]
 35%|      | 28/79 [00:03<00:06,  7.35it/s]
 39%|      | 31/79 [00:03<00:05,  9.35it/s]
 43%|     | 34/79 [00:03<00:03, 11.55it/s]
 47%|     | 37/79 [00:03<00:03, 13.77it/s]
 51%|     | 40/79 [00:03<00:02, 15.99it/s]
 54%|    | 43/79 [00:04<00:02, 17.94it/s]
 58%|    | 46/79 [00:04<00:01, 19.57it/s]
 62%|   | 49/79 [00:04<00:01, 20.99it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:10,  2.44s/it]
  5%|         | 4/79 [00:02<02:08,  1.72s/it]
  9%|         | 7/79 [00:02<01:27,  1.21s/it]
 13%|        | 10/79 [00:02<00:59,  1.16it/s]
 16%|        | 13/79 [00:02<00:40,  1.63it/s]
 20%|        | 16/79 [00:03<00:27,  2.26it/s]
 24%|       | 19/79 [00:03<00:19,  3.11it/s]
 28%|       | 22/79 [00:03<00:13,  4.22it/s]
 32%|      | 25/79 [00:03<00:09,  5.63it/s]
 35%|      | 28/79 [00:03<00:06,  7.32it/s]
 39%|      | 31/79 [00:03<00:05,  9.29it/s]
 43%|     | 34/79 [00:03<00:03, 11.46it/s]
 47%|     | 37/79 [00:03<00:03, 13.66it/s]
 51%|     | 40/79 [00:03<00:02, 15.90it/s]
 54%|    | 43/79 [00:04<00:02, 17.88it/s]
 58%|    | 46/79 [00:04<00:01, 19.69it/s]
 62%|   | 49/79 [00:04<00:01, 21.05it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:04,  2.37s/it]
  5%|         | 4/79 [00:02<02:05,  1.67s/it]
  9%|         | 7/79 [00:02<01:25,  1.18s/it]
 13%|        | 10/79 [00:02<00:57,  1.19it/s]
 16%|        | 13/79 [00:02<00:39,  1.67it/s]
 20%|        | 16/79 [00:02<00:27,  2.32it/s]
 24%|       | 19/79 [00:03<00:18,  3.18it/s]
 28%|       | 22/79 [00:03<00:13,  4.30it/s]
 32%|      | 25/79 [00:03<00:09,  5.69it/s]
 35%|      | 28/79 [00:03<00:06,  7.40it/s]
 39%|      | 31/79 [00:03<00:05,  9.38it/s]
 43%|     | 34/79 [00:03<00:03, 11.46it/s]
 47%|     | 37/79 [00:03<00:03, 13.59it/s]
 51%|     | 40/79 [00:03<00:02, 15.71it/s]
 54%|    | 43/79 [00:04<00:02, 17.83it/s]
 58%|    | 46/79 [00:04<00:01, 19.16it/s]
 62%|   | 49/79 [00:04<00:01, 20.63it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:11,  2.45s/it]
  5%|         | 4/79 [00:02<02:09,  1.73s/it]
  9%|         | 7/79 [00:02<01:27,  1.22s/it]
 13%|        | 10/79 [00:02<00:59,  1.15it/s]
 16%|        | 13/79 [00:02<00:40,  1.62it/s]
 20%|        | 16/79 [00:03<00:28,  2.25it/s]
 24%|       | 19/79 [00:03<00:19,  3.09it/s]
 28%|       | 22/79 [00:03<00:13,  4.20it/s]
 32%|      | 25/79 [00:03<00:09,  5.60it/s]
 35%|      | 28/79 [00:03<00:07,  7.26it/s]
 39%|      | 31/79 [00:03<00:05,  9.18it/s]
 43%|     | 34/79 [00:03<00:03, 11.30it/s]
 47%|     | 37/79 [00:03<00:03, 13.48it/s]
 51%|     | 40/79 [00:04<00:02, 15.63it/s]
 54%|    | 43/79 [00:04<00:02, 17.60it/s]
 58%|    | 46/79 [00:04<00:01, 19.19it/s]
 62%|   | 49/79 [00:04<00:01, 20.70it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:06,  2.40s/it]
  5%|         | 4/79 [00:02<02:06,  1.69s/it]
  9%|         | 7/79 [00:02<01:26,  1.19s/it]
 13%|        | 10/79 [00:02<00:58,  1.18it/s]
 16%|        | 13/79 [00:02<00:39,  1.65it/s]
 20%|        | 16/79 [00:02<00:27,  2.29it/s]
 24%|       | 19/79 [00:03<00:19,  3.15it/s]
 28%|       | 22/79 [00:03<00:13,  4.28it/s]
 32%|      | 25/79 [00:03<00:09,  5.68it/s]
 35%|      | 28/79 [00:03<00:06,  7.40it/s]
 39%|      | 31/79 [00:03<00:05,  9.01it/s]
 43%|     | 34/79 [00:03<00:04, 10.96it/s]
 47%|     | 37/79 [00:03<00:03, 13.24it/s]
 51%|     | 40/79 [00:04<00:02, 15.42it/s]
 54%|    | 43/79 [00:04<00:02, 17.42it/s]
 58%|    | 46/79 [00:04<00:01, 19.21it/s]
 62%|   | 49/79 [00:04<00:01, 20.53it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:07,  2.40s/it]
  5%|         | 4/79 [00:02<02:07,  1.69s/it]
  9%|         | 7/79 [00:02<01:26,  1.20s/it]
 13%|        | 10/79 [00:02<00:58,  1.18it/s]
 16%|        | 13/79 [00:02<00:40,  1.65it/s]
 20%|        | 16/79 [00:03<00:27,  2.28it/s]
 24%|       | 19/79 [00:03<00:19,  3.14it/s]
 28%|       | 22/79 [00:03<00:13,  4.25it/s]
 32%|      | 25/79 [00:03<00:09,  5.64it/s]
 35%|      | 28/79 [00:03<00:06,  7.36it/s]
 39%|      | 31/79 [00:03<00:05,  9.33it/s]
 43%|     | 34/79 [00:03<00:03, 11.44it/s]
 47%|     | 37/79 [00:03<00:03, 13.65it/s]
 51%|     | 40/79 [00:03<00:02, 15.78it/s]
 54%|    | 43/79 [00:04<00:02, 17.66it/s]
 58%|    | 46/79 [00:04<00:01, 19.05it/s]
 62%|   | 49/79 [00:04<00:01, 20.26it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:05,  2.38s/it]
  5%|         | 4/79 [00:02<02:06,  1.68s/it]
  9%|         | 7/79 [00:02<01:25,  1.19s/it]
 13%|        | 10/79 [00:02<00:58,  1.18it/s]
 16%|        | 13/79 [00:02<00:39,  1.66it/s]
 20%|        | 16/79 [00:03<00:27,  2.30it/s]
 24%|       | 19/79 [00:03<00:19,  3.16it/s]
 28%|       | 22/79 [00:03<00:13,  4.26it/s]
 32%|      | 25/79 [00:03<00:09,  5.68it/s]
 35%|      | 28/79 [00:03<00:06,  7.39it/s]
 39%|      | 31/79 [00:03<00:05,  9.37it/s]
 43%|     | 34/79 [00:03<00:03, 11.58it/s]
 47%|     | 37/79 [00:03<00:03, 13.81it/s]
 51%|     | 40/79 [00:03<00:02, 15.80it/s]
 54%|    | 43/79 [00:04<00:02, 17.64it/s]
 58%|    | 46/79 [00:04<00:01, 19.20it/s]
 62%|   | 49/79 [00:04<00:01, 20.54it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:06,  2.39s/it]
  5%|         | 4/79 [00:02<02:06,  1.68s/it]
  9%|         | 7/79 [00:02<01:25,  1.19s/it]
 13%|        | 10/79 [00:02<00:58,  1.18it/s]
 16%|        | 13/79 [00:02<00:39,  1.66it/s]
 20%|        | 16/79 [00:03<00:27,  2.30it/s]
 24%|       | 19/79 [00:03<00:19,  3.16it/s]
 28%|       | 22/79 [00:03<00:13,  4.27it/s]
 32%|      | 25/79 [00:03<00:09,  5.68it/s]
 35%|      | 28/79 [00:03<00:06,  7.37it/s]
 39%|      | 31/79 [00:03<00:05,  9.36it/s]
 43%|     | 34/79 [00:03<00:03, 11.39it/s]
 47%|     | 37/79 [00:03<00:03, 13.63it/s]
 51%|     | 40/79 [00:03<00:02, 15.31it/s]
 54%|    | 43/79 [00:04<00:02, 17.17it/s]
 58%|    | 46/79 [00:04<00:01, 18.57it/s]
 62%|   | 49/79 [00:04<00:01, 19.88it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:09,  2.43s/it]
  5%|         | 4/79 [00:02<02:08,  1.71s/it]
  9%|         | 7/79 [00:02<01:27,  1.21s/it]
 13%|        | 10/79 [00:02<00:59,  1.16it/s]
 16%|        | 13/79 [00:02<00:40,  1.63it/s]
 20%|        | 16/79 [00:03<00:27,  2.26it/s]
 24%|       | 19/79 [00:03<00:19,  3.11it/s]
 28%|       | 22/79 [00:03<00:13,  4.21it/s]
 32%|      | 25/79 [00:03<00:09,  5.60it/s]
 35%|      | 28/79 [00:03<00:06,  7.29it/s]
 39%|      | 31/79 [00:03<00:05,  9.31it/s]
 43%|     | 34/79 [00:03<00:03, 11.49it/s]
 47%|     | 37/79 [00:03<00:03, 13.77it/s]
 51%|     | 40/79 [00:04<00:02, 15.79it/s]
 54%|    | 43/79 [00:04<00:02, 17.62it/s]
 58%|    | 46/79 [00:04<00:01, 19.16it/s]
 62%|   | 49/79 [00:04<00:01, 20.52it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:08,  2.42s/it]
  5%|         | 4/79 [00:02<02:07,  1.71s/it]
  9%|         | 7/79 [00:02<01:26,  1.21s/it]
 13%|        | 10/79 [00:02<00:59,  1.17it/s]
 16%|        | 13/79 [00:02<00:40,  1.63it/s]
 20%|        | 16/79 [00:03<00:27,  2.27it/s]
 24%|       | 19/79 [00:03<00:19,  3.12it/s]
 28%|       | 22/79 [00:03<00:13,  4.23it/s]
 32%|      | 25/79 [00:03<00:09,  5.63it/s]
 35%|      | 28/79 [00:03<00:06,  7.34it/s]
 39%|      | 31/79 [00:03<00:05,  9.24it/s]
 43%|     | 34/79 [00:03<00:03, 11.31it/s]
 47%|     | 37/79 [00:03<00:03, 13.43it/s]
 51%|     | 40/79 [00:04<00:02, 15.59it/s]
 54%|    | 43/79 [00:04<00:02, 17.22it/s]
 58%|    | 46/79 [00:04<00:01, 18.95it/s]
 62%|   | 49/79 [00:04<00:01, 20.08it/s]
 66%|   | 52/79 [00:04<00:01, 22.64it/s]
 70%|   | 55/79 [00:04<00:01, 23.43it/s]
 73%|  | 58/79 [00:04<00:00, 24.31it/s]
 77%|  | 61/79 [00:04<00:00, 24.71it/s]
 81%|  | 64/79 [00:04<00:00, 24.96it/s]
 85%| | 67/79 [00:04<00:00, 25.34it/s]
 89%| | 70/79 [00:05<00:00, 25.24it/s]
 92%|| 73/79 [00:05<00:00, 25.71it/s]
 96%|| 76/79 [00:05<00:00, 26.34it/s]
100%|| 79/79 [00:05<00:00, 14.67it/s]
, 22.61it/s]
 70%|   | 55/79 [00:04<00:01, 23.57it/s]
 73%|  | 58/79 [00:04<00:00, 24.14it/s]
 77%|  | 61/79 [00:04<00:00, 24.66it/s]
 81%|  | 64/79 [00:04<00:00, 25.04it/s]
 85%| | 67/79 [00:04<00:00, 25.47it/s]
 89%| | 70/79 [00:05<00:00, 25.46it/s]
 92%|| 73/79 [00:05<00:00, 25.53it/s]
 96%|| 76/79 [00:05<00:00, 26.49it/s]
100%|| 79/79 [00:05<00:00, 26.62it/s]
, 22.67it/s]
 70%|   | 55/79 [00:04<00:01, 23.65it/s]
 73%|  | 58/79 [00:04<00:00, 23.87it/s]
 77%|  | 61/79 [00:04<00:00, 24.33it/s]
 81%|  | 64/79 [00:04<00:00, 24.57it/s]
 85%| | 67/79 [00:04<00:00, 24.98it/s]
 89%| | 70/79 [00:05<00:00, 25.07it/s]
 92%|| 73/79 [00:05<00:00, 25.61it/s]
 96%|| 76/79 [00:05<00:00, 26.12it/s]
100%|| 79/79 [00:05<00:00, 14.46it/s]
, 22.36it/s]
 70%|   | 55/79 [00:04<00:01, 23.25it/s]
 73%|  | 58/79 [00:04<00:00, 23.99it/s]
 77%|  | 61/79 [00:04<00:00, 24.27it/s]
 81%|  | 64/79 [00:04<00:00, 24.63it/s]
 85%| | 67/79 [00:04<00:00, 25.09it/s]
 89%| | 70/79 [00:05<00:00, 24.87it/s]
 92%|| 73/79 [00:05<00:00, 25.38it/s]
 96%|| 76/79 [00:05<00:00, 26.02it/s]
100%|| 79/79 [00:05<00:00, 26.85it/s]
, 22.17it/s]
 70%|   | 55/79 [00:04<00:01, 22.87it/s]
 73%|  | 58/79 [00:04<00:00, 23.63it/s]
 77%|  | 61/79 [00:04<00:00, 23.93it/s]
 81%|  | 64/79 [00:04<00:00, 24.48it/s]
 85%| | 67/79 [00:04<00:00, 24.84it/s]
 89%| | 70/79 [00:05<00:00, 24.78it/s]
 92%|| 73/79 [00:05<00:00, 25.17it/s]
 96%|| 76/79 [00:05<00:00, 25.91it/s]
100%|| 79/79 [00:05<00:00, 26.90it/s]
, 22.29it/s]
 70%|   | 55/79 [00:04<00:01, 23.25it/s]
 73%|  | 58/79 [00:04<00:00, 23.86it/s]
 77%|  | 61/79 [00:04<00:00, 24.42it/s]
 81%|  | 64/79 [00:04<00:00, 24.69it/s]
 85%| | 67/79 [00:05<00:00, 25.08it/s]
 89%| | 70/79 [00:05<00:00, 25.26it/s]
 92%|| 73/79 [00:05<00:00, 25.65it/s]
 96%|| 76/79 [00:05<00:00, 26.13it/s]
100%|| 79/79 [00:05<00:00, 27.09it/s]
, 19.14it/s]
 70%|   | 55/79 [00:04<00:01, 20.75it/s]
 73%|  | 58/79 [00:04<00:00, 21.73it/s]
 77%|  | 61/79 [00:04<00:00, 22.73it/s]
 81%|  | 64/79 [00:04<00:00, 23.32it/s]
 85%| | 67/79 [00:05<00:00, 23.73it/s]
 89%| | 70/79 [00:05<00:00, 24.34it/s]
 92%|| 73/79 [00:05<00:00, 24.46it/s]
 96%|| 76/79 [00:05<00:00, 25.39it/s]
100%|| 79/79 [00:05<00:00, 26.34it/s]
, 21.74it/s]
 70%|   | 55/79 [00:04<00:01, 22.47it/s]
 73%|  | 58/79 [00:04<00:00, 23.03it/s]
 77%|  | 61/79 [00:04<00:00, 23.67it/s]
 81%|  | 64/79 [00:04<00:00, 23.82it/s]
 85%| | 67/79 [00:05<00:00, 24.08it/s]
 89%| | 70/79 [00:05<00:00, 23.87it/s]
 92%|| 73/79 [00:05<00:00, 24.75it/s]
 96%|| 76/79 [00:05<00:00, 25.56it/s]
100%|| 79/79 [00:05<00:00, 26.65it/s]
, 21.53it/s]
 70%|   | 55/79 [00:04<00:01, 22.68it/s]
 73%|  | 58/79 [00:04<00:00, 23.11it/s]
 77%|  | 61/79 [00:04<00:00, 23.82it/s]
 81%|  | 64/79 [00:04<00:00, 24.15it/s]
 85%| | 67/79 [00:05<00:00, 24.69it/s]
 89%| | 70/79 [00:05<00:00, 24.56it/s]
 92%|| 73/79 [00:05<00:00, 24.93it/s]
 96%|| 76/79 [00:05<00:00, 25.54it/s]
100%|| 79/79 [00:05<00:00, 26.28it/s]
, 22.03it/s]
 70%|   | 55/79 [00:04<00:01, 22.85it/s]
 73%|  | 58/79 [00:04<00:00, 23.50it/s]
 77%|  | 61/79 [00:04<00:00, 23.84it/s]
 81%|  | 64/79 [00:04<00:00, 24.14it/s]
 85%| | 67/79 [00:05<00:00, 24.32it/s]
 89%| | 70/79 [00:05<00:00, 24.37it/s]
 92%|| 73/79 [00:05<00:00, 24.85it/s]
 96%|| 76/79 [00:05<00:00, 25.69it/s]
100%|| 79/79 [00:05<00:00, 26.69it/s]
, 21.78it/s]
 70%|   | 55/79 [00:04<00:01, 22.57it/s]
 73%|  | 58/79 [00:04<00:00, 22.98it/s]
 77%|  | 61/79 [00:04<00:00, 23.07it/s]
 81%|  | 64/79 [00:04<00:00, 23.53it/s]
 85%| | 67/79 [00:05<00:00, 23.66it/s]
 89%| | 70/79 [00:05<00:00, 23.86it/s]
 92%|| 73/79 [00:05<00:00, 24.33it/s]
 96%|| 76/79 [00:05<00:00, 25.19it/s]
100%|| 79/79 [00:05<00:00, 26.23it/s]
, 21.53it/s]
 70%|   | 55/79 [00:04<00:01, 22.10it/s]
 73%|  | 58/79 [00:04<00:00, 22.71it/s]
 77%|  | 61/79 [00:04<00:00, 23.04it/s]
 81%|  | 64/79 [00:04<00:00, 23.28it/s]
 85%| | 67/79 [00:05<00:00, 23.32it/s]
 89%| | 70/79 [00:05<00:00, 23.67it/s]
 92%|| 73/79 [00:05<00:00, 24.27it/s]
 96%|| 76/79 [00:05<00:00, 25.10it/s]
100%|| 79/79 [00:05<00:00, 26.20it/s]
, 21.42it/s]
 70%|   | 55/79 [00:04<00:01, 22.22it/s]
 73%|  | 58/79 [00:04<00:00, 22.76it/s]
 77%|  | 61/79 [00:04<00:00, 23.28it/s]
 81%|  | 64/79 [00:04<00:00, 23.77it/s]
 85%| | 67/79 [00:05<00:00, 23.83it/s]
 89%| | 70/79 [00:05<00:00, 24.00it/s]
 92%|| 73/79 [00:05<00:00, 24.41it/s]
 96%|| 76/79 [00:05<00:00, 25.30it/s]
100%|| 79/79 [00:05<00:00, 26.34it/s]
, 21.38it/s]
 70%|   | 55/79 [00:04<00:01, 22.23it/s]
 73%|  | 58/79 [00:04<00:00, 22.88it/s]
 77%|  | 61/79 [00:04<00:00, 23.45it/s]
 81%|  | 64/79 [00:04<00:00, 23.45it/s]
 85%| | 67/79 [00:05<00:00, 23.54it/s]
 89%| | 70/79 [00:05<00:00, 23.91it/s]
 92%|| 73/79 [00:05<00:00, 24.72it/s]
 96%|| 76/79 [00:05<00:00, 25.65it/s]
100%|| 79/79 [00:05<00:00, 26.75it/s]
, 21.42it/s]
 70%|   | 55/79 [00:04<00:01, 22.11it/s]
 73%|  | 58/79 [00:04<00:00, 22.68it/s]
 77%|  | 61/79 [00:04<00:00, 22.92it/s]
 81%|  | 64/79 [00:04<00:00, 23.23it/s]
 85%| | 67/79 [00:05<00:00, 23.56it/s]
 89%| | 70/79 [00:05<00:00, 23.44it/s]
 92%|| 73/79 [00:05<00:00, 24.15it/s]
 96%|| 76/79 [00:05<00:00, 25.08it/s]
100%|| 79/79 [00:05<00:00, 26.14it/s]
/s]
 67%|   | 53/79 [00:04<00:01, 22.30it/s]
 71%|   | 56/79 [00:04<00:01, 22.93it/s]
 75%|  | 59/79 [00:04<00:00, 23.42it/s]
 78%|  | 62/79 [00:04<00:00, 23.97it/s]
 82%| | 65/79 [00:05<00:00, 24.01it/s]
 86%| | 68/79 [00:05<00:00, 24.35it/s]
 90%| | 71/79 [00:05<00:00, 24.39it/s]
 94%|| 74/79 [00:05<00:00, 25.11it/s]
 97%|| 77/79 [00:05<00:00, 25.70it/s]
100%|| 79/79 [00:05<00:00, 14.05it/s]
31it/s]
 68%|   | 54/79 [00:04<00:01, 23.21it/s]
 72%|  | 57/79 [00:04<00:00, 23.77it/s]
 76%|  | 60/79 [00:04<00:00, 24.47it/s]
 80%|  | 63/79 [00:04<00:00, 24.46it/s]
 84%| | 66/79 [00:04<00:00, 24.79it/s]
 87%| | 69/79 [00:05<00:00, 24.94it/s]
 91%| | 72/79 [00:05<00:00, 25.29it/s]
 95%|| 75/79 [00:05<00:00, 25.79it/s]
 99%|| 78/79 [00:06<00:00,  8.72it/s]
100%|| 79/79 [00:06<00:00, 12.66it/s]
, 22.74it/s]
 70%|   | 55/79 [00:04<00:01, 23.63it/s]
 73%|  | 58/79 [00:04<00:00, 24.52it/s]
 77%|  | 61/79 [00:04<00:00, 24.96it/s]
 81%|  | 64/79 [00:04<00:00, 25.55it/s]
 85%| | 67/79 [00:04<00:00, 25.68it/s]
 89%| | 70/79 [00:05<00:00, 25.88it/s]
 92%|| 73/79 [00:05<00:00, 26.16it/s]
 96%|| 76/79 [00:06<00:00,  8.66it/s]
100%|| 79/79 [00:06<00:00, 10.91it/s]
, 21.79it/s]
 70%|   | 55/79 [00:04<00:01, 22.42it/s]
 73%|  | 58/79 [00:04<00:00, 23.07it/s]
 77%|  | 61/79 [00:04<00:00, 23.59it/s]
 81%|  | 64/79 [00:04<00:00, 23.93it/s]
 85%| | 67/79 [00:04<00:00, 24.51it/s]
 89%| | 70/79 [00:05<00:00, 24.99it/s]
 92%|| 73/79 [00:05<00:00, 25.21it/s]
 96%|| 76/79 [00:05<00:00, 26.00it/s]
100%|| 79/79 [00:06<00:00,  8.71it/s]
, 22.56it/s]
 70%|   | 55/79 [00:04<00:01, 23.56it/s]
 73%|  | 58/79 [00:04<00:00, 24.24it/s]
 77%|  | 61/79 [00:04<00:00, 24.55it/s]
 81%|  | 64/79 [00:04<00:00, 24.66it/s]
 85%| | 67/79 [00:04<00:00, 24.97it/s]
 89%| | 70/79 [00:05<00:00, 25.01it/s]
 92%|| 73/79 [00:05<00:00, 25.42it/s]
 96%|| 76/79 [00:05<00:00, 25.96it/s]
100%|| 79/79 [00:06<00:00,  8.64it/s]
, 22.40it/s]
 70%|   | 55/79 [00:04<00:01, 22.92it/s]
 73%|  | 58/79 [00:04<00:00, 23.89it/s]
 77%|  | 61/79 [00:04<00:00, 24.21it/s]
 81%|  | 64/79 [00:04<00:00, 24.64it/s]
 85%| | 67/79 [00:04<00:00, 24.88it/s]
 89%| | 70/79 [00:05<00:00, 24.98it/s]
 92%|| 73/79 [00:05<00:00, 25.42it/s]
 96%|| 76/79 [00:05<00:00, 26.20it/s]
100%|| 79/79 [00:06<00:00,  8.72it/s]
, 22.44it/s]
 70%|   | 55/79 [00:04<00:01, 23.05it/s]
 73%|  | 58/79 [00:04<00:00, 23.79it/s]
 77%|  | 61/79 [00:04<00:00, 24.27it/s]
 81%|  | 64/79 [00:04<00:00, 24.56it/s]
 85%| | 67/79 [00:04<00:00, 24.77it/s]
 89%| | 70/79 [00:05<00:00, 24.71it/s]
 92%|| 73/79 [00:05<00:00, 25.15it/s]
 96%|| 76/79 [00:05<00:00, 25.93it/s]
100%|| 79/79 [00:06<00:00,  8.70it/s]
94it/s]
 68%|   | 54/79 [00:04<00:01, 22.60it/s]
 72%|  | 57/79 [00:04<00:00, 23.28it/s]
 76%|  | 60/79 [00:04<00:00, 23.60it/s]
 80%|  | 63/79 [00:04<00:00, 23.84it/s]
 84%| | 66/79 [00:04<00:00, 24.15it/s]
 87%| | 69/79 [00:05<00:00, 24.40it/s]
 91%| | 72/79 [00:05<00:00, 24.93it/s]
 95%|| 75/79 [00:05<00:00, 25.53it/s]
 99%|| 78/79 [00:05<00:00, 25.97it/s]
100%|| 79/79 [00:06<00:00, 12.50it/s]
, 22.27it/s]
 70%|   | 55/79 [00:04<00:01, 23.16it/s]
 73%|  | 58/79 [00:04<00:00, 23.70it/s]
 77%|  | 61/79 [00:04<00:00, 24.05it/s]
 81%|  | 64/79 [00:04<00:00, 24.39it/s]
 85%| | 67/79 [00:04<00:00, 24.85it/s]
 89%| | 70/79 [00:05<00:00, 24.78it/s]
 92%|| 73/79 [00:05<00:00, 25.09it/s]
 96%|| 76/79 [00:05<00:00, 25.65it/s]
100%|| 79/79 [00:06<00:00,  8.47it/s]
, 21.71it/s]
 70%|   | 55/79 [00:04<00:01, 22.42it/s]
 73%|  | 58/79 [00:04<00:00, 22.90it/s]
 77%|  | 61/79 [00:04<00:00, 23.40it/s]
 81%|  | 64/79 [00:04<00:00, 23.75it/s]
 85%| | 67/79 [00:05<00:00, 23.95it/s]
 89%| | 70/79 [00:05<00:00, 24.19it/s]
 92%|| 73/79 [00:05<00:00, 24.76it/s]
 96%|| 76/79 [00:05<00:00, 25.54it/s]
100%|| 79/79 [00:06<00:00,  8.61it/s]
60it/s]
 68%|   | 54/79 [00:04<00:01, 22.61it/s]
 72%|  | 57/79 [00:04<00:00, 23.00it/s]
 76%|  | 60/79 [00:04<00:00, 23.66it/s]
 80%|  | 63/79 [00:04<00:00, 23.94it/s]
 84%| | 66/79 [00:05<00:00, 24.31it/s]
 87%| | 69/79 [00:05<00:00, 24.32it/s]
 91%| | 72/79 [00:05<00:00, 24.66it/s]
 95%|| 75/79 [00:05<00:00, 25.52it/s]
 99%|| 78/79 [00:05<00:00, 26.29it/s]
100%|| 79/79 [00:06<00:00, 12.46it/s]
, 21.90it/s]
 70%|   | 55/79 [00:04<00:01, 22.85it/s]
 73%|  | 58/79 [00:04<00:00, 23.79it/s]
 77%|  | 61/79 [00:04<00:00, 23.91it/s]
 81%|  | 64/79 [00:04<00:00, 23.82it/s]
 85%| | 67/79 [00:05<00:00, 24.16it/s]
 89%| | 70/79 [00:05<00:00, 24.26it/s]
 92%|| 73/79 [00:05<00:00, 24.61it/s]
 96%|| 76/79 [00:05<00:00, 25.46it/s]
100%|| 79/79 [00:06<00:00,  8.62it/s]
41it/s]
 68%|   | 54/79 [00:04<00:01, 22.21it/s]
 72%|  | 57/79 [00:04<00:00, 22.86it/s]
 76%|  | 60/79 [00:04<00:00, 23.19it/s]
 80%|  | 63/79 [00:04<00:00, 23.59it/s]
 84%| | 66/79 [00:05<00:00, 23.86it/s]
 87%| | 69/79 [00:05<00:00, 24.22it/s]
 91%| | 72/79 [00:05<00:00, 24.54it/s]
 95%|| 75/79 [00:05<00:00, 25.50it/s]
 99%|| 78/79 [00:05<00:00, 26.24it/s]
100%|| 79/79 [00:06<00:00, 12.41it/s]
, 21.71it/s]
 70%|   | 55/79 [00:04<00:01, 22.90it/s]
 73%|  | 58/79 [00:04<00:00, 23.09it/s]
 77%|  | 61/79 [00:04<00:00, 23.78it/s]
 81%|  | 64/79 [00:04<00:00, 24.08it/s]
 85%| | 67/79 [00:05<00:00, 24.38it/s]
 89%| | 70/79 [00:05<00:00, 24.52it/s]
 92%|| 73/79 [00:05<00:00, 24.97it/s]
 96%|| 76/79 [00:05<00:00, 25.82it/s]
100%|| 79/79 [00:06<00:00,  8.66it/s]
, 21.80it/s]
 70%|   | 55/79 [00:04<00:01, 22.61it/s]
 73%|  | 58/79 [00:04<00:00, 23.40it/s]
 77%|  | 61/79 [00:04<00:00, 24.01it/s]
 81%|  | 64/79 [00:04<00:00, 24.52it/s]
 85%| | 67/79 [00:05<00:00, 24.85it/s]
 89%| | 70/79 [00:05<00:00, 24.95it/s]
 92%|| 73/79 [00:05<00:00, 25.41it/s]
 96%|| 76/79 [00:05<00:00, 25.98it/s]
100%|| 79/79 [00:06<00:00,  8.64it/s]
, 21.22it/s]
 70%|   | 55/79 [00:04<00:01, 21.84it/s]
 73%|  | 58/79 [00:04<00:00, 22.61it/s]
 77%|  | 61/79 [00:04<00:00, 23.09it/s]
 81%|  | 64/79 [00:05<00:00, 23.55it/s]
 85%| | 67/79 [00:05<00:00, 23.91it/s]
 89%| | 70/79 [00:05<00:00, 24.10it/s]
 92%|| 73/79 [00:05<00:00, 24.62it/s]
 96%|| 76/79 [00:05<00:00, 25.38it/s]
100%|| 79/79 [00:06<00:00,  8.43it/s]
, 20.97it/s]
 70%|   | 55/79 [00:04<00:01, 21.81it/s]
 73%|  | 58/79 [00:04<00:00, 22.44it/s]
 77%|  | 61/79 [00:04<00:00, 22.87it/s]
 81%|  | 64/79 [00:05<00:00, 23.26it/s]
 85%| | 67/79 [00:05<00:00, 23.48it/s]
 89%| | 70/79 [00:05<00:00, 23.47it/s]
 92%|| 73/79 [00:05<00:00, 23.84it/s]
 96%|| 76/79 [00:05<00:00, 24.89it/s]
100%|| 79/79 [00:06<00:00,  8.36it/s]
2020-06-23 16:50:42,938 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:06.491827 (0.04154769134521484 s / img per device, on 32 devices)
2020-06-23 16:50:42,959 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:50:42,960 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:50:42,981 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592956256536, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 2, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592956256536, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 2}}
2020-06-23 16:50:56,869 maskrcnn_benchmark.trainer INFO: eta: 1:28:07  iter: 920  loss: 0.8192 (1.1519)  loss_classifier: 0.2775 (0.4458)  loss_box_reg: 0.1307 (0.1609)  loss_mask: 0.3563 (0.4422)  loss_objectness: 0.0309 (0.0760)  loss_rpn_box_reg: 0.0127 (0.0272)  time: 0.1064 (0.1353)  data: 0.0014 (0.0251)  lr: 0.160000  max mem: 5148
Evaluating predictions
creating index...
2020-06-23 16:50:59,008 maskrcnn_benchmark.trainer INFO: eta: 1:27:41  iter: 940  loss: 0.8500 (1.1452)  loss_classifier: 0.3113 (0.4433)  loss_box_reg: 0.1313 (0.1603)  loss_mask: 0.3109 (0.4396)  loss_objectness: 0.0302 (0.0752)  loss_rpn_box_reg: 0.0106 (0.0268)  time: 0.1061 (0.1347)  data: 0.0013 (0.0246)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:01,156 maskrcnn_benchmark.trainer INFO: eta: 1:27:16  iter: 960  loss: 0.7768 (1.1392)  loss_classifier: 0.2952 (0.4407)  loss_box_reg: 0.1112 (0.1599)  loss_mask: 0.3257 (0.4372)  loss_objectness: 0.0217 (0.0746)  loss_rpn_box_reg: 0.0088 (0.0268)  time: 0.1072 (0.1341)  data: 0.0013 (0.0241)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:03,291 maskrcnn_benchmark.trainer INFO: eta: 1:26:51  iter: 980  loss: 0.9259 (1.1350)  loss_classifier: 0.3312 (0.4389)  loss_box_reg: 0.1500 (0.1599)  loss_mask: 0.3736 (0.4355)  loss_objectness: 0.0490 (0.0741)  loss_rpn_box_reg: 0.0150 (0.0267)  time: 0.1064 (0.1336)  data: 0.0014 (0.0236)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:05,435 maskrcnn_benchmark.trainer INFO: eta: 1:26:28  iter: 1000  loss: 0.8179 (1.1294)  loss_classifier: 0.3064 (0.4364)  loss_box_reg: 0.1223 (0.1595)  loss_mask: 0.3396 (0.4336)  loss_objectness: 0.0345 (0.0734)  loss_rpn_box_reg: 0.0131 (0.0265)  time: 0.1073 (0.1330)  data: 0.0014 (0.0232)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:07,565 maskrcnn_benchmark.trainer INFO: eta: 1:26:05  iter: 1020  loss: 0.8603 (1.1246)  loss_classifier: 0.3358 (0.4344)  loss_box_reg: 0.1436 (0.1594)  loss_mask: 0.3359 (0.4316)  loss_objectness: 0.0255 (0.0728)  loss_rpn_box_reg: 0.0106 (0.0265)  time: 0.1063 (0.1325)  data: 0.0013 (0.0227)  lr: 0.160000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=1.17s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:51:09,696 maskrcnn_benchmark.trainer INFO: eta: 1:25:43  iter: 1040  loss: 0.7275 (1.1180)  loss_classifier: 0.2556 (0.4312)  loss_box_reg: 0.1253 (0.1586)  loss_mask: 0.3128 (0.4298)  loss_objectness: 0.0230 (0.0721)  loss_rpn_box_reg: 0.0073 (0.0263)  time: 0.1064 (0.1320)  data: 0.0014 (0.0223)  lr: 0.160000  max mem: 5148
DONE (t=2.04s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.15198
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.31533
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.12878
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.07540
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.17673
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.19598
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.17494
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.29521
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.31270
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15114
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33995
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.41996
2020-06-23 16:51:11,820 maskrcnn_benchmark.trainer INFO: eta: 1:25:22  iter: 1060  loss: 0.9106 (1.1146)  loss_classifier: 0.3524 (0.4300)  loss_box_reg: 0.1452 (0.1587)  loss_mask: 0.3473 (0.4280)  loss_objectness: 0.0399 (0.0717)  loss_rpn_box_reg: 0.0139 (0.0263)  time: 0.1059 (0.1315)  data: 0.0014 (0.0219)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:13,939 maskrcnn_benchmark.trainer INFO: eta: 1:25:00  iter: 1080  loss: 0.9622 (1.1114)  loss_classifier: 0.3512 (0.4283)  loss_box_reg: 0.1377 (0.1587)  loss_mask: 0.3534 (0.4266)  loss_objectness: 0.0394 (0.0713)  loss_rpn_box_reg: 0.0136 (0.0265)  time: 0.1052 (0.1311)  data: 0.0014 (0.0216)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:16,074 maskrcnn_benchmark.trainer INFO: eta: 1:24:41  iter: 1100  loss: 0.8217 (1.1059)  loss_classifier: 0.2849 (0.4259)  loss_box_reg: 0.1448 (0.1584)  loss_mask: 0.3396 (0.4248)  loss_objectness: 0.0176 (0.0705)  loss_rpn_box_reg: 0.0074 (0.0263)  time: 0.1063 (0.1306)  data: 0.0014 (0.0212)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:18,211 maskrcnn_benchmark.trainer INFO: eta: 1:24:22  iter: 1120  loss: 0.7896 (1.1016)  loss_classifier: 0.2698 (0.4238)  loss_box_reg: 0.1313 (0.1580)  loss_mask: 0.3352 (0.4233)  loss_objectness: 0.0205 (0.0702)  loss_rpn_box_reg: 0.0119 (0.0263)  time: 0.1065 (0.1302)  data: 0.0014 (0.0208)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:20,364 maskrcnn_benchmark.trainer INFO: eta: 1:24:04  iter: 1140  loss: 0.7816 (1.0963)  loss_classifier: 0.2771 (0.4216)  loss_box_reg: 0.1300 (0.1576)  loss_mask: 0.3126 (0.4213)  loss_objectness: 0.0310 (0.0696)  loss_rpn_box_reg: 0.0122 (0.0262)  time: 0.1065 (0.1298)  data: 0.0014 (0.0205)  lr: 0.160000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:51:22,497 maskrcnn_benchmark.trainer INFO: eta: 1:23:45  iter: 1160  loss: 0.8444 (1.0926)  loss_classifier: 0.3040 (0.4196)  loss_box_reg: 0.1233 (0.1574)  loss_mask: 0.3035 (0.4196)  loss_objectness: 0.0366 (0.0695)  loss_rpn_box_reg: 0.0128 (0.0265)  time: 0.1060 (0.1294)  data: 0.0014 (0.0202)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:24,619 maskrcnn_benchmark.trainer INFO: eta: 1:23:28  iter: 1180  loss: 0.8162 (1.0886)  loss_classifier: 0.2707 (0.4179)  loss_box_reg: 0.1510 (0.1573)  loss_mask: 0.3114 (0.4179)  loss_objectness: 0.0259 (0.0691)  loss_rpn_box_reg: 0.0115 (0.0265)  time: 0.1055 (0.1290)  data: 0.0014 (0.0199)  lr: 0.160000  max mem: 5148
DONE (t=3.56s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:51:26,743 maskrcnn_benchmark.trainer INFO: eta: 1:23:10  iter: 1200  loss: 0.8781 (1.0859)  loss_classifier: 0.3094 (0.4166)  loss_box_reg: 0.1559 (0.1573)  loss_mask: 0.3358 (0.4166)  loss_objectness: 0.0329 (0.0688)  loss_rpn_box_reg: 0.0283 (0.0265)  time: 0.1060 (0.1286)  data: 0.0014 (0.0195)  lr: 0.160000  max mem: 5148
DONE (t=3.55s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.15254
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.29362
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.14254
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.05504
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.17230
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.22720
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.17868
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.29011
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.30633
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13284
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33739
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.42959
2020-06-23 16:51:28,876 maskrcnn_benchmark.trainer INFO: eta: 1:22:54  iter: 1220  loss: 0.8161 (1.0819)  loss_classifier: 0.2837 (0.4146)  loss_box_reg: 0.1365 (0.1571)  loss_mask: 0.3290 (0.4153)  loss_objectness: 0.0390 (0.0685)  loss_rpn_box_reg: 0.0133 (0.0264)  time: 0.1068 (0.1283)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:29,253 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.15197860675016722, segm mAP: 0.1525398500115933
:::MLLOG {"namespace": "", "time_ms": 1592956289253, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.15197860675016722, "SEGM": 0.1525398500115933}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592956289253, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 1}}
2020-06-23 16:51:31,302 maskrcnn_benchmark.trainer INFO: eta: 1:22:47  iter: 1240  loss: 0.8932 (1.0796)  loss_classifier: 0.3300 (0.4136)  loss_box_reg: 0.1464 (0.1570)  loss_mask: 0.3206 (0.4140)  loss_objectness: 0.0383 (0.0684)  loss_rpn_box_reg: 0.0195 (0.0266)  time: 0.1075 (0.1282)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:33,434 maskrcnn_benchmark.trainer INFO: eta: 1:22:31  iter: 1260  loss: 0.7807 (1.0757)  loss_classifier: 0.3047 (0.4120)  loss_box_reg: 0.1207 (0.1567)  loss_mask: 0.3307 (0.4127)  loss_objectness: 0.0281 (0.0678)  loss_rpn_box_reg: 0.0112 (0.0265)  time: 0.1060 (0.1278)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:35,572 maskrcnn_benchmark.trainer INFO: eta: 1:22:16  iter: 1280  loss: 0.9005 (1.0734)  loss_classifier: 0.3248 (0.4110)  loss_box_reg: 0.1418 (0.1566)  loss_mask: 0.3170 (0.4113)  loss_objectness: 0.0414 (0.0677)  loss_rpn_box_reg: 0.0219 (0.0266)  time: 0.1066 (0.1275)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:37,709 maskrcnn_benchmark.trainer INFO: eta: 1:22:01  iter: 1300  loss: 0.7396 (1.0691)  loss_classifier: 0.2684 (0.4091)  loss_box_reg: 0.1339 (0.1563)  loss_mask: 0.3275 (0.4101)  loss_objectness: 0.0247 (0.0671)  loss_rpn_box_reg: 0.0089 (0.0264)  time: 0.1062 (0.1272)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:39,851 maskrcnn_benchmark.trainer INFO: eta: 1:21:47  iter: 1320  loss: 0.9253 (1.0663)  loss_classifier: 0.3206 (0.4079)  loss_box_reg: 0.1586 (0.1564)  loss_mask: 0.3198 (0.4087)  loss_objectness: 0.0466 (0.0669)  loss_rpn_box_reg: 0.0115 (0.0263)  time: 0.1066 (0.1269)  data: 0.0015 (0.0179)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:41,981 maskrcnn_benchmark.trainer INFO: eta: 1:21:32  iter: 1340  loss: 0.8522 (1.0636)  loss_classifier: 0.3030 (0.4070)  loss_box_reg: 0.1415 (0.1564)  loss_mask: 0.3330 (0.4077)  loss_objectness: 0.0305 (0.0664)  loss_rpn_box_reg: 0.0106 (0.0262)  time: 0.1061 (0.1266)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:44,109 maskrcnn_benchmark.trainer INFO: eta: 1:21:18  iter: 1360  loss: 0.8251 (1.0612)  loss_classifier: 0.3655 (0.4065)  loss_box_reg: 0.1401 (0.1563)  loss_mask: 0.2994 (0.4063)  loss_objectness: 0.0303 (0.0660)  loss_rpn_box_reg: 0.0114 (0.0261)  time: 0.1067 (0.1263)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:46,271 maskrcnn_benchmark.trainer INFO: eta: 1:21:06  iter: 1380  loss: 0.8845 (1.0583)  loss_classifier: 0.3798 (0.4055)  loss_box_reg: 0.1419 (0.1562)  loss_mask: 0.3157 (0.4050)  loss_objectness: 0.0308 (0.0656)  loss_rpn_box_reg: 0.0102 (0.0260)  time: 0.1077 (0.1260)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:48,409 maskrcnn_benchmark.trainer INFO: eta: 1:20:53  iter: 1400  loss: 0.8095 (1.0551)  loss_classifier: 0.3183 (0.4043)  loss_box_reg: 0.1411 (0.1559)  loss_mask: 0.3229 (0.4038)  loss_objectness: 0.0383 (0.0652)  loss_rpn_box_reg: 0.0103 (0.0258)  time: 0.1064 (0.1257)  data: 0.0014 (0.0170)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:50,533 maskrcnn_benchmark.trainer INFO: eta: 1:20:39  iter: 1420  loss: 0.9046 (1.0532)  loss_classifier: 0.3120 (0.4031)  loss_box_reg: 0.1435 (0.1558)  loss_mask: 0.3234 (0.4029)  loss_objectness: 0.0472 (0.0654)  loss_rpn_box_reg: 0.0236 (0.0261)  time: 0.1056 (0.1255)  data: 0.0015 (0.0167)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:52,666 maskrcnn_benchmark.trainer INFO: eta: 1:20:27  iter: 1440  loss: 0.7960 (1.0498)  loss_classifier: 0.3088 (0.4018)  loss_box_reg: 0.1241 (0.1556)  loss_mask: 0.3046 (0.4015)  loss_objectness: 0.0263 (0.0649)  loss_rpn_box_reg: 0.0086 (0.0259)  time: 0.1057 (0.1252)  data: 0.0014 (0.0165)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:54,819 maskrcnn_benchmark.trainer INFO: eta: 1:20:15  iter: 1460  loss: 0.8292 (1.0474)  loss_classifier: 0.3107 (0.4008)  loss_box_reg: 0.1440 (0.1554)  loss_mask: 0.3215 (0.4005)  loss_objectness: 0.0266 (0.0647)  loss_rpn_box_reg: 0.0174 (0.0259)  time: 0.1075 (0.1250)  data: 0.0014 (0.0163)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:56,941 maskrcnn_benchmark.trainer INFO: eta: 1:20:03  iter: 1480  loss: 0.7053 (1.0435)  loss_classifier: 0.2576 (0.3992)  loss_box_reg: 0.1208 (0.1550)  loss_mask: 0.3106 (0.3994)  loss_objectness: 0.0204 (0.0642)  loss_rpn_box_reg: 0.0095 (0.0257)  time: 0.1061 (0.1247)  data: 0.0014 (0.0161)  lr: 0.160000  max mem: 5148
2020-06-23 16:51:59,080 maskrcnn_benchmark.trainer INFO: eta: 1:19:51  iter: 1500  loss: 0.7995 (1.0402)  loss_classifier: 0.3147 (0.3979)  loss_box_reg: 0.1211 (0.1548)  loss_mask: 0.2842 (0.3981)  loss_objectness: 0.0210 (0.0637)  loss_rpn_box_reg: 0.0138 (0.0256)  time: 0.1065 (0.1245)  data: 0.0013 (0.0159)  lr: 0.160000  max mem: 5148
2020-06-23 16:52:01,218 maskrcnn_benchmark.trainer INFO: eta: 1:19:40  iter: 1520  loss: 0.8260 (1.0377)  loss_classifier: 0.3301 (0.3968)  loss_box_reg: 0.1470 (0.1547)  loss_mask: 0.3292 (0.3973)  loss_objectness: 0.0299 (0.0634)  loss_rpn_box_reg: 0.0121 (0.0256)  time: 0.1068 (0.1242)  data: 0.0014 (0.0157)  lr: 0.160000  max mem: 5148
2020-06-23 16:52:03,353 maskrcnn_benchmark.trainer INFO: eta: 1:19:29  iter: 1540  loss: 0.8215 (1.0351)  loss_classifier: 0.2802 (0.3958)  loss_box_reg: 0.1300 (0.1545)  loss_mask: 0.3234 (0.3962)  loss_objectness: 0.0281 (0.0630)  loss_rpn_box_reg: 0.0196 (0.0256)  time: 0.1059 (0.1240)  data: 0.0014 (0.0155)  lr: 0.160000  max mem: 5148
2020-06-23 16:52:05,498 maskrcnn_benchmark.trainer INFO: eta: 1:19:18  iter: 1560  loss: 0.7653 (1.0321)  loss_classifier: 0.2853 (0.3946)  loss_box_reg: 0.1350 (0.1542)  loss_mask: 0.3015 (0.3953)  loss_objectness: 0.0240 (0.0626)  loss_rpn_box_reg: 0.0109 (0.0255)  time: 0.1067 (0.1238)  data: 0.0014 (0.0154)  lr: 0.160000  max mem: 5148
2020-06-23 16:52:07,635 maskrcnn_benchmark.trainer INFO: eta: 1:19:07  iter: 1580  loss: 0.6927 (1.0291)  loss_classifier: 0.2609 (0.3932)  loss_box_reg: 0.1002 (0.1538)  loss_mask: 0.3186 (0.3942)  loss_objectness: 0.0259 (0.0625)  loss_rpn_box_reg: 0.0109 (0.0254)  time: 0.1065 (0.1236)  data: 0.0013 (0.0152)  lr: 0.160000  max mem: 5148
2020-06-23 16:52:09,776 maskrcnn_benchmark.trainer INFO: eta: 1:18:57  iter: 1600  loss: 0.8642 (1.0269)  loss_classifier: 0.3179 (0.3922)  loss_box_reg: 0.1382 (0.1537)  loss_mask: 0.3243 (0.3933)  loss_objectness: 0.0322 (0.0622)  loss_rpn_box_reg: 0.0229 (0.0254)  time: 0.1066 (0.1234)  data: 0.0014 (0.0150)  lr: 0.160000  max mem: 5148
2020-06-23 16:52:11,927 maskrcnn_benchmark.trainer INFO: eta: 1:18:47  iter: 1620  loss: 0.7925 (1.0240)  loss_classifier: 0.2935 (0.3911)  loss_box_reg: 0.1275 (0.1534)  loss_mask: 0.3027 (0.3923)  loss_objectness: 0.0237 (0.0618)  loss_rpn_box_reg: 0.0078 (0.0253)  time: 0.1068 (0.1232)  data: 0.0014 (0.0149)  lr: 0.160000  max mem: 5148
2020-06-23 16:52:14,062 maskrcnn_benchmark.trainer INFO: eta: 1:18:37  iter: 1640  loss: 0.8150 (1.0207)  loss_classifier: 0.2760 (0.3896)  loss_box_reg: 0.1311 (0.1530)  loss_mask: 0.3190 (0.3915)  loss_objectness: 0.0255 (0.0614)  loss_rpn_box_reg: 0.0083 (0.0252)  time: 0.1065 (0.1230)  data: 0.0014 (0.0147)  lr: 0.160000  max mem: 5148
2020-06-23 16:52:16,202 maskrcnn_benchmark.trainer INFO: eta: 1:18:27  iter: 1660  loss: 0.8735 (1.0190)  loss_classifier: 0.3509 (0.3890)  loss_box_reg: 0.1551 (0.1531)  loss_mask: 0.3038 (0.3906)  loss_objectness: 0.0262 (0.0612)  loss_rpn_box_reg: 0.0120 (0.0251)  time: 0.1068 (0.1228)  data: 0.0014 (0.0145)  lr: 0.160000  max mem: 5148
2020-06-23 16:52:18,325 maskrcnn_benchmark.trainer INFO: eta: 1:18:17  iter: 1680  loss: 0.7956 (1.0167)  loss_classifier: 0.2863 (0.3881)  loss_box_reg: 0.1414 (0.1530)  loss_mask: 0.3009 (0.3896)  loss_objectness: 0.0259 (0.0609)  loss_rpn_box_reg: 0.0158 (0.0250)  time: 0.1056 (0.1226)  data: 0.0014 (0.0144)  lr: 0.160000  max mem: 5148
2020-06-23 16:52:20,458 maskrcnn_benchmark.trainer INFO: eta: 1:18:07  iter: 1700  loss: 0.8778 (1.0148)  loss_classifier: 0.3391 (0.3874)  loss_box_reg: 0.1483 (0.1529)  loss_mask: 0.3101 (0.3888)  loss_objectness: 0.0407 (0.0607)  loss_rpn_box_reg: 0.0150 (0.0250)  time: 0.1063 (0.1224)  data: 0.0014 (0.0142)  lr: 0.160000  max mem: 5148
2020-06-23 16:52:22,619 maskrcnn_benchmark.trainer INFO: eta: 1:17:58  iter: 1720  loss: 0.7603 (1.0126)  loss_classifier: 0.3092 (0.3868)  loss_box_reg: 0.1371 (0.1527)  loss_mask: 0.2887 (0.3877)  loss_objectness: 0.0281 (0.0604)  loss_rpn_box_reg: 0.0096 (0.0249)  time: 0.1079 (0.1222)  data: 0.0014 (0.0141)  lr: 0.160000  max mem: 5148
2020-06-23 16:52:24,756 maskrcnn_benchmark.trainer INFO: eta: 1:17:49  iter: 1740  loss: 0.8324 (1.0106)  loss_classifier: 0.2981 (0.3862)  loss_box_reg: 0.1398 (0.1527)  loss_mask: 0.2730 (0.3866)  loss_objectness: 0.0341 (0.0602)  loss_rpn_box_reg: 0.0139 (0.0249)  time: 0.1066 (0.1220)  data: 0.0015 (0.0139)  lr: 0.160000  max mem: 5148
2020-06-23 16:52:26,907 maskrcnn_benchmark.trainer INFO: eta: 1:17:40  iter: 1760  loss: 0.8535 (1.0083)  loss_classifier: 0.2915 (0.3851)  loss_box_reg: 0.1481 (0.1526)  loss_mask: 0.3256 (0.3859)  loss_objectness: 0.0308 (0.0600)  loss_rpn_box_reg: 0.0124 (0.0248)  time: 0.1076 (0.1219)  data: 0.0014 (0.0138)  lr: 0.160000  max mem: 5148
2020-06-23 16:52:29,045 maskrcnn_benchmark.trainer INFO: eta: 1:17:31  iter: 1780  loss: 0.7699 (1.0062)  loss_classifier: 0.2748 (0.3843)  loss_box_reg: 0.1375 (0.1525)  loss_mask: 0.3270 (0.3851)  loss_objectness: 0.0258 (0.0596)  loss_rpn_box_reg: 0.0116 (0.0247)  time: 0.1063 (0.1217)  data: 0.0014 (0.0136)  lr: 0.160000  max mem: 5148
2020-06-23 16:52:31,191 maskrcnn_benchmark.trainer INFO: eta: 1:17:23  iter: 1800  loss: 0.6889 (1.0033)  loss_classifier: 0.2487 (0.3831)  loss_box_reg: 0.1086 (0.1522)  loss_mask: 0.3189 (0.3842)  loss_objectness: 0.0205 (0.0592)  loss_rpn_box_reg: 0.0126 (0.0246)  time: 0.1069 (0.1216)  data: 0.0013 (0.0135)  lr: 0.160000  max mem: 5148
2020-06-23 16:52:33,344 maskrcnn_benchmark.trainer INFO: eta: 1:17:15  iter: 1820  loss: 0.8169 (1.0013)  loss_classifier: 0.3050 (0.3824)  loss_box_reg: 0.1483 (0.1520)  loss_mask: 0.3136 (0.3835)  loss_objectness: 0.0218 (0.0589)  loss_rpn_box_reg: 0.0054 (0.0245)  time: 0.1061 (0.1214)  data: 0.0014 (0.0134)  lr: 0.160000  max mem: 5148
:::MLLOG {"namespace": "", "time_ms": 1592956355414, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1592956355415, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1592956355415, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 2}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
2020-06-23 16:52:35,672 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.31s)
creating index...
Done (t=0.30s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.30s)
creating index...
index created!
index created!
index created!
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
Done (t=0.30s)
creating index...
index created!
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.30s)
creating index...
Done (t=0.30s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 16:52:36,004 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:07,  7.51it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.79it/s]
 35%|      | 28/79 [00:01<00:03, 14.14it/s]
 39%|      | 31/79 [00:01<00:02, 16.49it/s]
 43%|     | 34/79 [00:02<00:02, 18.52it/s]
 47%|     | 37/79 [00:02<00:02, 20.41it/s]
 51%|     | 40/79 [00:02<00:01, 21.75it/s]
 54%|    | 43/79 [00:02<00:01, 22.83it/s]
 58%|    | 46/79 [00:02<00:01, 23.81it/s]
 62%|   | 49/79 [00:02<00:01, 24.42it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.24it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.64it/s]
 28%|       | 22/79 [00:01<00:05,  9.70it/s]
 32%|      | 25/79 [00:01<00:04, 11.97it/s]
 35%|      | 28/79 [00:01<00:03, 14.28it/s]
 39%|      | 31/79 [00:01<00:02, 16.57it/s]
 43%|     | 34/79 [00:02<00:02, 18.43it/s]
 47%|     | 37/79 [00:02<00:02, 20.17it/s]
 51%|     | 40/79 [00:02<00:01, 21.64it/s]
 54%|    | 43/79 [00:02<00:01, 22.70it/s]
 58%|    | 46/79 [00:02<00:01, 23.68it/s]
 62%|   | 49/79 [00:02<00:01, 24.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.76it/s]
  9%|         | 7/79 [00:01<00:29,  2.45it/s]
 13%|        | 10/79 [00:01<00:20,  3.35it/s]
 16%|        | 13/79 [00:01<00:14,  4.52it/s]
 20%|        | 16/79 [00:01<00:10,  6.00it/s]
 24%|       | 19/79 [00:01<00:07,  7.79it/s]
 28%|       | 22/79 [00:01<00:05,  9.82it/s]
 32%|      | 25/79 [00:01<00:04, 12.02it/s]
 35%|      | 28/79 [00:01<00:03, 14.33it/s]
 39%|      | 31/79 [00:01<00:02, 16.53it/s]
 43%|     | 34/79 [00:02<00:02, 18.48it/s]
 47%|     | 37/79 [00:02<00:02, 19.94it/s]
 51%|     | 40/79 [00:02<00:01, 21.39it/s]
 54%|    | 43/79 [00:02<00:01, 22.40it/s]
 58%|    | 46/79 [00:02<00:01, 23.18it/s]
 62%|   | 49/79 [00:02<00:01, 23.90it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.27it/s]
  5%|         | 4/79 [00:00<00:42,  1.77it/s]
  9%|         | 7/79 [00:01<00:29,  2.46it/s]
 13%|        | 10/79 [00:01<00:20,  3.38it/s]
 16%|        | 13/79 [00:01<00:14,  4.57it/s]
 20%|        | 16/79 [00:01<00:10,  6.06it/s]
 24%|       | 19/79 [00:01<00:07,  7.86it/s]
 28%|       | 22/79 [00:01<00:05,  9.91it/s]
 32%|      | 25/79 [00:01<00:04, 12.14it/s]
 35%|      | 28/79 [00:01<00:03, 14.45it/s]
 39%|      | 31/79 [00:01<00:02, 16.70it/s]
 43%|     | 34/79 [00:02<00:02, 18.66it/s]
 47%|     | 37/79 [00:02<00:02, 20.18it/s]
 51%|     | 40/79 [00:02<00:01, 21.62it/s]
 54%|    | 43/79 [00:02<00:01, 22.62it/s]
 58%|    | 46/79 [00:02<00:01, 23.32it/s]
 62%|   | 49/79 [00:02<00:01, 23.99it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.36it/s]
 28%|       | 22/79 [00:01<00:06,  9.37it/s]
 32%|      | 25/79 [00:01<00:04, 11.63it/s]
 35%|      | 28/79 [00:01<00:03, 14.01it/s]
 39%|      | 31/79 [00:02<00:02, 16.23it/s]
 43%|     | 34/79 [00:02<00:02, 18.26it/s]
 47%|     | 37/79 [00:02<00:02, 19.97it/s]
 51%|     | 40/79 [00:02<00:01, 21.54it/s]
 54%|    | 43/79 [00:02<00:01, 22.84it/s]
 58%|    | 46/79 [00:02<00:01, 23.68it/s]
 62%|   | 49/79 [00:02<00:01, 24.47it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.51it/s]
 28%|       | 22/79 [00:01<00:05,  9.57it/s]
 32%|      | 25/79 [00:01<00:04, 11.81it/s]
 35%|      | 28/79 [00:01<00:03, 14.16it/s]
 39%|      | 31/79 [00:02<00:02, 16.44it/s]
 43%|     | 34/79 [00:02<00:02, 18.50it/s]
 47%|     | 37/79 [00:02<00:02, 20.18it/s]
 51%|     | 40/79 [00:02<00:01, 21.57it/s]
 54%|    | 43/79 [00:02<00:01, 22.80it/s]
 58%|    | 46/79 [00:02<00:01, 23.60it/s]
 62%|   | 49/79 [00:02<00:01, 24.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.74it/s]
  9%|         | 7/79 [00:01<00:29,  2.41it/s]
 13%|        | 10/79 [00:01<00:20,  3.31it/s]
 16%|        | 13/79 [00:01<00:14,  4.47it/s]
 20%|        | 16/79 [00:01<00:10,  5.94it/s]
 24%|       | 19/79 [00:01<00:07,  7.70it/s]
 28%|       | 22/79 [00:01<00:05,  9.75it/s]
 32%|      | 25/79 [00:01<00:04, 11.95it/s]
 35%|      | 28/79 [00:01<00:03, 14.00it/s]
 39%|      | 31/79 [00:02<00:02, 16.08it/s]
 43%|     | 34/79 [00:02<00:02, 18.11it/s]
 47%|     | 37/79 [00:02<00:02, 19.81it/s]
 51%|     | 40/79 [00:02<00:01, 21.01it/s]
 54%|    | 43/79 [00:02<00:01, 22.10it/s]
 58%|    | 46/79 [00:02<00:01, 23.28it/s]
 62%|   | 49/79 [00:02<00:01, 24.21it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.23it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.37it/s]
 32%|      | 25/79 [00:01<00:04, 11.59it/s]
 35%|      | 28/79 [00:01<00:03, 13.87it/s]
 39%|      | 31/79 [00:02<00:02, 16.14it/s]
 43%|     | 34/79 [00:02<00:02, 18.07it/s]
 47%|     | 37/79 [00:02<00:02, 19.91it/s]
 51%|     | 40/79 [00:02<00:01, 21.16it/s]
 54%|    | 43/79 [00:02<00:01, 22.50it/s]
 58%|    | 46/79 [00:02<00:01, 23.40it/s]
 62%|   | 49/79 [00:02<00:01, 24.08it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.83it/s]
 24%|       | 19/79 [00:01<00:07,  7.60it/s]
 28%|       | 22/79 [00:01<00:05,  9.60it/s]
 32%|      | 25/79 [00:01<00:04, 11.79it/s]
 35%|      | 28/79 [00:01<00:03, 14.02it/s]
 39%|      | 31/79 [00:02<00:02, 16.22it/s]
 43%|     | 34/79 [00:02<00:02, 18.24it/s]
 47%|     | 37/79 [00:02<00:02, 19.85it/s]
 51%|     | 40/79 [00:02<00:01, 20.92it/s]
 54%|    | 43/79 [00:02<00:01, 22.04it/s]
 58%|    | 46/79 [00:02<00:01, 22.84it/s]
 62%|   | 49/79 [00:02<00:01, 23.22it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.35it/s]
 32%|      | 25/79 [00:01<00:04, 11.57it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:02, 16.03it/s]
 43%|     | 34/79 [00:02<00:02, 17.98it/s]
 47%|     | 37/79 [00:02<00:02, 19.70it/s]
 51%|     | 40/79 [00:02<00:01, 21.23it/s]
 54%|    | 43/79 [00:02<00:01, 22.29it/s]
 58%|    | 46/79 [00:02<00:01, 23.20it/s]
 62%|   | 49/79 [00:02<00:01, 23.92it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.58it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:03, 15.97it/s]
 43%|     | 34/79 [00:02<00:02, 17.96it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 21.02it/s]
 54%|    | 43/79 [00:02<00:01, 22.07it/s]
 58%|    | 46/79 [00:02<00:01, 22.96it/s]
 62%|   | 49/79 [00:02<00:01, 23.83it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.34it/s]
 28%|       | 22/79 [00:01<00:06,  9.34it/s]
 32%|      | 25/79 [00:01<00:04, 11.51it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:03, 15.97it/s]
 43%|     | 34/79 [00:02<00:02, 17.96it/s]
 47%|     | 37/79 [00:02<00:02, 19.60it/s]
 51%|     | 40/79 [00:02<00:01, 21.16it/s]
 54%|    | 43/79 [00:02<00:01, 22.28it/s]
 58%|    | 46/79 [00:02<00:01, 23.16it/s]
 62%|   | 49/79 [00:02<00:01, 23.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.13it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.25it/s]
 28%|       | 22/79 [00:01<00:06,  9.22it/s]
 32%|      | 25/79 [00:01<00:04, 11.42it/s]
 35%|      | 28/79 [00:01<00:03, 13.77it/s]
 39%|      | 31/79 [00:02<00:02, 16.10it/s]
 43%|     | 34/79 [00:02<00:02, 18.09it/s]
 47%|     | 37/79 [00:02<00:02, 19.85it/s]
 51%|     | 40/79 [00:02<00:01, 21.43it/s]
 54%|    | 43/79 [00:02<00:01, 22.54it/s]
 58%|    | 46/79 [00:02<00:01, 23.35it/s]
 62%|   | 49/79 [00:02<00:01, 24.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.36it/s]
 24%|       | 19/79 [00:01<00:08,  7.02it/s]
 28%|       | 22/79 [00:01<00:06,  9.01it/s]
 32%|      | 25/79 [00:01<00:04, 11.21it/s]
 35%|      | 28/79 [00:01<00:03, 13.52it/s]
 39%|      | 31/79 [00:02<00:03, 15.76it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.76it/s]
 51%|     | 40/79 [00:02<00:01, 21.23it/s]
 54%|    | 43/79 [00:02<00:01, 22.63it/s]
 58%|    | 46/79 [00:02<00:01, 23.42it/s]
 62%|   | 49/79 [00:02<00:01, 23.89it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.72it/s]
 39%|      | 31/79 [00:02<00:02, 16.00it/s]
 43%|     | 34/79 [00:02<00:02, 17.94it/s]
 47%|     | 37/79 [00:02<00:02, 19.82it/s]
 51%|     | 40/79 [00:02<00:01, 21.01it/s]
 54%|    | 43/79 [00:02<00:01, 22.10it/s]
 58%|    | 46/79 [00:02<00:01, 22.76it/s]
 62%|   | 49/79 [00:02<00:01, 23.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.05it/s]
 32%|      | 25/79 [00:01<00:04, 11.23it/s]
 35%|      | 28/79 [00:01<00:03, 13.47it/s]
 39%|      | 31/79 [00:02<00:03, 15.71it/s]
 43%|     | 34/79 [00:02<00:02, 17.63it/s]
 47%|     | 37/79 [00:02<00:02, 19.42it/s]
 51%|     | 40/79 [00:02<00:01, 20.64it/s]
 54%|    | 43/79 [00:02<00:01, 21.86it/s]
 58%|    | 46/79 [00:02<00:01, 22.73it/s]
 62%|   | 49/79 [00:02<00:01, 23.70it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.05it/s]
 32%|      | 25/79 [00:01<00:04, 11.25it/s]
 35%|      | 28/79 [00:01<00:03, 13.53it/s]
 39%|      | 31/79 [00:02<00:03, 15.88it/s]
 43%|     | 34/79 [00:02<00:02, 17.94it/s]
 47%|     | 37/79 [00:02<00:02, 19.83it/s]
 51%|     | 40/79 [00:02<00:01, 21.16it/s]
 54%|    | 43/79 [00:02<00:01, 22.44it/s]
 58%|    | 46/79 [00:02<00:01, 23.37it/s]
 62%|   | 49/79 [00:02<00:01, 24.01it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  4%|         | 3/79 [00:00<00:47,  1.60it/s]
  8%|         | 6/79 [00:01<00:32,  2.21it/s]
 11%|        | 9/79 [00:01<00:22,  3.05it/s]
 15%|        | 12/79 [00:01<00:16,  4.15it/s]
 19%|        | 15/79 [00:01<00:11,  5.53it/s]
 23%|       | 18/79 [00:01<00:08,  7.21it/s]
 27%|       | 21/79 [00:01<00:06,  9.15it/s]
 30%|       | 24/79 [00:01<00:04, 11.31it/s]
 34%|      | 27/79 [00:01<00:03, 13.61it/s]
 38%|      | 30/79 [00:02<00:03, 15.77it/s]
 42%|     | 33/79 [00:02<00:02, 17.80it/s]
 46%|     | 36/79 [00:02<00:02, 19.57it/s]
 49%|     | 39/79 [00:02<00:01, 21.09it/s]
 53%|    | 42/79 [00:02<00:01, 22.26it/s]
 57%|    | 45/79 [00:02<00:01, 23.06it/s]
 61%|    | 48/79 [00:02<00:01, 23.94it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.49it/s]
 35%|      | 28/79 [00:01<00:03, 13.76it/s]
 39%|      | 31/79 [00:02<00:03, 15.80it/s]
 43%|     | 34/79 [00:02<00:02, 17.59it/s]
 47%|     | 37/79 [00:02<00:02, 19.21it/s]
 51%|     | 40/79 [00:02<00:01, 20.62it/s]
 54%|    | 43/79 [00:02<00:01, 21.76it/s]
 58%|    | 46/79 [00:02<00:01, 22.75it/s]
 62%|   | 49/79 [00:02<00:01, 22.91it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  6.97it/s]
 28%|       | 22/79 [00:01<00:06,  8.92it/s]
 32%|      | 25/79 [00:01<00:04, 11.07it/s]
 35%|      | 28/79 [00:01<00:03, 13.35it/s]
 39%|      | 31/79 [00:02<00:03, 15.43it/s]
 43%|     | 34/79 [00:02<00:02, 17.44it/s]
 47%|     | 37/79 [00:02<00:02, 19.26it/s]
 51%|     | 40/79 [00:02<00:01, 20.62it/s]
 54%|    | 43/79 [00:02<00:01, 21.73it/s]
 58%|    | 46/79 [00:02<00:01, 22.57it/s]
 62%|   | 49/79 [00:02<00:01, 23.35it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  3.99it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  6.99it/s]
 28%|       | 22/79 [00:01<00:06,  8.92it/s]
 32%|      | 25/79 [00:01<00:04, 11.08it/s]
 35%|      | 28/79 [00:01<00:03, 13.38it/s]
 39%|      | 31/79 [00:02<00:03, 15.63it/s]
 43%|     | 34/79 [00:02<00:02, 17.76it/s]
 47%|     | 37/79 [00:02<00:02, 19.44it/s]
 51%|     | 40/79 [00:02<00:01, 20.97it/s]
 54%|    | 43/79 [00:02<00:01, 22.06it/s]
 58%|    | 46/79 [00:02<00:01, 23.25it/s]
 62%|   | 49/79 [00:02<00:01, 23.68it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.07it/s]
 28%|       | 22/79 [00:01<00:06,  9.02it/s]
 32%|      | 25/79 [00:01<00:04, 11.20it/s]
 35%|      | 28/79 [00:01<00:03, 13.51it/s]
 39%|      | 31/79 [00:02<00:03, 15.59it/s]
 43%|     | 34/79 [00:02<00:02, 17.63it/s]
 47%|     | 37/79 [00:02<00:02, 19.39it/s]
 51%|     | 40/79 [00:02<00:01, 20.85it/s]
 54%|    | 43/79 [00:02<00:01, 21.98it/s]
 58%|    | 46/79 [00:02<00:01, 23.14it/s]
 62%|   | 49/79 [00:02<00:01, 23.86it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  4%|         | 3/79 [00:01<00:49,  1.55it/s]
  8%|         | 6/79 [00:01<00:33,  2.15it/s]
 11%|        | 9/79 [00:01<00:23,  2.97it/s]
 15%|        | 12/79 [00:01<00:16,  4.03it/s]
 19%|        | 15/79 [00:01<00:11,  5.40it/s]
 23%|       | 18/79 [00:01<00:08,  7.05it/s]
 27%|       | 21/79 [00:01<00:06,  8.95it/s]
 30%|       | 24/79 [00:01<00:05, 10.98it/s]
 34%|      | 27/79 [00:01<00:03, 13.20it/s]
 38%|      | 30/79 [00:02<00:03, 15.42it/s]
 42%|     | 33/79 [00:02<00:02, 17.38it/s]
 46%|     | 36/79 [00:02<00:02, 19.18it/s]
 49%|     | 39/79 [00:02<00:01, 20.61it/s]
 53%|    | 42/79 [00:02<00:01, 21.66it/s]
 57%|    | 45/79 [00:02<00:01, 22.48it/s]
 61%|    | 48/79 [00:02<00:01, 22.83it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  9.00it/s]
 32%|      | 25/79 [00:01<00:04, 11.17it/s]
 35%|      | 28/79 [00:01<00:03, 13.33it/s]
 39%|      | 31/79 [00:02<00:03, 15.47it/s]
 43%|     | 34/79 [00:02<00:02, 17.46it/s]
 47%|     | 37/79 [00:02<00:02, 19.26it/s]
 51%|     | 40/79 [00:02<00:01, 20.57it/s]
 54%|    | 43/79 [00:02<00:01, 21.69it/s]
 58%|    | 46/79 [00:02<00:01, 22.51it/s]
 62%|   | 49/79 [00:02<00:01, 22.74it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  6.99it/s]
 28%|       | 22/79 [00:01<00:06,  8.94it/s]
 32%|      | 25/79 [00:01<00:04, 11.02it/s]
 35%|      | 28/79 [00:02<00:03, 13.22it/s]
 39%|      | 31/79 [00:02<00:03, 15.41it/s]
 43%|     | 34/79 [00:02<00:02, 17.42it/s]
 47%|     | 37/79 [00:02<00:02, 19.24it/s]
 51%|     | 40/79 [00:02<00:01, 20.73it/s]
 54%|    | 43/79 [00:02<00:01, 21.82it/s]
 58%|    | 46/79 [00:02<00:01, 22.72it/s]
 62%|   | 49/79 [00:02<00:01, 23.47it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.08it/s]
 28%|       | 22/79 [00:01<00:06,  9.03it/s]
 32%|      | 25/79 [00:01<00:04, 11.14it/s]
 35%|      | 28/79 [00:01<00:03, 13.41it/s]
 39%|      | 31/79 [00:02<00:03, 15.52it/s]
 43%|     | 34/79 [00:02<00:02, 17.48it/s]
 47%|     | 37/79 [00:02<00:02, 19.34it/s]
 51%|     | 40/79 [00:02<00:01, 20.58it/s]
 54%|    | 43/79 [00:02<00:01, 21.65it/s]
 58%|    | 46/79 [00:02<00:01, 22.74it/s]
 62%|   | 49/79 [00:02<00:01, 23.57it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.03it/s]
 32%|      | 25/79 [00:01<00:04, 11.15it/s]
 35%|      | 28/79 [00:01<00:03, 13.33it/s]
 39%|      | 31/79 [00:02<00:03, 15.56it/s]
 43%|     | 34/79 [00:02<00:02, 17.50it/s]
 47%|     | 37/79 [00:02<00:02, 19.16it/s]
 51%|     | 40/79 [00:02<00:01, 20.49it/s]
 54%|    | 43/79 [00:02<00:01, 21.49it/s]
 58%|    | 46/79 [00:02<00:01, 22.40it/s]
 62%|   | 49/79 [00:02<00:01, 22.64it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  3.99it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.94it/s]
 32%|      | 25/79 [00:01<00:04, 11.12it/s]
 35%|      | 28/79 [00:01<00:03, 13.34it/s]
 39%|      | 31/79 [00:02<00:03, 15.56it/s]
 43%|     | 34/79 [00:02<00:02, 17.38it/s]
 47%|     | 37/79 [00:02<00:02, 19.05it/s]
 51%|     | 40/79 [00:02<00:01, 20.42it/s]
 54%|    | 43/79 [00:02<00:01, 21.39it/s]
 58%|    | 46/79 [00:02<00:01, 22.50it/s]
 62%|   | 49/79 [00:02<00:01, 22.92it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  7.01it/s]
 28%|       | 22/79 [00:01<00:06,  8.86it/s]
 32%|      | 25/79 [00:01<00:04, 11.00it/s]
 35%|      | 28/79 [00:02<00:03, 13.18it/s]
 39%|      | 31/79 [00:02<00:03, 15.29it/s]
 43%|     | 34/79 [00:02<00:02, 17.26it/s]
 47%|     | 37/79 [00:02<00:02, 18.79it/s]
 51%|     | 40/79 [00:02<00:01, 20.31it/s]
 54%|    | 43/79 [00:02<00:01, 21.18it/s]
 58%|    | 46/79 [00:02<00:01, 22.11it/s]
 62%|   | 49/79 [00:02<00:01, 22.78it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.06it/s]
 28%|       | 22/79 [00:01<00:06,  8.99it/s]
 32%|      | 25/79 [00:01<00:04, 11.13it/s]
 35%|      | 28/79 [00:02<00:03, 13.29it/s]
 39%|      | 31/79 [00:02<00:03, 15.31it/s]
 43%|     | 34/79 [00:02<00:02, 17.15it/s]
 47%|     | 37/79 [00:02<00:02, 18.78it/s]
 51%|     | 40/79 [00:02<00:01, 20.15it/s]
 54%|    | 43/79 [00:02<00:01, 21.26it/s]
 58%|    | 46/79 [00:02<00:01, 22.04it/s]
 62%|   | 49/79 [00:02<00:01, 22.63it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.00it/s]
 13%|        | 10/79 [00:01<00:24,  2.76it/s]
 16%|        | 13/79 [00:01<00:17,  3.77it/s]
 20%|        | 16/79 [00:01<00:12,  5.06it/s]
 24%|       | 19/79 [00:01<00:09,  6.63it/s]
 28%|       | 22/79 [00:01<00:06,  8.46it/s]
 32%|      | 25/79 [00:01<00:05, 10.60it/s]
 35%|      | 28/79 [00:02<00:04, 12.75it/s]
 39%|      | 31/79 [00:02<00:03, 14.93it/s]
 43%|     | 34/79 [00:02<00:02, 17.00it/s]
 47%|     | 37/79 [00:02<00:02, 18.65it/s]
 51%|     | 40/79 [00:02<00:01, 20.16it/s]
 54%|    | 43/79 [00:02<00:01, 21.19it/s]
 58%|    | 46/79 [00:02<00:01, 22.25it/s]
 62%|   | 49/79 [00:02<00:01, 23.00it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.43it/s]
  9%|         | 7/79 [00:01<00:36,  2.00it/s]
 13%|        | 10/79 [00:01<00:25,  2.75it/s]
 16%|        | 13/79 [00:01<00:17,  3.75it/s]
 20%|        | 16/79 [00:01<00:12,  5.04it/s]
 24%|       | 19/79 [00:01<00:09,  6.59it/s]
 28%|       | 22/79 [00:01<00:06,  8.46it/s]
 32%|      | 25/79 [00:01<00:05, 10.51it/s]
 35%|      | 28/79 [00:02<00:04, 12.66it/s]
 39%|      | 31/79 [00:02<00:03, 14.78it/s]
 43%|     | 34/79 [00:02<00:02, 16.74it/s]
 47%|     | 37/79 [00:02<00:02, 18.49it/s]
 51%|     | 40/79 [00:02<00:01, 19.73it/s]
 54%|    | 43/79 [00:02<00:01, 20.82it/s]
 58%|    | 46/79 [00:02<00:01, 21.90it/s]
 62%|   | 49/79 [00:02<00:01, 22.63it/s]
 66%|   | 52/79 [00:03<00:01, 24.65it/s]
 70%|   | 55/79 [00:02<00:00, 25.30it/s]
 73%|  | 58/79 [00:03<00:00, 25.46it/s]
 77%|  | 61/79 [00:03<00:00, 25.91it/s]
 81%|  | 64/79 [00:03<00:00, 25.93it/s]
 85%| | 67/79 [00:03<00:00, 26.01it/s]
 89%| | 70/79 [00:03<00:00, 25.95it/s]
 92%|| 73/79 [00:03<00:00, 26.27it/s]
 96%|| 76/79 [00:03<00:00, 26.75it/s]
100%|| 79/79 [00:03<00:00, 27.56it/s]
, 24.83it/s]
 70%|   | 55/79 [00:02<00:00, 25.03it/s]
 73%|  | 58/79 [00:03<00:00, 25.15it/s]
 77%|  | 61/79 [00:03<00:00, 25.39it/s]
 81%|  | 64/79 [00:03<00:00, 25.45it/s]
 85%| | 67/79 [00:03<00:00, 25.47it/s]
 89%| | 70/79 [00:03<00:00, 25.44it/s]
 92%|| 73/79 [00:03<00:00, 25.73it/s]
 96%|| 76/79 [00:03<00:00, 26.27it/s]
100%|| 79/79 [00:03<00:00, 27.15it/s]
, 24.49it/s]
 70%|   | 55/79 [00:02<00:00, 25.03it/s]
 73%|  | 58/79 [00:03<00:00, 25.25it/s]
 77%|  | 61/79 [00:03<00:00, 25.39it/s]
 81%|  | 64/79 [00:03<00:00, 25.36it/s]
 85%| | 67/79 [00:03<00:00, 25.40it/s]
 89%| | 70/79 [00:03<00:00, 25.43it/s]
 92%|| 73/79 [00:03<00:00, 25.85it/s]
 96%|| 76/79 [00:03<00:00, 26.44it/s]
100%|| 79/79 [00:03<00:00, 20.40it/s]
, 24.78it/s]
 70%|   | 55/79 [00:02<00:00, 24.91it/s]
 73%|  | 58/79 [00:03<00:00, 25.15it/s]
 77%|  | 61/79 [00:03<00:00, 25.16it/s]
 81%|  | 64/79 [00:03<00:00, 25.32it/s]
 85%| | 67/79 [00:03<00:00, 25.45it/s]
 89%| | 70/79 [00:03<00:00, 25.57it/s]
 92%|| 73/79 [00:03<00:00, 25.60it/s]
 96%|| 76/79 [00:03<00:00, 26.33it/s]
100%|| 79/79 [00:03<00:00, 27.10it/s]
, 24.46it/s]
 70%|   | 55/79 [00:02<00:00, 24.64it/s]
 73%|  | 58/79 [00:03<00:00, 25.06it/s]
 77%|  | 61/79 [00:03<00:00, 25.35it/s]
 81%|  | 64/79 [00:03<00:00, 25.31it/s]
 85%| | 67/79 [00:03<00:00, 25.70it/s]
 89%| | 70/79 [00:03<00:00, 25.15it/s]
 92%|| 73/79 [00:03<00:00, 25.54it/s]
 96%|| 76/79 [00:03<00:00, 26.18it/s]
100%|| 79/79 [00:03<00:00, 27.13it/s]
, 24.24it/s]
 70%|   | 55/79 [00:02<00:00, 24.64it/s]
 73%|  | 58/79 [00:03<00:00, 25.21it/s]
 77%|  | 61/79 [00:03<00:00, 25.23it/s]
 81%|  | 64/79 [00:03<00:00, 25.17it/s]
 85%| | 67/79 [00:03<00:00, 25.28it/s]
 89%| | 70/79 [00:03<00:00, 25.39it/s]
 92%|| 73/79 [00:03<00:00, 25.95it/s]
 96%|| 76/79 [00:03<00:00, 26.51it/s]
100%|| 79/79 [00:03<00:00, 27.44it/s]
, 24.51it/s]
 70%|   | 55/79 [00:02<00:00, 24.64it/s]
 73%|  | 58/79 [00:03<00:00, 24.91it/s]
 77%|  | 61/79 [00:03<00:00, 25.01it/s]
 81%|  | 64/79 [00:03<00:00, 25.36it/s]
 85%| | 67/79 [00:03<00:00, 25.47it/s]
 89%| | 70/79 [00:03<00:00, 25.54it/s]
 92%|| 73/79 [00:03<00:00, 26.02it/s]
 96%|| 76/79 [00:03<00:00, 26.34it/s]
100%|| 79/79 [00:03<00:00, 26.82it/s]
, 24.58it/s]
 70%|   | 55/79 [00:02<00:00, 24.93it/s]
 73%|  | 58/79 [00:03<00:00, 25.12it/s]
 77%|  | 61/79 [00:03<00:00, 25.07it/s]
 81%|  | 64/79 [00:03<00:00, 24.93it/s]
 85%| | 67/79 [00:03<00:00, 25.17it/s]
 89%| | 70/79 [00:03<00:00, 25.14it/s]
 92%|| 73/79 [00:03<00:00, 25.63it/s]
 96%|| 76/79 [00:03<00:00, 26.07it/s]
100%|| 79/79 [00:03<00:00, 27.08it/s]
, 24.33it/s]
 70%|   | 55/79 [00:02<00:00, 24.59it/s]
 73%|  | 58/79 [00:03<00:00, 24.75it/s]
 77%|  | 61/79 [00:03<00:00, 24.85it/s]
 81%|  | 64/79 [00:03<00:00, 24.70it/s]
 85%| | 67/79 [00:03<00:00, 24.57it/s]
 89%| | 70/79 [00:03<00:00, 24.49it/s]
 92%|| 73/79 [00:03<00:00, 25.16it/s]
 96%|| 76/79 [00:03<00:00, 25.69it/s]
100%|| 79/79 [00:03<00:00, 26.70it/s]
, 24.45it/s]
 70%|   | 55/79 [00:03<00:00, 24.84it/s]
 73%|  | 58/79 [00:03<00:00, 25.30it/s]
 77%|  | 61/79 [00:03<00:00, 25.63it/s]
 81%|  | 64/79 [00:03<00:00, 25.58it/s]
 85%| | 67/79 [00:03<00:00, 25.79it/s]
 89%| | 70/79 [00:03<00:00, 26.05it/s]
 92%|| 73/79 [00:03<00:00, 26.28it/s]
 96%|| 76/79 [00:03<00:00, 27.25it/s]
100%|| 79/79 [00:03<00:00, 27.50it/s]
, 24.59it/s]
 70%|   | 55/79 [00:02<00:00, 24.81it/s]
 73%|  | 58/79 [00:03<00:00, 25.19it/s]
 77%|  | 61/79 [00:03<00:00, 25.21it/s]
 81%|  | 64/79 [00:03<00:00, 25.45it/s]
 85%| | 67/79 [00:03<00:00, 25.85it/s]
 89%| | 70/79 [00:03<00:00, 26.00it/s]
 92%|| 73/79 [00:03<00:00, 26.02it/s]
 96%|| 76/79 [00:03<00:00, 26.49it/s]
100%|| 79/79 [00:03<00:00, 27.23it/s]
, 24.63it/s]
 70%|   | 55/79 [00:03<00:00, 25.06it/s]
 73%|  | 58/79 [00:03<00:00, 25.18it/s]
 77%|  | 61/79 [00:03<00:00, 25.52it/s]
 81%|  | 64/79 [00:03<00:00, 25.61it/s]
 85%| | 67/79 [00:03<00:00, 25.86it/s]
 89%| | 70/79 [00:03<00:00, 25.89it/s]
 92%|| 73/79 [00:03<00:00, 26.20it/s]
 96%|| 76/79 [00:03<00:00, 26.52it/s]
100%|| 79/79 [00:03<00:00, 27.37it/s]
, 24.10it/s]
 70%|   | 55/79 [00:02<00:00, 24.69it/s]
 73%|  | 58/79 [00:03<00:00, 25.12it/s]
 77%|  | 61/79 [00:03<00:00, 25.23it/s]
 81%|  | 64/79 [00:03<00:00, 24.77it/s]
 85%| | 67/79 [00:03<00:00, 25.14it/s]
 89%| | 70/79 [00:03<00:00, 25.16it/s]
 92%|| 73/79 [00:03<00:00, 25.10it/s]
 96%|| 76/79 [00:03<00:00, 25.73it/s]
100%|| 79/79 [00:03<00:00, 26.59it/s]
, 23.53it/s]
 70%|   | 55/79 [00:03<00:01, 23.90it/s]
 73%|  | 58/79 [00:03<00:00, 24.20it/s]
 77%|  | 61/79 [00:03<00:00, 24.28it/s]
 81%|  | 64/79 [00:03<00:00, 24.63it/s]
 85%| | 67/79 [00:03<00:00, 24.79it/s]
 89%| | 70/79 [00:03<00:00, 24.82it/s]
 92%|| 73/79 [00:03<00:00, 25.16it/s]
 96%|| 76/79 [00:03<00:00, 25.82it/s]
100%|| 79/79 [00:03<00:00, 26.79it/s]
, 24.53it/s]
 70%|   | 55/79 [00:03<00:00, 24.51it/s]
 73%|  | 58/79 [00:03<00:00, 25.05it/s]
 77%|  | 61/79 [00:03<00:00, 25.12it/s]
 81%|  | 64/79 [00:03<00:00, 25.46it/s]
 85%| | 67/79 [00:03<00:00, 25.46it/s]
 89%| | 70/79 [00:03<00:00, 25.39it/s]
 92%|| 73/79 [00:03<00:00, 25.57it/s]
 96%|| 76/79 [00:03<00:00, 26.15it/s]
100%|| 79/79 [00:03<00:00, 26.87it/s]
, 23.92it/s]
 70%|   | 55/79 [00:03<00:00, 24.57it/s]
 73%|  | 58/79 [00:03<00:00, 24.67it/s]
 77%|  | 61/79 [00:03<00:00, 24.81it/s]
 81%|  | 64/79 [00:03<00:00, 25.02it/s]
 85%| | 67/79 [00:03<00:00, 25.08it/s]
 89%| | 70/79 [00:03<00:00, 25.15it/s]
 92%|| 73/79 [00:03<00:00, 25.72it/s]
 96%|| 76/79 [00:03<00:00, 26.37it/s]
100%|| 79/79 [00:03<00:00, 27.31it/s]
, 24.13it/s]
 70%|   | 55/79 [00:02<00:00, 24.50it/s]
 73%|  | 58/79 [00:03<00:00, 25.09it/s]
 77%|  | 61/79 [00:03<00:00, 24.75it/s]
 81%|  | 64/79 [00:03<00:00, 24.80it/s]
 85%| | 67/79 [00:03<00:00, 24.83it/s]
 89%| | 70/79 [00:03<00:00, 24.94it/s]
 92%|| 73/79 [00:03<00:00, 25.29it/s]
 96%|| 76/79 [00:03<00:00, 25.80it/s]
100%|| 79/79 [00:03<00:00, 26.72it/s]
, 24.40it/s]
 70%|   | 55/79 [00:03<00:00, 24.92it/s]
 73%|  | 58/79 [00:03<00:00, 24.99it/s]
 77%|  | 61/79 [00:03<00:00, 25.20it/s]
 81%|  | 64/79 [00:03<00:00, 25.29it/s]
 85%| | 67/79 [00:03<00:00, 25.55it/s]
 89%| | 70/79 [00:03<00:00, 25.58it/s]
 92%|| 73/79 [00:03<00:00, 25.64it/s]
 96%|| 76/79 [00:03<00:00, 26.48it/s]
100%|| 79/79 [00:03<00:00, 26.67it/s]
, 24.07it/s]
 70%|   | 55/79 [00:03<00:00, 24.44it/s]
 73%|  | 58/79 [00:03<00:00, 24.75it/s]
 77%|  | 61/79 [00:03<00:00, 25.12it/s]
 81%|  | 64/79 [00:03<00:00, 25.48it/s]
 85%| | 67/79 [00:03<00:00, 25.21it/s]
 89%| | 70/79 [00:03<00:00, 25.19it/s]
 92%|| 73/79 [00:03<00:00, 25.59it/s]
 96%|| 76/79 [00:03<00:00, 26.27it/s]
100%|| 79/79 [00:03<00:00, 27.04it/s]
, 23.24it/s]
 70%|   | 55/79 [00:03<00:01, 23.51it/s]
 73%|  | 58/79 [00:03<00:00, 23.78it/s]
 77%|  | 61/79 [00:03<00:00, 24.03it/s]
 81%|  | 64/79 [00:03<00:00, 24.12it/s]
 85%| | 67/79 [00:03<00:00, 24.54it/s]
 89%| | 70/79 [00:03<00:00, 24.90it/s]
 92%|| 73/79 [00:03<00:00, 25.39it/s]
 96%|| 76/79 [00:03<00:00, 26.18it/s]
100%|| 79/79 [00:04<00:00, 19.45it/s]
, 24.26it/s]
 70%|   | 55/79 [00:03<00:00, 24.50it/s]
 73%|  | 58/79 [00:03<00:00, 24.53it/s]
 77%|  | 61/79 [00:03<00:00, 24.98it/s]
 81%|  | 64/79 [00:03<00:00, 25.02it/s]
 85%| | 67/79 [00:03<00:00, 25.09it/s]
 89%| | 70/79 [00:03<00:00, 25.17it/s]
 92%|| 73/79 [00:03<00:00, 25.44it/s]
 96%|| 76/79 [00:03<00:00, 26.20it/s]
100%|| 79/79 [00:03<00:00, 27.16it/s]
01it/s]
 68%|   | 54/79 [00:03<00:01, 24.40it/s]
 72%|  | 57/79 [00:03<00:00, 24.75it/s]
 76%|  | 60/79 [00:03<00:00, 24.85it/s]
 80%|  | 63/79 [00:03<00:00, 24.78it/s]
 84%| | 66/79 [00:03<00:00, 25.02it/s]
 87%| | 69/79 [00:03<00:00, 25.06it/s]
 91%| | 72/79 [00:03<00:00, 25.23it/s]
 95%|| 75/79 [00:03<00:00, 25.87it/s]
 99%|| 78/79 [00:03<00:00, 26.24it/s]
100%|| 79/79 [00:04<00:00, 19.62it/s]
, 24.04it/s]
 70%|   | 55/79 [00:03<00:00, 24.51it/s]
 73%|  | 58/79 [00:03<00:00, 24.81it/s]
 77%|  | 61/79 [00:03<00:00, 24.94it/s]
 81%|  | 64/79 [00:03<00:00, 25.07it/s]
 85%| | 67/79 [00:03<00:00, 25.37it/s]
 89%| | 70/79 [00:03<00:00, 25.67it/s]
 92%|| 73/79 [00:03<00:00, 25.75it/s]
 96%|| 76/79 [00:03<00:00, 26.56it/s]
100%|| 79/79 [00:03<00:00, 27.30it/s]
, 23.84it/s]
 70%|   | 55/79 [00:03<00:00, 24.34it/s]
 73%|  | 58/79 [00:03<00:00, 24.56it/s]
 77%|  | 61/79 [00:03<00:00, 24.79it/s]
 81%|  | 64/79 [00:03<00:00, 24.94it/s]
 85%| | 67/79 [00:03<00:00, 25.19it/s]
 89%| | 70/79 [00:03<00:00, 24.84it/s]
 92%|| 73/79 [00:03<00:00, 25.48it/s]
 96%|| 76/79 [00:03<00:00, 25.62it/s]
100%|| 79/79 [00:04<00:00, 26.47it/s]
, 23.21it/s]
 70%|   | 55/79 [00:03<00:01, 23.49it/s]
 73%|  | 58/79 [00:03<00:00, 24.08it/s]
 77%|  | 61/79 [00:03<00:00, 24.35it/s]
 81%|  | 64/79 [00:03<00:00, 24.58it/s]
 85%| | 67/79 [00:03<00:00, 24.72it/s]
 89%| | 70/79 [00:03<00:00, 24.78it/s]
 92%|| 73/79 [00:03<00:00, 25.06it/s]
 96%|| 76/79 [00:03<00:00, 25.75it/s]
100%|| 79/79 [00:04<00:00, 26.56it/s]
, 23.41it/s]
 70%|   | 55/79 [00:03<00:01, 23.95it/s]
 73%|  | 58/79 [00:03<00:00, 24.10it/s]
 77%|  | 61/79 [00:03<00:00, 24.34it/s]
 81%|  | 64/79 [00:03<00:00, 24.64it/s]
 85%| | 67/79 [00:03<00:00, 24.66it/s]
 89%| | 70/79 [00:03<00:00, 24.67it/s]
 92%|| 73/79 [00:03<00:00, 24.87it/s]
 96%|| 76/79 [00:03<00:00, 25.68it/s]
100%|| 79/79 [00:04<00:00, 26.33it/s]
, 23.12it/s]
 70%|   | 55/79 [00:03<00:01, 23.27it/s]
 73%|  | 58/79 [00:03<00:00, 23.50it/s]
 77%|  | 61/79 [00:03<00:00, 23.64it/s]
 81%|  | 64/79 [00:03<00:00, 23.79it/s]
 85%| | 67/79 [00:03<00:00, 24.10it/s]
 89%| | 70/79 [00:03<00:00, 24.13it/s]
 92%|| 73/79 [00:03<00:00, 24.56it/s]
 96%|| 76/79 [00:03<00:00, 25.34it/s]
100%|| 79/79 [00:04<00:00, 26.27it/s]
, 23.33it/s]
 70%|   | 55/79 [00:03<00:01, 23.68it/s]
 73%|  | 58/79 [00:03<00:00, 24.15it/s]
 77%|  | 61/79 [00:03<00:00, 24.55it/s]
 81%|  | 64/79 [00:03<00:00, 24.61it/s]
 85%| | 67/79 [00:03<00:00, 24.87it/s]
 89%| | 70/79 [00:03<00:00, 25.00it/s]
 92%|| 73/79 [00:03<00:00, 25.17it/s]
 96%|| 76/79 [00:03<00:00, 25.79it/s]
100%|| 79/79 [00:04<00:00, 26.55it/s]
26it/s]
 68%|   | 54/79 [00:03<00:01, 23.43it/s]
 72%|  | 57/79 [00:03<00:00, 23.72it/s]
 76%|  | 60/79 [00:03<00:00, 24.25it/s]
 80%|  | 63/79 [00:03<00:00, 24.08it/s]
 84%| | 66/79 [00:03<00:00, 24.09it/s]
 87%| | 69/79 [00:03<00:00, 24.05it/s]
 91%| | 72/79 [00:03<00:00, 24.20it/s]
 95%|| 75/79 [00:03<00:00, 25.05it/s]
 99%|| 78/79 [00:04<00:00, 25.75it/s]
100%|| 79/79 [00:04<00:00, 19.05it/s]
, 23.38it/s]
 70%|   | 55/79 [00:03<00:01, 23.56it/s]
 73%|  | 58/79 [00:03<00:00, 23.99it/s]
 77%|  | 61/79 [00:03<00:00, 24.35it/s]
 81%|  | 64/79 [00:03<00:00, 24.27it/s]
 85%| | 67/79 [00:03<00:00, 24.45it/s]
 89%| | 70/79 [00:03<00:00, 24.58it/s]
 92%|| 73/79 [00:03<00:00, 24.80it/s]
 96%|| 76/79 [00:03<00:00, 25.45it/s]
100%|| 79/79 [00:04<00:00, 26.34it/s]
, 23.43it/s]
 70%|   | 55/79 [00:03<00:00, 24.07it/s]
 73%|  | 58/79 [00:03<00:00, 24.31it/s]
 77%|  | 61/79 [00:03<00:00, 24.61it/s]
 81%|  | 64/79 [00:03<00:00, 24.94it/s]
 85%| | 67/79 [00:03<00:00, 25.17it/s]
 89%| | 70/79 [00:03<00:00, 25.08it/s]
 92%|| 73/79 [00:03<00:00, 25.28it/s]
 96%|| 76/79 [00:03<00:00, 25.68it/s]
100%|| 79/79 [00:04<00:00, 26.30it/s]
, 22.89it/s]
 70%|   | 55/79 [00:03<00:01, 23.39it/s]
 73%|  | 58/79 [00:03<00:00, 23.88it/s]
 77%|  | 61/79 [00:03<00:00, 23.89it/s]
 81%|  | 64/79 [00:03<00:00, 24.09it/s]
 85%| | 67/79 [00:03<00:00, 24.12it/s]
 89%| | 70/79 [00:03<00:00, 24.42it/s]
 92%|| 73/79 [00:03<00:00, 24.65it/s]
 96%|| 76/79 [00:04<00:00, 25.34it/s]
100%|| 79/79 [00:04<00:00, 26.31it/s]
2020-06-23 16:52:40,206 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.202298 (0.02689470977783203 s / img per device, on 32 devices)
2020-06-23 16:52:40,229 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:52:40,229 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:52:40,250 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592956372819, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 3, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592956372820, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 3}}
2020-06-23 16:52:53,483 maskrcnn_benchmark.trainer INFO: eta: 1:23:20  iter: 1840  loss: 0.8060 (0.9994)  loss_classifier: 0.3089 (0.3815)  loss_box_reg: 0.1176 (0.1519)  loss_mask: 0.3172 (0.3827)  loss_objectness: 0.0357 (0.0587)  loss_rpn_box_reg: 0.0174 (0.0245)  time: 0.1093 (0.1310)  data: 0.0015 (0.0227)  lr: 0.160000  max mem: 5148
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:52:55,645 maskrcnn_benchmark.trainer INFO: eta: 1:23:07  iter: 1860  loss: 0.8366 (0.9970)  loss_classifier: 0.2945 (0.3806)  loss_box_reg: 0.1330 (0.1517)  loss_mask: 0.2812 (0.3817)  loss_objectness: 0.0207 (0.0585)  loss_rpn_box_reg: 0.0093 (0.0245)  time: 0.1083 (0.1308)  data: 0.0015 (0.0225)  lr: 0.160000  max mem: 5148
2020-06-23 16:52:57,818 maskrcnn_benchmark.trainer INFO: eta: 1:22:56  iter: 1880  loss: 0.7320 (0.9950)  loss_classifier: 0.2560 (0.3796)  loss_box_reg: 0.1143 (0.1516)  loss_mask: 0.3097 (0.3809)  loss_objectness: 0.0248 (0.0583)  loss_rpn_box_reg: 0.0124 (0.0246)  time: 0.1072 (0.1305)  data: 0.0014 (0.0223)  lr: 0.160000  max mem: 5148
2020-06-23 16:52:59,968 maskrcnn_benchmark.trainer INFO: eta: 1:22:44  iter: 1900  loss: 0.6977 (0.9923)  loss_classifier: 0.2408 (0.3783)  loss_box_reg: 0.1086 (0.1512)  loss_mask: 0.2983 (0.3800)  loss_objectness: 0.0170 (0.0581)  loss_rpn_box_reg: 0.0076 (0.0247)  time: 0.1070 (0.1303)  data: 0.0014 (0.0220)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:02,133 maskrcnn_benchmark.trainer INFO: eta: 1:22:33  iter: 1920  loss: 0.7378 (0.9898)  loss_classifier: 0.2585 (0.3771)  loss_box_reg: 0.1036 (0.1509)  loss_mask: 0.2965 (0.3792)  loss_objectness: 0.0254 (0.0580)  loss_rpn_box_reg: 0.0118 (0.0247)  time: 0.1072 (0.1301)  data: 0.0014 (0.0218)  lr: 0.160000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=1.07s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:53:04,271 maskrcnn_benchmark.trainer INFO: eta: 1:22:21  iter: 1940  loss: 0.7184 (0.9867)  loss_classifier: 0.2588 (0.3758)  loss_box_reg: 0.1135 (0.1504)  loss_mask: 0.2783 (0.3782)  loss_objectness: 0.0188 (0.0577)  loss_rpn_box_reg: 0.0074 (0.0246)  time: 0.1065 (0.1298)  data: 0.0014 (0.0216)  lr: 0.160000  max mem: 5148
DONE (t=2.04s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20745
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.39485
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.20030
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.10677
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.23611
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.26703
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.21218
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.35441
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37575
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19528
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.41936
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48817
2020-06-23 16:53:06,405 maskrcnn_benchmark.trainer INFO: eta: 1:22:09  iter: 1960  loss: 0.7577 (0.9843)  loss_classifier: 0.2449 (0.3747)  loss_box_reg: 0.1280 (0.1502)  loss_mask: 0.2981 (0.3772)  loss_objectness: 0.0290 (0.0575)  loss_rpn_box_reg: 0.0095 (0.0247)  time: 0.1063 (0.1296)  data: 0.0015 (0.0214)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:08,550 maskrcnn_benchmark.trainer INFO: eta: 1:21:58  iter: 1980  loss: 0.7539 (0.9822)  loss_classifier: 0.2544 (0.3739)  loss_box_reg: 0.1220 (0.1499)  loss_mask: 0.2836 (0.3765)  loss_objectness: 0.0317 (0.0573)  loss_rpn_box_reg: 0.0091 (0.0246)  time: 0.1064 (0.1294)  data: 0.0014 (0.0212)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:10,703 maskrcnn_benchmark.trainer INFO: eta: 1:21:47  iter: 2000  loss: 0.8229 (0.9805)  loss_classifier: 0.3019 (0.3733)  loss_box_reg: 0.1283 (0.1498)  loss_mask: 0.2963 (0.3757)  loss_objectness: 0.0369 (0.0572)  loss_rpn_box_reg: 0.0170 (0.0245)  time: 0.1072 (0.1292)  data: 0.0015 (0.0210)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:12,864 maskrcnn_benchmark.trainer INFO: eta: 1:21:37  iter: 2020  loss: 0.7170 (0.9784)  loss_classifier: 0.2722 (0.3724)  loss_box_reg: 0.1072 (0.1496)  loss_mask: 0.2934 (0.3750)  loss_objectness: 0.0286 (0.0569)  loss_rpn_box_reg: 0.0092 (0.0245)  time: 0.1072 (0.1289)  data: 0.0014 (0.0208)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:15,013 maskrcnn_benchmark.trainer INFO: eta: 1:21:26  iter: 2040  loss: 0.7691 (0.9764)  loss_classifier: 0.2360 (0.3714)  loss_box_reg: 0.1148 (0.1493)  loss_mask: 0.3085 (0.3744)  loss_objectness: 0.0354 (0.0568)  loss_rpn_box_reg: 0.0155 (0.0246)  time: 0.1073 (0.1287)  data: 0.0014 (0.0206)  lr: 0.160000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:53:17,177 maskrcnn_benchmark.trainer INFO: eta: 1:21:16  iter: 2060  loss: 0.7198 (0.9741)  loss_classifier: 0.2353 (0.3702)  loss_box_reg: 0.1052 (0.1490)  loss_mask: 0.3095 (0.3738)  loss_objectness: 0.0394 (0.0566)  loss_rpn_box_reg: 0.0114 (0.0245)  time: 0.1080 (0.1285)  data: 0.0014 (0.0204)  lr: 0.160000  max mem: 5148
DONE (t=3.40s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:53:19,328 maskrcnn_benchmark.trainer INFO: eta: 1:21:06  iter: 2080  loss: 0.8253 (0.9723)  loss_classifier: 0.3000 (0.3694)  loss_box_reg: 0.1383 (0.1488)  loss_mask: 0.3018 (0.3732)  loss_objectness: 0.0260 (0.0564)  loss_rpn_box_reg: 0.0128 (0.0246)  time: 0.1077 (0.1283)  data: 0.0014 (0.0203)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:21,476 maskrcnn_benchmark.trainer INFO: eta: 1:20:56  iter: 2100  loss: 0.7048 (0.9705)  loss_classifier: 0.2517 (0.3686)  loss_box_reg: 0.1152 (0.1487)  loss_mask: 0.2797 (0.3724)  loss_objectness: 0.0268 (0.0562)  loss_rpn_box_reg: 0.0118 (0.0246)  time: 0.1076 (0.1281)  data: 0.0014 (0.0201)  lr: 0.160000  max mem: 5148
DONE (t=3.61s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21159
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.37423
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.21324
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.07942
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.23499
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.31650
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.21907
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.35133
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36992
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.17348
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.41676
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.50169
2020-06-23 16:53:23,082 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.20744917560680043, segm mAP: 0.21158624194771694
:::MLLOG {"namespace": "", "time_ms": 1592956403082, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.20744917560680043, "SEGM": 0.21158624194771694}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1592956403083, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 2}}
2020-06-23 16:53:23,842 maskrcnn_benchmark.trainer INFO: eta: 1:20:50  iter: 2120  loss: 0.7454 (0.9684)  loss_classifier: 0.2460 (0.3678)  loss_box_reg: 0.1181 (0.1484)  loss_mask: 0.2989 (0.3717)  loss_objectness: 0.0149 (0.0559)  loss_rpn_box_reg: 0.0070 (0.0245)  time: 0.1073 (0.1280)  data: 0.0014 (0.0199)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:26,009 maskrcnn_benchmark.trainer INFO: eta: 1:20:40  iter: 2140  loss: 0.7952 (0.9669)  loss_classifier: 0.2664 (0.3670)  loss_box_reg: 0.1140 (0.1482)  loss_mask: 0.3048 (0.3712)  loss_objectness: 0.0267 (0.0559)  loss_rpn_box_reg: 0.0151 (0.0246)  time: 0.1071 (0.1279)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:28,183 maskrcnn_benchmark.trainer INFO: eta: 1:20:31  iter: 2160  loss: 0.8052 (0.9655)  loss_classifier: 0.2546 (0.3664)  loss_box_reg: 0.1322 (0.1480)  loss_mask: 0.3032 (0.3706)  loss_objectness: 0.0238 (0.0557)  loss_rpn_box_reg: 0.0176 (0.0247)  time: 0.1078 (0.1277)  data: 0.0014 (0.0196)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:30,323 maskrcnn_benchmark.trainer INFO: eta: 1:20:21  iter: 2180  loss: 0.7490 (0.9639)  loss_classifier: 0.3034 (0.3658)  loss_box_reg: 0.1260 (0.1479)  loss_mask: 0.2717 (0.3699)  loss_objectness: 0.0385 (0.0556)  loss_rpn_box_reg: 0.0154 (0.0247)  time: 0.1065 (0.1275)  data: 0.0015 (0.0194)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:32,475 maskrcnn_benchmark.trainer INFO: eta: 1:20:12  iter: 2200  loss: 0.7976 (0.9626)  loss_classifier: 0.2944 (0.3653)  loss_box_reg: 0.1436 (0.1478)  loss_mask: 0.2889 (0.3692)  loss_objectness: 0.0334 (0.0556)  loss_rpn_box_reg: 0.0131 (0.0247)  time: 0.1070 (0.1273)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:34,632 maskrcnn_benchmark.trainer INFO: eta: 1:20:03  iter: 2220  loss: 0.7628 (0.9609)  loss_classifier: 0.2900 (0.3644)  loss_box_reg: 0.1271 (0.1476)  loss_mask: 0.2955 (0.3685)  loss_objectness: 0.0328 (0.0556)  loss_rpn_box_reg: 0.0116 (0.0248)  time: 0.1075 (0.1271)  data: 0.0015 (0.0191)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:36,783 maskrcnn_benchmark.trainer INFO: eta: 1:19:54  iter: 2240  loss: 0.7216 (0.9593)  loss_classifier: 0.2813 (0.3637)  loss_box_reg: 0.1160 (0.1475)  loss_mask: 0.3021 (0.3679)  loss_objectness: 0.0243 (0.0553)  loss_rpn_box_reg: 0.0170 (0.0248)  time: 0.1077 (0.1270)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:38,918 maskrcnn_benchmark.trainer INFO: eta: 1:19:44  iter: 2260  loss: 0.7360 (0.9578)  loss_classifier: 0.2652 (0.3629)  loss_box_reg: 0.1150 (0.1473)  loss_mask: 0.3124 (0.3674)  loss_objectness: 0.0335 (0.0553)  loss_rpn_box_reg: 0.0162 (0.0249)  time: 0.1062 (0.1268)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:41,083 maskrcnn_benchmark.trainer INFO: eta: 1:19:36  iter: 2280  loss: 0.6669 (0.9556)  loss_classifier: 0.2417 (0.3621)  loss_box_reg: 0.1187 (0.1470)  loss_mask: 0.2805 (0.3667)  loss_objectness: 0.0231 (0.0551)  loss_rpn_box_reg: 0.0093 (0.0248)  time: 0.1086 (0.1266)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:43,229 maskrcnn_benchmark.trainer INFO: eta: 1:19:27  iter: 2300  loss: 0.8067 (0.9543)  loss_classifier: 0.2903 (0.3616)  loss_box_reg: 0.1330 (0.1469)  loss_mask: 0.3057 (0.3662)  loss_objectness: 0.0323 (0.0549)  loss_rpn_box_reg: 0.0100 (0.0247)  time: 0.1071 (0.1265)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:45,388 maskrcnn_benchmark.trainer INFO: eta: 1:19:18  iter: 2320  loss: 0.7910 (0.9528)  loss_classifier: 0.2661 (0.3608)  loss_box_reg: 0.1177 (0.1467)  loss_mask: 0.3212 (0.3657)  loss_objectness: 0.0245 (0.0548)  loss_rpn_box_reg: 0.0131 (0.0248)  time: 0.1085 (0.1263)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:47,559 maskrcnn_benchmark.trainer INFO: eta: 1:19:10  iter: 2340  loss: 0.7728 (0.9507)  loss_classifier: 0.2547 (0.3599)  loss_box_reg: 0.1235 (0.1465)  loss_mask: 0.3005 (0.3651)  loss_objectness: 0.0185 (0.0545)  loss_rpn_box_reg: 0.0084 (0.0247)  time: 0.1082 (0.1261)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:49,717 maskrcnn_benchmark.trainer INFO: eta: 1:19:02  iter: 2360  loss: 0.7125 (0.9488)  loss_classifier: 0.2672 (0.3591)  loss_box_reg: 0.1056 (0.1462)  loss_mask: 0.2935 (0.3646)  loss_objectness: 0.0272 (0.0543)  loss_rpn_box_reg: 0.0111 (0.0246)  time: 0.1073 (0.1260)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:51,878 maskrcnn_benchmark.trainer INFO: eta: 1:18:53  iter: 2380  loss: 0.7096 (0.9473)  loss_classifier: 0.2763 (0.3587)  loss_box_reg: 0.1080 (0.1461)  loss_mask: 0.2731 (0.3639)  loss_objectness: 0.0220 (0.0541)  loss_rpn_box_reg: 0.0120 (0.0246)  time: 0.1081 (0.1258)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:54,034 maskrcnn_benchmark.trainer INFO: eta: 1:18:45  iter: 2400  loss: 0.6866 (0.9455)  loss_classifier: 0.2769 (0.3579)  loss_box_reg: 0.1024 (0.1458)  loss_mask: 0.3058 (0.3634)  loss_objectness: 0.0140 (0.0539)  loss_rpn_box_reg: 0.0117 (0.0245)  time: 0.1077 (0.1257)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:56,189 maskrcnn_benchmark.trainer INFO: eta: 1:18:37  iter: 2420  loss: 0.7841 (0.9450)  loss_classifier: 0.3109 (0.3576)  loss_box_reg: 0.1714 (0.1459)  loss_mask: 0.3203 (0.3631)  loss_objectness: 0.0300 (0.0538)  loss_rpn_box_reg: 0.0154 (0.0246)  time: 0.1077 (0.1255)  data: 0.0015 (0.0176)  lr: 0.160000  max mem: 5148
2020-06-23 16:53:58,350 maskrcnn_benchmark.trainer INFO: eta: 1:18:29  iter: 2440  loss: 0.6640 (0.9434)  loss_classifier: 0.2441 (0.3569)  loss_box_reg: 0.1040 (0.1457)  loss_mask: 0.2822 (0.3625)  loss_objectness: 0.0195 (0.0537)  loss_rpn_box_reg: 0.0080 (0.0246)  time: 0.1078 (0.1254)  data: 0.0015 (0.0175)  lr: 0.160000  max mem: 5148
2020-06-23 16:54:00,491 maskrcnn_benchmark.trainer INFO: eta: 1:18:21  iter: 2460  loss: 0.7415 (0.9421)  loss_classifier: 0.2642 (0.3563)  loss_box_reg: 0.1260 (0.1456)  loss_mask: 0.3310 (0.3621)  loss_objectness: 0.0239 (0.0535)  loss_rpn_box_reg: 0.0085 (0.0245)  time: 0.1063 (0.1252)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5148
2020-06-23 16:54:02,660 maskrcnn_benchmark.trainer INFO: eta: 1:18:14  iter: 2480  loss: 0.7885 (0.9414)  loss_classifier: 0.2944 (0.3561)  loss_box_reg: 0.1302 (0.1456)  loss_mask: 0.3007 (0.3617)  loss_objectness: 0.0361 (0.0535)  loss_rpn_box_reg: 0.0114 (0.0245)  time: 0.1082 (0.1251)  data: 0.0015 (0.0172)  lr: 0.160000  max mem: 5148
2020-06-23 16:54:04,803 maskrcnn_benchmark.trainer INFO: eta: 1:18:06  iter: 2500  loss: 0.7393 (0.9395)  loss_classifier: 0.2979 (0.3553)  loss_box_reg: 0.1281 (0.1454)  loss_mask: 0.2667 (0.3610)  loss_objectness: 0.0203 (0.0534)  loss_rpn_box_reg: 0.0093 (0.0244)  time: 0.1060 (0.1250)  data: 0.0015 (0.0171)  lr: 0.160000  max mem: 5148
2020-06-23 16:54:06,939 maskrcnn_benchmark.trainer INFO: eta: 1:17:58  iter: 2520  loss: 0.7147 (0.9383)  loss_classifier: 0.2725 (0.3549)  loss_box_reg: 0.1275 (0.1453)  loss_mask: 0.2995 (0.3606)  loss_objectness: 0.0341 (0.0532)  loss_rpn_box_reg: 0.0109 (0.0243)  time: 0.1068 (0.1248)  data: 0.0014 (0.0170)  lr: 0.160000  max mem: 5148
2020-06-23 16:54:09,092 maskrcnn_benchmark.trainer INFO: eta: 1:17:50  iter: 2540  loss: 0.8019 (0.9373)  loss_classifier: 0.3140 (0.3546)  loss_box_reg: 0.1244 (0.1452)  loss_mask: 0.2993 (0.3602)  loss_objectness: 0.0330 (0.0531)  loss_rpn_box_reg: 0.0175 (0.0243)  time: 0.1074 (0.1247)  data: 0.0015 (0.0169)  lr: 0.160000  max mem: 5148
2020-06-23 16:54:11,230 maskrcnn_benchmark.trainer INFO: eta: 1:17:43  iter: 2560  loss: 0.7645 (0.9361)  loss_classifier: 0.3072 (0.3542)  loss_box_reg: 0.1341 (0.1451)  loss_mask: 0.2726 (0.3596)  loss_objectness: 0.0310 (0.0530)  loss_rpn_box_reg: 0.0107 (0.0242)  time: 0.1065 (0.1245)  data: 0.0014 (0.0167)  lr: 0.160000  max mem: 5148
2020-06-23 16:54:13,370 maskrcnn_benchmark.trainer INFO: eta: 1:17:35  iter: 2580  loss: 0.7000 (0.9354)  loss_classifier: 0.2458 (0.3538)  loss_box_reg: 0.1126 (0.1450)  loss_mask: 0.3202 (0.3593)  loss_objectness: 0.0350 (0.0530)  loss_rpn_box_reg: 0.0105 (0.0243)  time: 0.1070 (0.1244)  data: 0.0015 (0.0166)  lr: 0.160000  max mem: 5148
2020-06-23 16:54:15,503 maskrcnn_benchmark.trainer INFO: eta: 1:17:27  iter: 2600  loss: 0.8630 (0.9347)  loss_classifier: 0.3553 (0.3536)  loss_box_reg: 0.1489 (0.1451)  loss_mask: 0.3069 (0.3589)  loss_objectness: 0.0226 (0.0529)  loss_rpn_box_reg: 0.0170 (0.0243)  time: 0.1062 (0.1243)  data: 0.0015 (0.0165)  lr: 0.160000  max mem: 5148
2020-06-23 16:54:17,636 maskrcnn_benchmark.trainer INFO: eta: 1:17:20  iter: 2620  loss: 0.8167 (0.9337)  loss_classifier: 0.3138 (0.3531)  loss_box_reg: 0.1279 (0.1449)  loss_mask: 0.3313 (0.3586)  loss_objectness: 0.0270 (0.0528)  loss_rpn_box_reg: 0.0147 (0.0243)  time: 0.1065 (0.1241)  data: 0.0015 (0.0164)  lr: 0.160000  max mem: 5148
2020-06-23 16:54:19,773 maskrcnn_benchmark.trainer INFO: eta: 1:17:12  iter: 2640  loss: 0.8484 (0.9330)  loss_classifier: 0.3123 (0.3527)  loss_box_reg: 0.1316 (0.1449)  loss_mask: 0.3212 (0.3584)  loss_objectness: 0.0307 (0.0527)  loss_rpn_box_reg: 0.0155 (0.0243)  time: 0.1069 (0.1240)  data: 0.0015 (0.0163)  lr: 0.160000  max mem: 5148
2020-06-23 16:54:21,895 maskrcnn_benchmark.trainer INFO: eta: 1:17:05  iter: 2660  loss: 0.7047 (0.9315)  loss_classifier: 0.2527 (0.3522)  loss_box_reg: 0.1102 (0.1446)  loss_mask: 0.3072 (0.3579)  loss_objectness: 0.0153 (0.0525)  loss_rpn_box_reg: 0.0073 (0.0242)  time: 0.1060 (0.1239)  data: 0.0014 (0.0162)  lr: 0.160000  max mem: 5148
2020-06-23 16:54:24,034 maskrcnn_benchmark.trainer INFO: eta: 1:16:58  iter: 2680  loss: 0.7504 (0.9300)  loss_classifier: 0.2753 (0.3517)  loss_box_reg: 0.1111 (0.1445)  loss_mask: 0.2878 (0.3573)  loss_objectness: 0.0221 (0.0524)  loss_rpn_box_reg: 0.0084 (0.0242)  time: 0.1063 (0.1237)  data: 0.0014 (0.0161)  lr: 0.160000  max mem: 5148
2020-06-23 16:54:26,173 maskrcnn_benchmark.trainer INFO: eta: 1:16:51  iter: 2700  loss: 0.7482 (0.9292)  loss_classifier: 0.2928 (0.3514)  loss_box_reg: 0.1170 (0.1444)  loss_mask: 0.2964 (0.3569)  loss_objectness: 0.0319 (0.0523)  loss_rpn_box_reg: 0.0143 (0.0242)  time: 0.1069 (0.1236)  data: 0.0015 (0.0160)  lr: 0.160000  max mem: 5148
2020-06-23 16:54:28,317 maskrcnn_benchmark.trainer INFO: eta: 1:16:44  iter: 2720  loss: 0.6528 (0.9280)  loss_classifier: 0.2302 (0.3509)  loss_box_reg: 0.1192 (0.1442)  loss_mask: 0.3096 (0.3565)  loss_objectness: 0.0215 (0.0522)  loss_rpn_box_reg: 0.0133 (0.0242)  time: 0.1071 (0.1235)  data: 0.0014 (0.0158)  lr: 0.160000  max mem: 5148
2020-06-23 16:54:30,470 maskrcnn_benchmark.trainer INFO: eta: 1:16:37  iter: 2740  loss: 0.7637 (0.9270)  loss_classifier: 0.2691 (0.3503)  loss_box_reg: 0.1253 (0.1442)  loss_mask: 0.3027 (0.3562)  loss_objectness: 0.0343 (0.0521)  loss_rpn_box_reg: 0.0113 (0.0242)  time: 0.1071 (0.1234)  data: 0.0015 (0.0157)  lr: 0.160000  max mem: 5148
:::MLLOG {"namespace": "", "time_ms": 1592956472734, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1592956472734, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1592956472734, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 3}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 16:54:32,984 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.31s)
creating index...
index created!
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 16:54:33,298 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.29it/s]
  5%|         | 4/79 [00:00<00:41,  1.80it/s]
  9%|         | 7/79 [00:01<00:28,  2.50it/s]
 13%|        | 10/79 [00:01<00:20,  3.44it/s]
 16%|        | 13/79 [00:01<00:14,  4.64it/s]
 20%|        | 16/79 [00:01<00:10,  6.16it/s]
 24%|       | 19/79 [00:01<00:07,  8.00it/s]
 28%|       | 22/79 [00:01<00:05, 10.09it/s]
 32%|      | 25/79 [00:01<00:04, 12.39it/s]
 35%|      | 28/79 [00:01<00:03, 14.72it/s]
 39%|      | 31/79 [00:01<00:02, 16.97it/s]
 43%|     | 34/79 [00:02<00:02, 18.89it/s]
 47%|     | 37/79 [00:02<00:02, 20.94it/s]
 51%|     | 40/79 [00:02<00:01, 21.92it/s]
 54%|    | 43/79 [00:02<00:01, 22.99it/s]
 58%|    | 46/79 [00:02<00:01, 23.51it/s]
 62%|   | 49/79 [00:02<00:01, 24.43it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.29it/s]
  5%|         | 4/79 [00:00<00:41,  1.80it/s]
  9%|         | 7/79 [00:01<00:28,  2.49it/s]
 13%|        | 10/79 [00:01<00:20,  3.43it/s]
 16%|        | 13/79 [00:01<00:14,  4.65it/s]
 20%|        | 16/79 [00:01<00:10,  6.16it/s]
 24%|       | 19/79 [00:01<00:07,  7.99it/s]
 28%|       | 22/79 [00:01<00:05, 10.10it/s]
 32%|      | 25/79 [00:01<00:04, 12.39it/s]
 35%|      | 28/79 [00:01<00:03, 14.71it/s]
 39%|      | 31/79 [00:01<00:02, 16.93it/s]
 43%|     | 34/79 [00:02<00:02, 18.96it/s]
 47%|     | 37/79 [00:02<00:02, 20.61it/s]
 51%|     | 40/79 [00:02<00:01, 21.94it/s]
 54%|    | 43/79 [00:02<00:01, 22.96it/s]
 58%|    | 46/79 [00:02<00:01, 23.66it/s]
 62%|   | 49/79 [00:02<00:01, 24.33it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.85it/s]
 24%|       | 19/79 [00:01<00:07,  7.63it/s]
 28%|       | 22/79 [00:01<00:05,  9.64it/s]
 32%|      | 25/79 [00:01<00:04, 11.95it/s]
 35%|      | 28/79 [00:01<00:03, 14.31it/s]
 39%|      | 31/79 [00:01<00:02, 16.57it/s]
 43%|     | 34/79 [00:02<00:02, 18.60it/s]
 47%|     | 37/79 [00:02<00:02, 20.42it/s]
 51%|     | 40/79 [00:02<00:01, 21.97it/s]
 54%|    | 43/79 [00:02<00:01, 22.97it/s]
 58%|    | 46/79 [00:02<00:01, 23.90it/s]
 62%|   | 49/79 [00:02<00:01, 24.66it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.43it/s]
 13%|        | 10/79 [00:01<00:20,  3.33it/s]
 16%|        | 13/79 [00:01<00:14,  4.51it/s]
 20%|        | 16/79 [00:01<00:10,  6.01it/s]
 24%|       | 19/79 [00:01<00:07,  7.78it/s]
 28%|       | 22/79 [00:01<00:05,  9.85it/s]
 32%|      | 25/79 [00:01<00:04, 12.11it/s]
 35%|      | 28/79 [00:01<00:03, 14.46it/s]
 39%|      | 31/79 [00:01<00:02, 16.68it/s]
 43%|     | 34/79 [00:02<00:02, 18.66it/s]
 47%|     | 37/79 [00:02<00:02, 20.47it/s]
 51%|     | 40/79 [00:02<00:01, 21.90it/s]
 54%|    | 43/79 [00:02<00:01, 22.90it/s]
 58%|    | 46/79 [00:02<00:01, 23.67it/s]
 62%|   | 49/79 [00:02<00:01, 24.16it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.42it/s]
 13%|        | 10/79 [00:01<00:20,  3.33it/s]
 16%|        | 13/79 [00:01<00:14,  4.49it/s]
 20%|        | 16/79 [00:01<00:10,  5.99it/s]
 24%|       | 19/79 [00:01<00:07,  7.75it/s]
 28%|       | 22/79 [00:01<00:05,  9.79it/s]
 32%|      | 25/79 [00:01<00:04, 12.02it/s]
 35%|      | 28/79 [00:01<00:03, 14.37it/s]
 39%|      | 31/79 [00:01<00:02, 16.54it/s]
 43%|     | 34/79 [00:02<00:02, 18.51it/s]
 47%|     | 37/79 [00:02<00:02, 20.21it/s]
 51%|     | 40/79 [00:02<00:01, 21.70it/s]
 54%|    | 43/79 [00:02<00:01, 22.79it/s]
 58%|    | 46/79 [00:02<00:01, 23.49it/s]
 62%|   | 49/79 [00:02<00:01, 24.27it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  4%|         | 3/79 [00:00<00:44,  1.70it/s]
  8%|         | 6/79 [00:01<00:30,  2.36it/s]
 11%|        | 9/79 [00:01<00:21,  3.25it/s]
 15%|        | 12/79 [00:01<00:15,  4.41it/s]
 19%|        | 15/79 [00:01<00:10,  5.87it/s]
 23%|       | 18/79 [00:01<00:07,  7.64it/s]
 27%|       | 21/79 [00:01<00:05,  9.67it/s]
 30%|       | 24/79 [00:01<00:04, 11.90it/s]
 34%|      | 27/79 [00:01<00:03, 14.09it/s]
 38%|      | 30/79 [00:01<00:03, 16.30it/s]
 42%|     | 33/79 [00:02<00:02, 18.21it/s]
 46%|     | 36/79 [00:02<00:02, 20.03it/s]
 49%|     | 39/79 [00:02<00:01, 21.62it/s]
 53%|    | 42/79 [00:02<00:01, 22.90it/s]
 57%|    | 45/79 [00:02<00:01, 23.80it/s]
 61%|    | 48/79 [00:02<00:01, 24.66it/s]
 65%|   | 51/79 [00:02<00:01, 25.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.83it/s]
 24%|       | 19/79 [00:01<00:07,  7.59it/s]
 28%|       | 22/79 [00:01<00:05,  9.63it/s]
 32%|      | 25/79 [00:01<00:04, 11.88it/s]
 35%|      | 28/79 [00:01<00:03, 14.18it/s]
 39%|      | 31/79 [00:02<00:02, 16.43it/s]
 43%|     | 34/79 [00:02<00:02, 18.57it/s]
 47%|     | 37/79 [00:02<00:02, 20.46it/s]
 51%|     | 40/79 [00:02<00:01, 21.83it/s]
 54%|    | 43/79 [00:02<00:01, 23.15it/s]
 58%|    | 46/79 [00:02<00:01, 23.95it/s]
 62%|   | 49/79 [00:02<00:01, 24.62it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.24it/s]
 16%|        | 13/79 [00:01<00:15,  4.39it/s]
 20%|        | 16/79 [00:01<00:10,  5.85it/s]
 24%|       | 19/79 [00:01<00:07,  7.60it/s]
 28%|       | 22/79 [00:01<00:05,  9.62it/s]
 32%|      | 25/79 [00:01<00:04, 11.87it/s]
 35%|      | 28/79 [00:01<00:03, 14.19it/s]
 39%|      | 31/79 [00:02<00:02, 16.39it/s]
 43%|     | 34/79 [00:02<00:02, 18.51it/s]
 47%|     | 37/79 [00:02<00:02, 20.28it/s]
 51%|     | 40/79 [00:02<00:01, 21.64it/s]
 54%|    | 43/79 [00:02<00:01, 22.93it/s]
 58%|    | 46/79 [00:02<00:01, 23.76it/s]
 62%|   | 49/79 [00:02<00:01, 24.62it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.43it/s]
 13%|        | 10/79 [00:01<00:20,  3.34it/s]
 16%|        | 13/79 [00:01<00:14,  4.51it/s]
 20%|        | 16/79 [00:01<00:10,  5.99it/s]
 24%|       | 19/79 [00:01<00:07,  7.78it/s]
 28%|       | 22/79 [00:01<00:05,  9.86it/s]
 32%|      | 25/79 [00:01<00:04, 12.07it/s]
 35%|      | 28/79 [00:01<00:03, 14.35it/s]
 39%|      | 31/79 [00:01<00:02, 16.66it/s]
 43%|     | 34/79 [00:02<00:02, 18.62it/s]
 47%|     | 37/79 [00:02<00:02, 20.32it/s]
 51%|     | 40/79 [00:02<00:01, 21.50it/s]
 54%|    | 43/79 [00:02<00:01, 22.70it/s]
 58%|    | 46/79 [00:02<00:01, 23.39it/s]
 62%|   | 49/79 [00:02<00:01, 23.89it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.76it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:05,  9.59it/s]
 32%|      | 25/79 [00:01<00:04, 11.81it/s]
 35%|      | 28/79 [00:01<00:03, 14.17it/s]
 39%|      | 31/79 [00:01<00:02, 16.41it/s]
 43%|     | 34/79 [00:02<00:02, 18.43it/s]
 47%|     | 37/79 [00:02<00:02, 20.20it/s]
 51%|     | 40/79 [00:02<00:01, 21.64it/s]
 54%|    | 43/79 [00:02<00:01, 23.00it/s]
 58%|    | 46/79 [00:02<00:01, 23.60it/s]
 62%|   | 49/79 [00:02<00:01, 24.61it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.27it/s]
 16%|        | 13/79 [00:01<00:14,  4.43it/s]
 20%|        | 16/79 [00:01<00:10,  5.89it/s]
 24%|       | 19/79 [00:01<00:07,  7.65it/s]
 28%|       | 22/79 [00:01<00:05,  9.72it/s]
 32%|      | 25/79 [00:01<00:04, 11.94it/s]
 35%|      | 28/79 [00:01<00:03, 14.22it/s]
 39%|      | 31/79 [00:02<00:02, 16.48it/s]
 43%|     | 34/79 [00:02<00:02, 18.52it/s]
 47%|     | 37/79 [00:02<00:02, 20.32it/s]
 51%|     | 40/79 [00:02<00:01, 21.51it/s]
 54%|    | 43/79 [00:02<00:01, 22.57it/s]
 58%|    | 46/79 [00:02<00:01, 23.16it/s]
 62%|   | 49/79 [00:02<00:01, 23.77it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.36it/s]
 20%|        | 16/79 [00:01<00:10,  5.82it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.62it/s]
 32%|      | 25/79 [00:01<00:04, 11.84it/s]
 35%|      | 28/79 [00:01<00:03, 14.18it/s]
 39%|      | 31/79 [00:01<00:02, 16.31it/s]
 43%|     | 34/79 [00:02<00:02, 18.38it/s]
 47%|     | 37/79 [00:02<00:02, 19.95it/s]
 51%|     | 40/79 [00:02<00:01, 21.39it/s]
 54%|    | 43/79 [00:02<00:01, 22.41it/s]
 58%|    | 46/79 [00:02<00:01, 23.44it/s]
 62%|   | 49/79 [00:02<00:01, 24.04it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.57it/s]
 28%|       | 22/79 [00:01<00:05,  9.62it/s]
 32%|      | 25/79 [00:01<00:04, 11.87it/s]
 35%|      | 28/79 [00:01<00:03, 14.14it/s]
 39%|      | 31/79 [00:02<00:02, 16.29it/s]
 43%|     | 34/79 [00:02<00:02, 18.32it/s]
 47%|     | 37/79 [00:02<00:02, 20.04it/s]
 51%|     | 40/79 [00:02<00:01, 21.40it/s]
 54%|    | 43/79 [00:02<00:01, 22.60it/s]
 58%|    | 46/79 [00:02<00:01, 23.57it/s]
 62%|   | 49/79 [00:02<00:01, 24.04it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.33it/s]
 32%|      | 25/79 [00:01<00:04, 11.57it/s]
 35%|      | 28/79 [00:01<00:03, 13.85it/s]
 39%|      | 31/79 [00:02<00:02, 16.08it/s]
 43%|     | 34/79 [00:02<00:02, 18.14it/s]
 47%|     | 37/79 [00:02<00:02, 19.89it/s]
 51%|     | 40/79 [00:02<00:01, 21.20it/s]
 54%|    | 43/79 [00:02<00:01, 22.45it/s]
 58%|    | 46/79 [00:02<00:01, 23.27it/s]
 62%|   | 49/79 [00:02<00:01, 23.93it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.29it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.89it/s]
 43%|     | 34/79 [00:02<00:02, 17.91it/s]
 47%|     | 37/79 [00:02<00:02, 19.76it/s]
 51%|     | 40/79 [00:02<00:01, 21.37it/s]
 54%|    | 43/79 [00:02<00:01, 22.50it/s]
 58%|    | 46/79 [00:02<00:01, 23.34it/s]
 62%|   | 49/79 [00:02<00:01, 24.16it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.24it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.82it/s]
 24%|       | 19/79 [00:01<00:07,  7.56it/s]
 28%|       | 22/79 [00:01<00:05,  9.55it/s]
 32%|      | 25/79 [00:01<00:04, 11.65it/s]
 35%|      | 28/79 [00:01<00:03, 13.90it/s]
 39%|      | 31/79 [00:02<00:02, 16.10it/s]
 43%|     | 34/79 [00:02<00:02, 18.02it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.82it/s]
 54%|    | 43/79 [00:02<00:01, 22.00it/s]
 58%|    | 46/79 [00:02<00:01, 22.97it/s]
 62%|   | 49/79 [00:02<00:01, 23.67it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.27it/s]
 16%|        | 13/79 [00:01<00:14,  4.43it/s]
 20%|        | 16/79 [00:01<00:10,  5.88it/s]
 24%|       | 19/79 [00:01<00:07,  7.67it/s]
 28%|       | 22/79 [00:01<00:05,  9.70it/s]
 32%|      | 25/79 [00:01<00:04, 11.88it/s]
 35%|      | 28/79 [00:01<00:03, 14.23it/s]
 39%|      | 31/79 [00:02<00:02, 16.39it/s]
 43%|     | 34/79 [00:02<00:02, 18.27it/s]
 47%|     | 37/79 [00:02<00:02, 20.05it/s]
 51%|     | 40/79 [00:02<00:01, 20.96it/s]
 54%|    | 43/79 [00:02<00:01, 21.76it/s]
 58%|    | 46/79 [00:02<00:01, 22.69it/s]
 62%|   | 49/79 [00:02<00:01, 23.46it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.45it/s]
 24%|       | 19/79 [00:01<00:08,  7.14it/s]
 28%|       | 22/79 [00:01<00:06,  9.14it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.64it/s]
 39%|      | 31/79 [00:02<00:03, 15.76it/s]
 43%|     | 34/79 [00:02<00:02, 17.81it/s]
 47%|     | 37/79 [00:02<00:02, 19.52it/s]
 51%|     | 40/79 [00:02<00:01, 21.15it/s]
 54%|    | 43/79 [00:02<00:01, 22.28it/s]
 58%|    | 46/79 [00:02<00:01, 23.20it/s]
 62%|   | 49/79 [00:02<00:01, 23.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.48it/s]
 28%|       | 22/79 [00:01<00:05,  9.51it/s]
 32%|      | 25/79 [00:01<00:04, 11.66it/s]
 35%|      | 28/79 [00:01<00:03, 13.97it/s]
 39%|      | 31/79 [00:02<00:02, 16.27it/s]
 43%|     | 34/79 [00:02<00:02, 18.29it/s]
 47%|     | 37/79 [00:02<00:02, 19.98it/s]
 51%|     | 40/79 [00:02<00:01, 20.63it/s]
 54%|    | 43/79 [00:02<00:01, 21.78it/s]
 58%|    | 46/79 [00:02<00:01, 22.78it/s]
 62%|   | 49/79 [00:02<00:01, 23.30it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  4%|         | 3/79 [00:00<00:45,  1.69it/s]
  8%|         | 6/79 [00:01<00:31,  2.34it/s]
 11%|        | 9/79 [00:01<00:21,  3.22it/s]
 15%|        | 12/79 [00:01<00:15,  4.34it/s]
 19%|        | 15/79 [00:01<00:11,  5.77it/s]
 23%|       | 18/79 [00:01<00:08,  7.51it/s]
 27%|       | 21/79 [00:01<00:06,  9.53it/s]
 30%|       | 24/79 [00:01<00:04, 11.56it/s]
 34%|      | 27/79 [00:01<00:03, 13.75it/s]
 38%|      | 30/79 [00:02<00:03, 16.00it/s]
 42%|     | 33/79 [00:02<00:02, 17.85it/s]
 46%|     | 36/79 [00:02<00:02, 19.43it/s]
 49%|     | 39/79 [00:02<00:01, 20.74it/s]
 53%|    | 42/79 [00:02<00:01, 22.03it/s]
 57%|    | 45/79 [00:02<00:01, 22.69it/s]
 61%|    | 48/79 [00:02<00:01, 23.21it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.25it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.75it/s]
 39%|      | 31/79 [00:02<00:03, 15.98it/s]
 43%|     | 34/79 [00:02<00:02, 18.00it/s]
 47%|     | 37/79 [00:02<00:02, 19.85it/s]
 51%|     | 40/79 [00:02<00:01, 21.28it/s]
 54%|    | 43/79 [00:02<00:01, 22.34it/s]
 58%|    | 46/79 [00:02<00:01, 23.27it/s]
 62%|   | 49/79 [00:02<00:01, 23.80it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:06,  9.44it/s]
 32%|      | 25/79 [00:01<00:04, 11.62it/s]
 35%|      | 28/79 [00:01<00:03, 13.85it/s]
 39%|      | 31/79 [00:02<00:02, 16.07it/s]
 43%|     | 34/79 [00:02<00:02, 18.15it/s]
 47%|     | 37/79 [00:02<00:02, 19.69it/s]
 51%|     | 40/79 [00:02<00:01, 20.97it/s]
 54%|    | 43/79 [00:02<00:01, 22.00it/s]
 58%|    | 46/79 [00:02<00:01, 22.64it/s]
 62%|   | 49/79 [00:02<00:01, 23.32it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.33it/s]
 24%|       | 19/79 [00:01<00:08,  6.99it/s]
 28%|       | 22/79 [00:01<00:06,  8.91it/s]
 32%|      | 25/79 [00:01<00:04, 11.04it/s]
 35%|      | 28/79 [00:02<00:03, 13.25it/s]
 39%|      | 31/79 [00:02<00:03, 15.41it/s]
 43%|     | 34/79 [00:02<00:02, 17.32it/s]
 47%|     | 37/79 [00:02<00:02, 19.27it/s]
 51%|     | 40/79 [00:02<00:01, 20.76it/s]
 54%|    | 43/79 [00:02<00:01, 21.89it/s]
 58%|    | 46/79 [00:02<00:01, 22.71it/s]
 62%|   | 49/79 [00:02<00:01, 23.56it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.69it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.39it/s]
 32%|      | 25/79 [00:01<00:04, 11.53it/s]
 35%|      | 28/79 [00:01<00:03, 13.78it/s]
 39%|      | 31/79 [00:02<00:03, 15.90it/s]
 43%|     | 34/79 [00:02<00:02, 17.94it/s]
 47%|     | 37/79 [00:02<00:02, 19.57it/s]
 51%|     | 40/79 [00:02<00:01, 20.90it/s]
 54%|    | 43/79 [00:02<00:01, 22.09it/s]
 58%|    | 46/79 [00:02<00:01, 22.86it/s]
 62%|   | 49/79 [00:02<00:01, 23.49it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.46it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.09it/s]
 32%|      | 25/79 [00:01<00:04, 11.27it/s]
 35%|      | 28/79 [00:01<00:03, 13.54it/s]
 39%|      | 31/79 [00:02<00:03, 15.61it/s]
 43%|     | 34/79 [00:02<00:02, 17.59it/s]
 47%|     | 37/79 [00:02<00:02, 19.24it/s]
 51%|     | 40/79 [00:02<00:01, 20.61it/s]
 54%|    | 43/79 [00:02<00:01, 21.60it/s]
 58%|    | 46/79 [00:02<00:01, 22.57it/s]
 62%|   | 49/79 [00:02<00:01, 23.01it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.81it/s]
 16%|        | 13/79 [00:01<00:17,  3.84it/s]
 20%|        | 16/79 [00:01<00:12,  5.15it/s]
 24%|       | 19/79 [00:01<00:08,  6.77it/s]
 28%|       | 22/79 [00:01<00:06,  8.66it/s]
 32%|      | 25/79 [00:01<00:04, 10.80it/s]
 35%|      | 28/79 [00:02<00:03, 13.05it/s]
 39%|      | 31/79 [00:02<00:03, 15.25it/s]
 43%|     | 34/79 [00:02<00:02, 17.37it/s]
 47%|     | 37/79 [00:02<00:02, 19.21it/s]
 51%|     | 40/79 [00:02<00:01, 20.68it/s]
 54%|    | 43/79 [00:02<00:01, 21.98it/s]
 58%|    | 46/79 [00:02<00:01, 22.90it/s]
 62%|   | 49/79 [00:02<00:01, 23.57it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  6.98it/s]
 28%|       | 22/79 [00:01<00:06,  8.88it/s]
 32%|      | 25/79 [00:01<00:04, 11.02it/s]
 35%|      | 28/79 [00:02<00:03, 13.25it/s]
 39%|      | 31/79 [00:02<00:03, 15.42it/s]
 43%|     | 34/79 [00:02<00:02, 17.24it/s]
 47%|     | 37/79 [00:02<00:02, 19.01it/s]
 51%|     | 40/79 [00:02<00:01, 20.41it/s]
 54%|    | 43/79 [00:02<00:01, 21.52it/s]
 58%|    | 46/79 [00:02<00:01, 22.32it/s]
 62%|   | 49/79 [00:02<00:01, 23.27it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.10it/s]
 32%|      | 25/79 [00:01<00:04, 11.19it/s]
 35%|      | 28/79 [00:01<00:03, 13.36it/s]
 39%|      | 31/79 [00:02<00:03, 15.64it/s]
 43%|     | 34/79 [00:02<00:02, 17.68it/s]
 47%|     | 37/79 [00:02<00:02, 17.64it/s]
 51%|     | 40/79 [00:02<00:02, 19.27it/s]
 54%|    | 43/79 [00:02<00:01, 20.56it/s]
 58%|    | 46/79 [00:02<00:01, 21.79it/s]
 62%|   | 49/79 [00:02<00:01, 22.48it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.93it/s]
 20%|        | 16/79 [00:01<00:12,  5.25it/s]
 24%|       | 19/79 [00:01<00:08,  6.87it/s]
 28%|       | 22/79 [00:01<00:06,  8.82it/s]
 32%|      | 25/79 [00:01<00:04, 10.91it/s]
 35%|      | 28/79 [00:02<00:03, 13.11it/s]
 39%|      | 31/79 [00:02<00:03, 15.16it/s]
 43%|     | 34/79 [00:02<00:02, 17.10it/s]
 47%|     | 37/79 [00:02<00:02, 18.87it/s]
 51%|     | 40/79 [00:02<00:01, 19.92it/s]
 54%|    | 43/79 [00:02<00:01, 21.16it/s]
 58%|    | 46/79 [00:02<00:01, 21.86it/s]
 62%|   | 49/79 [00:02<00:01, 22.61it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  3.99it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  6.99it/s]
 28%|       | 22/79 [00:01<00:06,  8.90it/s]
 32%|      | 25/79 [00:01<00:04, 11.03it/s]
 35%|      | 28/79 [00:02<00:03, 13.23it/s]
 39%|      | 31/79 [00:02<00:03, 15.37it/s]
 43%|     | 34/79 [00:02<00:02, 17.08it/s]
 47%|     | 37/79 [00:02<00:02, 18.75it/s]
 51%|     | 40/79 [00:02<00:01, 20.21it/s]
 54%|    | 43/79 [00:02<00:01, 21.35it/s]
 58%|    | 46/79 [00:02<00:01, 22.15it/s]
 62%|   | 49/79 [00:02<00:01, 22.78it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:12,  5.24it/s]
 24%|       | 19/79 [00:01<00:08,  6.86it/s]
 28%|       | 22/79 [00:01<00:06,  8.76it/s]
 32%|      | 25/79 [00:01<00:04, 10.84it/s]
 35%|      | 28/79 [00:02<00:03, 13.05it/s]
 39%|      | 31/79 [00:02<00:03, 15.19it/s]
 43%|     | 34/79 [00:02<00:02, 17.06it/s]
 47%|     | 37/79 [00:02<00:02, 18.73it/s]
 51%|     | 40/79 [00:02<00:01, 20.24it/s]
 54%|    | 43/79 [00:02<00:01, 21.47it/s]
 58%|    | 46/79 [00:02<00:01, 22.15it/s]
 62%|   | 49/79 [00:02<00:01, 22.92it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  5%|         | 4/79 [00:01<00:52,  1.42it/s]
  9%|         | 7/79 [00:01<00:36,  1.97it/s]
 13%|        | 10/79 [00:01<00:25,  2.73it/s]
 16%|        | 13/79 [00:01<00:17,  3.73it/s]
 20%|        | 16/79 [00:01<00:12,  4.99it/s]
 24%|       | 19/79 [00:01<00:09,  6.57it/s]
 28%|       | 22/79 [00:01<00:06,  8.44it/s]
 32%|      | 25/79 [00:01<00:05, 10.59it/s]
 35%|      | 28/79 [00:02<00:03, 12.80it/s]
 39%|      | 31/79 [00:02<00:03, 15.03it/s]
 43%|     | 34/79 [00:02<00:02, 17.17it/s]
 47%|     | 37/79 [00:02<00:02, 18.96it/s]
 51%|     | 40/79 [00:02<00:01, 20.41it/s]
 54%|    | 43/79 [00:02<00:01, 21.51it/s]
 58%|    | 46/79 [00:02<00:01, 22.38it/s]
 62%|   | 49/79 [00:02<00:01, 23.14it/s]
 66%|   | 52/79 [00:03<00:01, 24.90it/s]
 70%|   | 55/79 [00:02<00:00, 25.31it/s]
 73%|  | 58/79 [00:02<00:00, 25.45it/s]
 77%|  | 61/79 [00:03<00:00, 25.65it/s]
 81%|  | 64/79 [00:03<00:00, 26.18it/s]
 85%| | 67/79 [00:03<00:00, 25.83it/s]
 89%| | 70/79 [00:03<00:00, 25.65it/s]
 92%|| 73/79 [00:03<00:00, 26.04it/s]
 96%|| 76/79 [00:03<00:00, 26.67it/s]
100%|| 79/79 [00:03<00:00, 20.73it/s]
, 24.97it/s]
 70%|   | 55/79 [00:02<00:00, 25.45it/s]
 73%|  | 58/79 [00:02<00:00, 25.81it/s]
 77%|  | 61/79 [00:03<00:00, 26.01it/s]
 81%|  | 64/79 [00:03<00:00, 26.08it/s]
 85%| | 67/79 [00:03<00:00, 26.14it/s]
 89%| | 70/79 [00:03<00:00, 26.10it/s]
 92%|| 73/79 [00:03<00:00, 26.40it/s]
 96%|| 76/79 [00:03<00:00, 26.85it/s]
100%|| 79/79 [00:03<00:00, 20.73it/s]
, 25.31it/s]
 70%|   | 55/79 [00:02<00:00, 25.69it/s]
 73%|  | 58/79 [00:03<00:00, 25.92it/s]
 77%|  | 61/79 [00:03<00:00, 26.15it/s]
 81%|  | 64/79 [00:03<00:00, 26.16it/s]
 85%| | 67/79 [00:03<00:00, 26.16it/s]
 89%| | 70/79 [00:03<00:00, 25.87it/s]
 92%|| 73/79 [00:03<00:00, 26.23it/s]
 96%|| 76/79 [00:03<00:00, 26.53it/s]
100%|| 79/79 [00:03<00:00, 20.47it/s]
, 25.01it/s]
 70%|   | 55/79 [00:02<00:00, 25.31it/s]
 73%|  | 58/79 [00:03<00:00, 25.55it/s]
 77%|  | 61/79 [00:03<00:00, 25.64it/s]
 81%|  | 64/79 [00:03<00:00, 25.72it/s]
 85%| | 67/79 [00:03<00:00, 25.87it/s]
 89%| | 70/79 [00:03<00:00, 25.53it/s]
 92%|| 73/79 [00:03<00:00, 25.95it/s]
 96%|| 76/79 [00:03<00:00, 26.42it/s]
100%|| 79/79 [00:03<00:00, 20.40it/s]
13it/s]
 68%|   | 54/79 [00:02<00:00, 25.78it/s]
 72%|  | 57/79 [00:03<00:00, 26.08it/s]
 76%|  | 60/79 [00:03<00:00, 26.32it/s]
 80%|  | 63/79 [00:03<00:00, 26.24it/s]
 84%| | 66/79 [00:03<00:00, 26.31it/s]
 87%| | 69/79 [00:03<00:00, 26.31it/s]
 91%| | 72/79 [00:03<00:00, 26.42it/s]
 95%|| 75/79 [00:03<00:00, 26.98it/s]
100%|| 79/79 [00:03<00:00, 27.77it/s]
, 24.58it/s]
 70%|   | 55/79 [00:02<00:00, 24.65it/s]
 73%|  | 58/79 [00:03<00:00, 24.95it/s]
 77%|  | 61/79 [00:03<00:00, 25.29it/s]
 81%|  | 64/79 [00:03<00:00, 25.25it/s]
 85%| | 67/79 [00:03<00:00, 25.47it/s]
 89%| | 70/79 [00:03<00:00, 25.24it/s]
 92%|| 73/79 [00:03<00:00, 25.83it/s]
 96%|| 76/79 [00:03<00:00, 26.52it/s]
100%|| 79/79 [00:03<00:00, 20.32it/s]
, 25.22it/s]
 70%|   | 55/79 [00:02<00:00, 25.45it/s]
 73%|  | 58/79 [00:03<00:00, 25.98it/s]
 77%|  | 61/79 [00:03<00:00, 26.04it/s]
 81%|  | 64/79 [00:03<00:00, 26.30it/s]
 85%| | 67/79 [00:03<00:00, 26.35it/s]
 89%| | 70/79 [00:03<00:00, 26.55it/s]
 92%|| 73/79 [00:03<00:00, 26.78it/s]
 96%|| 76/79 [00:03<00:00, 27.34it/s]
100%|| 79/79 [00:03<00:00, 28.03it/s]
, 24.81it/s]
 70%|   | 55/79 [00:02<00:00, 24.94it/s]
 73%|  | 58/79 [00:03<00:00, 25.21it/s]
 77%|  | 61/79 [00:03<00:00, 25.20it/s]
 81%|  | 64/79 [00:03<00:00, 25.43it/s]
 85%| | 67/79 [00:03<00:00, 25.30it/s]
 89%| | 70/79 [00:03<00:00, 25.37it/s]
 92%|| 73/79 [00:03<00:00, 25.46it/s]
 96%|| 76/79 [00:03<00:00, 26.22it/s]
100%|| 79/79 [00:03<00:00, 27.09it/s]
, 24.41it/s]
 70%|   | 55/79 [00:02<00:00, 24.79it/s]
 73%|  | 58/79 [00:03<00:00, 24.97it/s]
 77%|  | 61/79 [00:03<00:00, 25.30it/s]
 81%|  | 64/79 [00:03<00:00, 25.43it/s]
 85%| | 67/79 [00:03<00:00, 25.50it/s]
 89%| | 70/79 [00:03<00:00, 25.58it/s]
 92%|| 73/79 [00:03<00:00, 25.97it/s]
 96%|| 76/79 [00:03<00:00, 26.71it/s]
100%|| 79/79 [00:03<00:00, 27.59it/s]
, 24.19it/s]
 70%|   | 55/79 [00:02<00:00, 24.71it/s]
 73%|  | 58/79 [00:03<00:00, 25.12it/s]
 77%|  | 61/79 [00:03<00:00, 25.09it/s]
 81%|  | 64/79 [00:03<00:00, 25.26it/s]
 85%| | 67/79 [00:03<00:00, 25.44it/s]
 89%| | 70/79 [00:03<00:00, 25.58it/s]
 92%|| 73/79 [00:03<00:00, 25.86it/s]
 96%|| 76/79 [00:03<00:00, 26.51it/s]
100%|| 79/79 [00:03<00:00, 27.22it/s]
, 24.92it/s]
 70%|   | 55/79 [00:02<00:00, 25.28it/s]
 73%|  | 58/79 [00:03<00:00, 25.76it/s]
 77%|  | 61/79 [00:03<00:00, 25.64it/s]
 81%|  | 64/79 [00:03<00:00, 25.79it/s]
 85%| | 67/79 [00:03<00:00, 25.58it/s]
 89%| | 70/79 [00:03<00:00, 25.90it/s]
 92%|| 73/79 [00:03<00:00, 25.81it/s]
 96%|| 76/79 [00:03<00:00, 26.33it/s]
100%|| 79/79 [00:03<00:00, 27.12it/s]
, 24.79it/s]
 70%|   | 55/79 [00:02<00:00, 25.32it/s]
 73%|  | 58/79 [00:03<00:00, 25.92it/s]
 77%|  | 61/79 [00:03<00:00, 25.79it/s]
 81%|  | 64/79 [00:03<00:00, 25.96it/s]
 85%| | 67/79 [00:03<00:00, 26.03it/s]
 89%| | 70/79 [00:03<00:00, 26.21it/s]
 92%|| 73/79 [00:03<00:00, 26.41it/s]
 97%|| 77/79 [00:03<00:00, 27.29it/s]
100%|| 79/79 [00:03<00:00, 20.07it/s]
, 24.43it/s]
 70%|   | 55/79 [00:02<00:00, 24.91it/s]
 73%|  | 58/79 [00:03<00:00, 25.36it/s]
 77%|  | 61/79 [00:03<00:00, 25.17it/s]
 81%|  | 64/79 [00:03<00:00, 25.28it/s]
 85%| | 67/79 [00:03<00:00, 25.30it/s]
 89%| | 70/79 [00:03<00:00, 25.39it/s]
 92%|| 73/79 [00:03<00:00, 25.59it/s]
 96%|| 76/79 [00:03<00:00, 26.25it/s]
100%|| 79/79 [00:03<00:00, 27.16it/s]
, 24.66it/s]
 70%|   | 55/79 [00:02<00:00, 24.93it/s]
 73%|  | 58/79 [00:03<00:00, 25.21it/s]
 77%|  | 61/79 [00:03<00:00, 25.53it/s]
 81%|  | 64/79 [00:03<00:00, 25.54it/s]
 85%| | 67/79 [00:03<00:00, 25.59it/s]
 89%| | 70/79 [00:03<00:00, 25.66it/s]
 92%|| 73/79 [00:03<00:00, 25.84it/s]
 96%|| 76/79 [00:03<00:00, 26.45it/s]
100%|| 79/79 [00:03<00:00, 27.39it/s]
, 24.25it/s]
 70%|   | 55/79 [00:02<00:00, 24.65it/s]
 73%|  | 58/79 [00:03<00:00, 24.87it/s]
 77%|  | 61/79 [00:03<00:00, 24.88it/s]
 81%|  | 64/79 [00:03<00:00, 25.02it/s]
 85%| | 67/79 [00:03<00:00, 24.93it/s]
 89%| | 70/79 [00:03<00:00, 25.26it/s]
 92%|| 73/79 [00:03<00:00, 25.55it/s]
 96%|| 76/79 [00:03<00:00, 26.28it/s]
100%|| 79/79 [00:03<00:00, 19.99it/s]
, 23.81it/s]
 70%|   | 55/79 [00:02<00:00, 24.31it/s]
 73%|  | 58/79 [00:03<00:00, 24.51it/s]
 77%|  | 61/79 [00:03<00:00, 24.50it/s]
 81%|  | 64/79 [00:03<00:00, 24.84it/s]
 85%| | 67/79 [00:03<00:00, 25.21it/s]
 89%| | 70/79 [00:03<00:00, 25.49it/s]
 92%|| 73/79 [00:03<00:00, 25.86it/s]
 96%|| 76/79 [00:03<00:00, 26.72it/s]
100%|| 79/79 [00:03<00:00, 27.59it/s]
, 24.50it/s]
 70%|   | 55/79 [00:03<00:00, 24.99it/s]
 73%|  | 58/79 [00:03<00:00, 25.39it/s]
 77%|  | 61/79 [00:03<00:00, 25.69it/s]
 81%|  | 64/79 [00:03<00:00, 25.59it/s]
 85%| | 67/79 [00:03<00:00, 25.47it/s]
 89%| | 70/79 [00:03<00:00, 25.61it/s]
 92%|| 73/79 [00:03<00:00, 25.76it/s]
 96%|| 76/79 [00:03<00:00, 26.54it/s]
100%|| 79/79 [00:03<00:00, 27.33it/s]
, 24.48it/s]
 70%|   | 55/79 [00:02<00:00, 24.69it/s]
 73%|  | 58/79 [00:03<00:00, 24.83it/s]
 77%|  | 61/79 [00:03<00:00, 25.31it/s]
 81%|  | 64/79 [00:03<00:00, 25.52it/s]
 85%| | 67/79 [00:03<00:00, 25.49it/s]
 89%| | 70/79 [00:03<00:00, 25.42it/s]
 92%|| 73/79 [00:03<00:00, 25.79it/s]
 96%|| 76/79 [00:03<00:00, 26.70it/s]
100%|| 79/79 [00:03<00:00, 26.90it/s]
, 24.14it/s]
 70%|   | 55/79 [00:02<00:00, 24.66it/s]
 73%|  | 58/79 [00:03<00:00, 25.12it/s]
 77%|  | 61/79 [00:03<00:00, 24.31it/s]
 81%|  | 64/79 [00:03<00:00, 24.51it/s]
 85%| | 67/79 [00:03<00:00, 24.77it/s]
 89%| | 70/79 [00:03<00:00, 24.79it/s]
 92%|| 73/79 [00:03<00:00, 25.21it/s]
 96%|| 76/79 [00:03<00:00, 25.81it/s]
100%|| 79/79 [00:03<00:00, 26.93it/s]
, 23.66it/s]
 70%|   | 55/79 [00:03<00:00, 24.20it/s]
 73%|  | 58/79 [00:03<00:00, 24.59it/s]
 77%|  | 61/79 [00:03<00:00, 24.87it/s]
 81%|  | 64/79 [00:03<00:00, 24.99it/s]
 85%| | 67/79 [00:03<00:00, 25.20it/s]
 89%| | 70/79 [00:03<00:00, 25.22it/s]
 92%|| 73/79 [00:03<00:00, 25.73it/s]
 96%|| 76/79 [00:03<00:00, 26.39it/s]
100%|| 79/79 [00:03<00:00, 27.36it/s]
, 23.91it/s]
 70%|   | 55/79 [00:03<00:00, 24.65it/s]
 73%|  | 58/79 [00:03<00:00, 24.52it/s]
 77%|  | 61/79 [00:03<00:00, 24.73it/s]
 81%|  | 64/79 [00:03<00:00, 24.96it/s]
 85%| | 67/79 [00:03<00:00, 25.20it/s]
 89%| | 70/79 [00:03<00:00, 25.20it/s]
 92%|| 73/79 [00:03<00:00, 25.61it/s]
 96%|| 76/79 [00:03<00:00, 26.35it/s]
100%|| 79/79 [00:03<00:00, 27.19it/s]
55it/s]
 68%|   | 54/79 [00:02<00:01, 23.93it/s]
 72%|  | 57/79 [00:03<00:00, 24.14it/s]
 76%|  | 60/79 [00:03<00:00, 24.64it/s]
 80%|  | 63/79 [00:03<00:00, 24.51it/s]
 84%| | 66/79 [00:03<00:00, 24.92it/s]
 87%| | 69/79 [00:03<00:00, 25.03it/s]
 91%| | 72/79 [00:03<00:00, 24.85it/s]
 95%|| 75/79 [00:03<00:00, 25.66it/s]
 99%|| 78/79 [00:03<00:00, 26.30it/s]
100%|| 79/79 [00:04<00:00, 19.59it/s]
, 23.93it/s]
 70%|   | 55/79 [00:03<00:00, 24.10it/s]
 73%|  | 58/79 [00:03<00:00, 24.34it/s]
 77%|  | 61/79 [00:03<00:00, 24.40it/s]
 81%|  | 64/79 [00:03<00:00, 24.44it/s]
 85%| | 67/79 [00:03<00:00, 24.71it/s]
 89%| | 70/79 [00:03<00:00, 24.89it/s]
 92%|| 73/79 [00:03<00:00, 25.33it/s]
 96%|| 76/79 [00:03<00:00, 26.00it/s]
100%|| 79/79 [00:03<00:00, 26.92it/s]
, 23.97it/s]
 70%|   | 55/79 [00:03<00:00, 24.04it/s]
 73%|  | 58/79 [00:03<00:00, 24.23it/s]
 77%|  | 61/79 [00:03<00:00, 24.75it/s]
 81%|  | 64/79 [00:03<00:00, 24.82it/s]
 85%| | 67/79 [00:03<00:00, 25.07it/s]
 89%| | 70/79 [00:03<00:00, 25.35it/s]
 92%|| 73/79 [00:03<00:00, 25.89it/s]
 96%|| 76/79 [00:03<00:00, 26.67it/s]
100%|| 79/79 [00:04<00:00, 19.27it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:01, 23.86it/s]
 73%|  | 58/79 [00:03<00:00, 24.35it/s]
 77%|  | 61/79 [00:03<00:00, 24.56it/s]
 81%|  | 64/79 [00:03<00:00, 24.70it/s]
 85%| | 67/79 [00:03<00:00, 24.80it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 25.13it/s]
 96%|| 76/79 [00:03<00:00, 25.86it/s]
100%|| 79/79 [00:03<00:00, 26.79it/s]
, 23.88it/s]
 70%|   | 55/79 [00:03<00:00, 24.44it/s]
 73%|  | 58/79 [00:03<00:00, 24.69it/s]
 77%|  | 61/79 [00:03<00:00, 24.91it/s]
 81%|  | 64/79 [00:03<00:00, 25.05it/s]
 85%| | 67/79 [00:03<00:00, 25.26it/s]
 89%| | 70/79 [00:03<00:00, 24.95it/s]
 92%|| 73/79 [00:03<00:00, 25.39it/s]
 96%|| 76/79 [00:03<00:00, 25.94it/s]
100%|| 79/79 [00:04<00:00, 26.71it/s]
, 23.16it/s]
 70%|   | 55/79 [00:03<00:01, 23.56it/s]
 73%|  | 58/79 [00:03<00:00, 24.13it/s]
 77%|  | 61/79 [00:03<00:00, 23.90it/s]
 81%|  | 64/79 [00:03<00:00, 24.07it/s]
 85%| | 67/79 [00:03<00:00, 24.45it/s]
 89%| | 70/79 [00:03<00:00, 24.60it/s]
 92%|| 73/79 [00:03<00:00, 24.97it/s]
 96%|| 76/79 [00:03<00:00, 25.69it/s]
100%|| 79/79 [00:04<00:00, 26.57it/s]
, 23.20it/s]
 70%|   | 55/79 [00:03<00:01, 23.68it/s]
 73%|  | 58/79 [00:03<00:00, 24.08it/s]
 77%|  | 61/79 [00:03<00:00, 24.31it/s]
 81%|  | 64/79 [00:03<00:00, 24.42it/s]
 85%| | 67/79 [00:03<00:00, 24.49it/s]
 89%| | 70/79 [00:03<00:00, 24.56it/s]
 92%|| 73/79 [00:03<00:00, 24.78it/s]
 96%|| 76/79 [00:03<00:00, 25.67it/s]
100%|| 79/79 [00:04<00:00, 26.34it/s]
, 23.36it/s]
 70%|   | 55/79 [00:03<00:01, 23.86it/s]
 73%|  | 58/79 [00:03<00:00, 24.17it/s]
 77%|  | 61/79 [00:03<00:00, 24.44it/s]
 81%|  | 64/79 [00:03<00:00, 24.57it/s]
 85%| | 67/79 [00:03<00:00, 24.70it/s]
 89%| | 70/79 [00:03<00:00, 24.84it/s]
 92%|| 73/79 [00:03<00:00, 25.11it/s]
 96%|| 76/79 [00:03<00:00, 25.81it/s]
100%|| 79/79 [00:04<00:00, 26.60it/s]
, 23.63it/s]
 70%|   | 55/79 [00:03<00:01, 23.79it/s]
 73%|  | 58/79 [00:03<00:00, 24.00it/s]
 77%|  | 61/79 [00:03<00:00, 23.79it/s]
 81%|  | 64/79 [00:03<00:00, 23.90it/s]
 85%| | 67/79 [00:03<00:00, 23.94it/s]
 89%| | 70/79 [00:03<00:00, 24.19it/s]
 92%|| 73/79 [00:03<00:00, 24.58it/s]
 96%|| 76/79 [00:03<00:00, 25.43it/s]
100%|| 79/79 [00:04<00:00, 26.40it/s]
, 23.46it/s]
 70%|   | 55/79 [00:03<00:00, 24.02it/s]
 73%|  | 58/79 [00:03<00:00, 24.26it/s]
 77%|  | 61/79 [00:03<00:00, 24.59it/s]
 81%|  | 64/79 [00:03<00:00, 24.73it/s]
 85%| | 67/79 [00:03<00:00, 24.92it/s]
 89%| | 70/79 [00:03<00:00, 25.01it/s]
 92%|| 73/79 [00:03<00:00, 25.25it/s]
 96%|| 76/79 [00:03<00:00, 25.83it/s]
100%|| 79/79 [00:04<00:00, 26.50it/s]
, 23.49it/s]
 70%|   | 55/79 [00:03<00:01, 23.75it/s]
 73%|  | 58/79 [00:03<00:00, 24.07it/s]
 77%|  | 61/79 [00:03<00:00, 24.41it/s]
 81%|  | 64/79 [00:03<00:00, 24.59it/s]
 85%| | 67/79 [00:03<00:00, 24.42it/s]
 89%| | 70/79 [00:03<00:00, 24.26it/s]
 92%|| 73/79 [00:03<00:00, 25.03it/s]
 96%|| 76/79 [00:03<00:00, 25.74it/s]
100%|| 79/79 [00:04<00:00, 26.67it/s]
2020-06-23 16:54:37,472 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.173621 (0.02671117706298828 s / img per device, on 32 devices)
2020-06-23 16:54:37,492 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:54:37,492 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:54:37,512 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592956486083, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 4, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592956486084, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 4}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:54:47,070 maskrcnn_benchmark.trainer INFO: eta: 1:19:45  iter: 2760  loss: 0.7640 (0.9255)  loss_classifier: 0.2586 (0.3496)  loss_box_reg: 0.1192 (0.1440)  loss_mask: 0.2862 (0.3557)  loss_objectness: 0.0230 (0.0520)  loss_rpn_box_reg: 0.0126 (0.0242)  time: 0.1104 (0.1285)  data: 0.0014 (0.0205)  lr: 0.160000  max mem: 5148
2020-06-23 16:54:49,215 maskrcnn_benchmark.trainer INFO: eta: 1:19:37  iter: 2780  loss: 0.7050 (0.9236)  loss_classifier: 0.2521 (0.3489)  loss_box_reg: 0.1114 (0.1438)  loss_mask: 0.2582 (0.3550)  loss_objectness: 0.0213 (0.0518)  loss_rpn_box_reg: 0.0075 (0.0242)  time: 0.1066 (0.1284)  data: 0.0014 (0.0203)  lr: 0.160000  max mem: 5148
2020-06-23 16:54:51,367 maskrcnn_benchmark.trainer INFO: eta: 1:19:29  iter: 2800  loss: 0.8797 (0.9230)  loss_classifier: 0.2889 (0.3486)  loss_box_reg: 0.1562 (0.1438)  loss_mask: 0.2911 (0.3547)  loss_objectness: 0.0319 (0.0518)  loss_rpn_box_reg: 0.0180 (0.0242)  time: 0.1065 (0.1282)  data: 0.0016 (0.0202)  lr: 0.160000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.74s)
2020-06-23 16:54:53,508 maskrcnn_benchmark.trainer INFO: eta: 1:19:21  iter: 2820  loss: 0.7624 (0.9218)  loss_classifier: 0.2618 (0.3480)  loss_box_reg: 0.1334 (0.1437)  loss_mask: 0.3092 (0.3543)  loss_objectness: 0.0253 (0.0517)  loss_rpn_box_reg: 0.0092 (0.0241)  time: 0.1063 (0.1281)  data: 0.0014 (0.0201)  lr: 0.160000  max mem: 5148
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.65s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.23483
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.42332
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.23999
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13612
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.26750
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.29954
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.22884
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.37266
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.39211
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22438
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.43619
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49923
2020-06-23 16:54:55,639 maskrcnn_benchmark.trainer INFO: eta: 1:19:12  iter: 2840  loss: 0.7393 (0.9205)  loss_classifier: 0.2484 (0.3474)  loss_box_reg: 0.1126 (0.1435)  loss_mask: 0.3075 (0.3540)  loss_objectness: 0.0195 (0.0515)  loss_rpn_box_reg: 0.0102 (0.0241)  time: 0.1066 (0.1279)  data: 0.0015 (0.0199)  lr: 0.160000  max mem: 5148
2020-06-23 16:54:57,797 maskrcnn_benchmark.trainer INFO: eta: 1:19:05  iter: 2860  loss: 0.6992 (0.9192)  loss_classifier: 0.2656 (0.3469)  loss_box_reg: 0.1185 (0.1434)  loss_mask: 0.2993 (0.3535)  loss_objectness: 0.0265 (0.0514)  loss_rpn_box_reg: 0.0139 (0.0240)  time: 0.1068 (0.1278)  data: 0.0015 (0.0198)  lr: 0.160000  max mem: 5148
2020-06-23 16:54:59,974 maskrcnn_benchmark.trainer INFO: eta: 1:18:57  iter: 2880  loss: 0.6938 (0.9177)  loss_classifier: 0.2370 (0.3461)  loss_box_reg: 0.1022 (0.1432)  loss_mask: 0.2834 (0.3530)  loss_objectness: 0.0342 (0.0513)  loss_rpn_box_reg: 0.0117 (0.0240)  time: 0.1086 (0.1276)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:55:02,118 maskrcnn_benchmark.trainer INFO: eta: 1:18:49  iter: 2900  loss: 0.7014 (0.9163)  loss_classifier: 0.2412 (0.3455)  loss_box_reg: 0.0978 (0.1430)  loss_mask: 0.2954 (0.3527)  loss_objectness: 0.0279 (0.0512)  loss_rpn_box_reg: 0.0071 (0.0240)  time: 0.1058 (0.1275)  data: 0.0014 (0.0196)  lr: 0.160000  max mem: 5148
DONE (t=2.14s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:55:04,263 maskrcnn_benchmark.trainer INFO: eta: 1:18:42  iter: 2920  loss: 0.6535 (0.9150)  loss_classifier: 0.2398 (0.3448)  loss_box_reg: 0.0999 (0.1428)  loss_mask: 0.3002 (0.3523)  loss_objectness: 0.0261 (0.0512)  loss_rpn_box_reg: 0.0121 (0.0240)  time: 0.1067 (0.1274)  data: 0.0015 (0.0194)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:06,411 maskrcnn_benchmark.trainer INFO: eta: 1:18:34  iter: 2940  loss: 0.6902 (0.9137)  loss_classifier: 0.2412 (0.3442)  loss_box_reg: 0.0961 (0.1426)  loss_mask: 0.2996 (0.3519)  loss_objectness: 0.0210 (0.0511)  loss_rpn_box_reg: 0.0075 (0.0240)  time: 0.1065 (0.1272)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5148
DONE (t=2.77s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.23026
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.40246
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.23728
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.09660
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.25143
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.33994
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.22864
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.35793
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37455
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19357
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.42068
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49593
2020-06-23 16:55:06,894 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.2348329902481479, segm mAP: 0.23026209421735797
:::MLLOG {"namespace": "", "time_ms": 1592956506894, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.2348329902481479, "SEGM": 0.23026209421735797}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1592956506895, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 3}}
2020-06-23 16:55:08,709 maskrcnn_benchmark.trainer INFO: eta: 1:18:29  iter: 2960  loss: 0.7311 (0.9126)  loss_classifier: 0.2705 (0.3436)  loss_box_reg: 0.1276 (0.1424)  loss_mask: 0.2910 (0.3515)  loss_objectness: 0.0201 (0.0511)  loss_rpn_box_reg: 0.0171 (0.0240)  time: 0.1071 (0.1271)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:10,864 maskrcnn_benchmark.trainer INFO: eta: 1:18:21  iter: 2980  loss: 0.6387 (0.9107)  loss_classifier: 0.2148 (0.3428)  loss_box_reg: 0.0875 (0.1421)  loss_mask: 0.2797 (0.3510)  loss_objectness: 0.0166 (0.0509)  loss_rpn_box_reg: 0.0077 (0.0240)  time: 0.1078 (0.1270)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:13,020 maskrcnn_benchmark.trainer INFO: eta: 1:18:14  iter: 3000  loss: 0.8103 (0.9100)  loss_classifier: 0.2850 (0.3424)  loss_box_reg: 0.1213 (0.1420)  loss_mask: 0.3135 (0.3507)  loss_objectness: 0.0357 (0.0508)  loss_rpn_box_reg: 0.0110 (0.0239)  time: 0.1073 (0.1269)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:15,203 maskrcnn_benchmark.trainer INFO: eta: 1:18:07  iter: 3020  loss: 0.7541 (0.9091)  loss_classifier: 0.2605 (0.3420)  loss_box_reg: 0.1247 (0.1419)  loss_mask: 0.2955 (0.3504)  loss_objectness: 0.0330 (0.0508)  loss_rpn_box_reg: 0.0179 (0.0240)  time: 0.1080 (0.1268)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:17,361 maskrcnn_benchmark.trainer INFO: eta: 1:18:00  iter: 3040  loss: 0.7564 (0.9084)  loss_classifier: 0.2737 (0.3416)  loss_box_reg: 0.1436 (0.1419)  loss_mask: 0.2981 (0.3500)  loss_objectness: 0.0316 (0.0508)  loss_rpn_box_reg: 0.0166 (0.0240)  time: 0.1067 (0.1266)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:19,527 maskrcnn_benchmark.trainer INFO: eta: 1:17:53  iter: 3060  loss: 0.6287 (0.9068)  loss_classifier: 0.2165 (0.3409)  loss_box_reg: 0.0881 (0.1416)  loss_mask: 0.2714 (0.3496)  loss_objectness: 0.0318 (0.0507)  loss_rpn_box_reg: 0.0130 (0.0240)  time: 0.1075 (0.1265)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:21,675 maskrcnn_benchmark.trainer INFO: eta: 1:17:46  iter: 3080  loss: 0.7679 (0.9060)  loss_classifier: 0.2644 (0.3405)  loss_box_reg: 0.1286 (0.1416)  loss_mask: 0.2977 (0.3493)  loss_objectness: 0.0293 (0.0506)  loss_rpn_box_reg: 0.0126 (0.0240)  time: 0.1072 (0.1264)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:23,825 maskrcnn_benchmark.trainer INFO: eta: 1:17:39  iter: 3100  loss: 0.7926 (0.9052)  loss_classifier: 0.2919 (0.3401)  loss_box_reg: 0.1295 (0.1415)  loss_mask: 0.2923 (0.3490)  loss_objectness: 0.0194 (0.0505)  loss_rpn_box_reg: 0.0182 (0.0241)  time: 0.1070 (0.1263)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:25,987 maskrcnn_benchmark.trainer INFO: eta: 1:17:32  iter: 3120  loss: 0.7562 (0.9044)  loss_classifier: 0.2738 (0.3398)  loss_box_reg: 0.1199 (0.1413)  loss_mask: 0.2960 (0.3487)  loss_objectness: 0.0234 (0.0505)  loss_rpn_box_reg: 0.0088 (0.0240)  time: 0.1080 (0.1262)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:28,168 maskrcnn_benchmark.trainer INFO: eta: 1:17:25  iter: 3140  loss: 0.7291 (0.9032)  loss_classifier: 0.2583 (0.3393)  loss_box_reg: 0.1101 (0.1412)  loss_mask: 0.2964 (0.3484)  loss_objectness: 0.0244 (0.0504)  loss_rpn_box_reg: 0.0101 (0.0240)  time: 0.1089 (0.1260)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:30,340 maskrcnn_benchmark.trainer INFO: eta: 1:17:19  iter: 3160  loss: 0.6695 (0.9020)  loss_classifier: 0.2212 (0.3388)  loss_box_reg: 0.1159 (0.1410)  loss_mask: 0.2879 (0.3480)  loss_objectness: 0.0240 (0.0503)  loss_rpn_box_reg: 0.0091 (0.0239)  time: 0.1079 (0.1259)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:32,488 maskrcnn_benchmark.trainer INFO: eta: 1:17:12  iter: 3180  loss: 0.7807 (0.9010)  loss_classifier: 0.2602 (0.3384)  loss_box_reg: 0.1183 (0.1409)  loss_mask: 0.3015 (0.3476)  loss_objectness: 0.0234 (0.0502)  loss_rpn_box_reg: 0.0118 (0.0239)  time: 0.1073 (0.1258)  data: 0.0013 (0.0180)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:34,641 maskrcnn_benchmark.trainer INFO: eta: 1:17:05  iter: 3200  loss: 0.6198 (0.8994)  loss_classifier: 0.1962 (0.3376)  loss_box_reg: 0.0789 (0.1407)  loss_mask: 0.2781 (0.3472)  loss_objectness: 0.0199 (0.0501)  loss_rpn_box_reg: 0.0133 (0.0239)  time: 0.1079 (0.1257)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:36,793 maskrcnn_benchmark.trainer INFO: eta: 1:16:59  iter: 3220  loss: 0.7118 (0.8986)  loss_classifier: 0.2286 (0.3371)  loss_box_reg: 0.1278 (0.1405)  loss_mask: 0.2935 (0.3469)  loss_objectness: 0.0275 (0.0500)  loss_rpn_box_reg: 0.0165 (0.0239)  time: 0.1079 (0.1256)  data: 0.0013 (0.0178)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:38,920 maskrcnn_benchmark.trainer INFO: eta: 1:16:52  iter: 3240  loss: 0.7327 (0.8975)  loss_classifier: 0.2712 (0.3367)  loss_box_reg: 0.1032 (0.1404)  loss_mask: 0.2841 (0.3466)  loss_objectness: 0.0266 (0.0499)  loss_rpn_box_reg: 0.0088 (0.0239)  time: 0.1058 (0.1255)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:41,072 maskrcnn_benchmark.trainer INFO: eta: 1:16:45  iter: 3260  loss: 0.6586 (0.8962)  loss_classifier: 0.2044 (0.3360)  loss_box_reg: 0.1086 (0.1402)  loss_mask: 0.2761 (0.3462)  loss_objectness: 0.0272 (0.0499)  loss_rpn_box_reg: 0.0235 (0.0239)  time: 0.1071 (0.1254)  data: 0.0013 (0.0176)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:43,248 maskrcnn_benchmark.trainer INFO: eta: 1:16:39  iter: 3280  loss: 0.7990 (0.8954)  loss_classifier: 0.2767 (0.3356)  loss_box_reg: 0.1300 (0.1401)  loss_mask: 0.2832 (0.3459)  loss_objectness: 0.0222 (0.0498)  loss_rpn_box_reg: 0.0174 (0.0239)  time: 0.1073 (0.1253)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:45,406 maskrcnn_benchmark.trainer INFO: eta: 1:16:33  iter: 3300  loss: 0.6355 (0.8939)  loss_classifier: 0.2266 (0.3350)  loss_box_reg: 0.0843 (0.1399)  loss_mask: 0.2623 (0.3455)  loss_objectness: 0.0224 (0.0497)  loss_rpn_box_reg: 0.0084 (0.0239)  time: 0.1071 (0.1252)  data: 0.0013 (0.0174)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:47,566 maskrcnn_benchmark.trainer INFO: eta: 1:16:26  iter: 3320  loss: 0.7016 (0.8928)  loss_classifier: 0.2298 (0.3345)  loss_box_reg: 0.1082 (0.1398)  loss_mask: 0.3024 (0.3451)  loss_objectness: 0.0230 (0.0495)  loss_rpn_box_reg: 0.0080 (0.0238)  time: 0.1077 (0.1251)  data: 0.0013 (0.0173)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:49,712 maskrcnn_benchmark.trainer INFO: eta: 1:16:20  iter: 3340  loss: 0.6890 (0.8915)  loss_classifier: 0.2139 (0.3339)  loss_box_reg: 0.0945 (0.1396)  loss_mask: 0.3033 (0.3448)  loss_objectness: 0.0263 (0.0494)  loss_rpn_box_reg: 0.0116 (0.0238)  time: 0.1070 (0.1249)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:51,882 maskrcnn_benchmark.trainer INFO: eta: 1:16:14  iter: 3360  loss: 0.7013 (0.8907)  loss_classifier: 0.2565 (0.3336)  loss_box_reg: 0.1299 (0.1395)  loss_mask: 0.2931 (0.3445)  loss_objectness: 0.0254 (0.0493)  loss_rpn_box_reg: 0.0139 (0.0237)  time: 0.1080 (0.1248)  data: 0.0014 (0.0171)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:54,032 maskrcnn_benchmark.trainer INFO: eta: 1:16:08  iter: 3380  loss: 0.7740 (0.8900)  loss_classifier: 0.2898 (0.3334)  loss_box_reg: 0.1271 (0.1395)  loss_mask: 0.3056 (0.3442)  loss_objectness: 0.0216 (0.0492)  loss_rpn_box_reg: 0.0078 (0.0237)  time: 0.1069 (0.1247)  data: 0.0014 (0.0170)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:56,194 maskrcnn_benchmark.trainer INFO: eta: 1:16:02  iter: 3400  loss: 0.8571 (0.8897)  loss_classifier: 0.2737 (0.3333)  loss_box_reg: 0.1367 (0.1395)  loss_mask: 0.2934 (0.3440)  loss_objectness: 0.0327 (0.0492)  loss_rpn_box_reg: 0.0217 (0.0237)  time: 0.1066 (0.1246)  data: 0.0014 (0.0169)  lr: 0.160000  max mem: 5148
2020-06-23 16:55:58,340 maskrcnn_benchmark.trainer INFO: eta: 1:15:55  iter: 3420  loss: 0.7252 (0.8892)  loss_classifier: 0.2693 (0.3330)  loss_box_reg: 0.1173 (0.1395)  loss_mask: 0.2928 (0.3437)  loss_objectness: 0.0270 (0.0492)  loss_rpn_box_reg: 0.0187 (0.0237)  time: 0.1077 (0.1245)  data: 0.0014 (0.0168)  lr: 0.160000  max mem: 5148
2020-06-23 16:56:00,495 maskrcnn_benchmark.trainer INFO: eta: 1:15:49  iter: 3440  loss: 0.7297 (0.8883)  loss_classifier: 0.2673 (0.3327)  loss_box_reg: 0.1128 (0.1394)  loss_mask: 0.2919 (0.3435)  loss_objectness: 0.0177 (0.0491)  loss_rpn_box_reg: 0.0096 (0.0237)  time: 0.1077 (0.1244)  data: 0.0014 (0.0167)  lr: 0.160000  max mem: 5148
2020-06-23 16:56:02,631 maskrcnn_benchmark.trainer INFO: eta: 1:15:43  iter: 3460  loss: 0.7159 (0.8872)  loss_classifier: 0.2243 (0.3321)  loss_box_reg: 0.1185 (0.1393)  loss_mask: 0.2870 (0.3432)  loss_objectness: 0.0288 (0.0490)  loss_rpn_box_reg: 0.0143 (0.0236)  time: 0.1064 (0.1243)  data: 0.0014 (0.0166)  lr: 0.160000  max mem: 5148
2020-06-23 16:56:04,784 maskrcnn_benchmark.trainer INFO: eta: 1:15:37  iter: 3480  loss: 0.7746 (0.8865)  loss_classifier: 0.2780 (0.3319)  loss_box_reg: 0.1196 (0.1392)  loss_mask: 0.2841 (0.3429)  loss_objectness: 0.0298 (0.0489)  loss_rpn_box_reg: 0.0192 (0.0236)  time: 0.1076 (0.1243)  data: 0.0014 (0.0165)  lr: 0.160000  max mem: 5148
2020-06-23 16:56:06,948 maskrcnn_benchmark.trainer INFO: eta: 1:15:31  iter: 3500  loss: 0.6831 (0.8856)  loss_classifier: 0.2509 (0.3315)  loss_box_reg: 0.1193 (0.1391)  loss_mask: 0.2844 (0.3427)  loss_objectness: 0.0208 (0.0488)  loss_rpn_box_reg: 0.0085 (0.0236)  time: 0.1077 (0.1242)  data: 0.0014 (0.0165)  lr: 0.160000  max mem: 5148
2020-06-23 16:56:09,129 maskrcnn_benchmark.trainer INFO: eta: 1:15:26  iter: 3520  loss: 0.7925 (0.8850)  loss_classifier: 0.2924 (0.3312)  loss_box_reg: 0.1264 (0.1391)  loss_mask: 0.3049 (0.3424)  loss_objectness: 0.0283 (0.0488)  loss_rpn_box_reg: 0.0127 (0.0236)  time: 0.1078 (0.1241)  data: 0.0013 (0.0164)  lr: 0.160000  max mem: 5148
2020-06-23 16:56:11,287 maskrcnn_benchmark.trainer INFO: eta: 1:15:20  iter: 3540  loss: 0.6862 (0.8845)  loss_classifier: 0.2321 (0.3310)  loss_box_reg: 0.1078 (0.1390)  loss_mask: 0.2916 (0.3421)  loss_objectness: 0.0274 (0.0488)  loss_rpn_box_reg: 0.0092 (0.0236)  time: 0.1084 (0.1240)  data: 0.0014 (0.0163)  lr: 0.160000  max mem: 5148
2020-06-23 16:56:13,433 maskrcnn_benchmark.trainer INFO: eta: 1:15:14  iter: 3560  loss: 0.7911 (0.8840)  loss_classifier: 0.3140 (0.3310)  loss_box_reg: 0.1158 (0.1389)  loss_mask: 0.2864 (0.3417)  loss_objectness: 0.0250 (0.0488)  loss_rpn_box_reg: 0.0141 (0.0236)  time: 0.1065 (0.1239)  data: 0.0014 (0.0162)  lr: 0.160000  max mem: 5148
2020-06-23 16:56:15,588 maskrcnn_benchmark.trainer INFO: eta: 1:15:08  iter: 3580  loss: 0.7389 (0.8835)  loss_classifier: 0.2529 (0.3308)  loss_box_reg: 0.1342 (0.1390)  loss_mask: 0.2904 (0.3415)  loss_objectness: 0.0322 (0.0487)  loss_rpn_box_reg: 0.0149 (0.0235)  time: 0.1074 (0.1238)  data: 0.0014 (0.0161)  lr: 0.160000  max mem: 5148
2020-06-23 16:56:17,761 maskrcnn_benchmark.trainer INFO: eta: 1:15:03  iter: 3600  loss: 0.7004 (0.8825)  loss_classifier: 0.2495 (0.3304)  loss_box_reg: 0.1145 (0.1388)  loss_mask: 0.2687 (0.3412)  loss_objectness: 0.0233 (0.0486)  loss_rpn_box_reg: 0.0061 (0.0235)  time: 0.1081 (0.1237)  data: 0.0013 (0.0160)  lr: 0.160000  max mem: 5148
2020-06-23 16:56:19,916 maskrcnn_benchmark.trainer INFO: eta: 1:14:57  iter: 3620  loss: 0.7722 (0.8820)  loss_classifier: 0.2564 (0.3301)  loss_box_reg: 0.1209 (0.1388)  loss_mask: 0.3026 (0.3410)  loss_objectness: 0.0342 (0.0486)  loss_rpn_box_reg: 0.0136 (0.0235)  time: 0.1081 (0.1236)  data: 0.0014 (0.0160)  lr: 0.160000  max mem: 5148
2020-06-23 16:56:22,085 maskrcnn_benchmark.trainer INFO: eta: 1:14:51  iter: 3640  loss: 0.6761 (0.8811)  loss_classifier: 0.2486 (0.3298)  loss_box_reg: 0.1151 (0.1387)  loss_mask: 0.2788 (0.3406)  loss_objectness: 0.0191 (0.0485)  loss_rpn_box_reg: 0.0099 (0.0235)  time: 0.1080 (0.1235)  data: 0.0013 (0.0159)  lr: 0.160000  max mem: 5148
2020-06-23 16:56:24,239 maskrcnn_benchmark.trainer INFO: eta: 1:14:46  iter: 3660  loss: 0.6795 (0.8801)  loss_classifier: 0.2298 (0.3293)  loss_box_reg: 0.0945 (0.1385)  loss_mask: 0.2616 (0.3402)  loss_objectness: 0.0273 (0.0485)  loss_rpn_box_reg: 0.0111 (0.0235)  time: 0.1071 (0.1235)  data: 0.0014 (0.0158)  lr: 0.160000  max mem: 5148
:::MLLOG {"namespace": "", "time_ms": 1592956585104, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1592956585105, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1592956585105, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 4}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 16:56:25,317 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
Done (t=0.28s)
creating index...
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
Done (t=0.30s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.31s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
2020-06-23 16:56:25,630 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:55,  1.40it/s]
  5%|         | 4/79 [00:00<00:38,  1.95it/s]
  9%|         | 7/79 [00:00<00:26,  2.70it/s]
 13%|        | 10/79 [00:01<00:18,  3.69it/s]
 16%|        | 13/79 [00:01<00:13,  4.97it/s]
 20%|        | 16/79 [00:01<00:09,  6.56it/s]
 24%|       | 19/79 [00:01<00:07,  8.46it/s]
 28%|       | 22/79 [00:01<00:05, 10.58it/s]
 32%|      | 25/79 [00:01<00:04, 12.86it/s]
 35%|      | 28/79 [00:01<00:03, 15.18it/s]
 39%|      | 31/79 [00:01<00:02, 17.40it/s]
 43%|     | 34/79 [00:02<00:02, 19.12it/s]
 47%|     | 37/79 [00:02<00:02, 20.63it/s]
 51%|     | 40/79 [00:02<00:01, 21.92it/s]
 54%|    | 43/79 [00:02<00:01, 22.97it/s]
 58%|    | 46/79 [00:02<00:01, 23.30it/s]
 62%|   | 49/79 [00:02<00:01, 24.17it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.27it/s]
 16%|        | 13/79 [00:01<00:14,  4.43it/s]
 20%|        | 16/79 [00:01<00:10,  5.89it/s]
 24%|       | 19/79 [00:01<00:07,  7.70it/s]
 28%|       | 22/79 [00:01<00:05,  9.75it/s]
 32%|      | 25/79 [00:01<00:04, 12.03it/s]
 35%|      | 28/79 [00:01<00:03, 14.32it/s]
 39%|      | 31/79 [00:01<00:02, 16.58it/s]
 43%|     | 34/79 [00:02<00:02, 18.46it/s]
 47%|     | 37/79 [00:02<00:02, 20.40it/s]
 51%|     | 40/79 [00:02<00:01, 21.88it/s]
 54%|    | 43/79 [00:02<00:01, 23.21it/s]
 58%|    | 46/79 [00:02<00:01, 23.87it/s]
 62%|   | 49/79 [00:02<00:01, 24.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:58,  1.32it/s]
  4%|         | 3/79 [00:00<00:41,  1.84it/s]
  8%|         | 6/79 [00:00<00:28,  2.54it/s]
 11%|        | 9/79 [00:01<00:20,  3.49it/s]
 15%|        | 12/79 [00:01<00:14,  4.71it/s]
 19%|        | 15/79 [00:01<00:10,  6.18it/s]
 23%|       | 18/79 [00:01<00:07,  8.01it/s]
 27%|       | 21/79 [00:01<00:05, 10.01it/s]
 30%|       | 24/79 [00:01<00:04, 12.23it/s]
 34%|      | 27/79 [00:01<00:03, 14.39it/s]
 38%|      | 30/79 [00:01<00:02, 16.48it/s]
 42%|     | 33/79 [00:02<00:02, 18.43it/s]
 46%|     | 36/79 [00:02<00:02, 19.96it/s]
 49%|     | 39/79 [00:02<00:01, 21.28it/s]
 53%|    | 42/79 [00:02<00:01, 22.25it/s]
 57%|    | 45/79 [00:02<00:01, 23.16it/s]
 61%|    | 48/79 [00:02<00:01, 23.85it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:43,  1.74it/s]
  9%|         | 7/79 [00:01<00:29,  2.42it/s]
 13%|        | 10/79 [00:01<00:20,  3.32it/s]
 16%|        | 13/79 [00:01<00:14,  4.49it/s]
 20%|        | 16/79 [00:01<00:10,  5.98it/s]
 24%|       | 19/79 [00:01<00:07,  7.76it/s]
 28%|       | 22/79 [00:01<00:05,  9.86it/s]
 32%|      | 25/79 [00:01<00:04, 12.06it/s]
 35%|      | 28/79 [00:01<00:03, 14.36it/s]
 39%|      | 31/79 [00:01<00:02, 16.58it/s]
 43%|     | 34/79 [00:02<00:02, 18.63it/s]
 47%|     | 37/79 [00:02<00:02, 20.24it/s]
 51%|     | 40/79 [00:02<00:01, 21.60it/s]
 54%|    | 43/79 [00:02<00:01, 22.70it/s]
 58%|    | 46/79 [00:02<00:01, 23.54it/s]
 62%|   | 49/79 [00:02<00:01, 24.31it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.29it/s]
  4%|         | 3/79 [00:00<00:42,  1.79it/s]
  8%|         | 6/79 [00:01<00:29,  2.48it/s]
 11%|        | 9/79 [00:01<00:20,  3.41it/s]
 15%|        | 12/79 [00:01<00:14,  4.60it/s]
 19%|        | 15/79 [00:01<00:10,  6.09it/s]
 23%|       | 18/79 [00:01<00:07,  7.88it/s]
 27%|       | 21/79 [00:01<00:05,  9.95it/s]
 30%|       | 24/79 [00:01<00:04, 12.10it/s]
 34%|      | 27/79 [00:01<00:03, 14.34it/s]
 38%|      | 30/79 [00:01<00:02, 16.57it/s]
 42%|     | 33/79 [00:02<00:02, 18.56it/s]
 46%|     | 36/79 [00:02<00:02, 20.31it/s]
 49%|     | 39/79 [00:02<00:01, 21.33it/s]
 53%|    | 42/79 [00:02<00:01, 22.46it/s]
 57%|    | 45/79 [00:02<00:01, 23.12it/s]
 61%|    | 48/79 [00:02<00:01, 23.58it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.27it/s]
  5%|         | 4/79 [00:00<00:42,  1.77it/s]
  9%|         | 7/79 [00:01<00:29,  2.46it/s]
 13%|        | 10/79 [00:01<00:20,  3.37it/s]
 16%|        | 13/79 [00:01<00:14,  4.55it/s]
 20%|        | 16/79 [00:01<00:10,  6.06it/s]
 24%|       | 19/79 [00:01<00:07,  7.85it/s]
 28%|       | 22/79 [00:01<00:05,  9.94it/s]
 32%|      | 25/79 [00:01<00:04, 12.18it/s]
 35%|      | 28/79 [00:01<00:03, 14.54it/s]
 39%|      | 31/79 [00:01<00:02, 16.83it/s]
 43%|     | 34/79 [00:02<00:02, 18.75it/s]
 47%|     | 37/79 [00:02<00:02, 20.55it/s]
 51%|     | 40/79 [00:02<00:01, 21.82it/s]
 54%|    | 43/79 [00:02<00:01, 22.94it/s]
 58%|    | 46/79 [00:02<00:01, 23.37it/s]
 62%|   | 49/79 [00:02<00:01, 24.06it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.27it/s]
  5%|         | 4/79 [00:00<00:42,  1.77it/s]
  9%|         | 7/79 [00:01<00:29,  2.45it/s]
 13%|        | 10/79 [00:01<00:20,  3.36it/s]
 16%|        | 13/79 [00:01<00:14,  4.55it/s]
 20%|        | 16/79 [00:01<00:10,  6.04it/s]
 24%|       | 19/79 [00:01<00:07,  7.81it/s]
 28%|       | 22/79 [00:01<00:05,  9.93it/s]
 32%|      | 25/79 [00:01<00:04, 12.22it/s]
 35%|      | 28/79 [00:01<00:03, 14.57it/s]
 39%|      | 31/79 [00:01<00:02, 16.78it/s]
 43%|     | 34/79 [00:02<00:02, 18.76it/s]
 47%|     | 37/79 [00:02<00:02, 20.59it/s]
 51%|     | 40/79 [00:02<00:01, 21.93it/s]
 54%|    | 43/79 [00:02<00:01, 23.22it/s]
 58%|    | 46/79 [00:02<00:01, 23.73it/s]
 62%|   | 49/79 [00:02<00:01, 24.23it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.54it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.84it/s]
 35%|      | 28/79 [00:01<00:03, 14.18it/s]
 39%|      | 31/79 [00:02<00:02, 16.40it/s]
 43%|     | 34/79 [00:02<00:02, 18.46it/s]
 47%|     | 37/79 [00:02<00:02, 20.19it/s]
 51%|     | 40/79 [00:02<00:01, 21.63it/s]
 54%|    | 43/79 [00:02<00:01, 22.88it/s]
 58%|    | 46/79 [00:02<00:01, 23.67it/s]
 62%|   | 49/79 [00:02<00:01, 24.34it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.42it/s]
 32%|      | 25/79 [00:01<00:04, 11.61it/s]
 35%|      | 28/79 [00:01<00:03, 13.95it/s]
 39%|      | 31/79 [00:02<00:02, 16.14it/s]
 43%|     | 34/79 [00:02<00:02, 18.17it/s]
 47%|     | 37/79 [00:02<00:02, 19.84it/s]
 51%|     | 40/79 [00:02<00:01, 21.39it/s]
 54%|    | 43/79 [00:02<00:01, 22.56it/s]
 58%|    | 46/79 [00:02<00:01, 23.32it/s]
 62%|   | 49/79 [00:02<00:01, 24.03it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.56it/s]
 28%|       | 22/79 [00:01<00:05,  9.61it/s]
 32%|      | 25/79 [00:01<00:04, 11.87it/s]
 35%|      | 28/79 [00:01<00:03, 14.21it/s]
 39%|      | 31/79 [00:01<00:02, 16.45it/s]
 43%|     | 34/79 [00:02<00:02, 18.53it/s]
 47%|     | 37/79 [00:02<00:02, 20.28it/s]
 51%|     | 40/79 [00:02<00:01, 21.67it/s]
 54%|    | 43/79 [00:02<00:01, 22.75it/s]
 58%|    | 46/79 [00:02<00:01, 23.53it/s]
 62%|   | 49/79 [00:02<00:01, 24.30it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.82it/s]
 24%|       | 19/79 [00:01<00:07,  7.60it/s]
 28%|       | 22/79 [00:01<00:05,  9.59it/s]
 32%|      | 25/79 [00:01<00:04, 11.79it/s]
 35%|      | 28/79 [00:01<00:03, 14.08it/s]
 39%|      | 31/79 [00:02<00:02, 16.36it/s]
 43%|     | 34/79 [00:02<00:02, 18.30it/s]
 47%|     | 37/79 [00:02<00:02, 19.88it/s]
 51%|     | 40/79 [00:02<00:01, 21.26it/s]
 54%|    | 43/79 [00:02<00:01, 22.62it/s]
 58%|    | 46/79 [00:02<00:01, 23.43it/s]
 62%|   | 49/79 [00:02<00:01, 24.04it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:00<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.17it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.31it/s]
 32%|      | 25/79 [00:01<00:04, 11.48it/s]
 35%|      | 28/79 [00:01<00:03, 13.81it/s]
 39%|      | 31/79 [00:02<00:02, 16.19it/s]
 43%|     | 34/79 [00:02<00:02, 18.23it/s]
 47%|     | 37/79 [00:02<00:02, 20.05it/s]
 51%|     | 40/79 [00:02<00:01, 21.39it/s]
 54%|    | 43/79 [00:02<00:01, 22.53it/s]
 58%|    | 46/79 [00:02<00:01, 23.52it/s]
 62%|   | 49/79 [00:02<00:01, 24.02it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  8%|         | 6/79 [00:01<00:31,  2.32it/s]
 11%|        | 9/79 [00:01<00:22,  3.17it/s]
 15%|        | 12/79 [00:01<00:15,  4.30it/s]
 19%|        | 15/79 [00:01<00:11,  5.72it/s]
 23%|       | 18/79 [00:01<00:08,  7.44it/s]
 27%|       | 21/79 [00:01<00:06,  9.41it/s]
 30%|       | 24/79 [00:01<00:04, 11.54it/s]
 34%|      | 27/79 [00:01<00:03, 13.75it/s]
 38%|      | 30/79 [00:02<00:03, 15.91it/s]
 42%|     | 33/79 [00:02<00:02, 17.83it/s]
 46%|     | 36/79 [00:02<00:02, 19.63it/s]
 49%|     | 39/79 [00:02<00:01, 21.20it/s]
 53%|    | 42/79 [00:02<00:01, 22.31it/s]
 57%|    | 45/79 [00:02<00:01, 23.13it/s]
 61%|    | 48/79 [00:02<00:01, 23.95it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.54it/s]
 35%|      | 28/79 [00:01<00:03, 13.87it/s]
 39%|      | 31/79 [00:02<00:02, 16.07it/s]
 43%|     | 34/79 [00:02<00:02, 17.98it/s]
 47%|     | 37/79 [00:02<00:02, 19.53it/s]
 51%|     | 40/79 [00:02<00:01, 21.07it/s]
 54%|    | 43/79 [00:02<00:01, 22.16it/s]
 58%|    | 46/79 [00:02<00:01, 22.96it/s]
 62%|   | 49/79 [00:02<00:01, 23.56it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  4%|         | 3/79 [00:01<00:49,  1.52it/s]
  8%|         | 6/79 [00:01<00:34,  2.11it/s]
 11%|        | 9/79 [00:01<00:24,  2.92it/s]
 15%|        | 12/79 [00:01<00:16,  3.98it/s]
 19%|        | 15/79 [00:01<00:12,  5.33it/s]
 23%|       | 18/79 [00:01<00:08,  7.00it/s]
 27%|       | 21/79 [00:01<00:06,  8.95it/s]
 30%|       | 24/79 [00:01<00:04, 11.13it/s]
 34%|      | 27/79 [00:01<00:03, 13.46it/s]
 38%|      | 30/79 [00:02<00:03, 15.73it/s]
 42%|     | 33/79 [00:02<00:02, 17.88it/s]
 46%|     | 36/79 [00:02<00:02, 19.76it/s]
 49%|     | 39/79 [00:02<00:01, 21.35it/s]
 53%|    | 42/79 [00:02<00:01, 22.70it/s]
 57%|    | 45/79 [00:02<00:01, 23.53it/s]
 61%|    | 48/79 [00:02<00:01, 24.33it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.44it/s]
 35%|      | 28/79 [00:01<00:03, 13.75it/s]
 39%|      | 31/79 [00:02<00:03, 15.88it/s]
 43%|     | 34/79 [00:02<00:02, 17.76it/s]
 47%|     | 37/79 [00:02<00:02, 19.49it/s]
 51%|     | 40/79 [00:02<00:01, 21.03it/s]
 54%|    | 43/79 [00:02<00:01, 22.05it/s]
 58%|    | 46/79 [00:02<00:01, 22.52it/s]
 62%|   | 49/79 [00:02<00:01, 23.35it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  8.98it/s]
 32%|      | 25/79 [00:01<00:04, 11.19it/s]
 35%|      | 28/79 [00:01<00:03, 13.55it/s]
 39%|      | 31/79 [00:02<00:03, 15.92it/s]
 43%|     | 34/79 [00:02<00:02, 18.03it/s]
 47%|     | 37/79 [00:02<00:02, 19.87it/s]
 51%|     | 40/79 [00:02<00:01, 21.35it/s]
 54%|    | 43/79 [00:02<00:01, 22.64it/s]
 58%|    | 46/79 [00:02<00:01, 23.51it/s]
 62%|   | 49/79 [00:02<00:01, 24.13it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.38it/s]
 32%|      | 25/79 [00:01<00:04, 11.50it/s]
 35%|      | 28/79 [00:01<00:03, 13.80it/s]
 39%|      | 31/79 [00:02<00:03, 15.95it/s]
 43%|     | 34/79 [00:02<00:02, 17.94it/s]
 47%|     | 37/79 [00:02<00:02, 19.50it/s]
 51%|     | 40/79 [00:02<00:01, 21.13it/s]
 54%|    | 43/79 [00:02<00:01, 22.35it/s]
 58%|    | 46/79 [00:02<00:01, 23.28it/s]
 62%|   | 49/79 [00:02<00:01, 23.98it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  4%|         | 3/79 [00:00<00:46,  1.64it/s]
  8%|         | 6/79 [00:01<00:32,  2.28it/s]
 11%|        | 9/79 [00:01<00:22,  3.13it/s]
 15%|        | 12/79 [00:01<00:15,  4.23it/s]
 19%|        | 15/79 [00:01<00:11,  5.63it/s]
 23%|       | 18/79 [00:01<00:08,  7.31it/s]
 27%|       | 21/79 [00:01<00:06,  9.25it/s]
 30%|       | 24/79 [00:01<00:04, 11.35it/s]
 34%|      | 27/79 [00:01<00:03, 13.49it/s]
 38%|      | 30/79 [00:02<00:03, 15.61it/s]
 42%|     | 33/79 [00:02<00:02, 17.38it/s]
 46%|     | 36/79 [00:02<00:02, 19.15it/s]
 49%|     | 39/79 [00:02<00:01, 20.23it/s]
 53%|    | 42/79 [00:02<00:01, 21.52it/s]
 57%|    | 45/79 [00:02<00:01, 22.46it/s]
 61%|    | 48/79 [00:02<00:01, 23.05it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:00<00:46,  1.63it/s]
  8%|         | 6/79 [00:01<00:32,  2.26it/s]
 11%|        | 9/79 [00:01<00:22,  3.11it/s]
 15%|        | 12/79 [00:01<00:15,  4.22it/s]
 19%|        | 15/79 [00:01<00:11,  5.61it/s]
 23%|       | 18/79 [00:01<00:08,  7.33it/s]
 27%|       | 21/79 [00:01<00:06,  9.30it/s]
 30%|       | 24/79 [00:01<00:04, 11.42it/s]
 34%|      | 27/79 [00:01<00:03, 13.63it/s]
 38%|      | 30/79 [00:02<00:03, 15.65it/s]
 42%|     | 33/79 [00:02<00:02, 17.56it/s]
 46%|     | 36/79 [00:02<00:02, 18.92it/s]
 49%|     | 39/79 [00:02<00:01, 20.24it/s]
 53%|    | 42/79 [00:02<00:01, 21.35it/s]
 57%|    | 45/79 [00:02<00:01, 22.39it/s]
 61%|    | 48/79 [00:02<00:01, 22.88it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:51,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.16it/s]
 24%|       | 19/79 [00:01<00:08,  6.78it/s]
 28%|       | 22/79 [00:01<00:06,  8.69it/s]
 32%|      | 25/79 [00:01<00:04, 10.83it/s]
 35%|      | 28/79 [00:02<00:03, 13.09it/s]
 39%|      | 31/79 [00:02<00:03, 15.40it/s]
 43%|     | 34/79 [00:02<00:02, 17.52it/s]
 47%|     | 37/79 [00:02<00:02, 19.39it/s]
 51%|     | 40/79 [00:02<00:01, 20.78it/s]
 54%|    | 43/79 [00:02<00:01, 22.13it/s]
 58%|    | 46/79 [00:02<00:01, 23.10it/s]
 62%|   | 49/79 [00:02<00:01, 23.66it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  4%|         | 3/79 [00:00<00:47,  1.60it/s]
  8%|         | 6/79 [00:01<00:33,  2.21it/s]
 11%|        | 9/79 [00:01<00:22,  3.05it/s]
 15%|        | 12/79 [00:01<00:16,  4.13it/s]
 19%|        | 15/79 [00:01<00:11,  5.51it/s]
 23%|       | 18/79 [00:01<00:08,  7.20it/s]
 27%|       | 21/79 [00:01<00:06,  9.17it/s]
 30%|       | 24/79 [00:01<00:04, 11.23it/s]
 34%|      | 27/79 [00:01<00:03, 13.42it/s]
 38%|      | 30/79 [00:02<00:03, 15.64it/s]
 42%|     | 33/79 [00:02<00:02, 17.47it/s]
 46%|     | 36/79 [00:02<00:02, 19.03it/s]
 49%|     | 39/79 [00:02<00:01, 20.37it/s]
 53%|    | 42/79 [00:02<00:01, 21.54it/s]
 57%|    | 45/79 [00:02<00:01, 22.14it/s]
 61%|    | 48/79 [00:02<00:01, 22.77it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.24it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.30it/s]
 35%|      | 28/79 [00:01<00:03, 13.49it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.58it/s]
 47%|     | 37/79 [00:02<00:02, 19.25it/s]
 51%|     | 40/79 [00:02<00:01, 20.74it/s]
 54%|    | 43/79 [00:02<00:01, 21.79it/s]
 58%|    | 46/79 [00:02<00:01, 22.52it/s]
 62%|   | 49/79 [00:02<00:01, 22.92it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.80it/s]
 16%|        | 13/79 [00:01<00:17,  3.82it/s]
 20%|        | 16/79 [00:01<00:12,  5.12it/s]
 24%|       | 19/79 [00:01<00:08,  6.74it/s]
 28%|       | 22/79 [00:01<00:06,  8.68it/s]
 32%|      | 25/79 [00:01<00:04, 10.81it/s]
 35%|      | 28/79 [00:02<00:03, 13.10it/s]
 39%|      | 31/79 [00:02<00:03, 15.37it/s]
 43%|     | 34/79 [00:02<00:02, 17.58it/s]
 47%|     | 37/79 [00:02<00:02, 19.27it/s]
 51%|     | 40/79 [00:02<00:01, 20.73it/s]
 54%|    | 43/79 [00:02<00:01, 22.19it/s]
 58%|    | 46/79 [00:02<00:01, 23.04it/s]
 62%|   | 49/79 [00:02<00:01, 23.39it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.23it/s]
 24%|       | 19/79 [00:01<00:08,  6.88it/s]
 28%|       | 22/79 [00:01<00:06,  8.82it/s]
 32%|      | 25/79 [00:01<00:04, 10.91it/s]
 35%|      | 28/79 [00:02<00:03, 13.19it/s]
 39%|      | 31/79 [00:02<00:03, 15.53it/s]
 43%|     | 34/79 [00:02<00:02, 17.55it/s]
 47%|     | 37/79 [00:02<00:02, 19.30it/s]
 51%|     | 40/79 [00:02<00:01, 20.69it/s]
 54%|    | 43/79 [00:02<00:01, 22.06it/s]
 58%|    | 46/79 [00:02<00:01, 22.83it/s]
 62%|   | 49/79 [00:02<00:01, 23.40it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  4%|         | 3/79 [00:01<00:50,  1.51it/s]
  8%|         | 6/79 [00:01<00:34,  2.10it/s]
 11%|        | 9/79 [00:01<00:24,  2.90it/s]
 15%|        | 12/79 [00:01<00:17,  3.94it/s]
 19%|        | 15/79 [00:01<00:12,  5.28it/s]
 23%|       | 18/79 [00:01<00:08,  6.92it/s]
 27%|       | 21/79 [00:01<00:06,  8.84it/s]
 30%|       | 24/79 [00:01<00:05, 10.96it/s]
 34%|      | 27/79 [00:01<00:03, 13.16it/s]
 38%|      | 30/79 [00:02<00:03, 15.40it/s]
 42%|     | 33/79 [00:02<00:02, 16.99it/s]
 46%|     | 36/79 [00:02<00:02, 18.57it/s]
 49%|     | 39/79 [00:02<00:01, 20.01it/s]
 53%|    | 42/79 [00:02<00:01, 21.01it/s]
 57%|    | 45/79 [00:02<00:01, 21.98it/s]
 61%|    | 48/79 [00:02<00:01, 22.69it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.32it/s]
 24%|       | 19/79 [00:01<00:08,  6.98it/s]
 28%|       | 22/79 [00:01<00:06,  8.91it/s]
 32%|      | 25/79 [00:01<00:04, 11.03it/s]
 35%|      | 28/79 [00:02<00:03, 13.27it/s]
 39%|      | 31/79 [00:02<00:03, 15.42it/s]
 43%|     | 34/79 [00:02<00:02, 17.38it/s]
 47%|     | 37/79 [00:02<00:02, 19.14it/s]
 51%|     | 40/79 [00:02<00:01, 20.59it/s]
 54%|    | 43/79 [00:02<00:01, 21.66it/s]
 58%|    | 46/79 [00:02<00:01, 22.47it/s]
 62%|   | 49/79 [00:02<00:01, 23.17it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:35,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.18it/s]
 24%|       | 19/79 [00:01<00:08,  6.80it/s]
 28%|       | 22/79 [00:01<00:06,  8.66it/s]
 32%|      | 25/79 [00:01<00:05, 10.76it/s]
 35%|      | 28/79 [00:02<00:03, 12.93it/s]
 39%|      | 31/79 [00:02<00:03, 15.23it/s]
 43%|     | 34/79 [00:02<00:02, 17.16it/s]
 47%|     | 37/79 [00:02<00:02, 18.84it/s]
 51%|     | 40/79 [00:02<00:01, 20.25it/s]
 54%|    | 43/79 [00:02<00:01, 21.52it/s]
 58%|    | 46/79 [00:02<00:01, 22.32it/s]
 62%|   | 49/79 [00:02<00:01, 22.81it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.22it/s]
 35%|      | 28/79 [00:01<00:03, 13.40it/s]
 39%|      | 31/79 [00:02<00:03, 15.42it/s]
 43%|     | 34/79 [00:02<00:02, 17.32it/s]
 47%|     | 37/79 [00:02<00:02, 18.99it/s]
 51%|     | 40/79 [00:02<00:01, 20.31it/s]
 54%|    | 43/79 [00:02<00:01, 21.20it/s]
 58%|    | 46/79 [00:02<00:01, 22.32it/s]
 62%|   | 49/79 [00:02<00:01, 22.95it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.89it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.83it/s]
 28%|       | 22/79 [00:01<00:06,  8.69it/s]
 32%|      | 25/79 [00:01<00:04, 10.83it/s]
 35%|      | 28/79 [00:02<00:03, 13.00it/s]
 39%|      | 31/79 [00:02<00:03, 15.28it/s]
 43%|     | 34/79 [00:02<00:02, 17.39it/s]
 47%|     | 37/79 [00:02<00:02, 18.99it/s]
 51%|     | 40/79 [00:02<00:01, 20.40it/s]
 54%|    | 43/79 [00:02<00:01, 21.56it/s]
 58%|    | 46/79 [00:02<00:01, 22.36it/s]
 62%|   | 49/79 [00:02<00:01, 23.20it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.26it/s]
 24%|       | 19/79 [00:01<00:08,  6.86it/s]
 28%|       | 22/79 [00:01<00:06,  8.73it/s]
 32%|      | 25/79 [00:01<00:04, 10.81it/s]
 35%|      | 28/79 [00:02<00:03, 12.94it/s]
 39%|      | 31/79 [00:02<00:03, 15.07it/s]
 43%|     | 34/79 [00:02<00:02, 17.08it/s]
 47%|     | 37/79 [00:02<00:02, 18.94it/s]
 51%|     | 40/79 [00:02<00:01, 20.34it/s]
 54%|    | 43/79 [00:02<00:01, 21.23it/s]
 58%|    | 46/79 [00:02<00:01, 22.30it/s]
 62%|   | 49/79 [00:02<00:01, 23.14it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.39it/s]
 24%|       | 19/79 [00:01<00:08,  7.01it/s]
 28%|       | 22/79 [00:01<00:06,  8.91it/s]
 32%|      | 25/79 [00:01<00:04, 10.98it/s]
 35%|      | 28/79 [00:02<00:03, 13.10it/s]
 39%|      | 31/79 [00:02<00:03, 15.00it/s]
 43%|     | 34/79 [00:02<00:02, 16.76it/s]
 47%|     | 37/79 [00:02<00:02, 18.70it/s]
 51%|     | 40/79 [00:02<00:01, 19.83it/s]
 54%|    | 43/79 [00:02<00:01, 20.85it/s]
 58%|    | 46/79 [00:02<00:01, 21.20it/s]
 62%|   | 49/79 [00:02<00:01, 22.09it/s]
 66%|   | 52/79 [00:03<00:01, 24.89it/s]
 70%|   | 55/79 [00:02<00:00, 25.12it/s]
 73%|  | 58/79 [00:03<00:00, 25.32it/s]
 77%|  | 61/79 [00:03<00:00, 25.58it/s]
 81%|  | 64/79 [00:03<00:00, 25.61it/s]
 85%| | 67/79 [00:03<00:00, 26.09it/s]
 89%| | 70/79 [00:03<00:00, 26.40it/s]
 92%|| 73/79 [00:03<00:00, 26.57it/s]
 96%|| 76/79 [00:03<00:00, 27.11it/s]
100%|| 79/79 [00:03<00:00, 20.62it/s]
, 24.72it/s]
 70%|   | 55/79 [00:02<00:00, 25.09it/s]
 73%|  | 58/79 [00:02<00:00, 25.16it/s]
 77%|  | 61/79 [00:03<00:00, 25.28it/s]
 81%|  | 64/79 [00:03<00:00, 25.29it/s]
 85%| | 67/79 [00:03<00:00, 25.44it/s]
 89%| | 70/79 [00:03<00:00, 25.33it/s]
 92%|| 73/79 [00:03<00:00, 25.56it/s]
 96%|| 76/79 [00:03<00:00, 26.30it/s]
100%|| 79/79 [00:03<00:00, 27.30it/s]
, 24.79it/s]
 70%|   | 55/79 [00:02<00:00, 25.07it/s]
 73%|  | 58/79 [00:03<00:00, 25.43it/s]
 77%|  | 61/79 [00:03<00:00, 25.63it/s]
 81%|  | 64/79 [00:03<00:00, 25.86it/s]
 85%| | 67/79 [00:03<00:00, 25.94it/s]
 89%| | 70/79 [00:03<00:00, 26.24it/s]
 92%|| 73/79 [00:03<00:00, 26.32it/s]
 96%|| 76/79 [00:03<00:00, 26.97it/s]
100%|| 79/79 [00:03<00:00, 27.68it/s]
19it/s]
 68%|   | 54/79 [00:02<00:01, 24.57it/s]
 72%|  | 57/79 [00:03<00:00, 24.66it/s]
 76%|  | 60/79 [00:03<00:00, 24.66it/s]
 80%|  | 63/79 [00:03<00:00, 24.67it/s]
 84%| | 66/79 [00:03<00:00, 24.84it/s]
 87%| | 69/79 [00:03<00:00, 24.62it/s]
 91%| | 72/79 [00:03<00:00, 24.99it/s]
 95%|| 75/79 [00:03<00:00, 25.70it/s]
 99%|| 78/79 [00:03<00:00, 26.34it/s]
100%|| 79/79 [00:03<00:00, 20.15it/s]
, 24.47it/s]
 70%|   | 55/79 [00:02<00:00, 24.55it/s]
 73%|  | 58/79 [00:03<00:00, 24.90it/s]
 77%|  | 61/79 [00:03<00:00, 25.46it/s]
 81%|  | 64/79 [00:03<00:00, 25.18it/s]
 85%| | 67/79 [00:03<00:00, 25.52it/s]
 89%| | 70/79 [00:03<00:00, 25.29it/s]
 92%|| 73/79 [00:03<00:00, 25.74it/s]
 96%|| 76/79 [00:03<00:00, 26.47it/s]
100%|| 79/79 [00:03<00:00, 20.37it/s]
, 24.80it/s]
 70%|   | 55/79 [00:02<00:00, 25.18it/s]
 73%|  | 58/79 [00:03<00:00, 25.57it/s]
 77%|  | 61/79 [00:03<00:00, 25.61it/s]
 81%|  | 64/79 [00:03<00:00, 25.73it/s]
 85%| | 67/79 [00:03<00:00, 25.71it/s]
 89%| | 70/79 [00:03<00:00, 25.73it/s]
 92%|| 73/79 [00:03<00:00, 26.10it/s]
 96%|| 76/79 [00:03<00:00, 26.57it/s]
100%|| 79/79 [00:03<00:00, 27.40it/s]
, 24.54it/s]
 70%|   | 55/79 [00:02<00:00, 25.08it/s]
 73%|  | 58/79 [00:03<00:00, 25.07it/s]
 77%|  | 61/79 [00:03<00:00, 25.10it/s]
 81%|  | 64/79 [00:03<00:00, 25.29it/s]
 85%| | 67/79 [00:03<00:00, 25.35it/s]
 89%| | 70/79 [00:03<00:00, 25.35it/s]
 92%|| 73/79 [00:03<00:00, 25.89it/s]
 96%|| 76/79 [00:03<00:00, 26.50it/s]
100%|| 79/79 [00:03<00:00, 27.45it/s]
, 24.74it/s]
 70%|   | 55/79 [00:02<00:00, 25.01it/s]
 73%|  | 58/79 [00:03<00:00, 25.19it/s]
 77%|  | 61/79 [00:03<00:00, 25.25it/s]
 81%|  | 64/79 [00:03<00:00, 25.34it/s]
 85%| | 67/79 [00:03<00:00, 25.38it/s]
 89%| | 70/79 [00:03<00:00, 25.61it/s]
 92%|| 73/79 [00:03<00:00, 25.62it/s]
 96%|| 76/79 [00:03<00:00, 26.32it/s]
100%|| 79/79 [00:03<00:00, 27.03it/s]
, 24.32it/s]
 70%|   | 55/79 [00:02<00:00, 24.96it/s]
 73%|  | 58/79 [00:03<00:00, 25.50it/s]
 77%|  | 61/79 [00:03<00:00, 25.74it/s]
 81%|  | 64/79 [00:03<00:00, 25.94it/s]
 85%| | 67/79 [00:03<00:00, 26.03it/s]
 89%| | 70/79 [00:03<00:00, 26.32it/s]
 92%|| 73/79 [00:03<00:00, 26.54it/s]
 97%|| 77/79 [00:03<00:00, 27.35it/s]
100%|| 79/79 [00:03<00:00, 20.07it/s]
, 24.40it/s]
 70%|   | 55/79 [00:02<00:00, 24.43it/s]
 73%|  | 58/79 [00:03<00:00, 24.61it/s]
 77%|  | 61/79 [00:03<00:00, 24.74it/s]
 81%|  | 64/79 [00:03<00:00, 24.47it/s]
 85%| | 67/79 [00:03<00:00, 24.64it/s]
 89%| | 70/79 [00:03<00:00, 24.64it/s]
 92%|| 73/79 [00:03<00:00, 25.14it/s]
 96%|| 76/79 [00:03<00:00, 25.84it/s]
100%|| 79/79 [00:03<00:00, 26.70it/s]
, 24.23it/s]
 70%|   | 55/79 [00:02<00:00, 24.69it/s]
 73%|  | 58/79 [00:03<00:00, 24.85it/s]
 77%|  | 61/79 [00:03<00:00, 25.17it/s]
 81%|  | 64/79 [00:03<00:00, 24.98it/s]
 85%| | 67/79 [00:03<00:00, 25.21it/s]
 89%| | 70/79 [00:03<00:00, 25.20it/s]
 92%|| 73/79 [00:03<00:00, 25.43it/s]
 96%|| 76/79 [00:03<00:00, 26.18it/s]
100%|| 79/79 [00:03<00:00, 27.17it/s]
, 24.54it/s]
 70%|   | 55/79 [00:02<00:00, 24.80it/s]
 73%|  | 58/79 [00:03<00:00, 24.59it/s]
 77%|  | 61/79 [00:03<00:00, 24.62it/s]
 81%|  | 64/79 [00:03<00:00, 24.55it/s]
 85%| | 67/79 [00:03<00:00, 24.81it/s]
 89%| | 70/79 [00:03<00:00, 24.38it/s]
 92%|| 73/79 [00:03<00:00, 25.04it/s]
 96%|| 76/79 [00:03<00:00, 25.68it/s]
100%|| 79/79 [00:03<00:00, 26.81it/s]
, 24.63it/s]
 70%|   | 55/79 [00:03<00:00, 24.80it/s]
 73%|  | 58/79 [00:03<00:00, 25.36it/s]
 77%|  | 61/79 [00:03<00:00, 25.28it/s]
 81%|  | 64/79 [00:03<00:00, 25.59it/s]
 85%| | 67/79 [00:03<00:00, 25.92it/s]
 89%| | 70/79 [00:03<00:00, 26.08it/s]
 92%|| 73/79 [00:03<00:00, 26.19it/s]
 96%|| 76/79 [00:03<00:00, 26.87it/s]
100%|| 79/79 [00:03<00:00, 27.69it/s]
10it/s]
 68%|   | 54/79 [00:02<00:01, 24.39it/s]
 72%|  | 57/79 [00:03<00:00, 24.70it/s]
 76%|  | 60/79 [00:03<00:00, 24.42it/s]
 80%|  | 63/79 [00:03<00:00, 24.59it/s]
 84%| | 66/79 [00:03<00:00, 24.74it/s]
 87%| | 69/79 [00:03<00:00, 24.82it/s]
 91%| | 72/79 [00:03<00:00, 24.81it/s]
 95%|| 75/79 [00:03<00:00, 25.68it/s]
 99%|| 78/79 [00:03<00:00, 26.33it/s]
100%|| 79/79 [00:03<00:00, 19.98it/s]
57it/s]
 68%|   | 54/79 [00:02<00:01, 24.91it/s]
 72%|  | 57/79 [00:03<00:00, 25.02it/s]
 76%|  | 60/79 [00:03<00:00, 25.36it/s]
 80%|  | 63/79 [00:03<00:00, 25.43it/s]
 84%| | 66/79 [00:03<00:00, 25.49it/s]
 87%| | 69/79 [00:03<00:00, 25.41it/s]
 91%| | 72/79 [00:03<00:00, 25.76it/s]
 95%|| 75/79 [00:03<00:00, 26.46it/s]
 99%|| 78/79 [00:03<00:00, 27.43it/s]
100%|| 79/79 [00:03<00:00, 19.75it/s]
, 24.13it/s]
 70%|   | 55/79 [00:03<00:00, 24.71it/s]
 73%|  | 58/79 [00:03<00:00, 24.78it/s]
 77%|  | 61/79 [00:03<00:00, 25.06it/s]
 81%|  | 64/79 [00:03<00:00, 25.14it/s]
 85%| | 67/79 [00:03<00:00, 25.21it/s]
 89%| | 70/79 [00:03<00:00, 25.07it/s]
 92%|| 73/79 [00:03<00:00, 25.59it/s]
 96%|| 76/79 [00:03<00:00, 26.34it/s]
100%|| 79/79 [00:03<00:00, 27.11it/s]
, 24.44it/s]
 70%|   | 55/79 [00:02<00:00, 24.87it/s]
 73%|  | 58/79 [00:03<00:00, 24.77it/s]
 77%|  | 61/79 [00:03<00:00, 24.89it/s]
 81%|  | 64/79 [00:03<00:00, 24.95it/s]
 85%| | 67/79 [00:03<00:00, 25.13it/s]
 89%| | 70/79 [00:03<00:00, 25.15it/s]
 92%|| 73/79 [00:03<00:00, 25.55it/s]
 96%|| 76/79 [00:03<00:00, 26.08it/s]
100%|| 79/79 [00:03<00:00, 27.04it/s]
66it/s]
 68%|   | 54/79 [00:02<00:00, 25.10it/s]
 72%|  | 57/79 [00:03<00:00, 25.44it/s]
 76%|  | 60/79 [00:03<00:00, 25.42it/s]
 80%|  | 63/79 [00:03<00:00, 25.35it/s]
 84%| | 66/79 [00:03<00:00, 25.57it/s]
 87%| | 69/79 [00:03<00:00, 25.63it/s]
 91%| | 72/79 [00:03<00:00, 25.58it/s]
 95%|| 75/79 [00:03<00:00, 26.31it/s]
 99%|| 78/79 [00:03<00:00, 26.74it/s]
100%|| 79/79 [00:04<00:00, 19.67it/s]
, 24.01it/s]
 70%|   | 55/79 [00:03<00:00, 24.55it/s]
 73%|  | 58/79 [00:03<00:00, 24.84it/s]
 77%|  | 61/79 [00:03<00:00, 25.13it/s]
 81%|  | 64/79 [00:03<00:00, 25.26it/s]
 85%| | 67/79 [00:03<00:00, 25.56it/s]
 89%| | 70/79 [00:03<00:00, 25.74it/s]
 92%|| 73/79 [00:03<00:00, 25.95it/s]
 96%|| 76/79 [00:03<00:00, 26.44it/s]
100%|| 79/79 [00:03<00:00, 27.38it/s]
, 23.87it/s]
 70%|   | 55/79 [00:03<00:00, 24.25it/s]
 73%|  | 58/79 [00:03<00:00, 24.65it/s]
 77%|  | 61/79 [00:03<00:00, 24.70it/s]
 81%|  | 64/79 [00:03<00:00, 24.90it/s]
 85%| | 67/79 [00:03<00:00, 25.21it/s]
 89%| | 70/79 [00:03<00:00, 25.26it/s]
 92%|| 73/79 [00:03<00:00, 25.66it/s]
 96%|| 76/79 [00:03<00:00, 26.37it/s]
100%|| 79/79 [00:04<00:00, 27.20it/s]
, 24.45it/s]
 70%|   | 55/79 [00:03<00:00, 24.82it/s]
 73%|  | 58/79 [00:03<00:00, 25.28it/s]
 77%|  | 61/79 [00:03<00:00, 25.77it/s]
 81%|  | 64/79 [00:03<00:00, 25.94it/s]
 85%| | 67/79 [00:03<00:00, 26.13it/s]
 89%| | 70/79 [00:03<00:00, 26.04it/s]
 92%|| 73/79 [00:03<00:00, 26.18it/s]
 96%|| 76/79 [00:03<00:00, 27.10it/s]
100%|| 79/79 [00:03<00:00, 27.20it/s]
, 23.65it/s]
 70%|   | 55/79 [00:03<00:00, 24.18it/s]
 73%|  | 58/79 [00:03<00:00, 24.44it/s]
 77%|  | 61/79 [00:03<00:00, 24.45it/s]
 81%|  | 64/79 [00:03<00:00, 24.56it/s]
 85%| | 67/79 [00:03<00:00, 24.78it/s]
 89%| | 70/79 [00:03<00:00, 24.93it/s]
 92%|| 73/79 [00:03<00:00, 25.26it/s]
 96%|| 76/79 [00:03<00:00, 26.21it/s]
100%|| 79/79 [00:04<00:00, 27.10it/s]
43it/s]
 68%|   | 54/79 [00:03<00:01, 23.89it/s]
 72%|  | 57/79 [00:03<00:00, 24.17it/s]
 76%|  | 60/79 [00:03<00:00, 24.35it/s]
 80%|  | 63/79 [00:03<00:00, 24.56it/s]
 84%| | 66/79 [00:03<00:00, 24.75it/s]
 87%| | 69/79 [00:03<00:00, 24.93it/s]
 91%| | 72/79 [00:03<00:00, 24.68it/s]
 95%|| 75/79 [00:03<00:00, 25.44it/s]
 99%|| 78/79 [00:03<00:00, 25.93it/s]
100%|| 79/79 [00:04<00:00, 19.38it/s]
21it/s]
 68%|   | 54/79 [00:03<00:01, 23.80it/s]
 72%|  | 57/79 [00:03<00:00, 23.91it/s]
 76%|  | 60/79 [00:03<00:00, 24.20it/s]
 80%|  | 63/79 [00:03<00:00, 24.54it/s]
 84%| | 66/79 [00:03<00:00, 24.96it/s]
 87%| | 69/79 [00:03<00:00, 24.99it/s]
 91%| | 72/79 [00:03<00:00, 25.29it/s]
 95%|| 75/79 [00:03<00:00, 26.09it/s]
 99%|| 78/79 [00:04<00:00, 26.70it/s]
100%|| 79/79 [00:04<00:00, 19.24it/s]
, 23.33it/s]
 70%|   | 55/79 [00:03<00:01, 23.62it/s]
 73%|  | 58/79 [00:03<00:00, 23.71it/s]
 77%|  | 61/79 [00:03<00:00, 23.83it/s]
 81%|  | 64/79 [00:03<00:00, 24.05it/s]
 85%| | 67/79 [00:03<00:00, 24.26it/s]
 89%| | 70/79 [00:03<00:00, 24.24it/s]
 92%|| 73/79 [00:03<00:00, 24.70it/s]
 96%|| 76/79 [00:03<00:00, 25.42it/s]
100%|| 79/79 [00:04<00:00, 26.30it/s]
, 22.83it/s]
 70%|   | 55/79 [00:03<00:01, 23.09it/s]
 73%|  | 58/79 [00:03<00:00, 23.78it/s]
 77%|  | 61/79 [00:03<00:00, 24.02it/s]
 81%|  | 64/79 [00:03<00:00, 24.11it/s]
 85%| | 67/79 [00:03<00:00, 24.27it/s]
 89%| | 70/79 [00:03<00:00, 24.52it/s]
 92%|| 73/79 [00:03<00:00, 24.80it/s]
 96%|| 76/79 [00:03<00:00, 25.62it/s]
100%|| 79/79 [00:04<00:00, 26.49it/s]
28it/s]
 68%|   | 54/79 [00:03<00:01, 23.67it/s]
 72%|  | 57/79 [00:03<00:00, 23.93it/s]
 76%|  | 60/79 [00:03<00:00, 23.76it/s]
 80%|  | 63/79 [00:03<00:00, 24.07it/s]
 84%| | 66/79 [00:03<00:00, 24.28it/s]
 87%| | 69/79 [00:03<00:00, 24.39it/s]
 91%| | 72/79 [00:03<00:00, 24.44it/s]
 95%|| 75/79 [00:03<00:00, 25.15it/s]
 99%|| 78/79 [00:04<00:00, 25.76it/s]
100%|| 79/79 [00:04<00:00, 19.06it/s]
, 23.56it/s]
 70%|   | 55/79 [00:03<00:01, 23.86it/s]
 73%|  | 58/79 [00:03<00:00, 24.06it/s]
 77%|  | 61/79 [00:03<00:00, 24.30it/s]
 81%|  | 64/79 [00:03<00:00, 24.55it/s]
 85%| | 67/79 [00:03<00:00, 24.78it/s]
 89%| | 70/79 [00:03<00:00, 24.50it/s]
 92%|| 73/79 [00:03<00:00, 24.73it/s]
 96%|| 76/79 [00:03<00:00, 24.89it/s]
100%|| 79/79 [00:04<00:00, 25.92it/s]
, 23.47it/s]
 70%|   | 55/79 [00:03<00:01, 23.94it/s]
 73%|  | 58/79 [00:03<00:00, 24.31it/s]
 77%|  | 61/79 [00:03<00:00, 24.61it/s]
 81%|  | 64/79 [00:03<00:00, 24.62it/s]
 85%| | 67/79 [00:03<00:00, 24.77it/s]
 89%| | 70/79 [00:03<00:00, 24.54it/s]
 92%|| 73/79 [00:03<00:00, 24.96it/s]
 96%|| 76/79 [00:03<00:00, 25.63it/s]
100%|| 79/79 [00:04<00:00, 26.46it/s]
44it/s]
 68%|   | 54/79 [00:03<00:01, 23.83it/s]
 72%|  | 57/79 [00:03<00:00, 23.93it/s]
 76%|  | 60/79 [00:03<00:00, 23.95it/s]
 80%|  | 63/79 [00:03<00:00, 23.98it/s]
 84%| | 66/79 [00:03<00:00, 24.26it/s]
 87%| | 69/79 [00:03<00:00, 24.20it/s]
 91%| | 72/79 [00:03<00:00, 24.46it/s]
 95%|| 75/79 [00:03<00:00, 25.26it/s]
 99%|| 78/79 [00:04<00:00, 25.83it/s]
100%|| 79/79 [00:04<00:00, 19.00it/s]
, 23.19it/s]
 70%|   | 55/79 [00:03<00:00, 24.05it/s]
 73%|  | 58/79 [00:03<00:00, 24.24it/s]
 77%|  | 61/79 [00:03<00:00, 24.44it/s]
 81%|  | 64/79 [00:03<00:00, 24.63it/s]
 85%| | 67/79 [00:03<00:00, 24.75it/s]
 89%| | 70/79 [00:03<00:00, 24.73it/s]
 92%|| 73/79 [00:03<00:00, 24.79it/s]
 96%|| 76/79 [00:03<00:00, 25.40it/s]
100%|| 79/79 [00:04<00:00, 26.22it/s]
, 22.69it/s]
 70%|   | 55/79 [00:03<00:01, 23.16it/s]
 73%|  | 58/79 [00:03<00:00, 23.19it/s]
 77%|  | 61/79 [00:03<00:00, 23.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.05it/s]
 85%| | 67/79 [00:03<00:00, 23.81it/s]
 89%| | 70/79 [00:03<00:00, 23.84it/s]
 92%|| 73/79 [00:03<00:00, 24.26it/s]
 96%|| 76/79 [00:04<00:00, 25.23it/s]
100%|| 79/79 [00:04<00:00, 25.97it/s]
2020-06-23 16:56:29,836 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.205212 (0.0269133544921875 s / img per device, on 32 devices)
2020-06-23 16:56:29,856 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:56:29,856 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:56:29,876 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592956599644, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 5, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592956599644, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 5}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:56:40,962 maskrcnn_benchmark.trainer INFO: eta: 1:17:04  iter: 3680  loss: 0.7278 (0.8792)  loss_classifier: 0.2461 (0.3290)  loss_box_reg: 0.1209 (0.1384)  loss_mask: 0.2890 (0.3399)  loss_objectness: 0.0291 (0.0484)  loss_rpn_box_reg: 0.0081 (0.0235)  time: 0.1084 (0.1273)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5148
2020-06-23 16:56:43,122 maskrcnn_benchmark.trainer INFO: eta: 1:16:58  iter: 3700  loss: 0.7138 (0.8783)  loss_classifier: 0.2440 (0.3285)  loss_box_reg: 0.1199 (0.1383)  loss_mask: 0.2860 (0.3396)  loss_objectness: 0.0280 (0.0483)  loss_rpn_box_reg: 0.0122 (0.0234)  time: 0.1075 (0.1272)  data: 0.0016 (0.0196)  lr: 0.160000  max mem: 5148
2020-06-23 16:56:45,287 maskrcnn_benchmark.trainer INFO: eta: 1:16:51  iter: 3720  loss: 0.6917 (0.8772)  loss_classifier: 0.2378 (0.3281)  loss_box_reg: 0.1062 (0.1382)  loss_mask: 0.2993 (0.3393)  loss_objectness: 0.0229 (0.0482)  loss_rpn_box_reg: 0.0099 (0.0234)  time: 0.1074 (0.1271)  data: 0.0015 (0.0195)  lr: 0.160000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 16:56:47,428 maskrcnn_benchmark.trainer INFO: eta: 1:16:45  iter: 3740  loss: 0.6258 (0.8760)  loss_classifier: 0.2176 (0.3275)  loss_box_reg: 0.0943 (0.1380)  loss_mask: 0.2748 (0.3390)  loss_objectness: 0.0188 (0.0481)  loss_rpn_box_reg: 0.0092 (0.0234)  time: 0.1064 (0.1270)  data: 0.0014 (0.0194)  lr: 0.160000  max mem: 5148
DONE (t=0.84s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:56:49,590 maskrcnn_benchmark.trainer INFO: eta: 1:16:39  iter: 3760  loss: 0.6599 (0.8750)  loss_classifier: 0.2188 (0.3271)  loss_box_reg: 0.1039 (0.1378)  loss_mask: 0.2839 (0.3386)  loss_objectness: 0.0231 (0.0480)  loss_rpn_box_reg: 0.0074 (0.0234)  time: 0.1078 (0.1269)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5148
DONE (t=1.83s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.26356
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.46515
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.27287
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.14618
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.28202
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.33810
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25008
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.40744
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.42819
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24187
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.46277
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.53953
2020-06-23 16:56:51,753 maskrcnn_benchmark.trainer INFO: eta: 1:16:33  iter: 3780  loss: 0.7721 (0.8747)  loss_classifier: 0.3204 (0.3270)  loss_box_reg: 0.1368 (0.1379)  loss_mask: 0.3075 (0.3385)  loss_objectness: 0.0205 (0.0480)  loss_rpn_box_reg: 0.0131 (0.0233)  time: 0.1076 (0.1268)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 5148
2020-06-23 16:56:53,910 maskrcnn_benchmark.trainer INFO: eta: 1:16:27  iter: 3800  loss: 0.7533 (0.8740)  loss_classifier: 0.2654 (0.3267)  loss_box_reg: 0.1184 (0.1378)  loss_mask: 0.2938 (0.3383)  loss_objectness: 0.0224 (0.0478)  loss_rpn_box_reg: 0.0134 (0.0233)  time: 0.1071 (0.1267)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5148
2020-06-23 16:56:56,068 maskrcnn_benchmark.trainer INFO: eta: 1:16:20  iter: 3820  loss: 0.7328 (0.8731)  loss_classifier: 0.2534 (0.3264)  loss_box_reg: 0.1020 (0.1377)  loss_mask: 0.2881 (0.3381)  loss_objectness: 0.0204 (0.0477)  loss_rpn_box_reg: 0.0085 (0.0233)  time: 0.1071 (0.1266)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:56:58,219 maskrcnn_benchmark.trainer INFO: eta: 1:16:14  iter: 3840  loss: 0.6978 (0.8722)  loss_classifier: 0.2519 (0.3260)  loss_box_reg: 0.1136 (0.1375)  loss_mask: 0.2680 (0.3378)  loss_objectness: 0.0221 (0.0476)  loss_rpn_box_reg: 0.0125 (0.0233)  time: 0.1069 (0.1265)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5148
DONE (t=2.21s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:57:00,382 maskrcnn_benchmark.trainer INFO: eta: 1:16:08  iter: 3860  loss: 0.6814 (0.8714)  loss_classifier: 0.2514 (0.3257)  loss_box_reg: 0.1021 (0.1374)  loss_mask: 0.3063 (0.3376)  loss_objectness: 0.0265 (0.0476)  loss_rpn_box_reg: 0.0085 (0.0232)  time: 0.1076 (0.1264)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5148
DONE (t=2.88s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.25367
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.43632
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.26185
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.10452
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.27230
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.37506
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.24725
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.38604
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.40386
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20821
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.43805
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.53470
2020-06-23 16:57:02,624 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.26355892250759355, segm mAP: 0.25367261807437275
:::MLLOG {"namespace": "", "time_ms": 1592956622625, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.26355892250759355, "SEGM": 0.25367261807437275}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1592956622625, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 4}}
2020-06-23 16:57:02,733 maskrcnn_benchmark.trainer INFO: eta: 1:16:04  iter: 3880  loss: 0.5791 (0.8700)  loss_classifier: 0.2021 (0.3251)  loss_box_reg: 0.0880 (0.1372)  loss_mask: 0.2559 (0.3371)  loss_objectness: 0.0194 (0.0474)  loss_rpn_box_reg: 0.0087 (0.0232)  time: 0.1097 (0.1264)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:04,892 maskrcnn_benchmark.trainer INFO: eta: 1:15:58  iter: 3900  loss: 0.7594 (0.8693)  loss_classifier: 0.2782 (0.3248)  loss_box_reg: 0.1165 (0.1371)  loss_mask: 0.2904 (0.3369)  loss_objectness: 0.0268 (0.0473)  loss_rpn_box_reg: 0.0147 (0.0232)  time: 0.1067 (0.1263)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:07,059 maskrcnn_benchmark.trainer INFO: eta: 1:15:52  iter: 3920  loss: 0.6172 (0.8682)  loss_classifier: 0.2105 (0.3242)  loss_box_reg: 0.0934 (0.1369)  loss_mask: 0.2785 (0.3367)  loss_objectness: 0.0188 (0.0472)  loss_rpn_box_reg: 0.0083 (0.0231)  time: 0.1076 (0.1262)  data: 0.0013 (0.0186)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:09,221 maskrcnn_benchmark.trainer INFO: eta: 1:15:47  iter: 3940  loss: 0.6940 (0.8676)  loss_classifier: 0.2709 (0.3240)  loss_box_reg: 0.1144 (0.1368)  loss_mask: 0.2849 (0.3365)  loss_objectness: 0.0171 (0.0471)  loss_rpn_box_reg: 0.0120 (0.0231)  time: 0.1073 (0.1261)  data: 0.0013 (0.0185)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:11,384 maskrcnn_benchmark.trainer INFO: eta: 1:15:41  iter: 3960  loss: 0.7182 (0.8668)  loss_classifier: 0.2350 (0.3236)  loss_box_reg: 0.1073 (0.1367)  loss_mask: 0.2968 (0.3363)  loss_objectness: 0.0248 (0.0471)  loss_rpn_box_reg: 0.0109 (0.0231)  time: 0.1069 (0.1260)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:13,540 maskrcnn_benchmark.trainer INFO: eta: 1:15:35  iter: 3980  loss: 0.7068 (0.8662)  loss_classifier: 0.2962 (0.3234)  loss_box_reg: 0.1159 (0.1367)  loss_mask: 0.2782 (0.3361)  loss_objectness: 0.0256 (0.0470)  loss_rpn_box_reg: 0.0110 (0.0231)  time: 0.1073 (0.1259)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:15,701 maskrcnn_benchmark.trainer INFO: eta: 1:15:29  iter: 4000  loss: 0.6322 (0.8655)  loss_classifier: 0.2294 (0.3230)  loss_box_reg: 0.1074 (0.1366)  loss_mask: 0.2720 (0.3358)  loss_objectness: 0.0243 (0.0469)  loss_rpn_box_reg: 0.0103 (0.0231)  time: 0.1076 (0.1258)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:17,851 maskrcnn_benchmark.trainer INFO: eta: 1:15:23  iter: 4020  loss: 0.7366 (0.8648)  loss_classifier: 0.2641 (0.3227)  loss_box_reg: 0.1172 (0.1365)  loss_mask: 0.2834 (0.3356)  loss_objectness: 0.0237 (0.0468)  loss_rpn_box_reg: 0.0120 (0.0231)  time: 0.1069 (0.1257)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:20,029 maskrcnn_benchmark.trainer INFO: eta: 1:15:18  iter: 4040  loss: 0.7042 (0.8640)  loss_classifier: 0.2439 (0.3224)  loss_box_reg: 0.1171 (0.1364)  loss_mask: 0.2813 (0.3354)  loss_objectness: 0.0264 (0.0468)  loss_rpn_box_reg: 0.0107 (0.0231)  time: 0.1082 (0.1257)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:22,176 maskrcnn_benchmark.trainer INFO: eta: 1:15:12  iter: 4060  loss: 0.6765 (0.8634)  loss_classifier: 0.2534 (0.3221)  loss_box_reg: 0.1118 (0.1363)  loss_mask: 0.2800 (0.3351)  loss_objectness: 0.0237 (0.0467)  loss_rpn_box_reg: 0.0131 (0.0231)  time: 0.1070 (0.1256)  data: 0.0013 (0.0180)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:24,329 maskrcnn_benchmark.trainer INFO: eta: 1:15:07  iter: 4080  loss: 0.6484 (0.8624)  loss_classifier: 0.2249 (0.3217)  loss_box_reg: 0.1085 (0.1362)  loss_mask: 0.2897 (0.3348)  loss_objectness: 0.0151 (0.0466)  loss_rpn_box_reg: 0.0116 (0.0231)  time: 0.1072 (0.1255)  data: 0.0013 (0.0179)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:26,463 maskrcnn_benchmark.trainer INFO: eta: 1:15:01  iter: 4100  loss: 0.6457 (0.8613)  loss_classifier: 0.2031 (0.3212)  loss_box_reg: 0.0953 (0.1360)  loss_mask: 0.2666 (0.3346)  loss_objectness: 0.0182 (0.0465)  loss_rpn_box_reg: 0.0071 (0.0230)  time: 0.1061 (0.1254)  data: 0.0013 (0.0178)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:28,624 maskrcnn_benchmark.trainer INFO: eta: 1:14:55  iter: 4120  loss: 0.5893 (0.8604)  loss_classifier: 0.2520 (0.3208)  loss_box_reg: 0.1000 (0.1359)  loss_mask: 0.2563 (0.3342)  loss_objectness: 0.0223 (0.0465)  loss_rpn_box_reg: 0.0141 (0.0230)  time: 0.1081 (0.1253)  data: 0.0013 (0.0177)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:30,763 maskrcnn_benchmark.trainer INFO: eta: 1:14:50  iter: 4140  loss: 0.7437 (0.8597)  loss_classifier: 0.2381 (0.3205)  loss_box_reg: 0.1234 (0.1358)  loss_mask: 0.3039 (0.3340)  loss_objectness: 0.0260 (0.0464)  loss_rpn_box_reg: 0.0118 (0.0230)  time: 0.1074 (0.1252)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:32,897 maskrcnn_benchmark.trainer INFO: eta: 1:14:44  iter: 4160  loss: 0.6784 (0.8590)  loss_classifier: 0.2206 (0.3201)  loss_box_reg: 0.1063 (0.1357)  loss_mask: 0.2767 (0.3338)  loss_objectness: 0.0233 (0.0463)  loss_rpn_box_reg: 0.0114 (0.0230)  time: 0.1063 (0.1251)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:35,040 maskrcnn_benchmark.trainer INFO: eta: 1:14:38  iter: 4180  loss: 0.6422 (0.8581)  loss_classifier: 0.2378 (0.3198)  loss_box_reg: 0.1025 (0.1356)  loss_mask: 0.2834 (0.3335)  loss_objectness: 0.0207 (0.0462)  loss_rpn_box_reg: 0.0197 (0.0230)  time: 0.1068 (0.1250)  data: 0.0013 (0.0175)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:37,185 maskrcnn_benchmark.trainer INFO: eta: 1:14:33  iter: 4200  loss: 0.6650 (0.8574)  loss_classifier: 0.2599 (0.3196)  loss_box_reg: 0.0994 (0.1355)  loss_mask: 0.2601 (0.3332)  loss_objectness: 0.0275 (0.0461)  loss_rpn_box_reg: 0.0099 (0.0230)  time: 0.1074 (0.1250)  data: 0.0013 (0.0174)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:39,351 maskrcnn_benchmark.trainer INFO: eta: 1:14:27  iter: 4220  loss: 0.7189 (0.8568)  loss_classifier: 0.2760 (0.3194)  loss_box_reg: 0.1092 (0.1354)  loss_mask: 0.2942 (0.3330)  loss_objectness: 0.0241 (0.0461)  loss_rpn_box_reg: 0.0095 (0.0229)  time: 0.1083 (0.1249)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:41,499 maskrcnn_benchmark.trainer INFO: eta: 1:14:22  iter: 4240  loss: 0.6826 (0.8564)  loss_classifier: 0.2469 (0.3192)  loss_box_reg: 0.1160 (0.1354)  loss_mask: 0.2766 (0.3328)  loss_objectness: 0.0307 (0.0460)  loss_rpn_box_reg: 0.0128 (0.0229)  time: 0.1075 (0.1248)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:43,630 maskrcnn_benchmark.trainer INFO: eta: 1:14:16  iter: 4260  loss: 0.6498 (0.8558)  loss_classifier: 0.2353 (0.3189)  loss_box_reg: 0.0962 (0.1353)  loss_mask: 0.2644 (0.3326)  loss_objectness: 0.0258 (0.0460)  loss_rpn_box_reg: 0.0086 (0.0230)  time: 0.1064 (0.1247)  data: 0.0013 (0.0172)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:45,799 maskrcnn_benchmark.trainer INFO: eta: 1:14:11  iter: 4280  loss: 0.7444 (0.8553)  loss_classifier: 0.2583 (0.3187)  loss_box_reg: 0.1147 (0.1353)  loss_mask: 0.2937 (0.3324)  loss_objectness: 0.0218 (0.0460)  loss_rpn_box_reg: 0.0107 (0.0229)  time: 0.1083 (0.1246)  data: 0.0014 (0.0171)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:47,957 maskrcnn_benchmark.trainer INFO: eta: 1:14:06  iter: 4300  loss: 0.7922 (0.8549)  loss_classifier: 0.2735 (0.3186)  loss_box_reg: 0.1243 (0.1353)  loss_mask: 0.2891 (0.3322)  loss_objectness: 0.0260 (0.0460)  loss_rpn_box_reg: 0.0092 (0.0229)  time: 0.1079 (0.1245)  data: 0.0014 (0.0170)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:50,115 maskrcnn_benchmark.trainer INFO: eta: 1:14:01  iter: 4320  loss: 0.7174 (0.8543)  loss_classifier: 0.2743 (0.3184)  loss_box_reg: 0.1097 (0.1352)  loss_mask: 0.2781 (0.3319)  loss_objectness: 0.0282 (0.0460)  loss_rpn_box_reg: 0.0090 (0.0229)  time: 0.1076 (0.1245)  data: 0.0014 (0.0170)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:52,271 maskrcnn_benchmark.trainer INFO: eta: 1:13:55  iter: 4340  loss: 0.7389 (0.8538)  loss_classifier: 0.2400 (0.3181)  loss_box_reg: 0.1014 (0.1351)  loss_mask: 0.2870 (0.3318)  loss_objectness: 0.0322 (0.0460)  loss_rpn_box_reg: 0.0132 (0.0229)  time: 0.1064 (0.1244)  data: 0.0014 (0.0169)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:54,416 maskrcnn_benchmark.trainer INFO: eta: 1:13:50  iter: 4360  loss: 0.7349 (0.8532)  loss_classifier: 0.2827 (0.3178)  loss_box_reg: 0.1178 (0.1350)  loss_mask: 0.2879 (0.3315)  loss_objectness: 0.0225 (0.0459)  loss_rpn_box_reg: 0.0084 (0.0229)  time: 0.1068 (0.1243)  data: 0.0014 (0.0168)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:56,548 maskrcnn_benchmark.trainer INFO: eta: 1:13:45  iter: 4380  loss: 0.6758 (0.8525)  loss_classifier: 0.2338 (0.3175)  loss_box_reg: 0.1055 (0.1349)  loss_mask: 0.2936 (0.3314)  loss_objectness: 0.0156 (0.0458)  loss_rpn_box_reg: 0.0091 (0.0229)  time: 0.1070 (0.1242)  data: 0.0014 (0.0168)  lr: 0.160000  max mem: 5148
2020-06-23 16:57:58,699 maskrcnn_benchmark.trainer INFO: eta: 1:13:40  iter: 4400  loss: 0.8571 (0.8522)  loss_classifier: 0.3034 (0.3174)  loss_box_reg: 0.1275 (0.1349)  loss_mask: 0.2945 (0.3312)  loss_objectness: 0.0347 (0.0458)  loss_rpn_box_reg: 0.0167 (0.0229)  time: 0.1073 (0.1242)  data: 0.0014 (0.0167)  lr: 0.160000  max mem: 5148
2020-06-23 16:58:00,845 maskrcnn_benchmark.trainer INFO: eta: 1:13:34  iter: 4420  loss: 0.7127 (0.8517)  loss_classifier: 0.2639 (0.3172)  loss_box_reg: 0.1147 (0.1349)  loss_mask: 0.2866 (0.3310)  loss_objectness: 0.0320 (0.0457)  loss_rpn_box_reg: 0.0152 (0.0229)  time: 0.1063 (0.1241)  data: 0.0014 (0.0166)  lr: 0.160000  max mem: 5148
2020-06-23 16:58:02,982 maskrcnn_benchmark.trainer INFO: eta: 1:13:29  iter: 4440  loss: 0.7462 (0.8513)  loss_classifier: 0.2809 (0.3171)  loss_box_reg: 0.1307 (0.1349)  loss_mask: 0.2795 (0.3308)  loss_objectness: 0.0268 (0.0457)  loss_rpn_box_reg: 0.0131 (0.0229)  time: 0.1065 (0.1240)  data: 0.0014 (0.0165)  lr: 0.160000  max mem: 5148
2020-06-23 16:58:05,119 maskrcnn_benchmark.trainer INFO: eta: 1:13:24  iter: 4460  loss: 0.7837 (0.8509)  loss_classifier: 0.2832 (0.3169)  loss_box_reg: 0.1300 (0.1348)  loss_mask: 0.2846 (0.3307)  loss_objectness: 0.0228 (0.0456)  loss_rpn_box_reg: 0.0093 (0.0228)  time: 0.1069 (0.1239)  data: 0.0014 (0.0165)  lr: 0.160000  max mem: 5148
2020-06-23 16:58:07,257 maskrcnn_benchmark.trainer INFO: eta: 1:13:19  iter: 4480  loss: 0.7180 (0.8503)  loss_classifier: 0.2268 (0.3166)  loss_box_reg: 0.1147 (0.1348)  loss_mask: 0.2957 (0.3306)  loss_objectness: 0.0232 (0.0455)  loss_rpn_box_reg: 0.0116 (0.0228)  time: 0.1065 (0.1239)  data: 0.0013 (0.0164)  lr: 0.160000  max mem: 5148
2020-06-23 16:58:09,393 maskrcnn_benchmark.trainer INFO: eta: 1:13:14  iter: 4500  loss: 0.6904 (0.8498)  loss_classifier: 0.2452 (0.3164)  loss_box_reg: 0.1111 (0.1347)  loss_mask: 0.3035 (0.3305)  loss_objectness: 0.0192 (0.0455)  loss_rpn_box_reg: 0.0102 (0.0228)  time: 0.1065 (0.1238)  data: 0.0014 (0.0163)  lr: 0.160000  max mem: 5148
2020-06-23 16:58:11,537 maskrcnn_benchmark.trainer INFO: eta: 1:13:09  iter: 4520  loss: 0.7329 (0.8493)  loss_classifier: 0.2583 (0.3162)  loss_box_reg: 0.1176 (0.1347)  loss_mask: 0.2431 (0.3302)  loss_objectness: 0.0217 (0.0455)  loss_rpn_box_reg: 0.0098 (0.0228)  time: 0.1066 (0.1237)  data: 0.0014 (0.0163)  lr: 0.160000  max mem: 5148
2020-06-23 16:58:13,671 maskrcnn_benchmark.trainer INFO: eta: 1:13:03  iter: 4540  loss: 0.7157 (0.8487)  loss_classifier: 0.2507 (0.3159)  loss_box_reg: 0.1187 (0.1346)  loss_mask: 0.2691 (0.3299)  loss_objectness: 0.0269 (0.0454)  loss_rpn_box_reg: 0.0124 (0.0228)  time: 0.1061 (0.1236)  data: 0.0014 (0.0162)  lr: 0.160000  max mem: 5148
2020-06-23 16:58:15,822 maskrcnn_benchmark.trainer INFO: eta: 1:12:58  iter: 4560  loss: 0.6696 (0.8480)  loss_classifier: 0.2201 (0.3157)  loss_box_reg: 0.1159 (0.1345)  loss_mask: 0.2583 (0.3297)  loss_objectness: 0.0160 (0.0453)  loss_rpn_box_reg: 0.0078 (0.0228)  time: 0.1073 (0.1236)  data: 0.0014 (0.0162)  lr: 0.160000  max mem: 5148
2020-06-23 16:58:17,967 maskrcnn_benchmark.trainer INFO: eta: 1:12:53  iter: 4580  loss: 0.7344 (0.8474)  loss_classifier: 0.2421 (0.3153)  loss_box_reg: 0.1150 (0.1344)  loss_mask: 0.2801 (0.3295)  loss_objectness: 0.0321 (0.0453)  loss_rpn_box_reg: 0.0091 (0.0229)  time: 0.1067 (0.1235)  data: 0.0014 (0.0161)  lr: 0.160000  max mem: 5148
:::MLLOG {"namespace": "", "time_ms": 1592956698496, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1592956698496, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1592956698496, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 5}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 16:58:18,714 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
Done (t=0.28s)
creating index...
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
Done (t=0.30s)
creating index...
Done (t=0.30s)
creating index...
index created!
Done (t=0.30s)
creating index...
index created!
2020-06-23 16:58:19,028 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:53,  1.47it/s]
  4%|         | 3/79 [00:00<00:37,  2.03it/s]
  8%|         | 6/79 [00:00<00:26,  2.80it/s]
 11%|        | 9/79 [00:01<00:18,  3.82it/s]
 15%|        | 12/79 [00:01<00:13,  5.12it/s]
 19%|        | 15/79 [00:01<00:09,  6.73it/s]
 23%|       | 18/79 [00:01<00:07,  8.61it/s]
 27%|       | 21/79 [00:01<00:05, 10.73it/s]
 30%|       | 24/79 [00:01<00:04, 12.93it/s]
 34%|      | 27/79 [00:01<00:03, 14.83it/s]
 38%|      | 30/79 [00:01<00:02, 16.76it/s]
 42%|     | 33/79 [00:02<00:02, 18.50it/s]
 46%|     | 36/79 [00:02<00:02, 20.15it/s]
 49%|     | 39/79 [00:02<00:01, 21.33it/s]
 53%|    | 42/79 [00:02<00:01, 22.36it/s]
 57%|    | 45/79 [00:02<00:01, 23.16it/s]
 61%|    | 48/79 [00:02<00:01, 23.91it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:57,  1.35it/s]
  5%|         | 4/79 [00:00<00:39,  1.88it/s]
  9%|         | 7/79 [00:00<00:27,  2.60it/s]
 13%|        | 10/79 [00:01<00:19,  3.55it/s]
 16%|        | 13/79 [00:01<00:13,  4.77it/s]
 20%|        | 16/79 [00:01<00:09,  6.31it/s]
 24%|       | 19/79 [00:01<00:07,  8.14it/s]
 28%|       | 22/79 [00:01<00:05, 10.14it/s]
 32%|      | 25/79 [00:01<00:04, 12.42it/s]
 35%|      | 28/79 [00:01<00:03, 14.68it/s]
 39%|      | 31/79 [00:01<00:02, 16.75it/s]
 43%|     | 34/79 [00:02<00:02, 18.63it/s]
 47%|     | 37/79 [00:02<00:02, 20.30it/s]
 51%|     | 40/79 [00:02<00:01, 21.61it/s]
 54%|    | 43/79 [00:02<00:01, 22.29it/s]
 58%|    | 46/79 [00:02<00:01, 23.10it/s]
 62%|   | 49/79 [00:02<00:01, 23.81it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.43it/s]
 13%|        | 10/79 [00:01<00:20,  3.32it/s]
 16%|        | 13/79 [00:01<00:14,  4.50it/s]
 20%|        | 16/79 [00:01<00:10,  5.98it/s]
 24%|       | 19/79 [00:01<00:07,  7.76it/s]
 28%|       | 22/79 [00:01<00:05,  9.84it/s]
 32%|      | 25/79 [00:01<00:04, 12.06it/s]
 35%|      | 28/79 [00:01<00:03, 14.42it/s]
 39%|      | 31/79 [00:01<00:02, 16.57it/s]
 43%|     | 34/79 [00:02<00:02, 18.56it/s]
 47%|     | 37/79 [00:02<00:02, 20.38it/s]
 51%|     | 40/79 [00:02<00:01, 21.66it/s]
 54%|    | 43/79 [00:02<00:01, 22.64it/s]
 58%|    | 46/79 [00:02<00:01, 23.48it/s]
 62%|   | 49/79 [00:02<00:01, 23.95it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.42it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.63it/s]
 28%|       | 22/79 [00:01<00:05,  9.67it/s]
 32%|      | 25/79 [00:01<00:04, 11.91it/s]
 35%|      | 28/79 [00:01<00:03, 14.18it/s]
 39%|      | 31/79 [00:01<00:02, 16.37it/s]
 43%|     | 34/79 [00:02<00:02, 18.38it/s]
 47%|     | 37/79 [00:02<00:02, 20.14it/s]
 51%|     | 40/79 [00:02<00:01, 21.43it/s]
 54%|    | 43/79 [00:02<00:01, 22.54it/s]
 58%|    | 46/79 [00:02<00:01, 23.48it/s]
 62%|   | 49/79 [00:02<00:01, 24.27it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.26it/s]
  4%|         | 3/79 [00:00<00:43,  1.74it/s]
  8%|         | 6/79 [00:01<00:30,  2.41it/s]
 11%|        | 9/79 [00:01<00:21,  3.32it/s]
 15%|        | 12/79 [00:01<00:14,  4.50it/s]
 19%|        | 15/79 [00:01<00:10,  5.96it/s]
 23%|       | 18/79 [00:01<00:07,  7.73it/s]
 27%|       | 21/79 [00:01<00:05,  9.77it/s]
 30%|       | 24/79 [00:01<00:04, 11.96it/s]
 34%|      | 27/79 [00:01<00:03, 14.20it/s]
 38%|      | 30/79 [00:01<00:03, 16.28it/s]
 42%|     | 33/79 [00:02<00:02, 18.26it/s]
 46%|     | 36/79 [00:02<00:02, 19.91it/s]
 49%|     | 39/79 [00:02<00:01, 21.17it/s]
 53%|    | 42/79 [00:02<00:01, 22.37it/s]
 57%|    | 45/79 [00:02<00:01, 22.97it/s]
 61%|    | 48/79 [00:02<00:01, 23.54it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:15,  4.40it/s]
 20%|        | 16/79 [00:01<00:10,  5.85it/s]
 24%|       | 19/79 [00:01<00:07,  7.63it/s]
 28%|       | 22/79 [00:01<00:05,  9.64it/s]
 32%|      | 25/79 [00:01<00:04, 11.85it/s]
 35%|      | 28/79 [00:01<00:03, 14.11it/s]
 39%|      | 31/79 [00:01<00:02, 16.35it/s]
 43%|     | 34/79 [00:02<00:02, 18.23it/s]
 47%|     | 37/79 [00:02<00:02, 19.99it/s]
 51%|     | 40/79 [00:02<00:01, 21.48it/s]
 54%|    | 43/79 [00:02<00:01, 22.70it/s]
 58%|    | 46/79 [00:02<00:01, 23.38it/s]
 62%|   | 49/79 [00:02<00:01, 24.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  4%|         | 3/79 [00:00<00:44,  1.70it/s]
  8%|         | 6/79 [00:01<00:30,  2.36it/s]
 11%|        | 9/79 [00:01<00:21,  3.24it/s]
 15%|        | 12/79 [00:01<00:15,  4.39it/s]
 19%|        | 15/79 [00:01<00:10,  5.83it/s]
 23%|       | 18/79 [00:01<00:08,  7.57it/s]
 27%|       | 21/79 [00:01<00:06,  9.58it/s]
 30%|       | 24/79 [00:01<00:04, 11.74it/s]
 34%|      | 27/79 [00:01<00:03, 13.96it/s]
 38%|      | 30/79 [00:02<00:03, 16.15it/s]
 42%|     | 33/79 [00:02<00:02, 18.10it/s]
 46%|     | 36/79 [00:02<00:02, 19.74it/s]
 49%|     | 39/79 [00:02<00:01, 21.18it/s]
 53%|    | 42/79 [00:02<00:01, 22.20it/s]
 57%|    | 45/79 [00:02<00:01, 23.15it/s]
 61%|    | 48/79 [00:02<00:01, 23.68it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.76it/s]
 24%|       | 19/79 [00:01<00:07,  7.51it/s]
 28%|       | 22/79 [00:01<00:05,  9.55it/s]
 32%|      | 25/79 [00:01<00:04, 11.69it/s]
 35%|      | 28/79 [00:01<00:03, 13.99it/s]
 39%|      | 31/79 [00:02<00:02, 16.15it/s]
 43%|     | 34/79 [00:02<00:02, 17.99it/s]
 47%|     | 37/79 [00:02<00:02, 19.69it/s]
 51%|     | 40/79 [00:02<00:01, 21.03it/s]
 54%|    | 43/79 [00:02<00:01, 22.10it/s]
 58%|    | 46/79 [00:02<00:01, 23.15it/s]
 62%|   | 49/79 [00:02<00:01, 23.71it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.26it/s]
  4%|         | 3/79 [00:00<00:43,  1.74it/s]
  8%|         | 6/79 [00:01<00:30,  2.41it/s]
 11%|        | 9/79 [00:01<00:21,  3.31it/s]
 15%|        | 12/79 [00:01<00:14,  4.48it/s]
 19%|        | 15/79 [00:01<00:10,  5.95it/s]
 23%|       | 18/79 [00:01<00:08,  7.62it/s]
 27%|       | 21/79 [00:01<00:06,  9.60it/s]
 30%|       | 24/79 [00:01<00:04, 11.82it/s]
 34%|      | 27/79 [00:01<00:03, 14.11it/s]
 38%|      | 30/79 [00:02<00:03, 16.17it/s]
 42%|     | 33/79 [00:02<00:02, 18.00it/s]
 46%|     | 36/79 [00:02<00:02, 19.71it/s]
 49%|     | 39/79 [00:02<00:01, 21.08it/s]
 53%|    | 42/79 [00:02<00:01, 22.28it/s]
 57%|    | 45/79 [00:02<00:01, 23.13it/s]
 61%|    | 48/79 [00:02<00:01, 23.81it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.41it/s]
 32%|      | 25/79 [00:01<00:04, 11.63it/s]
 35%|      | 28/79 [00:01<00:03, 13.98it/s]
 39%|      | 31/79 [00:02<00:02, 16.21it/s]
 43%|     | 34/79 [00:02<00:02, 18.10it/s]
 47%|     | 37/79 [00:02<00:02, 19.92it/s]
 51%|     | 40/79 [00:02<00:01, 21.18it/s]
 54%|    | 43/79 [00:02<00:01, 22.33it/s]
 58%|    | 46/79 [00:02<00:01, 22.93it/s]
 62%|   | 49/79 [00:02<00:01, 23.76it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:20,  3.29it/s]
 16%|        | 13/79 [00:01<00:14,  4.40it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.53it/s]
 28%|       | 22/79 [00:01<00:05,  9.57it/s]
 32%|      | 25/79 [00:01<00:04, 11.74it/s]
 35%|      | 28/79 [00:01<00:03, 14.08it/s]
 39%|      | 31/79 [00:02<00:02, 16.25it/s]
 43%|     | 34/79 [00:02<00:02, 18.22it/s]
 47%|     | 37/79 [00:02<00:02, 19.92it/s]
 51%|     | 40/79 [00:02<00:01, 21.44it/s]
 54%|    | 43/79 [00:02<00:01, 22.57it/s]
 58%|    | 46/79 [00:02<00:01, 23.31it/s]
 62%|   | 49/79 [00:02<00:01, 24.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.27it/s]
 16%|        | 13/79 [00:01<00:14,  4.42it/s]
 20%|        | 16/79 [00:01<00:10,  5.88it/s]
 24%|       | 19/79 [00:01<00:07,  7.62it/s]
 28%|       | 22/79 [00:01<00:05,  9.68it/s]
 32%|      | 25/79 [00:01<00:04, 11.89it/s]
 35%|      | 28/79 [00:01<00:03, 14.21it/s]
 39%|      | 31/79 [00:02<00:02, 16.51it/s]
 43%|     | 34/79 [00:02<00:02, 18.48it/s]
 47%|     | 37/79 [00:02<00:02, 20.19it/s]
 51%|     | 40/79 [00:02<00:01, 21.36it/s]
 54%|    | 43/79 [00:02<00:01, 22.45it/s]
 58%|    | 46/79 [00:02<00:01, 22.94it/s]
 62%|   | 49/79 [00:02<00:01, 23.58it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.31it/s]
 32%|      | 25/79 [00:01<00:04, 11.55it/s]
 35%|      | 28/79 [00:01<00:03, 13.74it/s]
 39%|      | 31/79 [00:02<00:02, 16.10it/s]
 43%|     | 34/79 [00:02<00:02, 18.06it/s]
 47%|     | 37/79 [00:02<00:02, 19.86it/s]
 51%|     | 40/79 [00:02<00:01, 21.16it/s]
 54%|    | 43/79 [00:02<00:01, 22.35it/s]
 58%|    | 46/79 [00:02<00:01, 23.20it/s]
 62%|   | 49/79 [00:02<00:01, 23.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.42it/s]
 13%|        | 10/79 [00:01<00:20,  3.32it/s]
 16%|        | 13/79 [00:01<00:14,  4.50it/s]
 20%|        | 16/79 [00:01<00:10,  5.97it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.60it/s]
 32%|      | 25/79 [00:01<00:04, 11.82it/s]
 35%|      | 28/79 [00:01<00:03, 14.07it/s]
 39%|      | 31/79 [00:02<00:02, 16.21it/s]
 43%|     | 34/79 [00:02<00:02, 18.21it/s]
 47%|     | 37/79 [00:02<00:02, 19.88it/s]
 51%|     | 40/79 [00:02<00:01, 21.14it/s]
 54%|    | 43/79 [00:02<00:01, 22.23it/s]
 58%|    | 46/79 [00:02<00:01, 23.08it/s]
 62%|   | 49/79 [00:02<00:01, 23.61it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.35it/s]
 32%|      | 25/79 [00:01<00:04, 11.57it/s]
 35%|      | 28/79 [00:01<00:03, 13.84it/s]
 39%|      | 31/79 [00:02<00:02, 16.03it/s]
 43%|     | 34/79 [00:02<00:02, 18.05it/s]
 47%|     | 37/79 [00:02<00:02, 19.78it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 22.11it/s]
 58%|    | 46/79 [00:02<00:01, 22.78it/s]
 62%|   | 49/79 [00:02<00:01, 23.49it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.70it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.51it/s]
 35%|      | 28/79 [00:01<00:03, 13.85it/s]
 39%|      | 31/79 [00:02<00:02, 16.04it/s]
 43%|     | 34/79 [00:02<00:02, 17.98it/s]
 47%|     | 37/79 [00:02<00:02, 19.72it/s]
 51%|     | 40/79 [00:02<00:01, 21.16it/s]
 54%|    | 43/79 [00:02<00:01, 22.05it/s]
 58%|    | 46/79 [00:02<00:01, 22.79it/s]
 62%|   | 49/79 [00:02<00:01, 23.43it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:30,  2.40it/s]
 13%|        | 10/79 [00:01<00:21,  3.29it/s]
 16%|        | 13/79 [00:01<00:14,  4.45it/s]
 20%|        | 16/79 [00:01<00:10,  5.91it/s]
 24%|       | 19/79 [00:01<00:07,  7.65it/s]
 28%|       | 22/79 [00:01<00:05,  9.65it/s]
 32%|      | 25/79 [00:01<00:04, 11.82it/s]
 35%|      | 28/79 [00:01<00:03, 14.03it/s]
 39%|      | 31/79 [00:02<00:02, 16.08it/s]
 43%|     | 34/79 [00:02<00:02, 17.96it/s]
 47%|     | 37/79 [00:02<00:02, 19.44it/s]
 51%|     | 40/79 [00:02<00:01, 20.77it/s]
 54%|    | 43/79 [00:02<00:01, 21.81it/s]
 58%|    | 46/79 [00:02<00:01, 22.00it/s]
 62%|   | 49/79 [00:02<00:01, 22.83it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.08it/s]
 35%|      | 28/79 [00:01<00:03, 13.37it/s]
 39%|      | 31/79 [00:02<00:03, 15.66it/s]
 43%|     | 34/79 [00:02<00:02, 17.80it/s]
 47%|     | 37/79 [00:02<00:02, 19.49it/s]
 51%|     | 40/79 [00:02<00:01, 20.91it/s]
 54%|    | 43/79 [00:02<00:01, 22.32it/s]
 58%|    | 46/79 [00:02<00:01, 23.24it/s]
 62%|   | 49/79 [00:02<00:01, 23.82it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.25it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.38it/s]
 35%|      | 28/79 [00:01<00:03, 13.73it/s]
 39%|      | 31/79 [00:02<00:03, 15.88it/s]
 43%|     | 34/79 [00:02<00:02, 17.97it/s]
 47%|     | 37/79 [00:02<00:02, 19.63it/s]
 51%|     | 40/79 [00:02<00:01, 21.23it/s]
 54%|    | 43/79 [00:02<00:01, 22.52it/s]
 58%|    | 46/79 [00:02<00:01, 23.48it/s]
 62%|   | 49/79 [00:02<00:01, 24.16it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.05it/s]
 28%|       | 22/79 [00:01<00:06,  8.95it/s]
 32%|      | 25/79 [00:01<00:04, 11.09it/s]
 35%|      | 28/79 [00:01<00:03, 13.34it/s]
 39%|      | 31/79 [00:02<00:03, 15.51it/s]
 43%|     | 34/79 [00:02<00:02, 17.54it/s]
 47%|     | 37/79 [00:02<00:02, 19.37it/s]
 51%|     | 40/79 [00:02<00:01, 20.79it/s]
 54%|    | 43/79 [00:02<00:01, 21.73it/s]
 58%|    | 46/79 [00:02<00:01, 22.67it/s]
 62%|   | 49/79 [00:02<00:01, 23.23it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.17it/s]
 28%|       | 22/79 [00:01<00:06,  9.07it/s]
 32%|      | 25/79 [00:01<00:04, 11.25it/s]
 35%|      | 28/79 [00:01<00:03, 13.46it/s]
 39%|      | 31/79 [00:02<00:03, 15.64it/s]
 43%|     | 34/79 [00:02<00:02, 17.64it/s]
 47%|     | 37/79 [00:02<00:02, 19.27it/s]
 51%|     | 40/79 [00:02<00:01, 20.67it/s]
 54%|    | 43/79 [00:02<00:01, 21.86it/s]
 58%|    | 46/79 [00:02<00:01, 22.70it/s]
 62%|   | 49/79 [00:02<00:01, 23.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.17it/s]
 28%|       | 22/79 [00:01<00:06,  9.14it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.57it/s]
 39%|      | 31/79 [00:02<00:03, 15.74it/s]
 43%|     | 34/79 [00:02<00:02, 17.83it/s]
 47%|     | 37/79 [00:02<00:02, 19.41it/s]
 51%|     | 40/79 [00:02<00:01, 21.02it/s]
 54%|    | 43/79 [00:02<00:01, 22.21it/s]
 58%|    | 46/79 [00:02<00:01, 23.06it/s]
 62%|   | 49/79 [00:02<00:01, 23.90it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.20it/s]
 28%|       | 22/79 [00:01<00:06,  9.12it/s]
 32%|      | 25/79 [00:01<00:04, 11.20it/s]
 35%|      | 28/79 [00:01<00:03, 13.42it/s]
 39%|      | 31/79 [00:02<00:03, 15.45it/s]
 43%|     | 34/79 [00:02<00:02, 17.33it/s]
 47%|     | 37/79 [00:02<00:02, 19.02it/s]
 51%|     | 40/79 [00:02<00:01, 20.48it/s]
 54%|    | 43/79 [00:02<00:01, 21.42it/s]
 58%|    | 46/79 [00:02<00:01, 22.35it/s]
 62%|   | 49/79 [00:02<00:01, 23.15it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  3.99it/s]
 20%|        | 16/79 [00:01<00:11,  5.33it/s]
 24%|       | 19/79 [00:01<00:08,  6.98it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 10.99it/s]
 35%|      | 28/79 [00:02<00:03, 13.13it/s]
 39%|      | 31/79 [00:02<00:03, 15.24it/s]
 43%|     | 34/79 [00:02<00:02, 17.16it/s]
 47%|     | 37/79 [00:02<00:02, 18.70it/s]
 51%|     | 40/79 [00:02<00:01, 20.07it/s]
 54%|    | 43/79 [00:02<00:01, 21.12it/s]
 58%|    | 46/79 [00:02<00:01, 21.87it/s]
 62%|   | 49/79 [00:02<00:01, 22.91it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.92it/s]
 28%|       | 22/79 [00:01<00:06,  8.83it/s]
 32%|      | 25/79 [00:01<00:04, 10.92it/s]
 35%|      | 28/79 [00:02<00:03, 13.16it/s]
 39%|      | 31/79 [00:02<00:03, 15.28it/s]
 43%|     | 34/79 [00:02<00:02, 17.26it/s]
 47%|     | 37/79 [00:02<00:02, 19.05it/s]
 51%|     | 40/79 [00:02<00:01, 20.50it/s]
 54%|    | 43/79 [00:02<00:01, 21.53it/s]
 58%|    | 46/79 [00:02<00:01, 22.46it/s]
 62%|   | 49/79 [00:02<00:01, 23.12it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  8.94it/s]
 32%|      | 25/79 [00:01<00:04, 11.08it/s]
 35%|      | 28/79 [00:02<00:03, 13.27it/s]
 39%|      | 31/79 [00:02<00:03, 15.36it/s]
 43%|     | 34/79 [00:02<00:02, 17.21it/s]
 47%|     | 37/79 [00:02<00:02, 18.90it/s]
 51%|     | 40/79 [00:02<00:01, 20.24it/s]
 54%|    | 43/79 [00:02<00:01, 21.34it/s]
 58%|    | 46/79 [00:02<00:01, 22.14it/s]
 62%|   | 49/79 [00:02<00:01, 22.71it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.45it/s]
 24%|       | 19/79 [00:01<00:08,  7.08it/s]
 28%|       | 22/79 [00:01<00:06,  9.03it/s]
 32%|      | 25/79 [00:01<00:04, 11.12it/s]
 35%|      | 28/79 [00:02<00:03, 13.26it/s]
 39%|      | 31/79 [00:02<00:03, 15.34it/s]
 43%|     | 34/79 [00:02<00:02, 17.18it/s]
 47%|     | 37/79 [00:02<00:02, 18.75it/s]
 51%|     | 40/79 [00:02<00:01, 19.89it/s]
 54%|    | 43/79 [00:02<00:01, 21.09it/s]
 58%|    | 46/79 [00:02<00:01, 22.01it/s]
 62%|   | 49/79 [00:02<00:01, 22.65it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:35,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.16it/s]
 24%|       | 19/79 [00:01<00:08,  6.75it/s]
 28%|       | 22/79 [00:01<00:06,  8.65it/s]
 32%|      | 25/79 [00:01<00:05, 10.71it/s]
 35%|      | 28/79 [00:02<00:03, 12.87it/s]
 39%|      | 31/79 [00:02<00:03, 14.88it/s]
 43%|     | 34/79 [00:02<00:02, 16.77it/s]
 47%|     | 37/79 [00:02<00:02, 18.60it/s]
 51%|     | 40/79 [00:02<00:01, 19.66it/s]
 54%|    | 43/79 [00:02<00:01, 20.53it/s]
 58%|    | 46/79 [00:02<00:01, 21.24it/s]
 62%|   | 49/79 [00:02<00:01, 22.09it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:51,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.81it/s]
 16%|        | 13/79 [00:01<00:17,  3.83it/s]
 20%|        | 16/79 [00:01<00:12,  5.13it/s]
 24%|       | 19/79 [00:01<00:08,  6.74it/s]
 28%|       | 22/79 [00:01<00:06,  8.60it/s]
 32%|      | 25/79 [00:01<00:05, 10.64it/s]
 35%|      | 28/79 [00:02<00:03, 12.82it/s]
 39%|      | 31/79 [00:02<00:03, 14.91it/s]
 43%|     | 34/79 [00:02<00:02, 16.82it/s]
 47%|     | 37/79 [00:02<00:02, 18.44it/s]
 51%|     | 40/79 [00:02<00:01, 19.84it/s]
 54%|    | 43/79 [00:02<00:01, 20.83it/s]
 58%|    | 46/79 [00:02<00:01, 21.66it/s]
 62%|   | 49/79 [00:02<00:01, 22.28it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.42it/s]
  9%|         | 7/79 [00:01<00:36,  1.99it/s]
 13%|        | 10/79 [00:01<00:25,  2.74it/s]
 16%|        | 13/79 [00:01<00:17,  3.75it/s]
 20%|        | 16/79 [00:01<00:12,  5.03it/s]
 24%|       | 19/79 [00:01<00:09,  6.64it/s]
 28%|       | 22/79 [00:01<00:06,  8.48it/s]
 32%|      | 25/79 [00:01<00:05, 10.59it/s]
 35%|      | 28/79 [00:02<00:04, 12.75it/s]
 39%|      | 31/79 [00:02<00:03, 14.84it/s]
 43%|     | 34/79 [00:02<00:02, 16.77it/s]
 47%|     | 37/79 [00:02<00:02, 18.51it/s]
 51%|     | 40/79 [00:02<00:01, 19.91it/s]
 54%|    | 43/79 [00:02<00:01, 20.88it/s]
 58%|    | 46/79 [00:02<00:01, 21.99it/s]
 62%|   | 49/79 [00:02<00:01, 22.35it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  5%|         | 4/79 [00:01<00:53,  1.41it/s]
  9%|         | 7/79 [00:01<00:36,  1.97it/s]
 13%|        | 10/79 [00:01<00:25,  2.72it/s]
 16%|        | 13/79 [00:01<00:17,  3.71it/s]
 20%|        | 16/79 [00:01<00:12,  4.97it/s]
 24%|       | 19/79 [00:01<00:09,  6.55it/s]
 28%|       | 22/79 [00:01<00:06,  8.36it/s]
 32%|      | 25/79 [00:01<00:05, 10.44it/s]
 35%|      | 28/79 [00:02<00:04, 12.60it/s]
 39%|      | 31/79 [00:02<00:03, 14.79it/s]
 43%|     | 34/79 [00:02<00:02, 16.80it/s]
 47%|     | 37/79 [00:02<00:02, 18.49it/s]
 51%|     | 40/79 [00:02<00:01, 19.98it/s]
 54%|    | 43/79 [00:02<00:01, 21.18it/s]
 58%|    | 46/79 [00:02<00:01, 21.83it/s]
 62%|   | 49/79 [00:02<00:01, 22.54it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.84it/s]
 20%|        | 16/79 [00:01<00:12,  5.14it/s]
 24%|       | 19/79 [00:01<00:08,  6.74it/s]
 28%|       | 22/79 [00:01<00:06,  8.58it/s]
 32%|      | 25/79 [00:01<00:05, 10.62it/s]
 35%|      | 28/79 [00:02<00:03, 12.77it/s]
 39%|      | 31/79 [00:02<00:03, 14.90it/s]
 43%|     | 34/79 [00:02<00:02, 16.70it/s]
 47%|     | 37/79 [00:02<00:02, 18.36it/s]
 51%|     | 40/79 [00:02<00:01, 19.82it/s]
 54%|    | 43/79 [00:02<00:01, 20.74it/s]
 58%|    | 46/79 [00:02<00:01, 21.39it/s]
 62%|   | 49/79 [00:02<00:01, 21.84it/s]
 66%|   | 52/79 [00:03<00:0121it/s]
 68%|   | 54/79 [00:02<00:01, 24.68it/s]
 72%|  | 57/79 [00:02<00:00, 24.81it/s]
 76%|  | 60/79 [00:03<00:00, 24.88it/s]
 80%|  | 63/79 [00:03<00:00, 24.83it/s]
 84%| | 66/79 [00:03<00:00, 24.80it/s]
 87%| | 69/79 [00:03<00:00, 25.01it/s]
 91%| | 72/79 [00:03<00:00, 25.29it/s]
 95%|| 75/79 [00:03<00:00, 25.94it/s]
 99%|| 78/79 [00:03<00:00, 26.97it/s]
100%|| 79/79 [00:03<00:00, 20.42it/s]
, 24.69it/s]
 70%|   | 55/79 [00:02<00:00, 24.89it/s]
 73%|  | 58/79 [00:03<00:00, 25.44it/s]
 77%|  | 61/79 [00:03<00:00, 25.49it/s]
 81%|  | 64/79 [00:03<00:00, 25.70it/s]
 85%| | 67/79 [00:03<00:00, 25.81it/s]
 89%| | 70/79 [00:03<00:00, 26.29it/s]
 92%|| 73/79 [00:03<00:00, 26.22it/s]
 96%|| 76/79 [00:03<00:00, 26.74it/s]
100%|| 79/79 [00:03<00:00, 27.39it/s]
, 24.35it/s]
 70%|   | 55/79 [00:02<00:00, 24.78it/s]
 73%|  | 58/79 [00:03<00:00, 24.98it/s]
 77%|  | 61/79 [00:03<00:00, 25.31it/s]
 81%|  | 64/79 [00:03<00:00, 25.02it/s]
 85%| | 67/79 [00:03<00:00, 24.87it/s]
 89%| | 70/79 [00:03<00:00, 24.49it/s]
 92%|| 73/79 [00:03<00:00, 25.06it/s]
 96%|| 76/79 [00:03<00:00, 25.58it/s]
100%|| 79/79 [00:03<00:00, 26.51it/s]
, 24.19it/s]
 70%|   | 55/79 [00:02<00:00, 24.43it/s]
 73%|  | 58/79 [00:03<00:00, 24.40it/s]
 77%|  | 61/79 [00:03<00:00, 24.72it/s]
 81%|  | 64/79 [00:03<00:00, 24.74it/s]
 85%| | 67/79 [00:03<00:00, 24.69it/s]
 89%| | 70/79 [00:03<00:00, 24.55it/s]
 92%|| 73/79 [00:03<00:00, 25.31it/s]
 96%|| 76/79 [00:03<00:00, 25.91it/s]
100%|| 79/79 [00:03<00:00, 26.76it/s]
, 24.47it/s]
 70%|   | 55/79 [00:02<00:00, 24.70it/s]
 73%|  | 58/79 [00:03<00:00, 24.90it/s]
 77%|  | 61/79 [00:03<00:00, 25.21it/s]
 81%|  | 64/79 [00:03<00:00, 25.23it/s]
 85%| | 67/79 [00:03<00:00, 25.62it/s]
 89%| | 70/79 [00:03<00:00, 25.90it/s]
 92%|| 73/79 [00:03<00:00, 26.03it/s]
 96%|| 76/79 [00:03<00:00, 26.46it/s]
100%|| 79/79 [00:03<00:00, 27.37it/s]
, 24.30it/s]
 70%|   | 55/79 [00:02<00:00, 24.72it/s]
 73%|  | 58/79 [00:03<00:00, 25.09it/s]
 77%|  | 61/79 [00:03<00:00, 25.21it/s]
 81%|  | 64/79 [00:03<00:00, 25.69it/s]
 85%| | 67/79 [00:03<00:00, 25.52it/s]
 89%| | 70/79 [00:03<00:00, 25.76it/s]
 92%|| 73/79 [00:03<00:00, 25.89it/s]
 96%|| 76/79 [00:03<00:00, 26.84it/s]
100%|| 79/79 [00:03<00:00, 26.97it/s]
, 24.08it/s]
 70%|   | 55/79 [00:02<00:00, 24.56it/s]
 73%|  | 58/79 [00:03<00:00, 24.44it/s]
 77%|  | 61/79 [00:03<00:00, 24.84it/s]
 81%|  | 64/79 [00:03<00:00, 25.07it/s]
 85%| | 67/79 [00:03<00:00, 25.15it/s]
 89%| | 70/79 [00:03<00:00, 25.25it/s]
 92%|| 73/79 [00:03<00:00, 25.41it/s]
 96%|| 76/79 [00:03<00:00, 26.03it/s]
100%|| 79/79 [00:03<00:00, 26.91it/s]
, 24.52it/s]
 70%|   | 55/79 [00:02<00:00, 25.00it/s]
 73%|  | 58/79 [00:03<00:00, 25.35it/s]
 77%|  | 61/79 [00:03<00:00, 25.38it/s]
 81%|  | 64/79 [00:03<00:00, 25.21it/s]
 85%| | 67/79 [00:03<00:00, 25.32it/s]
 89%| | 70/79 [00:03<00:00, 25.32it/s]
 92%|| 73/79 [00:03<00:00, 25.57it/s]
 96%|| 76/79 [00:03<00:00, 26.11it/s]
100%|| 79/79 [00:03<00:00, 26.81it/s]
02it/s]
 68%|   | 54/79 [00:02<00:01, 24.60it/s]
 72%|  | 57/79 [00:03<00:00, 24.91it/s]
 76%|  | 60/79 [00:03<00:00, 25.09it/s]
 80%|  | 63/79 [00:03<00:00, 25.19it/s]
 84%| | 66/79 [00:03<00:00, 25.12it/s]
 87%| | 69/79 [00:03<00:00, 25.18it/s]
 91%| | 72/79 [00:03<00:00, 25.06it/s]
 95%|| 75/79 [00:03<00:00, 25.84it/s]
 99%|| 78/79 [00:03<00:00, 26.22it/s]
100%|| 79/79 [00:03<00:00, 20.01it/s]
, 24.27it/s]
 70%|   | 55/79 [00:02<00:00, 24.73it/s]
 73%|  | 58/79 [00:03<00:00, 24.96it/s]
 77%|  | 61/79 [00:03<00:00, 24.90it/s]
 81%|  | 64/79 [00:03<00:00, 25.01it/s]
 85%| | 67/79 [00:03<00:00, 25.08it/s]
 89%| | 70/79 [00:03<00:00, 25.03it/s]
 92%|| 73/79 [00:03<00:00, 25.45it/s]
 96%|| 76/79 [00:03<00:00, 26.01it/s]
100%|| 79/79 [00:03<00:00, 26.68it/s]
12it/s]
 68%|   | 54/79 [00:02<00:01, 24.39it/s]
 72%|  | 57/79 [00:03<00:00, 24.73it/s]
 76%|  | 60/79 [00:03<00:00, 24.70it/s]
 80%|  | 63/79 [00:03<00:00, 24.80it/s]
 84%| | 66/79 [00:03<00:00, 24.88it/s]
 87%| | 69/79 [00:03<00:00, 24.87it/s]
 91%| | 72/79 [00:03<00:00, 25.08it/s]
 95%|| 75/79 [00:03<00:00, 25.65it/s]
 99%|| 78/79 [00:03<00:00, 26.23it/s]
100%|| 79/79 [00:03<00:00, 19.82it/s]
, 23.94it/s]
 70%|   | 55/79 [00:02<00:00, 24.51it/s]
 73%|  | 58/79 [00:03<00:00, 24.52it/s]
 77%|  | 61/79 [00:03<00:00, 24.32it/s]
 81%|  | 64/79 [00:03<00:00, 24.55it/s]
 85%| | 67/79 [00:03<00:00, 24.67it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 25.44it/s]
 96%|| 76/79 [00:03<00:00, 26.04it/s]
100%|| 79/79 [00:03<00:00, 26.96it/s]
, 23.95it/s]
 70%|   | 55/79 [00:03<00:00, 24.15it/s]
 73%|  | 58/79 [00:03<00:00, 24.28it/s]
 77%|  | 61/79 [00:03<00:00, 24.46it/s]
 81%|  | 64/79 [00:03<00:00, 24.67it/s]
 85%| | 67/79 [00:03<00:00, 24.84it/s]
 89%| | 70/79 [00:03<00:00, 24.97it/s]
 92%|| 73/79 [00:03<00:00, 25.28it/s]
 96%|| 76/79 [00:03<00:00, 25.90it/s]
100%|| 79/79 [00:03<00:00, 26.79it/s]
, 24.61it/s]
 70%|   | 55/79 [00:03<00:00, 24.78it/s]
 73%|  | 58/79 [00:03<00:00, 24.77it/s]
 77%|  | 61/79 [00:03<00:00, 25.04it/s]
 81%|  | 64/79 [00:03<00:00, 25.21it/s]
 85%| | 67/79 [00:03<00:00, 25.32it/s]
 89%| | 70/79 [00:03<00:00, 25.27it/s]
 92%|| 73/79 [00:03<00:00, 25.64it/s]
 96%|| 76/79 [00:03<00:00, 26.01it/s]
100%|| 79/79 [00:03<00:00, 26.93it/s]
24it/s]
 68%|   | 54/79 [00:02<00:01, 24.26it/s]
 72%|  | 57/79 [00:03<00:00, 24.45it/s]
 76%|  | 60/79 [00:03<00:00, 24.77it/s]
 80%|  | 63/79 [00:03<00:00, 24.96it/s]
 84%| | 66/79 [00:03<00:00, 24.86it/s]
 87%| | 69/79 [00:03<00:00, 24.94it/s]
 91%| | 72/79 [00:03<00:00, 24.97it/s]
 95%|| 75/79 [00:03<00:00, 25.72it/s]
 99%|| 78/79 [00:03<00:00, 26.11it/s]
100%|| 79/79 [00:03<00:00, 19.79it/s]
, 23.60it/s]
 70%|   | 55/79 [00:03<00:01, 23.81it/s]
 73%|  | 58/79 [00:03<00:00, 24.25it/s]
 77%|  | 61/79 [00:03<00:00, 24.65it/s]
 81%|  | 64/79 [00:03<00:00, 24.45it/s]
 85%| | 67/79 [00:03<00:00, 24.58it/s]
 89%| | 70/79 [00:03<00:00, 24.66it/s]
 92%|| 73/79 [00:03<00:00, 25.03it/s]
 96%|| 76/79 [00:03<00:00, 25.69it/s]
100%|| 79/79 [00:03<00:00, 26.67it/s]
, 24.02it/s]
 70%|   | 55/79 [00:03<00:00, 24.34it/s]
 73%|  | 58/79 [00:03<00:00, 24.60it/s]
 77%|  | 61/79 [00:03<00:00, 24.64it/s]
 81%|  | 64/79 [00:03<00:00, 24.96it/s]
 85%| | 67/79 [00:03<00:00, 25.01it/s]
 89%| | 70/79 [00:03<00:00, 25.07it/s]
 92%|| 73/79 [00:03<00:00, 25.33it/s]
 96%|| 76/79 [00:03<00:00, 25.87it/s]
100%|| 79/79 [00:03<00:00, 26.73it/s]
, 24.50it/s]
 70%|   | 55/79 [00:03<00:00, 24.81it/s]
 73%|  | 58/79 [00:03<00:00, 25.01it/s]
 77%|  | 61/79 [00:03<00:00, 25.07it/s]
 81%|  | 64/79 [00:03<00:00, 24.93it/s]
 85%| | 67/79 [00:03<00:00, 25.11it/s]
 89%| | 70/79 [00:03<00:00, 25.16it/s]
 92%|| 73/79 [00:03<00:00, 25.38it/s]
 96%|| 76/79 [00:03<00:00, 25.81it/s]
100%|| 79/79 [00:03<00:00, 26.59it/s]
, 23.41it/s]
 70%|   | 55/79 [00:03<00:01, 23.69it/s]
 73%|  | 58/79 [00:03<00:00, 23.95it/s]
 77%|  | 61/79 [00:03<00:00, 24.25it/s]
 81%|  | 64/79 [00:03<00:00, 24.34it/s]
 85%| | 67/79 [00:03<00:00, 24.54it/s]
 89%| | 70/79 [00:03<00:00, 24.67it/s]
 92%|| 73/79 [00:03<00:00, 25.04it/s]
 96%|| 76/79 [00:03<00:00, 25.69it/s]
100%|| 79/79 [00:03<00:00, 26.74it/s]
, 23.90it/s]
 70%|   | 55/79 [00:03<00:00, 24.31it/s]
 73%|  | 58/79 [00:03<00:00, 24.52it/s]
 77%|  | 61/79 [00:03<00:00, 24.95it/s]
 81%|  | 64/79 [00:03<00:00, 25.25it/s]
 85%| | 67/79 [00:03<00:00, 25.37it/s]
 89%| | 70/79 [00:03<00:00, 25.39it/s]
 92%|| 73/79 [00:03<00:00, 25.47it/s]
 96%|| 76/79 [00:03<00:00, 26.25it/s]
100%|| 79/79 [00:03<00:00, 26.33it/s]
, 24.42it/s]
 70%|   | 55/79 [00:03<00:00, 24.86it/s]
 73%|  | 58/79 [00:03<00:00, 24.87it/s]
 77%|  | 61/79 [00:03<00:00, 25.03it/s]
 81%|  | 64/79 [00:03<00:00, 25.27it/s]
 85%| | 67/79 [00:03<00:00, 24.92it/s]
 89%| | 70/79 [00:03<00:00, 24.99it/s]
 92%|| 73/79 [00:03<00:00, 25.38it/s]
 96%|| 76/79 [00:03<00:00, 25.90it/s]
100%|| 79/79 [00:03<00:00, 26.74it/s]
, 23.65it/s]
 70%|   | 55/79 [00:03<00:01, 23.98it/s]
 73%|  | 58/79 [00:03<00:00, 24.42it/s]
 77%|  | 61/79 [00:03<00:00, 24.62it/s]
 81%|  | 64/79 [00:03<00:00, 24.72it/s]
 85%| | 67/79 [00:03<00:00, 24.87it/s]
 89%| | 70/79 [00:03<00:00, 24.91it/s]
 92%|| 73/79 [00:03<00:00, 25.26it/s]
 96%|| 76/79 [00:03<00:00, 25.70it/s]
100%|| 79/79 [00:03<00:00, 26.43it/s]
, 23.70it/s]
 70%|   | 55/79 [00:03<00:01, 23.94it/s]
 73%|  | 58/79 [00:03<00:00, 24.17it/s]
 77%|  | 61/79 [00:03<00:00, 24.28it/s]
 81%|  | 64/79 [00:03<00:00, 24.54it/s]
 85%| | 67/79 [00:03<00:00, 24.59it/s]
 89%| | 70/79 [00:03<00:00, 24.85it/s]
 92%|| 73/79 [00:03<00:00, 25.14it/s]
 96%|| 76/79 [00:03<00:00, 25.89it/s]
100%|| 79/79 [00:04<00:00, 26.80it/s]
, 23.91it/s]
 70%|   | 55/79 [00:03<00:00, 24.75it/s]
 73%|  | 58/79 [00:03<00:00, 24.79it/s]
 77%|  | 61/79 [00:03<00:00, 25.12it/s]
 81%|  | 64/79 [00:03<00:00, 25.41it/s]
 85%| | 67/79 [00:03<00:00, 25.50it/s]
 89%| | 70/79 [00:03<00:00, 25.83it/s]
 92%|| 73/79 [00:03<00:00, 25.65it/s]
 96%|| 76/79 [00:03<00:00, 26.14it/s]
100%|| 79/79 [00:04<00:00, 26.81it/s]
, 23.49it/s]
 70%|   | 55/79 [00:03<00:01, 23.94it/s]
 73%|  | 58/79 [00:03<00:00, 24.11it/s]
 77%|  | 61/79 [00:03<00:00, 24.11it/s]
 81%|  | 64/79 [00:03<00:00, 24.27it/s]
 85%| | 67/79 [00:03<00:00, 24.46it/s]
 89%| | 70/79 [00:03<00:00, 24.21it/s]
 92%|| 73/79 [00:03<00:00, 24.53it/s]
 96%|| 76/79 [00:03<00:00, 25.10it/s]
100%|| 79/79 [00:04<00:00, 25.99it/s]
, 23.40it/s]
 70%|   | 55/79 [00:03<00:01, 23.66it/s]
 73%|  | 58/79 [00:03<00:00, 23.97it/s]
 77%|  | 61/79 [00:03<00:00, 24.45it/s]
 81%|  | 64/79 [00:03<00:00, 24.38it/s]
 85%| | 67/79 [00:03<00:00, 24.49it/s]
 89%| | 70/79 [00:03<00:00, 24.62it/s]
 92%|| 73/79 [00:03<00:00, 24.73it/s]
 96%|| 76/79 [00:03<00:00, 25.32it/s]
100%|| 79/79 [00:04<00:00, 25.99it/s]
, 22.86it/s]
 70%|   | 55/79 [00:03<00:01, 23.28it/s]
 73%|  | 58/79 [00:03<00:00, 23.73it/s]
 77%|  | 61/79 [00:03<00:00, 23.61it/s]
 81%|  | 64/79 [00:03<00:00, 23.90it/s]
 85%| | 67/79 [00:03<00:00, 24.09it/s]
 89%| | 70/79 [00:03<00:00, 24.39it/s]
 92%|| 73/79 [00:03<00:00, 24.59it/s]
 96%|| 76/79 [00:03<00:00, 25.27it/s]
100%|| 79/79 [00:04<00:00, 26.16it/s]
, 22.92it/s]
 70%|   | 55/79 [00:03<00:01, 23.24it/s]
 73%|  | 58/79 [00:03<00:00, 23.80it/s]
 77%|  | 61/79 [00:03<00:00, 24.00it/s]
 81%|  | 64/79 [00:03<00:00, 24.20it/s]
 85%| | 67/79 [00:03<00:00, 24.34it/s]
 89%| | 70/79 [00:03<00:00, 24.36it/s]
 92%|| 73/79 [00:03<00:00, 24.68it/s]
 96%|| 76/79 [00:04<00:00, 25.37it/s]
100%|| 79/79 [00:04<00:00, 26.12it/s]
, 22.58it/s]
 70%|   | 55/79 [00:03<00:01, 23.04it/s]
 73%|  | 58/79 [00:03<00:00, 23.63it/s]
 77%|  | 61/79 [00:03<00:00, 24.02it/s]
 81%|  | 64/79 [00:03<00:00, 24.67it/s]
 85%| | 67/79 [00:03<00:00, 24.61it/s]
 89%| | 70/79 [00:03<00:00, 24.62it/s]
 92%|| 73/79 [00:03<00:00, 24.75it/s]
 96%|| 76/79 [00:04<00:00, 25.46it/s]
100%|| 79/79 [00:04<00:00, 26.10it/s]
, 22.97it/s]
 70%|   | 55/79 [00:03<00:01, 23.49it/s]
 73%|  | 58/79 [00:03<00:00, 23.65it/s]
 77%|  | 61/79 [00:03<00:00, 24.02it/s]
 81%|  | 64/79 [00:03<00:00, 24.22it/s]
 85%| | 67/79 [00:03<00:00, 24.47it/s]
 89%| | 70/79 [00:03<00:00, 24.61it/s]
 92%|| 73/79 [00:03<00:00, 25.00it/s]
 96%|| 76/79 [00:04<00:00, 25.39it/s]
100%|| 79/79 [00:04<00:00, 26.09it/s]
, 22.80it/s]
 70%|   | 55/79 [00:03<00:01, 23.19it/s]
 73%|  | 58/79 [00:03<00:00, 23.44it/s]
 77%|  | 61/79 [00:03<00:00, 23.63it/s]
 81%|  | 64/79 [00:03<00:00, 23.81it/s]
 85%| | 67/79 [00:03<00:00, 23.91it/s]
 89%| | 70/79 [00:03<00:00, 24.02it/s]
 92%|| 73/79 [00:03<00:00, 24.50it/s]
 96%|| 76/79 [00:04<00:00, 25.15it/s]
100%|| 79/79 [00:04<00:00, 26.10it/s]
, 22.52it/s]
 70%|   | 55/79 [00:03<00:01, 22.51it/s]
 73%|  | 58/79 [00:03<00:00, 22.55it/s]
 77%|  | 61/79 [00:03<00:00, 22.74it/s]
 81%|  | 64/79 [00:03<00:00, 23.10it/s]
 85%| | 67/79 [00:03<00:00, 23.34it/s]
 89%| | 70/79 [00:03<00:00, 23.20it/s]
 92%|| 73/79 [00:03<00:00, 23.88it/s]
 96%|| 76/79 [00:04<00:00, 24.71it/s]
100%|| 79/79 [00:04<00:00, 25.73it/s]
2020-06-23 16:58:23,366 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.337001 (0.02775680694580078 s / img per device, on 32 devices)
2020-06-23 16:58:23,389 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:58:23,389 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:58:23,412 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592956717635, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 6, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592956717635, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 6}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:58:39,273 maskrcnn_benchmark.trainer INFO: eta: 1:15:16  iter: 4600  loss: 0.6195 (0.8469)  loss_classifier: 0.2595 (0.3152)  loss_box_reg: 0.0951 (0.1343)  loss_mask: 0.2682 (0.3293)  loss_objectness: 0.0221 (0.0453)  loss_rpn_box_reg: 0.0086 (0.0229)  time: 0.1079 (0.1276)  data: 0.0015 (0.0202)  lr: 0.160000  max mem: 5148
2020-06-23 16:58:41,432 maskrcnn_benchmark.trainer INFO: eta: 1:15:10  iter: 4620  loss: 0.6093 (0.8461)  loss_classifier: 0.2127 (0.3147)  loss_box_reg: 0.0822 (0.1341)  loss_mask: 0.2739 (0.3291)  loss_objectness: 0.0169 (0.0453)  loss_rpn_box_reg: 0.0091 (0.0229)  time: 0.1082 (0.1275)  data: 0.0014 (0.0201)  lr: 0.160000  max mem: 5148
2020-06-23 16:58:43,583 maskrcnn_benchmark.trainer INFO: eta: 1:15:05  iter: 4640  loss: 0.6322 (0.8456)  loss_classifier: 0.2264 (0.3145)  loss_box_reg: 0.1128 (0.1341)  loss_mask: 0.2749 (0.3289)  loss_objectness: 0.0160 (0.0452)  loss_rpn_box_reg: 0.0080 (0.0229)  time: 0.1075 (0.1274)  data: 0.0014 (0.0200)  lr: 0.160000  max mem: 5148
2020-06-23 16:58:45,740 maskrcnn_benchmark.trainer INFO: eta: 1:14:59  iter: 4660  loss: 0.6582 (0.8450)  loss_classifier: 0.2190 (0.3142)  loss_box_reg: 0.1059 (0.1340)  loss_mask: 0.2800 (0.3287)  loss_objectness: 0.0276 (0.0452)  loss_rpn_box_reg: 0.0082 (0.0229)  time: 0.1079 (0.1273)  data: 0.0014 (0.0199)  lr: 0.160000  max mem: 5148
2020-06-23 16:58:47,888 maskrcnn_benchmark.trainer INFO: eta: 1:14:54  iter: 4680  loss: 0.6838 (0.8445)  loss_classifier: 0.2738 (0.3140)  loss_box_reg: 0.1228 (0.1339)  loss_mask: 0.2690 (0.3284)  loss_objectness: 0.0335 (0.0452)  loss_rpn_box_reg: 0.0108 (0.0229)  time: 0.1071 (0.1272)  data: 0.0015 (0.0199)  lr: 0.160000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 16:58:50,045 maskrcnn_benchmark.trainer INFO: eta: 1:14:48  iter: 4700  loss: 0.6025 (0.8435)  loss_classifier: 0.2058 (0.3136)  loss_box_reg: 0.0808 (0.1338)  loss_mask: 0.2564 (0.3281)  loss_objectness: 0.0182 (0.0451)  loss_rpn_box_reg: 0.0073 (0.0229)  time: 0.1072 (0.1272)  data: 0.0014 (0.0198)  lr: 0.160000  max mem: 5148
DONE (t=1.28s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:58:52,210 maskrcnn_benchmark.trainer INFO: eta: 1:14:43  iter: 4720  loss: 0.7049 (0.8431)  loss_classifier: 0.2427 (0.3135)  loss_box_reg: 0.1231 (0.1337)  loss_mask: 0.2957 (0.3280)  loss_objectness: 0.0252 (0.0451)  loss_rpn_box_reg: 0.0152 (0.0229)  time: 0.1085 (0.1271)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5148
DONE (t=2.30s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.25015
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.43829
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.25755
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13962
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.27320
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.31781
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.24089
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.39700
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.42008
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.26149
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.45529
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.50804
2020-06-23 16:58:54,343 maskrcnn_benchmark.trainer INFO: eta: 1:14:37  iter: 4740  loss: 0.6742 (0.8427)  loss_classifier: 0.2643 (0.3133)  loss_box_reg: 0.1076 (0.1337)  loss_mask: 0.2708 (0.3278)  loss_objectness: 0.0219 (0.0451)  loss_rpn_box_reg: 0.0132 (0.0229)  time: 0.1064 (0.1270)  data: 0.0015 (0.0196)  lr: 0.160000  max mem: 5148
2020-06-23 16:58:56,510 maskrcnn_benchmark.trainer INFO: eta: 1:14:32  iter: 4760  loss: 0.6480 (0.8422)  loss_classifier: 0.2549 (0.3131)  loss_box_reg: 0.1140 (0.1337)  loss_mask: 0.2696 (0.3276)  loss_objectness: 0.0240 (0.0450)  loss_rpn_box_reg: 0.0147 (0.0229)  time: 0.1081 (0.1269)  data: 0.0014 (0.0196)  lr: 0.160000  max mem: 5148
2020-06-23 16:58:58,655 maskrcnn_benchmark.trainer INFO: eta: 1:14:27  iter: 4780  loss: 0.6775 (0.8416)  loss_classifier: 0.2279 (0.3128)  loss_box_reg: 0.0940 (0.1336)  loss_mask: 0.2853 (0.3274)  loss_objectness: 0.0205 (0.0449)  loss_rpn_box_reg: 0.0107 (0.0229)  time: 0.1073 (0.1268)  data: 0.0014 (0.0195)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:00,811 maskrcnn_benchmark.trainer INFO: eta: 1:14:21  iter: 4800  loss: 0.7887 (0.8414)  loss_classifier: 0.2944 (0.3127)  loss_box_reg: 0.1417 (0.1336)  loss_mask: 0.3122 (0.3273)  loss_objectness: 0.0302 (0.0449)  loss_rpn_box_reg: 0.0112 (0.0229)  time: 0.1072 (0.1268)  data: 0.0015 (0.0194)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:02,962 maskrcnn_benchmark.trainer INFO: eta: 1:14:16  iter: 4820  loss: 0.6248 (0.8407)  loss_classifier: 0.2063 (0.3123)  loss_box_reg: 0.0896 (0.1335)  loss_mask: 0.2730 (0.3271)  loss_objectness: 0.0216 (0.0449)  loss_rpn_box_reg: 0.0089 (0.0229)  time: 0.1070 (0.1267)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:59:05,113 maskrcnn_benchmark.trainer INFO: eta: 1:14:11  iter: 4840  loss: 0.6712 (0.8402)  loss_classifier: 0.2642 (0.3121)  loss_box_reg: 0.1149 (0.1334)  loss_mask: 0.2658 (0.3269)  loss_objectness: 0.0212 (0.0449)  loss_rpn_box_reg: 0.0100 (0.0229)  time: 0.1070 (0.1266)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5148
DONE (t=3.36s)
2020-06-23 16:59:07,267 maskrcnn_benchmark.trainer INFO: eta: 1:14:05  iter: 4860  loss: 0.7829 (0.8398)  loss_classifier: 0.2563 (0.3119)  loss_box_reg: 0.1138 (0.1334)  loss_mask: 0.3170 (0.3269)  loss_objectness: 0.0288 (0.0448)  loss_rpn_box_reg: 0.0108 (0.0228)  time: 0.1073 (0.1265)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5148
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:59:09,408 maskrcnn_benchmark.trainer INFO: eta: 1:14:00  iter: 4880  loss: 0.6264 (0.8390)  loss_classifier: 0.1984 (0.3116)  loss_box_reg: 0.0893 (0.1332)  loss_mask: 0.2637 (0.3267)  loss_objectness: 0.0144 (0.0447)  loss_rpn_box_reg: 0.0088 (0.0228)  time: 0.1062 (0.1264)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5148
DONE (t=3.66s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.24186
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.41647
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.24907
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.09778
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.26902
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.35412
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.23880
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.38098
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.40127
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22589
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.44382
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.50918
2020-06-23 16:59:11,587 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.2501528200446626, segm mAP: 0.24185971010618965
:::MLLOG {"namespace": "", "time_ms": 1592956751587, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.2501528200446626, "SEGM": 0.24185971010618965}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1592956751588, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 5}}
2020-06-23 16:59:11,796 maskrcnn_benchmark.trainer INFO: eta: 1:13:56  iter: 4900  loss: 0.7011 (0.8384)  loss_classifier: 0.2500 (0.3113)  loss_box_reg: 0.1200 (0.1332)  loss_mask: 0.2835 (0.3264)  loss_objectness: 0.0220 (0.0447)  loss_rpn_box_reg: 0.0091 (0.0228)  time: 0.1069 (0.1264)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:13,952 maskrcnn_benchmark.trainer INFO: eta: 1:13:51  iter: 4920  loss: 0.6795 (0.8378)  loss_classifier: 0.2617 (0.3111)  loss_box_reg: 0.1037 (0.1331)  loss_mask: 0.2745 (0.3262)  loss_objectness: 0.0197 (0.0446)  loss_rpn_box_reg: 0.0080 (0.0227)  time: 0.1072 (0.1263)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:16,092 maskrcnn_benchmark.trainer INFO: eta: 1:13:46  iter: 4940  loss: 0.5872 (0.8369)  loss_classifier: 0.2089 (0.3107)  loss_box_reg: 0.0935 (0.1330)  loss_mask: 0.2593 (0.3260)  loss_objectness: 0.0180 (0.0445)  loss_rpn_box_reg: 0.0076 (0.0227)  time: 0.1069 (0.1263)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:18,259 maskrcnn_benchmark.trainer INFO: eta: 1:13:41  iter: 4960  loss: 0.7185 (0.8364)  loss_classifier: 0.2609 (0.3104)  loss_box_reg: 0.1318 (0.1329)  loss_mask: 0.2821 (0.3258)  loss_objectness: 0.0245 (0.0445)  loss_rpn_box_reg: 0.0074 (0.0227)  time: 0.1078 (0.1262)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:20,417 maskrcnn_benchmark.trainer INFO: eta: 1:13:36  iter: 4980  loss: 0.7079 (0.8360)  loss_classifier: 0.2417 (0.3103)  loss_box_reg: 0.1135 (0.1329)  loss_mask: 0.2892 (0.3256)  loss_objectness: 0.0400 (0.0445)  loss_rpn_box_reg: 0.0116 (0.0227)  time: 0.1081 (0.1261)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:22,562 maskrcnn_benchmark.trainer INFO: eta: 1:13:31  iter: 5000  loss: 0.6779 (0.8354)  loss_classifier: 0.2482 (0.3099)  loss_box_reg: 0.1158 (0.1328)  loss_mask: 0.2709 (0.3254)  loss_objectness: 0.0211 (0.0445)  loss_rpn_box_reg: 0.0112 (0.0227)  time: 0.1070 (0.1260)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:24,712 maskrcnn_benchmark.trainer INFO: eta: 1:13:26  iter: 5020  loss: 0.6043 (0.8347)  loss_classifier: 0.2146 (0.3096)  loss_box_reg: 0.0947 (0.1327)  loss_mask: 0.2763 (0.3253)  loss_objectness: 0.0177 (0.0444)  loss_rpn_box_reg: 0.0072 (0.0227)  time: 0.1076 (0.1260)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:26,873 maskrcnn_benchmark.trainer INFO: eta: 1:13:21  iter: 5040  loss: 0.6988 (0.8340)  loss_classifier: 0.2077 (0.3094)  loss_box_reg: 0.1115 (0.1326)  loss_mask: 0.2827 (0.3250)  loss_objectness: 0.0251 (0.0443)  loss_rpn_box_reg: 0.0088 (0.0227)  time: 0.1077 (0.1259)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:29,030 maskrcnn_benchmark.trainer INFO: eta: 1:13:16  iter: 5060  loss: 0.6085 (0.8334)  loss_classifier: 0.2090 (0.3091)  loss_box_reg: 0.0923 (0.1325)  loss_mask: 0.2761 (0.3249)  loss_objectness: 0.0190 (0.0443)  loss_rpn_box_reg: 0.0094 (0.0226)  time: 0.1075 (0.1258)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:31,174 maskrcnn_benchmark.trainer INFO: eta: 1:13:10  iter: 5080  loss: 0.7038 (0.8330)  loss_classifier: 0.2547 (0.3089)  loss_box_reg: 0.1191 (0.1325)  loss_mask: 0.2803 (0.3247)  loss_objectness: 0.0210 (0.0442)  loss_rpn_box_reg: 0.0146 (0.0226)  time: 0.1070 (0.1257)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:33,349 maskrcnn_benchmark.trainer INFO: eta: 1:13:06  iter: 5100  loss: 0.8028 (0.8326)  loss_classifier: 0.2724 (0.3088)  loss_box_reg: 0.1177 (0.1324)  loss_mask: 0.2734 (0.3245)  loss_objectness: 0.0333 (0.0442)  loss_rpn_box_reg: 0.0188 (0.0226)  time: 0.1079 (0.1257)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:35,506 maskrcnn_benchmark.trainer INFO: eta: 1:13:01  iter: 5120  loss: 0.7040 (0.8321)  loss_classifier: 0.2613 (0.3086)  loss_box_reg: 0.1105 (0.1323)  loss_mask: 0.2797 (0.3243)  loss_objectness: 0.0315 (0.0442)  loss_rpn_box_reg: 0.0184 (0.0226)  time: 0.1071 (0.1256)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:37,679 maskrcnn_benchmark.trainer INFO: eta: 1:12:56  iter: 5140  loss: 0.5688 (0.8313)  loss_classifier: 0.1848 (0.3083)  loss_box_reg: 0.0868 (0.1322)  loss_mask: 0.2521 (0.3241)  loss_objectness: 0.0190 (0.0441)  loss_rpn_box_reg: 0.0105 (0.0226)  time: 0.1086 (0.1255)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:39,838 maskrcnn_benchmark.trainer INFO: eta: 1:12:51  iter: 5160  loss: 0.7292 (0.8308)  loss_classifier: 0.2658 (0.3081)  loss_box_reg: 0.1111 (0.1321)  loss_mask: 0.2637 (0.3239)  loss_objectness: 0.0215 (0.0441)  loss_rpn_box_reg: 0.0084 (0.0226)  time: 0.1076 (0.1255)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:42,021 maskrcnn_benchmark.trainer INFO: eta: 1:12:46  iter: 5180  loss: 0.5873 (0.8301)  loss_classifier: 0.2239 (0.3079)  loss_box_reg: 0.1012 (0.1320)  loss_mask: 0.2567 (0.3236)  loss_objectness: 0.0141 (0.0440)  loss_rpn_box_reg: 0.0090 (0.0226)  time: 0.1096 (0.1254)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:44,185 maskrcnn_benchmark.trainer INFO: eta: 1:12:41  iter: 5200  loss: 0.7040 (0.8297)  loss_classifier: 0.2494 (0.3077)  loss_box_reg: 0.1232 (0.1320)  loss_mask: 0.2709 (0.3235)  loss_objectness: 0.0272 (0.0440)  loss_rpn_box_reg: 0.0149 (0.0226)  time: 0.1079 (0.1253)  data: 0.0015 (0.0180)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:46,362 maskrcnn_benchmark.trainer INFO: eta: 1:12:37  iter: 5220  loss: 0.6922 (0.8292)  loss_classifier: 0.2515 (0.3075)  loss_box_reg: 0.1217 (0.1319)  loss_mask: 0.2788 (0.3233)  loss_objectness: 0.0233 (0.0439)  loss_rpn_box_reg: 0.0085 (0.0225)  time: 0.1077 (0.1253)  data: 0.0015 (0.0180)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:48,518 maskrcnn_benchmark.trainer INFO: eta: 1:12:32  iter: 5240  loss: 0.6194 (0.8284)  loss_classifier: 0.2116 (0.3072)  loss_box_reg: 0.0829 (0.1318)  loss_mask: 0.2549 (0.3230)  loss_objectness: 0.0175 (0.0439)  loss_rpn_box_reg: 0.0084 (0.0225)  time: 0.1072 (0.1252)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:50,686 maskrcnn_benchmark.trainer INFO: eta: 1:12:27  iter: 5260  loss: 0.7003 (0.8279)  loss_classifier: 0.2500 (0.3070)  loss_box_reg: 0.1058 (0.1317)  loss_mask: 0.2879 (0.3228)  loss_objectness: 0.0205 (0.0438)  loss_rpn_box_reg: 0.0132 (0.0225)  time: 0.1080 (0.1252)  data: 0.0015 (0.0178)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:52,839 maskrcnn_benchmark.trainer INFO: eta: 1:12:22  iter: 5280  loss: 0.7376 (0.8276)  loss_classifier: 0.2323 (0.3068)  loss_box_reg: 0.1339 (0.1317)  loss_mask: 0.2929 (0.3227)  loss_objectness: 0.0202 (0.0438)  loss_rpn_box_reg: 0.0108 (0.0225)  time: 0.1074 (0.1251)  data: 0.0015 (0.0178)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:54,976 maskrcnn_benchmark.trainer INFO: eta: 1:12:18  iter: 5300  loss: 0.7560 (0.8272)  loss_classifier: 0.2662 (0.3067)  loss_box_reg: 0.1254 (0.1317)  loss_mask: 0.2804 (0.3226)  loss_objectness: 0.0261 (0.0438)  loss_rpn_box_reg: 0.0119 (0.0225)  time: 0.1069 (0.1250)  data: 0.0015 (0.0177)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:57,132 maskrcnn_benchmark.trainer INFO: eta: 1:12:13  iter: 5320  loss: 0.6162 (0.8264)  loss_classifier: 0.2046 (0.3063)  loss_box_reg: 0.1040 (0.1316)  loss_mask: 0.2473 (0.3223)  loss_objectness: 0.0189 (0.0437)  loss_rpn_box_reg: 0.0100 (0.0225)  time: 0.1078 (0.1250)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5148
2020-06-23 16:59:59,297 maskrcnn_benchmark.trainer INFO: eta: 1:12:08  iter: 5340  loss: 0.6596 (0.8257)  loss_classifier: 0.2517 (0.3061)  loss_box_reg: 0.1074 (0.1315)  loss_mask: 0.2435 (0.3221)  loss_objectness: 0.0227 (0.0437)  loss_rpn_box_reg: 0.0091 (0.0225)  time: 0.1080 (0.1249)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5148
2020-06-23 17:00:01,440 maskrcnn_benchmark.trainer INFO: eta: 1:12:03  iter: 5360  loss: 0.7221 (0.8252)  loss_classifier: 0.2602 (0.3058)  loss_box_reg: 0.0995 (0.1314)  loss_mask: 0.2892 (0.3219)  loss_objectness: 0.0275 (0.0436)  loss_rpn_box_reg: 0.0130 (0.0224)  time: 0.1071 (0.1248)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5148
2020-06-23 17:00:03,606 maskrcnn_benchmark.trainer INFO: eta: 1:11:59  iter: 5380  loss: 0.6539 (0.8246)  loss_classifier: 0.2334 (0.3056)  loss_box_reg: 0.1041 (0.1313)  loss_mask: 0.2585 (0.3217)  loss_objectness: 0.0219 (0.0436)  loss_rpn_box_reg: 0.0085 (0.0224)  time: 0.1079 (0.1248)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5148
2020-06-23 17:00:05,750 maskrcnn_benchmark.trainer INFO: eta: 1:11:54  iter: 5400  loss: 0.6109 (0.8242)  loss_classifier: 0.2491 (0.3055)  loss_box_reg: 0.0973 (0.1312)  loss_mask: 0.2765 (0.3216)  loss_objectness: 0.0287 (0.0435)  loss_rpn_box_reg: 0.0069 (0.0224)  time: 0.1072 (0.1247)  data: 0.0015 (0.0174)  lr: 0.160000  max mem: 5148
2020-06-23 17:00:07,913 maskrcnn_benchmark.trainer INFO: eta: 1:11:49  iter: 5420  loss: 0.6001 (0.8234)  loss_classifier: 0.1839 (0.3051)  loss_box_reg: 0.0719 (0.1311)  loss_mask: 0.2792 (0.3214)  loss_objectness: 0.0197 (0.0434)  loss_rpn_box_reg: 0.0080 (0.0224)  time: 0.1075 (0.1246)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5148
2020-06-23 17:00:10,072 maskrcnn_benchmark.trainer INFO: eta: 1:11:45  iter: 5440  loss: 0.6894 (0.8230)  loss_classifier: 0.2404 (0.3050)  loss_box_reg: 0.1090 (0.1310)  loss_mask: 0.2918 (0.3212)  loss_objectness: 0.0259 (0.0434)  loss_rpn_box_reg: 0.0106 (0.0224)  time: 0.1072 (0.1246)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5148
2020-06-23 17:00:12,227 maskrcnn_benchmark.trainer INFO: eta: 1:11:40  iter: 5460  loss: 0.7123 (0.8225)  loss_classifier: 0.2237 (0.3048)  loss_box_reg: 0.1129 (0.1310)  loss_mask: 0.2750 (0.3211)  loss_objectness: 0.0210 (0.0434)  loss_rpn_box_reg: 0.0096 (0.0224)  time: 0.1073 (0.1245)  data: 0.0013 (0.0172)  lr: 0.160000  max mem: 5148
2020-06-23 17:00:14,418 maskrcnn_benchmark.trainer INFO: eta: 1:11:36  iter: 5480  loss: 0.6089 (0.8219)  loss_classifier: 0.2359 (0.3045)  loss_box_reg: 0.0966 (0.1309)  loss_mask: 0.2606 (0.3209)  loss_objectness: 0.0225 (0.0433)  loss_rpn_box_reg: 0.0101 (0.0223)  time: 0.1088 (0.1245)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5148
2020-06-23 17:00:16,579 maskrcnn_benchmark.trainer INFO: eta: 1:11:31  iter: 5500  loss: 0.6093 (0.8215)  loss_classifier: 0.2003 (0.3043)  loss_box_reg: 0.1003 (0.1308)  loss_mask: 0.2731 (0.3207)  loss_objectness: 0.0185 (0.0433)  loss_rpn_box_reg: 0.0083 (0.0224)  time: 0.1075 (0.1244)  data: 0.0014 (0.0171)  lr: 0.160000  max mem: 5148
:::MLLOG {"namespace": "", "time_ms": 1592956817347, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 6}}
:::MLLOG {"namespace": "", "time_ms": 1592956817348, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 6}}
:::MLLOG {"namespace": "", "time_ms": 1592956817348, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 6}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 17:00:17,586 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
2020-06-23 17:00:17,892 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:59,  1.30it/s]
  5%|         | 4/79 [00:00<00:41,  1.82it/s]
  9%|         | 7/79 [00:01<00:28,  2.51it/s]
 13%|        | 10/79 [00:01<00:20,  3.45it/s]
 16%|        | 13/79 [00:01<00:14,  4.65it/s]
 20%|        | 16/79 [00:01<00:10,  6.18it/s]
 24%|       | 19/79 [00:01<00:07,  7.96it/s]
 28%|       | 22/79 [00:01<00:05, 10.05it/s]
 32%|      | 25/79 [00:01<00:04, 12.31it/s]
 35%|      | 28/79 [00:01<00:03, 14.55it/s]
 39%|      | 31/79 [00:01<00:02, 16.73it/s]
 43%|     | 34/79 [00:02<00:02, 18.70it/s]
 47%|     | 37/79 [00:02<00:02, 20.38it/s]
 51%|     | 40/79 [00:02<00:01, 21.68it/s]
 54%|    | 43/79 [00:02<00:01, 22.90it/s]
 58%|    | 46/79 [00:02<00:01, 23.60it/s]
 62%|   | 49/79 [00:02<00:01, 23.94it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.77it/s]
  9%|         | 7/79 [00:01<00:29,  2.45it/s]
 13%|        | 10/79 [00:01<00:20,  3.36it/s]
 16%|        | 13/79 [00:01<00:14,  4.54it/s]
 20%|        | 16/79 [00:01<00:10,  6.04it/s]
 24%|       | 19/79 [00:01<00:07,  7.83it/s]
 28%|       | 22/79 [00:01<00:05,  9.90it/s]
 32%|      | 25/79 [00:01<00:04, 12.15it/s]
 35%|      | 28/79 [00:01<00:03, 14.48it/s]
 39%|      | 31/79 [00:01<00:02, 16.70it/s]
 43%|     | 34/79 [00:02<00:02, 18.68it/s]
 47%|     | 37/79 [00:02<00:02, 20.27it/s]
 51%|     | 40/79 [00:02<00:01, 21.72it/s]
 54%|    | 43/79 [00:02<00:01, 22.80it/s]
 58%|    | 46/79 [00:02<00:01, 23.58it/s]
 62%|   | 49/79 [00:02<00:01, 24.32it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.43it/s]
 13%|        | 10/79 [00:01<00:20,  3.34it/s]
 16%|        | 13/79 [00:01<00:14,  4.52it/s]
 20%|        | 16/79 [00:01<00:10,  6.02it/s]
 24%|       | 19/79 [00:01<00:07,  7.80it/s]
 28%|       | 22/79 [00:01<00:05,  9.87it/s]
 32%|      | 25/79 [00:01<00:04, 12.14it/s]
 35%|      | 28/79 [00:01<00:03, 14.47it/s]
 39%|      | 31/79 [00:01<00:02, 16.66it/s]
 43%|     | 34/79 [00:02<00:02, 18.63it/s]
 47%|     | 37/79 [00:02<00:02, 20.29it/s]
 51%|     | 40/79 [00:02<00:01, 21.74it/s]
 54%|    | 43/79 [00:02<00:01, 22.92it/s]
 58%|    | 46/79 [00:02<00:01, 23.66it/s]
 62%|   | 49/79 [00:02<00:01, 24.32it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.29it/s]
  5%|         | 4/79 [00:00<00:41,  1.80it/s]
  9%|         | 7/79 [00:01<00:28,  2.50it/s]
 13%|        | 10/79 [00:01<00:20,  3.43it/s]
 16%|        | 13/79 [00:01<00:14,  4.62it/s]
 20%|        | 16/79 [00:01<00:10,  6.14it/s]
 24%|       | 19/79 [00:01<00:07,  7.96it/s]
 28%|       | 22/79 [00:01<00:05, 10.06it/s]
 32%|      | 25/79 [00:01<00:04, 12.16it/s]
 35%|      | 28/79 [00:01<00:03, 14.28it/s]
 39%|      | 31/79 [00:01<00:02, 16.41it/s]
 43%|     | 34/79 [00:02<00:02, 18.31it/s]
 47%|     | 37/79 [00:02<00:02, 20.05it/s]
 51%|     | 40/79 [00:02<00:01, 21.31it/s]
 54%|    | 43/79 [00:02<00:01, 22.34it/s]
 58%|    | 46/79 [00:02<00:01, 23.41it/s]
 62%|   | 49/79 [00:02<00:01, 23.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.56it/s]
 28%|       | 22/79 [00:01<00:05,  9.62it/s]
 32%|      | 25/79 [00:01<00:04, 11.90it/s]
 35%|      | 28/79 [00:01<00:03, 14.23it/s]
 39%|      | 31/79 [00:02<00:02, 16.49it/s]
 43%|     | 34/79 [00:02<00:02, 18.54it/s]
 47%|     | 37/79 [00:02<00:02, 20.37it/s]
 51%|     | 40/79 [00:02<00:01, 21.69it/s]
 54%|    | 43/79 [00:02<00:01, 22.94it/s]
 58%|    | 46/79 [00:02<00:01, 23.82it/s]
 62%|   | 49/79 [00:02<00:01, 24.52it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.30it/s]
  5%|         | 4/79 [00:00<00:41,  1.81it/s]
  9%|         | 7/79 [00:01<00:28,  2.51it/s]
 13%|        | 10/79 [00:01<00:20,  3.44it/s]
 16%|        | 13/79 [00:01<00:14,  4.65it/s]
 20%|        | 16/79 [00:01<00:10,  6.15it/s]
 24%|       | 19/79 [00:01<00:07,  7.96it/s]
 28%|       | 22/79 [00:01<00:05,  9.99it/s]
 32%|      | 25/79 [00:01<00:04, 12.29it/s]
 35%|      | 28/79 [00:01<00:03, 14.54it/s]
 39%|      | 31/79 [00:01<00:02, 16.63it/s]
 43%|     | 34/79 [00:02<00:02, 18.56it/s]
 47%|     | 37/79 [00:02<00:02, 20.34it/s]
 51%|     | 40/79 [00:02<00:01, 21.73it/s]
 54%|    | 43/79 [00:02<00:01, 22.44it/s]
 58%|    | 46/79 [00:02<00:01, 23.06it/s]
 62%|   | 49/79 [00:02<00:01, 23.75it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.28it/s]
  5%|         | 4/79 [00:00<00:42,  1.79it/s]
  9%|         | 7/79 [00:01<00:29,  2.48it/s]
 13%|        | 10/79 [00:01<00:20,  3.40it/s]
 16%|        | 13/79 [00:01<00:14,  4.60it/s]
 20%|        | 16/79 [00:01<00:10,  6.10it/s]
 24%|       | 19/79 [00:01<00:07,  7.89it/s]
 28%|       | 22/79 [00:01<00:05,  9.95it/s]
 32%|      | 25/79 [00:01<00:04, 12.18it/s]
 35%|      | 28/79 [00:01<00:03, 14.50it/s]
 39%|      | 31/79 [00:01<00:02, 16.76it/s]
 43%|     | 34/79 [00:02<00:02, 18.72it/s]
 47%|     | 37/79 [00:02<00:02, 20.26it/s]
 51%|     | 40/79 [00:02<00:01, 21.64it/s]
 54%|    | 43/79 [00:02<00:01, 22.43it/s]
 58%|    | 46/79 [00:02<00:01, 23.30it/s]
 62%|   | 49/79 [00:02<00:01, 23.86it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.42it/s]
 28%|       | 22/79 [00:01<00:06,  9.46it/s]
 32%|      | 25/79 [00:01<00:04, 11.70it/s]
 35%|      | 28/79 [00:01<00:03, 14.07it/s]
 39%|      | 31/79 [00:02<00:02, 16.31it/s]
 43%|     | 34/79 [00:02<00:02, 18.45it/s]
 47%|     | 37/79 [00:02<00:02, 20.17it/s]
 51%|     | 40/79 [00:02<00:01, 21.58it/s]
 54%|    | 43/79 [00:02<00:01, 22.93it/s]
 58%|    | 46/79 [00:02<00:01, 23.82it/s]
 62%|   | 49/79 [00:02<00:01, 24.30it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:06,  9.50it/s]
 32%|      | 25/79 [00:01<00:04, 11.72it/s]
 35%|      | 28/79 [00:01<00:03, 14.07it/s]
 39%|      | 31/79 [00:02<00:02, 16.43it/s]
 43%|     | 34/79 [00:02<00:02, 18.50it/s]
 47%|     | 37/79 [00:02<00:02, 20.30it/s]
 51%|     | 40/79 [00:02<00:01, 21.72it/s]
 54%|    | 43/79 [00:02<00:01, 22.82it/s]
 58%|    | 46/79 [00:02<00:01, 23.55it/s]
 62%|   | 49/79 [00:02<00:01, 24.28it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:30,  2.40it/s]
 13%|        | 10/79 [00:01<00:20,  3.29it/s]
 16%|        | 13/79 [00:01<00:14,  4.45it/s]
 20%|        | 16/79 [00:01<00:10,  5.91it/s]
 24%|       | 19/79 [00:01<00:07,  7.68it/s]
 28%|       | 22/79 [00:01<00:05,  9.75it/s]
 32%|      | 25/79 [00:01<00:04, 11.94it/s]
 35%|      | 28/79 [00:01<00:03, 14.27it/s]
 39%|      | 31/79 [00:01<00:02, 16.60it/s]
 43%|     | 34/79 [00:02<00:02, 18.59it/s]
 47%|     | 37/79 [00:02<00:02, 20.41it/s]
 51%|     | 40/79 [00:02<00:01, 21.64it/s]
 54%|    | 43/79 [00:02<00:01, 22.82it/s]
 58%|    | 46/79 [00:02<00:01, 23.32it/s]
 62%|   | 49/79 [00:02<00:01, 24.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.24it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.82it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.63it/s]
 32%|      | 25/79 [00:01<00:04, 11.80it/s]
 35%|      | 28/79 [00:01<00:03, 14.10it/s]
 39%|      | 31/79 [00:02<00:02, 16.29it/s]
 43%|     | 34/79 [00:02<00:02, 18.33it/s]
 47%|     | 37/79 [00:02<00:02, 19.85it/s]
 51%|     | 40/79 [00:02<00:01, 21.30it/s]
 54%|    | 43/79 [00:02<00:01, 22.44it/s]
 58%|    | 46/79 [00:02<00:01, 23.21it/s]
 62%|   | 49/79 [00:02<00:01, 23.95it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.78it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:05,  9.56it/s]
 32%|      | 25/79 [00:01<00:04, 11.79it/s]
 35%|      | 28/79 [00:01<00:03, 14.10it/s]
 39%|      | 31/79 [00:02<00:02, 16.40it/s]
 43%|     | 34/79 [00:02<00:02, 18.35it/s]
 47%|     | 37/79 [00:02<00:02, 20.20it/s]
 51%|     | 40/79 [00:02<00:01, 21.57it/s]
 54%|    | 43/79 [00:02<00:01, 22.47it/s]
 58%|    | 46/79 [00:02<00:01, 23.26it/s]
 62%|   | 49/79 [00:02<00:01, 23.93it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.39it/s]
 20%|        | 16/79 [00:01<00:10,  5.84it/s]
 24%|       | 19/79 [00:01<00:07,  7.59it/s]
 28%|       | 22/79 [00:01<00:05,  9.60it/s]
 32%|      | 25/79 [00:01<00:04, 11.85it/s]
 35%|      | 28/79 [00:01<00:03, 14.22it/s]
 39%|      | 31/79 [00:02<00:02, 16.39it/s]
 43%|     | 34/79 [00:02<00:02, 18.47it/s]
 47%|     | 37/79 [00:02<00:02, 20.14it/s]
 51%|     | 40/79 [00:02<00:01, 21.69it/s]
 54%|    | 43/79 [00:02<00:01, 22.92it/s]
 58%|    | 46/79 [00:02<00:01, 23.88it/s]
 62%|   | 49/79 [00:02<00:01, 24.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  4%|         | 3/79 [00:00<00:45,  1.67it/s]
  8%|         | 6/79 [00:01<00:31,  2.31it/s]
 11%|        | 9/79 [00:01<00:22,  3.17it/s]
 15%|        | 12/79 [00:01<00:15,  4.30it/s]
 19%|        | 15/79 [00:01<00:11,  5.72it/s]
 23%|       | 18/79 [00:01<00:08,  7.47it/s]
 27%|       | 21/79 [00:01<00:06,  9.48it/s]
 30%|       | 24/79 [00:01<00:04, 11.72it/s]
 34%|      | 27/79 [00:01<00:03, 13.86it/s]
 38%|      | 30/79 [00:02<00:03, 16.11it/s]
 42%|     | 33/79 [00:02<00:02, 17.84it/s]
 46%|     | 36/79 [00:02<00:02, 19.43it/s]
 49%|     | 39/79 [00:02<00:01, 20.70it/s]
 53%|    | 42/79 [00:02<00:01, 21.70it/s]
 57%|    | 45/79 [00:02<00:01, 22.73it/s]
 61%|    | 48/79 [00:02<00:01, 23.30it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.47it/s]
 28%|       | 22/79 [00:01<00:06,  9.49it/s]
 32%|      | 25/79 [00:01<00:04, 11.72it/s]
 35%|      | 28/79 [00:01<00:03, 14.01it/s]
 39%|      | 31/79 [00:02<00:02, 16.17it/s]
 43%|     | 34/79 [00:02<00:02, 18.16it/s]
 47%|     | 37/79 [00:02<00:02, 19.90it/s]
 51%|     | 40/79 [00:02<00:01, 21.24it/s]
 54%|    | 43/79 [00:02<00:01, 22.17it/s]
 58%|    | 46/79 [00:02<00:01, 23.18it/s]
 62%|   | 49/79 [00:02<00:01, 23.97it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.39it/s]
 32%|      | 25/79 [00:01<00:04, 11.63it/s]
 35%|      | 28/79 [00:01<00:03, 13.93it/s]
 39%|      | 31/79 [00:02<00:02, 16.20it/s]
 43%|     | 34/79 [00:02<00:02, 18.28it/s]
 47%|     | 37/79 [00:02<00:02, 20.03it/s]
 51%|     | 40/79 [00:02<00:01, 21.57it/s]
 54%|    | 43/79 [00:02<00:01, 22.62it/s]
 58%|    | 46/79 [00:02<00:01, 23.52it/s]
 62%|   | 49/79 [00:02<00:01, 24.07it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.59it/s]
 28%|       | 22/79 [00:01<00:05,  9.62it/s]
 32%|      | 25/79 [00:01<00:04, 11.77it/s]
 35%|      | 28/79 [00:01<00:03, 14.03it/s]
 39%|      | 31/79 [00:02<00:02, 16.17it/s]
 43%|     | 34/79 [00:02<00:02, 18.13it/s]
 47%|     | 37/79 [00:02<00:02, 19.91it/s]
 51%|     | 40/79 [00:02<00:01, 21.26it/s]
 54%|    | 43/79 [00:02<00:01, 22.29it/s]
 58%|    | 46/79 [00:02<00:01, 23.19it/s]
 62%|   | 49/79 [00:02<00:01, 23.90it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.21it/s]
 28%|       | 22/79 [00:01<00:06,  9.21it/s]
 32%|      | 25/79 [00:01<00:04, 11.42it/s]
 35%|      | 28/79 [00:01<00:03, 13.66it/s]
 39%|      | 31/79 [00:02<00:03, 15.93it/s]
 43%|     | 34/79 [00:02<00:02, 17.85it/s]
 47%|     | 37/79 [00:02<00:02, 19.77it/s]
 51%|     | 40/79 [00:02<00:01, 21.19it/s]
 54%|    | 43/79 [00:02<00:01, 22.40it/s]
 58%|    | 46/79 [00:02<00:01, 23.32it/s]
 62%|   | 49/79 [00:02<00:01, 23.94it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.25it/s]
 28%|       | 22/79 [00:01<00:06,  9.23it/s]
 32%|      | 25/79 [00:01<00:04, 11.40it/s]
 35%|      | 28/79 [00:01<00:03, 13.66it/s]
 39%|      | 31/79 [00:02<00:03, 15.86it/s]
 43%|     | 34/79 [00:02<00:02, 17.79it/s]
 47%|     | 37/79 [00:02<00:02, 19.48it/s]
 51%|     | 40/79 [00:02<00:01, 21.03it/s]
 54%|    | 43/79 [00:02<00:01, 22.30it/s]
 58%|    | 46/79 [00:02<00:01, 23.21it/s]
 62%|   | 49/79 [00:02<00:01, 24.17it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.27it/s]
 16%|        | 13/79 [00:01<00:14,  4.43it/s]
 20%|        | 16/79 [00:01<00:10,  5.88it/s]
 24%|       | 19/79 [00:01<00:07,  7.64it/s]
 28%|       | 22/79 [00:01<00:05,  9.63it/s]
 32%|      | 25/79 [00:01<00:04, 11.84it/s]
 35%|      | 28/79 [00:01<00:03, 14.15it/s]
 39%|      | 31/79 [00:02<00:02, 16.33it/s]
 43%|     | 34/79 [00:02<00:02, 18.24it/s]
 47%|     | 37/79 [00:02<00:02, 19.87it/s]
 51%|     | 40/79 [00:02<00:01, 21.19it/s]
 54%|    | 43/79 [00:02<00:01, 22.29it/s]
 58%|    | 46/79 [00:02<00:01, 22.81it/s]
 62%|   | 49/79 [00:02<00:01, 23.52it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.13it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.21it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.37it/s]
 35%|      | 28/79 [00:01<00:03, 13.70it/s]
 39%|      | 31/79 [00:02<00:03, 15.91it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.61it/s]
 51%|     | 40/79 [00:02<00:01, 21.11it/s]
 54%|    | 43/79 [00:02<00:01, 22.52it/s]
 58%|    | 46/79 [00:02<00:01, 23.12it/s]
 62%|   | 49/79 [00:02<00:01, 23.92it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.06it/s]
 32%|      | 25/79 [00:01<00:04, 11.23it/s]
 35%|      | 28/79 [00:01<00:03, 13.54it/s]
 39%|      | 31/79 [00:02<00:03, 15.88it/s]
 43%|     | 34/79 [00:02<00:02, 17.87it/s]
 47%|     | 37/79 [00:02<00:02, 19.69it/s]
 51%|     | 40/79 [00:02<00:01, 21.07it/s]
 54%|    | 43/79 [00:02<00:01, 22.32it/s]
 58%|    | 46/79 [00:02<00:01, 23.08it/s]
 62%|   | 49/79 [00:02<00:01, 23.75it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.10it/s]
 32%|      | 25/79 [00:01<00:04, 11.24it/s]
 35%|      | 28/79 [00:01<00:03, 13.41it/s]
 39%|      | 31/79 [00:02<00:03, 15.68it/s]
 43%|     | 34/79 [00:02<00:02, 17.63it/s]
 47%|     | 37/79 [00:02<00:02, 19.33it/s]
 51%|     | 40/79 [00:02<00:01, 20.62it/s]
 54%|    | 43/79 [00:02<00:01, 21.60it/s]
 58%|    | 46/79 [00:02<00:01, 22.54it/s]
 62%|   | 49/79 [00:02<00:01, 22.90it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 28%|       | 22/79 [00:01<00:06,  9.12it/s]
 32%|      | 25/79 [00:01<00:04, 11.30it/s]
 35%|      | 28/79 [00:01<00:03, 13.51it/s]
 39%|      | 31/79 [00:02<00:03, 15.64it/s]
 43%|     | 34/79 [00:02<00:02, 17.65it/s]
 47%|     | 37/79 [00:02<00:02, 19.46it/s]
 51%|     | 40/79 [00:02<00:01, 20.87it/s]
 54%|    | 43/79 [00:02<00:01, 21.87it/s]
 58%|    | 46/79 [00:02<00:01, 22.77it/s]
 62%|   | 49/79 [00:02<00:01, 23.34it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  4%|         | 3/79 [00:00<00:47,  1.59it/s]
  8%|         | 6/79 [00:01<00:33,  2.21it/s]
 11%|        | 9/79 [00:01<00:23,  3.03it/s]
 15%|        | 12/79 [00:01<00:16,  4.11it/s]
 19%|        | 15/79 [00:01<00:11,  5.48it/s]
 23%|       | 18/79 [00:01<00:08,  7.16it/s]
 27%|       | 21/79 [00:01<00:06,  9.07it/s]
 30%|       | 24/79 [00:01<00:04, 11.21it/s]
 34%|      | 27/79 [00:01<00:03, 13.42it/s]
 38%|      | 30/79 [00:02<00:03, 15.46it/s]
 42%|     | 33/79 [00:02<00:02, 17.31it/s]
 46%|     | 36/79 [00:02<00:02, 18.97it/s]
 49%|     | 39/79 [00:02<00:01, 20.27it/s]
 53%|    | 42/79 [00:02<00:01, 21.38it/s]
 57%|    | 45/79 [00:02<00:01, 22.36it/s]
 61%|    | 48/79 [00:02<00:01, 22.92it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  4%|         | 3/79 [00:01<00:49,  1.54it/s]
  8%|         | 6/79 [00:01<00:33,  2.15it/s]
 11%|        | 9/79 [00:01<00:23,  2.96it/s]
 15%|        | 12/79 [00:01<00:16,  4.02it/s]
 19%|        | 15/79 [00:01<00:11,  5.37it/s]
 23%|       | 18/79 [00:01<00:08,  7.04it/s]
 27%|       | 21/79 [00:01<00:06,  8.96it/s]
 30%|       | 24/79 [00:01<00:04, 11.05it/s]
 34%|      | 27/79 [00:01<00:03, 13.25it/s]
 38%|      | 30/79 [00:02<00:03, 15.20it/s]
 42%|     | 33/79 [00:02<00:02, 17.03it/s]
 46%|     | 36/79 [00:02<00:02, 18.67it/s]
 49%|     | 39/79 [00:02<00:01, 20.28it/s]
 53%|    | 42/79 [00:02<00:01, 21.27it/s]
 57%|    | 45/79 [00:02<00:01, 22.29it/s]
 61%|    | 48/79 [00:02<00:01, 23.02it/s]
 65%|   | 51/79 [00:02<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.09it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.04it/s]
 35%|      | 28/79 [00:02<00:03, 13.15it/s]
 39%|      | 31/79 [00:02<00:03, 15.21it/s]
 43%|     | 34/79 [00:02<00:02, 17.14it/s]
 47%|     | 37/79 [00:02<00:02, 18.85it/s]
 51%|     | 40/79 [00:02<00:01, 20.35it/s]
 54%|    | 43/79 [00:02<00:01, 21.40it/s]
 58%|    | 46/79 [00:02<00:01, 22.33it/s]
 62%|   | 49/79 [00:02<00:01, 22.98it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.36it/s]
 24%|       | 19/79 [00:01<00:08,  7.01it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.07it/s]
 35%|      | 28/79 [00:02<00:03, 13.23it/s]
 39%|      | 31/79 [00:02<00:03, 15.41it/s]
 43%|     | 34/79 [00:02<00:02, 17.28it/s]
 47%|     | 37/79 [00:02<00:02, 18.96it/s]
 51%|     | 40/79 [00:02<00:01, 20.31it/s]
 54%|    | 43/79 [00:02<00:01, 21.22it/s]
 58%|    | 46/79 [00:02<00:01, 22.17it/s]
 62%|   | 49/79 [00:02<00:01, 22.76it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:35,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.17it/s]
 24%|       | 19/79 [00:01<00:08,  6.75it/s]
 28%|       | 22/79 [00:01<00:06,  8.64it/s]
 32%|      | 25/79 [00:01<00:05, 10.73it/s]
 35%|      | 28/79 [00:02<00:03, 12.89it/s]
 39%|      | 31/79 [00:02<00:03, 15.03it/s]
 43%|     | 34/79 [00:02<00:02, 16.93it/s]
 47%|     | 37/79 [00:02<00:02, 18.67it/s]
 51%|     | 40/79 [00:02<00:01, 19.99it/s]
 54%|    | 43/79 [00:02<00:01, 21.14it/s]
 58%|    | 46/79 [00:02<00:01, 22.10it/s]
 62%|   | 49/79 [00:02<00:01, 23.14it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.83it/s]
 28%|       | 22/79 [00:01<00:06,  8.71it/s]
 32%|      | 25/79 [00:01<00:04, 10.80it/s]
 35%|      | 28/79 [00:02<00:03, 12.96it/s]
 39%|      | 31/79 [00:02<00:03, 15.08it/s]
 43%|     | 34/79 [00:02<00:02, 17.07it/s]
 47%|     | 37/79 [00:02<00:02, 18.74it/s]
 51%|     | 40/79 [00:02<00:01, 20.17it/s]
 54%|    | 43/79 [00:02<00:01, 21.40it/s]
 58%|    | 46/79 [00:02<00:01, 22.39it/s]
 62%|   | 49/79 [00:02<00:01, 23.02it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.32it/s]
 24%|       | 19/79 [00:01<00:08,  6.95it/s]
 28%|       | 22/79 [00:01<00:06,  8.88it/s]
 32%|      | 25/79 [00:01<00:04, 11.00it/s]
 35%|      | 28/79 [00:02<00:03, 13.23it/s]
 39%|      | 31/79 [00:02<00:03, 15.32it/s]
 43%|     | 34/79 [00:02<00:02, 17.08it/s]
 47%|     | 37/79 [00:02<00:02, 18.82it/s]
 51%|     | 40/79 [00:02<00:01, 20.14it/s]
 54%|    | 43/79 [00:02<00:01, 21.31it/s]
 58%|    | 46/79 [00:02<00:01, 21.76it/s]
 62%|   | 49/79 [00:02<00:01, 22.43it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.02it/s]
 13%|        | 10/79 [00:01<00:24,  2.79it/s]
 16%|        | 13/79 [00:01<00:17,  3.80it/s]
 20%|        | 16/79 [00:01<00:12,  5.09it/s]
 24%|       | 19/79 [00:01<00:08,  6.69it/s]
 28%|       | 22/79 [00:01<00:06,  8.55it/s]
 32%|      | 25/79 [00:01<00:05, 10.68it/s]
 35%|      | 28/79 [00:02<00:03, 12.85it/s]
 39%|      | 31/79 [00:02<00:03, 14.81it/s]
 43%|     | 34/79 [00:02<00:02, 16.97it/s]
 47%|     | 37/79 [00:02<00:02, 18.78it/s]
 51%|     | 40/79 [00:02<00:01, 20.17it/s]
 54%|    | 43/79 [00:02<00:01, 21.11it/s]
 58%|    | 46/79 [00:02<00:01, 22.13it/s]
 62%|   | 49/79 [00:02<00:01, 22.83it/s]
 66%|   | 52/79 [00:03<00:01, 24.67it/s]
 70%|   | 55/79 [00:02<00:00, 24.84it/s]
 73%|  | 58/79 [00:03<00:00, 25.14it/s]
 77%|  | 61/79 [00:03<00:00, 25.33it/s]
 81%|  | 64/79 [00:03<00:00, 25.37it/s]
 85%| | 67/79 [00:03<00:00, 25.37it/s]
 89%| | 70/79 [00:03<00:00, 25.43it/s]
 92%|| 73/79 [00:03<00:00, 25.51it/s]
 96%|| 76/79 [00:03<00:00, 26.24it/s]
100%|| 79/79 [00:03<00:00, 27.00it/s]
, 24.84it/s]
 70%|   | 55/79 [00:02<00:00, 24.90it/s]
 73%|  | 58/79 [00:03<00:00, 25.24it/s]
 77%|  | 61/79 [00:03<00:00, 25.33it/s]
 81%|  | 64/79 [00:03<00:00, 25.60it/s]
 85%| | 67/79 [00:03<00:00, 25.61it/s]
 89%| | 70/79 [00:03<00:00, 25.77it/s]
 92%|| 73/79 [00:03<00:00, 26.09it/s]
 96%|| 76/79 [00:03<00:00, 26.73it/s]
100%|| 79/79 [00:03<00:00, 27.45it/s]
, 24.44it/s]
 70%|   | 55/79 [00:02<00:00, 25.02it/s]
 73%|  | 58/79 [00:03<00:00, 25.12it/s]
 77%|  | 61/79 [00:03<00:00, 25.07it/s]
 81%|  | 64/79 [00:03<00:00, 25.28it/s]
 85%| | 67/79 [00:03<00:00, 25.47it/s]
 89%| | 70/79 [00:03<00:00, 25.32it/s]
 92%|| 73/79 [00:03<00:00, 25.63it/s]
 96%|| 76/79 [00:03<00:00, 26.29it/s]
100%|| 79/79 [00:03<00:00, 27.28it/s]
, 24.25it/s]
 70%|   | 55/79 [00:02<00:00, 24.37it/s]
 73%|  | 58/79 [00:03<00:00, 24.81it/s]
 77%|  | 61/79 [00:03<00:00, 24.90it/s]
 81%|  | 64/79 [00:03<00:00, 24.93it/s]
 85%| | 67/79 [00:03<00:00, 25.10it/s]
 89%| | 70/79 [00:03<00:00, 25.03it/s]
 92%|| 73/79 [00:03<00:00, 25.43it/s]
 96%|| 76/79 [00:03<00:00, 26.13it/s]
100%|| 79/79 [00:03<00:00, 27.14it/s]
, 24.78it/s]
 70%|   | 55/79 [00:02<00:00, 25.07it/s]
 73%|  | 58/79 [00:03<00:00, 25.33it/s]
 77%|  | 61/79 [00:03<00:00, 25.38it/s]
 81%|  | 64/79 [00:03<00:00, 25.18it/s]
 85%| | 67/79 [00:03<00:00, 25.30it/s]
 89%| | 70/79 [00:03<00:00, 25.33it/s]
 92%|| 73/79 [00:03<00:00, 25.76it/s]
 96%|| 76/79 [00:03<00:00, 26.21it/s]
100%|| 79/79 [00:03<00:00, 27.24it/s]
, 24.97it/s]
 70%|   | 55/79 [00:02<00:00, 25.06it/s]
 73%|  | 58/79 [00:03<00:00, 25.06it/s]
 77%|  | 61/79 [00:03<00:00, 25.45it/s]
 81%|  | 64/79 [00:03<00:00, 25.50it/s]
 85%| | 67/79 [00:03<00:00, 25.62it/s]
 89%| | 70/79 [00:03<00:00, 25.48it/s]
 92%|| 73/79 [00:03<00:00, 25.91it/s]
 96%|| 76/79 [00:03<00:00, 26.40it/s]
100%|| 79/79 [00:03<00:00, 27.30it/s]
, 24.54it/s]
 70%|   | 55/79 [00:02<00:00, 25.09it/s]
 73%|  | 58/79 [00:03<00:00, 25.41it/s]
 77%|  | 61/79 [00:03<00:00, 25.62it/s]
 81%|  | 64/79 [00:03<00:00, 25.59it/s]
 85%| | 67/79 [00:03<00:00, 25.44it/s]
 89%| | 70/79 [00:03<00:00, 25.78it/s]
 92%|| 73/79 [00:03<00:00, 25.72it/s]
 96%|| 76/79 [00:03<00:00, 26.40it/s]
100%|| 79/79 [00:03<00:00, 27.14it/s]
, 24.34it/s]
 70%|   | 55/79 [00:02<00:00, 24.75it/s]
 73%|  | 58/79 [00:03<00:00, 24.88it/s]
 77%|  | 61/79 [00:03<00:00, 25.19it/s]
 81%|  | 64/79 [00:03<00:00, 25.15it/s]
 85%| | 67/79 [00:03<00:00, 25.41it/s]
 89%| | 70/79 [00:03<00:00, 25.46it/s]
 92%|| 73/79 [00:03<00:00, 25.81it/s]
 96%|| 76/79 [00:03<00:00, 26.42it/s]
100%|| 79/79 [00:03<00:00, 27.34it/s]
, 24.81it/s]
 70%|   | 55/79 [00:02<00:00, 24.80it/s]
 73%|  | 58/79 [00:03<00:00, 24.97it/s]
 77%|  | 61/79 [00:03<00:00, 24.92it/s]
 81%|  | 64/79 [00:03<00:00, 25.22it/s]
 85%| | 67/79 [00:03<00:00, 25.34it/s]
 89%| | 70/79 [00:03<00:00, 25.39it/s]
 92%|| 73/79 [00:03<00:00, 25.74it/s]
 96%|| 76/79 [00:03<00:00, 26.37it/s]
100%|| 79/79 [00:03<00:00, 27.13it/s]
, 24.38it/s]
 70%|   | 55/79 [00:02<00:00, 24.87it/s]
 73%|  | 58/79 [00:03<00:00, 25.23it/s]
 77%|  | 61/79 [00:03<00:00, 25.37it/s]
 81%|  | 64/79 [00:03<00:00, 25.47it/s]
 85%| | 67/79 [00:03<00:00, 25.67it/s]
 89%| | 70/79 [00:03<00:00, 25.95it/s]
 92%|| 73/79 [00:03<00:00, 26.04it/s]
 96%|| 76/79 [00:03<00:00, 26.73it/s]
100%|| 79/79 [00:03<00:00, 27.51it/s]
, 24.91it/s]
 70%|   | 55/79 [00:02<00:00, 25.12it/s]
 73%|  | 58/79 [00:03<00:00, 25.21it/s]
 77%|  | 61/79 [00:03<00:00, 25.31it/s]
 81%|  | 64/79 [00:03<00:00, 25.10it/s]
 85%| | 67/79 [00:03<00:00, 25.17it/s]
 89%| | 70/79 [00:03<00:00, 25.16it/s]
 92%|| 73/79 [00:03<00:00, 25.43it/s]
 96%|| 76/79 [00:03<00:00, 25.95it/s]
100%|| 79/79 [00:03<00:00, 26.74it/s]
, 24.32it/s]
 70%|   | 55/79 [00:02<00:00, 24.93it/s]
 73%|  | 58/79 [00:03<00:00, 25.02it/s]
 77%|  | 61/79 [00:03<00:00, 25.03it/s]
 81%|  | 64/79 [00:03<00:00, 25.20it/s]
 85%| | 67/79 [00:03<00:00, 25.36it/s]
 89%| | 70/79 [00:03<00:00, 25.50it/s]
 92%|| 73/79 [00:03<00:00, 25.87it/s]
 96%|| 76/79 [00:03<00:00, 26.45it/s]
100%|| 79/79 [00:03<00:00, 27.34it/s]
, 24.25it/s]
 70%|   | 55/79 [00:03<00:00, 24.31it/s]
 73%|  | 58/79 [00:03<00:00, 24.69it/s]
 77%|  | 61/79 [00:03<00:00, 25.20it/s]
 81%|  | 64/79 [00:03<00:00, 25.21it/s]
 85%| | 67/79 [00:03<00:00, 25.50it/s]
 89%| | 70/79 [00:03<00:00, 25.78it/s]
 92%|| 73/79 [00:03<00:00, 26.14it/s]
 96%|| 76/79 [00:03<00:00, 26.73it/s]
100%|| 79/79 [00:03<00:00, 27.60it/s]
, 24.09it/s]
 70%|   | 55/79 [00:02<00:00, 24.49it/s]
 73%|  | 58/79 [00:03<00:00, 24.76it/s]
 77%|  | 61/79 [00:03<00:00, 23.59it/s]
 81%|  | 64/79 [00:03<00:00, 23.45it/s]
 85%| | 67/79 [00:03<00:00, 23.80it/s]
 89%| | 70/79 [00:03<00:00, 24.01it/s]
 92%|| 73/79 [00:03<00:00, 24.74it/s]
 96%|| 76/79 [00:03<00:00, 25.43it/s]
100%|| 79/79 [00:03<00:00, 26.62it/s]
, 24.81it/s]
 70%|   | 55/79 [00:02<00:00, 24.93it/s]
 73%|  | 58/79 [00:03<00:00, 25.37it/s]
 77%|  | 61/79 [00:03<00:00, 25.57it/s]
 81%|  | 64/79 [00:03<00:00, 25.34it/s]
 85%| | 67/79 [00:03<00:00, 25.35it/s]
 89%| | 70/79 [00:03<00:00, 25.52it/s]
 92%|| 73/79 [00:03<00:00, 25.73it/s]
 97%|| 77/79 [00:03<00:00, 26.76it/s]
100%|| 79/79 [00:03<00:00, 19.92it/s]
, 24.42it/s]
 70%|   | 55/79 [00:02<00:00, 24.82it/s]
 73%|  | 58/79 [00:03<00:00, 24.94it/s]
 77%|  | 61/79 [00:03<00:00, 25.39it/s]
 81%|  | 64/79 [00:03<00:00, 25.53it/s]
 85%| | 67/79 [00:03<00:00, 25.56it/s]
 89%| | 70/79 [00:03<00:00, 25.18it/s]
 92%|| 73/79 [00:03<00:00, 25.19it/s]
 96%|| 76/79 [00:03<00:00, 25.64it/s]
100%|| 79/79 [00:03<00:00, 26.59it/s]
, 24.13it/s]
 70%|   | 55/79 [00:02<00:00, 24.41it/s]
 73%|  | 58/79 [00:03<00:00, 24.61it/s]
 77%|  | 61/79 [00:03<00:00, 24.60it/s]
 81%|  | 64/79 [00:03<00:00, 24.91it/s]
 85%| | 67/79 [00:03<00:00, 25.02it/s]
 89%| | 70/79 [00:03<00:00, 25.06it/s]
 92%|| 73/79 [00:03<00:00, 25.38it/s]
 96%|| 76/79 [00:03<00:00, 26.05it/s]
100%|| 79/79 [00:03<00:00, 26.95it/s]
, 24.19it/s]
 70%|   | 55/79 [00:03<00:00, 24.78it/s]
 73%|  | 58/79 [00:03<00:00, 25.02it/s]
 77%|  | 61/79 [00:03<00:00, 25.05it/s]
 81%|  | 64/79 [00:03<00:00, 24.81it/s]
 85%| | 67/79 [00:03<00:00, 25.04it/s]
 89%| | 70/79 [00:03<00:00, 25.33it/s]
 92%|| 73/79 [00:03<00:00, 25.15it/s]
 96%|| 76/79 [00:03<00:00, 25.82it/s]
100%|| 79/79 [00:03<00:00, 26.62it/s]
, 24.36it/s]
 70%|   | 55/79 [00:02<00:00, 24.55it/s]
 73%|  | 58/79 [00:03<00:00, 24.10it/s]
 77%|  | 61/79 [00:03<00:00, 24.46it/s]
 81%|  | 64/79 [00:03<00:00, 24.70it/s]
 85%| | 67/79 [00:03<00:00, 24.79it/s]
 89%| | 70/79 [00:03<00:00, 24.94it/s]
 92%|| 73/79 [00:03<00:00, 25.41it/s]
 96%|| 76/79 [00:03<00:00, 25.92it/s]
100%|| 79/79 [00:03<00:00, 26.88it/s]
, 24.41it/s]
 70%|   | 55/79 [00:02<00:00, 24.47it/s]
 73%|  | 58/79 [00:03<00:00, 24.76it/s]
 77%|  | 61/79 [00:03<00:00, 24.68it/s]
 81%|  | 64/79 [00:03<00:00, 24.61it/s]
 85%| | 67/79 [00:03<00:00, 24.70it/s]
 89%| | 70/79 [00:03<00:00, 24.82it/s]
 92%|| 73/79 [00:03<00:00, 25.13it/s]
 96%|| 76/79 [00:03<00:00, 25.88it/s]
100%|| 79/79 [00:03<00:00, 26.85it/s]
41it/s]
 68%|   | 54/79 [00:02<00:01, 23.58it/s]
 72%|  | 57/79 [00:03<00:00, 23.62it/s]
 76%|  | 60/79 [00:03<00:00, 23.88it/s]
 80%|  | 63/79 [00:03<00:00, 24.14it/s]
 84%| | 66/79 [00:03<00:00, 24.56it/s]
 87%| | 69/79 [00:03<00:00, 24.47it/s]
 91%| | 72/79 [00:03<00:00, 24.85it/s]
 95%|| 75/79 [00:03<00:00, 25.74it/s]
 99%|| 78/79 [00:03<00:00, 26.46it/s]
100%|| 79/79 [00:04<00:00, 19.57it/s]
, 24.18it/s]
 70%|   | 55/79 [00:03<00:00, 24.71it/s]
 73%|  | 58/79 [00:03<00:00, 24.83it/s]
 77%|  | 61/79 [00:03<00:00, 24.77it/s]
 81%|  | 64/79 [00:03<00:00, 24.91it/s]
 85%| | 67/79 [00:03<00:00, 24.99it/s]
 89%| | 70/79 [00:03<00:00, 24.81it/s]
 92%|| 73/79 [00:03<00:00, 25.28it/s]
 96%|| 76/79 [00:03<00:00, 25.95it/s]
100%|| 79/79 [00:03<00:00, 26.92it/s]
, 24.03it/s]
 70%|   | 55/79 [00:03<00:00, 24.14it/s]
 73%|  | 58/79 [00:03<00:00, 24.37it/s]
 77%|  | 61/79 [00:03<00:00, 24.72it/s]
 81%|  | 64/79 [00:03<00:00, 24.72it/s]
 85%| | 67/79 [00:03<00:00, 25.15it/s]
 89%| | 70/79 [00:03<00:00, 25.35it/s]
 92%|| 73/79 [00:03<00:00, 25.52it/s]
 96%|| 76/79 [00:03<00:00, 26.47it/s]
100%|| 79/79 [00:03<00:00, 26.74it/s]
, 23.28it/s]
 70%|   | 55/79 [00:03<00:01, 23.49it/s]
 73%|  | 58/79 [00:03<00:00, 23.45it/s]
 77%|  | 61/79 [00:03<00:00, 23.55it/s]
 81%|  | 64/79 [00:03<00:00, 23.70it/s]
 85%| | 67/79 [00:03<00:00, 23.97it/s]
 89%| | 70/79 [00:03<00:00, 23.88it/s]
 92%|| 73/79 [00:03<00:00, 24.29it/s]
 96%|| 76/79 [00:03<00:00, 25.10it/s]
100%|| 79/79 [00:04<00:00, 26.01it/s]
49it/s]
 68%|   | 54/79 [00:03<00:01, 23.86it/s]
 72%|  | 57/79 [00:03<00:00, 24.18it/s]
 76%|  | 60/79 [00:03<00:00, 24.53it/s]
 80%|  | 63/79 [00:03<00:00, 24.68it/s]
 84%| | 66/79 [00:03<00:00, 24.82it/s]
 87%| | 69/79 [00:03<00:00, 24.97it/s]
 91%| | 72/79 [00:03<00:00, 24.86it/s]
 95%|| 75/79 [00:03<00:00, 25.55it/s]
 99%|| 78/79 [00:04<00:00, 26.01it/s]
100%|| 79/79 [00:04<00:00, 19.13it/s]
, 23.47it/s]
 70%|   | 55/79 [00:03<00:01, 23.64it/s]
 73%|  | 58/79 [00:03<00:00, 23.93it/s]
 77%|  | 61/79 [00:03<00:00, 24.32it/s]
 81%|  | 64/79 [00:03<00:00, 24.28it/s]
 85%| | 67/79 [00:03<00:00, 24.51it/s]
 89%| | 70/79 [00:03<00:00, 24.63it/s]
 92%|| 73/79 [00:03<00:00, 25.07it/s]
 96%|| 76/79 [00:03<00:00, 25.67it/s]
100%|| 79/79 [00:04<00:00, 26.52it/s]
, 23.42it/s]
 70%|   | 55/79 [00:03<00:01, 23.33it/s]
 73%|  | 58/79 [00:03<00:00, 23.51it/s]
 77%|  | 61/79 [00:03<00:00, 23.73it/s]
 81%|  | 64/79 [00:03<00:00, 23.83it/s]
 85%| | 67/79 [00:03<00:00, 23.96it/s]
 89%| | 70/79 [00:03<00:00, 24.02it/s]
 92%|| 73/79 [00:03<00:00, 24.52it/s]
 96%|| 76/79 [00:03<00:00, 25.28it/s]
100%|| 79/79 [00:04<00:00, 26.23it/s]
, 23.09it/s]
 70%|   | 55/79 [00:03<00:01, 23.56it/s]
 73%|  | 58/79 [00:03<00:00, 23.78it/s]
 77%|  | 61/79 [00:03<00:00, 24.06it/s]
 81%|  | 64/79 [00:03<00:00, 24.47it/s]
 85%| | 67/79 [00:03<00:00, 24.54it/s]
 89%| | 70/79 [00:03<00:00, 24.54it/s]
 92%|| 73/79 [00:03<00:00, 24.82it/s]
 96%|| 76/79 [00:03<00:00, 25.64it/s]
100%|| 79/79 [00:04<00:00, 26.24it/s]
, 23.14it/s]
 70%|   | 55/79 [00:03<00:01, 23.77it/s]
 73%|  | 58/79 [00:03<00:00, 23.97it/s]
 77%|  | 61/79 [00:03<00:00, 24.33it/s]
 81%|  | 64/79 [00:03<00:00, 24.53it/s]
 85%| | 67/79 [00:03<00:00, 24.68it/s]
 89%| | 70/79 [00:03<00:00, 24.75it/s]
 92%|| 73/79 [00:03<00:00, 24.94it/s]
 96%|| 76/79 [00:03<00:00, 25.54it/s]
100%|| 79/79 [00:04<00:00, 26.22it/s]
, 23.42it/s]
 70%|   | 55/79 [00:03<00:01, 23.93it/s]
 73%|  | 58/79 [00:03<00:00, 24.23it/s]
 77%|  | 61/79 [00:03<00:00, 24.17it/s]
 81%|  | 64/79 [00:03<00:00, 24.20it/s]
 85%| | 67/79 [00:03<00:00, 24.38it/s]
 89%| | 70/79 [00:03<00:00, 24.10it/s]
 92%|| 73/79 [00:03<00:00, 24.28it/s]
 96%|| 76/79 [00:03<00:00, 25.08it/s]
100%|| 79/79 [00:04<00:00, 26.01it/s]
, 23.25it/s]
 70%|   | 55/79 [00:03<00:01, 23.68it/s]
 73%|  | 58/79 [00:03<00:00, 23.99it/s]
 77%|  | 61/79 [00:03<00:00, 24.13it/s]
 81%|  | 64/79 [00:03<00:00, 24.08it/s]
 85%| | 67/79 [00:03<00:00, 24.23it/s]
 89%| | 70/79 [00:03<00:00, 24.44it/s]
 92%|| 73/79 [00:03<00:00, 24.69it/s]
 96%|| 76/79 [00:04<00:00, 25.36it/s]
100%|| 79/79 [00:04<00:00, 26.32it/s]
90it/s]
 68%|   | 54/79 [00:03<00:01, 23.35it/s]
 72%|  | 57/79 [00:03<00:00, 24.01it/s]
 76%|  | 60/79 [00:03<00:00, 24.39it/s]
 80%|  | 63/79 [00:03<00:00, 24.41it/s]
 84%| | 66/79 [00:03<00:00, 24.55it/s]
 87%| | 69/79 [00:03<00:00, 24.84it/s]
 91%| | 72/79 [00:03<00:00, 24.93it/s]
 95%|| 75/79 [00:03<00:00, 25.65it/s]
 99%|| 78/79 [00:04<00:00, 26.11it/s]
100%|| 79/79 [00:04<00:00, 18.93it/s]
2020-06-23 17:00:22,087 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.194820 (0.026846847534179687 s / img per device, on 32 devices)
2020-06-23 17:00:22,109 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:00:22,109 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:00:22,130 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592956832471, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 7, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592956832472, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 7}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:00:34,454 maskrcnn_benchmark.trainer INFO: eta: 1:13:05  iter: 5520  loss: 0.6213 (0.8209)  loss_classifier: 0.2112 (0.3040)  loss_box_reg: 0.1000 (0.1307)  loss_mask: 0.2679 (0.3206)  loss_objectness: 0.0232 (0.0432)  loss_rpn_box_reg: 0.0093 (0.0224)  time: 0.1102 (0.1272)  data: 0.0014 (0.0198)  lr: 0.160000  max mem: 5148
2020-06-23 17:00:36,631 maskrcnn_benchmark.trainer INFO: eta: 1:13:00  iter: 5540  loss: 0.6237 (0.8205)  loss_classifier: 0.2179 (0.3038)  loss_box_reg: 0.0949 (0.1307)  loss_mask: 0.2670 (0.3204)  loss_objectness: 0.0228 (0.0432)  loss_rpn_box_reg: 0.0122 (0.0224)  time: 0.1085 (0.1271)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5148
2020-06-23 17:00:38,795 maskrcnn_benchmark.trainer INFO: eta: 1:12:55  iter: 5560  loss: 0.6642 (0.8200)  loss_classifier: 0.1912 (0.3036)  loss_box_reg: 0.1091 (0.1307)  loss_mask: 0.2799 (0.3203)  loss_objectness: 0.0186 (0.0431)  loss_rpn_box_reg: 0.0106 (0.0224)  time: 0.1072 (0.1271)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 17:00:40,944 maskrcnn_benchmark.trainer INFO: eta: 1:12:50  iter: 5580  loss: 0.8633 (0.8200)  loss_classifier: 0.3086 (0.3036)  loss_box_reg: 0.1289 (0.1307)  loss_mask: 0.2801 (0.3202)  loss_objectness: 0.0323 (0.0432)  loss_rpn_box_reg: 0.0224 (0.0224)  time: 0.1076 (0.1270)  data: 0.0015 (0.0196)  lr: 0.160000  max mem: 5148
DONE (t=0.93s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 17:00:43,103 maskrcnn_benchmark.trainer INFO: eta: 1:12:45  iter: 5600  loss: 0.7045 (0.8195)  loss_classifier: 0.2158 (0.3033)  loss_box_reg: 0.0974 (0.1306)  loss_mask: 0.2981 (0.3201)  loss_objectness: 0.0219 (0.0431)  loss_rpn_box_reg: 0.0061 (0.0224)  time: 0.1078 (0.1269)  data: 0.0015 (0.0195)  lr: 0.160000  max mem: 5148
DONE (t=1.85s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.28102
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.48238
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.29637
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15537
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.30330
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.36457
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25852
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.41873
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44307
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27031
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47772
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.55833
2020-06-23 17:00:45,273 maskrcnn_benchmark.trainer INFO: eta: 1:12:40  iter: 5620  loss: 0.6327 (0.8189)  loss_classifier: 0.2123 (0.3031)  loss_box_reg: 0.1016 (0.1306)  loss_mask: 0.2669 (0.3199)  loss_objectness: 0.0222 (0.0430)  loss_rpn_box_reg: 0.0143 (0.0224)  time: 0.1076 (0.1268)  data: 0.0014 (0.0195)  lr: 0.160000  max mem: 5148
2020-06-23 17:00:47,427 maskrcnn_benchmark.trainer INFO: eta: 1:12:36  iter: 5640  loss: 0.6231 (0.8184)  loss_classifier: 0.2210 (0.3029)  loss_box_reg: 0.0907 (0.1305)  loss_mask: 0.2573 (0.3197)  loss_objectness: 0.0190 (0.0430)  loss_rpn_box_reg: 0.0126 (0.0224)  time: 0.1071 (0.1268)  data: 0.0015 (0.0194)  lr: 0.160000  max mem: 5148
2020-06-23 17:00:49,590 maskrcnn_benchmark.trainer INFO: eta: 1:12:31  iter: 5660  loss: 0.6354 (0.8179)  loss_classifier: 0.2355 (0.3027)  loss_box_reg: 0.0988 (0.1304)  loss_mask: 0.2541 (0.3195)  loss_objectness: 0.0194 (0.0430)  loss_rpn_box_reg: 0.0123 (0.0223)  time: 0.1076 (0.1267)  data: 0.0015 (0.0194)  lr: 0.160000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:00:51,732 maskrcnn_benchmark.trainer INFO: eta: 1:12:26  iter: 5680  loss: 0.6115 (0.8173)  loss_classifier: 0.2243 (0.3024)  loss_box_reg: 0.0977 (0.1303)  loss_mask: 0.2612 (0.3193)  loss_objectness: 0.0172 (0.0429)  loss_rpn_box_reg: 0.0085 (0.0223)  time: 0.1065 (0.1266)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5148
DONE (t=2.35s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:00:53,887 maskrcnn_benchmark.trainer INFO: eta: 1:12:21  iter: 5700  loss: 0.6211 (0.8168)  loss_classifier: 0.2322 (0.3022)  loss_box_reg: 0.1082 (0.1302)  loss_mask: 0.2585 (0.3191)  loss_objectness: 0.0155 (0.0429)  loss_rpn_box_reg: 0.0091 (0.0223)  time: 0.1079 (0.1266)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5148
2020-06-23 17:00:56,028 maskrcnn_benchmark.trainer INFO: eta: 1:12:16  iter: 5720  loss: 0.6973 (0.8164)  loss_classifier: 0.2577 (0.3021)  loss_box_reg: 0.1131 (0.1302)  loss_mask: 0.2635 (0.3190)  loss_objectness: 0.0209 (0.0428)  loss_rpn_box_reg: 0.0129 (0.0223)  time: 0.1069 (0.1265)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 5148
DONE (t=2.96s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.26955
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.45680
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.28171
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11320
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.29418
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.40341
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25457
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.39742
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.41773
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22902
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.45743
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.55435
2020-06-23 17:00:57,066 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.28101853471215665, segm mAP: 0.26955332458123527
:::MLLOG {"namespace": "", "time_ms": 1592956857066, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.28101853471215665, "SEGM": 0.26955332458123527}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 6}}
:::MLLOG {"namespace": "", "time_ms": 1592956857067, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 6}}
2020-06-23 17:00:58,361 maskrcnn_benchmark.trainer INFO: eta: 1:12:13  iter: 5740  loss: 0.7231 (0.8162)  loss_classifier: 0.2543 (0.3019)  loss_box_reg: 0.1298 (0.1302)  loss_mask: 0.2880 (0.3188)  loss_objectness: 0.0313 (0.0429)  loss_rpn_box_reg: 0.0147 (0.0224)  time: 0.1076 (0.1265)  data: 0.0015 (0.0191)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:00,519 maskrcnn_benchmark.trainer INFO: eta: 1:12:08  iter: 5760  loss: 0.7909 (0.8159)  loss_classifier: 0.2591 (0.3018)  loss_box_reg: 0.1357 (0.1302)  loss_mask: 0.2827 (0.3187)  loss_objectness: 0.0271 (0.0429)  loss_rpn_box_reg: 0.0166 (0.0224)  time: 0.1070 (0.1264)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:02,676 maskrcnn_benchmark.trainer INFO: eta: 1:12:03  iter: 5780  loss: 0.6508 (0.8155)  loss_classifier: 0.2209 (0.3015)  loss_box_reg: 0.0930 (0.1301)  loss_mask: 0.2743 (0.3186)  loss_objectness: 0.0239 (0.0430)  loss_rpn_box_reg: 0.0107 (0.0224)  time: 0.1080 (0.1263)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:04,837 maskrcnn_benchmark.trainer INFO: eta: 1:11:58  iter: 5800  loss: 0.6355 (0.8151)  loss_classifier: 0.2309 (0.3013)  loss_box_reg: 0.1022 (0.1300)  loss_mask: 0.2675 (0.3184)  loss_objectness: 0.0277 (0.0430)  loss_rpn_box_reg: 0.0089 (0.0224)  time: 0.1078 (0.1263)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:07,005 maskrcnn_benchmark.trainer INFO: eta: 1:11:54  iter: 5820  loss: 0.7425 (0.8149)  loss_classifier: 0.2600 (0.3013)  loss_box_reg: 0.1118 (0.1300)  loss_mask: 0.2806 (0.3183)  loss_objectness: 0.0184 (0.0430)  loss_rpn_box_reg: 0.0191 (0.0224)  time: 0.1078 (0.1262)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:09,160 maskrcnn_benchmark.trainer INFO: eta: 1:11:49  iter: 5840  loss: 0.6353 (0.8143)  loss_classifier: 0.1856 (0.3009)  loss_box_reg: 0.1004 (0.1299)  loss_mask: 0.2597 (0.3181)  loss_objectness: 0.0176 (0.0429)  loss_rpn_box_reg: 0.0118 (0.0224)  time: 0.1077 (0.1262)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:11,335 maskrcnn_benchmark.trainer INFO: eta: 1:11:45  iter: 5860  loss: 0.5935 (0.8136)  loss_classifier: 0.1866 (0.3006)  loss_box_reg: 0.0878 (0.1298)  loss_mask: 0.2375 (0.3179)  loss_objectness: 0.0214 (0.0429)  loss_rpn_box_reg: 0.0096 (0.0224)  time: 0.1073 (0.1261)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:13,476 maskrcnn_benchmark.trainer INFO: eta: 1:11:40  iter: 5880  loss: 0.5509 (0.8129)  loss_classifier: 0.2093 (0.3003)  loss_box_reg: 0.0823 (0.1297)  loss_mask: 0.2381 (0.3177)  loss_objectness: 0.0173 (0.0428)  loss_rpn_box_reg: 0.0094 (0.0224)  time: 0.1070 (0.1260)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:15,617 maskrcnn_benchmark.trainer INFO: eta: 1:11:35  iter: 5900  loss: 0.6249 (0.8124)  loss_classifier: 0.2600 (0.3001)  loss_box_reg: 0.1095 (0.1296)  loss_mask: 0.2629 (0.3175)  loss_objectness: 0.0187 (0.0428)  loss_rpn_box_reg: 0.0086 (0.0224)  time: 0.1072 (0.1260)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:17,781 maskrcnn_benchmark.trainer INFO: eta: 1:11:31  iter: 5920  loss: 0.6471 (0.8119)  loss_classifier: 0.2181 (0.2999)  loss_box_reg: 0.0988 (0.1295)  loss_mask: 0.2831 (0.3173)  loss_objectness: 0.0175 (0.0428)  loss_rpn_box_reg: 0.0089 (0.0224)  time: 0.1079 (0.1259)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:19,932 maskrcnn_benchmark.trainer INFO: eta: 1:11:26  iter: 5940  loss: 0.6644 (0.8114)  loss_classifier: 0.2406 (0.2997)  loss_box_reg: 0.0949 (0.1294)  loss_mask: 0.2559 (0.3171)  loss_objectness: 0.0214 (0.0427)  loss_rpn_box_reg: 0.0138 (0.0224)  time: 0.1081 (0.1258)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:22,082 maskrcnn_benchmark.trainer INFO: eta: 1:11:21  iter: 5960  loss: 0.6334 (0.8110)  loss_classifier: 0.2086 (0.2996)  loss_box_reg: 0.0979 (0.1294)  loss_mask: 0.2583 (0.3170)  loss_objectness: 0.0277 (0.0427)  loss_rpn_box_reg: 0.0091 (0.0224)  time: 0.1070 (0.1258)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:24,232 maskrcnn_benchmark.trainer INFO: eta: 1:11:17  iter: 5980  loss: 0.6243 (0.8105)  loss_classifier: 0.1936 (0.2994)  loss_box_reg: 0.0967 (0.1293)  loss_mask: 0.2690 (0.3168)  loss_objectness: 0.0185 (0.0426)  loss_rpn_box_reg: 0.0100 (0.0224)  time: 0.1066 (0.1257)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:26,401 maskrcnn_benchmark.trainer INFO: eta: 1:11:12  iter: 6000  loss: 0.6283 (0.8100)  loss_classifier: 0.2475 (0.2992)  loss_box_reg: 0.0993 (0.1292)  loss_mask: 0.2636 (0.3166)  loss_objectness: 0.0158 (0.0426)  loss_rpn_box_reg: 0.0076 (0.0224)  time: 0.1076 (0.1257)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:28,559 maskrcnn_benchmark.trainer INFO: eta: 1:11:08  iter: 6020  loss: 0.6491 (0.8094)  loss_classifier: 0.2252 (0.2989)  loss_box_reg: 0.1035 (0.1291)  loss_mask: 0.2732 (0.3165)  loss_objectness: 0.0183 (0.0425)  loss_rpn_box_reg: 0.0073 (0.0223)  time: 0.1074 (0.1256)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:30,706 maskrcnn_benchmark.trainer INFO: eta: 1:11:03  iter: 6040  loss: 0.5938 (0.8089)  loss_classifier: 0.1875 (0.2987)  loss_box_reg: 0.0945 (0.1291)  loss_mask: 0.2759 (0.3164)  loss_objectness: 0.0164 (0.0425)  loss_rpn_box_reg: 0.0069 (0.0223)  time: 0.1071 (0.1255)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:32,858 maskrcnn_benchmark.trainer INFO: eta: 1:10:59  iter: 6060  loss: 0.7232 (0.8084)  loss_classifier: 0.2381 (0.2985)  loss_box_reg: 0.1048 (0.1290)  loss_mask: 0.2823 (0.3162)  loss_objectness: 0.0236 (0.0424)  loss_rpn_box_reg: 0.0089 (0.0223)  time: 0.1072 (0.1255)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:35,032 maskrcnn_benchmark.trainer INFO: eta: 1:10:54  iter: 6080  loss: 0.7303 (0.8081)  loss_classifier: 0.2252 (0.2983)  loss_box_reg: 0.1188 (0.1289)  loss_mask: 0.2942 (0.3161)  loss_objectness: 0.0270 (0.0424)  loss_rpn_box_reg: 0.0099 (0.0223)  time: 0.1091 (0.1254)  data: 0.0015 (0.0181)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:37,199 maskrcnn_benchmark.trainer INFO: eta: 1:10:50  iter: 6100  loss: 0.6903 (0.8077)  loss_classifier: 0.2485 (0.2982)  loss_box_reg: 0.0947 (0.1289)  loss_mask: 0.2471 (0.3159)  loss_objectness: 0.0165 (0.0424)  loss_rpn_box_reg: 0.0107 (0.0223)  time: 0.1077 (0.1254)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:39,331 maskrcnn_benchmark.trainer INFO: eta: 1:10:45  iter: 6120  loss: 0.5640 (0.8071)  loss_classifier: 0.1853 (0.2980)  loss_box_reg: 0.0713 (0.1288)  loss_mask: 0.2595 (0.3157)  loss_objectness: 0.0245 (0.0424)  loss_rpn_box_reg: 0.0042 (0.0223)  time: 0.1068 (0.1253)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:41,484 maskrcnn_benchmark.trainer INFO: eta: 1:10:41  iter: 6140  loss: 0.6803 (0.8068)  loss_classifier: 0.2180 (0.2978)  loss_box_reg: 0.1190 (0.1287)  loss_mask: 0.2755 (0.3156)  loss_objectness: 0.0218 (0.0424)  loss_rpn_box_reg: 0.0094 (0.0223)  time: 0.1076 (0.1253)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:43,654 maskrcnn_benchmark.trainer INFO: eta: 1:10:36  iter: 6160  loss: 0.6513 (0.8065)  loss_classifier: 0.2437 (0.2977)  loss_box_reg: 0.1002 (0.1287)  loss_mask: 0.2795 (0.3155)  loss_objectness: 0.0182 (0.0424)  loss_rpn_box_reg: 0.0071 (0.0223)  time: 0.1083 (0.1252)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:45,813 maskrcnn_benchmark.trainer INFO: eta: 1:10:32  iter: 6180  loss: 0.6521 (0.8062)  loss_classifier: 0.2125 (0.2975)  loss_box_reg: 0.1039 (0.1286)  loss_mask: 0.2639 (0.3154)  loss_objectness: 0.0167 (0.0424)  loss_rpn_box_reg: 0.0125 (0.0223)  time: 0.1072 (0.1251)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:47,965 maskrcnn_benchmark.trainer INFO: eta: 1:10:28  iter: 6200  loss: 0.6079 (0.8058)  loss_classifier: 0.2154 (0.2973)  loss_box_reg: 0.1004 (0.1286)  loss_mask: 0.2782 (0.3152)  loss_objectness: 0.0165 (0.0424)  loss_rpn_box_reg: 0.0096 (0.0223)  time: 0.1072 (0.1251)  data: 0.0015 (0.0178)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:50,129 maskrcnn_benchmark.trainer INFO: eta: 1:10:23  iter: 6220  loss: 0.7103 (0.8056)  loss_classifier: 0.2777 (0.2973)  loss_box_reg: 0.1212 (0.1285)  loss_mask: 0.2599 (0.3151)  loss_objectness: 0.0222 (0.0423)  loss_rpn_box_reg: 0.0115 (0.0223)  time: 0.1082 (0.1250)  data: 0.0015 (0.0177)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:52,272 maskrcnn_benchmark.trainer INFO: eta: 1:10:19  iter: 6240  loss: 0.6291 (0.8051)  loss_classifier: 0.2300 (0.2971)  loss_box_reg: 0.0960 (0.1285)  loss_mask: 0.2749 (0.3149)  loss_objectness: 0.0189 (0.0423)  loss_rpn_box_reg: 0.0083 (0.0223)  time: 0.1075 (0.1250)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:54,430 maskrcnn_benchmark.trainer INFO: eta: 1:10:14  iter: 6260  loss: 0.6628 (0.8048)  loss_classifier: 0.2196 (0.2970)  loss_box_reg: 0.1050 (0.1284)  loss_mask: 0.2795 (0.3148)  loss_objectness: 0.0245 (0.0423)  loss_rpn_box_reg: 0.0074 (0.0223)  time: 0.1078 (0.1249)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:56,601 maskrcnn_benchmark.trainer INFO: eta: 1:10:10  iter: 6280  loss: 0.7080 (0.8044)  loss_classifier: 0.2507 (0.2968)  loss_box_reg: 0.1223 (0.1284)  loss_mask: 0.2762 (0.3147)  loss_objectness: 0.0253 (0.0423)  loss_rpn_box_reg: 0.0166 (0.0223)  time: 0.1080 (0.1249)  data: 0.0015 (0.0176)  lr: 0.160000  max mem: 5148
2020-06-23 17:01:58,770 maskrcnn_benchmark.trainer INFO: eta: 1:10:06  iter: 6300  loss: 0.6189 (0.8040)  loss_classifier: 0.2225 (0.2966)  loss_box_reg: 0.1007 (0.1283)  loss_mask: 0.2562 (0.3145)  loss_objectness: 0.0254 (0.0423)  loss_rpn_box_reg: 0.0075 (0.0223)  time: 0.1069 (0.1248)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5148
2020-06-23 17:02:00,932 maskrcnn_benchmark.trainer INFO: eta: 1:10:02  iter: 6320  loss: 0.7370 (0.8037)  loss_classifier: 0.2575 (0.2965)  loss_box_reg: 0.1351 (0.1283)  loss_mask: 0.2721 (0.3145)  loss_objectness: 0.0307 (0.0422)  loss_rpn_box_reg: 0.0092 (0.0222)  time: 0.1070 (0.1248)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5148
2020-06-23 17:02:03,084 maskrcnn_benchmark.trainer INFO: eta: 1:09:57  iter: 6340  loss: 0.6795 (0.8032)  loss_classifier: 0.2462 (0.2963)  loss_box_reg: 0.1059 (0.1282)  loss_mask: 0.2670 (0.3143)  loss_objectness: 0.0268 (0.0422)  loss_rpn_box_reg: 0.0109 (0.0222)  time: 0.1077 (0.1247)  data: 0.0013 (0.0174)  lr: 0.160000  max mem: 5148
2020-06-23 17:02:05,249 maskrcnn_benchmark.trainer INFO: eta: 1:09:53  iter: 6360  loss: 0.7391 (0.8030)  loss_classifier: 0.2364 (0.2962)  loss_box_reg: 0.1131 (0.1282)  loss_mask: 0.2778 (0.3142)  loss_objectness: 0.0246 (0.0422)  loss_rpn_box_reg: 0.0086 (0.0222)  time: 0.1082 (0.1247)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5148
2020-06-23 17:02:07,406 maskrcnn_benchmark.trainer INFO: eta: 1:09:49  iter: 6380  loss: 0.6690 (0.8026)  loss_classifier: 0.2194 (0.2960)  loss_box_reg: 0.1099 (0.1281)  loss_mask: 0.2744 (0.3141)  loss_objectness: 0.0261 (0.0421)  loss_rpn_box_reg: 0.0143 (0.0223)  time: 0.1079 (0.1246)  data: 0.0013 (0.0173)  lr: 0.160000  max mem: 5148
2020-06-23 17:02:09,548 maskrcnn_benchmark.trainer INFO: eta: 1:09:45  iter: 6400  loss: 0.5984 (0.8021)  loss_classifier: 0.2132 (0.2958)  loss_box_reg: 0.0957 (0.1280)  loss_mask: 0.2538 (0.3139)  loss_objectness: 0.0182 (0.0421)  loss_rpn_box_reg: 0.0077 (0.0222)  time: 0.1066 (0.1246)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5148
:::MLLOG {"namespace": "", "time_ms": 1592956931598, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1592956931598, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1592956931598, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 7}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 17:02:11,843 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
Done (t=0.27s)
creating index...
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 17:02:12,151 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.28it/s]
  4%|         | 3/79 [00:00<00:42,  1.78it/s]
  8%|         | 6/79 [00:01<00:29,  2.47it/s]
 11%|        | 9/79 [00:01<00:20,  3.38it/s]
 15%|        | 12/79 [00:01<00:14,  4.57it/s]
 19%|        | 15/79 [00:01<00:10,  6.05it/s]
 23%|       | 18/79 [00:01<00:07,  7.87it/s]
 27%|       | 21/79 [00:01<00:05,  9.86it/s]
 30%|       | 24/79 [00:01<00:04, 12.11it/s]
 34%|      | 27/79 [00:01<00:03, 14.40it/s]
 38%|      | 30/79 [00:01<00:02, 16.70it/s]
 42%|     | 33/79 [00:02<00:02, 18.63it/s]
 46%|     | 36/79 [00:02<00:02, 20.27it/s]
 49%|     | 39/79 [00:02<00:01, 21.48it/s]
 53%|    | 42/79 [00:02<00:01, 22.66it/s]
 57%|    | 45/79 [00:02<00:01, 23.14it/s]
 61%|    | 48/79 [00:02<00:01, 23.65it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:20,  3.29it/s]
 16%|        | 13/79 [00:01<00:14,  4.46it/s]
 20%|        | 16/79 [00:01<00:10,  5.93it/s]
 24%|       | 19/79 [00:01<00:07,  7.73it/s]
 28%|       | 22/79 [00:01<00:05,  9.81it/s]
 32%|      | 25/79 [00:01<00:04, 11.95it/s]
 35%|      | 28/79 [00:01<00:03, 14.29it/s]
 39%|      | 31/79 [00:01<00:02, 16.56it/s]
 43%|     | 34/79 [00:02<00:02, 18.73it/s]
 47%|     | 37/79 [00:02<00:02, 20.47it/s]
 51%|     | 40/79 [00:02<00:01, 21.80it/s]
 54%|    | 43/79 [00:02<00:01, 22.97it/s]
 58%|    | 46/79 [00:02<00:01, 23.95it/s]
 62%|   | 49/79 [00:02<00:01, 24.72it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:59,  1.30it/s]
  5%|         | 4/79 [00:00<00:41,  1.82it/s]
  9%|         | 7/79 [00:01<00:28,  2.52it/s]
 13%|        | 10/79 [00:01<00:19,  3.46it/s]
 16%|        | 13/79 [00:01<00:14,  4.67it/s]
 20%|        | 16/79 [00:01<00:10,  6.21it/s]
 24%|       | 19/79 [00:01<00:07,  8.06it/s]
 28%|       | 22/79 [00:01<00:05, 10.17it/s]
 32%|      | 25/79 [00:01<00:04, 12.35it/s]
 35%|      | 28/79 [00:01<00:03, 14.54it/s]
 39%|      | 31/79 [00:01<00:02, 16.75it/s]
 43%|     | 34/79 [00:02<00:02, 18.71it/s]
 47%|     | 37/79 [00:02<00:02, 20.59it/s]
 51%|     | 40/79 [00:02<00:01, 22.07it/s]
 54%|    | 43/79 [00:02<00:01, 23.02it/s]
 58%|    | 46/79 [00:02<00:01, 23.97it/s]
 62%|   | 49/79 [00:02<00:01, 24.52it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:43,  1.74it/s]
  9%|         | 7/79 [00:01<00:29,  2.42it/s]
 13%|        | 10/79 [00:01<00:20,  3.33it/s]
 16%|        | 13/79 [00:01<00:14,  4.50it/s]
 20%|        | 16/79 [00:01<00:10,  6.00it/s]
 24%|       | 19/79 [00:01<00:07,  7.80it/s]
 28%|       | 22/79 [00:01<00:05,  9.87it/s]
 32%|      | 25/79 [00:01<00:04, 12.13it/s]
 35%|      | 28/79 [00:01<00:03, 14.51it/s]
 39%|      | 31/79 [00:01<00:02, 16.77it/s]
 43%|     | 34/79 [00:02<00:02, 18.83it/s]
 47%|     | 37/79 [00:02<00:02, 20.56it/s]
 51%|     | 40/79 [00:02<00:01, 22.14it/s]
 54%|    | 43/79 [00:02<00:01, 23.35it/s]
 58%|    | 46/79 [00:02<00:01, 24.34it/s]
 62%|   | 49/79 [00:02<00:01, 24.97it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.42it/s]
 20%|        | 16/79 [00:01<00:10,  5.88it/s]
 24%|       | 19/79 [00:01<00:07,  7.66it/s]
 28%|       | 22/79 [00:01<00:05,  9.72it/s]
 32%|      | 25/79 [00:01<00:04, 11.99it/s]
 35%|      | 28/79 [00:01<00:03, 14.31it/s]
 39%|      | 31/79 [00:01<00:02, 16.69it/s]
 43%|     | 34/79 [00:02<00:02, 18.48it/s]
 47%|     | 37/79 [00:02<00:02, 20.23it/s]
 51%|     | 40/79 [00:02<00:01, 21.77it/s]
 54%|    | 43/79 [00:02<00:01, 22.89it/s]
 58%|    | 46/79 [00:02<00:01, 23.61it/s]
 62%|   | 49/79 [00:02<00:01, 24.25it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.44it/s]
 20%|        | 16/79 [00:01<00:10,  5.91it/s]
 24%|       | 19/79 [00:01<00:07,  7.70it/s]
 28%|       | 22/79 [00:01<00:05,  9.78it/s]
 32%|      | 25/79 [00:01<00:04, 12.00it/s]
 35%|      | 28/79 [00:01<00:03, 14.28it/s]
 39%|      | 31/79 [00:01<00:02, 16.52it/s]
 43%|     | 34/79 [00:02<00:02, 18.46it/s]
 47%|     | 37/79 [00:02<00:02, 20.18it/s]
 51%|     | 40/79 [00:02<00:01, 21.45it/s]
 54%|    | 43/79 [00:02<00:01, 22.46it/s]
 58%|    | 46/79 [00:02<00:01, 23.30it/s]
 62%|   | 49/79 [00:02<00:01, 24.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.76it/s]
  9%|         | 7/79 [00:01<00:29,  2.44it/s]
 13%|        | 10/79 [00:01<00:20,  3.34it/s]
 16%|        | 13/79 [00:01<00:14,  4.53it/s]
 20%|        | 16/79 [00:01<00:10,  6.04it/s]
 24%|       | 19/79 [00:01<00:07,  7.84it/s]
 28%|       | 22/79 [00:01<00:05,  9.92it/s]
 32%|      | 25/79 [00:01<00:04, 12.16it/s]
 35%|      | 28/79 [00:01<00:03, 14.53it/s]
 39%|      | 31/79 [00:01<00:02, 16.59it/s]
 43%|     | 34/79 [00:02<00:02, 18.65it/s]
 47%|     | 37/79 [00:02<00:02, 20.23it/s]
 51%|     | 40/79 [00:02<00:01, 21.59it/s]
 54%|    | 43/79 [00:02<00:01, 22.69it/s]
 58%|    | 46/79 [00:02<00:01, 23.69it/s]
 62%|   | 49/79 [00:02<00:01, 24.36it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.59it/s]
 32%|      | 25/79 [00:01<00:04, 11.86it/s]
 35%|      | 28/79 [00:01<00:03, 14.14it/s]
 39%|      | 31/79 [00:01<00:02, 16.47it/s]
 43%|     | 34/79 [00:02<00:02, 18.39it/s]
 47%|     | 37/79 [00:02<00:02, 20.32it/s]
 51%|     | 40/79 [00:02<00:01, 21.84it/s]
 54%|    | 43/79 [00:02<00:01, 23.06it/s]
 58%|    | 46/79 [00:02<00:01, 24.19it/s]
 62%|   | 49/79 [00:02<00:01, 24.53it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.26it/s]
  4%|         | 3/79 [00:00<00:43,  1.75it/s]
  8%|         | 6/79 [00:01<00:30,  2.42it/s]
 11%|        | 9/79 [00:01<00:21,  3.32it/s]
 15%|        | 12/79 [00:01<00:14,  4.49it/s]
 19%|        | 15/79 [00:01<00:10,  5.95it/s]
 23%|       | 18/79 [00:01<00:07,  7.67it/s]
 27%|       | 21/79 [00:01<00:05,  9.69it/s]
 30%|       | 24/79 [00:01<00:04, 11.94it/s]
 34%|      | 27/79 [00:01<00:03, 14.23it/s]
 38%|      | 30/79 [00:01<00:02, 16.34it/s]
 42%|     | 33/79 [00:02<00:02, 18.28it/s]
 46%|     | 36/79 [00:02<00:02, 20.11it/s]
 49%|     | 39/79 [00:02<00:01, 21.28it/s]
 53%|    | 42/79 [00:02<00:01, 22.39it/s]
 57%|    | 45/79 [00:02<00:01, 22.92it/s]
 61%|    | 48/79 [00:02<00:01, 23.58it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  4%|         | 3/79 [00:00<00:44,  1.71it/s]
  8%|         | 6/79 [00:01<00:30,  2.37it/s]
 11%|        | 9/79 [00:01<00:21,  3.25it/s]
 15%|        | 12/79 [00:01<00:15,  4.42it/s]
 19%|        | 15/79 [00:01<00:10,  5.87it/s]
 23%|       | 18/79 [00:01<00:07,  7.64it/s]
 27%|       | 21/79 [00:01<00:05,  9.68it/s]
 30%|       | 24/79 [00:01<00:04, 11.98it/s]
 34%|      | 27/79 [00:01<00:03, 14.24it/s]
 38%|      | 30/79 [00:02<00:02, 16.41it/s]
 42%|     | 33/79 [00:02<00:02, 18.37it/s]
 46%|     | 36/79 [00:02<00:02, 20.26it/s]
 49%|     | 39/79 [00:02<00:01, 21.55it/s]
 53%|    | 42/79 [00:02<00:01, 22.75it/s]
 57%|    | 45/79 [00:02<00:01, 23.59it/s]
 61%|    | 48/79 [00:02<00:01, 24.29it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:00<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.25it/s]
 28%|       | 22/79 [00:01<00:06,  9.28it/s]
 32%|      | 25/79 [00:01<00:04, 11.51it/s]
 35%|      | 28/79 [00:01<00:03, 13.86it/s]
 39%|      | 31/79 [00:02<00:02, 16.15it/s]
 43%|     | 34/79 [00:02<00:02, 18.31it/s]
 47%|     | 37/79 [00:02<00:02, 20.04it/s]
 51%|     | 40/79 [00:02<00:01, 21.55it/s]
 54%|    | 43/79 [00:02<00:01, 22.90it/s]
 58%|    | 46/79 [00:02<00:01, 23.81it/s]
 62%|   | 49/79 [00:02<00:01, 24.24it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.84it/s]
 24%|       | 19/79 [00:01<00:07,  7.62it/s]
 28%|       | 22/79 [00:01<00:05,  9.69it/s]
 32%|      | 25/79 [00:01<00:04, 11.91it/s]
 35%|      | 28/79 [00:01<00:03, 14.24it/s]
 39%|      | 31/79 [00:01<00:02, 16.48it/s]
 43%|     | 34/79 [00:02<00:02, 18.12it/s]
 47%|     | 37/79 [00:02<00:02, 19.90it/s]
 51%|     | 40/79 [00:02<00:01, 21.49it/s]
 54%|    | 43/79 [00:02<00:01, 22.73it/s]
 58%|    | 46/79 [00:02<00:01, 23.48it/s]
 62%|   | 49/79 [00:02<00:01, 24.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.31it/s]
 32%|      | 25/79 [00:01<00:04, 11.56it/s]
 35%|      | 28/79 [00:01<00:03, 13.88it/s]
 39%|      | 31/79 [00:02<00:02, 16.14it/s]
 43%|     | 34/79 [00:02<00:02, 18.22it/s]
 47%|     | 37/79 [00:02<00:02, 20.09it/s]
 51%|     | 40/79 [00:02<00:01, 21.51it/s]
 54%|    | 43/79 [00:02<00:01, 22.62it/s]
 58%|    | 46/79 [00:02<00:01, 23.57it/s]
 62%|   | 49/79 [00:02<00:01, 24.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.48it/s]
 28%|       | 22/79 [00:01<00:06,  9.45it/s]
 32%|      | 25/79 [00:01<00:04, 11.66it/s]
 35%|      | 28/79 [00:01<00:03, 13.95it/s]
 39%|      | 31/79 [00:02<00:02, 16.19it/s]
 43%|     | 34/79 [00:02<00:02, 18.14it/s]
 47%|     | 37/79 [00:02<00:02, 19.86it/s]
 51%|     | 40/79 [00:02<00:01, 21.19it/s]
 54%|    | 43/79 [00:02<00:01, 22.38it/s]
 58%|    | 46/79 [00:02<00:01, 23.11it/s]
 62%|   | 49/79 [00:02<00:01, 23.58it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.63it/s]
 28%|       | 22/79 [00:01<00:05,  9.67it/s]
 32%|      | 25/79 [00:01<00:04, 11.95it/s]
 35%|      | 28/79 [00:01<00:03, 14.24it/s]
 39%|      | 31/79 [00:02<00:02, 16.43it/s]
 43%|     | 34/79 [00:02<00:02, 18.35it/s]
 47%|     | 37/79 [00:02<00:02, 20.07it/s]
 51%|     | 40/79 [00:02<00:01, 21.44it/s]
 54%|    | 43/79 [00:02<00:01, 22.55it/s]
 58%|    | 46/79 [00:02<00:01, 23.34it/s]
 62%|   | 49/79 [00:02<00:01, 24.16it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.28it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:02, 16.10it/s]
 43%|     | 34/79 [00:02<00:02, 18.23it/s]
 47%|     | 37/79 [00:02<00:02, 19.91it/s]
 51%|     | 40/79 [00:02<00:01, 21.57it/s]
 54%|    | 43/79 [00:02<00:01, 22.85it/s]
 58%|    | 46/79 [00:02<00:01, 23.61it/s]
 62%|   | 49/79 [00:02<00:01, 24.43it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:29,  2.41it/s]
 13%|        | 10/79 [00:01<00:20,  3.29it/s]
 16%|        | 13/79 [00:01<00:14,  4.46it/s]
 20%|        | 16/79 [00:01<00:10,  5.91it/s]
 24%|       | 19/79 [00:01<00:07,  7.68it/s]
 28%|       | 22/79 [00:01<00:05,  9.73it/s]
 32%|      | 25/79 [00:01<00:04, 11.94it/s]
 35%|      | 28/79 [00:01<00:03, 14.23it/s]
 39%|      | 31/79 [00:02<00:02, 16.46it/s]
 43%|     | 34/79 [00:02<00:02, 18.42it/s]
 47%|     | 37/79 [00:02<00:02, 20.11it/s]
 51%|     | 40/79 [00:02<00:01, 21.50it/s]
 54%|    | 43/79 [00:02<00:01, 22.47it/s]
 58%|    | 46/79 [00:02<00:01, 23.24it/s]
 62%|   | 49/79 [00:02<00:01, 23.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.45it/s]
 28%|       | 22/79 [00:01<00:06,  9.46it/s]
 32%|      | 25/79 [00:01<00:04, 11.65it/s]
 35%|      | 28/79 [00:01<00:03, 13.92it/s]
 39%|      | 31/79 [00:02<00:02, 16.12it/s]
 43%|     | 34/79 [00:02<00:02, 18.09it/s]
 47%|     | 37/79 [00:02<00:02, 19.84it/s]
 51%|     | 40/79 [00:02<00:01, 21.15it/s]
 54%|    | 43/79 [00:02<00:01, 22.31it/s]
 58%|    | 46/79 [00:02<00:01, 23.06it/s]
 62%|   | 49/79 [00:02<00:01, 23.67it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.33it/s]
 32%|      | 25/79 [00:01<00:04, 11.55it/s]
 35%|      | 28/79 [00:01<00:03, 13.87it/s]
 39%|      | 31/79 [00:02<00:02, 16.06it/s]
 43%|     | 34/79 [00:02<00:02, 18.15it/s]
 47%|     | 37/79 [00:02<00:02, 19.91it/s]
 51%|     | 40/79 [00:02<00:01, 21.38it/s]
 54%|    | 43/79 [00:02<00:01, 22.51it/s]
 58%|    | 46/79 [00:02<00:01, 23.30it/s]
 62%|   | 49/79 [00:02<00:01, 23.84it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.42it/s]
 28%|       | 22/79 [00:01<00:06,  9.38it/s]
 32%|      | 25/79 [00:01<00:04, 11.56it/s]
 35%|      | 28/79 [00:01<00:03, 13.76it/s]
 39%|      | 31/79 [00:02<00:03, 15.91it/s]
 43%|     | 34/79 [00:02<00:02, 17.84it/s]
 47%|     | 37/79 [00:02<00:02, 19.70it/s]
 51%|     | 40/79 [00:02<00:01, 21.12it/s]
 54%|    | 43/79 [00:02<00:01, 22.21it/s]
 58%|    | 46/79 [00:02<00:01, 22.96it/s]
 62%|   | 49/79 [00:02<00:01, 23.33it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.29it/s]
  4%|         | 3/79 [00:00<00:42,  1.77it/s]
  8%|         | 6/79 [00:01<00:29,  2.46it/s]
 11%|        | 9/79 [00:01<00:20,  3.36it/s]
 15%|        | 12/79 [00:01<00:14,  4.51it/s]
 19%|        | 15/79 [00:01<00:10,  5.98it/s]
 23%|       | 18/79 [00:01<00:07,  7.77it/s]
 27%|       | 21/79 [00:01<00:05,  9.78it/s]
 30%|       | 24/79 [00:01<00:04, 11.96it/s]
 34%|      | 27/79 [00:01<00:03, 14.17it/s]
 38%|      | 30/79 [00:02<00:03, 16.19it/s]
 42%|     | 33/79 [00:02<00:02, 18.06it/s]
 46%|     | 36/79 [00:02<00:02, 19.48it/s]
 49%|     | 39/79 [00:02<00:01, 20.79it/s]
 53%|    | 42/79 [00:02<00:01, 21.80it/s]
 57%|    | 45/79 [00:02<00:01, 22.74it/s]
 61%|    | 48/79 [00:02<00:01, 23.09it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.46it/s]
 32%|      | 25/79 [00:01<00:04, 11.60it/s]
 35%|      | 28/79 [00:01<00:03, 13.89it/s]
 39%|      | 31/79 [00:02<00:02, 16.02it/s]
 43%|     | 34/79 [00:02<00:02, 18.10it/s]
 47%|     | 37/79 [00:02<00:02, 19.65it/s]
 51%|     | 40/79 [00:02<00:01, 21.19it/s]
 54%|    | 43/79 [00:02<00:01, 22.32it/s]
 58%|    | 46/79 [00:02<00:01, 23.32it/s]
 62%|   | 49/79 [00:02<00:01, 24.02it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:15,  4.39it/s]
 20%|        | 16/79 [00:01<00:10,  5.84it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.61it/s]
 32%|      | 25/79 [00:01<00:04, 11.76it/s]
 35%|      | 28/79 [00:01<00:03, 14.14it/s]
 39%|      | 31/79 [00:02<00:02, 16.37it/s]
 43%|     | 34/79 [00:02<00:02, 17.89it/s]
 47%|     | 37/79 [00:02<00:02, 19.62it/s]
 51%|     | 40/79 [00:02<00:01, 21.04it/s]
 54%|    | 43/79 [00:02<00:01, 22.19it/s]
 58%|    | 46/79 [00:02<00:01, 22.31it/s]
 62%|   | 49/79 [00:02<00:01, 22.99it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.77it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:05,  9.55it/s]
 32%|      | 25/79 [00:01<00:04, 11.67it/s]
 35%|      | 28/79 [00:01<00:03, 13.87it/s]
 39%|      | 31/79 [00:02<00:02, 16.08it/s]
 43%|     | 34/79 [00:02<00:02, 18.04it/s]
 47%|     | 37/79 [00:02<00:02, 19.80it/s]
 51%|     | 40/79 [00:02<00:01, 21.06it/s]
 54%|    | 43/79 [00:02<00:01, 21.96it/s]
 58%|    | 46/79 [00:02<00:01, 22.78it/s]
 62%|   | 49/79 [00:02<00:01, 23.24it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.38it/s]
 32%|      | 25/79 [00:01<00:04, 11.48it/s]
 35%|      | 28/79 [00:01<00:03, 13.70it/s]
 39%|      | 31/79 [00:02<00:03, 15.84it/s]
 43%|     | 34/79 [00:02<00:02, 17.76it/s]
 47%|     | 37/79 [00:02<00:02, 19.22it/s]
 51%|     | 40/79 [00:02<00:01, 20.69it/s]
 54%|    | 43/79 [00:02<00:01, 21.75it/s]
 58%|    | 46/79 [00:02<00:01, 22.39it/s]
 62%|   | 49/79 [00:02<00:01, 22.71it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 28%|       | 22/79 [00:01<00:06,  9.16it/s]
 32%|      | 25/79 [00:01<00:04, 11.31it/s]
 35%|      | 28/79 [00:01<00:03, 13.59it/s]
 39%|      | 31/79 [00:02<00:03, 15.78it/s]
 43%|     | 34/79 [00:02<00:02, 17.79it/s]
 47%|     | 37/79 [00:02<00:02, 19.43it/s]
 51%|     | 40/79 [00:02<00:01, 20.95it/s]
 54%|    | 43/79 [00:02<00:01, 22.10it/s]
 58%|    | 46/79 [00:02<00:01, 22.83it/s]
 62%|   | 49/79 [00:02<00:01, 23.23it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.76it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:06,  9.46it/s]
 32%|      | 25/79 [00:01<00:04, 11.61it/s]
 35%|      | 28/79 [00:01<00:03, 13.84it/s]
 39%|      | 31/79 [00:02<00:03, 15.95it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.78it/s]
 54%|    | 43/79 [00:02<00:01, 21.91it/s]
 58%|    | 46/79 [00:02<00:01, 22.89it/s]
 62%|   | 49/79 [00:02<00:01, 23.48it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.76it/s]
 24%|       | 19/79 [00:01<00:08,  7.46it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.59it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:03, 15.97it/s]
 43%|     | 34/79 [00:02<00:02, 17.66it/s]
 47%|     | 37/79 [00:02<00:02, 19.31it/s]
 51%|     | 40/79 [00:02<00:01, 20.77it/s]
 54%|    | 43/79 [00:02<00:01, 21.76it/s]
 58%|    | 46/79 [00:02<00:01, 22.69it/s]
 62%|   | 49/79 [00:02<00:01, 23.51it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.17it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.29it/s]
 35%|      | 28/79 [00:01<00:03, 13.49it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.80it/s]
 47%|     | 37/79 [00:02<00:02, 19.41it/s]
 51%|     | 40/79 [00:02<00:01, 20.86it/s]
 54%|    | 43/79 [00:02<00:01, 22.00it/s]
 58%|    | 46/79 [00:02<00:01, 22.57it/s]
 62%|   | 49/79 [00:02<00:01, 23.19it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  4%|         | 3/79 [00:00<00:47,  1.61it/s]
  8%|         | 6/79 [00:01<00:32,  2.23it/s]
 11%|        | 9/79 [00:01<00:22,  3.06it/s]
 15%|        | 12/79 [00:01<00:16,  4.16it/s]
 19%|        | 15/79 [00:01<00:11,  5.54it/s]
 23%|       | 18/79 [00:01<00:08,  7.23it/s]
 27%|       | 21/79 [00:01<00:06,  9.19it/s]
 30%|       | 24/79 [00:01<00:04, 11.31it/s]
 34%|      | 27/79 [00:01<00:03, 13.52it/s]
 38%|      | 30/79 [00:02<00:03, 15.69it/s]
 42%|     | 33/79 [00:02<00:02, 17.59it/s]
 46%|     | 36/79 [00:02<00:02, 19.05it/s]
 49%|     | 39/79 [00:02<00:01, 20.41it/s]
 53%|    | 42/79 [00:02<00:01, 21.44it/s]
 57%|    | 45/79 [00:02<00:01, 22.00it/s]
 61%|    | 48/79 [00:02<00:01, 22.69it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.37it/s]
 32%|      | 25/79 [00:01<00:04, 11.49it/s]
 35%|      | 28/79 [00:01<00:03, 13.71it/s]
 39%|      | 31/79 [00:02<00:03, 15.48it/s]
 43%|     | 34/79 [00:02<00:02, 17.31it/s]
 47%|     | 37/79 [00:02<00:02, 19.02it/s]
 51%|     | 40/79 [00:02<00:01, 20.16it/s]
 54%|    | 43/79 [00:02<00:01, 21.40it/s]
 58%|    | 46/79 [00:02<00:01, 21.82it/s]
 62%|   | 49/79 [00:02<00:01, 22.56it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.38it/s]
 32%|      | 25/79 [00:01<00:04, 11.49it/s]
 35%|      | 28/79 [00:01<00:03, 13.51it/s]
 39%|      | 31/79 [00:02<00:03, 15.63it/s]
 43%|     | 34/79 [00:02<00:02, 17.46it/s]
 47%|     | 37/79 [00:02<00:02, 18.84it/s]
 51%|     | 40/79 [00:02<00:01, 20.09it/s]
 54%|    | 43/79 [00:02<00:01, 21.23it/s]
 58%|    | 46/79 [00:02<00:01, 22.13it/s]
 62%|   | 49/79 [00:02<00:01, 22.17it/s]
 66%|   | 52/79 [00:02<00:01, 25.22it/s]
 70%|   | 55/79 [00:02<00:00, 25.35it/s]
 73%|  | 58/79 [00:02<00:00, 25.86it/s]
 77%|  | 61/79 [00:03<00:00, 25.96it/s]
 81%|  | 64/79 [00:03<00:00, 26.31it/s]
 85%| | 67/79 [00:03<00:00, 26.23it/s]
 89%| | 70/79 [00:03<00:00, 26.33it/s]
 92%|| 73/79 [00:03<00:00, 26.54it/s]
 96%|| 76/79 [00:03<00:00, 27.12it/s]
100%|| 79/79 [00:03<00:00, 27.81it/s]
, 24.89it/s]
 70%|   | 55/79 [00:02<00:00, 25.38it/s]
 73%|  | 58/79 [00:02<00:00, 25.60it/s]
 77%|  | 61/79 [00:03<00:00, 25.60it/s]
 81%|  | 64/79 [00:03<00:00, 25.75it/s]
 85%| | 67/79 [00:03<00:00, 25.64it/s]
 89%| | 70/79 [00:03<00:00, 25.47it/s]
 92%|| 73/79 [00:03<00:00, 26.08it/s]
 96%|| 76/79 [00:03<00:00, 26.68it/s]
100%|| 79/79 [00:03<00:00, 20.62it/s]
, 25.20it/s]
 70%|   | 55/79 [00:02<00:00, 25.47it/s]
 73%|  | 58/79 [00:02<00:00, 25.72it/s]
 77%|  | 61/79 [00:03<00:00, 26.01it/s]
 81%|  | 64/79 [00:03<00:00, 25.69it/s]
 85%| | 67/79 [00:03<00:00, 25.96it/s]
 89%| | 70/79 [00:03<00:00, 25.98it/s]
 92%|| 73/79 [00:03<00:00, 26.31it/s]
 96%|| 76/79 [00:03<00:00, 26.82it/s]
100%|| 79/79 [00:03<00:00, 27.62it/s]
, 24.83it/s]
 70%|   | 55/79 [00:02<00:00, 25.12it/s]
 73%|  | 58/79 [00:03<00:00, 25.63it/s]
 77%|  | 61/79 [00:03<00:00, 25.79it/s]
 81%|  | 64/79 [00:03<00:00, 25.70it/s]
 85%| | 67/79 [00:03<00:00, 26.05it/s]
 89%| | 70/79 [00:03<00:00, 26.06it/s]
 92%|| 73/79 [00:03<00:00, 26.34it/s]
 96%|| 76/79 [00:03<00:00, 26.91it/s]
100%|| 79/79 [00:03<00:00, 27.76it/s]
12it/s]
 68%|   | 54/79 [00:02<00:01, 24.60it/s]
 72%|  | 57/79 [00:03<00:00, 24.81it/s]
 76%|  | 60/79 [00:03<00:00, 24.89it/s]
 80%|  | 63/79 [00:03<00:00, 25.35it/s]
 84%| | 66/79 [00:03<00:00, 25.20it/s]
 87%| | 69/79 [00:03<00:00, 25.31it/s]
 91%| | 72/79 [00:03<00:00, 25.43it/s]
 95%|| 75/79 [00:03<00:00, 26.37it/s]
 99%|| 78/79 [00:03<00:00, 26.93it/s]
100%|| 79/79 [00:03<00:00, 20.27it/s]
, 24.51it/s]
 70%|   | 55/79 [00:02<00:00, 24.89it/s]
 73%|  | 58/79 [00:03<00:00, 25.18it/s]
 77%|  | 61/79 [00:03<00:00, 25.24it/s]
 81%|  | 64/79 [00:03<00:00, 25.35it/s]
 85%| | 67/79 [00:03<00:00, 25.58it/s]
 89%| | 70/79 [00:03<00:00, 25.77it/s]
 92%|| 73/79 [00:03<00:00, 25.95it/s]
 96%|| 76/79 [00:03<00:00, 26.73it/s]
100%|| 79/79 [00:03<00:00, 27.61it/s]
, 24.60it/s]
 70%|   | 55/79 [00:02<00:00, 24.76it/s]
 73%|  | 58/79 [00:03<00:00, 24.71it/s]
 77%|  | 61/79 [00:03<00:00, 25.27it/s]
 81%|  | 64/79 [00:03<00:00, 25.42it/s]
 85%| | 67/79 [00:03<00:00, 25.54it/s]
 89%| | 70/79 [00:03<00:00, 25.89it/s]
 92%|| 73/79 [00:03<00:00, 26.28it/s]
 96%|| 76/79 [00:03<00:00, 26.91it/s]
100%|| 79/79 [00:03<00:00, 27.75it/s]
, 24.95it/s]
 70%|   | 55/79 [00:02<00:00, 25.21it/s]
 73%|  | 58/79 [00:03<00:00, 25.50it/s]
 77%|  | 61/79 [00:03<00:00, 25.94it/s]
 81%|  | 64/79 [00:03<00:00, 26.00it/s]
 85%| | 67/79 [00:03<00:00, 26.46it/s]
 89%| | 70/79 [00:03<00:00, 26.67it/s]
 92%|| 73/79 [00:03<00:00, 26.94it/s]
 96%|| 76/79 [00:03<00:00, 27.44it/s]
100%|| 79/79 [00:03<00:00, 28.14it/s]
, 24.98it/s]
 70%|   | 55/79 [00:02<00:00, 25.46it/s]
 73%|  | 58/79 [00:03<00:00, 25.64it/s]
 77%|  | 61/79 [00:03<00:00, 25.73it/s]
 81%|  | 64/79 [00:03<00:00, 25.97it/s]
 85%| | 67/79 [00:03<00:00, 25.87it/s]
 89%| | 70/79 [00:03<00:00, 25.94it/s]
 92%|| 73/79 [00:03<00:00, 26.24it/s]
 97%|| 77/79 [00:03<00:00, 27.19it/s]
100%|| 79/79 [00:03<00:00, 20.17it/s]
, 24.67it/s]
 70%|   | 55/79 [00:02<00:00, 25.20it/s]
 73%|  | 58/79 [00:03<00:00, 25.77it/s]
 77%|  | 61/79 [00:03<00:00, 25.78it/s]
 81%|  | 64/79 [00:03<00:00, 25.65it/s]
 85%| | 67/79 [00:03<00:00, 25.86it/s]
 89%| | 70/79 [00:03<00:00, 25.52it/s]
 92%|| 73/79 [00:03<00:00, 25.85it/s]
 96%|| 76/79 [00:03<00:00, 26.40it/s]
100%|| 79/79 [00:03<00:00, 27.20it/s]
, 24.66it/s]
 70%|   | 55/79 [00:02<00:00, 25.04it/s]
 73%|  | 58/79 [00:03<00:00, 24.99it/s]
 77%|  | 61/79 [00:03<00:00, 25.39it/s]
 81%|  | 64/79 [00:03<00:00, 25.49it/s]
 85%| | 67/79 [00:03<00:00, 25.48it/s]
 89%| | 70/79 [00:03<00:00, 25.49it/s]
 92%|| 73/79 [00:03<00:00, 25.99it/s]
 96%|| 76/79 [00:03<00:00, 26.63it/s]
100%|| 79/79 [00:03<00:00, 27.50it/s]
, 25.17it/s]
 70%|   | 55/79 [00:02<00:00, 25.81it/s]
 73%|  | 58/79 [00:03<00:00, 25.87it/s]
 77%|  | 61/79 [00:03<00:00, 26.06it/s]
 81%|  | 64/79 [00:03<00:00, 26.26it/s]
 85%| | 67/79 [00:03<00:00, 26.37it/s]
 89%| | 70/79 [00:03<00:00, 26.37it/s]
 92%|| 73/79 [00:03<00:00, 26.31it/s]
 96%|| 76/79 [00:03<00:00, 26.89it/s]
100%|| 79/79 [00:03<00:00, 27.56it/s]
39it/s]
 68%|   | 54/79 [00:02<00:01, 24.64it/s]
 72%|  | 57/79 [00:03<00:00, 24.94it/s]
 76%|  | 60/79 [00:03<00:00, 25.14it/s]
 80%|  | 63/79 [00:03<00:00, 25.20it/s]
 84%| | 66/79 [00:03<00:00, 25.06it/s]
 87%| | 69/79 [00:03<00:00, 25.00it/s]
 91%| | 72/79 [00:03<00:00, 25.44it/s]
 95%|| 75/79 [00:03<00:00, 26.21it/s]
 99%|| 78/79 [00:03<00:00, 26.83it/s]
100%|| 79/79 [00:03<00:00, 19.99it/s]
, 24.51it/s]
 70%|   | 55/79 [00:02<00:00, 24.91it/s]
 73%|  | 58/79 [00:03<00:00, 24.99it/s]
 77%|  | 61/79 [00:03<00:00, 25.17it/s]
 81%|  | 64/79 [00:03<00:00, 25.09it/s]
 85%| | 67/79 [00:03<00:00, 25.04it/s]
 89%| | 70/79 [00:03<00:00, 25.42it/s]
 92%|| 73/79 [00:03<00:00, 25.47it/s]
 96%|| 76/79 [00:03<00:00, 26.29it/s]
100%|| 79/79 [00:03<00:00, 27.09it/s]
, 24.08it/s]
 70%|   | 55/79 [00:02<00:00, 24.43it/s]
 73%|  | 58/79 [00:03<00:00, 24.79it/s]
 77%|  | 61/79 [00:03<00:00, 24.92it/s]
 81%|  | 64/79 [00:03<00:00, 25.03it/s]
 85%| | 67/79 [00:03<00:00, 25.16it/s]
 89%| | 70/79 [00:03<00:00, 25.15it/s]
 92%|| 73/79 [00:03<00:00, 25.51it/s]
 96%|| 76/79 [00:03<00:00, 26.36it/s]
100%|| 79/79 [00:03<00:00, 27.25it/s]
, 24.32it/s]
 70%|   | 55/79 [00:02<00:00, 24.48it/s]
 73%|  | 58/79 [00:03<00:00, 24.65it/s]
 77%|  | 61/79 [00:03<00:00, 24.97it/s]
 81%|  | 64/79 [00:03<00:00, 25.26it/s]
 85%| | 67/79 [00:03<00:00, 25.44it/s]
 89%| | 70/79 [00:03<00:00, 25.08it/s]
 92%|| 73/79 [00:03<00:00, 25.97it/s]
 96%|| 76/79 [00:03<00:00, 26.64it/s]
100%|| 79/79 [00:03<00:00, 27.50it/s]
, 23.82it/s]
 70%|   | 55/79 [00:03<00:00, 24.04it/s]
 73%|  | 58/79 [00:03<00:00, 24.44it/s]
 77%|  | 61/79 [00:03<00:00, 24.74it/s]
 81%|  | 64/79 [00:03<00:00, 24.99it/s]
 85%| | 67/79 [00:03<00:00, 24.93it/s]
 89%| | 70/79 [00:03<00:00, 25.08it/s]
 92%|| 73/79 [00:03<00:00, 25.55it/s]
 96%|| 76/79 [00:03<00:00, 26.17it/s]
100%|| 79/79 [00:03<00:00, 19.85it/s]
, 24.25it/s]
 70%|   | 55/79 [00:02<00:00, 24.39it/s]
 73%|  | 58/79 [00:03<00:00, 24.87it/s]
 77%|  | 61/79 [00:03<00:00, 25.26it/s]
 81%|  | 64/79 [00:03<00:00, 25.51it/s]
 85%| | 67/79 [00:03<00:00, 25.25it/s]
 89%| | 70/79 [00:03<00:00, 25.36it/s]
 92%|| 73/79 [00:03<00:00, 25.78it/s]
 96%|| 76/79 [00:03<00:00, 26.49it/s]
100%|| 79/79 [00:03<00:00, 19.91it/s]
, 24.47it/s]
 70%|   | 55/79 [00:03<00:00, 24.89it/s]
 73%|  | 58/79 [00:03<00:00, 25.09it/s]
 77%|  | 61/79 [00:03<00:00, 25.17it/s]
 81%|  | 64/79 [00:03<00:00, 24.92it/s]
 85%| | 67/79 [00:03<00:00, 24.96it/s]
 89%| | 70/79 [00:03<00:00, 25.17it/s]
 92%|| 73/79 [00:03<00:00, 25.52it/s]
 96%|| 76/79 [00:03<00:00, 26.22it/s]
100%|| 79/79 [00:03<00:00, 27.19it/s]
, 24.08it/s]
 70%|   | 55/79 [00:02<00:00, 24.40it/s]
 73%|  | 58/79 [00:03<00:00, 24.49it/s]
 77%|  | 61/79 [00:03<00:00, 24.84it/s]
 81%|  | 64/79 [00:03<00:00, 25.00it/s]
 85%| | 67/79 [00:03<00:00, 25.17it/s]
 89%| | 70/79 [00:03<00:00, 25.22it/s]
 92%|| 73/79 [00:03<00:00, 25.32it/s]
 96%|| 76/79 [00:03<00:00, 26.45it/s]
100%|| 79/79 [00:03<00:00, 26.78it/s]
17it/s]
 68%|   | 54/79 [00:02<00:01, 24.53it/s]
 72%|  | 57/79 [00:03<00:00, 24.81it/s]
 76%|  | 60/79 [00:03<00:00, 24.84it/s]
 80%|  | 63/79 [00:03<00:00, 25.09it/s]
 84%| | 66/79 [00:03<00:00, 25.15it/s]
 87%| | 69/79 [00:03<00:00, 25.16it/s]
 91%| | 72/79 [00:03<00:00, 25.42it/s]
 95%|| 75/79 [00:03<00:00, 26.26it/s]
 99%|| 78/79 [00:03<00:00, 26.81it/s]
100%|| 79/79 [00:03<00:00, 19.79it/s]
, 23.74it/s]
 70%|   | 55/79 [00:02<00:00, 24.31it/s]
 73%|  | 58/79 [00:03<00:00, 24.29it/s]
 77%|  | 61/79 [00:03<00:00, 24.13it/s]
 81%|  | 64/79 [00:03<00:00, 24.65it/s]
 85%| | 67/79 [00:03<00:00, 24.78it/s]
 89%| | 70/79 [00:03<00:00, 24.73it/s]
 92%|| 73/79 [00:03<00:00, 25.42it/s]
 96%|| 76/79 [00:03<00:00, 26.21it/s]
100%|| 79/79 [00:03<00:00, 27.23it/s]
, 23.80it/s]
 70%|   | 55/79 [00:03<00:00, 24.26it/s]
 73%|  | 58/79 [00:03<00:00, 24.56it/s]
 77%|  | 61/79 [00:03<00:00, 24.60it/s]
 81%|  | 64/79 [00:03<00:00, 24.93it/s]
 85%| | 67/79 [00:03<00:00, 25.04it/s]
 89%| | 70/79 [00:03<00:00, 25.06it/s]
 92%|| 73/79 [00:03<00:00, 25.58it/s]
 96%|| 76/79 [00:03<00:00, 26.34it/s]
100%|| 79/79 [00:03<00:00, 27.20it/s]
, 23.82it/s]
 70%|   | 55/79 [00:03<00:00, 24.34it/s]
 73%|  | 58/79 [00:03<00:00, 24.67it/s]
 77%|  | 61/79 [00:03<00:00, 24.73it/s]
 81%|  | 64/79 [00:03<00:00, 24.81it/s]
 85%| | 67/79 [00:03<00:00, 24.98it/s]
 89%| | 70/79 [00:03<00:00, 24.81it/s]
 92%|| 73/79 [00:03<00:00, 25.26it/s]
 96%|| 76/79 [00:03<00:00, 25.74it/s]
100%|| 79/79 [00:03<00:00, 26.49it/s]
, 23.80it/s]
 70%|   | 55/79 [00:02<00:01, 23.97it/s]
 73%|  | 58/79 [00:03<00:00, 24.33it/s]
 77%|  | 61/79 [00:03<00:00, 24.19it/s]
 81%|  | 64/79 [00:03<00:00, 24.40it/s]
 85%| | 67/79 [00:03<00:00, 24.56it/s]
 89%| | 70/79 [00:03<00:00, 24.57it/s]
 92%|| 73/79 [00:03<00:00, 25.02it/s]
 96%|| 76/79 [00:03<00:00, 25.71it/s]
100%|| 79/79 [00:03<00:00, 26.57it/s]
, 23.10it/s]
 70%|   | 55/79 [00:03<00:01, 23.40it/s]
 73%|  | 58/79 [00:03<00:00, 23.64it/s]
 77%|  | 61/79 [00:03<00:00, 23.73it/s]
 81%|  | 64/79 [00:03<00:00, 24.17it/s]
 85%| | 67/79 [00:03<00:00, 24.47it/s]
 89%| | 70/79 [00:03<00:00, 24.32it/s]
 92%|| 73/79 [00:03<00:00, 24.87it/s]
 96%|| 76/79 [00:03<00:00, 25.72it/s]
100%|| 79/79 [00:03<00:00, 26.71it/s]
63it/s]
 68%|   | 54/79 [00:02<00:01, 23.94it/s]
 72%|  | 57/79 [00:03<00:00, 24.23it/s]
 76%|  | 60/79 [00:03<00:00, 24.44it/s]
 80%|  | 63/79 [00:03<00:00, 24.62it/s]
 84%| | 66/79 [00:03<00:00, 24.76it/s]
 87%| | 69/79 [00:03<00:00, 25.03it/s]
 91%| | 72/79 [00:03<00:00, 24.82it/s]
 95%|| 75/79 [00:03<00:00, 25.55it/s]
 99%|| 78/79 [00:03<00:00, 26.03it/s]
100%|| 79/79 [00:04<00:00, 19.55it/s]
, 23.38it/s]
 70%|   | 55/79 [00:03<00:00, 24.01it/s]
 73%|  | 58/79 [00:03<00:00, 24.31it/s]
 77%|  | 61/79 [00:03<00:00, 24.75it/s]
 81%|  | 64/79 [00:03<00:00, 25.15it/s]
 85%| | 67/79 [00:03<00:00, 25.40it/s]
 89%| | 70/79 [00:03<00:00, 25.37it/s]
 92%|| 73/79 [00:03<00:00, 25.53it/s]
 96%|| 76/79 [00:03<00:00, 26.05it/s]
100%|| 79/79 [00:03<00:00, 26.67it/s]
, 23.81it/s]
 70%|   | 55/79 [00:03<00:00, 24.15it/s]
 73%|  | 58/79 [00:03<00:00, 24.32it/s]
 77%|  | 61/79 [00:03<00:00, 24.39it/s]
 81%|  | 64/79 [00:03<00:00, 24.53it/s]
 85%| | 67/79 [00:03<00:00, 24.56it/s]
 89%| | 70/79 [00:03<00:00, 24.66it/s]
 92%|| 73/79 [00:03<00:00, 25.04it/s]
 96%|| 76/79 [00:03<00:00, 25.67it/s]
100%|| 79/79 [00:03<00:00, 26.57it/s]
, 22.75it/s]
 70%|   | 55/79 [00:03<00:01, 23.26it/s]
 73%|  | 58/79 [00:03<00:00, 23.73it/s]
 77%|  | 61/79 [00:03<00:00, 23.85it/s]
 81%|  | 64/79 [00:03<00:00, 23.78it/s]
 85%| | 67/79 [00:03<00:00, 24.20it/s]
 89%| | 70/79 [00:03<00:00, 24.31it/s]
 92%|| 73/79 [00:03<00:00, 24.54it/s]
 96%|| 76/79 [00:03<00:00, 25.40it/s]
100%|| 79/79 [00:04<00:00, 26.35it/s]
14it/s]
 68%|   | 54/79 [00:03<00:01, 23.46it/s]
 72%|  | 57/79 [00:03<00:00, 23.78it/s]
 76%|  | 60/79 [00:03<00:00, 23.98it/s]
 80%|  | 63/79 [00:03<00:00, 23.82it/s]
 84%| | 66/79 [00:03<00:00, 23.97it/s]
 87%| | 69/79 [00:03<00:00, 24.01it/s]
 91%| | 72/79 [00:03<00:00, 24.24it/s]
 95%|| 75/79 [00:03<00:00, 25.07it/s]
 99%|| 78/79 [00:04<00:00, 25.69it/s]
100%|| 79/79 [00:04<00:00, 19.15it/s]
, 23.11it/s]
 70%|   | 55/79 [00:03<00:01, 22.95it/s]
 73%|  | 58/79 [00:03<00:00, 23.18it/s]
 77%|  | 61/79 [00:03<00:00, 23.48it/s]
 81%|  | 64/79 [00:03<00:00, 23.74it/s]
 85%| | 67/79 [00:03<00:00, 23.90it/s]
 89%| | 70/79 [00:03<00:00, 23.99it/s]
 92%|| 73/79 [00:03<00:00, 24.44it/s]
 96%|| 76/79 [00:03<00:00, 25.35it/s]
100%|| 79/79 [00:04<00:00, 26.13it/s]
2020-06-23 17:02:16,285 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.133405 (0.02645379180908203 s / img per device, on 32 devices)
2020-06-23 17:02:16,304 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:02:16,304 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:02:16,322 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592956943568, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 8, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592956943569, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 8}}
2020-06-23 17:02:23,664 maskrcnn_benchmark.trainer INFO: eta: 1:10:43  iter: 6420  loss: 0.6867 (0.8017)  loss_classifier: 0.2430 (0.2957)  loss_box_reg: 0.1163 (0.1280)  loss_mask: 0.2602 (0.3137)  loss_objectness: 0.0237 (0.0421)  loss_rpn_box_reg: 0.0105 (0.0222)  time: 0.1083 (0.1264)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5148
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:02:25,855 maskrcnn_benchmark.trainer INFO: eta: 1:10:39  iter: 6440  loss: 0.6401 (0.8013)  loss_classifier: 0.1786 (0.2955)  loss_box_reg: 0.0932 (0.1279)  loss_mask: 0.2439 (0.3136)  loss_objectness: 0.0351 (0.0421)  loss_rpn_box_reg: 0.0173 (0.0223)  time: 0.1080 (0.1263)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5148
2020-06-23 17:02:28,018 maskrcnn_benchmark.trainer INFO: eta: 1:10:34  iter: 6460  loss: 0.6234 (0.8008)  loss_classifier: 0.2233 (0.2952)  loss_box_reg: 0.0942 (0.1278)  loss_mask: 0.2743 (0.3135)  loss_objectness: 0.0219 (0.0420)  loss_rpn_box_reg: 0.0075 (0.0222)  time: 0.1083 (0.1263)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.62s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 17:02:30,194 maskrcnn_benchmark.trainer INFO: eta: 1:10:30  iter: 6480  loss: 0.5681 (0.8001)  loss_classifier: 0.1769 (0.2949)  loss_box_reg: 0.0736 (0.1277)  loss_mask: 0.2756 (0.3133)  loss_objectness: 0.0136 (0.0419)  loss_rpn_box_reg: 0.0087 (0.0222)  time: 0.1080 (0.1262)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5148
DONE (t=1.50s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.29076
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.49762
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.30767
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15632
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.32277
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.37524
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.26760
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.42084
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44223
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.26045
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.48316
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.56963
2020-06-23 17:02:32,359 maskrcnn_benchmark.trainer INFO: eta: 1:10:25  iter: 6500  loss: 0.6663 (0.7997)  loss_classifier: 0.2291 (0.2947)  loss_box_reg: 0.0995 (0.1276)  loss_mask: 0.2503 (0.3132)  loss_objectness: 0.0275 (0.0420)  loss_rpn_box_reg: 0.0122 (0.0222)  time: 0.1084 (0.1261)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5148
2020-06-23 17:02:34,530 maskrcnn_benchmark.trainer INFO: eta: 1:10:21  iter: 6520  loss: 0.6690 (0.7992)  loss_classifier: 0.2234 (0.2945)  loss_box_reg: 0.1086 (0.1276)  loss_mask: 0.2751 (0.3130)  loss_objectness: 0.0163 (0.0419)  loss_rpn_box_reg: 0.0068 (0.0222)  time: 0.1078 (0.1261)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:02:36,710 maskrcnn_benchmark.trainer INFO: eta: 1:10:17  iter: 6540  loss: 0.6619 (0.7987)  loss_classifier: 0.2680 (0.2943)  loss_box_reg: 0.1076 (0.1275)  loss_mask: 0.2607 (0.3129)  loss_objectness: 0.0212 (0.0419)  loss_rpn_box_reg: 0.0067 (0.0222)  time: 0.1090 (0.1260)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5148
DONE (t=1.65s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:02:38,880 maskrcnn_benchmark.trainer INFO: eta: 1:10:13  iter: 6560  loss: 0.7010 (0.7984)  loss_classifier: 0.2530 (0.2942)  loss_box_reg: 0.1161 (0.1274)  loss_mask: 0.2692 (0.3127)  loss_objectness: 0.0238 (0.0419)  loss_rpn_box_reg: 0.0111 (0.0222)  time: 0.1080 (0.1260)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5148
DONE (t=2.41s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.27750
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.46552
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.28984
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11633
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.30537
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.40687
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.26140
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.40014
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.41793
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.23075
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.45902
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.55463
2020-06-23 17:02:40,961 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.29076265660155676, segm mAP: 0.277504790726016
:::MLLOG {"namespace": "", "time_ms": 1592956960962, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.29076265660155676, "SEGM": 0.277504790726016}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1592956960962, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 7}}
2020-06-23 17:02:41,176 maskrcnn_benchmark.trainer INFO: eta: 1:10:09  iter: 6580  loss: 0.6092 (0.7980)  loss_classifier: 0.2339 (0.2940)  loss_box_reg: 0.0910 (0.1274)  loss_mask: 0.2607 (0.3126)  loss_objectness: 0.0153 (0.0418)  loss_rpn_box_reg: 0.0084 (0.0222)  time: 0.1084 (0.1260)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5148
2020-06-23 17:02:43,338 maskrcnn_benchmark.trainer INFO: eta: 1:10:05  iter: 6600  loss: 0.6618 (0.7977)  loss_classifier: 0.2168 (0.2939)  loss_box_reg: 0.1130 (0.1274)  loss_mask: 0.2836 (0.3125)  loss_objectness: 0.0259 (0.0418)  loss_rpn_box_reg: 0.0184 (0.0222)  time: 0.1077 (0.1259)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5148
2020-06-23 17:02:45,490 maskrcnn_benchmark.trainer INFO: eta: 1:10:00  iter: 6620  loss: 0.6518 (0.7973)  loss_classifier: 0.2335 (0.2937)  loss_box_reg: 0.1087 (0.1273)  loss_mask: 0.2638 (0.3124)  loss_objectness: 0.0181 (0.0417)  loss_rpn_box_reg: 0.0078 (0.0221)  time: 0.1072 (0.1258)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5148
2020-06-23 17:02:47,661 maskrcnn_benchmark.trainer INFO: eta: 1:09:56  iter: 6640  loss: 0.6824 (0.7972)  loss_classifier: 0.2486 (0.2937)  loss_box_reg: 0.1163 (0.1273)  loss_mask: 0.2825 (0.3123)  loss_objectness: 0.0243 (0.0417)  loss_rpn_box_reg: 0.0113 (0.0222)  time: 0.1072 (0.1258)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5148
2020-06-23 17:02:49,825 maskrcnn_benchmark.trainer INFO: eta: 1:09:52  iter: 6660  loss: 0.6338 (0.7968)  loss_classifier: 0.1960 (0.2934)  loss_box_reg: 0.0858 (0.1272)  loss_mask: 0.2804 (0.3122)  loss_objectness: 0.0162 (0.0417)  loss_rpn_box_reg: 0.0127 (0.0222)  time: 0.1080 (0.1257)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5148
2020-06-23 17:02:51,972 maskrcnn_benchmark.trainer INFO: eta: 1:09:47  iter: 6680  loss: 0.7526 (0.7967)  loss_classifier: 0.2759 (0.2934)  loss_box_reg: 0.1228 (0.1272)  loss_mask: 0.2872 (0.3121)  loss_objectness: 0.0344 (0.0417)  loss_rpn_box_reg: 0.0149 (0.0222)  time: 0.1075 (0.1257)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5148
2020-06-23 17:02:54,129 maskrcnn_benchmark.trainer INFO: eta: 1:09:43  iter: 6700  loss: 0.6162 (0.7963)  loss_classifier: 0.2139 (0.2932)  loss_box_reg: 0.0931 (0.1272)  loss_mask: 0.2682 (0.3120)  loss_objectness: 0.0205 (0.0417)  loss_rpn_box_reg: 0.0121 (0.0222)  time: 0.1072 (0.1256)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5148
2020-06-23 17:02:56,276 maskrcnn_benchmark.trainer INFO: eta: 1:09:39  iter: 6720  loss: 0.6624 (0.7958)  loss_classifier: 0.2015 (0.2930)  loss_box_reg: 0.0985 (0.1271)  loss_mask: 0.2947 (0.3120)  loss_objectness: 0.0150 (0.0416)  loss_rpn_box_reg: 0.0077 (0.0221)  time: 0.1077 (0.1256)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5148
2020-06-23 17:02:58,438 maskrcnn_benchmark.trainer INFO: eta: 1:09:34  iter: 6740  loss: 0.7294 (0.7956)  loss_classifier: 0.2664 (0.2929)  loss_box_reg: 0.1115 (0.1270)  loss_mask: 0.2948 (0.3119)  loss_objectness: 0.0278 (0.0416)  loss_rpn_box_reg: 0.0111 (0.0222)  time: 0.1076 (0.1255)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:00,584 maskrcnn_benchmark.trainer INFO: eta: 1:09:30  iter: 6760  loss: 0.5186 (0.7950)  loss_classifier: 0.1891 (0.2926)  loss_box_reg: 0.0731 (0.1269)  loss_mask: 0.2302 (0.3117)  loss_objectness: 0.0240 (0.0416)  loss_rpn_box_reg: 0.0096 (0.0222)  time: 0.1074 (0.1255)  data: 0.0013 (0.0182)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:02,738 maskrcnn_benchmark.trainer INFO: eta: 1:09:26  iter: 6780  loss: 0.5986 (0.7946)  loss_classifier: 0.2098 (0.2924)  loss_box_reg: 0.0943 (0.1269)  loss_mask: 0.2778 (0.3116)  loss_objectness: 0.0148 (0.0415)  loss_rpn_box_reg: 0.0067 (0.0221)  time: 0.1070 (0.1254)  data: 0.0013 (0.0182)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:04,891 maskrcnn_benchmark.trainer INFO: eta: 1:09:22  iter: 6800  loss: 0.6551 (0.7943)  loss_classifier: 0.2495 (0.2923)  loss_box_reg: 0.1031 (0.1269)  loss_mask: 0.2640 (0.3115)  loss_objectness: 0.0172 (0.0415)  loss_rpn_box_reg: 0.0090 (0.0221)  time: 0.1069 (0.1254)  data: 0.0013 (0.0181)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:07,066 maskrcnn_benchmark.trainer INFO: eta: 1:09:18  iter: 6820  loss: 0.6674 (0.7940)  loss_classifier: 0.2435 (0.2922)  loss_box_reg: 0.1134 (0.1268)  loss_mask: 0.2572 (0.3114)  loss_objectness: 0.0209 (0.0415)  loss_rpn_box_reg: 0.0130 (0.0221)  time: 0.1079 (0.1253)  data: 0.0015 (0.0181)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:09,218 maskrcnn_benchmark.trainer INFO: eta: 1:09:13  iter: 6840  loss: 0.6542 (0.7937)  loss_classifier: 0.2509 (0.2921)  loss_box_reg: 0.0987 (0.1268)  loss_mask: 0.2658 (0.3113)  loss_objectness: 0.0305 (0.0415)  loss_rpn_box_reg: 0.0127 (0.0221)  time: 0.1066 (0.1253)  data: 0.0015 (0.0180)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:11,374 maskrcnn_benchmark.trainer INFO: eta: 1:09:09  iter: 6860  loss: 0.6874 (0.7935)  loss_classifier: 0.2270 (0.2920)  loss_box_reg: 0.1118 (0.1267)  loss_mask: 0.2646 (0.3111)  loss_objectness: 0.0279 (0.0415)  loss_rpn_box_reg: 0.0105 (0.0221)  time: 0.1083 (0.1252)  data: 0.0015 (0.0180)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:13,551 maskrcnn_benchmark.trainer INFO: eta: 1:09:05  iter: 6880  loss: 0.5920 (0.7930)  loss_classifier: 0.2009 (0.2918)  loss_box_reg: 0.0902 (0.1267)  loss_mask: 0.2663 (0.3110)  loss_objectness: 0.0188 (0.0414)  loss_rpn_box_reg: 0.0078 (0.0221)  time: 0.1084 (0.1252)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:15,715 maskrcnn_benchmark.trainer INFO: eta: 1:09:01  iter: 6900  loss: 0.6536 (0.7927)  loss_classifier: 0.2183 (0.2916)  loss_box_reg: 0.1010 (0.1266)  loss_mask: 0.2830 (0.3109)  loss_objectness: 0.0249 (0.0414)  loss_rpn_box_reg: 0.0107 (0.0221)  time: 0.1078 (0.1251)  data: 0.0015 (0.0179)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:17,869 maskrcnn_benchmark.trainer INFO: eta: 1:08:57  iter: 6920  loss: 0.7492 (0.7925)  loss_classifier: 0.2660 (0.2916)  loss_box_reg: 0.1165 (0.1266)  loss_mask: 0.2965 (0.3109)  loss_objectness: 0.0278 (0.0414)  loss_rpn_box_reg: 0.0160 (0.0221)  time: 0.1069 (0.1251)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:20,008 maskrcnn_benchmark.trainer INFO: eta: 1:08:53  iter: 6940  loss: 0.6523 (0.7922)  loss_classifier: 0.2217 (0.2914)  loss_box_reg: 0.1138 (0.1266)  loss_mask: 0.2550 (0.3107)  loss_objectness: 0.0172 (0.0413)  loss_rpn_box_reg: 0.0094 (0.0221)  time: 0.1069 (0.1250)  data: 0.0013 (0.0178)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:22,176 maskrcnn_benchmark.trainer INFO: eta: 1:08:48  iter: 6960  loss: 0.6846 (0.7919)  loss_classifier: 0.2224 (0.2913)  loss_box_reg: 0.1170 (0.1265)  loss_mask: 0.2667 (0.3106)  loss_objectness: 0.0351 (0.0413)  loss_rpn_box_reg: 0.0110 (0.0221)  time: 0.1078 (0.1250)  data: 0.0013 (0.0177)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:24,338 maskrcnn_benchmark.trainer INFO: eta: 1:08:44  iter: 6980  loss: 0.6595 (0.7915)  loss_classifier: 0.2254 (0.2911)  loss_box_reg: 0.1095 (0.1265)  loss_mask: 0.2832 (0.3105)  loss_objectness: 0.0173 (0.0413)  loss_rpn_box_reg: 0.0060 (0.0221)  time: 0.1074 (0.1249)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:26,483 maskrcnn_benchmark.trainer INFO: eta: 1:08:40  iter: 7000  loss: 0.6122 (0.7911)  loss_classifier: 0.2087 (0.2909)  loss_box_reg: 0.0951 (0.1264)  loss_mask: 0.2743 (0.3104)  loss_objectness: 0.0238 (0.0412)  loss_rpn_box_reg: 0.0055 (0.0220)  time: 0.1066 (0.1249)  data: 0.0013 (0.0176)  lr: 0.160000  max mem: 5148

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0


Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0
Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  7014
Using dynamic loss scale of  65536.0
2020-06-23 17:03:28,642 maskrcnn_benchmark.trainer INFO: eta: 1:08:36  iter: 7020  loss: 0.7241 (0.7909)  loss_classifier: 0.2413 (0.2908)  loss_box_reg: 0.1355 (0.1264)  loss_mask: 0.2904 (0.3104)  loss_objectness: 0.0263 (0.0412)  loss_rpn_box_reg: 0.0092 (0.0220)  time: 0.1081 (0.1248)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:30,795 maskrcnn_benchmark.trainer INFO: eta: 1:08:32  iter: 7040  loss: 0.6266 (0.7904)  loss_classifier: 0.2374 (0.2907)  loss_box_reg: 0.0881 (0.1264)  loss_mask: 0.2532 (0.3102)  loss_objectness: 0.0173 (0.0412)  loss_rpn_box_reg: 0.0084 (0.0220)  time: 0.1068 (0.1248)  data: 0.0013 (0.0176)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:32,968 maskrcnn_benchmark.trainer INFO: eta: 1:08:28  iter: 7060  loss: 0.6121 (0.7901)  loss_classifier: 0.2048 (0.2906)  loss_box_reg: 0.0798 (0.1263)  loss_mask: 0.2736 (0.3101)  loss_objectness: 0.0169 (0.0411)  loss_rpn_box_reg: 0.0089 (0.0220)  time: 0.1081 (0.1247)  data: 0.0013 (0.0175)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:35,123 maskrcnn_benchmark.trainer INFO: eta: 1:08:24  iter: 7080  loss: 0.6979 (0.7899)  loss_classifier: 0.2335 (0.2905)  loss_box_reg: 0.1196 (0.1263)  loss_mask: 0.2745 (0.3101)  loss_objectness: 0.0226 (0.0411)  loss_rpn_box_reg: 0.0173 (0.0220)  time: 0.1080 (0.1247)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:37,278 maskrcnn_benchmark.trainer INFO: eta: 1:08:20  iter: 7100  loss: 0.5903 (0.7895)  loss_classifier: 0.2030 (0.2903)  loss_box_reg: 0.0886 (0.1262)  loss_mask: 0.2583 (0.3099)  loss_objectness: 0.0279 (0.0411)  loss_rpn_box_reg: 0.0158 (0.0220)  time: 0.1077 (0.1246)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:39,441 maskrcnn_benchmark.trainer INFO: eta: 1:08:16  iter: 7120  loss: 0.6728 (0.7892)  loss_classifier: 0.2370 (0.2902)  loss_box_reg: 0.1014 (0.1262)  loss_mask: 0.2917 (0.3099)  loss_objectness: 0.0196 (0.0410)  loss_rpn_box_reg: 0.0066 (0.0220)  time: 0.1077 (0.1246)  data: 0.0013 (0.0174)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:41,596 maskrcnn_benchmark.trainer INFO: eta: 1:08:12  iter: 7140  loss: 0.6949 (0.7890)  loss_classifier: 0.2634 (0.2901)  loss_box_reg: 0.1145 (0.1262)  loss_mask: 0.2911 (0.3098)  loss_objectness: 0.0199 (0.0410)  loss_rpn_box_reg: 0.0076 (0.0219)  time: 0.1077 (0.1245)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:43,759 maskrcnn_benchmark.trainer INFO: eta: 1:08:08  iter: 7160  loss: 0.6560 (0.7888)  loss_classifier: 0.2436 (0.2901)  loss_box_reg: 0.1088 (0.1261)  loss_mask: 0.2770 (0.3097)  loss_objectness: 0.0209 (0.0410)  loss_rpn_box_reg: 0.0127 (0.0219)  time: 0.1078 (0.1245)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:45,919 maskrcnn_benchmark.trainer INFO: eta: 1:08:04  iter: 7180  loss: 0.6498 (0.7886)  loss_classifier: 0.2367 (0.2900)  loss_box_reg: 0.1121 (0.1261)  loss_mask: 0.2687 (0.3096)  loss_objectness: 0.0197 (0.0409)  loss_rpn_box_reg: 0.0080 (0.0219)  time: 0.1073 (0.1244)  data: 0.0013 (0.0172)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:48,062 maskrcnn_benchmark.trainer INFO: eta: 1:08:00  iter: 7200  loss: 0.6527 (0.7883)  loss_classifier: 0.2324 (0.2899)  loss_box_reg: 0.1063 (0.1261)  loss_mask: 0.2637 (0.3095)  loss_objectness: 0.0214 (0.0409)  loss_rpn_box_reg: 0.0096 (0.0219)  time: 0.1073 (0.1244)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:50,201 maskrcnn_benchmark.trainer INFO: eta: 1:07:56  iter: 7220  loss: 0.6341 (0.7879)  loss_classifier: 0.2228 (0.2897)  loss_box_reg: 0.0871 (0.1260)  loss_mask: 0.2581 (0.3094)  loss_objectness: 0.0135 (0.0408)  loss_rpn_box_reg: 0.0069 (0.0219)  time: 0.1067 (0.1243)  data: 0.0013 (0.0171)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:52,362 maskrcnn_benchmark.trainer INFO: eta: 1:07:52  iter: 7240  loss: 0.6914 (0.7877)  loss_classifier: 0.2905 (0.2897)  loss_box_reg: 0.1033 (0.1260)  loss_mask: 0.2502 (0.3093)  loss_objectness: 0.0196 (0.0408)  loss_rpn_box_reg: 0.0097 (0.0219)  time: 0.1079 (0.1243)  data: 0.0014 (0.0171)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:54,521 maskrcnn_benchmark.trainer INFO: eta: 1:07:48  iter: 7260  loss: 0.6498 (0.7874)  loss_classifier: 0.2200 (0.2895)  loss_box_reg: 0.1034 (0.1260)  loss_mask: 0.2875 (0.3092)  loss_objectness: 0.0222 (0.0408)  loss_rpn_box_reg: 0.0081 (0.0219)  time: 0.1079 (0.1243)  data: 0.0013 (0.0171)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:56,671 maskrcnn_benchmark.trainer INFO: eta: 1:07:44  iter: 7280  loss: 0.6461 (0.7871)  loss_classifier: 0.2094 (0.2894)  loss_box_reg: 0.0868 (0.1259)  loss_mask: 0.2865 (0.3091)  loss_objectness: 0.0225 (0.0408)  loss_rpn_box_reg: 0.0086 (0.0219)  time: 0.1070 (0.1242)  data: 0.0013 (0.0170)  lr: 0.160000  max mem: 5148
2020-06-23 17:03:58,816 maskrcnn_benchmark.trainer INFO: eta: 1:07:40  iter: 7300  loss: 0.6201 (0.7867)  loss_classifier: 0.2278 (0.2892)  loss_box_reg: 0.1039 (0.1259)  loss_mask: 0.2733 (0.3090)  loss_objectness: 0.0206 (0.0408)  loss_rpn_box_reg: 0.0079 (0.0219)  time: 0.1071 (0.1242)  data: 0.0014 (0.0170)  lr: 0.160000  max mem: 5148
2020-06-23 17:04:00,965 maskrcnn_benchmark.trainer INFO: eta: 1:07:36  iter: 7320  loss: 0.6039 (0.7863)  loss_classifier: 0.2112 (0.2890)  loss_box_reg: 0.0837 (0.1258)  loss_mask: 0.2563 (0.3089)  loss_objectness: 0.0191 (0.0407)  loss_rpn_box_reg: 0.0062 (0.0218)  time: 0.1074 (0.1241)  data: 0.0013 (0.0169)  lr: 0.160000  max mem: 5148
:::MLLOG {"namespace": "", "time_ms": 1592957042680, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 8}}
:::MLLOG {"namespace": "", "time_ms": 1592957042681, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 8}}
:::MLLOG {"namespace": "", "time_ms": 1592957042681, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 8}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 17:04:02,892 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
Done (t=0.26s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.30s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
2020-06-23 17:04:03,204 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:30,  2.40it/s]
 13%|        | 10/79 [00:01<00:20,  3.30it/s]
 16%|        | 13/79 [00:01<00:14,  4.47it/s]
 20%|        | 16/79 [00:01<00:10,  5.96it/s]
 24%|       | 19/79 [00:01<00:07,  7.75it/s]
 28%|       | 22/79 [00:01<00:05,  9.85it/s]
 32%|      | 25/79 [00:01<00:04, 12.10it/s]
 35%|      | 28/79 [00:01<00:03, 14.44it/s]
 39%|      | 31/79 [00:01<00:02, 16.81it/s]
 43%|     | 34/79 [00:02<00:02, 18.83it/s]
 47%|     | 37/79 [00:02<00:02, 20.62it/s]
 51%|     | 40/79 [00:02<00:01, 22.02it/s]
 54%|    | 43/79 [00:02<00:01, 23.04it/s]
 58%|    | 46/79 [00:02<00:01, 23.97it/s]
 62%|   | 49/79 [00:02<00:01, 24.70it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.82it/s]
 35%|      | 28/79 [00:01<00:03, 14.09it/s]
 39%|      | 31/79 [00:02<00:02, 16.38it/s]
 43%|     | 34/79 [00:02<00:02, 18.32it/s]
 47%|     | 37/79 [00:02<00:02, 20.17it/s]
 51%|     | 40/79 [00:02<00:01, 21.61it/s]
 54%|    | 43/79 [00:02<00:01, 22.97it/s]
 58%|    | 46/79 [00:02<00:01, 23.70it/s]
 62%|   | 49/79 [00:02<00:01, 24.29it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:00<00:46,  1.63it/s]
  8%|         | 6/79 [00:01<00:32,  2.26it/s]
 11%|        | 9/79 [00:01<00:22,  3.11it/s]
 15%|        | 12/79 [00:01<00:15,  4.22it/s]
 19%|        | 15/79 [00:01<00:11,  5.63it/s]
 23%|       | 18/79 [00:01<00:08,  7.35it/s]
 27%|       | 21/79 [00:01<00:06,  9.37it/s]
 30%|       | 24/79 [00:01<00:04, 11.59it/s]
 34%|      | 27/79 [00:01<00:03, 13.82it/s]
 38%|      | 30/79 [00:02<00:03, 15.88it/s]
 42%|     | 33/79 [00:02<00:02, 17.91it/s]
 46%|     | 36/79 [00:02<00:02, 19.71it/s]
 49%|     | 39/79 [00:02<00:01, 21.06it/s]
 53%|    | 42/79 [00:02<00:01, 22.38it/s]
 57%|    | 45/79 [00:02<00:01, 23.45it/s]
 61%|    | 48/79 [00:02<00:01, 24.06it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.63it/s]
 35%|      | 28/79 [00:01<00:03, 13.93it/s]
 39%|      | 31/79 [00:02<00:02, 16.13it/s]
 43%|     | 34/79 [00:02<00:02, 18.03it/s]
 47%|     | 37/79 [00:02<00:02, 19.65it/s]
 51%|     | 40/79 [00:02<00:01, 21.04it/s]
 54%|    | 43/79 [00:02<00:01, 22.08it/s]
 58%|    | 46/79 [00:02<00:01, 22.88it/s]
 62%|   | 49/79 [00:02<00:01, 23.66it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.43it/s]
 13%|        | 10/79 [00:01<00:20,  3.34it/s]
 16%|        | 13/79 [00:01<00:14,  4.52it/s]
 20%|        | 16/79 [00:01<00:10,  5.99it/s]
 24%|       | 19/79 [00:01<00:07,  7.79it/s]
 28%|       | 22/79 [00:01<00:05,  9.83it/s]
 32%|      | 25/79 [00:01<00:04, 12.06it/s]
 35%|      | 28/79 [00:01<00:03, 14.33it/s]
 39%|      | 31/79 [00:01<00:02, 16.45it/s]
 43%|     | 34/79 [00:02<00:02, 18.49it/s]
 47%|     | 37/79 [00:02<00:02, 20.26it/s]
 51%|     | 40/79 [00:02<00:01, 21.66it/s]
 54%|    | 43/79 [00:02<00:01, 22.59it/s]
 58%|    | 46/79 [00:02<00:01, 23.47it/s]
 62%|   | 49/79 [00:02<00:01, 24.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.33it/s]
 32%|      | 25/79 [00:01<00:04, 11.52it/s]
 35%|      | 28/79 [00:01<00:03, 13.86it/s]
 39%|      | 31/79 [00:02<00:02, 16.03it/s]
 43%|     | 34/79 [00:02<00:02, 18.08it/s]
 47%|     | 37/79 [00:02<00:02, 19.77it/s]
 51%|     | 40/79 [00:02<00:01, 21.29it/s]
 54%|    | 43/79 [00:02<00:01, 22.45it/s]
 58%|    | 46/79 [00:02<00:01, 23.17it/s]
 62%|   | 49/79 [00:02<00:01, 23.99it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.77it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:05,  9.52it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 14.01it/s]
 39%|      | 31/79 [00:02<00:02, 16.13it/s]
 43%|     | 34/79 [00:02<00:02, 18.22it/s]
 47%|     | 37/79 [00:02<00:02, 19.84it/s]
 51%|     | 40/79 [00:02<00:01, 21.24it/s]
 54%|    | 43/79 [00:02<00:01, 22.36it/s]
 58%|    | 46/79 [00:02<00:01, 23.22it/s]
 62%|   | 49/79 [00:02<00:01, 23.76it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.54it/s]
 28%|       | 22/79 [00:01<00:05,  9.53it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 14.04it/s]
 39%|      | 31/79 [00:02<00:02, 16.20it/s]
 43%|     | 34/79 [00:02<00:02, 18.23it/s]
 47%|     | 37/79 [00:02<00:02, 19.76it/s]
 51%|     | 40/79 [00:02<00:01, 21.13it/s]
 54%|    | 43/79 [00:02<00:01, 22.49it/s]
 58%|    | 46/79 [00:02<00:01, 23.28it/s]
 62%|   | 49/79 [00:02<00:01, 23.66it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.60it/s]
 32%|      | 25/79 [00:01<00:04, 11.80it/s]
 35%|      | 28/79 [00:01<00:03, 14.14it/s]
 39%|      | 31/79 [00:02<00:02, 16.47it/s]
 43%|     | 34/79 [00:02<00:02, 18.46it/s]
 47%|     | 37/79 [00:02<00:02, 20.35it/s]
 51%|     | 40/79 [00:02<00:01, 21.72it/s]
 54%|    | 43/79 [00:02<00:01, 22.85it/s]
 58%|    | 46/79 [00:02<00:01, 23.38it/s]
 62%|   | 49/79 [00:02<00:01, 23.99it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:15,  4.39it/s]
 20%|        | 16/79 [00:01<00:10,  5.85it/s]
 24%|       | 19/79 [00:01<00:07,  7.63it/s]
 28%|       | 22/79 [00:01<00:05,  9.67it/s]
 32%|      | 25/79 [00:01<00:04, 11.92it/s]
 35%|      | 28/79 [00:01<00:03, 14.24it/s]
 39%|      | 31/79 [00:01<00:02, 16.47it/s]
 43%|     | 34/79 [00:02<00:02, 18.48it/s]
 47%|     | 37/79 [00:02<00:02, 20.03it/s]
 51%|     | 40/79 [00:02<00:01, 21.51it/s]
 54%|    | 43/79 [00:02<00:01, 22.58it/s]
 58%|    | 46/79 [00:02<00:01, 23.28it/s]
 62%|   | 49/79 [00:02<00:01, 22.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.83it/s]
 24%|       | 19/79 [00:01<00:07,  7.57it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.82it/s]
 35%|      | 28/79 [00:01<00:03, 14.23it/s]
 39%|      | 31/79 [00:02<00:02, 16.35it/s]
 43%|     | 34/79 [00:02<00:02, 18.51it/s]
 47%|     | 37/79 [00:02<00:02, 20.22it/s]
 51%|     | 40/79 [00:02<00:01, 21.61it/s]
 54%|    | 43/79 [00:02<00:01, 22.73it/s]
 58%|    | 46/79 [00:02<00:01, 23.35it/s]
 62%|   | 49/79 [00:02<00:01, 23.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.23it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.41it/s]
 32%|      | 25/79 [00:01<00:04, 11.62it/s]
 35%|      | 28/79 [00:01<00:03, 13.93it/s]
 39%|      | 31/79 [00:02<00:02, 16.23it/s]
 43%|     | 34/79 [00:02<00:02, 18.11it/s]
 47%|     | 37/79 [00:02<00:02, 19.85it/s]
 51%|     | 40/79 [00:02<00:01, 20.99it/s]
 54%|    | 43/79 [00:02<00:01, 21.86it/s]
 58%|    | 46/79 [00:02<00:01, 23.06it/s]
 62%|   | 49/79 [00:02<00:01, 23.57it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.78it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:05,  9.54it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 14.01it/s]
 39%|      | 31/79 [00:02<00:02, 16.23it/s]
 43%|     | 34/79 [00:02<00:02, 18.17it/s]
 47%|     | 37/79 [00:02<00:02, 19.69it/s]
 51%|     | 40/79 [00:02<00:01, 21.20it/s]
 54%|    | 43/79 [00:02<00:01, 22.28it/s]
 58%|    | 46/79 [00:02<00:01, 23.06it/s]
 62%|   | 49/79 [00:02<00:01, 23.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.44it/s]
 35%|      | 28/79 [00:01<00:03, 13.71it/s]
 39%|      | 31/79 [00:02<00:03, 15.98it/s]
 43%|     | 34/79 [00:02<00:02, 18.01it/s]
 47%|     | 37/79 [00:02<00:02, 19.78it/s]
 51%|     | 40/79 [00:02<00:01, 21.18it/s]
 54%|    | 43/79 [00:02<00:01, 22.22it/s]
 58%|    | 46/79 [00:02<00:01, 22.89it/s]
 62%|   | 49/79 [00:02<00:01, 23.69it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:07,  7.51it/s]
 28%|       | 22/79 [00:01<00:05,  9.51it/s]
 32%|      | 25/79 [00:01<00:04, 11.70it/s]
 35%|      | 28/79 [00:01<00:03, 13.97it/s]
 39%|      | 31/79 [00:02<00:02, 16.18it/s]
 43%|     | 34/79 [00:02<00:02, 18.25it/s]
 47%|     | 37/79 [00:02<00:02, 20.01it/s]
 51%|     | 40/79 [00:02<00:01, 21.17it/s]
 54%|    | 43/79 [00:02<00:01, 22.20it/s]
 58%|    | 46/79 [00:02<00:01, 23.16it/s]
 62%|   | 49/79 [00:02<00:01, 23.68it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.39it/s]
 32%|      | 25/79 [00:01<00:04, 11.62it/s]
 35%|      | 28/79 [00:01<00:03, 13.77it/s]
 39%|      | 31/79 [00:02<00:02, 16.02it/s]
 43%|     | 34/79 [00:02<00:02, 17.99it/s]
 47%|     | 37/79 [00:02<00:02, 19.86it/s]
 51%|     | 40/79 [00:02<00:01, 21.24it/s]
 54%|    | 43/79 [00:02<00:01, 22.06it/s]
 58%|    | 46/79 [00:02<00:01, 22.94it/s]
 62%|   | 49/79 [00:02<00:01, 23.68it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.57it/s]
 24%|       | 19/79 [00:01<00:08,  7.26it/s]
 28%|       | 22/79 [00:01<00:06,  9.23it/s]
 32%|      | 25/79 [00:01<00:04, 11.38it/s]
 35%|      | 28/79 [00:01<00:03, 13.72it/s]
 39%|      | 31/79 [00:02<00:03, 15.89it/s]
 43%|     | 34/79 [00:02<00:02, 17.81it/s]
 47%|     | 37/79 [00:02<00:02, 19.36it/s]
 51%|     | 40/79 [00:02<00:01, 20.96it/s]
 54%|    | 43/79 [00:02<00:01, 22.30it/s]
 58%|    | 46/79 [00:02<00:01, 22.85it/s]
 62%|   | 49/79 [00:02<00:01, 23.60it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.57it/s]
 35%|      | 28/79 [00:01<00:03, 13.84it/s]
 39%|      | 31/79 [00:02<00:03, 15.92it/s]
 43%|     | 34/79 [00:02<00:02, 17.88it/s]
 47%|     | 37/79 [00:02<00:02, 19.53it/s]
 51%|     | 40/79 [00:02<00:01, 20.93it/s]
 54%|    | 43/79 [00:02<00:01, 21.90it/s]
 58%|    | 46/79 [00:02<00:01, 22.50it/s]
 62%|   | 49/79 [00:02<00:01, 23.19it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.36it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  8.97it/s]
 32%|      | 25/79 [00:01<00:04, 11.17it/s]
 35%|      | 28/79 [00:01<00:03, 13.48it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.89it/s]
 47%|     | 37/79 [00:02<00:02, 19.78it/s]
 51%|     | 40/79 [00:02<00:01, 21.21it/s]
 54%|    | 43/79 [00:02<00:01, 22.36it/s]
 58%|    | 46/79 [00:02<00:01, 23.29it/s]
 62%|   | 49/79 [00:02<00:01, 23.89it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  4%|         | 3/79 [00:01<00:49,  1.54it/s]
  8%|         | 6/79 [00:01<00:33,  2.15it/s]
 11%|        | 9/79 [00:01<00:23,  2.96it/s]
 15%|        | 12/79 [00:01<00:16,  4.02it/s]
 19%|        | 15/79 [00:01<00:11,  5.38it/s]
 23%|       | 18/79 [00:01<00:08,  7.05it/s]
 27%|       | 21/79 [00:01<00:06,  8.99it/s]
 30%|       | 24/79 [00:01<00:04, 11.09it/s]
 34%|      | 27/79 [00:01<00:03, 13.22it/s]
 38%|      | 30/79 [00:02<00:03, 15.40it/s]
 42%|     | 33/79 [00:02<00:02, 17.44it/s]
 46%|     | 36/79 [00:02<00:02, 19.21it/s]
 49%|     | 39/79 [00:02<00:01, 20.70it/s]
 53%|    | 42/79 [00:02<00:01, 21.94it/s]
 57%|    | 45/79 [00:02<00:01, 22.98it/s]
 61%|    | 48/79 [00:02<00:01, 23.70it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:00<00:46,  1.64it/s]
  8%|         | 6/79 [00:01<00:32,  2.27it/s]
 11%|        | 9/79 [00:01<00:22,  3.11it/s]
 15%|        | 12/79 [00:01<00:15,  4.22it/s]
 19%|        | 15/79 [00:01<00:11,  5.62it/s]
 23%|       | 18/79 [00:01<00:08,  7.33it/s]
 27%|       | 21/79 [00:01<00:06,  9.31it/s]
 30%|       | 24/79 [00:01<00:04, 11.43it/s]
 34%|      | 27/79 [00:01<00:03, 13.63it/s]
 38%|      | 30/79 [00:02<00:03, 15.70it/s]
 42%|     | 33/79 [00:02<00:02, 17.64it/s]
 46%|     | 36/79 [00:02<00:02, 19.11it/s]
 49%|     | 39/79 [00:02<00:01, 20.37it/s]
 53%|    | 42/79 [00:02<00:01, 21.42it/s]
 57%|    | 45/79 [00:02<00:01, 22.43it/s]
 61%|    | 48/79 [00:02<00:01, 22.94it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.26it/s]
 28%|       | 22/79 [00:01<00:06,  9.25it/s]
 32%|      | 25/79 [00:01<00:04, 11.41it/s]
 35%|      | 28/79 [00:01<00:03, 13.66it/s]
 39%|      | 31/79 [00:02<00:03, 15.81it/s]
 43%|     | 34/79 [00:02<00:02, 17.82it/s]
 47%|     | 37/79 [00:02<00:02, 19.26it/s]
 51%|     | 40/79 [00:02<00:01, 20.65it/s]
 54%|    | 43/79 [00:02<00:01, 21.69it/s]
 58%|    | 46/79 [00:02<00:01, 22.66it/s]
 62%|   | 49/79 [00:02<00:01, 23.35it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.47it/s]
 39%|      | 31/79 [00:02<00:03, 15.65it/s]
 43%|     | 34/79 [00:02<00:02, 17.64it/s]
 47%|     | 37/79 [00:02<00:02, 19.37it/s]
 51%|     | 40/79 [00:02<00:01, 20.64it/s]
 54%|    | 43/79 [00:02<00:01, 21.91it/s]
 58%|    | 46/79 [00:02<00:01, 22.79it/s]
 62%|   | 49/79 [00:02<00:01, 23.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  8.94it/s]
 32%|      | 25/79 [00:01<00:04, 11.09it/s]
 35%|      | 28/79 [00:01<00:03, 13.28it/s]
 39%|      | 31/79 [00:02<00:03, 15.54it/s]
 43%|     | 34/79 [00:02<00:02, 17.65it/s]
 47%|     | 37/79 [00:02<00:02, 19.33it/s]
 51%|     | 40/79 [00:02<00:01, 20.70it/s]
 54%|    | 43/79 [00:02<00:01, 21.74it/s]
 58%|    | 46/79 [00:02<00:01, 22.49it/s]
 62%|   | 49/79 [00:02<00:01, 23.27it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 28%|       | 22/79 [00:01<00:06,  9.17it/s]
 32%|      | 25/79 [00:01<00:04, 11.35it/s]
 35%|      | 28/79 [00:01<00:03, 13.65it/s]
 39%|      | 31/79 [00:02<00:03, 15.90it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.56it/s]
 51%|     | 40/79 [00:02<00:01, 21.04it/s]
 54%|    | 43/79 [00:02<00:01, 22.31it/s]
 58%|    | 46/79 [00:02<00:01, 23.23it/s]
 62%|   | 49/79 [00:02<00:01, 24.05it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.22it/s]
 32%|      | 25/79 [00:01<00:04, 11.36it/s]
 35%|      | 28/79 [00:01<00:03, 13.55it/s]
 39%|      | 31/79 [00:02<00:03, 15.67it/s]
 43%|     | 34/79 [00:02<00:02, 17.63it/s]
 47%|     | 37/79 [00:02<00:02, 19.32it/s]
 51%|     | 40/79 [00:02<00:01, 20.63it/s]
 54%|    | 43/79 [00:02<00:01, 21.77it/s]
 58%|    | 46/79 [00:02<00:01, 22.68it/s]
 62%|   | 49/79 [00:02<00:01, 23.28it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.20it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.34it/s]
 35%|      | 28/79 [00:01<00:03, 13.59it/s]
 39%|      | 31/79 [00:02<00:03, 15.77it/s]
 43%|     | 34/79 [00:02<00:02, 17.77it/s]
 47%|     | 37/79 [00:02<00:02, 19.44it/s]
 51%|     | 40/79 [00:02<00:01, 20.94it/s]
 54%|    | 43/79 [00:02<00:01, 22.10it/s]
 58%|    | 46/79 [00:02<00:01, 22.96it/s]
 62%|   | 49/79 [00:02<00:01, 23.84it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.23it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.31it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.57it/s]
 39%|      | 31/79 [00:02<00:03, 15.65it/s]
 43%|     | 34/79 [00:02<00:02, 17.54it/s]
 47%|     | 37/79 [00:02<00:02, 19.09it/s]
 51%|     | 40/79 [00:02<00:01, 20.42it/s]
 54%|    | 43/79 [00:02<00:01, 21.44it/s]
 58%|    | 46/79 [00:02<00:01, 22.48it/s]
 62%|   | 49/79 [00:02<00:01, 23.25it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:01<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.42it/s]
 35%|      | 28/79 [00:01<00:03, 13.55it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.43it/s]
 47%|     | 37/79 [00:02<00:02, 18.96it/s]
 51%|     | 40/79 [00:02<00:01, 20.31it/s]
 54%|    | 43/79 [00:02<00:01, 21.20it/s]
 58%|    | 46/79 [00:02<00:01, 22.13it/s]
 62%|   | 49/79 [00:02<00:01, 22.67it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  4%|         | 3/79 [00:00<00:48,  1.58it/s]
  8%|         | 6/79 [00:01<00:33,  2.19it/s]
 11%|        | 9/79 [00:01<00:23,  3.02it/s]
 15%|        | 12/79 [00:01<00:16,  4.10it/s]
 19%|        | 15/79 [00:01<00:11,  5.46it/s]
 23%|       | 18/79 [00:01<00:08,  7.13it/s]
 27%|       | 21/79 [00:01<00:06,  9.09it/s]
 30%|       | 24/79 [00:01<00:04, 11.19it/s]
 34%|      | 27/79 [00:01<00:03, 13.34it/s]
 38%|      | 30/79 [00:02<00:03, 15.47it/s]
 42%|     | 33/79 [00:02<00:02, 17.37it/s]
 46%|     | 36/79 [00:02<00:02, 18.98it/s]
 49%|     | 39/79 [00:02<00:02, 19.93it/s]
 53%|    | 42/79 [00:02<00:01, 21.20it/s]
 57%|    | 45/79 [00:02<00:01, 21.86it/s]
 61%|    | 48/79 [00:02<00:01, 22.39it/s]
 65%|   | 51/79 [00:02<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.09it/s]
 20%|        | 16/79 [00:01<00:11,  5.45it/s]
 24%|       | 19/79 [00:01<00:08,  7.14it/s]
 28%|       | 22/79 [00:01<00:06,  9.03it/s]
 32%|      | 25/79 [00:01<00:04, 11.15it/s]
 35%|      | 28/79 [00:01<00:03, 13.36it/s]
 39%|      | 31/79 [00:02<00:03, 15.62it/s]
 43%|     | 34/79 [00:02<00:02, 17.45it/s]
 47%|     | 37/79 [00:02<00:02, 19.18it/s]
 51%|     | 40/79 [00:02<00:01, 20.53it/s]
 54%|    | 43/79 [00:02<00:01, 21.52it/s]
 58%|    | 46/79 [00:02<00:01, 22.23it/s]
 62%|   | 49/79 [00:02<00:01, 22.65it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.01it/s]
 28%|       | 22/79 [00:01<00:06,  8.95it/s]
 32%|      | 25/79 [00:01<00:04, 11.04it/s]
 35%|      | 28/79 [00:02<00:03, 13.15it/s]
 39%|      | 31/79 [00:02<00:03, 15.20it/s]
 43%|     | 34/79 [00:02<00:02, 17.10it/s]
 47%|     | 37/79 [00:02<00:02, 18.75it/s]
 51%|     | 40/79 [00:02<00:01, 19.80it/s]
 54%|    | 43/79 [00:02<00:01, 20.91it/s]
 58%|    | 46/79 [00:02<00:01, 21.91it/s]
 62%|   | 49/79 [00:02<00:01, 22.71it/s]
 66%|   | 52/79 [00:03<00:01, 24.81it/s]
 70%|   | 55/79 [00:02<00:00, 25.54it/s]
 73%|  | 58/79 [00:02<00:00, 25.54it/s]
 77%|  | 61/79 [00:03<00:00, 26.02it/s]
 81%|  | 64/79 [00:03<00:00, 26.08it/s]
 85%| | 67/79 [00:03<00:00, 26.18it/s]
 89%| | 70/79 [00:03<00:00, 25.82it/s]
 92%|| 73/79 [00:03<00:00, 26.44it/s]
 96%|| 76/79 [00:03<00:00, 26.91it/s]
100%|| 79/79 [00:03<00:00, 27.70it/s]
, 24.56it/s]
 70%|   | 55/79 [00:02<00:00, 24.87it/s]
 73%|  | 58/79 [00:03<00:00, 24.92it/s]
 77%|  | 61/79 [00:03<00:00, 25.23it/s]
 81%|  | 64/79 [00:03<00:00, 25.37it/s]
 85%| | 67/79 [00:03<00:00, 25.84it/s]
 89%| | 70/79 [00:03<00:00, 26.08it/s]
 92%|| 73/79 [00:03<00:00, 26.29it/s]
 96%|| 76/79 [00:03<00:00, 26.81it/s]
100%|| 79/79 [00:03<00:00, 27.67it/s]
, 23.98it/s]
 70%|   | 55/79 [00:02<00:00, 24.50it/s]
 73%|  | 58/79 [00:03<00:00, 25.13it/s]
 77%|  | 61/79 [00:03<00:00, 25.00it/s]
 81%|  | 64/79 [00:03<00:00, 25.28it/s]
 85%| | 67/79 [00:03<00:00, 25.17it/s]
 89%| | 70/79 [00:03<00:00, 25.57it/s]
 92%|| 73/79 [00:03<00:00, 25.71it/s]
 97%|| 77/79 [00:03<00:00, 26.71it/s]
100%|| 79/79 [00:03<00:00, 19.95it/s]
, 24.51it/s]
 70%|   | 55/79 [00:02<00:00, 25.08it/s]
 73%|  | 58/79 [00:03<00:00, 25.33it/s]
 77%|  | 61/79 [00:03<00:00, 25.58it/s]
 81%|  | 64/79 [00:03<00:00, 25.75it/s]
 85%| | 67/79 [00:03<00:00, 26.04it/s]
 89%| | 70/79 [00:03<00:00, 25.85it/s]
 92%|| 73/79 [00:03<00:00, 25.85it/s]
 96%|| 76/79 [00:03<00:00, 26.42it/s]
100%|| 79/79 [00:03<00:00, 27.17it/s]
, 24.27it/s]
 70%|   | 55/79 [00:02<00:00, 24.75it/s]
 73%|  | 58/79 [00:03<00:00, 24.92it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 25.07it/s]
 85%| | 67/79 [00:03<00:00, 25.15it/s]
 89%| | 70/79 [00:03<00:00, 25.26it/s]
 92%|| 73/79 [00:03<00:00, 25.76it/s]
 96%|| 76/79 [00:03<00:00, 26.38it/s]
100%|| 79/79 [00:03<00:00, 27.28it/s]
, 23.56it/s]
 70%|   | 55/79 [00:02<00:00, 24.24it/s]
 73%|  | 58/79 [00:03<00:00, 24.68it/s]
 77%|  | 61/79 [00:03<00:00, 25.06it/s]
 81%|  | 64/79 [00:03<00:00, 25.05it/s]
 85%| | 67/79 [00:03<00:00, 25.33it/s]
 89%| | 70/79 [00:03<00:00, 25.44it/s]
 92%|| 73/79 [00:03<00:00, 25.72it/s]
 96%|| 76/79 [00:03<00:00, 26.35it/s]
100%|| 79/79 [00:03<00:00, 27.29it/s]
, 24.37it/s]
 70%|   | 55/79 [00:02<00:00, 24.37it/s]
 73%|  | 58/79 [00:03<00:00, 24.78it/s]
 77%|  | 61/79 [00:03<00:00, 24.93it/s]
 81%|  | 64/79 [00:03<00:00, 24.79it/s]
 85%| | 67/79 [00:03<00:00, 24.89it/s]
 89%| | 70/79 [00:03<00:00, 25.00it/s]
 92%|| 73/79 [00:03<00:00, 25.44it/s]
 96%|| 76/79 [00:03<00:00, 26.06it/s]
100%|| 79/79 [00:03<00:00, 26.95it/s]
, 24.12it/s]
 70%|   | 55/79 [00:02<00:00, 24.59it/s]
 73%|  | 58/79 [00:03<00:00, 24.62it/s]
 77%|  | 61/79 [00:03<00:00, 24.49it/s]
 81%|  | 64/79 [00:03<00:00, 24.73it/s]
 85%| | 67/79 [00:03<00:00, 25.00it/s]
 89%| | 70/79 [00:03<00:00, 25.06it/s]
 92%|| 73/79 [00:03<00:00, 25.42it/s]
 96%|| 76/79 [00:03<00:00, 26.26it/s]
100%|| 79/79 [00:03<00:00, 27.16it/s]
, 24.40it/s]
 70%|   | 55/79 [00:02<00:00, 24.76it/s]
 73%|  | 58/79 [00:03<00:00, 25.22it/s]
 77%|  | 61/79 [00:03<00:00, 25.20it/s]
 81%|  | 64/79 [00:03<00:00, 25.49it/s]
 85%| | 67/79 [00:03<00:00, 25.66it/s]
 89%| | 70/79 [00:03<00:00, 25.68it/s]
 92%|| 73/79 [00:03<00:00, 26.17it/s]
 96%|| 76/79 [00:03<00:00, 26.82it/s]
100%|| 79/79 [00:03<00:00, 27.53it/s]
, 24.11it/s]
 70%|   | 55/79 [00:03<00:00, 24.59it/s]
 73%|  | 58/79 [00:03<00:00, 24.76it/s]
 77%|  | 61/79 [00:03<00:00, 24.91it/s]
 81%|  | 64/79 [00:03<00:00, 24.97it/s]
 85%| | 67/79 [00:03<00:00, 25.20it/s]
 89%| | 70/79 [00:03<00:00, 25.49it/s]
 92%|| 73/79 [00:03<00:00, 25.69it/s]
 96%|| 76/79 [00:03<00:00, 26.24it/s]
100%|| 79/79 [00:03<00:00, 27.00it/s]
36it/s]
 68%|   | 54/79 [00:02<00:01, 24.73it/s]
 72%|  | 57/79 [00:03<00:00, 24.87it/s]
 76%|  | 60/79 [00:03<00:00, 24.72it/s]
 80%|  | 63/79 [00:03<00:00, 24.60it/s]
 84%| | 66/79 [00:03<00:00, 24.97it/s]
 87%| | 69/79 [00:03<00:00, 24.81it/s]
 91%| | 72/79 [00:03<00:00, 25.05it/s]
 95%|| 75/79 [00:03<00:00, 25.67it/s]
 99%|| 78/79 [00:03<00:00, 26.34it/s]
100%|| 79/79 [00:04<00:00, 19.71it/s]
, 24.07it/s]
 70%|   | 55/79 [00:02<00:00, 24.19it/s]
 73%|  | 58/79 [00:03<00:00, 24.68it/s]
 77%|  | 61/79 [00:03<00:00, 24.63it/s]
 81%|  | 64/79 [00:03<00:00, 24.66it/s]
 85%| | 67/79 [00:03<00:00, 24.68it/s]
 89%| | 70/79 [00:03<00:00, 24.88it/s]
 92%|| 73/79 [00:03<00:00, 24.89it/s]
 96%|| 76/79 [00:03<00:00, 25.81it/s]
100%|| 79/79 [00:03<00:00, 26.68it/s]
, 24.18it/s]
 70%|   | 55/79 [00:02<00:00, 24.51it/s]
 73%|  | 58/79 [00:03<00:00, 25.00it/s]
 77%|  | 61/79 [00:03<00:00, 24.89it/s]
 81%|  | 64/79 [00:03<00:00, 25.02it/s]
 85%| | 67/79 [00:03<00:00, 24.94it/s]
 89%| | 70/79 [00:03<00:00, 25.01it/s]
 92%|| 73/79 [00:03<00:00, 25.20it/s]
 96%|| 76/79 [00:03<00:00, 25.91it/s]
100%|| 79/79 [00:03<00:00, 26.81it/s]
, 23.97it/s]
 70%|   | 55/79 [00:02<00:00, 24.58it/s]
 73%|  | 58/79 [00:03<00:00, 24.74it/s]
 77%|  | 61/79 [00:03<00:00, 24.47it/s]
 81%|  | 64/79 [00:03<00:00, 24.47it/s]
 85%| | 67/79 [00:03<00:00, 24.78it/s]
 89%| | 70/79 [00:03<00:00, 24.81it/s]
 92%|| 73/79 [00:03<00:00, 25.14it/s]
 96%|| 76/79 [00:03<00:00, 25.73it/s]
100%|| 79/79 [00:03<00:00, 26.58it/s]
, 24.71it/s]
 70%|   | 55/79 [00:03<00:00, 24.93it/s]
 73%|  | 58/79 [00:03<00:00, 25.12it/s]
 77%|  | 61/79 [00:03<00:00, 25.47it/s]
 81%|  | 64/79 [00:03<00:00, 25.67it/s]
 85%| | 67/79 [00:03<00:00, 25.77it/s]
 89%| | 70/79 [00:03<00:00, 26.07it/s]
 92%|| 73/79 [00:03<00:00, 25.78it/s]
 96%|| 76/79 [00:03<00:00, 26.62it/s]
100%|| 79/79 [00:03<00:00, 26.77it/s]
, 24.02it/s]
 70%|   | 55/79 [00:03<00:00, 24.60it/s]
 73%|  | 58/79 [00:03<00:00, 24.83it/s]
 77%|  | 61/79 [00:03<00:00, 24.79it/s]
 81%|  | 64/79 [00:03<00:00, 24.71it/s]
 85%| | 67/79 [00:03<00:00, 24.93it/s]
 89%| | 70/79 [00:03<00:00, 25.09it/s]
 92%|| 73/79 [00:03<00:00, 25.04it/s]
 96%|| 76/79 [00:03<00:00, 25.76it/s]
100%|| 79/79 [00:03<00:00, 26.62it/s]
, 24.27it/s]
 70%|   | 55/79 [00:03<00:00, 24.32it/s]
 73%|  | 58/79 [00:03<00:00, 24.80it/s]
 77%|  | 61/79 [00:03<00:00, 24.39it/s]
 81%|  | 64/79 [00:03<00:00, 24.65it/s]
 85%| | 67/79 [00:03<00:00, 24.87it/s]
 89%| | 70/79 [00:03<00:00, 25.04it/s]
 92%|| 73/79 [00:03<00:00, 25.17it/s]
 96%|| 76/79 [00:03<00:00, 25.95it/s]
100%|| 79/79 [00:03<00:00, 26.80it/s]
, 23.85it/s]
 70%|   | 55/79 [00:03<00:00, 24.05it/s]
 73%|  | 58/79 [00:03<00:00, 24.12it/s]
 77%|  | 61/79 [00:03<00:00, 24.57it/s]
 81%|  | 64/79 [00:03<00:00, 24.59it/s]
 85%| | 67/79 [00:03<00:00, 24.68it/s]
 89%| | 70/79 [00:03<00:00, 24.59it/s]
 92%|| 73/79 [00:03<00:00, 25.14it/s]
 96%|| 76/79 [00:03<00:00, 25.76it/s]
100%|| 79/79 [00:03<00:00, 26.79it/s]
, 24.52it/s]
 70%|   | 55/79 [00:02<00:00, 24.92it/s]
 73%|  | 58/79 [00:03<00:00, 25.07it/s]
 77%|  | 61/79 [00:03<00:00, 21.69it/s]
 81%|  | 64/79 [00:03<00:00, 21.75it/s]
 85%| | 67/79 [00:03<00:00, 22.75it/s]
 89%| | 70/79 [00:03<00:00, 23.32it/s]
 92%|| 73/79 [00:03<00:00, 24.32it/s]
 96%|| 76/79 [00:03<00:00, 25.11it/s]
100%|| 79/79 [00:03<00:00, 26.35it/s]
, 23.45it/s]
 70%|   | 55/79 [00:03<00:00, 24.01it/s]
 73%|  | 58/79 [00:03<00:00, 24.18it/s]
 77%|  | 61/79 [00:03<00:00, 24.87it/s]
 81%|  | 64/79 [00:03<00:00, 24.88it/s]
 85%| | 67/79 [00:03<00:00, 25.11it/s]
 89%| | 70/79 [00:03<00:00, 25.10it/s]
 92%|| 73/79 [00:03<00:00, 25.59it/s]
 96%|| 76/79 [00:03<00:00, 26.32it/s]
100%|| 79/79 [00:03<00:00, 27.21it/s]
, 24.23it/s]
 70%|   | 55/79 [00:03<00:00, 24.45it/s]
 73%|  | 58/79 [00:03<00:00, 24.88it/s]
 77%|  | 61/79 [00:03<00:00, 25.19it/s]
 81%|  | 64/79 [00:03<00:00, 25.08it/s]
 85%| | 67/79 [00:03<00:00, 25.32it/s]
 89%| | 70/79 [00:03<00:00, 25.19it/s]
 92%|| 73/79 [00:03<00:00, 25.66it/s]
 96%|| 76/79 [00:03<00:00, 26.29it/s]
100%|| 79/79 [00:03<00:00, 27.27it/s]
00it/s]
 68%|   | 54/79 [00:03<00:01, 24.57it/s]
 72%|  | 57/79 [00:03<00:00, 24.47it/s]
 76%|  | 60/79 [00:03<00:00, 24.91it/s]
 80%|  | 63/79 [00:03<00:00, 25.10it/s]
 84%| | 66/79 [00:03<00:00, 25.42it/s]
 87%| | 69/79 [00:03<00:00, 25.22it/s]
 91%| | 72/79 [00:03<00:00, 25.59it/s]
 95%|| 75/79 [00:03<00:00, 26.35it/s]
100%|| 79/79 [00:03<00:00, 27.21it/s]
, 23.83it/s]
 70%|   | 55/79 [00:03<00:00, 24.15it/s]
 73%|  | 58/79 [00:03<00:00, 24.48it/s]
 77%|  | 61/79 [00:03<00:00, 24.73it/s]
 81%|  | 64/79 [00:03<00:00, 24.81it/s]
 85%| | 67/79 [00:03<00:00, 24.99it/s]
 89%| | 70/79 [00:03<00:00, 25.07it/s]
 92%|| 73/79 [00:03<00:00, 25.42it/s]
 96%|| 76/79 [00:03<00:00, 25.93it/s]
100%|| 79/79 [00:03<00:00, 26.74it/s]
, 23.57it/s]
 70%|   | 55/79 [00:03<00:01, 23.91it/s]
 73%|  | 58/79 [00:03<00:00, 24.31it/s]
 77%|  | 61/79 [00:03<00:00, 24.57it/s]
 81%|  | 64/79 [00:03<00:00, 24.67it/s]
 85%| | 67/79 [00:03<00:00, 24.91it/s]
 89%| | 70/79 [00:03<00:00, 24.98it/s]
 92%|| 73/79 [00:03<00:00, 25.16it/s]
 96%|| 76/79 [00:03<00:00, 25.78it/s]
100%|| 79/79 [00:03<00:00, 26.65it/s]
, 23.59it/s]
 70%|   | 55/79 [00:03<00:00, 24.19it/s]
 73%|  | 58/79 [00:03<00:00, 24.54it/s]
 77%|  | 61/79 [00:03<00:00, 24.65it/s]
 81%|  | 64/79 [00:03<00:00, 24.67it/s]
 85%| | 67/79 [00:03<00:00, 25.02it/s]
 89%| | 70/79 [00:03<00:00, 24.79it/s]
 92%|| 73/79 [00:03<00:00, 24.95it/s]
 96%|| 76/79 [00:03<00:00, 25.55it/s]
100%|| 79/79 [00:03<00:00, 26.37it/s]
, 23.40it/s]
 70%|   | 55/79 [00:03<00:01, 23.91it/s]
 73%|  | 58/79 [00:03<00:00, 24.11it/s]
 77%|  | 61/79 [00:03<00:00, 24.48it/s]
 81%|  | 64/79 [00:03<00:00, 24.71it/s]
 85%| | 67/79 [00:03<00:00, 24.95it/s]
 89%| | 70/79 [00:03<00:00, 24.88it/s]
 92%|| 73/79 [00:03<00:00, 25.17it/s]
 96%|| 76/79 [00:03<00:00, 25.58it/s]
100%|| 79/79 [00:04<00:00, 26.21it/s]
, 23.06it/s]
 70%|   | 55/79 [00:03<00:01, 23.40it/s]
 73%|  | 58/79 [00:03<00:00, 24.04it/s]
 77%|  | 61/79 [00:03<00:00, 24.24it/s]
 81%|  | 64/79 [00:03<00:00, 24.49it/s]
 85%| | 67/79 [00:03<00:00, 24.58it/s]
 89%| | 70/79 [00:03<00:00, 24.73it/s]
 92%|| 73/79 [00:03<00:00, 25.07it/s]
 96%|| 76/79 [00:03<00:00, 25.78it/s]
100%|| 79/79 [00:04<00:00, 26.55it/s]
48it/s]
 68%|   | 54/79 [00:03<00:01, 23.81it/s]
 72%|  | 57/79 [00:03<00:00, 24.12it/s]
 76%|  | 60/79 [00:03<00:00, 24.46it/s]
 80%|  | 63/79 [00:03<00:00, 24.53it/s]
 84%| | 66/79 [00:03<00:00, 24.74it/s]
 87%| | 69/79 [00:03<00:00, 24.99it/s]
 91%| | 72/79 [00:03<00:00, 24.73it/s]
 95%|| 75/79 [00:03<00:00, 25.43it/s]
 99%|| 78/79 [00:03<00:00, 25.86it/s]
100%|| 79/79 [00:04<00:00, 19.30it/s]
, 24.02it/s]
 70%|   | 55/79 [00:03<00:00, 24.12it/s]
 73%|  | 58/79 [00:03<00:00, 23.92it/s]
 77%|  | 61/79 [00:03<00:00, 24.23it/s]
 81%|  | 64/79 [00:03<00:00, 24.21it/s]
 85%| | 67/79 [00:03<00:00, 23.99it/s]
 89%| | 70/79 [00:03<00:00, 24.11it/s]
 92%|| 73/79 [00:03<00:00, 24.72it/s]
 96%|| 76/79 [00:03<00:00, 25.43it/s]
100%|| 79/79 [00:03<00:00, 26.47it/s]
, 23.25it/s]
 70%|   | 55/79 [00:03<00:01, 23.34it/s]
 73%|  | 58/79 [00:03<00:00, 23.33it/s]
 77%|  | 61/79 [00:03<00:00, 23.62it/s]
 81%|  | 64/79 [00:03<00:00, 23.82it/s]
 85%| | 67/79 [00:03<00:00, 24.24it/s]
 89%| | 70/79 [00:03<00:00, 24.17it/s]
 92%|| 73/79 [00:03<00:00, 24.73it/s]
 96%|| 76/79 [00:03<00:00, 25.43it/s]
100%|| 79/79 [00:04<00:00, 26.31it/s]
99it/s]
 68%|   | 54/79 [00:03<00:01, 23.42it/s]
 72%|  | 57/79 [00:03<00:00, 23.57it/s]
 76%|  | 60/79 [00:03<00:00, 23.50it/s]
 80%|  | 63/79 [00:03<00:00, 23.83it/s]
 84%| | 66/79 [00:03<00:00, 23.95it/s]
 87%| | 69/79 [00:03<00:00, 24.04it/s]
 91%| | 72/79 [00:03<00:00, 23.86it/s]
 95%|| 75/79 [00:03<00:00, 24.85it/s]
 99%|| 78/79 [00:04<00:00, 25.30it/s]
100%|| 79/79 [00:04<00:00, 18.97it/s]
, 22.80it/s]
 70%|   | 55/79 [00:03<00:01, 23.18it/s]
 73%|  | 58/79 [00:03<00:00, 23.63it/s]
 77%|  | 61/79 [00:03<00:00, 23.59it/s]
 81%|  | 64/79 [00:03<00:00, 23.52it/s]
 85%| | 67/79 [00:03<00:00, 23.53it/s]
 89%| | 70/79 [00:03<00:00, 23.98it/s]
 92%|| 73/79 [00:03<00:00, 24.33it/s]
 96%|| 76/79 [00:04<00:00, 25.11it/s]
100%|| 79/79 [00:04<00:00, 26.09it/s]
2020-06-23 17:04:07,395 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.190867 (0.026821548461914063 s / img per device, on 32 devices)
2020-06-23 17:04:07,416 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:04:07,416 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:04:07,436 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592957058449, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 9, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592957058450, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 9}}

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336

Grad overflow on iteration  7336

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0


Grad overflow on iteration  7336

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0


Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
2020-06-23 17:04:18,891 maskrcnn_benchmark.trainer INFO: eta: 1:08:42  iter: 7340  loss: 0.6340 (0.7860)  loss_classifier: 0.2250 (0.2889)  loss_box_reg: 0.0997 (0.1257)  loss_mask: 0.2786 (0.3088)  loss_objectness: 0.0214 (0.0407)  loss_rpn_box_reg: 0.0124 (0.0218)  time: 0.1075 (0.1262)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5148
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:04:21,079 maskrcnn_benchmark.trainer INFO: eta: 1:08:38  iter: 7360  loss: 0.6329 (0.7856)  loss_classifier: 0.2273 (0.2887)  loss_box_reg: 0.0999 (0.1257)  loss_mask: 0.2501 (0.3087)  loss_objectness: 0.0153 (0.0407)  loss_rpn_box_reg: 0.0084 (0.0218)  time: 0.1084 (0.1262)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5148
2020-06-23 17:04:23,237 maskrcnn_benchmark.trainer INFO: eta: 1:08:34  iter: 7380  loss: 0.6485 (0.7853)  loss_classifier: 0.2411 (0.2886)  loss_box_reg: 0.1111 (0.1257)  loss_mask: 0.2820 (0.3086)  loss_objectness: 0.0155 (0.0407)  loss_rpn_box_reg: 0.0068 (0.0218)  time: 0.1079 (0.1261)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5148
2020-06-23 17:04:25,396 maskrcnn_benchmark.trainer INFO: eta: 1:08:30  iter: 7400  loss: 0.6573 (0.7850)  loss_classifier: 0.2537 (0.2885)  loss_box_reg: 0.1032 (0.1256)  loss_mask: 0.2624 (0.3085)  loss_objectness: 0.0218 (0.0406)  loss_rpn_box_reg: 0.0084 (0.0218)  time: 0.1077 (0.1261)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 17:04:27,543 maskrcnn_benchmark.trainer INFO: eta: 1:08:26  iter: 7420  loss: 0.5449 (0.7844)  loss_classifier: 0.1865 (0.2883)  loss_box_reg: 0.0751 (0.1255)  loss_mask: 0.2408 (0.3083)  loss_objectness: 0.0159 (0.0406)  loss_rpn_box_reg: 0.0076 (0.0218)  time: 0.1073 (0.1260)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5148
DONE (t=0.96s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 17:04:29,689 maskrcnn_benchmark.trainer INFO: eta: 1:08:21  iter: 7440  loss: 0.7138 (0.7842)  loss_classifier: 0.2442 (0.2881)  loss_box_reg: 0.1060 (0.1255)  loss_mask: 0.2829 (0.3082)  loss_objectness: 0.0226 (0.0406)  loss_rpn_box_reg: 0.0100 (0.0218)  time: 0.1066 (0.1260)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5148
DONE (t=1.92s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.29017
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.49658
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.30174
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.16460
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.31912
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.37695
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.26464
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.42826
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.45195
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27785
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.48800
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.57507
2020-06-23 17:04:31,849 maskrcnn_benchmark.trainer INFO: eta: 1:08:17  iter: 7460  loss: 0.6698 (0.7840)  loss_classifier: 0.2356 (0.2881)  loss_box_reg: 0.1182 (0.1254)  loss_mask: 0.2904 (0.3082)  loss_objectness: 0.0243 (0.0406)  loss_rpn_box_reg: 0.0134 (0.0218)  time: 0.1070 (0.1259)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5148
2020-06-23 17:04:34,000 maskrcnn_benchmark.trainer INFO: eta: 1:08:13  iter: 7480  loss: 0.5451 (0.7835)  loss_classifier: 0.1884 (0.2878)  loss_box_reg: 0.0717 (0.1253)  loss_mask: 0.2412 (0.3081)  loss_objectness: 0.0141 (0.0405)  loss_rpn_box_reg: 0.0073 (0.0218)  time: 0.1074 (0.1259)  data: 0.0013 (0.0187)  lr: 0.160000  max mem: 5148
2020-06-23 17:04:36,166 maskrcnn_benchmark.trainer INFO: eta: 1:08:09  iter: 7500  loss: 0.6175 (0.7832)  loss_classifier: 0.2342 (0.2877)  loss_box_reg: 0.1105 (0.1253)  loss_mask: 0.2735 (0.3079)  loss_objectness: 0.0192 (0.0405)  loss_rpn_box_reg: 0.0117 (0.0218)  time: 0.1074 (0.1258)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:04:38,331 maskrcnn_benchmark.trainer INFO: eta: 1:08:05  iter: 7520  loss: 0.6497 (0.7830)  loss_classifier: 0.2253 (0.2876)  loss_box_reg: 0.1176 (0.1253)  loss_mask: 0.2578 (0.3079)  loss_objectness: 0.0226 (0.0405)  loss_rpn_box_reg: 0.0134 (0.0218)  time: 0.1082 (0.1258)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5148
2020-06-23 17:04:40,507 maskrcnn_benchmark.trainer INFO: eta: 1:08:01  iter: 7540  loss: 0.7449 (0.7830)  loss_classifier: 0.2905 (0.2876)  loss_box_reg: 0.1192 (0.1253)  loss_mask: 0.2768 (0.3078)  loss_objectness: 0.0256 (0.0405)  loss_rpn_box_reg: 0.0100 (0.0218)  time: 0.1089 (0.1257)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5148
DONE (t=2.67s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:04:42,668 maskrcnn_benchmark.trainer INFO: eta: 1:07:57  iter: 7560  loss: 0.6569 (0.7828)  loss_classifier: 0.2378 (0.2875)  loss_box_reg: 0.1046 (0.1253)  loss_mask: 0.2854 (0.3077)  loss_objectness: 0.0202 (0.0405)  loss_rpn_box_reg: 0.0081 (0.0218)  time: 0.1077 (0.1257)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5148
DONE (t=3.21s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.27443
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.46611
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.28495
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11685
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.29660
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.41444
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25735
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.40351
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.42395
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.23611
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.46294
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.56763
2020-06-23 17:04:44,681 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.2901671753421208, segm mAP: 0.2744325793673822
:::MLLOG {"namespace": "", "time_ms": 1592957084681, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.2901671753421208, "SEGM": 0.2744325793673822}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 8}}
:::MLLOG {"namespace": "", "time_ms": 1592957084681, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 8}}
2020-06-23 17:04:45,003 maskrcnn_benchmark.trainer INFO: eta: 1:07:54  iter: 7580  loss: 0.5656 (0.7822)  loss_classifier: 0.2029 (0.2873)  loss_box_reg: 0.0861 (0.1252)  loss_mask: 0.2335 (0.3075)  loss_objectness: 0.0208 (0.0405)  loss_rpn_box_reg: 0.0067 (0.0217)  time: 0.1070 (0.1257)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5148
2020-06-23 17:04:47,165 maskrcnn_benchmark.trainer INFO: eta: 1:07:50  iter: 7600  loss: 0.5438 (0.7818)  loss_classifier: 0.1861 (0.2871)  loss_box_reg: 0.0857 (0.1251)  loss_mask: 0.2412 (0.3074)  loss_objectness: 0.0195 (0.0405)  loss_rpn_box_reg: 0.0074 (0.0217)  time: 0.1077 (0.1256)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5148
2020-06-23 17:04:49,313 maskrcnn_benchmark.trainer INFO: eta: 1:07:46  iter: 7620  loss: 0.6333 (0.7814)  loss_classifier: 0.2067 (0.2869)  loss_box_reg: 0.1060 (0.1251)  loss_mask: 0.2648 (0.3073)  loss_objectness: 0.0207 (0.0404)  loss_rpn_box_reg: 0.0080 (0.0217)  time: 0.1075 (0.1256)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5148
2020-06-23 17:04:51,486 maskrcnn_benchmark.trainer INFO: eta: 1:07:42  iter: 7640  loss: 0.7136 (0.7812)  loss_classifier: 0.2612 (0.2868)  loss_box_reg: 0.1173 (0.1250)  loss_mask: 0.2759 (0.3072)  loss_objectness: 0.0250 (0.0404)  loss_rpn_box_reg: 0.0105 (0.0217)  time: 0.1084 (0.1255)  data: 0.0013 (0.0184)  lr: 0.160000  max mem: 5148
2020-06-23 17:04:53,659 maskrcnn_benchmark.trainer INFO: eta: 1:07:38  iter: 7660  loss: 0.7027 (0.7811)  loss_classifier: 0.2762 (0.2868)  loss_box_reg: 0.1028 (0.1250)  loss_mask: 0.2700 (0.3072)  loss_objectness: 0.0234 (0.0404)  loss_rpn_box_reg: 0.0115 (0.0217)  time: 0.1085 (0.1255)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5148
2020-06-23 17:04:55,807 maskrcnn_benchmark.trainer INFO: eta: 1:07:34  iter: 7680  loss: 0.6604 (0.7808)  loss_classifier: 0.2442 (0.2867)  loss_box_reg: 0.1087 (0.1250)  loss_mask: 0.2774 (0.3071)  loss_objectness: 0.0154 (0.0403)  loss_rpn_box_reg: 0.0105 (0.0217)  time: 0.1073 (0.1254)  data: 0.0013 (0.0183)  lr: 0.160000  max mem: 5148
2020-06-23 17:04:57,959 maskrcnn_benchmark.trainer INFO: eta: 1:07:30  iter: 7700  loss: 0.5604 (0.7803)  loss_classifier: 0.1835 (0.2865)  loss_box_reg: 0.0817 (0.1249)  loss_mask: 0.2551 (0.3070)  loss_objectness: 0.0143 (0.0403)  loss_rpn_box_reg: 0.0062 (0.0216)  time: 0.1073 (0.1254)  data: 0.0013 (0.0182)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:00,115 maskrcnn_benchmark.trainer INFO: eta: 1:07:26  iter: 7720  loss: 0.6569 (0.7801)  loss_classifier: 0.2360 (0.2864)  loss_box_reg: 0.1163 (0.1249)  loss_mask: 0.2744 (0.3069)  loss_objectness: 0.0255 (0.0403)  loss_rpn_box_reg: 0.0132 (0.0216)  time: 0.1075 (0.1254)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:02,273 maskrcnn_benchmark.trainer INFO: eta: 1:07:22  iter: 7740  loss: 0.7231 (0.7800)  loss_classifier: 0.2296 (0.2863)  loss_box_reg: 0.1199 (0.1249)  loss_mask: 0.3046 (0.3069)  loss_objectness: 0.0265 (0.0403)  loss_rpn_box_reg: 0.0137 (0.0216)  time: 0.1073 (0.1253)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:04,437 maskrcnn_benchmark.trainer INFO: eta: 1:07:18  iter: 7760  loss: 0.7532 (0.7800)  loss_classifier: 0.2507 (0.2863)  loss_box_reg: 0.1227 (0.1249)  loss_mask: 0.2826 (0.3068)  loss_objectness: 0.0193 (0.0403)  loss_rpn_box_reg: 0.0146 (0.0217)  time: 0.1079 (0.1253)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:06,580 maskrcnn_benchmark.trainer INFO: eta: 1:07:14  iter: 7780  loss: 0.6536 (0.7797)  loss_classifier: 0.2511 (0.2862)  loss_box_reg: 0.1077 (0.1249)  loss_mask: 0.2825 (0.3067)  loss_objectness: 0.0195 (0.0402)  loss_rpn_box_reg: 0.0092 (0.0217)  time: 0.1061 (0.1252)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:08,747 maskrcnn_benchmark.trainer INFO: eta: 1:07:10  iter: 7800  loss: 0.6395 (0.7794)  loss_classifier: 0.2026 (0.2861)  loss_box_reg: 0.1019 (0.1248)  loss_mask: 0.2741 (0.3066)  loss_objectness: 0.0241 (0.0403)  loss_rpn_box_reg: 0.0098 (0.0217)  time: 0.1075 (0.1252)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:10,896 maskrcnn_benchmark.trainer INFO: eta: 1:07:06  iter: 7820  loss: 0.6164 (0.7791)  loss_classifier: 0.2295 (0.2859)  loss_box_reg: 0.0976 (0.1248)  loss_mask: 0.2562 (0.3065)  loss_objectness: 0.0205 (0.0402)  loss_rpn_box_reg: 0.0099 (0.0217)  time: 0.1069 (0.1251)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:13,039 maskrcnn_benchmark.trainer INFO: eta: 1:07:02  iter: 7840  loss: 0.6989 (0.7789)  loss_classifier: 0.2252 (0.2858)  loss_box_reg: 0.1036 (0.1247)  loss_mask: 0.2625 (0.3064)  loss_objectness: 0.0402 (0.0402)  loss_rpn_box_reg: 0.0168 (0.0217)  time: 0.1070 (0.1251)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:15,192 maskrcnn_benchmark.trainer INFO: eta: 1:06:58  iter: 7860  loss: 0.7199 (0.7787)  loss_classifier: 0.2810 (0.2857)  loss_box_reg: 0.1045 (0.1247)  loss_mask: 0.2852 (0.3064)  loss_objectness: 0.0218 (0.0402)  loss_rpn_box_reg: 0.0082 (0.0217)  time: 0.1074 (0.1250)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:17,348 maskrcnn_benchmark.trainer INFO: eta: 1:06:54  iter: 7880  loss: 0.6740 (0.7784)  loss_classifier: 0.2368 (0.2856)  loss_box_reg: 0.1013 (0.1246)  loss_mask: 0.2523 (0.3063)  loss_objectness: 0.0202 (0.0402)  loss_rpn_box_reg: 0.0109 (0.0217)  time: 0.1073 (0.1250)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:19,495 maskrcnn_benchmark.trainer INFO: eta: 1:06:50  iter: 7900  loss: 0.6529 (0.7782)  loss_classifier: 0.2118 (0.2855)  loss_box_reg: 0.1102 (0.1246)  loss_mask: 0.2734 (0.3062)  loss_objectness: 0.0276 (0.0402)  loss_rpn_box_reg: 0.0129 (0.0217)  time: 0.1065 (0.1249)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:21,657 maskrcnn_benchmark.trainer INFO: eta: 1:06:47  iter: 7920  loss: 0.6221 (0.7780)  loss_classifier: 0.2330 (0.2855)  loss_box_reg: 0.0936 (0.1246)  loss_mask: 0.2687 (0.3061)  loss_objectness: 0.0245 (0.0402)  loss_rpn_box_reg: 0.0146 (0.0217)  time: 0.1080 (0.1249)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:23,839 maskrcnn_benchmark.trainer INFO: eta: 1:06:43  iter: 7940  loss: 0.5879 (0.7777)  loss_classifier: 0.2170 (0.2853)  loss_box_reg: 0.0955 (0.1246)  loss_mask: 0.2362 (0.3059)  loss_objectness: 0.0161 (0.0402)  loss_rpn_box_reg: 0.0101 (0.0217)  time: 0.1087 (0.1249)  data: 0.0013 (0.0177)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:25,988 maskrcnn_benchmark.trainer INFO: eta: 1:06:39  iter: 7960  loss: 0.6078 (0.7774)  loss_classifier: 0.2036 (0.2852)  loss_box_reg: 0.1069 (0.1245)  loss_mask: 0.2573 (0.3058)  loss_objectness: 0.0151 (0.0401)  loss_rpn_box_reg: 0.0093 (0.0216)  time: 0.1068 (0.1248)  data: 0.0013 (0.0177)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:28,139 maskrcnn_benchmark.trainer INFO: eta: 1:06:35  iter: 7980  loss: 0.6117 (0.7771)  loss_classifier: 0.2381 (0.2851)  loss_box_reg: 0.1010 (0.1245)  loss_mask: 0.2665 (0.3058)  loss_objectness: 0.0233 (0.0401)  loss_rpn_box_reg: 0.0123 (0.0217)  time: 0.1079 (0.1248)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:30,318 maskrcnn_benchmark.trainer INFO: eta: 1:06:31  iter: 8000  loss: 0.7159 (0.7770)  loss_classifier: 0.2627 (0.2850)  loss_box_reg: 0.1123 (0.1245)  loss_mask: 0.2807 (0.3057)  loss_objectness: 0.0210 (0.0401)  loss_rpn_box_reg: 0.0096 (0.0217)  time: 0.1083 (0.1247)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:32,466 maskrcnn_benchmark.trainer INFO: eta: 1:06:27  iter: 8020  loss: 0.6413 (0.7766)  loss_classifier: 0.2172 (0.2849)  loss_box_reg: 0.1100 (0.1245)  loss_mask: 0.2515 (0.3056)  loss_objectness: 0.0179 (0.0400)  loss_rpn_box_reg: 0.0111 (0.0216)  time: 0.1069 (0.1247)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:34,626 maskrcnn_benchmark.trainer INFO: eta: 1:06:23  iter: 8040  loss: 0.6282 (0.7763)  loss_classifier: 0.2365 (0.2848)  loss_box_reg: 0.0944 (0.1244)  loss_mask: 0.2687 (0.3055)  loss_objectness: 0.0213 (0.0400)  loss_rpn_box_reg: 0.0124 (0.0217)  time: 0.1073 (0.1247)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:36,792 maskrcnn_benchmark.trainer INFO: eta: 1:06:20  iter: 8060  loss: 0.5908 (0.7760)  loss_classifier: 0.2106 (0.2846)  loss_box_reg: 0.0951 (0.1244)  loss_mask: 0.2679 (0.3054)  loss_objectness: 0.0153 (0.0400)  loss_rpn_box_reg: 0.0074 (0.0216)  time: 0.1074 (0.1246)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:38,944 maskrcnn_benchmark.trainer INFO: eta: 1:06:16  iter: 8080  loss: 0.7017 (0.7758)  loss_classifier: 0.2413 (0.2845)  loss_box_reg: 0.0994 (0.1243)  loss_mask: 0.2656 (0.3053)  loss_objectness: 0.0229 (0.0400)  loss_rpn_box_reg: 0.0083 (0.0217)  time: 0.1074 (0.1246)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:41,110 maskrcnn_benchmark.trainer INFO: eta: 1:06:12  iter: 8100  loss: 0.6313 (0.7756)  loss_classifier: 0.2319 (0.2844)  loss_box_reg: 0.1219 (0.1243)  loss_mask: 0.2827 (0.3052)  loss_objectness: 0.0229 (0.0399)  loss_rpn_box_reg: 0.0103 (0.0216)  time: 0.1081 (0.1245)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:43,262 maskrcnn_benchmark.trainer INFO: eta: 1:06:08  iter: 8120  loss: 0.6084 (0.7753)  loss_classifier: 0.2085 (0.2843)  loss_box_reg: 0.0927 (0.1243)  loss_mask: 0.2687 (0.3051)  loss_objectness: 0.0211 (0.0399)  loss_rpn_box_reg: 0.0118 (0.0216)  time: 0.1074 (0.1245)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:45,413 maskrcnn_benchmark.trainer INFO: eta: 1:06:04  iter: 8140  loss: 0.5290 (0.7748)  loss_classifier: 0.1842 (0.2841)  loss_box_reg: 0.0859 (0.1242)  loss_mask: 0.2428 (0.3050)  loss_objectness: 0.0150 (0.0399)  loss_rpn_box_reg: 0.0073 (0.0216)  time: 0.1071 (0.1244)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:47,558 maskrcnn_benchmark.trainer INFO: eta: 1:06:01  iter: 8160  loss: 0.6307 (0.7746)  loss_classifier: 0.2291 (0.2840)  loss_box_reg: 0.0884 (0.1241)  loss_mask: 0.2786 (0.3049)  loss_objectness: 0.0221 (0.0399)  loss_rpn_box_reg: 0.0083 (0.0216)  time: 0.1069 (0.1244)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:49,700 maskrcnn_benchmark.trainer INFO: eta: 1:05:57  iter: 8180  loss: 0.6551 (0.7743)  loss_classifier: 0.2311 (0.2839)  loss_box_reg: 0.1023 (0.1241)  loss_mask: 0.2665 (0.3049)  loss_objectness: 0.0183 (0.0398)  loss_rpn_box_reg: 0.0088 (0.0216)  time: 0.1071 (0.1244)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:51,861 maskrcnn_benchmark.trainer INFO: eta: 1:05:53  iter: 8200  loss: 0.6845 (0.7742)  loss_classifier: 0.2624 (0.2839)  loss_box_reg: 0.1208 (0.1241)  loss_mask: 0.2681 (0.3048)  loss_objectness: 0.0142 (0.0398)  loss_rpn_box_reg: 0.0073 (0.0216)  time: 0.1077 (0.1243)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:54,010 maskrcnn_benchmark.trainer INFO: eta: 1:05:49  iter: 8220  loss: 0.5808 (0.7738)  loss_classifier: 0.2098 (0.2837)  loss_box_reg: 0.0908 (0.1241)  loss_mask: 0.2252 (0.3046)  loss_objectness: 0.0186 (0.0398)  loss_rpn_box_reg: 0.0087 (0.0216)  time: 0.1078 (0.1243)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5148
2020-06-23 17:05:56,164 maskrcnn_benchmark.trainer INFO: eta: 1:05:45  iter: 8240  loss: 0.6801 (0.7736)  loss_classifier: 0.2641 (0.2836)  loss_box_reg: 0.1096 (0.1241)  loss_mask: 0.2688 (0.3045)  loss_objectness: 0.0221 (0.0397)  loss_rpn_box_reg: 0.0090 (0.0216)  time: 0.1074 (0.1242)  data: 0.0015 (0.0171)  lr: 0.160000  max mem: 5148
:::MLLOG {"namespace": "", "time_ms": 1592957157554, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 9}}
:::MLLOG {"namespace": "", "time_ms": 1592957157555, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 9}}
:::MLLOG {"namespace": "", "time_ms": 1592957157555, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 9}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 17:05:57,813 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
Done (t=0.27s)
creating index...
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.28s)
index created!
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 17:05:58,122 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.24it/s]
 15%|        | 12/79 [00:01<00:15,  4.33it/s]
 19%|        | 15/79 [00:01<00:11,  5.77it/s]
 23%|       | 18/79 [00:01<00:08,  7.52it/s]
 27%|       | 21/79 [00:01<00:06,  9.55it/s]
 30%|       | 24/79 [00:01<00:04, 11.78it/s]
 34%|      | 27/79 [00:01<00:03, 14.09it/s]
 38%|      | 30/79 [00:01<00:03, 16.23it/s]
 42%|     | 33/79 [00:02<00:02, 18.19it/s]
 46%|     | 36/79 [00:02<00:02, 19.80it/s]
 49%|     | 39/79 [00:02<00:01, 21.22it/s]
 53%|    | 42/79 [00:02<00:01, 22.39it/s]
 57%|    | 45/79 [00:02<00:01, 23.11it/s]
 61%|    | 48/79 [00:02<00:01, 23.65it/s]
 65%|   | 51/79 [00:02<00:01, 24
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:05,  9.51it/s]
 32%|      | 25/79 [00:01<00:04, 11.74it/s]
 35%|      | 28/79 [00:01<00:03, 14.01it/s]
 39%|      | 31/79 [00:02<00:02, 16.27it/s]
 43%|     | 34/79 [00:02<00:02, 18.27it/s]
 47%|     | 37/79 [00:02<00:02, 20.03it/s]
 51%|     | 40/79 [00:02<00:01, 21.50it/s]
 54%|    | 43/79 [00:02<00:01, 22.59it/s]
 58%|    | 46/79 [00:02<00:01, 23.40it/s]
 62%|   | 49/79 [00:02<00:01, 23.97it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.24it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.83it/s]
 24%|       | 19/79 [00:01<00:07,  7.59it/s]
 28%|       | 22/79 [00:01<00:05,  9.61it/s]
 32%|      | 25/79 [00:01<00:04, 11.76it/s]
 35%|      | 28/79 [00:01<00:03, 14.05it/s]
 39%|      | 31/79 [00:02<00:02, 16.24it/s]
 43%|     | 34/79 [00:02<00:02, 18.21it/s]
 47%|     | 37/79 [00:02<00:02, 19.89it/s]
 51%|     | 40/79 [00:02<00:01, 21.45it/s]
 54%|    | 43/79 [00:02<00:01, 22.48it/s]
 58%|    | 46/79 [00:02<00:01, 23.32it/s]
 62%|   | 49/79 [00:02<00:01, 23.97it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.24it/s]
 28%|       | 22/79 [00:01<00:06,  9.24it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.80it/s]
 39%|      | 31/79 [00:02<00:02, 16.06it/s]
 43%|     | 34/79 [00:02<00:02, 18.16it/s]
 47%|     | 37/79 [00:02<00:02, 19.93it/s]
 51%|     | 40/79 [00:02<00:01, 21.38it/s]
 54%|    | 43/79 [00:02<00:01, 22.53it/s]
 58%|    | 46/79 [00:02<00:01, 23.46it/s]
 62%|   | 49/79 [00:02<00:01, 24.36it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  4%|         | 3/79 [00:00<00:45,  1.66it/s]
  8%|         | 6/79 [00:01<00:31,  2.31it/s]
 11%|        | 9/79 [00:01<00:22,  3.17it/s]
 15%|        | 12/79 [00:01<00:15,  4.31it/s]
 19%|        | 15/79 [00:01<00:11,  5.74it/s]
 23%|       | 18/79 [00:01<00:08,  7.49it/s]
 27%|       | 21/79 [00:01<00:06,  9.49it/s]
 30%|       | 24/79 [00:01<00:04, 11.74it/s]
 34%|      | 27/79 [00:01<00:03, 13.86it/s]
 38%|      | 30/79 [00:02<00:03, 15.96it/s]
 42%|     | 33/79 [00:02<00:02, 17.82it/s]
 46%|     | 36/79 [00:02<00:02, 19.69it/s]
 49%|     | 39/79 [00:02<00:01, 21.33it/s]
 53%|    | 42/79 [00:02<00:01, 22.18it/s]
 57%|    | 45/79 [00:02<00:01, 23.06it/s]
 61%|    | 48/79 [00:02<00:01, 23.96it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.70it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.44it/s]
 32%|      | 25/79 [00:01<00:04, 11.70it/s]
 35%|      | 28/79 [00:01<00:03, 13.98it/s]
 39%|      | 31/79 [00:02<00:02, 16.19it/s]
 43%|     | 34/79 [00:02<00:02, 18.23it/s]
 47%|     | 37/79 [00:02<00:02, 20.03it/s]
 51%|     | 40/79 [00:02<00:01, 21.47it/s]
 54%|    | 43/79 [00:02<00:01, 22.62it/s]
 58%|    | 46/79 [00:02<00:01, 23.47it/s]
 62%|   | 49/79 [00:02<00:01, 24.14it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.23it/s]
 28%|       | 22/79 [00:01<00:06,  9.25it/s]
 32%|      | 25/79 [00:01<00:04, 11.40it/s]
 35%|      | 28/79 [00:01<00:03, 13.73it/s]
 39%|      | 31/79 [00:02<00:02, 16.06it/s]
 43%|     | 34/79 [00:02<00:02, 18.08it/s]
 47%|     | 37/79 [00:02<00:02, 19.92it/s]
 51%|     | 40/79 [00:02<00:01, 21.33it/s]
 54%|    | 43/79 [00:02<00:01, 22.51it/s]
 58%|    | 46/79 [00:02<00:01, 23.48it/s]
 62%|   | 49/79 [00:02<00:01, 24.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.20it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.40it/s]
 35%|      | 28/79 [00:01<00:03, 13.76it/s]
 39%|      | 31/79 [00:02<00:02, 16.05it/s]
 43%|     | 34/79 [00:02<00:02, 18.20it/s]
 47%|     | 37/79 [00:02<00:02, 19.91it/s]
 51%|     | 40/79 [00:02<00:01, 21.55it/s]
 54%|    | 43/79 [00:02<00:01, 22.86it/s]
 58%|    | 46/79 [00:02<00:01, 23.84it/s]
 62%|   | 49/79 [00:02<00:01, 24.60it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.77it/s]
 24%|       | 19/79 [00:01<00:07,  7.51it/s]
 28%|       | 22/79 [00:01<00:05,  9.53it/s]
 32%|      | 25/79 [00:01<00:04, 11.69it/s]
 35%|      | 28/79 [00:01<00:03, 14.02it/s]
 39%|      | 31/79 [00:02<00:02, 16.14it/s]
 43%|     | 34/79 [00:02<00:02, 18.01it/s]
 47%|     | 37/79 [00:02<00:02, 19.73it/s]
 51%|     | 40/79 [00:02<00:01, 21.30it/s]
 54%|    | 43/79 [00:02<00:01, 22.36it/s]
 58%|    | 46/79 [00:02<00:01, 22.88it/s]
 62%|   | 49/79 [00:02<00:01, 23.76it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.34it/s]
 28%|       | 22/79 [00:01<00:06,  9.37it/s]
 32%|      | 25/79 [00:01<00:04, 11.54it/s]
 35%|      | 28/79 [00:01<00:03, 13.87it/s]
 39%|      | 31/79 [00:02<00:02, 16.22it/s]
 43%|     | 34/79 [00:02<00:02, 18.28it/s]
 47%|     | 37/79 [00:02<00:02, 20.00it/s]
 51%|     | 40/79 [00:02<00:01, 21.32it/s]
 54%|    | 43/79 [00:02<00:01, 22.46it/s]
 58%|    | 46/79 [00:02<00:01, 23.39it/s]
 62%|   | 49/79 [00:02<00:01, 23.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  4%|         | 3/79 [00:00<00:48,  1.58it/s]
  8%|         | 6/79 [00:01<00:33,  2.19it/s]
 11%|        | 9/79 [00:01<00:23,  3.02it/s]
 15%|        | 12/79 [00:01<00:16,  4.11it/s]
 19%|        | 15/79 [00:01<00:11,  5.49it/s]
 23%|       | 18/79 [00:01<00:08,  7.19it/s]
 27%|       | 21/79 [00:01<00:06,  9.17it/s]
 30%|       | 24/79 [00:01<00:04, 11.38it/s]
 34%|      | 27/79 [00:01<00:03, 13.67it/s]
 38%|      | 30/79 [00:02<00:03, 15.92it/s]
 42%|     | 33/79 [00:02<00:02, 17.91it/s]
 46%|     | 36/79 [00:02<00:02, 19.76it/s]
 49%|     | 39/79 [00:02<00:01, 21.22it/s]
 53%|    | 42/79 [00:02<00:01, 22.55it/s]
 57%|    | 45/79 [00:02<00:01, 23.44it/s]
 61%|    | 48/79 [00:02<00:01, 24.03it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.22it/s]
 32%|      | 25/79 [00:01<00:04, 11.42it/s]
 35%|      | 28/79 [00:01<00:03, 13.75it/s]
 39%|      | 31/79 [00:02<00:02, 16.02it/s]
 43%|     | 34/79 [00:02<00:02, 17.90it/s]
 47%|     | 37/79 [00:02<00:02, 19.63it/s]
 51%|     | 40/79 [00:02<00:01, 21.09it/s]
 54%|    | 43/79 [00:02<00:01, 22.26it/s]
 58%|    | 46/79 [00:02<00:01, 23.50it/s]
 62%|   | 49/79 [00:02<00:01, 24.08it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.13it/s]
 28%|       | 22/79 [00:01<00:06,  9.07it/s]
 32%|      | 25/79 [00:01<00:04, 11.28it/s]
 35%|      | 28/79 [00:01<00:03, 13.63it/s]
 39%|      | 31/79 [00:02<00:02, 16.02it/s]
 43%|     | 34/79 [00:02<00:02, 18.14it/s]
 47%|     | 37/79 [00:02<00:02, 20.11it/s]
 51%|     | 40/79 [00:02<00:01, 21.41it/s]
 54%|    | 43/79 [00:02<00:01, 22.76it/s]
 58%|    | 46/79 [00:02<00:01, 23.50it/s]
 62%|   | 49/79 [00:02<00:01, 24.15it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.39it/s]
 24%|       | 19/79 [00:01<00:08,  7.05it/s]
 28%|       | 22/79 [00:01<00:06,  9.06it/s]
 32%|      | 25/79 [00:01<00:04, 11.30it/s]
 35%|      | 28/79 [00:01<00:03, 13.60it/s]
 39%|      | 31/79 [00:02<00:03, 15.92it/s]
 43%|     | 34/79 [00:02<00:02, 18.02it/s]
 47%|     | 37/79 [00:02<00:02, 19.86it/s]
 51%|     | 40/79 [00:02<00:01, 21.35it/s]
 54%|    | 43/79 [00:02<00:01, 22.53it/s]
 58%|    | 46/79 [00:02<00:01, 23.49it/s]
 62%|   | 49/79 [00:02<00:01, 24.07it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:00<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.24it/s]
 32%|      | 25/79 [00:01<00:04, 11.41it/s]
 35%|      | 28/79 [00:01<00:03, 13.68it/s]
 39%|      | 31/79 [00:02<00:03, 15.94it/s]
 43%|     | 34/79 [00:02<00:02, 17.82it/s]
 47%|     | 37/79 [00:02<00:02, 19.71it/s]
 51%|     | 40/79 [00:02<00:01, 21.21it/s]
 54%|    | 43/79 [00:02<00:01, 22.49it/s]
 58%|    | 46/79 [00:02<00:01, 23.28it/s]
 62%|   | 49/79 [00:02<00:01, 23.88it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 11%|        | 9/79 [00:01<00:23,  3.04it/s]
 15%|        | 12/79 [00:01<00:16,  4.12it/s]
 19%|        | 15/79 [00:01<00:11,  5.52it/s]
 23%|       | 18/79 [00:01<00:08,  7.20it/s]
 27%|       | 21/79 [00:01<00:06,  9.18it/s]
 30%|       | 24/79 [00:01<00:04, 11.34it/s]
 34%|      | 27/79 [00:01<00:03, 13.66it/s]
 38%|      | 30/79 [00:02<00:03, 15.97it/s]
 42%|     | 33/79 [00:02<00:02, 17.95it/s]
 46%|     | 36/79 [00:02<00:02, 19.79it/s]
 49%|     | 39/79 [00:02<00:01, 21.50it/s]
 53%|    | 42/79 [00:02<00:01, 22.40it/s]
 57%|    | 45/79 [00:02<00:01, 22.78it/s]
 61%|    | 48/79 [00:02<00:01, 23.51it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.36it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  8.97it/s]
 32%|      | 25/79 [00:01<00:04, 11.17it/s]
 35%|      | 28/79 [00:01<00:03, 13.50it/s]
 39%|      | 31/79 [00:02<00:03, 15.81it/s]
 43%|     | 34/79 [00:02<00:02, 17.93it/s]
 47%|     | 37/79 [00:02<00:02, 19.88it/s]
 51%|     | 40/79 [00:02<00:01, 21.39it/s]
 54%|    | 43/79 [00:02<00:01, 22.58it/s]
 58%|    | 46/79 [00:02<00:01, 23.53it/s]
 62%|   | 49/79 [00:02<00:01, 23.99it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.43it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.69it/s]
 43%|     | 34/79 [00:02<00:02, 17.59it/s]
 47%|     | 37/79 [00:02<00:02, 19.36it/s]
 51%|     | 40/79 [00:02<00:01, 21.01it/s]
 54%|    | 43/79 [00:02<00:01, 22.22it/s]
 58%|    | 46/79 [00:02<00:01, 22.85it/s]
 62%|   | 49/79 [00:02<00:01, 23.54it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.24it/s]
 24%|       | 19/79 [00:01<00:08,  6.89it/s]
 28%|       | 22/79 [00:01<00:06,  8.85it/s]
 32%|      | 25/79 [00:01<00:04, 11.07it/s]
 35%|      | 28/79 [00:01<00:03, 13.36it/s]
 39%|      | 31/79 [00:02<00:03, 15.58it/s]
 43%|     | 34/79 [00:02<00:02, 17.55it/s]
 47%|     | 37/79 [00:02<00:02, 19.42it/s]
 51%|     | 40/79 [00:02<00:01, 20.80it/s]
 54%|    | 43/79 [00:02<00:01, 21.84it/s]
 58%|    | 46/79 [00:02<00:01, 22.83it/s]
 62%|   | 49/79 [00:02<00:01, 23.60it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.93it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.93it/s]
 28%|       | 22/79 [00:01<00:06,  8.85it/s]
 32%|      | 25/79 [00:01<00:04, 10.95it/s]
 35%|      | 28/79 [00:02<00:03, 12.96it/s]
 39%|      | 31/79 [00:02<00:03, 15.28it/s]
 43%|     | 34/79 [00:02<00:02, 17.49it/s]
 47%|     | 37/79 [00:02<00:02, 19.23it/s]
 51%|     | 40/79 [00:02<00:01, 20.85it/s]
 54%|    | 43/79 [00:02<00:01, 22.17it/s]
 58%|    | 46/79 [00:02<00:01, 23.26it/s]
 62%|   | 49/79 [00:02<00:01, 23.56it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  4%|         | 3/79 [00:01<00:49,  1.55it/s]
  8%|         | 6/79 [00:01<00:33,  2.15it/s]
 11%|        | 9/79 [00:01<00:23,  2.96it/s]
 15%|        | 12/79 [00:01<00:16,  4.03it/s]
 19%|        | 15/79 [00:01<00:11,  5.38it/s]
 23%|       | 18/79 [00:01<00:08,  7.06it/s]
 27%|       | 21/79 [00:01<00:06,  9.03it/s]
 30%|       | 24/79 [00:01<00:04, 11.14it/s]
 34%|      | 27/79 [00:01<00:03, 13.37it/s]
 38%|      | 30/79 [00:02<00:03, 15.46it/s]
 42%|     | 33/79 [00:02<00:02, 17.53it/s]
 46%|     | 36/79 [00:02<00:02, 19.11it/s]
 49%|     | 39/79 [00:02<00:01, 20.49it/s]
 53%|    | 42/79 [00:02<00:01, 21.56it/s]
 57%|    | 45/79 [00:02<00:01, 22.62it/s]
 61%|    | 48/79 [00:02<00:01, 23.27it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.89it/s]
 32%|      | 25/79 [00:01<00:04, 11.02it/s]
 35%|      | 28/79 [00:02<00:03, 13.32it/s]
 39%|      | 31/79 [00:02<00:03, 15.69it/s]
 43%|     | 34/79 [00:02<00:02, 17.72it/s]
 47%|     | 37/79 [00:02<00:02, 19.52it/s]
 51%|     | 40/79 [00:02<00:01, 20.85it/s]
 54%|    | 43/79 [00:02<00:01, 22.19it/s]
 58%|    | 46/79 [00:02<00:01, 22.88it/s]
 62%|   | 49/79 [00:02<00:01, 23.43it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.86it/s]
 28%|       | 22/79 [00:01<00:06,  8.83it/s]
 32%|      | 25/79 [00:01<00:04, 10.94it/s]
 35%|      | 28/79 [00:02<00:03, 13.17it/s]
 39%|      | 31/79 [00:02<00:03, 15.47it/s]
 43%|     | 34/79 [00:02<00:02, 17.54it/s]
 47%|     | 37/79 [00:02<00:02, 19.49it/s]
 51%|     | 40/79 [00:02<00:01, 20.90it/s]
 54%|    | 43/79 [00:02<00:01, 21.94it/s]
 58%|    | 46/79 [00:02<00:01, 22.81it/s]
 62%|   | 49/79 [00:02<00:01, 23.44it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.17it/s]
 24%|       | 19/79 [00:01<00:08,  6.80it/s]
 28%|       | 22/79 [00:01<00:06,  8.73it/s]
 32%|      | 25/79 [00:01<00:04, 10.89it/s]
 35%|      | 28/79 [00:02<00:03, 13.16it/s]
 39%|      | 31/79 [00:02<00:03, 15.38it/s]
 43%|     | 34/79 [00:02<00:02, 17.54it/s]
 47%|     | 37/79 [00:02<00:02, 19.31it/s]
 51%|     | 40/79 [00:02<00:01, 21.06it/s]
 54%|    | 43/79 [00:02<00:01, 22.32it/s]
 58%|    | 46/79 [00:02<00:01, 23.34it/s]
 62%|   | 49/79 [00:02<00:01, 23.67it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  4%|         | 3/79 [00:01<00:50,  1.50it/s]
  8%|         | 6/79 [00:01<00:35,  2.08it/s]
 11%|        | 9/79 [00:01<00:24,  2.88it/s]
 15%|        | 12/79 [00:01<00:17,  3.91it/s]
 19%|        | 15/79 [00:01<00:12,  5.24it/s]
 23%|       | 18/79 [00:01<00:08,  6.84it/s]
 27%|       | 21/79 [00:01<00:06,  8.75it/s]
 30%|       | 24/79 [00:01<00:05, 10.87it/s]
 34%|      | 27/79 [00:02<00:03, 13.04it/s]
 38%|      | 30/79 [00:02<00:03, 15.26it/s]
 42%|     | 33/79 [00:02<00:02, 17.19it/s]
 46%|     | 36/79 [00:02<00:02, 19.07it/s]
 49%|     | 39/79 [00:02<00:01, 20.46it/s]
 53%|    | 42/79 [00:02<00:01, 21.43it/s]
 57%|    | 45/79 [00:02<00:01, 22.47it/s]
 61%|    | 48/79 [00:02<00:01, 23.22it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.81it/s]
 16%|        | 13/79 [00:01<00:17,  3.83it/s]
 20%|        | 16/79 [00:01<00:12,  5.14it/s]
 24%|       | 19/79 [00:01<00:08,  6.76it/s]
 28%|       | 22/79 [00:01<00:06,  8.69it/s]
 32%|      | 25/79 [00:01<00:04, 10.82it/s]
 35%|      | 28/79 [00:02<00:03, 13.09it/s]
 39%|      | 31/79 [00:02<00:03, 15.22it/s]
 43%|     | 34/79 [00:02<00:02, 17.19it/s]
 47%|     | 37/79 [00:02<00:02, 19.17it/s]
 51%|     | 40/79 [00:02<00:01, 20.32it/s]
 54%|    | 43/79 [00:02<00:01, 21.68it/s]
 58%|    | 46/79 [00:02<00:01, 22.20it/s]
 62%|   | 49/79 [00:02<00:01, 22.93it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.23it/s]
 24%|       | 19/79 [00:01<00:08,  6.83it/s]
 28%|       | 22/79 [00:01<00:06,  8.75it/s]
 32%|      | 25/79 [00:01<00:04, 10.85it/s]
 35%|      | 28/79 [00:02<00:03, 13.05it/s]
 39%|      | 31/79 [00:02<00:03, 15.25it/s]
 43%|     | 34/79 [00:02<00:02, 17.15it/s]
 47%|     | 37/79 [00:02<00:02, 18.97it/s]
 51%|     | 40/79 [00:02<00:01, 20.39it/s]
 54%|    | 43/79 [00:02<00:01, 21.67it/s]
 58%|    | 46/79 [00:02<00:01, 22.59it/s]
 62%|   | 49/79 [00:02<00:01, 23.51it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:51,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.82it/s]
 16%|        | 13/79 [00:01<00:17,  3.85it/s]
 20%|        | 16/79 [00:01<00:12,  5.17it/s]
 24%|       | 19/79 [00:01<00:08,  6.79it/s]
 28%|       | 22/79 [00:01<00:06,  8.71it/s]
 32%|      | 25/79 [00:01<00:04, 10.86it/s]
 35%|      | 28/79 [00:02<00:03, 13.08it/s]
 39%|      | 31/79 [00:02<00:03, 15.23it/s]
 43%|     | 34/79 [00:02<00:02, 17.22it/s]
 47%|     | 37/79 [00:02<00:02, 18.94it/s]
 51%|     | 40/79 [00:02<00:01, 20.31it/s]
 54%|    | 43/79 [00:02<00:01, 21.31it/s]
 58%|    | 46/79 [00:02<00:01, 22.41it/s]
 62%|   | 49/79 [00:02<00:01, 22.96it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.87it/s]
 20%|        | 16/79 [00:01<00:12,  5.17it/s]
 24%|       | 19/79 [00:01<00:08,  6.79it/s]
 28%|       | 22/79 [00:01<00:06,  8.67it/s]
 32%|      | 25/79 [00:01<00:05, 10.78it/s]
 35%|      | 28/79 [00:02<00:03, 12.97it/s]
 39%|      | 31/79 [00:02<00:03, 15.13it/s]
 43%|     | 34/79 [00:02<00:02, 17.14it/s]
 47%|     | 37/79 [00:02<00:02, 18.88it/s]
 51%|     | 40/79 [00:02<00:01, 20.28it/s]
 54%|    | 43/79 [00:02<00:01, 21.49it/s]
 58%|    | 46/79 [00:02<00:01, 22.50it/s]
 62%|   | 49/79 [00:02<00:01, 23.19it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.09it/s]
 28%|       | 22/79 [00:01<00:06,  9.03it/s]
 32%|      | 25/79 [00:01<00:04, 11.20it/s]
 35%|      | 28/79 [00:01<00:03, 13.44it/s]
 39%|      | 31/79 [00:02<00:03, 15.71it/s]
 43%|     | 34/79 [00:02<00:02, 17.81it/s]
 47%|     | 37/79 [00:02<00:02, 19.53it/s]
 51%|     | 40/79 [00:02<00:01, 20.75it/s]
 54%|    | 43/79 [00:02<00:01, 19.96it/s]
 58%|    | 46/79 [00:02<00:01, 20.20it/s]
 62%|   | 49/79 [00:02<00:01, 19.70it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:19,  1.02s/it]
  5%|         | 4/79 [00:01<00:54,  1.38it/s]
  9%|         | 7/79 [00:01<00:37,  1.93it/s]
 13%|        | 10/79 [00:01<00:25,  2.67it/s]
 16%|        | 13/79 [00:01<00:18,  3.64it/s]
 20%|        | 16/79 [00:01<00:12,  4.89it/s]
 24%|       | 19/79 [00:01<00:09,  6.46it/s]
 28%|       | 22/79 [00:01<00:06,  8.29it/s]
 32%|      | 25/79 [00:01<00:05, 10.39it/s]
 35%|      | 28/79 [00:02<00:04, 12.57it/s]
 39%|      | 31/79 [00:02<00:03, 14.85it/s]
 43%|     | 34/79 [00:02<00:02, 16.92it/s]
 47%|     | 37/79 [00:02<00:02, 18.54it/s]
 51%|     | 40/79 [00:02<00:01, 20.17it/s]
 54%|    | 43/79 [00:02<00:01, 21.33it/s]
 58%|    | 46/79 [00:02<00:01, 22.22it/s]
 62%|   | 49/79 [00:02<00:01, 22.95it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.02it/s]
 13%|        | 10/79 [00:01<00:24,  2.79it/s]
 16%|        | 13/79 [00:01<00:17,  3.80it/s]
 20%|        | 16/79 [00:01<00:12,  5.08it/s]
 24%|       | 19/79 [00:01<00:09,  6.66it/s]
 28%|       | 22/79 [00:01<00:06,  8.49it/s]
 32%|      | 25/79 [00:01<00:05, 10.57it/s]
 35%|      | 28/79 [00:02<00:04, 12.69it/s]
 39%|      | 31/79 [00:02<00:03, 14.76it/s]
 43%|     | 34/79 [00:02<00:02, 16.66it/s]
 47%|     | 37/79 [00:02<00:02, 18.24it/s]
 51%|     | 40/79 [00:02<00:01, 19.69it/s]
 54%|    | 43/79 [00:02<00:01, 20.81it/s]
 58%|    | 46/79 [00:02<00:01, 21.39it/s]
 62%|   | 49/79 [00:02<00:01, 22.30it/s]
 66%|   | 52/79 [00:03<00:01, 24.57it/s]
 70%|   | 55/79 [00:02<00:00, 25.01it/s]
 73%|  | 58/79 [00:03<00:00, 25.51it/s]
 77%|  | 61/79 [00:03<00:00, 25.64it/s]
 81%|  | 64/79 [00:03<00:00, 25.88it/s]
 85%| | 67/79 [00:03<00:00, 25.91it/s]
 89%| | 70/79 [00:03<00:00, 26.02it/s]
 92%|| 73/79 [00:03<00:00, 26.26it/s]
 96%|| 76/79 [00:03<00:00, 26.75it/s]
100%|| 79/79 [00:03<00:00, 27.63it/s]
, 24.61it/s]
 70%|   | 55/79 [00:02<00:00, 24.98it/s]
 73%|  | 58/79 [00:03<00:00, 25.23it/s]
 77%|  | 61/79 [00:03<00:00, 25.42it/s]
 81%|  | 64/79 [00:03<00:00, 25.50it/s]
 85%| | 67/79 [00:03<00:00, 25.70it/s]
 89%| | 70/79 [00:03<00:00, 25.04it/s]
 92%|| 73/79 [00:03<00:00, 25.58it/s]
 96%|| 76/79 [00:03<00:00, 26.08it/s]
100%|| 79/79 [00:03<00:00, 27.12it/s]
, 24.80it/s]
 70%|   | 55/79 [00:02<00:00, 24.81it/s]
 73%|  | 58/79 [00:03<00:00, 25.02it/s]
 77%|  | 61/79 [00:03<00:00, 25.32it/s]
 81%|  | 64/79 [00:03<00:00, 25.18it/s]
 85%| | 67/79 [00:03<00:00, 25.23it/s]
 89%| | 70/79 [00:03<00:00, 25.21it/s]
 92%|| 73/79 [00:03<00:00, 25.70it/s]
 96%|| 76/79 [00:03<00:00, 26.33it/s]
100%|| 79/79 [00:03<00:00, 27.22it/s]
, 24.48it/s]
 70%|   | 55/79 [00:02<00:00, 24.98it/s]
 73%|  | 58/79 [00:03<00:00, 25.10it/s]
 77%|  | 61/79 [00:03<00:00, 25.26it/s]
 81%|  | 64/79 [00:03<00:00, 25.62it/s]
 85%| | 67/79 [00:03<00:00, 25.37it/s]
 89%| | 70/79 [00:03<00:00, 25.35it/s]
 92%|| 73/79 [00:03<00:00, 25.80it/s]
 96%|| 76/79 [00:03<00:00, 26.51it/s]
100%|| 79/79 [00:03<00:00, 27.25it/s]
, 24.71it/s]
 70%|   | 55/79 [00:02<00:00, 24.61it/s]
 73%|  | 58/79 [00:03<00:00, 25.03it/s]
 77%|  | 61/79 [00:03<00:00, 25.17it/s]
 81%|  | 64/79 [00:03<00:00, 25.48it/s]
 85%| | 67/79 [00:03<00:00, 25.47it/s]
 89%| | 70/79 [00:03<00:00, 25.62it/s]
 92%|| 73/79 [00:03<00:00, 26.07it/s]
 96%|| 76/79 [00:03<00:00, 26.74it/s]
100%|| 79/79 [00:03<00:00, 27.47it/s]
, 24.95it/s]
 70%|   | 55/79 [00:02<00:00, 25.32it/s]
 73%|  | 58/79 [00:03<00:00, 25.47it/s]
 77%|  | 61/79 [00:03<00:00, 25.62it/s]
 81%|  | 64/79 [00:03<00:00, 25.46it/s]
 85%| | 67/79 [00:03<00:00, 25.61it/s]
 89%| | 70/79 [00:03<00:00, 25.61it/s]
 92%|| 73/79 [00:03<00:00, 26.06it/s]
 96%|| 76/79 [00:03<00:00, 26.48it/s]
100%|| 79/79 [00:03<00:00, 27.14it/s]
, 24.31it/s]
 70%|   | 55/79 [00:02<00:00, 24.82it/s]
 73%|  | 58/79 [00:03<00:00, 24.96it/s]
 77%|  | 61/79 [00:03<00:00, 25.30it/s]
 81%|  | 64/79 [00:03<00:00, 25.25it/s]
 85%| | 67/79 [00:03<00:00, 25.30it/s]
 89%| | 70/79 [00:03<00:00, 25.23it/s]
 92%|| 73/79 [00:03<00:00, 25.59it/s]
 96%|| 76/79 [00:03<00:00, 26.36it/s]
100%|| 79/79 [00:03<00:00, 27.27it/s]
, 24.86it/s]
 70%|   | 55/79 [00:02<00:00, 25.35it/s]
 73%|  | 58/79 [00:03<00:00, 25.24it/s]
 77%|  | 61/79 [00:03<00:00, 25.22it/s]
 81%|  | 64/79 [00:03<00:00, 25.31it/s]
 85%| | 67/79 [00:03<00:00, 25.32it/s]
 89%| | 70/79 [00:03<00:00, 25.43it/s]
 92%|| 73/79 [00:03<00:00, 25.71it/s]
 96%|| 76/79 [00:03<00:00, 26.27it/s]
100%|| 79/79 [00:03<00:00, 27.19it/s]
39it/s]
 68%|   | 54/79 [00:02<00:01, 24.89it/s]
 72%|  | 57/79 [00:03<00:00, 25.19it/s]
 76%|  | 60/79 [00:03<00:00, 25.46it/s]
 80%|  | 63/79 [00:03<00:00, 25.40it/s]
 84%| | 66/79 [00:03<00:00, 25.39it/s]
 87%| | 69/79 [00:03<00:00, 25.49it/s]
 91%| | 72/79 [00:03<00:00, 25.79it/s]
 95%|| 75/79 [00:03<00:00, 26.48it/s]
100%|| 79/79 [00:03<00:00, 27.35it/s]
.18it/s]
 68%|   | 54/79 [00:02<00:01, 24.64it/s]
 72%|  | 57/79 [00:03<00:00, 24.54it/s]
 76%|  | 60/79 [00:03<00:00, 24.48it/s]
 80%|  | 63/79 [00:03<00:00, 24.71it/s]
 84%| | 66/79 [00:03<00:00, 24.83it/s]
 87%| | 69/79 [00:03<00:00, 24.78it/s]
 91%| | 72/79 [00:03<00:00, 24.76it/s]
 95%|| 75/79 [00:03<00:00, 25.66it/s]
 99%|| 78/79 [00:03<00:00, 26.27it/s]
100%|| 79/79 [00:03<00:00, 19.82it/s]
, 24.42it/s]
 70%|   | 55/79 [00:02<00:00, 24.70it/s]
 73%|  | 58/79 [00:03<00:00, 24.69it/s]
 77%|  | 61/79 [00:03<00:00, 25.03it/s]
 81%|  | 64/79 [00:03<00:00, 25.21it/s]
 85%| | 67/79 [00:03<00:00, 25.26it/s]
 89%| | 70/79 [00:03<00:00, 25.34it/s]
 92%|| 73/79 [00:03<00:00, 25.88it/s]
 96%|| 76/79 [00:03<00:00, 26.59it/s]
100%|| 79/79 [00:03<00:00, 27.48it/s]
, 24.24it/s]
 70%|   | 55/79 [00:02<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 24.78it/s]
 77%|  | 61/79 [00:03<00:00, 24.99it/s]
 81%|  | 64/79 [00:03<00:00, 25.15it/s]
 85%| | 67/79 [00:03<00:00, 25.51it/s]
 89%| | 70/79 [00:03<00:00, 25.59it/s]
 92%|| 73/79 [00:03<00:00, 26.11it/s]
 96%|| 76/79 [00:03<00:00, 26.70it/s]
100%|| 79/79 [00:03<00:00, 27.59it/s]
, 24.28it/s]
 70%|   | 55/79 [00:03<00:00, 24.51it/s]
 73%|  | 58/79 [00:03<00:00, 24.87it/s]
 77%|  | 61/79 [00:03<00:00, 25.04it/s]
 81%|  | 64/79 [00:03<00:00, 25.17it/s]
 85%| | 67/79 [00:03<00:00, 25.41it/s]
 89%| | 70/79 [00:03<00:00, 25.28it/s]
 92%|| 73/79 [00:03<00:00, 25.71it/s]
 96%|| 76/79 [00:03<00:00, 26.36it/s]
100%|| 79/79 [00:03<00:00, 27.35it/s]
, 24.68it/s]
 70%|   | 55/79 [00:02<00:00, 24.56it/s]
 73%|  | 58/79 [00:03<00:00, 24.72it/s]
 77%|  | 61/79 [00:03<00:00, 24.79it/s]
 81%|  | 64/79 [00:03<00:00, 24.85it/s]
 85%| | 67/79 [00:03<00:00, 25.09it/s]
 89%| | 70/79 [00:03<00:00, 25.62it/s]
 92%|| 73/79 [00:03<00:00, 25.66it/s]
 96%|| 76/79 [00:03<00:00, 26.29it/s]
100%|| 79/79 [00:03<00:00, 27.14it/s]
, 24.08it/s]
 70%|   | 55/79 [00:03<00:00, 24.48it/s]
 73%|  | 58/79 [00:03<00:00, 24.86it/s]
 77%|  | 61/79 [00:03<00:00, 25.04it/s]
 81%|  | 64/79 [00:03<00:00, 24.99it/s]
 85%| | 67/79 [00:03<00:00, 25.09it/s]
 89%| | 70/79 [00:03<00:00, 25.03it/s]
 92%|| 73/79 [00:03<00:00, 25.45it/s]
 96%|| 76/79 [00:03<00:00, 26.06it/s]
100%|| 79/79 [00:03<00:00, 26.85it/s]
, 24.65it/s]
 70%|   | 55/79 [00:03<00:00, 24.89it/s]
 73%|  | 58/79 [00:03<00:00, 25.08it/s]
 77%|  | 61/79 [00:03<00:00, 25.46it/s]
 81%|  | 64/79 [00:03<00:00, 25.67it/s]
 85%| | 67/79 [00:03<00:00, 25.86it/s]
 89%| | 70/79 [00:03<00:00, 25.79it/s]
 92%|| 73/79 [00:03<00:00, 25.92it/s]
 96%|| 76/79 [00:03<00:00, 26.77it/s]
100%|| 79/79 [00:03<00:00, 26.93it/s]
, 24.15it/s]
 70%|   | 55/79 [00:03<00:00, 24.54it/s]
 73%|  | 58/79 [00:03<00:00, 25.02it/s]
 77%|  | 61/79 [00:03<00:00, 25.15it/s]
 81%|  | 64/79 [00:03<00:00, 25.34it/s]
 85%| | 67/79 [00:03<00:00, 25.43it/s]
 89%| | 70/79 [00:03<00:00, 25.68it/s]
 92%|| 73/79 [00:03<00:00, 26.03it/s]
 97%|| 77/79 [00:03<00:00, 27.01it/s]
100%|| 79/79 [00:04<00:00, 19.53it/s]
62it/s]
 68%|   | 54/79 [00:02<00:00, 25.02it/s]
 72%|  | 57/79 [00:03<00:00, 25.13it/s]
 76%|  | 60/79 [00:03<00:00, 25.18it/s]
 80%|  | 63/79 [00:03<00:00, 25.36it/s]
 84%| | 66/79 [00:03<00:00, 25.23it/s]
 87%| | 69/79 [00:03<00:00, 25.15it/s]
 91%| | 72/79 [00:03<00:00, 25.57it/s]
 95%|| 75/79 [00:03<00:00, 26.18it/s]
 99%|| 78/79 [00:03<00:00, 26.78it/s]
100%|| 79/79 [00:04<00:00, 19.61it/s]
94it/s]
 68%|   | 54/79 [00:03<00:01, 24.55it/s]
 72%|  | 57/79 [00:03<00:00, 24.68it/s]
 76%|  | 60/79 [00:03<00:00, 24.64it/s]
 80%|  | 63/79 [00:03<00:00, 24.96it/s]
 84%| | 66/79 [00:03<00:00, 25.03it/s]
 87%| | 69/79 [00:03<00:00, 25.42it/s]
 91%| | 72/79 [00:03<00:00, 25.20it/s]
 95%|| 75/79 [00:03<00:00, 26.03it/s]
 99%|| 78/79 [00:03<00:00, 26.62it/s]
100%|| 79/79 [00:04<00:00, 19.50it/s]
, 24.25it/s]
 70%|   | 55/79 [00:03<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 24.93it/s]
 77%|  | 61/79 [00:03<00:00, 25.21it/s]
 81%|  | 64/79 [00:03<00:00, 25.49it/s]
 85%| | 67/79 [00:03<00:00, 25.90it/s]
 89%| | 70/79 [00:03<00:00, 25.81it/s]
 92%|| 73/79 [00:03<00:00, 26.12it/s]
 96%|| 76/79 [00:03<00:00, 26.58it/s]
100%|| 79/79 [00:03<00:00, 27.28it/s]
, 24.26it/s]
 70%|   | 55/79 [00:03<00:00, 24.40it/s]
 73%|  | 58/79 [00:03<00:00, 24.51it/s]
 77%|  | 61/79 [00:03<00:00, 25.11it/s]
 81%|  | 64/79 [00:03<00:00, 25.22it/s]
 85%| | 67/79 [00:03<00:00, 25.42it/s]
 89%| | 70/79 [00:03<00:00, 25.47it/s]
 92%|| 73/79 [00:03<00:00, 25.84it/s]
 96%|| 76/79 [00:03<00:00, 26.40it/s]
100%|| 79/79 [00:03<00:00, 27.33it/s]
, 23.63it/s]
 70%|   | 55/79 [00:03<00:00, 24.08it/s]
 73%|  | 58/79 [00:03<00:00, 24.52it/s]
 77%|  | 61/79 [00:03<00:00, 24.25it/s]
 81%|  | 64/79 [00:03<00:00, 24.26it/s]
 85%| | 67/79 [00:03<00:00, 24.66it/s]
 89%| | 70/79 [00:03<00:00, 24.73it/s]
 92%|| 73/79 [00:03<00:00, 24.97it/s]
 96%|| 76/79 [00:03<00:00, 25.79it/s]
100%|| 79/79 [00:04<00:00, 26.75it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:00, 24.20it/s]
 73%|  | 58/79 [00:03<00:00, 24.51it/s]
 77%|  | 61/79 [00:03<00:00, 24.79it/s]
 81%|  | 64/79 [00:03<00:00, 25.09it/s]
 85%| | 67/79 [00:03<00:00, 25.26it/s]
 89%| | 70/79 [00:03<00:00, 25.19it/s]
 92%|| 73/79 [00:03<00:00, 25.43it/s]
 96%|| 76/79 [00:03<00:00, 26.12it/s]
100%|| 79/79 [00:04<00:00, 26.59it/s]
81it/s]
 68%|   | 54/79 [00:03<00:01, 24.18it/s]
 72%|  | 57/79 [00:03<00:00, 24.45it/s]
 76%|  | 60/79 [00:03<00:00, 24.83it/s]
 80%|  | 63/79 [00:03<00:00, 24.94it/s]
 84%| | 66/79 [00:03<00:00, 25.12it/s]
 87%| | 69/79 [00:03<00:00, 25.26it/s]
 91%| | 72/79 [00:03<00:00, 25.11it/s]
 95%|| 75/79 [00:03<00:00, 25.75it/s]
 99%|| 78/79 [00:03<00:00, 26.16it/s]
100%|| 79/79 [00:04<00:00, 19.40it/s]
, 24.04it/s]
 70%|   | 55/79 [00:03<00:00, 24.23it/s]
 73%|  | 58/79 [00:03<00:00, 24.46it/s]
 77%|  | 61/79 [00:03<00:00, 24.42it/s]
 81%|  | 64/79 [00:03<00:00, 24.60it/s]
 85%| | 67/79 [00:03<00:00, 24.89it/s]
 89%| | 70/79 [00:03<00:00, 24.97it/s]
 92%|| 73/79 [00:03<00:00, 25.33it/s]
 96%|| 76/79 [00:03<00:00, 25.95it/s]
100%|| 79/79 [00:04<00:00, 26.78it/s]
, 23.85it/s]
 70%|   | 55/79 [00:03<00:00, 24.37it/s]
 73%|  | 58/79 [00:03<00:00, 24.64it/s]
 77%|  | 61/79 [00:03<00:00, 24.77it/s]
 81%|  | 64/79 [00:03<00:00, 25.00it/s]
 85%| | 67/79 [00:03<00:00, 25.08it/s]
 89%| | 70/79 [00:03<00:00, 25.36it/s]
 92%|| 73/79 [00:03<00:00, 25.48it/s]
 96%|| 76/79 [00:03<00:00, 26.00it/s]
100%|| 79/79 [00:04<00:00, 26.79it/s]
, 23.56it/s]
 70%|   | 55/79 [00:03<00:00, 24.22it/s]
 73%|  | 58/79 [00:03<00:00, 24.61it/s]
 77%|  | 61/79 [00:03<00:00, 25.03it/s]
 81%|  | 64/79 [00:03<00:00, 25.09it/s]
 85%| | 67/79 [00:03<00:00, 25.41it/s]
 89%| | 70/79 [00:03<00:00, 25.01it/s]
 92%|| 73/79 [00:03<00:00, 25.31it/s]
 96%|| 76/79 [00:03<00:00, 25.89it/s]
100%|| 79/79 [00:04<00:00, 26.64it/s]
76it/s]
 68%|   | 54/79 [00:03<00:01, 23.91it/s]
 72%|  | 57/79 [00:03<00:00, 24.21it/s]
 76%|  | 60/79 [00:03<00:00, 24.51it/s]
 80%|  | 63/79 [00:03<00:00, 24.86it/s]
 84%| | 66/79 [00:03<00:00, 24.72it/s]
 87%| | 69/79 [00:03<00:00, 25.35it/s]
 91%| | 72/79 [00:03<00:00, 25.26it/s]
 95%|| 75/79 [00:03<00:00, 26.10it/s]
 99%|| 78/79 [00:04<00:00, 26.71it/s]
100%|| 79/79 [00:04<00:00, 19.18it/s]
, 23.20it/s]
 70%|   | 55/79 [00:03<00:01, 23.61it/s]
 73%|  | 58/79 [00:03<00:00, 24.29it/s]
 77%|  | 61/79 [00:03<00:00, 24.47it/s]
 81%|  | 64/79 [00:03<00:00, 24.57it/s]
 85%| | 67/79 [00:03<00:00, 24.77it/s]
 89%| | 70/79 [00:03<00:00, 24.93it/s]
 92%|| 73/79 [00:03<00:00, 25.19it/s]
 96%|| 76/79 [00:03<00:00, 25.92it/s]
100%|| 79/79 [00:04<00:00, 26.73it/s]
, 23.33it/s]
 70%|   | 55/79 [00:03<00:00, 24.01it/s]
 73%|  | 58/79 [00:03<00:00, 24.16it/s]
 77%|  | 61/79 [00:03<00:00, 24.46it/s]
 81%|  | 64/79 [00:03<00:00, 24.77it/s]
 85%| | 67/79 [00:03<00:00, 25.00it/s]
 89%| | 70/79 [00:03<00:00, 24.86it/s]
 92%|| 73/79 [00:03<00:00, 25.20it/s]
 96%|| 76/79 [00:04<00:00, 25.74it/s]
100%|| 79/79 [00:04<00:00, 26.42it/s]
, 21.06it/s]
 70%|   | 55/79 [00:03<00:01, 22.26it/s]
 73%|  | 58/79 [00:03<00:00, 23.21it/s]
 77%|  | 61/79 [00:03<00:00, 23.20it/s]
 81%|  | 64/79 [00:03<00:00, 23.76it/s]
 85%| | 67/79 [00:03<00:00, 21.84it/s]
 89%| | 70/79 [00:03<00:00, 22.88it/s]
 92%|| 73/79 [00:03<00:00, 23.69it/s]
 96%|| 76/79 [00:04<00:00, 24.83it/s]
100%|| 79/79 [00:04<00:00, 26.03it/s]
, 22.85it/s]
 70%|   | 55/79 [00:03<00:01, 23.14it/s]
 73%|  | 58/79 [00:03<00:00, 23.17it/s]
 77%|  | 61/79 [00:03<00:00, 23.64it/s]
 81%|  | 64/79 [00:03<00:00, 23.43it/s]
 85%| | 67/79 [00:03<00:00, 23.50it/s]
 89%| | 70/79 [00:03<00:00, 23.66it/s]
 92%|| 73/79 [00:03<00:00, 24.26it/s]
 96%|| 76/79 [00:04<00:00, 25.13it/s]
100%|| 79/79 [00:04<00:00, 26.16it/s]
2020-06-23 17:06:02,397 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.274871 (0.027359173583984375 s / img per device, on 32 devices)
2020-06-23 17:06:02,417 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:06:02,417 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:06:02,436 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592957171088, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 10, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592957171088, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 10}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:06:11,848 maskrcnn_benchmark.trainer INFO: eta: 1:06:34  iter: 8260  loss: 0.6419 (0.7732)  loss_classifier: 0.2184 (0.2834)  loss_box_reg: 0.0935 (0.1240)  loss_mask: 0.2516 (0.3044)  loss_objectness: 0.0231 (0.0397)  loss_rpn_box_reg: 0.0079 (0.0216)  time: 0.1086 (0.1258)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5148
2020-06-23 17:06:14,020 maskrcnn_benchmark.trainer INFO: eta: 1:06:30  iter: 8280  loss: 0.5934 (0.7728)  loss_classifier: 0.1913 (0.2833)  loss_box_reg: 0.0876 (0.1240)  loss_mask: 0.2624 (0.3043)  loss_objectness: 0.0165 (0.0397)  loss_rpn_box_reg: 0.0069 (0.0215)  time: 0.1088 (0.1258)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5148
2020-06-23 17:06:16,196 maskrcnn_benchmark.trainer INFO: eta: 1:06:26  iter: 8300  loss: 0.5355 (0.7723)  loss_classifier: 0.1708 (0.2831)  loss_box_reg: 0.0768 (0.1239)  loss_mask: 0.2466 (0.3042)  loss_objectness: 0.0119 (0.0396)  loss_rpn_box_reg: 0.0059 (0.0215)  time: 0.1091 (0.1258)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 17:06:18,361 maskrcnn_benchmark.trainer INFO: eta: 1:06:22  iter: 8320  loss: 0.7014 (0.7721)  loss_classifier: 0.2651 (0.2830)  loss_box_reg: 0.1190 (0.1239)  loss_mask: 0.2591 (0.3041)  loss_objectness: 0.0224 (0.0396)  loss_rpn_box_reg: 0.0102 (0.0215)  time: 0.1081 (0.1257)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5148
DONE (t=0.74s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.71s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.29683
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.50055
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.31646
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.16287
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.32626
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.37951
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.27015
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.42954
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.45091
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27033
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.48714
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.57276
2020-06-23 17:06:20,532 maskrcnn_benchmark.trainer INFO: eta: 1:06:18  iter: 8340  loss: 0.6976 (0.7719)  loss_classifier: 0.2201 (0.2829)  loss_box_reg: 0.1088 (0.1238)  loss_mask: 0.2628 (0.3040)  loss_objectness: 0.0236 (0.0396)  loss_rpn_box_reg: 0.0091 (0.0215)  time: 0.1074 (0.1257)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5148
2020-06-23 17:06:22,726 maskrcnn_benchmark.trainer INFO: eta: 1:06:15  iter: 8360  loss: 0.6294 (0.7717)  loss_classifier: 0.2141 (0.2828)  loss_box_reg: 0.1044 (0.1238)  loss_mask: 0.2839 (0.3040)  loss_objectness: 0.0218 (0.0396)  loss_rpn_box_reg: 0.0160 (0.0215)  time: 0.1076 (0.1256)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5148
2020-06-23 17:06:24,910 maskrcnn_benchmark.trainer INFO: eta: 1:06:11  iter: 8380  loss: 0.6703 (0.7715)  loss_classifier: 0.2412 (0.2827)  loss_box_reg: 0.1308 (0.1238)  loss_mask: 0.2669 (0.3039)  loss_objectness: 0.0147 (0.0396)  loss_rpn_box_reg: 0.0123 (0.0215)  time: 0.1088 (0.1256)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:06:27,072 maskrcnn_benchmark.trainer INFO: eta: 1:06:07  iter: 8400  loss: 0.6871 (0.7713)  loss_classifier: 0.2501 (0.2827)  loss_box_reg: 0.1128 (0.1238)  loss_mask: 0.2751 (0.3038)  loss_objectness: 0.0294 (0.0396)  loss_rpn_box_reg: 0.0128 (0.0215)  time: 0.1080 (0.1256)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5148
DONE (t=1.93s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:06:29,238 maskrcnn_benchmark.trainer INFO: eta: 1:06:03  iter: 8420  loss: 0.6534 (0.7712)  loss_classifier: 0.2366 (0.2826)  loss_box_reg: 0.1113 (0.1238)  loss_mask: 0.2503 (0.3037)  loss_objectness: 0.0162 (0.0395)  loss_rpn_box_reg: 0.0109 (0.0215)  time: 0.1070 (0.1255)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5148
DONE (t=2.70s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.28215
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.47268
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.29394
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11940
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.30859
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.40956
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.26170
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.40545
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.42339
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.23358
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.46396
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.55944
2020-06-23 17:06:31,541 maskrcnn_benchmark.trainer INFO: eta: 1:06:00  iter: 8440  loss: 0.6475 (0.7710)  loss_classifier: 0.2393 (0.2825)  loss_box_reg: 0.1089 (0.1238)  loss_mask: 0.2899 (0.3037)  loss_objectness: 0.0250 (0.0395)  loss_rpn_box_reg: 0.0127 (0.0215)  time: 0.1077 (0.1255)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5148
2020-06-23 17:06:31,542 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.29683392997858377, segm mAP: 0.2821463730055364
:::MLLOG {"namespace": "", "time_ms": 1592957191542, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.29683392997858377, "SEGM": 0.2821463730055364}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 9}}
:::MLLOG {"namespace": "", "time_ms": 1592957191542, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 9}}
2020-06-23 17:06:33,708 maskrcnn_benchmark.trainer INFO: eta: 1:05:56  iter: 8460  loss: 0.6787 (0.7708)  loss_classifier: 0.2426 (0.2824)  loss_box_reg: 0.1109 (0.1238)  loss_mask: 0.2575 (0.3036)  loss_objectness: 0.0184 (0.0395)  loss_rpn_box_reg: 0.0099 (0.0215)  time: 0.1082 (0.1255)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5148
2020-06-23 17:06:35,890 maskrcnn_benchmark.trainer INFO: eta: 1:05:52  iter: 8480  loss: 0.5805 (0.7703)  loss_classifier: 0.2082 (0.2822)  loss_box_reg: 0.0845 (0.1237)  loss_mask: 0.2439 (0.3035)  loss_objectness: 0.0141 (0.0395)  loss_rpn_box_reg: 0.0084 (0.0215)  time: 0.1082 (0.1254)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5148
2020-06-23 17:06:38,041 maskrcnn_benchmark.trainer INFO: eta: 1:05:49  iter: 8500  loss: 0.6796 (0.7701)  loss_classifier: 0.2446 (0.2822)  loss_box_reg: 0.1272 (0.1237)  loss_mask: 0.2717 (0.3034)  loss_objectness: 0.0192 (0.0394)  loss_rpn_box_reg: 0.0074 (0.0215)  time: 0.1070 (0.1254)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5148
2020-06-23 17:06:40,184 maskrcnn_benchmark.trainer INFO: eta: 1:05:45  iter: 8520  loss: 0.5713 (0.7697)  loss_classifier: 0.2083 (0.2820)  loss_box_reg: 0.0841 (0.1236)  loss_mask: 0.2434 (0.3033)  loss_objectness: 0.0179 (0.0394)  loss_rpn_box_reg: 0.0107 (0.0215)  time: 0.1069 (0.1253)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5148
2020-06-23 17:06:42,352 maskrcnn_benchmark.trainer INFO: eta: 1:05:41  iter: 8540  loss: 0.6931 (0.7696)  loss_classifier: 0.2631 (0.2819)  loss_box_reg: 0.1124 (0.1236)  loss_mask: 0.2632 (0.3032)  loss_objectness: 0.0285 (0.0394)  loss_rpn_box_reg: 0.0120 (0.0215)  time: 0.1074 (0.1253)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5148
2020-06-23 17:06:44,514 maskrcnn_benchmark.trainer INFO: eta: 1:05:37  iter: 8560  loss: 0.6613 (0.7693)  loss_classifier: 0.2448 (0.2818)  loss_box_reg: 0.1005 (0.1235)  loss_mask: 0.2545 (0.3031)  loss_objectness: 0.0235 (0.0394)  loss_rpn_box_reg: 0.0076 (0.0215)  time: 0.1077 (0.1252)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5148
2020-06-23 17:06:46,688 maskrcnn_benchmark.trainer INFO: eta: 1:05:34  iter: 8580  loss: 0.7200 (0.7691)  loss_classifier: 0.2527 (0.2818)  loss_box_reg: 0.1200 (0.1235)  loss_mask: 0.2643 (0.3030)  loss_objectness: 0.0249 (0.0394)  loss_rpn_box_reg: 0.0096 (0.0215)  time: 0.1075 (0.1252)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5148
2020-06-23 17:06:48,848 maskrcnn_benchmark.trainer INFO: eta: 1:05:30  iter: 8600  loss: 0.6587 (0.7689)  loss_classifier: 0.2280 (0.2817)  loss_box_reg: 0.1005 (0.1235)  loss_mask: 0.2786 (0.3030)  loss_objectness: 0.0172 (0.0394)  loss_rpn_box_reg: 0.0074 (0.0214)  time: 0.1068 (0.1252)  data: 0.0013 (0.0180)  lr: 0.160000  max mem: 5148
2020-06-23 17:06:51,000 maskrcnn_benchmark.trainer INFO: eta: 1:05:26  iter: 8620  loss: 0.6097 (0.7686)  loss_classifier: 0.2015 (0.2815)  loss_box_reg: 0.0863 (0.1234)  loss_mask: 0.2558 (0.3029)  loss_objectness: 0.0173 (0.0394)  loss_rpn_box_reg: 0.0049 (0.0214)  time: 0.1067 (0.1251)  data: 0.0013 (0.0180)  lr: 0.160000  max mem: 5148
2020-06-23 17:06:53,172 maskrcnn_benchmark.trainer INFO: eta: 1:05:22  iter: 8640  loss: 0.6505 (0.7684)  loss_classifier: 0.2476 (0.2814)  loss_box_reg: 0.1034 (0.1234)  loss_mask: 0.2600 (0.3028)  loss_objectness: 0.0195 (0.0393)  loss_rpn_box_reg: 0.0084 (0.0214)  time: 0.1079 (0.1251)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5148
2020-06-23 17:06:55,324 maskrcnn_benchmark.trainer INFO: eta: 1:05:19  iter: 8660  loss: 0.6717 (0.7683)  loss_classifier: 0.2257 (0.2814)  loss_box_reg: 0.1108 (0.1234)  loss_mask: 0.2712 (0.3027)  loss_objectness: 0.0237 (0.0393)  loss_rpn_box_reg: 0.0060 (0.0214)  time: 0.1074 (0.1250)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5148
2020-06-23 17:06:57,481 maskrcnn_benchmark.trainer INFO: eta: 1:05:15  iter: 8680  loss: 0.6601 (0.7681)  loss_classifier: 0.2387 (0.2813)  loss_box_reg: 0.0930 (0.1234)  loss_mask: 0.2619 (0.3026)  loss_objectness: 0.0252 (0.0393)  loss_rpn_box_reg: 0.0094 (0.0214)  time: 0.1077 (0.1250)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5148
2020-06-23 17:06:59,635 maskrcnn_benchmark.trainer INFO: eta: 1:05:11  iter: 8700  loss: 0.6898 (0.7679)  loss_classifier: 0.2333 (0.2812)  loss_box_reg: 0.1074 (0.1233)  loss_mask: 0.2841 (0.3026)  loss_objectness: 0.0251 (0.0393)  loss_rpn_box_reg: 0.0072 (0.0214)  time: 0.1068 (0.1250)  data: 0.0013 (0.0178)  lr: 0.160000  max mem: 5148
2020-06-23 17:07:01,805 maskrcnn_benchmark.trainer INFO: eta: 1:05:07  iter: 8720  loss: 0.6349 (0.7677)  loss_classifier: 0.2085 (0.2811)  loss_box_reg: 0.0946 (0.1233)  loss_mask: 0.2683 (0.3026)  loss_objectness: 0.0167 (0.0393)  loss_rpn_box_reg: 0.0091 (0.0213)  time: 0.1080 (0.1249)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5148
2020-06-23 17:07:03,951 maskrcnn_benchmark.trainer INFO: eta: 1:05:04  iter: 8740  loss: 0.6709 (0.7675)  loss_classifier: 0.2499 (0.2811)  loss_box_reg: 0.1165 (0.1233)  loss_mask: 0.2767 (0.3025)  loss_objectness: 0.0200 (0.0393)  loss_rpn_box_reg: 0.0074 (0.0213)  time: 0.1072 (0.1249)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5148
2020-06-23 17:07:06,100 maskrcnn_benchmark.trainer INFO: eta: 1:05:00  iter: 8760  loss: 0.5004 (0.7672)  loss_classifier: 0.1870 (0.2810)  loss_box_reg: 0.0829 (0.1233)  loss_mask: 0.2641 (0.3024)  loss_objectness: 0.0171 (0.0392)  loss_rpn_box_reg: 0.0055 (0.0213)  time: 0.1072 (0.1249)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5148
2020-06-23 17:07:08,245 maskrcnn_benchmark.trainer INFO: eta: 1:04:56  iter: 8780  loss: 0.6172 (0.7669)  loss_classifier: 0.2168 (0.2808)  loss_box_reg: 0.1019 (0.1232)  loss_mask: 0.2522 (0.3023)  loss_objectness: 0.0204 (0.0392)  loss_rpn_box_reg: 0.0097 (0.0213)  time: 0.1068 (0.1248)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5148
2020-06-23 17:07:10,398 maskrcnn_benchmark.trainer INFO: eta: 1:04:52  iter: 8800  loss: 0.6127 (0.7665)  loss_classifier: 0.2085 (0.2807)  loss_box_reg: 0.0959 (0.1232)  loss_mask: 0.2499 (0.3022)  loss_objectness: 0.0237 (0.0391)  loss_rpn_box_reg: 0.0100 (0.0213)  time: 0.1069 (0.1248)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5148
2020-06-23 17:07:12,575 maskrcnn_benchmark.trainer INFO: eta: 1:04:49  iter: 8820  loss: 0.7681 (0.7663)  loss_classifier: 0.2897 (0.2807)  loss_box_reg: 0.1164 (0.1232)  loss_mask: 0.2675 (0.3021)  loss_objectness: 0.0159 (0.0391)  loss_rpn_box_reg: 0.0072 (0.0213)  time: 0.1089 (0.1247)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5148
2020-06-23 17:07:14,745 maskrcnn_benchmark.trainer INFO: eta: 1:04:45  iter: 8840  loss: 0.6692 (0.7661)  loss_classifier: 0.2400 (0.2806)  loss_box_reg: 0.1077 (0.1231)  loss_mask: 0.2722 (0.3021)  loss_objectness: 0.0223 (0.0391)  loss_rpn_box_reg: 0.0099 (0.0212)  time: 0.1082 (0.1247)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5148
2020-06-23 17:07:16,885 maskrcnn_benchmark.trainer INFO: eta: 1:04:41  iter: 8860  loss: 0.6257 (0.7659)  loss_classifier: 0.2273 (0.2805)  loss_box_reg: 0.1120 (0.1231)  loss_mask: 0.2581 (0.3020)  loss_objectness: 0.0202 (0.0391)  loss_rpn_box_reg: 0.0108 (0.0212)  time: 0.1071 (0.1247)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5148
2020-06-23 17:07:19,036 maskrcnn_benchmark.trainer INFO: eta: 1:04:38  iter: 8880  loss: 0.7346 (0.7658)  loss_classifier: 0.2434 (0.2805)  loss_box_reg: 0.1224 (0.1231)  loss_mask: 0.3098 (0.3020)  loss_objectness: 0.0325 (0.0391)  loss_rpn_box_reg: 0.0123 (0.0212)  time: 0.1078 (0.1246)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5148
2020-06-23 17:07:21,171 maskrcnn_benchmark.trainer INFO: eta: 1:04:34  iter: 8900  loss: 0.6924 (0.7657)  loss_classifier: 0.2447 (0.2804)  loss_box_reg: 0.0880 (0.1231)  loss_mask: 0.2506 (0.3019)  loss_objectness: 0.0247 (0.0391)  loss_rpn_box_reg: 0.0107 (0.0213)  time: 0.1068 (0.1246)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5148
2020-06-23 17:07:23,319 maskrcnn_benchmark.trainer INFO: eta: 1:04:30  iter: 8920  loss: 0.6125 (0.7655)  loss_classifier: 0.2491 (0.2804)  loss_box_reg: 0.1040 (0.1231)  loss_mask: 0.2482 (0.3018)  loss_objectness: 0.0173 (0.0390)  loss_rpn_box_reg: 0.0159 (0.0213)  time: 0.1072 (0.1245)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5148
2020-06-23 17:07:25,481 maskrcnn_benchmark.trainer INFO: eta: 1:04:27  iter: 8940  loss: 0.6046 (0.7653)  loss_classifier: 0.2226 (0.2803)  loss_box_reg: 0.0940 (0.1230)  loss_mask: 0.2547 (0.3017)  loss_objectness: 0.0194 (0.0390)  loss_rpn_box_reg: 0.0076 (0.0213)  time: 0.1078 (0.1245)  data: 0.0013 (0.0174)  lr: 0.160000  max mem: 5148
2020-06-23 17:07:27,634 maskrcnn_benchmark.trainer INFO: eta: 1:04:23  iter: 8960  loss: 0.7429 (0.7652)  loss_classifier: 0.2503 (0.2803)  loss_box_reg: 0.1297 (0.1230)  loss_mask: 0.2812 (0.3016)  loss_objectness: 0.0196 (0.0390)  loss_rpn_box_reg: 0.0107 (0.0213)  time: 0.1065 (0.1245)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5148
2020-06-23 17:07:29,784 maskrcnn_benchmark.trainer INFO: eta: 1:04:19  iter: 8980  loss: 0.7169 (0.7650)  loss_classifier: 0.2675 (0.2802)  loss_box_reg: 0.1213 (0.1230)  loss_mask: 0.2763 (0.3016)  loss_objectness: 0.0227 (0.0390)  loss_rpn_box_reg: 0.0099 (0.0212)  time: 0.1074 (0.1244)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5148
2020-06-23 17:07:31,942 maskrcnn_benchmark.trainer INFO: eta: 1:04:16  iter: 9000  loss: 0.6813 (0.7648)  loss_classifier: 0.2126 (0.2801)  loss_box_reg: 0.1011 (0.1230)  loss_mask: 0.2727 (0.3015)  loss_objectness: 0.0142 (0.0390)  loss_rpn_box_reg: 0.0070 (0.0212)  time: 0.1077 (0.1244)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5148
2020-06-23 17:07:34,091 maskrcnn_benchmark.trainer INFO: eta: 1:04:12  iter: 9020  loss: 0.6503 (0.7645)  loss_classifier: 0.2262 (0.2800)  loss_box_reg: 0.1106 (0.1230)  loss_mask: 0.2666 (0.3014)  loss_objectness: 0.0212 (0.0389)  loss_rpn_box_reg: 0.0101 (0.0212)  time: 0.1071 (0.1244)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5148
2020-06-23 17:07:36,255 maskrcnn_benchmark.trainer INFO: eta: 1:04:08  iter: 9040  loss: 0.6013 (0.7643)  loss_classifier: 0.2125 (0.2799)  loss_box_reg: 0.0967 (0.1229)  loss_mask: 0.2529 (0.3013)  loss_objectness: 0.0249 (0.0389)  loss_rpn_box_reg: 0.0069 (0.0212)  time: 0.1079 (0.1243)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5148
2020-06-23 17:07:38,441 maskrcnn_benchmark.trainer INFO: eta: 1:04:05  iter: 9060  loss: 0.5755 (0.7640)  loss_classifier: 0.1770 (0.2797)  loss_box_reg: 0.1013 (0.1229)  loss_mask: 0.2392 (0.3012)  loss_objectness: 0.0180 (0.0389)  loss_rpn_box_reg: 0.0077 (0.0212)  time: 0.1088 (0.1243)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5148
2020-06-23 17:07:40,625 maskrcnn_benchmark.trainer INFO: eta: 1:04:01  iter: 9080  loss: 0.6577 (0.7637)  loss_classifier: 0.2412 (0.2796)  loss_box_reg: 0.1033 (0.1228)  loss_mask: 0.2745 (0.3012)  loss_objectness: 0.0135 (0.0389)  loss_rpn_box_reg: 0.0050 (0.0212)  time: 0.1095 (0.1243)  data: 0.0013 (0.0172)  lr: 0.016000  max mem: 5148
2020-06-23 17:07:42,789 maskrcnn_benchmark.trainer INFO: eta: 1:03:58  iter: 9100  loss: 0.6387 (0.7634)  loss_classifier: 0.2166 (0.2795)  loss_box_reg: 0.1010 (0.1228)  loss_mask: 0.2680 (0.3011)  loss_objectness: 0.0137 (0.0389)  loss_rpn_box_reg: 0.0064 (0.0212)  time: 0.1082 (0.1242)  data: 0.0013 (0.0171)  lr: 0.016000  max mem: 5148
2020-06-23 17:07:44,958 maskrcnn_benchmark.trainer INFO: eta: 1:03:54  iter: 9120  loss: 0.6036 (0.7631)  loss_classifier: 0.2240 (0.2794)  loss_box_reg: 0.0957 (0.1228)  loss_mask: 0.2248 (0.3010)  loss_objectness: 0.0157 (0.0388)  loss_rpn_box_reg: 0.0099 (0.0212)  time: 0.1077 (0.1242)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5148
2020-06-23 17:07:47,149 maskrcnn_benchmark.trainer INFO: eta: 1:03:51  iter: 9140  loss: 0.5543 (0.7627)  loss_classifier: 0.1817 (0.2792)  loss_box_reg: 0.1021 (0.1227)  loss_mask: 0.2481 (0.3008)  loss_objectness: 0.0153 (0.0388)  loss_rpn_box_reg: 0.0074 (0.0211)  time: 0.1094 (0.1242)  data: 0.0015 (0.0171)  lr: 0.016000  max mem: 5148
2020-06-23 17:07:49,305 maskrcnn_benchmark.trainer INFO: eta: 1:03:47  iter: 9160  loss: 0.5901 (0.7624)  loss_classifier: 0.1941 (0.2791)  loss_box_reg: 0.0917 (0.1226)  loss_mask: 0.2458 (0.3007)  loss_objectness: 0.0140 (0.0388)  loss_rpn_box_reg: 0.0054 (0.0211)  time: 0.1071 (0.1241)  data: 0.0014 (0.0170)  lr: 0.016000  max mem: 5148
:::MLLOG {"namespace": "", "time_ms": 1592957270379, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 10}}
:::MLLOG {"namespace": "", "time_ms": 1592957270379, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 10}}
:::MLLOG {"namespace": "", "time_ms": 1592957270379, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 10}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 17:07:50,598 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 17:07:50,905 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:53,  1.45it/s]
  5%|         | 4/79 [00:00<00:37,  2.02it/s]
  9%|         | 7/79 [00:00<00:25,  2.79it/s]
 13%|        | 10/79 [00:01<00:18,  3.80it/s]
 16%|        | 13/79 [00:01<00:12,  5.09it/s]
 20%|        | 16/79 [00:01<00:09,  6.70it/s]
 24%|       | 19/79 [00:01<00:06,  8.58it/s]
 28%|       | 22/79 [00:01<00:05, 10.69it/s]
 32%|      | 25/79 [00:01<00:04, 12.84it/s]
 35%|      | 28/79 [00:01<00:03, 15.09it/s]
 39%|      | 31/79 [00:01<00:02, 17.19it/s]
 43%|     | 34/79 [00:02<00:02, 19.06it/s]
 47%|     | 37/79 [00:02<00:02, 20.53it/s]
 51%|     | 40/79 [00:02<00:01, 21.72it/s]
 54%|    | 43/79 [00:02<00:01, 22.70it/s]
 58%|    | 46/79 [00:02<00:01, 23.31it/s]
 62%|   | 49/79 [00:02<00:01, 23.80it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:59,  1.31it/s]
  4%|         | 3/79 [00:00<00:41,  1.82it/s]
  8%|         | 6/79 [00:00<00:28,  2.52it/s]
 11%|        | 9/79 [00:01<00:20,  3.46it/s]
 15%|        | 12/79 [00:01<00:14,  4.68it/s]
 19%|        | 15/79 [00:01<00:10,  6.20it/s]
 23%|       | 18/79 [00:01<00:07,  8.03it/s]
 27%|       | 21/79 [00:01<00:05, 10.13it/s]
 30%|       | 24/79 [00:01<00:04, 12.36it/s]
 34%|      | 27/79 [00:01<00:03, 14.56it/s]
 38%|      | 30/79 [00:01<00:02, 16.71it/s]
 42%|     | 33/79 [00:02<00:02, 18.59it/s]
 46%|     | 36/79 [00:02<00:02, 20.17it/s]
 49%|     | 39/79 [00:02<00:01, 21.66it/s]
 53%|    | 42/79 [00:02<00:01, 22.82it/s]
 57%|    | 45/79 [00:02<00:01, 23.52it/s]
 61%|    | 48/79 [00:02<00:01, 24.17it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.26it/s]
  4%|         | 3/79 [00:00<00:43,  1.75it/s]
  8%|         | 6/79 [00:01<00:30,  2.43it/s]
 11%|        | 9/79 [00:01<00:20,  3.34it/s]
 15%|        | 12/79 [00:01<00:14,  4.51it/s]
 19%|        | 15/79 [00:01<00:10,  5.99it/s]
 23%|       | 18/79 [00:01<00:07,  7.78it/s]
 27%|       | 21/79 [00:01<00:05,  9.83it/s]
 30%|       | 24/79 [00:01<00:04, 12.09it/s]
 34%|      | 27/79 [00:01<00:03, 14.37it/s]
 38%|      | 30/79 [00:01<00:02, 16.57it/s]
 42%|     | 33/79 [00:02<00:02, 18.59it/s]
 46%|     | 36/79 [00:02<00:02, 20.43it/s]
 49%|     | 39/79 [00:02<00:01, 21.55it/s]
 53%|    | 42/79 [00:02<00:01, 22.65it/s]
 57%|    | 45/79 [00:02<00:01, 23.36it/s]
 61%|    | 48/79 [00:02<00:01, 23.95it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.27it/s]
 16%|        | 13/79 [00:01<00:14,  4.43it/s]
 20%|        | 16/79 [00:01<00:10,  5.92it/s]
 24%|       | 19/79 [00:01<00:07,  7.70it/s]
 28%|       | 22/79 [00:01<00:05,  9.78it/s]
 32%|      | 25/79 [00:01<00:04, 12.08it/s]
 35%|      | 28/79 [00:01<00:03, 14.44it/s]
 39%|      | 31/79 [00:01<00:02, 16.70it/s]
 43%|     | 34/79 [00:02<00:02, 18.73it/s]
 47%|     | 37/79 [00:02<00:02, 20.49it/s]
 51%|     | 40/79 [00:02<00:01, 22.01it/s]
 54%|    | 43/79 [00:02<00:01, 22.33it/s]
 58%|    | 46/79 [00:02<00:01, 23.39it/s]
 62%|   | 49/79 [00:02<00:01, 24.42it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:20,  3.29it/s]
 16%|        | 13/79 [00:01<00:14,  4.46it/s]
 20%|        | 16/79 [00:01<00:10,  5.94it/s]
 24%|       | 19/79 [00:01<00:07,  7.71it/s]
 28%|       | 22/79 [00:01<00:05,  9.78it/s]
 32%|      | 25/79 [00:01<00:04, 11.99it/s]
 35%|      | 28/79 [00:01<00:03, 14.42it/s]
 39%|      | 31/79 [00:01<00:02, 16.62it/s]
 43%|     | 34/79 [00:02<00:02, 18.73it/s]
 47%|     | 37/79 [00:02<00:02, 20.42it/s]
 51%|     | 40/79 [00:02<00:01, 21.81it/s]
 54%|    | 43/79 [00:02<00:01, 23.25it/s]
 58%|    | 46/79 [00:02<00:01, 23.87it/s]
 62%|   | 49/79 [00:02<00:01, 24.16it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.65it/s]
 28%|       | 22/79 [00:01<00:05,  9.70it/s]
 32%|      | 25/79 [00:01<00:04, 11.98it/s]
 35%|      | 28/79 [00:01<00:03, 14.35it/s]
 39%|      | 31/79 [00:01<00:02, 16.62it/s]
 43%|     | 34/79 [00:02<00:02, 18.67it/s]
 47%|     | 37/79 [00:02<00:02, 20.41it/s]
 51%|     | 40/79 [00:02<00:01, 21.88it/s]
 54%|    | 43/79 [00:02<00:01, 22.94it/s]
 58%|    | 46/79 [00:02<00:01, 23.62it/s]
 62%|   | 49/79 [00:02<00:01, 24.46it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:43,  1.74it/s]
  9%|         | 7/79 [00:01<00:29,  2.41it/s]
 13%|        | 10/79 [00:01<00:20,  3.31it/s]
 16%|        | 13/79 [00:01<00:14,  4.48it/s]
 20%|        | 16/79 [00:01<00:10,  5.96it/s]
 24%|       | 19/79 [00:01<00:07,  7.75it/s]
 28%|       | 22/79 [00:01<00:05,  9.77it/s]
 32%|      | 25/79 [00:01<00:04, 11.99it/s]
 35%|      | 28/79 [00:01<00:03, 14.31it/s]
 39%|      | 31/79 [00:01<00:02, 16.49it/s]
 43%|     | 34/79 [00:02<00:02, 18.38it/s]
 47%|     | 37/79 [00:02<00:02, 20.13it/s]
 51%|     | 40/79 [00:02<00:01, 21.66it/s]
 54%|    | 43/79 [00:02<00:01, 22.68it/s]
 58%|    | 46/79 [00:02<00:01, 23.52it/s]
 62%|   | 49/79 [00:02<00:01, 24.06it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:20,  3.29it/s]
 16%|        | 13/79 [00:01<00:14,  4.46it/s]
 20%|        | 16/79 [00:01<00:10,  5.94it/s]
 24%|       | 19/79 [00:01<00:07,  7.72it/s]
 28%|       | 22/79 [00:01<00:05,  9.75it/s]
 32%|      | 25/79 [00:01<00:04, 12.02it/s]
 35%|      | 28/79 [00:01<00:03, 14.29it/s]
 39%|      | 31/79 [00:01<00:02, 16.44it/s]
 43%|     | 34/79 [00:02<00:02, 18.49it/s]
 47%|     | 37/79 [00:02<00:02, 20.31it/s]
 51%|     | 40/79 [00:02<00:01, 21.56it/s]
 54%|    | 43/79 [00:02<00:01, 22.58it/s]
 58%|    | 46/79 [00:02<00:01, 23.28it/s]
 62%|   | 49/79 [00:02<00:01, 24.07it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:00<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.35it/s]
 32%|      | 25/79 [00:01<00:04, 11.61it/s]
 35%|      | 28/79 [00:01<00:03, 13.99it/s]
 39%|      | 31/79 [00:02<00:02, 16.35it/s]
 43%|     | 34/79 [00:02<00:02, 18.44it/s]
 47%|     | 37/79 [00:02<00:02, 20.42it/s]
 51%|     | 40/79 [00:02<00:01, 21.87it/s]
 54%|    | 43/79 [00:02<00:01, 23.03it/s]
 58%|    | 46/79 [00:02<00:01, 23.89it/s]
 62%|   | 49/79 [00:02<00:01, 24.40it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.43it/s]
 28%|       | 22/79 [00:01<00:06,  9.47it/s]
 32%|      | 25/79 [00:01<00:04, 11.74it/s]
 35%|      | 28/79 [00:01<00:03, 14.09it/s]
 39%|      | 31/79 [00:02<00:02, 16.42it/s]
 43%|     | 34/79 [00:02<00:02, 18.27it/s]
 47%|     | 37/79 [00:02<00:02, 20.10it/s]
 51%|     | 40/79 [00:02<00:01, 21.49it/s]
 54%|    | 43/79 [00:02<00:01, 22.72it/s]
 58%|    | 46/79 [00:02<00:01, 23.55it/s]
 62%|   | 49/79 [00:02<00:01, 24.30it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:05,  9.53it/s]
 32%|      | 25/79 [00:01<00:04, 11.76it/s]
 35%|      | 28/79 [00:01<00:03, 14.04it/s]
 39%|      | 31/79 [00:02<00:02, 16.15it/s]
 43%|     | 34/79 [00:02<00:02, 18.21it/s]
 47%|     | 37/79 [00:02<00:02, 19.88it/s]
 51%|     | 40/79 [00:02<00:01, 21.18it/s]
 54%|    | 43/79 [00:02<00:01, 22.46it/s]
 58%|    | 46/79 [00:02<00:01, 23.16it/s]
 62%|   | 49/79 [00:02<00:01, 23.36it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:10,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.47it/s]
 28%|       | 22/79 [00:01<00:05,  9.50it/s]
 32%|      | 25/79 [00:01<00:04, 11.72it/s]
 35%|      | 28/79 [00:01<00:03, 14.04it/s]
 39%|      | 31/79 [00:02<00:02, 16.21it/s]
 43%|     | 34/79 [00:02<00:02, 18.19it/s]
 47%|     | 37/79 [00:02<00:02, 19.94it/s]
 51%|     | 40/79 [00:02<00:01, 21.36it/s]
 54%|    | 43/79 [00:02<00:01, 22.66it/s]
 58%|    | 46/79 [00:02<00:01, 23.29it/s]
 62%|   | 49/79 [00:02<00:01, 24.10it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.35it/s]
 32%|      | 25/79 [00:01<00:04, 11.56it/s]
 35%|      | 28/79 [00:01<00:03, 13.89it/s]
 39%|      | 31/79 [00:02<00:02, 16.24it/s]
 43%|     | 34/79 [00:02<00:02, 18.28it/s]
 47%|     | 37/79 [00:02<00:02, 20.14it/s]
 51%|     | 40/79 [00:02<00:01, 21.24it/s]
 54%|    | 43/79 [00:02<00:01, 22.50it/s]
 58%|    | 46/79 [00:02<00:01, 23.22it/s]
 62%|   | 49/79 [00:02<00:01, 23.98it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.69it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.62it/s]
 35%|      | 28/79 [00:01<00:03, 13.91it/s]
 39%|      | 31/79 [00:02<00:02, 16.07it/s]
 43%|     | 34/79 [00:02<00:02, 18.19it/s]
 47%|     | 37/79 [00:02<00:02, 19.77it/s]
 51%|     | 40/79 [00:02<00:01, 21.22it/s]
 54%|    | 43/79 [00:02<00:01, 22.12it/s]
 58%|    | 46/79 [00:02<00:01, 22.91it/s]
 62%|   | 49/79 [00:02<00:01, 23.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:05,  9.56it/s]
 32%|      | 25/79 [00:01<00:04, 11.78it/s]
 35%|      | 28/79 [00:01<00:03, 14.13it/s]
 39%|      | 31/79 [00:02<00:02, 16.38it/s]
 43%|     | 34/79 [00:02<00:02, 18.38it/s]
 47%|     | 37/79 [00:02<00:02, 20.24it/s]
 51%|     | 40/79 [00:02<00:01, 21.54it/s]
 54%|    | 43/79 [00:02<00:01, 22.36it/s]
 58%|    | 46/79 [00:02<00:01, 23.09it/s]
 62%|   | 49/79 [00:02<00:01, 23.84it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.47it/s]
 28%|       | 22/79 [00:01<00:05,  9.52it/s]
 32%|      | 25/79 [00:01<00:04, 11.78it/s]
 35%|      | 28/79 [00:01<00:03, 14.03it/s]
 39%|      | 31/79 [00:02<00:02, 16.37it/s]
 43%|     | 34/79 [00:02<00:02, 18.40it/s]
 47%|     | 37/79 [00:02<00:02, 20.23it/s]
 51%|     | 40/79 [00:02<00:01, 21.57it/s]
 54%|    | 43/79 [00:02<00:01, 22.56it/s]
 58%|    | 46/79 [00:02<00:01, 23.53it/s]
 62%|   | 49/79 [00:02<00:01, 24.34it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.56it/s]
 28%|       | 22/79 [00:01<00:05,  9.55it/s]
 32%|      | 25/79 [00:01<00:04, 11.77it/s]
 35%|      | 28/79 [00:01<00:03, 14.07it/s]
 39%|      | 31/79 [00:02<00:02, 16.14it/s]
 43%|     | 34/79 [00:02<00:02, 18.19it/s]
 47%|     | 37/79 [00:02<00:02, 19.81it/s]
 51%|     | 40/79 [00:02<00:01, 21.24it/s]
 54%|    | 43/79 [00:02<00:01, 22.28it/s]
 58%|    | 46/79 [00:02<00:01, 23.28it/s]
 62%|   | 49/79 [00:02<00:01, 24.04it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.33it/s]
 28%|       | 22/79 [00:01<00:06,  9.33it/s]
 32%|      | 25/79 [00:01<00:04, 11.56it/s]
 35%|      | 28/79 [00:01<00:03, 13.86it/s]
 39%|      | 31/79 [00:02<00:02, 16.15it/s]
 43%|     | 34/79 [00:02<00:02, 18.29it/s]
 47%|     | 37/79 [00:02<00:02, 20.13it/s]
 51%|     | 40/79 [00:02<00:01, 21.55it/s]
 54%|    | 43/79 [00:02<00:01, 22.69it/s]
 58%|    | 46/79 [00:02<00:01, 23.60it/s]
 62%|   | 49/79 [00:02<00:01, 24.07it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.46it/s]
 28%|       | 22/79 [00:01<00:06,  9.48it/s]
 32%|      | 25/79 [00:01<00:04, 11.71it/s]
 35%|      | 28/79 [00:01<00:03, 14.03it/s]
 39%|      | 31/79 [00:02<00:02, 16.20it/s]
 43%|     | 34/79 [00:02<00:02, 18.34it/s]
 47%|     | 37/79 [00:02<00:02, 20.02it/s]
 51%|     | 40/79 [00:02<00:01, 21.49it/s]
 54%|    | 43/79 [00:02<00:01, 22.63it/s]
 58%|    | 46/79 [00:02<00:01, 23.55it/s]
 62%|   | 49/79 [00:02<00:01, 24.34it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.31it/s]
 32%|      | 25/79 [00:01<00:04, 11.46it/s]
 35%|      | 28/79 [00:01<00:03, 13.75it/s]
 39%|      | 31/79 [00:02<00:03, 15.99it/s]
 43%|     | 34/79 [00:02<00:02, 18.17it/s]
 47%|     | 37/79 [00:02<00:02, 19.81it/s]
 51%|     | 40/79 [00:02<00:01, 21.37it/s]
 54%|    | 43/79 [00:02<00:01, 22.54it/s]
 58%|    | 46/79 [00:02<00:01, 23.47it/s]
 62%|   | 49/79 [00:02<00:01, 24.37it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.39it/s]
 32%|      | 25/79 [00:01<00:04, 11.56it/s]
 35%|      | 28/79 [00:01<00:03, 13.80it/s]
 39%|      | 31/79 [00:02<00:03, 16.00it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.63it/s]
 51%|     | 40/79 [00:02<00:01, 20.91it/s]
 54%|    | 43/79 [00:02<00:01, 22.25it/s]
 58%|    | 46/79 [00:02<00:01, 23.16it/s]
 62%|   | 49/79 [00:02<00:01, 23.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.07it/s]
 32%|      | 25/79 [00:01<00:04, 11.21it/s]
 35%|      | 28/79 [00:01<00:03, 13.49it/s]
 39%|      | 31/79 [00:02<00:03, 15.74it/s]
 43%|     | 34/79 [00:02<00:02, 17.66it/s]
 47%|     | 37/79 [00:02<00:02, 19.56it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 22.33it/s]
 58%|    | 46/79 [00:02<00:01, 23.04it/s]
 62%|   | 49/79 [00:02<00:01, 23.72it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.36it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.06it/s]
 35%|      | 28/79 [00:01<00:03, 13.27it/s]
 39%|      | 31/79 [00:02<00:03, 15.56it/s]
 43%|     | 34/79 [00:02<00:02, 17.66it/s]
 47%|     | 37/79 [00:02<00:02, 19.31it/s]
 51%|     | 40/79 [00:02<00:01, 20.88it/s]
 54%|    | 43/79 [00:02<00:01, 22.07it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.29it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  8.96it/s]
 32%|      | 25/79 [00:01<00:04, 11.13it/s]
 35%|      | 28/79 [00:01<00:03, 13.42it/s]
 39%|      | 31/79 [00:02<00:03, 15.62it/s]
 43%|     | 34/79 [00:02<00:02, 17.71it/s]
 47%|     | 37/79 [00:02<00:02, 19.50it/s]
 51%|     | 40/79 [00:02<00:01, 21.06it/s]
 54%|    | 43/79 [00:02<00:01, 22.17it/s]
 58%|    | 46/79 [00:02<00:01, 22.99it/s]
 62%|   | 49/79 [00:02<00:01, 23.71it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.20it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.30it/s]
 35%|      | 28/79 [00:01<00:03, 13.54it/s]
 39%|      | 31/79 [00:02<00:03, 15.68it/s]
 43%|     | 34/79 [00:02<00:02, 17.56it/s]
 47%|     | 37/79 [00:02<00:02, 19.26it/s]
 51%|     | 40/79 [00:02<00:01, 20.52it/s]
 54%|    | 43/79 [00:02<00:01, 21.52it/s]
 58%|    | 46/79 [00:02<00:01, 22.33it/s]
 62%|   | 49/79 [00:02<00:01, 23.30it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.23it/s]
 35%|      | 28/79 [00:01<00:03, 13.42it/s]
 39%|      | 31/79 [00:02<00:03, 15.67it/s]
 43%|     | 34/79 [00:02<00:02, 17.56it/s]
 47%|     | 37/79 [00:02<00:02, 19.25it/s]
 51%|     | 40/79 [00:02<00:01, 20.53it/s]
 54%|    | 43/79 [00:02<00:01, 21.46it/s]
 58%|    | 46/79 [00:02<00:01, 22.23it/s]
 62%|   | 49/79 [00:02<00:01, 22.62it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.25it/s]
 32%|      | 25/79 [00:01<00:04, 11.36it/s]
 35%|      | 28/79 [00:01<00:03, 13.60it/s]
 39%|      | 31/79 [00:02<00:03, 15.73it/s]
 43%|     | 34/79 [00:02<00:02, 17.45it/s]
 47%|     | 37/79 [00:02<00:02, 19.07it/s]
 51%|     | 40/79 [00:02<00:01, 20.46it/s]
 54%|    | 43/79 [00:02<00:01, 21.39it/s]
 58%|    | 46/79 [00:02<00:01, 22.19it/s]
 62%|   | 49/79 [00:02<00:01, 23.02it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  7.01it/s]
 28%|       | 22/79 [00:01<00:06,  8.96it/s]
 32%|      | 25/79 [00:01<00:04, 11.10it/s]
 35%|      | 28/79 [00:01<00:03, 13.36it/s]
 39%|      | 31/79 [00:02<00:03, 15.51it/s]
 43%|     | 34/79 [00:02<00:02, 17.57it/s]
 47%|     | 37/79 [00:02<00:02, 19.40it/s]
 51%|     | 40/79 [00:02<00:01, 20.65it/s]
 54%|    | 43/79 [00:02<00:01, 21.69it/s]
 58%|    | 46/79 [00:02<00:01, 22.37it/s]
 62%|   | 49/79 [00:02<00:01, 22.91it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.03it/s]
  5%|         | 4/79 [00:01<00:52,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.01it/s]
 13%|        | 10/79 [00:01<00:24,  2.77it/s]
 16%|        | 13/79 [00:01<00:17,  3.79it/s]
 20%|        | 16/79 [00:01<00:12,  5.09it/s]
 24%|       | 19/79 [00:01<00:09,  6.66it/s]
 28%|       | 22/79 [00:01<00:06,  8.53it/s]
 32%|      | 25/79 [00:01<00:05, 10.69it/s]
 35%|      | 28/79 [00:02<00:03, 12.91it/s]
 39%|      | 31/79 [00:02<00:03, 15.20it/s]
 43%|     | 34/79 [00:02<00:02, 17.24it/s]
 47%|     | 37/79 [00:02<00:02, 19.05it/s]
 51%|     | 40/79 [00:02<00:01, 20.51it/s]
 54%|    | 43/79 [00:02<00:01, 21.64it/s]
 58%|    | 46/79 [00:02<00:01, 22.50it/s]
 62%|   | 49/79 [00:02<00:01, 23.17it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  4%|         | 3/79 [00:01<00:49,  1.53it/s]
  8%|         | 6/79 [00:01<00:34,  2.12it/s]
 11%|        | 9/79 [00:01<00:23,  2.93it/s]
 15%|        | 12/79 [00:01<00:16,  3.98it/s]
 19%|        | 15/79 [00:01<00:12,  5.31it/s]
 23%|       | 18/79 [00:01<00:08,  6.97it/s]
 27%|       | 21/79 [00:01<00:06,  8.85it/s]
 30%|       | 24/79 [00:01<00:05, 10.96it/s]
 34%|      | 27/79 [00:02<00:03, 13.13it/s]
 38%|      | 30/79 [00:02<00:03, 15.34it/s]
 42%|     | 33/79 [00:02<00:02, 17.06it/s]
 46%|     | 36/79 [00:02<00:02, 18.60it/s]
 49%|     | 39/79 [00:02<00:02, 19.99it/s]
 53%|    | 42/79 [00:02<00:01, 21.22it/s]
 57%|    | 45/79 [00:02<00:01, 21.87it/s]
 61%|    | 48/79 [00:02<00:01, 22.61it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.03it/s]
  5%|         | 4/79 [00:01<00:52,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.00it/s]
 13%|        | 10/79 [00:01<00:24,  2.77it/s]
 16%|        | 13/79 [00:01<00:17,  3.78it/s]
 20%|        | 16/79 [00:01<00:12,  5.08it/s]
 24%|       | 19/79 [00:01<00:08,  6.70it/s]
 28%|       | 22/79 [00:01<00:06,  8.57it/s]
 32%|      | 25/79 [00:01<00:05, 10.72it/s]
 35%|      | 28/79 [00:02<00:03, 12.96it/s]
 39%|      | 31/79 [00:02<00:03, 15.08it/s]
 43%|     | 34/79 [00:02<00:02, 17.09it/s]
 47%|     | 37/79 [00:02<00:02, 18.76it/s]
 51%|     | 40/79 [00:02<00:01, 20.13it/s]
 54%|    | 43/79 [00:02<00:01, 21.16it/s]
 58%|    | 46/79 [00:02<00:01, 22.32it/s]
 62%|   | 49/79 [00:02<00:01, 22.71it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  4%|         | 3/79 [00:01<00:49,  1.53it/s]
  8%|         | 6/79 [00:01<00:34,  2.12it/s]
 11%|        | 9/79 [00:01<00:23,  2.92it/s]
 15%|        | 12/79 [00:01<00:16,  3.97it/s]
 19%|        | 15/79 [00:01<00:12,  5.30it/s]
 23%|       | 18/79 [00:01<00:08,  6.93it/s]
 27%|       | 21/79 [00:01<00:06,  8.80it/s]
 30%|       | 24/79 [00:01<00:05, 10.86it/s]
 34%|      | 27/79 [00:02<00:04, 13.00it/s]
 38%|      | 30/79 [00:02<00:03, 15.09it/s]
 42%|     | 33/79 [00:02<00:02, 17.07it/s]
 46%|     | 36/79 [00:02<00:02, 18.30it/s]
 49%|     | 39/79 [00:02<00:02, 19.73it/s]
 53%|    | 42/79 [00:02<00:01, 20.85it/s]
 57%|    | 45/79 [00:02<00:01, 21.76it/s]
 61%|    | 48/79 [00:02<00:01, 22.02it/s]
 65%|   | 51/79 [00:03<00:01, 22., 24.26it/s]
 70%|   | 55/79 [00:02<00:00, 24.36it/s]
 73%|  | 58/79 [00:02<00:00, 24.51it/s]
 77%|  | 61/79 [00:03<00:00, 24.53it/s]
 81%|  | 64/79 [00:03<00:00, 25.05it/s]
 85%| | 67/79 [00:03<00:00, 25.09it/s]
 89%| | 70/79 [00:03<00:00, 25.24it/s]
 92%|| 73/79 [00:03<00:00, 25.75it/s]
 96%|| 76/79 [00:03<00:00, 26.54it/s]
100%|| 79/79 [00:03<00:00, 27.40it/s]
, 25.10it/s]
 70%|   | 55/79 [00:02<00:00, 25.54it/s]
 73%|  | 58/79 [00:03<00:00, 25.84it/s]
 77%|  | 61/79 [00:03<00:00, 25.85it/s]
 81%|  | 64/79 [00:03<00:00, 25.97it/s]
 85%| | 67/79 [00:03<00:00, 25.92it/s]
 89%| | 70/79 [00:03<00:00, 26.28it/s]
 92%|| 73/79 [00:03<00:00, 26.24it/s]
 96%|| 76/79 [00:03<00:00, 26.84it/s]
100%|| 79/79 [00:03<00:00, 27.46it/s]
49it/s]
 68%|   | 54/79 [00:02<00:01, 24.85it/s]
 72%|  | 57/79 [00:02<00:00, 24.61it/s]
 76%|  | 60/79 [00:03<00:00, 24.83it/s]
 80%|  | 63/79 [00:03<00:00, 24.66it/s]
 84%| | 66/79 [00:03<00:00, 25.03it/s]
 87%| | 69/79 [00:03<00:00, 24.91it/s]
 91%| | 72/79 [00:03<00:00, 25.32it/s]
 95%|| 75/79 [00:03<00:00, 26.21it/s]
100%|| 79/79 [00:03<00:00, 27.17it/s]
, 23.62it/s]
 70%|   | 55/79 [00:02<00:00, 24.32it/s]
 73%|  | 58/79 [00:03<00:00, 25.02it/s]
 77%|  | 61/79 [00:03<00:00, 25.34it/s]
 81%|  | 64/79 [00:03<00:00, 25.54it/s]
 85%| | 67/79 [00:03<00:00, 25.79it/s]
 89%| | 70/79 [00:03<00:00, 25.94it/s]
 92%|| 73/79 [00:03<00:00, 26.41it/s]
 96%|| 76/79 [00:03<00:00, 26.99it/s]
100%|| 79/79 [00:03<00:00, 27.74it/s]
, 24.55it/s]
 70%|   | 55/79 [00:02<00:00, 24.78it/s]
 73%|  | 58/79 [00:03<00:00, 25.16it/s]
 77%|  | 61/79 [00:03<00:00, 25.48it/s]
 81%|  | 64/79 [00:03<00:00, 25.55it/s]
 85%| | 67/79 [00:03<00:00, 25.94it/s]
 89%| | 70/79 [00:03<00:00, 25.50it/s]
 92%|| 73/79 [00:03<00:00, 25.73it/s]
 96%|| 76/79 [00:03<00:00, 26.44it/s]
100%|| 79/79 [00:03<00:00, 20.31it/s]
, 24.82it/s]
 70%|   | 55/79 [00:02<00:00, 25.23it/s]
 73%|  | 58/79 [00:03<00:00, 25.25it/s]
 77%|  | 61/79 [00:03<00:00, 25.30it/s]
 81%|  | 64/79 [00:03<00:00, 25.12it/s]
 85%| | 67/79 [00:03<00:00, 25.13it/s]
 89%| | 70/79 [00:03<00:00, 25.25it/s]
 92%|| 73/79 [00:03<00:00, 25.65it/s]
 96%|| 76/79 [00:03<00:00, 26.41it/s]
100%|| 79/79 [00:03<00:00, 20.33it/s]
, 24.59it/s]
 70%|   | 55/79 [00:02<00:00, 25.03it/s]
 73%|  | 58/79 [00:03<00:00, 25.34it/s]
 77%|  | 61/79 [00:03<00:00, 25.57it/s]
 81%|  | 64/79 [00:03<00:00, 25.44it/s]
 85%| | 67/79 [00:03<00:00, 25.46it/s]
 89%| | 70/79 [00:03<00:00, 25.41it/s]
 92%|| 73/79 [00:03<00:00, 25.81it/s]
 96%|| 76/79 [00:03<00:00, 26.49it/s]
100%|| 79/79 [00:03<00:00, 27.35it/s]
, 24.41it/s]
 70%|   | 55/79 [00:02<00:00, 25.06it/s]
 73%|  | 58/79 [00:03<00:00, 25.15it/s]
 77%|  | 61/79 [00:03<00:00, 25.59it/s]
 81%|  | 64/79 [00:03<00:00, 25.72it/s]
 85%| | 67/79 [00:03<00:00, 25.50it/s]
 89%| | 70/79 [00:03<00:00, 25.75it/s]
 92%|| 73/79 [00:03<00:00, 26.02it/s]
 96%|| 76/79 [00:03<00:00, 26.69it/s]
100%|| 79/79 [00:03<00:00, 27.40it/s]
, 24.76it/s]
 70%|   | 55/79 [00:02<00:00, 25.12it/s]
 73%|  | 58/79 [00:03<00:00, 24.08it/s]
 77%|  | 61/79 [00:03<00:00, 24.24it/s]
 81%|  | 64/79 [00:03<00:00, 24.75it/s]
 85%| | 67/79 [00:03<00:00, 25.04it/s]
 89%| | 70/79 [00:03<00:00, 24.70it/s]
 92%|| 73/79 [00:03<00:00, 25.39it/s]
 96%|| 76/79 [00:03<00:00, 25.96it/s]
100%|| 79/79 [00:03<00:00, 27.02it/s]
, 24.53it/s]
 70%|   | 55/79 [00:02<00:00, 24.79it/s]
 73%|  | 58/79 [00:03<00:00, 25.31it/s]
 77%|  | 61/79 [00:03<00:00, 25.60it/s]
 81%|  | 64/79 [00:03<00:00, 25.76it/s]
 85%| | 67/79 [00:03<00:00, 25.69it/s]
 89%| | 70/79 [00:03<00:00, 25.66it/s]
 92%|| 73/79 [00:03<00:00, 25.97it/s]
 96%|| 76/79 [00:03<00:00, 26.68it/s]
100%|| 79/79 [00:03<00:00, 27.55it/s]
, 24.52it/s]
 70%|   | 55/79 [00:02<00:00, 25.07it/s]
 73%|  | 58/79 [00:03<00:00, 25.48it/s]
 77%|  | 61/79 [00:03<00:00, 25.57it/s]
 81%|  | 64/79 [00:03<00:00, 25.43it/s]
 85%| | 67/79 [00:03<00:00, 25.69it/s]
 89%| | 70/79 [00:03<00:00, 26.01it/s]
 92%|| 73/79 [00:03<00:00, 25.92it/s]
 96%|| 76/79 [00:03<00:00, 26.47it/s]
100%|| 79/79 [00:03<00:00, 27.20it/s]
, 24.93it/s]
 70%|   | 55/79 [00:02<00:00, 25.19it/s]
 73%|  | 58/79 [00:03<00:00, 25.67it/s]
 77%|  | 61/79 [00:03<00:00, 25.77it/s]
 81%|  | 64/79 [00:03<00:00, 26.13it/s]
 85%| | 67/79 [00:03<00:00, 26.00it/s]
 89%| | 70/79 [00:03<00:00, 26.20it/s]
 92%|| 73/79 [00:03<00:00, 26.31it/s]
 97%|| 77/79 [00:03<00:00, 27.25it/s]
100%|| 79/79 [00:03<00:00, 20.12it/s]
, 24.34it/s]
 70%|   | 55/79 [00:02<00:00, 24.69it/s]
 73%|  | 58/79 [00:03<00:00, 24.94it/s]
 77%|  | 61/79 [00:03<00:00, 25.38it/s]
 81%|  | 64/79 [00:03<00:00, 25.36it/s]
 85%| | 67/79 [00:03<00:00, 25.34it/s]
 89%| | 70/79 [00:03<00:00, 25.45it/s]
 92%|| 73/79 [00:03<00:00, 25.85it/s]
 96%|| 76/79 [00:03<00:00, 26.57it/s]
100%|| 79/79 [00:03<00:00, 27.45it/s]
, 24.71it/s]
 70%|   | 55/79 [00:02<00:00, 25.00it/s]
 73%|  | 58/79 [00:03<00:00, 25.25it/s]
 77%|  | 61/79 [00:03<00:00, 25.58it/s]
 81%|  | 64/79 [00:03<00:00, 25.73it/s]
 85%| | 67/79 [00:03<00:00, 25.82it/s]
 89%| | 70/79 [00:03<00:00, 25.83it/s]
 92%|| 73/79 [00:03<00:00, 26.04it/s]
 96%|| 76/79 [00:03<00:00, 27.05it/s]
100%|| 79/79 [00:03<00:00, 27.24it/s]
, 24.35it/s]
 70%|   | 55/79 [00:02<00:00, 24.84it/s]
 73%|  | 58/79 [00:03<00:00, 25.08it/s]
 77%|  | 61/79 [00:03<00:00, 25.56it/s]
 81%|  | 64/79 [00:03<00:00, 25.46it/s]
 85%| | 67/79 [00:03<00:00, 25.52it/s]
 89%| | 70/79 [00:03<00:00, 25.33it/s]
 92%|| 73/79 [00:03<00:00, 26.01it/s]
 96%|| 76/79 [00:03<00:00, 26.66it/s]
100%|| 79/79 [00:03<00:00, 27.54it/s]
, 24.18it/s]
 70%|   | 55/79 [00:02<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 24.76it/s]
 77%|  | 61/79 [00:03<00:00, 24.89it/s]
 81%|  | 64/79 [00:03<00:00, 24.88it/s]
 85%| | 67/79 [00:03<00:00, 24.89it/s]
 89%| | 70/79 [00:03<00:00, 24.77it/s]
 92%|| 73/79 [00:03<00:00, 25.34it/s]
 96%|| 76/79 [00:03<00:00, 26.16it/s]
100%|| 79/79 [00:03<00:00, 27.20it/s]
, 23.73it/s]
 70%|   | 55/79 [00:02<00:01, 23.87it/s]
 73%|  | 58/79 [00:03<00:00, 24.11it/s]
 77%|  | 61/79 [00:03<00:00, 24.47it/s]
 81%|  | 64/79 [00:03<00:00, 24.50it/s]
 85%| | 67/79 [00:03<00:00, 24.59it/s]
 89%| | 70/79 [00:03<00:00, 24.75it/s]
 92%|| 73/79 [00:03<00:00, 25.16it/s]
 96%|| 76/79 [00:03<00:00, 25.94it/s]
100%|| 79/79 [00:03<00:00, 26.98it/s]
, 24.61it/s]
 70%|   | 55/79 [00:02<00:00, 24.77it/s]
 73%|  | 58/79 [00:03<00:00, 25.16it/s]
 77%|  | 61/79 [00:03<00:00, 25.20it/s]
 81%|  | 64/79 [00:03<00:00, 25.07it/s]
 85%| | 67/79 [00:03<00:00, 25.27it/s]
 89%| | 70/79 [00:03<00:00, 25.36it/s]
 92%|| 73/79 [00:03<00:00, 25.80it/s]
 96%|| 76/79 [00:03<00:00, 26.46it/s]
100%|| 79/79 [00:03<00:00, 27.35it/s]
41it/s]
 68%|   | 54/79 [00:02<00:01, 24.51it/s]
 72%|  | 57/79 [00:03<00:00, 24.86it/s]
 76%|  | 60/79 [00:03<00:00, 24.72it/s]
 80%|  | 63/79 [00:03<00:00, 24.90it/s]
 84%| | 66/79 [00:03<00:00, 24.94it/s]
 87%| | 69/79 [00:03<00:00, 25.02it/s]
 91%| | 72/79 [00:03<00:00, 25.10it/s]
 95%|| 75/79 [00:03<00:00, 25.97it/s]
 99%|| 78/79 [00:03<00:00, 26.58it/s]
100%|| 79/79 [00:03<00:00, 19.91it/s]
, 24.29it/s]
 70%|   | 55/79 [00:03<00:00, 24.78it/s]
 73%|  | 58/79 [00:03<00:00, 25.27it/s]
 77%|  | 61/79 [00:03<00:00, 25.28it/s]
 81%|  | 64/79 [00:03<00:00, 25.11it/s]
 85%| | 67/79 [00:03<00:00, 25.45it/s]
 89%| | 70/79 [00:03<00:00, 25.42it/s]
 92%|| 73/79 [00:03<00:00, 25.87it/s]
 96%|| 76/79 [00:03<00:00, 26.38it/s]
100%|| 79/79 [00:03<00:00, 27.35it/s]
, 24.71it/s]
 70%|   | 55/79 [00:02<00:00, 25.11it/s]
 73%|  | 58/79 [00:03<00:00, 25.04it/s]
 77%|  | 61/79 [00:03<00:00, 25.19it/s]
 81%|  | 64/79 [00:03<00:00, 25.30it/s]
 85%| | 67/79 [00:03<00:00, 25.26it/s]
 89%| | 70/79 [00:03<00:00, 25.24it/s]
 92%|| 73/79 [00:03<00:00, 25.59it/s]
 96%|| 76/79 [00:03<00:00, 26.16it/s]
100%|| 79/79 [00:03<00:00, 27.11it/s]
, 24.12it/s]
 70%|   | 55/79 [00:03<00:00, 24.71it/s]
 73%|  | 58/79 [00:03<00:00, 24.99it/s]
 77%|  | 61/79 [00:03<00:00, 25.31it/s]
 81%|  | 64/79 [00:03<00:00, 25.28it/s]
 85%| | 67/79 [00:03<00:00, 25.58it/s]
 89%| | 70/79 [00:03<00:00, 25.32it/s]
 92%|| 73/79 [00:03<00:00, 25.62it/s]
 96%|| 76/79 [00:03<00:00, 26.15it/s]
100%|| 79/79 [00:03<00:00, 26.89it/s]
, 24.14it/s]
 70%|   | 55/79 [00:03<00:00, 24.30it/s]
 73%|  | 58/79 [00:03<00:00, 24.34it/s]
 77%|  | 61/79 [00:03<00:00, 24.67it/s]
 81%|  | 64/79 [00:03<00:00, 24.77it/s]
 85%| | 67/79 [00:03<00:00, 25.00it/s]
 89%| | 70/79 [00:03<00:00, 25.14it/s]
 92%|| 73/79 [00:03<00:00, 25.66it/s]
 96%|| 76/79 [00:03<00:00, 26.46it/s]
100%|| 79/79 [00:03<00:00, 27.40it/s]
, 23.82it/s]
 70%|   | 55/79 [00:03<00:00, 24.40it/s]
 73%|  | 58/79 [00:03<00:00, 24.57it/s]
 77%|  | 61/79 [00:03<00:00, 24.74it/s]
 81%|  | 64/79 [00:03<00:00, 25.02it/s]
 85%| | 67/79 [00:03<00:00, 25.37it/s]
 89%| | 70/79 [00:03<00:00, 25.29it/s]
 92%|| 73/79 [00:03<00:00, 25.65it/s]
 96%|| 76/79 [00:03<00:00, 26.28it/s]
100%|| 79/79 [00:03<00:00, 27.07it/s]
, 23.57it/s]
 70%|   | 55/79 [00:03<00:01, 23.79it/s]
 73%|  | 58/79 [00:03<00:00, 23.79it/s]
 77%|  | 61/79 [00:03<00:00, 24.05it/s]
 81%|  | 64/79 [00:03<00:00, 24.49it/s]
 85%| | 67/79 [00:03<00:00, 24.35it/s]
 89%| | 70/79 [00:03<00:00, 24.64it/s]
 92%|| 73/79 [00:03<00:00, 25.07it/s]
 96%|| 76/79 [00:03<00:00, 26.07it/s]
100%|| 79/79 [00:04<00:00, 27.07it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:00, 24.01it/s]
 73%|  | 58/79 [00:03<00:00, 24.13it/s]
 77%|  | 61/79 [00:03<00:00, 24.29it/s]
 81%|  | 64/79 [00:03<00:00, 24.51it/s]
 85%| | 67/79 [00:03<00:00, 24.62it/s]
 89%| | 70/79 [00:03<00:00, 24.67it/s]
 92%|| 73/79 [00:03<00:00, 24.97it/s]
 96%|| 76/79 [00:03<00:00, 25.67it/s]
100%|| 79/79 [00:04<00:00, 26.53it/s]
, 23.63it/s]
 70%|   | 55/79 [00:03<00:00, 24.24it/s]
 73%|  | 58/79 [00:03<00:00, 24.41it/s]
 77%|  | 61/79 [00:03<00:00, 24.71it/s]
 81%|  | 64/79 [00:03<00:00, 25.26it/s]
 85%| | 67/79 [00:03<00:00, 25.09it/s]
 89%| | 70/79 [00:03<00:00, 25.17it/s]
 92%|| 73/79 [00:03<00:00, 25.39it/s]
 96%|| 76/79 [00:03<00:00, 26.10it/s]
100%|| 79/79 [00:03<00:00, 26.65it/s]
, 23.57it/s]
 70%|   | 55/79 [00:03<00:00, 24.19it/s]
 73%|  | 58/79 [00:03<00:00, 24.36it/s]
 77%|  | 61/79 [00:03<00:00, 24.72it/s]
 81%|  | 64/79 [00:03<00:00, 24.96it/s]
 85%| | 67/79 [00:03<00:00, 25.26it/s]
 89%| | 70/79 [00:03<00:00, 25.06it/s]
 92%|| 73/79 [00:03<00:00, 25.26it/s]
 96%|| 76/79 [00:03<00:00, 25.85it/s]
100%|| 79/79 [00:04<00:00, 26.55it/s]
, 23.15it/s]
 70%|   | 55/79 [00:03<00:01, 23.50it/s]
 73%|  | 58/79 [00:03<00:00, 23.76it/s]
 77%|  | 61/79 [00:03<00:00, 23.61it/s]
 81%|  | 64/79 [00:03<00:00, 23.72it/s]
 85%| | 67/79 [00:03<00:00, 24.14it/s]
 89%| | 70/79 [00:03<00:00, 24.09it/s]
 92%|| 73/79 [00:03<00:00, 24.58it/s]
 96%|| 76/79 [00:03<00:00, 25.41it/s]
100%|| 79/79 [00:04<00:00, 26.34it/s]
, 23.21it/s]
 70%|   | 55/79 [00:03<00:01, 23.60it/s]
 73%|  | 58/79 [00:03<00:00, 24.26it/s]
 77%|  | 61/79 [00:03<00:00, 24.20it/s]
 81%|  | 64/79 [00:03<00:00, 24.47it/s]
 85%| | 67/79 [00:03<00:00, 24.64it/s]
 89%| | 70/79 [00:03<00:00, 24.75it/s]
 92%|| 73/79 [00:03<00:00, 25.11it/s]
 96%|| 76/79 [00:03<00:00, 25.82it/s]
100%|| 79/79 [00:04<00:00, 26.70it/s]
13it/s]
 68%|   | 54/79 [00:03<00:01, 23.71it/s]
 72%|  | 57/79 [00:03<00:00, 23.90it/s]
 76%|  | 60/79 [00:03<00:00, 24.05it/s]
 80%|  | 63/79 [00:03<00:00, 24.04it/s]
 84%| | 66/79 [00:03<00:00, 24.52it/s]
 87%| | 69/79 [00:03<00:00, 24.30it/s]
 91%| | 72/79 [00:03<00:00, 24.60it/s]
 95%|| 75/79 [00:03<00:00, 25.38it/s]
 99%|| 78/79 [00:04<00:00, 25.95it/s]
100%|| 79/79 [00:04<00:00, 18.87it/s]
67it/s]
 68%|   | 54/79 [00:03<00:01, 23.22it/s]
 72%|  | 57/79 [00:03<00:00, 23.49it/s]
 76%|  | 60/79 [00:03<00:00, 23.70it/s]
 80%|  | 63/79 [00:03<00:00, 23.79it/s]
 84%| | 66/79 [00:03<00:00, 24.26it/s]
 87%| | 69/79 [00:03<00:00, 24.18it/s]
 91%| | 72/79 [00:03<00:00, 24.13it/s]
 95%|| 75/79 [00:03<00:00, 25.03it/s]
 99%|| 78/79 [00:04<00:00, 25.65it/s]
100%|| 79/79 [00:04<00:00, 18.81it/s]
2020-06-23 17:07:55,116 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.210088 (0.02694456329345703 s / img per device, on 32 devices)
2020-06-23 17:07:55,135 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:07:55,135 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:07:55,154 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592957282368, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 11, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592957282369, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 11}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:08:03,473 maskrcnn_benchmark.trainer INFO: eta: 1:04:24  iter: 9180  loss: 0.6019 (0.7622)  loss_classifier: 0.1908 (0.2790)  loss_box_reg: 0.0882 (0.1226)  loss_mask: 0.2741 (0.3007)  loss_objectness: 0.0207 (0.0388)  loss_rpn_box_reg: 0.0129 (0.0212)  time: 0.1095 (0.1254)  data: 0.0014 (0.0183)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:05,640 maskrcnn_benchmark.trainer INFO: eta: 1:04:20  iter: 9200  loss: 0.5928 (0.7618)  loss_classifier: 0.2001 (0.2788)  loss_box_reg: 0.0901 (0.1225)  loss_mask: 0.2367 (0.3005)  loss_objectness: 0.0124 (0.0387)  loss_rpn_box_reg: 0.0097 (0.0211)  time: 0.1082 (0.1254)  data: 0.0014 (0.0183)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:07,806 maskrcnn_benchmark.trainer INFO: eta: 1:04:17  iter: 9220  loss: 0.6181 (0.7614)  loss_classifier: 0.2076 (0.2786)  loss_box_reg: 0.1098 (0.1225)  loss_mask: 0.2563 (0.3004)  loss_objectness: 0.0144 (0.0387)  loss_rpn_box_reg: 0.0095 (0.0211)  time: 0.1073 (0.1253)  data: 0.0015 (0.0182)  lr: 0.016000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.62s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 17:08:09,961 maskrcnn_benchmark.trainer INFO: eta: 1:04:13  iter: 9240  loss: 0.6348 (0.7612)  loss_classifier: 0.2225 (0.2785)  loss_box_reg: 0.1126 (0.1225)  loss_mask: 0.2489 (0.3003)  loss_objectness: 0.0200 (0.0387)  loss_rpn_box_reg: 0.0101 (0.0211)  time: 0.1077 (0.1253)  data: 0.0015 (0.0182)  lr: 0.016000  max mem: 5148
DONE (t=1.51s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35296
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.56427
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.38240
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20142
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.38055
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.45228
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.47323
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.49787
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.30455
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.53814
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62886
2020-06-23 17:08:12,118 maskrcnn_benchmark.trainer INFO: eta: 1:04:09  iter: 9260  loss: 0.4837 (0.7607)  loss_classifier: 0.1569 (0.2783)  loss_box_reg: 0.0837 (0.1224)  loss_mask: 0.2335 (0.3002)  loss_objectness: 0.0089 (0.0386)  loss_rpn_box_reg: 0.0043 (0.0211)  time: 0.1076 (0.1252)  data: 0.0014 (0.0182)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:14,290 maskrcnn_benchmark.trainer INFO: eta: 1:04:06  iter: 9280  loss: 0.5864 (0.7603)  loss_classifier: 0.1839 (0.2781)  loss_box_reg: 0.0931 (0.1224)  loss_mask: 0.2464 (0.3001)  loss_objectness: 0.0188 (0.0386)  loss_rpn_box_reg: 0.0086 (0.0211)  time: 0.1080 (0.1252)  data: 0.0014 (0.0181)  lr: 0.016000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:08:16,476 maskrcnn_benchmark.trainer INFO: eta: 1:04:02  iter: 9300  loss: 0.4707 (0.7598)  loss_classifier: 0.1559 (0.2779)  loss_box_reg: 0.0646 (0.1223)  loss_mask: 0.2294 (0.2999)  loss_objectness: 0.0101 (0.0385)  loss_rpn_box_reg: 0.0054 (0.0211)  time: 0.1083 (0.1252)  data: 0.0014 (0.0181)  lr: 0.016000  max mem: 5148
DONE (t=1.60s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:08:18,654 maskrcnn_benchmark.trainer INFO: eta: 1:03:59  iter: 9320  loss: 0.6038 (0.7595)  loss_classifier: 0.1983 (0.2778)  loss_box_reg: 0.0967 (0.1222)  loss_mask: 0.2503 (0.2998)  loss_objectness: 0.0256 (0.0385)  loss_rpn_box_reg: 0.0084 (0.0211)  time: 0.1085 (0.1251)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5148
DONE (t=2.44s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32483
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53425
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34431
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.14480
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.35067
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47248
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28456
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43778
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.45839
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.25664
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50052
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60677
2020-06-23 17:08:19,748 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3529565705114007, segm mAP: 0.32483063907499893
:::MLLOG {"namespace": "", "time_ms": 1592957299749, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.3529565705114007, "SEGM": 0.32483063907499893}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 10}}
:::MLLOG {"namespace": "", "time_ms": 1592957299749, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 10}}
2020-06-23 17:08:20,932 maskrcnn_benchmark.trainer INFO: eta: 1:03:55  iter: 9340  loss: 0.5926 (0.7591)  loss_classifier: 0.1845 (0.2776)  loss_box_reg: 0.1078 (0.1222)  loss_mask: 0.2578 (0.2997)  loss_objectness: 0.0226 (0.0385)  loss_rpn_box_reg: 0.0107 (0.0210)  time: 0.1075 (0.1251)  data: 0.0015 (0.0180)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:23,103 maskrcnn_benchmark.trainer INFO: eta: 1:03:52  iter: 9360  loss: 0.5931 (0.7587)  loss_classifier: 0.2059 (0.2775)  loss_box_reg: 0.0842 (0.1221)  loss_mask: 0.2435 (0.2996)  loss_objectness: 0.0144 (0.0384)  loss_rpn_box_reg: 0.0047 (0.0210)  time: 0.1085 (0.1251)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:25,281 maskrcnn_benchmark.trainer INFO: eta: 1:03:48  iter: 9380  loss: 0.5758 (0.7583)  loss_classifier: 0.1674 (0.2773)  loss_box_reg: 0.0833 (0.1221)  loss_mask: 0.2309 (0.2995)  loss_objectness: 0.0166 (0.0384)  loss_rpn_box_reg: 0.0081 (0.0210)  time: 0.1079 (0.1250)  data: 0.0015 (0.0179)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:27,435 maskrcnn_benchmark.trainer INFO: eta: 1:03:45  iter: 9400  loss: 0.5199 (0.7580)  loss_classifier: 0.1863 (0.2771)  loss_box_reg: 0.0904 (0.1220)  loss_mask: 0.2513 (0.2994)  loss_objectness: 0.0127 (0.0384)  loss_rpn_box_reg: 0.0072 (0.0210)  time: 0.1072 (0.1250)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:29,586 maskrcnn_benchmark.trainer INFO: eta: 1:03:41  iter: 9420  loss: 0.4985 (0.7575)  loss_classifier: 0.1875 (0.2770)  loss_box_reg: 0.0667 (0.1219)  loss_mask: 0.2454 (0.2993)  loss_objectness: 0.0191 (0.0384)  loss_rpn_box_reg: 0.0090 (0.0210)  time: 0.1072 (0.1250)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:31,768 maskrcnn_benchmark.trainer INFO: eta: 1:03:37  iter: 9440  loss: 0.5792 (0.7572)  loss_classifier: 0.1824 (0.2768)  loss_box_reg: 0.0769 (0.1219)  loss_mask: 0.2611 (0.2992)  loss_objectness: 0.0173 (0.0383)  loss_rpn_box_reg: 0.0089 (0.0210)  time: 0.1088 (0.1249)  data: 0.0014 (0.0178)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:33,935 maskrcnn_benchmark.trainer INFO: eta: 1:03:34  iter: 9460  loss: 0.4820 (0.7566)  loss_classifier: 0.1535 (0.2765)  loss_box_reg: 0.0611 (0.1218)  loss_mask: 0.2113 (0.2990)  loss_objectness: 0.0093 (0.0383)  loss_rpn_box_reg: 0.0056 (0.0210)  time: 0.1084 (0.1249)  data: 0.0014 (0.0178)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:36,109 maskrcnn_benchmark.trainer INFO: eta: 1:03:30  iter: 9480  loss: 0.4412 (0.7560)  loss_classifier: 0.1251 (0.2763)  loss_box_reg: 0.0631 (0.1217)  loss_mask: 0.2365 (0.2989)  loss_objectness: 0.0126 (0.0383)  loss_rpn_box_reg: 0.0083 (0.0210)  time: 0.1084 (0.1249)  data: 0.0014 (0.0178)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:38,279 maskrcnn_benchmark.trainer INFO: eta: 1:03:27  iter: 9500  loss: 0.5667 (0.7557)  loss_classifier: 0.1916 (0.2761)  loss_box_reg: 0.0853 (0.1216)  loss_mask: 0.2654 (0.2988)  loss_objectness: 0.0188 (0.0382)  loss_rpn_box_reg: 0.0110 (0.0210)  time: 0.1084 (0.1248)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:40,441 maskrcnn_benchmark.trainer INFO: eta: 1:03:23  iter: 9520  loss: 0.5741 (0.7554)  loss_classifier: 0.1936 (0.2759)  loss_box_reg: 0.0974 (0.1216)  loss_mask: 0.2509 (0.2987)  loss_objectness: 0.0212 (0.0382)  loss_rpn_box_reg: 0.0072 (0.0210)  time: 0.1082 (0.1248)  data: 0.0015 (0.0177)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:42,610 maskrcnn_benchmark.trainer INFO: eta: 1:03:20  iter: 9540  loss: 0.5202 (0.7549)  loss_classifier: 0.1821 (0.2757)  loss_box_reg: 0.0806 (0.1215)  loss_mask: 0.2461 (0.2986)  loss_objectness: 0.0094 (0.0381)  loss_rpn_box_reg: 0.0054 (0.0210)  time: 0.1083 (0.1248)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:44,762 maskrcnn_benchmark.trainer INFO: eta: 1:03:16  iter: 9560  loss: 0.5296 (0.7546)  loss_classifier: 0.1778 (0.2756)  loss_box_reg: 0.1016 (0.1215)  loss_mask: 0.2546 (0.2985)  loss_objectness: 0.0131 (0.0381)  loss_rpn_box_reg: 0.0085 (0.0209)  time: 0.1070 (0.1247)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:46,942 maskrcnn_benchmark.trainer INFO: eta: 1:03:13  iter: 9580  loss: 0.5294 (0.7542)  loss_classifier: 0.1704 (0.2754)  loss_box_reg: 0.0819 (0.1214)  loss_mask: 0.2306 (0.2984)  loss_objectness: 0.0131 (0.0381)  loss_rpn_box_reg: 0.0116 (0.0209)  time: 0.1089 (0.1247)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:49,140 maskrcnn_benchmark.trainer INFO: eta: 1:03:09  iter: 9600  loss: 0.5305 (0.7538)  loss_classifier: 0.1581 (0.2752)  loss_box_reg: 0.0793 (0.1213)  loss_mask: 0.2436 (0.2983)  loss_objectness: 0.0148 (0.0381)  loss_rpn_box_reg: 0.0107 (0.0209)  time: 0.1100 (0.1247)  data: 0.0013 (0.0176)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:51,312 maskrcnn_benchmark.trainer INFO: eta: 1:03:06  iter: 9620  loss: 0.5971 (0.7536)  loss_classifier: 0.2096 (0.2751)  loss_box_reg: 0.1095 (0.1213)  loss_mask: 0.2443 (0.2982)  loss_objectness: 0.0221 (0.0380)  loss_rpn_box_reg: 0.0095 (0.0209)  time: 0.1082 (0.1246)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:53,464 maskrcnn_benchmark.trainer INFO: eta: 1:03:02  iter: 9640  loss: 0.5054 (0.7531)  loss_classifier: 0.1552 (0.2748)  loss_box_reg: 0.0775 (0.1213)  loss_mask: 0.2277 (0.2981)  loss_objectness: 0.0113 (0.0380)  loss_rpn_box_reg: 0.0081 (0.0209)  time: 0.1071 (0.1246)  data: 0.0013 (0.0175)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:55,639 maskrcnn_benchmark.trainer INFO: eta: 1:02:59  iter: 9660  loss: 0.5874 (0.7527)  loss_classifier: 0.1885 (0.2747)  loss_box_reg: 0.0856 (0.1212)  loss_mask: 0.2168 (0.2979)  loss_objectness: 0.0120 (0.0380)  loss_rpn_box_reg: 0.0058 (0.0209)  time: 0.1080 (0.1246)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:57,801 maskrcnn_benchmark.trainer INFO: eta: 1:02:55  iter: 9680  loss: 0.4518 (0.7521)  loss_classifier: 0.1493 (0.2745)  loss_box_reg: 0.0656 (0.1211)  loss_mask: 0.2143 (0.2978)  loss_objectness: 0.0095 (0.0379)  loss_rpn_box_reg: 0.0052 (0.0209)  time: 0.1074 (0.1245)  data: 0.0013 (0.0174)  lr: 0.016000  max mem: 5148
2020-06-23 17:08:59,952 maskrcnn_benchmark.trainer INFO: eta: 1:02:52  iter: 9700  loss: 0.4998 (0.7517)  loss_classifier: 0.1613 (0.2743)  loss_box_reg: 0.0812 (0.1210)  loss_mask: 0.2250 (0.2976)  loss_objectness: 0.0105 (0.0379)  loss_rpn_box_reg: 0.0053 (0.0209)  time: 0.1074 (0.1245)  data: 0.0013 (0.0174)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:02,115 maskrcnn_benchmark.trainer INFO: eta: 1:02:48  iter: 9720  loss: 0.4973 (0.7513)  loss_classifier: 0.1662 (0.2741)  loss_box_reg: 0.0691 (0.1210)  loss_mask: 0.2140 (0.2975)  loss_objectness: 0.0135 (0.0378)  loss_rpn_box_reg: 0.0072 (0.0208)  time: 0.1075 (0.1245)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:04,269 maskrcnn_benchmark.trainer INFO: eta: 1:02:45  iter: 9740  loss: 0.5681 (0.7509)  loss_classifier: 0.1884 (0.2740)  loss_box_reg: 0.0922 (0.1209)  loss_mask: 0.2505 (0.2974)  loss_objectness: 0.0139 (0.0378)  loss_rpn_box_reg: 0.0061 (0.0208)  time: 0.1073 (0.1244)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:06,421 maskrcnn_benchmark.trainer INFO: eta: 1:02:41  iter: 9760  loss: 0.5469 (0.7505)  loss_classifier: 0.1746 (0.2738)  loss_box_reg: 0.0879 (0.1209)  loss_mask: 0.2473 (0.2973)  loss_objectness: 0.0122 (0.0377)  loss_rpn_box_reg: 0.0063 (0.0208)  time: 0.1072 (0.1244)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:08,597 maskrcnn_benchmark.trainer INFO: eta: 1:02:38  iter: 9780  loss: 0.5400 (0.7501)  loss_classifier: 0.1668 (0.2736)  loss_box_reg: 0.0766 (0.1208)  loss_mask: 0.2478 (0.2972)  loss_objectness: 0.0171 (0.0377)  loss_rpn_box_reg: 0.0065 (0.0208)  time: 0.1086 (0.1244)  data: 0.0013 (0.0173)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:10,763 maskrcnn_benchmark.trainer INFO: eta: 1:02:34  iter: 9800  loss: 0.5474 (0.7498)  loss_classifier: 0.1837 (0.2734)  loss_box_reg: 0.0892 (0.1208)  loss_mask: 0.2545 (0.2971)  loss_objectness: 0.0155 (0.0377)  loss_rpn_box_reg: 0.0083 (0.0208)  time: 0.1085 (0.1243)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:12,925 maskrcnn_benchmark.trainer INFO: eta: 1:02:31  iter: 9820  loss: 0.5260 (0.7494)  loss_classifier: 0.1820 (0.2733)  loss_box_reg: 0.0851 (0.1207)  loss_mask: 0.2406 (0.2970)  loss_objectness: 0.0130 (0.0376)  loss_rpn_box_reg: 0.0053 (0.0208)  time: 0.1079 (0.1243)  data: 0.0013 (0.0172)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:15,086 maskrcnn_benchmark.trainer INFO: eta: 1:02:27  iter: 9840  loss: 0.5572 (0.7490)  loss_classifier: 0.1842 (0.2731)  loss_box_reg: 0.0827 (0.1207)  loss_mask: 0.2397 (0.2969)  loss_objectness: 0.0148 (0.0376)  loss_rpn_box_reg: 0.0077 (0.0207)  time: 0.1074 (0.1243)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:17,249 maskrcnn_benchmark.trainer INFO: eta: 1:02:24  iter: 9860  loss: 0.5876 (0.7487)  loss_classifier: 0.1985 (0.2730)  loss_box_reg: 0.0884 (0.1206)  loss_mask: 0.2461 (0.2968)  loss_objectness: 0.0133 (0.0376)  loss_rpn_box_reg: 0.0075 (0.0207)  time: 0.1073 (0.1242)  data: 0.0013 (0.0171)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:19,429 maskrcnn_benchmark.trainer INFO: eta: 1:02:20  iter: 9880  loss: 0.5950 (0.7484)  loss_classifier: 0.2054 (0.2728)  loss_box_reg: 0.1009 (0.1206)  loss_mask: 0.2425 (0.2967)  loss_objectness: 0.0207 (0.0375)  loss_rpn_box_reg: 0.0086 (0.0207)  time: 0.1084 (0.1242)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:21,600 maskrcnn_benchmark.trainer INFO: eta: 1:02:17  iter: 9900  loss: 0.6070 (0.7481)  loss_classifier: 0.2103 (0.2727)  loss_box_reg: 0.1024 (0.1206)  loss_mask: 0.2633 (0.2966)  loss_objectness: 0.0190 (0.0375)  loss_rpn_box_reg: 0.0133 (0.0207)  time: 0.1086 (0.1242)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:23,760 maskrcnn_benchmark.trainer INFO: eta: 1:02:13  iter: 9920  loss: 0.6237 (0.7478)  loss_classifier: 0.2072 (0.2726)  loss_box_reg: 0.0950 (0.1205)  loss_mask: 0.2444 (0.2965)  loss_objectness: 0.0135 (0.0375)  loss_rpn_box_reg: 0.0060 (0.0207)  time: 0.1078 (0.1241)  data: 0.0014 (0.0170)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:25,923 maskrcnn_benchmark.trainer INFO: eta: 1:02:10  iter: 9940  loss: 0.4718 (0.7474)  loss_classifier: 0.1381 (0.2724)  loss_box_reg: 0.0786 (0.1204)  loss_mask: 0.2402 (0.2964)  loss_objectness: 0.0126 (0.0375)  loss_rpn_box_reg: 0.0055 (0.0207)  time: 0.1081 (0.1241)  data: 0.0013 (0.0170)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:28,078 maskrcnn_benchmark.trainer INFO: eta: 1:02:06  iter: 9960  loss: 0.6321 (0.7472)  loss_classifier: 0.2020 (0.2723)  loss_box_reg: 0.0992 (0.1204)  loss_mask: 0.2405 (0.2963)  loss_objectness: 0.0179 (0.0375)  loss_rpn_box_reg: 0.0092 (0.0207)  time: 0.1070 (0.1241)  data: 0.0014 (0.0170)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:30,237 maskrcnn_benchmark.trainer INFO: eta: 1:02:03  iter: 9980  loss: 0.5938 (0.7468)  loss_classifier: 0.1754 (0.2721)  loss_box_reg: 0.0998 (0.1204)  loss_mask: 0.2411 (0.2962)  loss_objectness: 0.0147 (0.0374)  loss_rpn_box_reg: 0.0101 (0.0207)  time: 0.1074 (0.1240)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:32,396 maskrcnn_benchmark.trainer INFO: eta: 1:02:00  iter: 10000  loss: 0.4922 (0.7464)  loss_classifier: 0.1556 (0.2719)  loss_box_reg: 0.0710 (0.1203)  loss_mask: 0.2439 (0.2961)  loss_objectness: 0.0112 (0.0374)  loss_rpn_box_reg: 0.0052 (0.0207)  time: 0.1075 (0.1240)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:34,553 maskrcnn_benchmark.trainer INFO: eta: 1:01:56  iter: 10020  loss: 0.5826 (0.7460)  loss_classifier: 0.1863 (0.2718)  loss_box_reg: 0.0964 (0.1203)  loss_mask: 0.2436 (0.2960)  loss_objectness: 0.0159 (0.0374)  loss_rpn_box_reg: 0.0072 (0.0207)  time: 0.1074 (0.1240)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:36,715 maskrcnn_benchmark.trainer INFO: eta: 1:01:53  iter: 10040  loss: 0.4882 (0.7456)  loss_classifier: 0.2011 (0.2716)  loss_box_reg: 0.0709 (0.1202)  loss_mask: 0.2282 (0.2959)  loss_objectness: 0.0106 (0.0373)  loss_rpn_box_reg: 0.0097 (0.0207)  time: 0.1084 (0.1239)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:38,872 maskrcnn_benchmark.trainer INFO: eta: 1:01:49  iter: 10060  loss: 0.5381 (0.7452)  loss_classifier: 0.1748 (0.2714)  loss_box_reg: 0.0749 (0.1201)  loss_mask: 0.2208 (0.2957)  loss_objectness: 0.0160 (0.0373)  loss_rpn_box_reg: 0.0104 (0.0207)  time: 0.1079 (0.1239)  data: 0.0013 (0.0168)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:41,053 maskrcnn_benchmark.trainer INFO: eta: 1:01:46  iter: 10080  loss: 0.5893 (0.7449)  loss_classifier: 0.2065 (0.2713)  loss_box_reg: 0.0958 (0.1201)  loss_mask: 0.2543 (0.2956)  loss_objectness: 0.0167 (0.0373)  loss_rpn_box_reg: 0.0106 (0.0206)  time: 0.1088 (0.1239)  data: 0.0013 (0.0168)  lr: 0.016000  max mem: 5148

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0


Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0
Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10086
Using dynamic loss scale of  65536.0
:::MLLOG {"namespace": "", "time_ms": 1592957381799, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1592957381799, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1592957381800, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 11}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 17:09:42,018 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
2020-06-23 17:09:42,326 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.28it/s]
  5%|         | 4/79 [00:00<00:41,  1.79it/s]
  9%|         | 7/79 [00:01<00:29,  2.48it/s]
 13%|        | 10/79 [00:01<00:20,  3.41it/s]
 16%|        | 13/79 [00:01<00:14,  4.61it/s]
 20%|        | 16/79 [00:01<00:10,  6.12it/s]
 24%|       | 19/79 [00:01<00:07,  7.93it/s]
 28%|       | 22/79 [00:01<00:05, 10.01it/s]
 32%|      | 25/79 [00:01<00:04, 12.14it/s]
 35%|      | 28/79 [00:01<00:03, 14.44it/s]
 39%|      | 31/79 [00:01<00:02, 16.63it/s]
 43%|     | 34/79 [00:02<00:02, 18.56it/s]
 47%|     | 37/79 [00:02<00:02, 20.49it/s]
 51%|     | 40/79 [00:02<00:01, 21.65it/s]
 54%|    | 43/79 [00:02<00:01, 22.71it/s]
 58%|    | 46/79 [00:02<00:01, 23.42it/s]
 62%|   | 49/79 [00:02<00:01, 24.15it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  4%|         | 3/79 [00:00<00:47,  1.60it/s]
  8%|         | 6/79 [00:01<00:32,  2.22it/s]
 11%|        | 9/79 [00:01<00:22,  3.06it/s]
 15%|        | 12/79 [00:01<00:16,  4.16it/s]
 19%|        | 15/79 [00:01<00:11,  5.57it/s]
 23%|       | 18/79 [00:01<00:08,  7.30it/s]
 27%|       | 21/79 [00:01<00:06,  9.32it/s]
 30%|       | 24/79 [00:01<00:04, 11.55it/s]
 34%|      | 27/79 [00:01<00:03, 13.95it/s]
 38%|      | 30/79 [00:02<00:03, 16.30it/s]
 42%|     | 33/79 [00:02<00:02, 18.35it/s]
 46%|     | 36/79 [00:02<00:02, 20.11it/s]
 49%|     | 39/79 [00:02<00:01, 21.60it/s]
 53%|    | 42/79 [00:02<00:01, 22.79it/s]
 57%|    | 45/79 [00:02<00:01, 23.75it/s]
 61%|    | 48/79 [00:02<00:01, 24.61it/s]
 65%|   | 51/79 [00:02<00:01, 25.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.38it/s]
 32%|      | 25/79 [00:01<00:04, 11.66it/s]
 35%|      | 28/79 [00:01<00:03, 13.96it/s]
 39%|      | 31/79 [00:02<00:02, 16.24it/s]
 43%|     | 34/79 [00:02<00:02, 18.38it/s]
 47%|     | 37/79 [00:02<00:02, 20.29it/s]
 51%|     | 40/79 [00:02<00:01, 21.76it/s]
 54%|    | 43/79 [00:02<00:01, 23.15it/s]
 58%|    | 46/79 [00:02<00:01, 23.97it/s]
 62%|   | 49/79 [00:02<00:01, 24.53it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.70it/s]
 24%|       | 19/79 [00:01<00:08,  7.45it/s]
 28%|       | 22/79 [00:01<00:06,  9.48it/s]
 32%|      | 25/79 [00:01<00:04, 11.71it/s]
 35%|      | 28/79 [00:01<00:03, 14.01it/s]
 39%|      | 31/79 [00:02<00:02, 16.37it/s]
 43%|     | 34/79 [00:02<00:02, 18.44it/s]
 47%|     | 37/79 [00:02<00:02, 20.17it/s]
 51%|     | 40/79 [00:02<00:01, 21.53it/s]
 54%|    | 43/79 [00:02<00:01, 22.69it/s]
 58%|    | 46/79 [00:02<00:01, 23.48it/s]
 62%|   | 49/79 [00:02<00:01, 24.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.77it/s]
 24%|       | 19/79 [00:01<00:07,  7.53it/s]
 28%|       | 22/79 [00:01<00:05,  9.56it/s]
 32%|      | 25/79 [00:01<00:04, 11.79it/s]
 35%|      | 28/79 [00:01<00:03, 14.26it/s]
 39%|      | 31/79 [00:02<00:02, 16.33it/s]
 43%|     | 34/79 [00:02<00:02, 18.42it/s]
 47%|     | 37/79 [00:02<00:02, 20.32it/s]
 51%|     | 40/79 [00:02<00:01, 21.60it/s]
 54%|    | 43/79 [00:02<00:01, 22.69it/s]
 58%|    | 46/79 [00:02<00:01, 23.45it/s]
 62%|   | 49/79 [00:02<00:01, 24.20it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:05,  9.54it/s]
 32%|      | 25/79 [00:01<00:04, 11.76it/s]
 35%|      | 28/79 [00:01<00:03, 14.04it/s]
 39%|      | 31/79 [00:02<00:02, 16.24it/s]
 43%|     | 34/79 [00:02<00:02, 18.33it/s]
 47%|     | 37/79 [00:02<00:02, 20.08it/s]
 51%|     | 40/79 [00:02<00:01, 21.28it/s]
 54%|    | 43/79 [00:02<00:01, 22.46it/s]
 58%|    | 46/79 [00:02<00:01, 23.35it/s]
 62%|   | 49/79 [00:02<00:01, 24.15it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.77it/s]
 24%|       | 19/79 [00:01<00:07,  7.53it/s]
 28%|       | 22/79 [00:01<00:05,  9.55it/s]
 32%|      | 25/79 [00:01<00:04, 11.80it/s]
 35%|      | 28/79 [00:01<00:03, 14.09it/s]
 39%|      | 31/79 [00:02<00:02, 16.32it/s]
 43%|     | 34/79 [00:02<00:02, 18.38it/s]
 47%|     | 37/79 [00:02<00:02, 20.12it/s]
 51%|     | 40/79 [00:02<00:01, 21.61it/s]
 54%|    | 43/79 [00:02<00:01, 22.73it/s]
 58%|    | 46/79 [00:02<00:01, 23.45it/s]
 62%|   | 49/79 [00:02<00:01, 24.05it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.82it/s]
 35%|      | 28/79 [00:01<00:03, 14.09it/s]
 39%|      | 31/79 [00:02<00:02, 16.25it/s]
 43%|     | 34/79 [00:02<00:02, 18.35it/s]
 47%|     | 37/79 [00:02<00:02, 19.97it/s]
 51%|     | 40/79 [00:02<00:01, 21.33it/s]
 54%|    | 43/79 [00:02<00:01, 22.53it/s]
 58%|    | 46/79 [00:02<00:01, 23.41it/s]
 62%|   | 49/79 [00:02<00:01, 23.88it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.36it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.61it/s]
 35%|      | 28/79 [00:01<00:03, 13.94it/s]
 39%|      | 31/79 [00:02<00:02, 16.29it/s]
 43%|     | 34/79 [00:02<00:02, 18.32it/s]
 47%|     | 37/79 [00:02<00:02, 20.13it/s]
 51%|     | 40/79 [00:02<00:01, 21.60it/s]
 54%|    | 43/79 [00:02<00:01, 22.73it/s]
 58%|    | 46/79 [00:02<00:01, 23.65it/s]
 62%|   | 49/79 [00:02<00:01, 24.18it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.32it/s]
 32%|      | 25/79 [00:01<00:04, 11.51it/s]
 35%|      | 28/79 [00:01<00:03, 13.81it/s]
 39%|      | 31/79 [00:02<00:02, 16.13it/s]
 43%|     | 34/79 [00:02<00:02, 18.20it/s]
 47%|     | 37/79 [00:02<00:02, 19.94it/s]
 51%|     | 40/79 [00:02<00:01, 21.33it/s]
 54%|    | 43/79 [00:02<00:01, 22.59it/s]
 58%|    | 46/79 [00:02<00:01, 23.46it/s]
 62%|   | 49/79 [00:02<00:01, 23.80it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.11it/s]
 32%|      | 25/79 [00:01<00:04, 11.31it/s]
 35%|      | 28/79 [00:01<00:03, 13.70it/s]
 39%|      | 31/79 [00:02<00:03, 15.92it/s]
 43%|     | 34/79 [00:02<00:02, 18.01it/s]
 47%|     | 37/79 [00:02<00:02, 19.77it/s]
 51%|     | 40/79 [00:02<00:01, 21.21it/s]
 54%|    | 43/79 [00:02<00:01, 22.64it/s]
 58%|    | 46/79 [00:02<00:01, 23.56it/s]
 62%|   | 49/79 [00:02<00:01, 24.15it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.09it/s]
 28%|       | 22/79 [00:01<00:06,  9.02it/s]
 32%|      | 25/79 [00:01<00:04, 11.23it/s]
 35%|      | 28/79 [00:01<00:03, 13.51it/s]
 39%|      | 31/79 [00:02<00:03, 15.82it/s]
 43%|     | 34/79 [00:02<00:02, 18.00it/s]
 47%|     | 37/79 [00:02<00:02, 19.64it/s]
 51%|     | 40/79 [00:02<00:01, 21.30it/s]
 54%|    | 43/79 [00:02<00:01, 22.42it/s]
 58%|    | 46/79 [00:02<00:01, 23.39it/s]
 62%|   | 49/79 [00:02<00:01, 23.91it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.34it/s]
 28%|       | 22/79 [00:01<00:06,  9.33it/s]
 32%|      | 25/79 [00:01<00:04, 11.50it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:02, 16.01it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.69it/s]
 51%|     | 40/79 [00:02<00:01, 21.01it/s]
 54%|    | 43/79 [00:02<00:01, 22.14it/s]
 58%|    | 46/79 [00:02<00:01, 23.05it/s]
 62%|   | 49/79 [00:02<00:01, 23.97it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  8.99it/s]
 32%|      | 25/79 [00:01<00:04, 11.13it/s]
 35%|      | 28/79 [00:01<00:03, 13.46it/s]
 39%|      | 31/79 [00:02<00:03, 15.69it/s]
 43%|     | 34/79 [00:02<00:02, 17.88it/s]
 47%|     | 37/79 [00:02<00:02, 19.66it/s]
 51%|     | 40/79 [00:02<00:01, 21.42it/s]
 54%|    | 43/79 [00:02<00:01, 22.58it/s]
 58%|    | 46/79 [00:02<00:01, 23.46it/s]
 62%|   | 49/79 [00:02<00:01, 24.19it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:01<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.34it/s]
 32%|      | 25/79 [00:01<00:04, 11.55it/s]
 35%|      | 28/79 [00:01<00:03, 13.89it/s]
 39%|      | 31/79 [00:02<00:02, 16.16it/s]
 43%|     | 34/79 [00:02<00:02, 18.26it/s]
 47%|     | 37/79 [00:02<00:02, 19.93it/s]
 51%|     | 40/79 [00:02<00:01, 21.55it/s]
 54%|    | 43/79 [00:02<00:01, 22.80it/s]
 58%|    | 46/79 [00:02<00:01, 23.79it/s]
 62%|   | 49/79 [00:02<00:01, 24.38it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  7.06it/s]
 28%|       | 22/79 [00:01<00:06,  8.96it/s]
 32%|      | 25/79 [00:01<00:04, 11.17it/s]
 35%|      | 28/79 [00:01<00:03, 13.43it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.82it/s]
 47%|     | 37/79 [00:02<00:02, 19.76it/s]
 51%|     | 40/79 [00:02<00:01, 21.41it/s]
 54%|    | 43/79 [00:02<00:01, 22.40it/s]
 58%|    | 46/79 [00:02<00:01, 23.48it/s]
 62%|   | 49/79 [00:02<00:01, 24.18it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.93it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.91it/s]
 32%|      | 25/79 [00:01<00:04, 11.09it/s]
 35%|      | 28/79 [00:01<00:03, 13.47it/s]
 39%|      | 31/79 [00:02<00:03, 15.80it/s]
 43%|     | 34/79 [00:02<00:02, 17.87it/s]
 47%|     | 37/79 [00:02<00:02, 19.69it/s]
 51%|     | 40/79 [00:02<00:01, 21.43it/s]
 54%|    | 43/79 [00:02<00:01, 22.69it/s]
 58%|    | 46/79 [00:02<00:01, 23.55it/s]
 62%|   | 49/79 [00:02<00:01, 24.43it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.77it/s]
 39%|      | 31/79 [00:02<00:03, 16.00it/s]
 43%|     | 34/79 [00:02<00:02, 18.11it/s]
 47%|     | 37/79 [00:02<00:02, 19.93it/s]
 51%|     | 40/79 [00:02<00:01, 21.30it/s]
 54%|    | 43/79 [00:02<00:01, 22.36it/s]
 58%|    | 46/79 [00:02<00:01, 23.35it/s]
 62%|   | 49/79 [00:02<00:01, 24.20it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.20it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.42it/s]
 35%|      | 28/79 [00:01<00:03, 13.62it/s]
 39%|      | 31/79 [00:02<00:03, 15.92it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.84it/s]
 51%|     | 40/79 [00:02<00:01, 21.50it/s]
 54%|    | 43/79 [00:02<00:01, 22.47it/s]
 58%|    | 46/79 [00:02<00:01, 23.33it/s]
 62%|   | 49/79 [00:02<00:01, 23.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.34it/s]
 28%|       | 22/79 [00:01<00:06,  9.31it/s]
 32%|      | 25/79 [00:01<00:04, 11.45it/s]
 35%|      | 28/79 [00:01<00:03, 13.75it/s]
 39%|      | 31/79 [00:02<00:03, 15.85it/s]
 43%|     | 34/79 [00:02<00:02, 17.83it/s]
 47%|     | 37/79 [00:02<00:02, 19.48it/s]
 51%|     | 40/79 [00:02<00:01, 21.17it/s]
 54%|    | 43/79 [00:02<00:01, 22.05it/s]
 58%|    | 46/79 [00:02<00:01, 23.04it/s]
 62%|   | 49/79 [00:02<00:01, 23.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.13it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.23it/s]
 28%|       | 22/79 [00:01<00:06,  9.13it/s]
 32%|      | 25/79 [00:01<00:04, 11.28it/s]
 35%|      | 28/79 [00:01<00:03, 13.55it/s]
 39%|      | 31/79 [00:02<00:03, 15.85it/s]
 43%|     | 34/79 [00:02<00:02, 17.89it/s]
 47%|     | 37/79 [00:02<00:02, 19.57it/s]
 51%|     | 40/79 [00:02<00:01, 20.97it/s]
 54%|    | 43/79 [00:02<00:01, 21.99it/s]
 58%|    | 46/79 [00:02<00:01, 22.93it/s]
 62%|   | 49/79 [00:02<00:01, 23.17it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  7.01it/s]
 28%|       | 22/79 [00:01<00:06,  8.96it/s]
 32%|      | 25/79 [00:01<00:04, 11.14it/s]
 35%|      | 28/79 [00:01<00:03, 13.45it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.65it/s]
 47%|     | 37/79 [00:02<00:02, 19.65it/s]
 51%|     | 40/79 [00:02<00:01, 20.95it/s]
 54%|    | 43/79 [00:02<00:01, 21.97it/s]
 58%|    | 46/79 [00:02<00:01, 22.47it/s]
 62%|   | 49/79 [00:02<00:01, 23.37it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.02it/s]
 28%|       | 22/79 [00:01<00:06,  8.95it/s]
 32%|      | 25/79 [00:01<00:04, 11.08it/s]
 35%|      | 28/79 [00:01<00:03, 13.30it/s]
 39%|      | 31/79 [00:02<00:03, 15.42it/s]
 43%|     | 34/79 [00:02<00:02, 17.49it/s]
 47%|     | 37/79 [00:02<00:02, 19.24it/s]
 51%|     | 40/79 [00:02<00:01, 20.52it/s]
 54%|    | 43/79 [00:02<00:01, 21.62it/s]
 58%|    | 46/79 [00:02<00:01, 22.59it/s]
 62%|   | 49/79 [00:02<00:01, 23.28it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.93it/s]
 20%|        | 16/79 [00:01<00:11,  5.26it/s]
 24%|       | 19/79 [00:01<00:08,  6.91it/s]
 28%|       | 22/79 [00:01<00:06,  8.81it/s]
 32%|      | 25/79 [00:01<00:04, 10.94it/s]
 35%|      | 28/79 [00:02<00:03, 13.21it/s]
 39%|      | 31/79 [00:02<00:03, 15.53it/s]
 43%|     | 34/79 [00:02<00:02, 17.43it/s]
 47%|     | 37/79 [00:02<00:02, 19.39it/s]
 51%|     | 40/79 [00:02<00:01, 21.06it/s]
 54%|    | 43/79 [00:02<00:01, 22.44it/s]
 58%|    | 46/79 [00:02<00:01, 23.13it/s]
 62%|   | 49/79 [00:02<00:01, 23.82it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 28%|       | 22/79 [00:01<00:06,  9.12it/s]
 32%|      | 25/79 [00:01<00:04, 11.19it/s]
 35%|      | 28/79 [00:01<00:03, 13.36it/s]
 39%|      | 31/79 [00:02<00:03, 15.46it/s]
 43%|     | 34/79 [00:02<00:02, 17.33it/s]
 47%|     | 37/79 [00:02<00:02, 18.89it/s]
 51%|     | 40/79 [00:02<00:01, 20.42it/s]
 54%|    | 43/79 [00:02<00:01, 21.62it/s]
 58%|    | 46/79 [00:02<00:01, 22.55it/s]
 62%|   | 49/79 [00:02<00:01, 23.33it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.15it/s]
 28%|       | 22/79 [00:01<00:06,  9.12it/s]
 32%|      | 25/79 [00:01<00:04, 11.20it/s]
 35%|      | 28/79 [00:01<00:03, 13.40it/s]
 39%|      | 31/79 [00:02<00:03, 15.69it/s]
 43%|     | 34/79 [00:02<00:02, 17.62it/s]
 47%|     | 37/79 [00:02<00:02, 19.34it/s]
 51%|     | 40/79 [00:02<00:01, 20.51it/s]
 54%|    | 43/79 [00:02<00:01, 21.61it/s]
 58%|    | 46/79 [00:02<00:01, 22.42it/s]
 62%|   | 49/79 [00:02<00:01, 22.84it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.30it/s]
 24%|       | 19/79 [00:01<00:08,  6.95it/s]
 28%|       | 22/79 [00:01<00:06,  8.89it/s]
 32%|      | 25/79 [00:01<00:04, 11.02it/s]
 35%|      | 28/79 [00:01<00:03, 13.28it/s]
 39%|      | 31/79 [00:02<00:03, 15.48it/s]
 43%|     | 34/79 [00:02<00:02, 17.33it/s]
 47%|     | 37/79 [00:02<00:02, 19.29it/s]
 51%|     | 40/79 [00:02<00:01, 20.58it/s]
 54%|    | 43/79 [00:02<00:01, 21.50it/s]
 58%|    | 46/79 [00:02<00:01, 22.18it/s]
 62%|   | 49/79 [00:02<00:01, 22.91it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.82it/s]
 16%|        | 13/79 [00:01<00:17,  3.84it/s]
 20%|        | 16/79 [00:01<00:12,  5.15it/s]
 24%|       | 19/79 [00:01<00:08,  6.75it/s]
 28%|       | 22/79 [00:01<00:06,  8.64it/s]
 32%|      | 25/79 [00:01<00:05, 10.76it/s]
 35%|      | 28/79 [00:02<00:03, 12.99it/s]
 39%|      | 31/79 [00:02<00:03, 15.28it/s]
 43%|     | 34/79 [00:02<00:02, 17.43it/s]
 47%|     | 37/79 [00:02<00:02, 19.21it/s]
 51%|     | 40/79 [00:02<00:01, 20.63it/s]
 54%|    | 43/79 [00:02<00:01, 21.73it/s]
 58%|    | 46/79 [00:02<00:01, 22.60it/s]
 62%|   | 49/79 [00:02<00:01, 23.30it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.02it/s]
 13%|        | 10/79 [00:01<00:24,  2.78it/s]
 16%|        | 13/79 [00:01<00:17,  3.80it/s]
 20%|        | 16/79 [00:01<00:12,  5.09it/s]
 24%|       | 19/79 [00:01<00:08,  6.71it/s]
 28%|       | 22/79 [00:01<00:06,  8.63it/s]
 32%|      | 25/79 [00:01<00:05, 10.78it/s]
 35%|      | 28/79 [00:02<00:03, 13.08it/s]
 39%|      | 31/79 [00:02<00:03, 15.33it/s]
 43%|     | 34/79 [00:02<00:02, 17.38it/s]
 47%|     | 37/79 [00:02<00:02, 19.24it/s]
 51%|     | 40/79 [00:02<00:01, 20.70it/s]
 54%|    | 43/79 [00:02<00:01, 21.91it/s]
 58%|    | 46/79 [00:02<00:01, 22.70it/s]
 62%|   | 49/79 [00:02<00:01, 23.56it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.05it/s]
 32%|      | 25/79 [00:01<00:04, 11.21it/s]
 35%|      | 28/79 [00:01<00:03, 13.42it/s]
 39%|      | 31/79 [00:02<00:03, 15.59it/s]
 43%|     | 34/79 [00:02<00:02, 17.46it/s]
 47%|     | 37/79 [00:02<00:02, 19.18it/s]
 51%|     | 40/79 [00:02<00:01, 20.46it/s]
 54%|    | 43/79 [00:02<00:01, 21.62it/s]
 58%|    | 46/79 [00:02<00:01, 22.47it/s]
 62%|   | 49/79 [00:02<00:01, 23.03it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.85it/s]
 20%|        | 16/79 [00:01<00:12,  5.17it/s]
 24%|       | 19/79 [00:01<00:08,  6.78it/s]
 28%|       | 22/79 [00:01<00:06,  8.69it/s]
 32%|      | 25/79 [00:01<00:05, 10.79it/s]
 35%|      | 28/79 [00:02<00:03, 12.97it/s]
 39%|      | 31/79 [00:02<00:03, 15.02it/s]
 43%|     | 34/79 [00:02<00:02, 16.90it/s]
 47%|     | 37/79 [00:02<00:02, 18.61it/s]
 51%|     | 40/79 [00:02<00:01, 20.09it/s]
 54%|    | 43/79 [00:02<00:01, 21.20it/s]
 58%|    | 46/79 [00:02<00:01, 22.30it/s]
 62%|   | 49/79 [00:02<00:01, 22.75it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:52,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.01it/s]
 13%|        | 10/79 [00:01<00:24,  2.77it/s]
 16%|        | 13/79 [00:01<00:17,  3.78it/s]
 20%|        | 16/79 [00:01<00:12,  5.06it/s]
 24%|       | 19/79 [00:01<00:09,  6.65it/s]
 28%|       | 22/79 [00:01<00:06,  8.50it/s]
 32%|      | 25/79 [00:01<00:05, 10.56it/s]
 35%|      | 28/79 [00:02<00:04, 12.69it/s]
 39%|      | 31/79 [00:02<00:03, 14.85it/s]
 43%|     | 34/79 [00:02<00:02, 16.74it/s]
 47%|     | 37/79 [00:02<00:02, 18.40it/s]
 51%|     | 40/79 [00:02<00:01, 19.93it/s]
 54%|    | 43/79 [00:02<00:01, 20.92it/s]
 58%|    | 46/79 [00:02<00:01, 21.72it/s]
 62%|   | 49/79 [00:02<00:01, 22.38it/s]
 66%|   | 52/79 [00:03<00:01, 24.56it/s]
 70%|   | 55/79 [00:02<00:00, 25.32it/s]
 73%|  | 58/79 [00:03<00:00, 25.74it/s]
 77%|  | 61/79 [00:03<00:00, 25.71it/s]
 81%|  | 64/79 [00:03<00:00, 25.92it/s]
 85%| | 67/79 [00:03<00:00, 26.10it/s]
 89%| | 70/79 [00:03<00:00, 26.12it/s]
 92%|| 73/79 [00:03<00:00, 26.49it/s]
 96%|| 76/79 [00:03<00:00, 26.98it/s]
100%|| 79/79 [00:03<00:00, 27.79it/s]
, 24.87it/s]
 70%|   | 55/79 [00:02<00:00, 25.20it/s]
 73%|  | 58/79 [00:03<00:00, 25.48it/s]
 77%|  | 61/79 [00:03<00:00, 25.60it/s]
 81%|  | 64/79 [00:03<00:00, 25.74it/s]
 85%| | 67/79 [00:03<00:00, 25.82it/s]
 89%| | 70/79 [00:03<00:00, 25.70it/s]
 92%|| 73/79 [00:03<00:00, 26.17it/s]
 96%|| 76/79 [00:03<00:00, 26.64it/s]
100%|| 79/79 [00:03<00:00, 20.27it/s]
, 24.94it/s]
 70%|   | 55/79 [00:02<00:00, 25.36it/s]
 73%|  | 58/79 [00:03<00:00, 25.70it/s]
 77%|  | 61/79 [00:03<00:00, 25.75it/s]
 81%|  | 64/79 [00:03<00:00, 25.81it/s]
 85%| | 67/79 [00:03<00:00, 25.91it/s]
 89%| | 70/79 [00:03<00:00, 25.79it/s]
 92%|| 73/79 [00:03<00:00, 26.22it/s]
 96%|| 76/79 [00:03<00:00, 26.82it/s]
100%|| 79/79 [00:03<00:00, 27.66it/s]
, 24.44it/s]
 70%|   | 55/79 [00:02<00:00, 24.99it/s]
 73%|  | 58/79 [00:03<00:00, 25.18it/s]
 77%|  | 61/79 [00:03<00:00, 25.44it/s]
 81%|  | 64/79 [00:03<00:00, 25.35it/s]
 85%| | 67/79 [00:03<00:00, 25.65it/s]
 89%| | 70/79 [00:03<00:00, 25.56it/s]
 92%|| 73/79 [00:03<00:00, 25.74it/s]
 96%|| 76/79 [00:03<00:00, 26.44it/s]
100%|| 79/79 [00:03<00:00, 27.40it/s]
23it/s]
 68%|   | 54/79 [00:02<00:00, 25.42it/s]
 72%|  | 57/79 [00:03<00:00, 25.68it/s]
 76%|  | 60/79 [00:03<00:00, 25.93it/s]
 80%|  | 63/79 [00:03<00:00, 25.81it/s]
 84%| | 66/79 [00:03<00:00, 25.77it/s]
 87%| | 69/79 [00:03<00:00, 25.96it/s]
 91%| | 72/79 [00:03<00:00, 25.90it/s]
 95%|| 75/79 [00:03<00:00, 26.54it/s]
 99%|| 78/79 [00:03<00:00, 26.94it/s]
100%|| 79/79 [00:03<00:00, 20.19it/s]
, 24.54it/s]
 70%|   | 55/79 [00:02<00:00, 24.71it/s]
 73%|  | 58/79 [00:03<00:00, 25.23it/s]
 77%|  | 61/79 [00:03<00:00, 25.40it/s]
 81%|  | 64/79 [00:03<00:00, 25.72it/s]
 85%| | 67/79 [00:03<00:00, 25.80it/s]
 89%| | 70/79 [00:03<00:00, 25.82it/s]
 92%|| 73/79 [00:03<00:00, 26.32it/s]
 96%|| 76/79 [00:03<00:00, 26.94it/s]
100%|| 79/79 [00:03<00:00, 27.67it/s]
, 24.17it/s]
 70%|   | 55/79 [00:02<00:00, 24.54it/s]
 73%|  | 58/79 [00:03<00:00, 24.94it/s]
 77%|  | 61/79 [00:03<00:00, 25.25it/s]
 81%|  | 64/79 [00:03<00:00, 25.44it/s]
 85%| | 67/79 [00:03<00:00, 25.41it/s]
 89%| | 70/79 [00:03<00:00, 25.74it/s]
 92%|| 73/79 [00:03<00:00, 25.99it/s]
 96%|| 76/79 [00:03<00:00, 26.62it/s]
100%|| 79/79 [00:03<00:00, 20.11it/s]
, 24.62it/s]
 70%|   | 55/79 [00:02<00:00, 25.00it/s]
 73%|  | 58/79 [00:03<00:00, 25.49it/s]
 77%|  | 61/79 [00:03<00:00, 25.33it/s]
 81%|  | 64/79 [00:03<00:00, 25.52it/s]
 85%| | 67/79 [00:03<00:00, 25.66it/s]
 89%| | 70/79 [00:03<00:00, 25.71it/s]
 92%|| 73/79 [00:03<00:00, 25.86it/s]
 96%|| 76/79 [00:03<00:00, 26.52it/s]
100%|| 79/79 [00:03<00:00, 27.34it/s]
, 24.88it/s]
 70%|   | 55/79 [00:02<00:00, 25.10it/s]
 73%|  | 58/79 [00:03<00:00, 25.36it/s]
 77%|  | 61/79 [00:03<00:00, 25.71it/s]
 81%|  | 64/79 [00:03<00:00, 25.89it/s]
 85%| | 67/79 [00:03<00:00, 25.95it/s]
 89%| | 70/79 [00:03<00:00, 25.71it/s]
 92%|| 73/79 [00:03<00:00, 25.97it/s]
 96%|| 76/79 [00:03<00:00, 26.59it/s]
100%|| 79/79 [00:03<00:00, 27.50it/s]
, 24.65it/s]
 70%|   | 55/79 [00:03<00:00, 24.92it/s]
 73%|  | 58/79 [00:03<00:00, 25.19it/s]
 77%|  | 61/79 [00:03<00:00, 25.56it/s]
 81%|  | 64/79 [00:03<00:00, 25.84it/s]
 85%| | 67/79 [00:03<00:00, 26.16it/s]
 89%| | 70/79 [00:03<00:00, 26.05it/s]
 92%|| 73/79 [00:03<00:00, 26.36it/s]
 96%|| 76/79 [00:03<00:00, 26.82it/s]
100%|| 79/79 [00:03<00:00, 27.54it/s]
, 24.61it/s]
 70%|   | 55/79 [00:02<00:00, 25.08it/s]
 73%|  | 58/79 [00:03<00:00, 25.35it/s]
 77%|  | 61/79 [00:03<00:00, 25.56it/s]
 81%|  | 64/79 [00:03<00:00, 25.75it/s]
 85%| | 67/79 [00:03<00:00, 25.93it/s]
 89%| | 70/79 [00:03<00:00, 26.15it/s]
 92%|| 73/79 [00:03<00:00, 26.31it/s]
 96%|| 76/79 [00:03<00:00, 27.02it/s]
100%|| 79/79 [00:03<00:00, 27.82it/s]
, 25.01it/s]
 70%|   | 55/79 [00:02<00:00, 25.01it/s]
 73%|  | 58/79 [00:03<00:00, 25.26it/s]
 77%|  | 61/79 [00:03<00:00, 25.60it/s]
 81%|  | 64/79 [00:03<00:00, 25.86it/s]
 85%| | 67/79 [00:03<00:00, 26.00it/s]
 89%| | 70/79 [00:03<00:00, 25.99it/s]
 92%|| 73/79 [00:03<00:00, 26.01it/s]
 96%|| 76/79 [00:03<00:00, 26.95it/s]
100%|| 79/79 [00:03<00:00, 27.04it/s]
, 24.64it/s]
 70%|   | 55/79 [00:03<00:00, 25.04it/s]
 73%|  | 58/79 [00:03<00:00, 25.21it/s]
 77%|  | 61/79 [00:03<00:00, 25.45it/s]
 81%|  | 64/79 [00:03<00:00, 25.54it/s]
 85%| | 67/79 [00:03<00:00, 25.55it/s]
 89%| | 70/79 [00:03<00:00, 25.49it/s]
 92%|| 73/79 [00:03<00:00, 25.68it/s]
 96%|| 76/79 [00:03<00:00, 26.45it/s]
100%|| 79/79 [00:03<00:00, 27.26it/s]
, 24.16it/s]
 70%|   | 55/79 [00:02<00:00, 24.41it/s]
 73%|  | 58/79 [00:03<00:00, 24.84it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 25.06it/s]
 85%| | 67/79 [00:03<00:00, 25.40it/s]
 89%| | 70/79 [00:03<00:00, 25.29it/s]
 92%|| 73/79 [00:03<00:00, 25.68it/s]
 96%|| 76/79 [00:03<00:00, 26.43it/s]
100%|| 79/79 [00:03<00:00, 27.40it/s]
, 24.88it/s]
 70%|   | 55/79 [00:03<00:00, 25.29it/s]
 73%|  | 58/79 [00:03<00:00, 25.62it/s]
 77%|  | 61/79 [00:03<00:00, 25.67it/s]
 81%|  | 64/79 [00:03<00:00, 25.55it/s]
 85%| | 67/79 [00:03<00:00, 25.63it/s]
 89%| | 70/79 [00:03<00:00, 25.08it/s]
 92%|| 73/79 [00:03<00:00, 25.61it/s]
 96%|| 76/79 [00:03<00:00, 26.11it/s]
100%|| 79/79 [00:03<00:00, 27.15it/s]
, 25.01it/s]
 70%|   | 55/79 [00:03<00:00, 25.33it/s]
 73%|  | 58/79 [00:03<00:00, 25.81it/s]
 77%|  | 61/79 [00:03<00:00, 25.74it/s]
 81%|  | 64/79 [00:03<00:00, 25.61it/s]
 85%| | 67/79 [00:03<00:00, 25.90it/s]
 89%| | 70/79 [00:03<00:00, 25.73it/s]
 92%|| 73/79 [00:03<00:00, 26.06it/s]
 96%|| 76/79 [00:03<00:00, 26.62it/s]
100%|| 79/79 [00:03<00:00, 27.31it/s]
, 24.22it/s]
 70%|   | 55/79 [00:03<00:00, 24.62it/s]
 73%|  | 58/79 [00:03<00:00, 24.87it/s]
 77%|  | 61/79 [00:03<00:00, 24.78it/s]
 81%|  | 64/79 [00:03<00:00, 25.12it/s]
 85%| | 67/79 [00:03<00:00, 24.99it/s]
 89%| | 70/79 [00:03<00:00, 25.25it/s]
 92%|| 73/79 [00:03<00:00, 25.44it/s]
 96%|| 76/79 [00:03<00:00, 25.97it/s]
100%|| 79/79 [00:03<00:00, 26.79it/s]
, 24.68it/s]
 70%|   | 55/79 [00:02<00:00, 24.90it/s]
 73%|  | 58/79 [00:03<00:00, 25.08it/s]
 77%|  | 61/79 [00:03<00:00, 24.69it/s]
 81%|  | 64/79 [00:03<00:00, 24.78it/s]
 85%| | 67/79 [00:03<00:00, 25.02it/s]
 89%| | 70/79 [00:03<00:00, 25.00it/s]
 92%|| 73/79 [00:03<00:00, 25.50it/s]
 96%|| 76/79 [00:03<00:00, 26.15it/s]
100%|| 79/79 [00:03<00:00, 27.00it/s]
, 24.20it/s]
 70%|   | 55/79 [00:03<00:00, 24.58it/s]
 73%|  | 58/79 [00:03<00:00, 25.08it/s]
 77%|  | 61/79 [00:03<00:00, 25.22it/s]
 81%|  | 64/79 [00:03<00:00, 25.26it/s]
 85%| | 67/79 [00:03<00:00, 25.45it/s]
 89%| | 70/79 [00:03<00:00, 25.50it/s]
 92%|| 73/79 [00:03<00:00, 25.76it/s]
 96%|| 76/79 [00:03<00:00, 26.44it/s]
100%|| 79/79 [00:03<00:00, 27.18it/s]
, 24.07it/s]
 70%|   | 55/79 [00:03<00:00, 24.71it/s]
 73%|  | 58/79 [00:03<00:00, 24.66it/s]
 77%|  | 61/79 [00:03<00:00, 25.11it/s]
 81%|  | 64/79 [00:03<00:00, 25.26it/s]
 85%| | 67/79 [00:03<00:00, 25.44it/s]
 89%| | 70/79 [00:03<00:00, 25.37it/s]
 92%|| 73/79 [00:03<00:00, 25.94it/s]
 96%|| 76/79 [00:03<00:00, 26.65it/s]
100%|| 79/79 [00:03<00:00, 27.53it/s]
, 24.15it/s]
 70%|   | 55/79 [00:03<00:00, 24.26it/s]
 73%|  | 58/79 [00:03<00:00, 24.31it/s]
 77%|  | 61/79 [00:03<00:00, 24.74it/s]
 81%|  | 64/79 [00:03<00:00, 24.93it/s]
 85%| | 67/79 [00:03<00:00, 25.18it/s]
 89%| | 70/79 [00:03<00:00, 25.30it/s]
 92%|| 73/79 [00:03<00:00, 25.93it/s]
 96%|| 76/79 [00:03<00:00, 26.66it/s]
100%|| 79/79 [00:03<00:00, 27.55it/s]
, 24.20it/s]
 70%|   | 55/79 [00:03<00:00, 24.48it/s]
 73%|  | 58/79 [00:03<00:00, 24.90it/s]
 77%|  | 61/79 [00:03<00:00, 25.19it/s]
 81%|  | 64/79 [00:03<00:00, 25.42it/s]
 85%| | 67/79 [00:03<00:00, 25.39it/s]
 89%| | 70/79 [00:03<00:00, 25.48it/s]
 92%|| 73/79 [00:03<00:00, 25.78it/s]
 97%|| 77/79 [00:03<00:00, 26.83it/s]
100%|| 79/79 [00:04<00:00, 19.41it/s]
, 23.79it/s]
 70%|   | 55/79 [00:03<00:00, 24.46it/s]
 73%|  | 58/79 [00:03<00:00, 24.40it/s]
 77%|  | 61/79 [00:03<00:00, 24.39it/s]
 81%|  | 64/79 [00:03<00:00, 24.40it/s]
 85%| | 67/79 [00:03<00:00, 24.72it/s]
 89%| | 70/79 [00:03<00:00, 25.06it/s]
 92%|| 73/79 [00:03<00:00, 25.18it/s]
 96%|| 76/79 [00:03<00:00, 25.95it/s]
100%|| 79/79 [00:03<00:00, 26.87it/s]
, 23.87it/s]
 70%|   | 55/79 [00:03<00:00, 24.25it/s]
 73%|  | 58/79 [00:03<00:00, 24.22it/s]
 77%|  | 61/79 [00:03<00:00, 24.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.87it/s]
 85%| | 67/79 [00:03<00:00, 24.82it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 25.48it/s]
 96%|| 76/79 [00:03<00:00, 26.25it/s]
100%|| 79/79 [00:04<00:00, 19.37it/s]
, 23.70it/s]
 70%|   | 55/79 [00:03<00:00, 24.26it/s]
 73%|  | 58/79 [00:03<00:00, 24.41it/s]
 77%|  | 61/79 [00:03<00:00, 24.74it/s]
 81%|  | 64/79 [00:03<00:00, 25.02it/s]
 85%| | 67/79 [00:03<00:00, 25.17it/s]
 89%| | 70/79 [00:03<00:00, 25.16it/s]
 92%|| 73/79 [00:03<00:00, 25.30it/s]
 96%|| 76/79 [00:03<00:00, 25.90it/s]
100%|| 79/79 [00:04<00:00, 26.58it/s]
, 23.64it/s]
 70%|   | 55/79 [00:03<00:00, 24.27it/s]
 73%|  | 58/79 [00:03<00:00, 24.34it/s]
 77%|  | 61/79 [00:03<00:00, 24.64it/s]
 81%|  | 64/79 [00:03<00:00, 25.23it/s]
 85%| | 67/79 [00:03<00:00, 25.10it/s]
 89%| | 70/79 [00:03<00:00, 25.18it/s]
 92%|| 73/79 [00:03<00:00, 25.34it/s]
 96%|| 76/79 [00:03<00:00, 26.03it/s]
100%|| 79/79 [00:04<00:00, 26.71it/s]
, 23.64it/s]
 70%|   | 55/79 [00:03<00:01, 23.86it/s]
 73%|  | 58/79 [00:03<00:00, 24.11it/s]
 77%|  | 61/79 [00:03<00:00, 24.35it/s]
 81%|  | 64/79 [00:03<00:00, 24.47it/s]
 85%| | 67/79 [00:03<00:00, 24.49it/s]
 89%| | 70/79 [00:03<00:00, 24.36it/s]
 92%|| 73/79 [00:03<00:00, 24.89it/s]
 96%|| 76/79 [00:03<00:00, 25.64it/s]
100%|| 79/79 [00:04<00:00, 26.42it/s]
, 23.77it/s]
 70%|   | 55/79 [00:03<00:00, 24.32it/s]
 73%|  | 58/79 [00:03<00:00, 24.57it/s]
 77%|  | 61/79 [00:03<00:00, 24.41it/s]
 81%|  | 64/79 [00:03<00:00, 24.46it/s]
 85%| | 67/79 [00:03<00:00, 24.74it/s]
 89%| | 70/79 [00:03<00:00, 24.93it/s]
 92%|| 73/79 [00:03<00:00, 25.43it/s]
 96%|| 76/79 [00:03<00:00, 26.09it/s]
100%|| 79/79 [00:03<00:00, 27.11it/s]
, 23.36it/s]
 70%|   | 55/79 [00:03<00:01, 23.73it/s]
 73%|  | 58/79 [00:03<00:00, 24.01it/s]
 77%|  | 61/79 [00:03<00:00, 23.80it/s]
 81%|  | 64/79 [00:03<00:00, 23.68it/s]
 85%| | 67/79 [00:03<00:00, 24.05it/s]
 89%| | 70/79 [00:03<00:00, 24.13it/s]
 92%|| 73/79 [00:03<00:00, 24.65it/s]
 96%|| 76/79 [00:03<00:00, 25.39it/s]
100%|| 79/79 [00:04<00:00, 26.41it/s]
, 23.71it/s]
 70%|   | 55/79 [00:03<00:00, 24.13it/s]
 73%|  | 58/79 [00:03<00:00, 24.45it/s]
 77%|  | 61/79 [00:03<00:00, 24.82it/s]
 81%|  | 64/79 [00:03<00:00, 24.90it/s]
 85%| | 67/79 [00:03<00:00, 25.15it/s]
 89%| | 70/79 [00:03<00:00, 25.12it/s]
 92%|| 73/79 [00:03<00:00, 25.22it/s]
 96%|| 76/79 [00:03<00:00, 25.82it/s]
100%|| 79/79 [00:04<00:00, 26.60it/s]
, 23.30it/s]
 70%|   | 55/79 [00:03<00:01, 23.63it/s]
 73%|  | 58/79 [00:03<00:00, 24.27it/s]
 77%|  | 61/79 [00:03<00:00, 24.51it/s]
 81%|  | 64/79 [00:03<00:00, 24.54it/s]
 85%| | 67/79 [00:03<00:00, 24.69it/s]
 89%| | 70/79 [00:03<00:00, 24.70it/s]
 92%|| 73/79 [00:03<00:00, 25.06it/s]
 96%|| 76/79 [00:03<00:00, 25.78it/s]
100%|| 79/79 [00:04<00:00, 26.65it/s]
, 22.83it/s]
 70%|   | 55/79 [00:03<00:01, 23.36it/s]
 73%|  | 58/79 [00:03<00:00, 23.61it/s]
 77%|  | 61/79 [00:03<00:00, 23.90it/s]
 81%|  | 64/79 [00:03<00:00, 23.92it/s]
 85%| | 67/79 [00:03<00:00, 24.14it/s]
 89%| | 70/79 [00:03<00:00, 24.09it/s]
 92%|| 73/79 [00:03<00:00, 24.63it/s]
 96%|| 76/79 [00:04<00:00, 25.41it/s]
100%|| 79/79 [00:04<00:00, 26.38it/s]
2020-06-23 17:09:46,567 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.240004 (0.027136026000976563 s / img per device, on 32 devices)
2020-06-23 17:09:46,585 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:09:46,585 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:09:46,603 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592957392929, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 12, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592957392930, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 12}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:09:54,366 maskrcnn_benchmark.trainer INFO: eta: 1:02:15  iter: 10100  loss: 0.4757 (0.7444)  loss_classifier: 0.1475 (0.2710)  loss_box_reg: 0.0695 (0.1200)  loss_mask: 0.2300 (0.2955)  loss_objectness: 0.0139 (0.0372)  loss_rpn_box_reg: 0.0071 (0.0206)  time: 0.1099 (0.1249)  data: 0.0015 (0.0179)  lr: 0.016000  max mem: 5148
2020-06-23 17:09:56,548 maskrcnn_benchmark.trainer INFO: eta: 1:02:12  iter: 10120  loss: 0.5474 (0.7440)  loss_classifier: 0.1839 (0.2709)  loss_box_reg: 0.0905 (0.1199)  loss_mask: 0.2615 (0.2954)  loss_objectness: 0.0131 (0.0372)  loss_rpn_box_reg: 0.0062 (0.0206)  time: 0.1090 (0.1249)  data: 0.0016 (0.0178)  lr: 0.016000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.54s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 17:09:58,728 maskrcnn_benchmark.trainer INFO: eta: 1:02:09  iter: 10140  loss: 0.5220 (0.7437)  loss_classifier: 0.1801 (0.2707)  loss_box_reg: 0.0977 (0.1199)  loss_mask: 0.2457 (0.2953)  loss_objectness: 0.0136 (0.0372)  loss_rpn_box_reg: 0.0084 (0.0206)  time: 0.1087 (0.1249)  data: 0.0015 (0.0178)  lr: 0.016000  max mem: 5148
DONE (t=1.43s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36605
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.58004
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.39842
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20879
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.39718
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47659
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30676
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.48140
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.50557
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.31184
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.54337
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.64228
2020-06-23 17:10:00,901 maskrcnn_benchmark.trainer INFO: eta: 1:02:05  iter: 10160  loss: 0.5600 (0.7433)  loss_classifier: 0.1626 (0.2705)  loss_box_reg: 0.0851 (0.1198)  loss_mask: 0.2386 (0.2952)  loss_objectness: 0.0107 (0.0371)  loss_rpn_box_reg: 0.0087 (0.0206)  time: 0.1079 (0.1249)  data: 0.0015 (0.0178)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:03,078 maskrcnn_benchmark.trainer INFO: eta: 1:02:02  iter: 10180  loss: 0.5607 (0.7429)  loss_classifier: 0.1786 (0.2704)  loss_box_reg: 0.0990 (0.1198)  loss_mask: 0.2351 (0.2951)  loss_objectness: 0.0184 (0.0371)  loss_rpn_box_reg: 0.0050 (0.0206)  time: 0.1083 (0.1248)  data: 0.0015 (0.0177)  lr: 0.016000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:10:05,254 maskrcnn_benchmark.trainer INFO: eta: 1:01:58  iter: 10200  loss: 0.4897 (0.7425)  loss_classifier: 0.1675 (0.2702)  loss_box_reg: 0.0821 (0.1197)  loss_mask: 0.2317 (0.2950)  loss_objectness: 0.0116 (0.0370)  loss_rpn_box_reg: 0.0054 (0.0206)  time: 0.1085 (0.1248)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5148
DONE (t=1.38s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:10:07,417 maskrcnn_benchmark.trainer INFO: eta: 1:01:55  iter: 10220  loss: 0.5164 (0.7420)  loss_classifier: 0.1477 (0.2700)  loss_box_reg: 0.0788 (0.1196)  loss_mask: 0.2381 (0.2949)  loss_objectness: 0.0089 (0.0370)  loss_rpn_box_reg: 0.0063 (0.0206)  time: 0.1077 (0.1248)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5148
DONE (t=2.28s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.33409
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.54559
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.35608
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.14880
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36181
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49695
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28860
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.44164
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.46173
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.25918
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50255
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.61812
2020-06-23 17:10:08,425 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.36605469960283554, segm mAP: 0.3340935416462456
:::MLLOG {"namespace": "", "time_ms": 1592957408425, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.36605469960283554, "SEGM": 0.3340935416462456}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1592957408426, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 11}}
2020-06-23 17:10:09,732 maskrcnn_benchmark.trainer INFO: eta: 1:01:52  iter: 10240  loss: 0.4962 (0.7417)  loss_classifier: 0.1797 (0.2698)  loss_box_reg: 0.0866 (0.1196)  loss_mask: 0.2371 (0.2948)  loss_objectness: 0.0149 (0.0370)  loss_rpn_box_reg: 0.0083 (0.0205)  time: 0.1084 (0.1247)  data: 0.0015 (0.0176)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:11,905 maskrcnn_benchmark.trainer INFO: eta: 1:01:48  iter: 10260  loss: 0.4894 (0.7413)  loss_classifier: 0.1504 (0.2696)  loss_box_reg: 0.0692 (0.1195)  loss_mask: 0.2203 (0.2946)  loss_objectness: 0.0196 (0.0370)  loss_rpn_box_reg: 0.0088 (0.0205)  time: 0.1080 (0.1247)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:14,057 maskrcnn_benchmark.trainer INFO: eta: 1:01:45  iter: 10280  loss: 0.5044 (0.7409)  loss_classifier: 0.1621 (0.2695)  loss_box_reg: 0.0787 (0.1194)  loss_mask: 0.2165 (0.2945)  loss_objectness: 0.0183 (0.0369)  loss_rpn_box_reg: 0.0062 (0.0205)  time: 0.1070 (0.1247)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:16,224 maskrcnn_benchmark.trainer INFO: eta: 1:01:41  iter: 10300  loss: 0.5416 (0.7405)  loss_classifier: 0.1894 (0.2693)  loss_box_reg: 0.0871 (0.1194)  loss_mask: 0.2355 (0.2944)  loss_objectness: 0.0087 (0.0369)  loss_rpn_box_reg: 0.0051 (0.0205)  time: 0.1085 (0.1246)  data: 0.0015 (0.0175)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:18,394 maskrcnn_benchmark.trainer INFO: eta: 1:01:38  iter: 10320  loss: 0.5548 (0.7402)  loss_classifier: 0.1858 (0.2692)  loss_box_reg: 0.0922 (0.1194)  loss_mask: 0.2231 (0.2943)  loss_objectness: 0.0165 (0.0369)  loss_rpn_box_reg: 0.0106 (0.0205)  time: 0.1085 (0.1246)  data: 0.0015 (0.0175)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:20,566 maskrcnn_benchmark.trainer INFO: eta: 1:01:35  iter: 10340  loss: 0.4949 (0.7397)  loss_classifier: 0.1477 (0.2689)  loss_box_reg: 0.0762 (0.1193)  loss_mask: 0.2284 (0.2942)  loss_objectness: 0.0089 (0.0368)  loss_rpn_box_reg: 0.0059 (0.0205)  time: 0.1087 (0.1246)  data: 0.0015 (0.0175)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:22,729 maskrcnn_benchmark.trainer INFO: eta: 1:01:31  iter: 10360  loss: 0.5047 (0.7393)  loss_classifier: 0.1454 (0.2687)  loss_box_reg: 0.0655 (0.1192)  loss_mask: 0.2477 (0.2941)  loss_objectness: 0.0137 (0.0368)  loss_rpn_box_reg: 0.0091 (0.0205)  time: 0.1078 (0.1245)  data: 0.0013 (0.0175)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:24,913 maskrcnn_benchmark.trainer INFO: eta: 1:01:28  iter: 10380  loss: 0.5617 (0.7390)  loss_classifier: 0.2007 (0.2686)  loss_box_reg: 0.0994 (0.1191)  loss_mask: 0.2351 (0.2940)  loss_objectness: 0.0175 (0.0368)  loss_rpn_box_reg: 0.0080 (0.0205)  time: 0.1089 (0.1245)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:27,072 maskrcnn_benchmark.trainer INFO: eta: 1:01:24  iter: 10400  loss: 0.5283 (0.7386)  loss_classifier: 0.1461 (0.2684)  loss_box_reg: 0.0720 (0.1191)  loss_mask: 0.2423 (0.2939)  loss_objectness: 0.0100 (0.0367)  loss_rpn_box_reg: 0.0047 (0.0205)  time: 0.1076 (0.1245)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:29,242 maskrcnn_benchmark.trainer INFO: eta: 1:01:21  iter: 10420  loss: 0.5539 (0.7382)  loss_classifier: 0.1777 (0.2682)  loss_box_reg: 0.0992 (0.1190)  loss_mask: 0.2421 (0.2938)  loss_objectness: 0.0107 (0.0367)  loss_rpn_box_reg: 0.0043 (0.0204)  time: 0.1078 (0.1245)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:31,419 maskrcnn_benchmark.trainer INFO: eta: 1:01:18  iter: 10440  loss: 0.5472 (0.7378)  loss_classifier: 0.1891 (0.2681)  loss_box_reg: 0.0855 (0.1190)  loss_mask: 0.2419 (0.2937)  loss_objectness: 0.0118 (0.0367)  loss_rpn_box_reg: 0.0104 (0.0204)  time: 0.1085 (0.1244)  data: 0.0013 (0.0173)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:33,602 maskrcnn_benchmark.trainer INFO: eta: 1:01:14  iter: 10460  loss: 0.4737 (0.7375)  loss_classifier: 0.1502 (0.2679)  loss_box_reg: 0.0819 (0.1190)  loss_mask: 0.2451 (0.2936)  loss_objectness: 0.0161 (0.0366)  loss_rpn_box_reg: 0.0072 (0.0204)  time: 0.1087 (0.1244)  data: 0.0015 (0.0173)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:35,757 maskrcnn_benchmark.trainer INFO: eta: 1:01:11  iter: 10480  loss: 0.6073 (0.7372)  loss_classifier: 0.2082 (0.2678)  loss_box_reg: 0.0958 (0.1189)  loss_mask: 0.2466 (0.2935)  loss_objectness: 0.0164 (0.0366)  loss_rpn_box_reg: 0.0067 (0.0204)  time: 0.1075 (0.1244)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:37,934 maskrcnn_benchmark.trainer INFO: eta: 1:01:07  iter: 10500  loss: 0.5696 (0.7369)  loss_classifier: 0.1836 (0.2676)  loss_box_reg: 0.0914 (0.1189)  loss_mask: 0.2461 (0.2934)  loss_objectness: 0.0168 (0.0366)  loss_rpn_box_reg: 0.0084 (0.0204)  time: 0.1079 (0.1243)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:40,104 maskrcnn_benchmark.trainer INFO: eta: 1:01:04  iter: 10520  loss: 0.5661 (0.7365)  loss_classifier: 0.1479 (0.2674)  loss_box_reg: 0.0753 (0.1188)  loss_mask: 0.2444 (0.2933)  loss_objectness: 0.0088 (0.0366)  loss_rpn_box_reg: 0.0065 (0.0204)  time: 0.1084 (0.1243)  data: 0.0015 (0.0172)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:42,272 maskrcnn_benchmark.trainer INFO: eta: 1:01:01  iter: 10540  loss: 0.8255 (0.7366)  loss_classifier: 0.3002 (0.2674)  loss_box_reg: 0.1283 (0.1189)  loss_mask: 0.3015 (0.2933)  loss_objectness: 0.0198 (0.0366)  loss_rpn_box_reg: 0.0119 (0.0204)  time: 0.1077 (0.1243)  data: 0.0015 (0.0172)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:44,447 maskrcnn_benchmark.trainer INFO: eta: 1:00:57  iter: 10560  loss: 0.5858 (0.7363)  loss_classifier: 0.1920 (0.2673)  loss_box_reg: 0.0894 (0.1188)  loss_mask: 0.2652 (0.2932)  loss_objectness: 0.0166 (0.0365)  loss_rpn_box_reg: 0.0074 (0.0204)  time: 0.1083 (0.1242)  data: 0.0015 (0.0171)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:46,614 maskrcnn_benchmark.trainer INFO: eta: 1:00:54  iter: 10580  loss: 0.5793 (0.7361)  loss_classifier: 0.1929 (0.2672)  loss_box_reg: 0.1127 (0.1188)  loss_mask: 0.2677 (0.2932)  loss_objectness: 0.0134 (0.0365)  loss_rpn_box_reg: 0.0094 (0.0204)  time: 0.1078 (0.1242)  data: 0.0015 (0.0171)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:48,775 maskrcnn_benchmark.trainer INFO: eta: 1:00:51  iter: 10600  loss: 0.5763 (0.7357)  loss_classifier: 0.1702 (0.2670)  loss_box_reg: 0.1011 (0.1187)  loss_mask: 0.2350 (0.2931)  loss_objectness: 0.0177 (0.0365)  loss_rpn_box_reg: 0.0056 (0.0204)  time: 0.1083 (0.1242)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:50,951 maskrcnn_benchmark.trainer INFO: eta: 1:00:47  iter: 10620  loss: 0.4543 (0.7352)  loss_classifier: 0.1242 (0.2668)  loss_box_reg: 0.0702 (0.1187)  loss_mask: 0.2276 (0.2930)  loss_objectness: 0.0077 (0.0364)  loss_rpn_box_reg: 0.0045 (0.0204)  time: 0.1084 (0.1242)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:53,142 maskrcnn_benchmark.trainer INFO: eta: 1:00:44  iter: 10640  loss: 0.6338 (0.7350)  loss_classifier: 0.2157 (0.2667)  loss_box_reg: 0.1097 (0.1186)  loss_mask: 0.2595 (0.2929)  loss_objectness: 0.0188 (0.0364)  loss_rpn_box_reg: 0.0072 (0.0204)  time: 0.1092 (0.1241)  data: 0.0015 (0.0170)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:55,312 maskrcnn_benchmark.trainer INFO: eta: 1:00:41  iter: 10660  loss: 0.6057 (0.7347)  loss_classifier: 0.1787 (0.2665)  loss_box_reg: 0.0995 (0.1186)  loss_mask: 0.2368 (0.2928)  loss_objectness: 0.0151 (0.0364)  loss_rpn_box_reg: 0.0078 (0.0204)  time: 0.1071 (0.1241)  data: 0.0014 (0.0170)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:57,493 maskrcnn_benchmark.trainer INFO: eta: 1:00:37  iter: 10680  loss: 0.4878 (0.7344)  loss_classifier: 0.1759 (0.2664)  loss_box_reg: 0.0750 (0.1185)  loss_mask: 0.2327 (0.2927)  loss_objectness: 0.0146 (0.0364)  loss_rpn_box_reg: 0.0062 (0.0204)  time: 0.1091 (0.1241)  data: 0.0015 (0.0170)  lr: 0.016000  max mem: 5148
2020-06-23 17:10:59,675 maskrcnn_benchmark.trainer INFO: eta: 1:00:34  iter: 10700  loss: 0.5397 (0.7340)  loss_classifier: 0.1785 (0.2662)  loss_box_reg: 0.0919 (0.1185)  loss_mask: 0.2562 (0.2926)  loss_objectness: 0.0141 (0.0363)  loss_rpn_box_reg: 0.0057 (0.0204)  time: 0.1094 (0.1240)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5148
2020-06-23 17:11:01,844 maskrcnn_benchmark.trainer INFO: eta: 1:00:31  iter: 10720  loss: 0.5215 (0.7337)  loss_classifier: 0.1567 (0.2661)  loss_box_reg: 0.0998 (0.1184)  loss_mask: 0.2386 (0.2925)  loss_objectness: 0.0115 (0.0363)  loss_rpn_box_reg: 0.0061 (0.0204)  time: 0.1071 (0.1240)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5148
2020-06-23 17:11:04,024 maskrcnn_benchmark.trainer INFO: eta: 1:00:27  iter: 10740  loss: 0.5626 (0.7334)  loss_classifier: 0.2210 (0.2660)  loss_box_reg: 0.0985 (0.1184)  loss_mask: 0.2415 (0.2925)  loss_objectness: 0.0144 (0.0363)  loss_rpn_box_reg: 0.0076 (0.0203)  time: 0.1089 (0.1240)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5148
2020-06-23 17:11:06,209 maskrcnn_benchmark.trainer INFO: eta: 1:00:24  iter: 10760  loss: 0.5441 (0.7332)  loss_classifier: 0.1919 (0.2658)  loss_box_reg: 0.0884 (0.1184)  loss_mask: 0.2332 (0.2924)  loss_objectness: 0.0149 (0.0362)  loss_rpn_box_reg: 0.0088 (0.0203)  time: 0.1088 (0.1240)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5148
2020-06-23 17:11:08,396 maskrcnn_benchmark.trainer INFO: eta: 1:00:21  iter: 10780  loss: 0.5527 (0.7329)  loss_classifier: 0.1826 (0.2657)  loss_box_reg: 0.0955 (0.1184)  loss_mask: 0.2499 (0.2923)  loss_objectness: 0.0184 (0.0362)  loss_rpn_box_reg: 0.0087 (0.0203)  time: 0.1086 (0.1239)  data: 0.0015 (0.0168)  lr: 0.016000  max mem: 5148
2020-06-23 17:11:10,566 maskrcnn_benchmark.trainer INFO: eta: 1:00:18  iter: 10800  loss: 0.5609 (0.7326)  loss_classifier: 0.1646 (0.2656)  loss_box_reg: 0.0942 (0.1183)  loss_mask: 0.2497 (0.2922)  loss_objectness: 0.0141 (0.0362)  loss_rpn_box_reg: 0.0075 (0.0203)  time: 0.1084 (0.1239)  data: 0.0014 (0.0168)  lr: 0.016000  max mem: 5148
2020-06-23 17:11:12,717 maskrcnn_benchmark.trainer INFO: eta: 1:00:14  iter: 10820  loss: 0.5181 (0.7323)  loss_classifier: 0.1864 (0.2654)  loss_box_reg: 0.0771 (0.1183)  loss_mask: 0.2215 (0.2921)  loss_objectness: 0.0139 (0.0362)  loss_rpn_box_reg: 0.0066 (0.0203)  time: 0.1072 (0.1239)  data: 0.0014 (0.0168)  lr: 0.016000  max mem: 5148
2020-06-23 17:11:14,887 maskrcnn_benchmark.trainer INFO: eta: 1:00:11  iter: 10840  loss: 0.6053 (0.7319)  loss_classifier: 0.1680 (0.2652)  loss_box_reg: 0.0873 (0.1182)  loss_mask: 0.2451 (0.2920)  loss_objectness: 0.0154 (0.0362)  loss_rpn_box_reg: 0.0087 (0.0203)  time: 0.1089 (0.1238)  data: 0.0014 (0.0167)  lr: 0.016000  max mem: 5148
2020-06-23 17:11:17,060 maskrcnn_benchmark.trainer INFO: eta: 1:00:08  iter: 10860  loss: 0.5791 (0.7316)  loss_classifier: 0.1762 (0.2651)  loss_box_reg: 0.0980 (0.1181)  loss_mask: 0.2648 (0.2920)  loss_objectness: 0.0182 (0.0361)  loss_rpn_box_reg: 0.0106 (0.0203)  time: 0.1077 (0.1238)  data: 0.0014 (0.0167)  lr: 0.016000  max mem: 5148
2020-06-23 17:11:19,234 maskrcnn_benchmark.trainer INFO: eta: 1:00:04  iter: 10880  loss: 0.5735 (0.7313)  loss_classifier: 0.2032 (0.2650)  loss_box_reg: 0.0894 (0.1181)  loss_mask: 0.2471 (0.2919)  loss_objectness: 0.0149 (0.0361)  loss_rpn_box_reg: 0.0057 (0.0203)  time: 0.1084 (0.1238)  data: 0.0015 (0.0167)  lr: 0.016000  max mem: 5148
2020-06-23 17:11:21,400 maskrcnn_benchmark.trainer INFO: eta: 1:00:01  iter: 10900  loss: 0.5048 (0.7309)  loss_classifier: 0.1551 (0.2648)  loss_box_reg: 0.0740 (0.1181)  loss_mask: 0.2218 (0.2918)  loss_objectness: 0.0093 (0.0361)  loss_rpn_box_reg: 0.0061 (0.0203)  time: 0.1080 (0.1238)  data: 0.0014 (0.0167)  lr: 0.016000  max mem: 5148
2020-06-23 17:11:23,577 maskrcnn_benchmark.trainer INFO: eta: 0:59:58  iter: 10920  loss: 0.5798 (0.7306)  loss_classifier: 0.1900 (0.2647)  loss_box_reg: 0.0976 (0.1180)  loss_mask: 0.2435 (0.2917)  loss_objectness: 0.0155 (0.0360)  loss_rpn_box_reg: 0.0049 (0.0202)  time: 0.1085 (0.1237)  data: 0.0014 (0.0166)  lr: 0.016000  max mem: 5148
2020-06-23 17:11:25,746 maskrcnn_benchmark.trainer INFO: eta: 0:59:54  iter: 10940  loss: 0.5943 (0.7304)  loss_classifier: 0.1987 (0.2646)  loss_box_reg: 0.1005 (0.1180)  loss_mask: 0.2475 (0.2916)  loss_objectness: 0.0129 (0.0360)  loss_rpn_box_reg: 0.0089 (0.0202)  time: 0.1083 (0.1237)  data: 0.0014 (0.0166)  lr: 0.016000  max mem: 5148
2020-06-23 17:11:27,905 maskrcnn_benchmark.trainer INFO: eta: 0:59:51  iter: 10960  loss: 0.5434 (0.7301)  loss_classifier: 0.1845 (0.2644)  loss_box_reg: 0.0988 (0.1179)  loss_mask: 0.2417 (0.2915)  loss_objectness: 0.0100 (0.0360)  loss_rpn_box_reg: 0.0063 (0.0202)  time: 0.1077 (0.1237)  data: 0.0014 (0.0166)  lr: 0.016000  max mem: 5148
2020-06-23 17:11:30,080 maskrcnn_benchmark.trainer INFO: eta: 0:59:48  iter: 10980  loss: 0.5697 (0.7298)  loss_classifier: 0.1794 (0.2643)  loss_box_reg: 0.1030 (0.1179)  loss_mask: 0.2474 (0.2914)  loss_objectness: 0.0230 (0.0360)  loss_rpn_box_reg: 0.0085 (0.0202)  time: 0.1089 (0.1237)  data: 0.0015 (0.0166)  lr: 0.016000  max mem: 5148
2020-06-23 17:11:32,256 maskrcnn_benchmark.trainer INFO: eta: 0:59:45  iter: 11000  loss: 0.7052 (0.7297)  loss_classifier: 0.2264 (0.2642)  loss_box_reg: 0.1266 (0.1179)  loss_mask: 0.2671 (0.2914)  loss_objectness: 0.0347 (0.0360)  loss_rpn_box_reg: 0.0151 (0.0202)  time: 0.1082 (0.1236)  data: 0.0015 (0.0165)  lr: 0.016000  max mem: 5148
:::MLLOG {"namespace": "", "time_ms": 1592957492687, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 12}}
:::MLLOG {"namespace": "", "time_ms": 1592957492688, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 12}}
:::MLLOG {"namespace": "", "time_ms": 1592957492688, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 12}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
2020-06-23 17:11:32,898 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
Done (t=0.26s)
creating index...
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.26s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 17:11:33,205 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:57,  1.35it/s]
  5%|         | 4/79 [00:00<00:39,  1.89it/s]
  9%|         | 7/79 [00:00<00:27,  2.61it/s]
 13%|        | 10/79 [00:01<00:19,  3.57it/s]
 16%|        | 13/79 [00:01<00:13,  4.81it/s]
 20%|        | 16/79 [00:01<00:09,  6.35it/s]
 24%|       | 19/79 [00:01<00:07,  8.20it/s]
 28%|       | 22/79 [00:01<00:05, 10.29it/s]
 32%|      | 25/79 [00:01<00:04, 12.56it/s]
 35%|      | 28/79 [00:01<00:03, 14.86it/s]
 39%|      | 31/79 [00:01<00:02, 17.07it/s]
 43%|     | 34/79 [00:02<00:02, 19.11it/s]
 47%|     | 37/79 [00:02<00:02, 20.68it/s]
 51%|     | 40/79 [00:02<00:01, 21.81it/s]
 54%|    | 43/79 [00:02<00:01, 22.95it/s]
 58%|    | 46/79 [00:02<00:01, 23.50it/s]
 62%|   | 49/79 [00:02<00:01, 24.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:43,  1.74it/s]
  9%|         | 7/79 [00:01<00:29,  2.42it/s]
 13%|        | 10/79 [00:01<00:20,  3.33it/s]
 16%|        | 13/79 [00:01<00:14,  4.49it/s]
 20%|        | 16/79 [00:01<00:10,  5.98it/s]
 24%|       | 19/79 [00:01<00:07,  7.77it/s]
 28%|       | 22/79 [00:01<00:05,  9.85it/s]
 32%|      | 25/79 [00:01<00:04, 12.11it/s]
 35%|      | 28/79 [00:01<00:03, 14.38it/s]
 39%|      | 31/79 [00:01<00:02, 16.63it/s]
 43%|     | 34/79 [00:02<00:02, 18.68it/s]
 47%|     | 37/79 [00:02<00:02, 20.38it/s]
 51%|     | 40/79 [00:02<00:01, 21.63it/s]
 54%|    | 43/79 [00:02<00:01, 22.89it/s]
 58%|    | 46/79 [00:02<00:01, 23.75it/s]
 62%|   | 49/79 [00:02<00:01, 24.31it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.62it/s]
 28%|       | 22/79 [00:01<00:05,  9.70it/s]
 32%|      | 25/79 [00:01<00:04, 11.97it/s]
 35%|      | 28/79 [00:01<00:03, 14.28it/s]
 39%|      | 31/79 [00:01<00:02, 16.68it/s]
 43%|     | 34/79 [00:02<00:02, 18.77it/s]
 47%|     | 37/79 [00:02<00:02, 20.63it/s]
 51%|     | 40/79 [00:02<00:01, 21.96it/s]
 54%|    | 43/79 [00:02<00:01, 22.88it/s]
 58%|    | 46/79 [00:02<00:01, 23.82it/s]
 62%|   | 49/79 [00:02<00:01, 24.35it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.70it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.49it/s]
 32%|      | 25/79 [00:01<00:04, 11.75it/s]
 35%|      | 28/79 [00:01<00:03, 14.13it/s]
 39%|      | 31/79 [00:02<00:02, 16.42it/s]
 43%|     | 34/79 [00:02<00:02, 18.51it/s]
 47%|     | 37/79 [00:02<00:02, 20.26it/s]
 51%|     | 40/79 [00:02<00:01, 21.87it/s]
 54%|    | 43/79 [00:02<00:01, 23.17it/s]
 58%|    | 46/79 [00:02<00:01, 23.81it/s]
 62%|   | 49/79 [00:02<00:01, 24.73it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.36it/s]
 20%|        | 16/79 [00:01<00:10,  5.82it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.63it/s]
 32%|      | 25/79 [00:01<00:04, 11.93it/s]
 35%|      | 28/79 [00:01<00:03, 14.34it/s]
 39%|      | 31/79 [00:02<00:02, 16.47it/s]
 43%|     | 34/79 [00:02<00:02, 18.44it/s]
 47%|     | 37/79 [00:02<00:02, 20.29it/s]
 51%|     | 40/79 [00:02<00:01, 21.77it/s]
 54%|    | 43/79 [00:02<00:01, 22.88it/s]
 58%|    | 46/79 [00:02<00:01, 23.81it/s]
 62%|   | 49/79 [00:02<00:01, 24.75it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.40it/s]
 32%|      | 25/79 [00:01<00:04, 11.58it/s]
 35%|      | 28/79 [00:01<00:03, 13.72it/s]
 39%|      | 31/79 [00:02<00:03, 15.99it/s]
 43%|     | 34/79 [00:02<00:02, 18.02it/s]
 47%|     | 37/79 [00:02<00:02, 19.96it/s]
 51%|     | 40/79 [00:02<00:01, 21.66it/s]
 54%|    | 43/79 [00:02<00:01, 22.73it/s]
 58%|    | 46/79 [00:02<00:01, 23.69it/s]
 62%|   | 49/79 [00:02<00:01, 24.54it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.34it/s]
 28%|       | 22/79 [00:01<00:06,  9.37it/s]
 32%|      | 25/79 [00:01<00:04, 11.58it/s]
 35%|      | 28/79 [00:01<00:03, 13.97it/s]
 39%|      | 31/79 [00:02<00:02, 16.19it/s]
 43%|     | 34/79 [00:02<00:02, 18.42it/s]
 47%|     | 37/79 [00:02<00:02, 20.04it/s]
 51%|     | 40/79 [00:02<00:01, 21.41it/s]
 54%|    | 43/79 [00:02<00:01, 22.60it/s]
 58%|    | 46/79 [00:02<00:01, 23.40it/s]
 62%|   | 49/79 [00:02<00:01, 24.13it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.50it/s]
 35%|      | 28/79 [00:01<00:03, 13.80it/s]
 39%|      | 31/79 [00:02<00:02, 16.08it/s]
 43%|     | 34/79 [00:02<00:02, 18.15it/s]
 47%|     | 37/79 [00:02<00:02, 19.79it/s]
 51%|     | 40/79 [00:02<00:01, 21.33it/s]
 54%|    | 43/79 [00:02<00:01, 22.55it/s]
 58%|    | 46/79 [00:02<00:01, 23.42it/s]
 62%|   | 49/79 [00:02<00:01, 24.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.60it/s]
 32%|      | 25/79 [00:01<00:04, 11.82it/s]
 35%|      | 28/79 [00:01<00:03, 14.20it/s]
 39%|      | 31/79 [00:02<00:02, 16.52it/s]
 43%|     | 34/79 [00:02<00:02, 18.51it/s]
 47%|     | 37/79 [00:02<00:02, 20.37it/s]
 51%|     | 40/79 [00:02<00:01, 21.62it/s]
 54%|    | 43/79 [00:02<00:01, 22.92it/s]
 58%|    | 46/79 [00:02<00:01, 22.98it/s]
 62%|   | 49/79 [00:02<00:01, 23.62it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.38it/s]
 32%|      | 25/79 [00:01<00:04, 11.55it/s]
 35%|      | 28/79 [00:01<00:03, 13.85it/s]
 39%|      | 31/79 [00:02<00:02, 16.10it/s]
 43%|     | 34/79 [00:02<00:02, 17.98it/s]
 47%|     | 37/79 [00:02<00:02, 19.75it/s]
 51%|     | 40/79 [00:02<00:01, 21.15it/s]
 54%|    | 43/79 [00:02<00:01, 22.27it/s]
 58%|    | 46/79 [00:02<00:01, 23.26it/s]
 62%|   | 49/79 [00:02<00:01, 23.95it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.23it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.32it/s]
 32%|      | 25/79 [00:01<00:04, 11.54it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:02, 16.11it/s]
 43%|     | 34/79 [00:02<00:02, 18.20it/s]
 47%|     | 37/79 [00:02<00:02, 20.00it/s]
 51%|     | 40/79 [00:02<00:01, 21.33it/s]
 54%|    | 43/79 [00:02<00:01, 22.41it/s]
 58%|    | 46/79 [00:02<00:01, 23.19it/s]
 62%|   | 49/79 [00:02<00:01, 24.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.83it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.63it/s]
 32%|      | 25/79 [00:01<00:04, 11.81it/s]
 35%|      | 28/79 [00:01<00:03, 14.07it/s]
 39%|      | 31/79 [00:02<00:02, 16.22it/s]
 43%|     | 34/79 [00:02<00:02, 18.34it/s]
 47%|     | 37/79 [00:02<00:02, 20.04it/s]
 51%|     | 40/79 [00:02<00:01, 21.46it/s]
 54%|    | 43/79 [00:02<00:01, 22.59it/s]
 58%|    | 46/79 [00:02<00:01, 23.55it/s]
 62%|   | 49/79 [00:02<00:01, 24.14it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.09it/s]
 28%|       | 22/79 [00:01<00:06,  9.07it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.63it/s]
 39%|      | 31/79 [00:02<00:03, 15.94it/s]
 43%|     | 34/79 [00:02<00:02, 18.13it/s]
 47%|     | 37/79 [00:02<00:02, 19.84it/s]
 51%|     | 40/79 [00:02<00:01, 21.45it/s]
 54%|    | 43/79 [00:02<00:01, 22.62it/s]
 58%|    | 46/79 [00:02<00:01, 23.64it/s]
 62%|   | 49/79 [00:02<00:01, 24.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.57it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.53it/s]
 35%|      | 28/79 [00:01<00:03, 13.90it/s]
 39%|      | 31/79 [00:02<00:02, 16.04it/s]
 43%|     | 34/79 [00:02<00:02, 18.05it/s]
 47%|     | 37/79 [00:02<00:02, 19.76it/s]
 51%|     | 40/79 [00:02<00:01, 21.33it/s]
 54%|    | 43/79 [00:02<00:01, 22.40it/s]
 58%|    | 46/79 [00:02<00:01, 23.46it/s]
 62%|   | 49/79 [00:02<00:01, 24.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.78it/s]
 24%|       | 19/79 [00:01<00:07,  7.51it/s]
 28%|       | 22/79 [00:01<00:06,  9.50it/s]
 32%|      | 25/79 [00:01<00:04, 11.68it/s]
 35%|      | 28/79 [00:01<00:03, 13.94it/s]
 39%|      | 31/79 [00:02<00:02, 16.15it/s]
 43%|     | 34/79 [00:02<00:02, 17.99it/s]
 47%|     | 37/79 [00:02<00:02, 19.64it/s]
 51%|     | 40/79 [00:02<00:01, 20.95it/s]
 54%|    | 43/79 [00:02<00:01, 22.06it/s]
 58%|    | 46/79 [00:02<00:01, 22.88it/s]
 62%|   | 49/79 [00:02<00:01, 23.74it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.32it/s]
 32%|      | 25/79 [00:01<00:04, 11.52it/s]
 35%|      | 28/79 [00:01<00:03, 13.89it/s]
 39%|      | 31/79 [00:02<00:02, 16.12it/s]
 43%|     | 34/79 [00:02<00:02, 18.14it/s]
 47%|     | 37/79 [00:02<00:02, 19.96it/s]
 51%|     | 40/79 [00:02<00:01, 21.32it/s]
 54%|    | 43/79 [00:02<00:01, 22.36it/s]
 58%|    | 46/79 [00:02<00:01, 23.46it/s]
 62%|   | 49/79 [00:02<00:01, 24.28it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.12it/s]
 28%|       | 22/79 [00:01<00:06,  9.12it/s]
 32%|      | 25/79 [00:01<00:04, 11.35it/s]
 35%|      | 28/79 [00:01<00:03, 13.65it/s]
 39%|      | 31/79 [00:02<00:03, 15.98it/s]
 43%|     | 34/79 [00:02<00:02, 18.00it/s]
 47%|     | 37/79 [00:02<00:02, 19.88it/s]
 51%|     | 40/79 [00:02<00:01, 21.36it/s]
 54%|    | 43/79 [00:02<00:01, 22.54it/s]
 58%|    | 46/79 [00:02<00:01, 23.42it/s]
 62%|   | 49/79 [00:02<00:01, 23.82it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.11it/s]
 32%|      | 25/79 [00:01<00:04, 11.29it/s]
 35%|      | 28/79 [00:01<00:03, 13.56it/s]
 39%|      | 31/79 [00:02<00:03, 15.69it/s]
 43%|     | 34/79 [00:02<00:02, 17.81it/s]
 47%|     | 37/79 [00:02<00:02, 19.52it/s]
 51%|     | 40/79 [00:02<00:01, 20.94it/s]
 54%|    | 43/79 [00:02<00:01, 22.32it/s]
 58%|    | 46/79 [00:02<00:01, 23.24it/s]
 62%|   | 49/79 [00:02<00:01, 23.57it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.24it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.55it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 13.99it/s]
 39%|      | 31/79 [00:02<00:02, 16.22it/s]
 43%|     | 34/79 [00:02<00:02, 18.07it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 21.00it/s]
 54%|    | 43/79 [00:02<00:01, 22.11it/s]
 58%|    | 46/79 [00:02<00:01, 22.88it/s]
 62%|   | 49/79 [00:02<00:01, 23.32it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.27it/s]
 32%|      | 25/79 [00:01<00:04, 11.42it/s]
 35%|      | 28/79 [00:01<00:03, 13.78it/s]
 39%|      | 31/79 [00:02<00:03, 15.96it/s]
 43%|     | 34/79 [00:02<00:02, 17.70it/s]
 47%|     | 37/79 [00:02<00:02, 19.53it/s]
 51%|     | 40/79 [00:02<00:01, 21.11it/s]
 54%|    | 43/79 [00:02<00:01, 22.31it/s]
 58%|    | 46/79 [00:02<00:01, 23.27it/s]
 62%|   | 49/79 [00:02<00:01, 23.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.63it/s]
 39%|      | 31/79 [00:02<00:03, 15.87it/s]
 43%|     | 34/79 [00:02<00:02, 17.85it/s]
 47%|     | 37/79 [00:02<00:02, 19.64it/s]
 51%|     | 40/79 [00:02<00:01, 20.94it/s]
 54%|    | 43/79 [00:02<00:01, 21.84it/s]
 58%|    | 46/79 [00:02<00:01, 22.77it/s]
 62%|   | 49/79 [00:02<00:01, 23.31it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.38it/s]
 32%|      | 25/79 [00:01<00:04, 11.55it/s]
 35%|      | 28/79 [00:01<00:03, 13.84it/s]
 39%|      | 31/79 [00:02<00:02, 16.08it/s]
 43%|     | 34/79 [00:02<00:02, 18.11it/s]
 47%|     | 37/79 [00:02<00:02, 19.69it/s]
 51%|     | 40/79 [00:02<00:01, 21.17it/s]
 54%|    | 43/79 [00:02<00:01, 22.46it/s]
 58%|    | 46/79 [00:02<00:01, 23.37it/s]
 62%|   | 49/79 [00:02<00:01, 24.06it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  4%|         | 3/79 [00:00<00:47,  1.59it/s]
  8%|         | 6/79 [00:01<00:33,  2.21it/s]
 11%|        | 9/79 [00:01<00:23,  3.04it/s]
 15%|        | 12/79 [00:01<00:16,  4.12it/s]
 19%|        | 15/79 [00:01<00:11,  5.51it/s]
 23%|       | 18/79 [00:01<00:08,  7.20it/s]
 27%|       | 21/79 [00:01<00:06,  9.15it/s]
 30%|       | 24/79 [00:01<00:04, 11.26it/s]
 34%|      | 27/79 [00:01<00:03, 13.53it/s]
 38%|      | 30/79 [00:02<00:03, 15.74it/s]
 42%|     | 33/79 [00:02<00:02, 17.64it/s]
 46%|     | 36/79 [00:02<00:02, 19.42it/s]
 49%|     | 39/79 [00:02<00:01, 20.87it/s]
 53%|    | 42/79 [00:02<00:01, 22.01it/s]
 57%|    | 45/79 [00:02<00:01, 22.73it/s]
 61%|    | 48/79 [00:02<00:01, 23.25it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.09it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.14it/s]
 28%|       | 22/79 [00:01<00:06,  9.10it/s]
 32%|      | 25/79 [00:01<00:04, 11.29it/s]
 35%|      | 28/79 [00:01<00:03, 13.55it/s]
 39%|      | 31/79 [00:02<00:03, 15.83it/s]
 43%|     | 34/79 [00:02<00:02, 17.99it/s]
 47%|     | 37/79 [00:02<00:02, 19.77it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 22.08it/s]
 58%|    | 46/79 [00:02<00:01, 23.06it/s]
 62%|   | 49/79 [00:02<00:01, 23.69it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.17it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.25it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.35it/s]
 35%|      | 28/79 [00:01<00:03, 13.59it/s]
 39%|      | 31/79 [00:02<00:03, 15.75it/s]
 43%|     | 34/79 [00:02<00:02, 17.77it/s]
 47%|     | 37/79 [00:02<00:02, 19.48it/s]
 51%|     | 40/79 [00:02<00:01, 21.03it/s]
 54%|    | 43/79 [00:02<00:01, 21.89it/s]
 58%|    | 46/79 [00:02<00:01, 22.87it/s]
 62%|   | 49/79 [00:02<00:01, 23.42it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:15,  4.13it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.20it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.76it/s]
 43%|     | 34/79 [00:02<00:02, 17.80it/s]
 47%|     | 37/79 [00:02<00:02, 19.57it/s]
 51%|     | 40/79 [00:02<00:01, 21.00it/s]
 54%|    | 43/79 [00:02<00:01, 22.24it/s]
 58%|    | 46/79 [00:02<00:01, 23.05it/s]
 62%|   | 49/79 [00:02<00:01, 23.75it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.29it/s]
 35%|      | 28/79 [00:01<00:03, 13.55it/s]
 39%|      | 31/79 [00:02<00:03, 15.82it/s]
 43%|     | 34/79 [00:02<00:02, 17.69it/s]
 47%|     | 37/79 [00:02<00:02, 19.36it/s]
 51%|     | 40/79 [00:02<00:01, 20.79it/s]
 54%|    | 43/79 [00:02<00:01, 22.24it/s]
 58%|    | 46/79 [00:02<00:01, 22.83it/s]
 62%|   | 49/79 [00:02<00:01, 23.19it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.30it/s]
 24%|       | 19/79 [00:01<00:08,  6.95it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.07it/s]
 35%|      | 28/79 [00:01<00:03, 13.37it/s]
 39%|      | 31/79 [00:02<00:03, 15.51it/s]
 43%|     | 34/79 [00:02<00:02, 17.61it/s]
 47%|     | 37/79 [00:02<00:02, 19.30it/s]
 51%|     | 40/79 [00:02<00:01, 20.71it/s]
 54%|    | 43/79 [00:02<00:01, 21.69it/s]
 58%|    | 46/79 [00:02<00:01, 22.49it/s]
 62%|   | 49/79 [00:02<00:01, 22.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  4%|         | 3/79 [00:01<00:50,  1.49it/s]
  8%|         | 6/79 [00:01<00:35,  2.08it/s]
 11%|        | 9/79 [00:01<00:24,  2.87it/s]
 15%|        | 12/79 [00:01<00:17,  3.91it/s]
 19%|        | 15/79 [00:01<00:12,  5.24it/s]
 23%|       | 18/79 [00:01<00:08,  6.87it/s]
 27%|       | 21/79 [00:01<00:06,  8.80it/s]
 30%|       | 24/79 [00:01<00:05, 10.95it/s]
 34%|      | 27/79 [00:01<00:03, 13.20it/s]
 38%|      | 30/79 [00:02<00:03, 15.29it/s]
 42%|     | 33/79 [00:02<00:02, 17.26it/s]
 46%|     | 36/79 [00:02<00:02, 18.92it/s]
 49%|     | 39/79 [00:02<00:01, 20.51it/s]
 53%|    | 42/79 [00:02<00:01, 21.52it/s]
 57%|    | 45/79 [00:02<00:01, 22.47it/s]
 61%|    | 48/79 [00:02<00:01, 22.83it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  7.01it/s]
 28%|       | 22/79 [00:01<00:06,  8.96it/s]
 32%|      | 25/79 [00:01<00:04, 11.08it/s]
 35%|      | 28/79 [00:02<00:03, 13.37it/s]
 39%|      | 31/79 [00:02<00:03, 15.55it/s]
 43%|     | 34/79 [00:02<00:02, 17.52it/s]
 47%|     | 37/79 [00:02<00:02, 18.95it/s]
 51%|     | 40/79 [00:02<00:01, 20.57it/s]
 54%|    | 43/79 [00:02<00:01, 21.42it/s]
 58%|    | 46/79 [00:02<00:01, 22.01it/s]
 62%|   | 49/79 [00:02<00:01, 22.81it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  4%|         | 3/79 [00:01<00:48,  1.58it/s]
  8%|         | 6/79 [00:01<00:33,  2.20it/s]
 11%|        | 9/79 [00:01<00:23,  3.02it/s]
 15%|        | 12/79 [00:01<00:16,  4.10it/s]
 19%|        | 15/79 [00:01<00:11,  5.46it/s]
 23%|       | 18/79 [00:01<00:08,  7.14it/s]
 27%|       | 21/79 [00:01<00:06,  9.09it/s]
 30%|       | 24/79 [00:01<00:04, 11.15it/s]
 34%|      | 27/79 [00:01<00:03, 13.35it/s]
 38%|      | 30/79 [00:02<00:03, 15.35it/s]
 42%|     | 33/79 [00:02<00:02, 17.33it/s]
 46%|     | 36/79 [00:02<00:02, 19.04it/s]
 49%|     | 39/79 [00:02<00:01, 20.35it/s]
 53%|    | 42/79 [00:02<00:01, 21.08it/s]
 57%|    | 45/79 [00:02<00:01, 22.20it/s]
 61%|    | 48/79 [00:02<00:01, 22.84it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  5%|         | 4/79 [00:01<00:52,  1.42it/s]
  9%|         | 7/79 [00:01<00:36,  1.98it/s]
 13%|        | 10/79 [00:01<00:25,  2.74it/s]
 16%|        | 13/79 [00:01<00:17,  3.74it/s]
 20%|        | 16/79 [00:01<00:12,  5.02it/s]
 24%|       | 19/79 [00:01<00:09,  6.62it/s]
 28%|       | 22/79 [00:01<00:06,  8.48it/s]
 32%|      | 25/79 [00:01<00:05, 10.62it/s]
 35%|      | 28/79 [00:02<00:03, 12.87it/s]
 39%|      | 31/79 [00:02<00:03, 15.18it/s]
 43%|     | 34/79 [00:02<00:02, 17.32it/s]
 47%|     | 37/79 [00:02<00:02, 19.06it/s]
 51%|     | 40/79 [00:02<00:01, 20.60it/s]
 54%|    | 43/79 [00:02<00:01, 21.79it/s]
 58%|    | 46/79 [00:02<00:01, 22.63it/s]
 62%|   | 49/79 [00:02<00:01, 23.32it/s]
 66%|   | 52/79 [00:03<00:01, 24.74it/s]
 70%|   | 55/79 [00:02<00:00, 25.15it/s]
 73%|  | 58/79 [00:03<00:00, 25.54it/s]
 77%|  | 61/79 [00:03<00:00, 25.54it/s]
 81%|  | 64/79 [00:03<00:00, 25.34it/s]
 85%| | 67/79 [00:03<00:00, 25.68it/s]
 89%| | 70/79 [00:03<00:00, 25.55it/s]
 92%|| 73/79 [00:03<00:00, 25.99it/s]
 96%|| 76/79 [00:03<00:00, 26.47it/s]
100%|| 79/79 [00:03<00:00, 20.42it/s]
, 24.62it/s]
 70%|   | 55/79 [00:02<00:00, 24.93it/s]
 73%|  | 58/79 [00:02<00:00, 25.43it/s]
 77%|  | 61/79 [00:03<00:00, 25.18it/s]
 81%|  | 64/79 [00:03<00:00, 25.40it/s]
 85%| | 67/79 [00:03<00:00, 25.56it/s]
 89%| | 70/79 [00:03<00:00, 25.72it/s]
 92%|| 73/79 [00:03<00:00, 25.90it/s]
 96%|| 76/79 [00:03<00:00, 26.51it/s]
100%|| 79/79 [00:03<00:00, 27.35it/s]
, 24.71it/s]
 70%|   | 55/79 [00:02<00:00, 25.31it/s]
 73%|  | 58/79 [00:03<00:00, 25.51it/s]
 77%|  | 61/79 [00:03<00:00, 26.01it/s]
 81%|  | 64/79 [00:03<00:00, 26.07it/s]
 85%| | 67/79 [00:03<00:00, 26.09it/s]
 89%| | 70/79 [00:03<00:00, 25.90it/s]
 92%|| 73/79 [00:03<00:00, 26.27it/s]
 96%|| 76/79 [00:03<00:00, 26.89it/s]
100%|| 79/79 [00:03<00:00, 27.75it/s]
, 25.06it/s]
 70%|   | 55/79 [00:02<00:00, 25.74it/s]
 73%|  | 58/79 [00:03<00:00, 25.98it/s]
 77%|  | 61/79 [00:03<00:00, 25.90it/s]
 81%|  | 64/79 [00:03<00:00, 26.05it/s]
 85%| | 67/79 [00:03<00:00, 26.28it/s]
 89%| | 70/79 [00:03<00:00, 26.21it/s]
 92%|| 73/79 [00:03<00:00, 26.54it/s]
 96%|| 76/79 [00:03<00:00, 27.05it/s]
100%|| 79/79 [00:03<00:00, 20.30it/s]
, 25.35it/s]
 70%|   | 55/79 [00:02<00:00, 25.27it/s]
 73%|  | 58/79 [00:03<00:00, 25.61it/s]
 77%|  | 61/79 [00:03<00:00, 25.74it/s]
 81%|  | 64/79 [00:03<00:00, 25.73it/s]
 85%| | 67/79 [00:03<00:00, 25.62it/s]
 89%| | 70/79 [00:03<00:00, 25.95it/s]
 92%|| 73/79 [00:03<00:00, 25.76it/s]
 96%|| 76/79 [00:03<00:00, 26.51it/s]
100%|| 79/79 [00:03<00:00, 27.29it/s]
, 25.06it/s]
 70%|   | 55/79 [00:02<00:00, 25.54it/s]
 73%|  | 58/79 [00:03<00:00, 26.01it/s]
 77%|  | 61/79 [00:03<00:00, 26.31it/s]
 81%|  | 64/79 [00:03<00:00, 25.88it/s]
 85%| | 67/79 [00:03<00:00, 25.81it/s]
 89%| | 70/79 [00:03<00:00, 26.00it/s]
 92%|| 73/79 [00:03<00:00, 25.79it/s]
 96%|| 76/79 [00:03<00:00, 26.36it/s]
100%|| 79/79 [00:03<00:00, 27.11it/s]
, 24.70it/s]
 70%|   | 55/79 [00:02<00:00, 25.16it/s]
 73%|  | 58/79 [00:03<00:00, 25.28it/s]
 77%|  | 61/79 [00:03<00:00, 25.68it/s]
 81%|  | 64/79 [00:03<00:00, 25.89it/s]
 85%| | 67/79 [00:03<00:00, 25.60it/s]
 89%| | 70/79 [00:03<00:00, 25.76it/s]
 92%|| 73/79 [00:03<00:00, 25.78it/s]
 96%|| 76/79 [00:03<00:00, 26.54it/s]
100%|| 79/79 [00:03<00:00, 27.31it/s]
, 24.67it/s]
 70%|   | 55/79 [00:02<00:00, 25.14it/s]
 73%|  | 58/79 [00:03<00:00, 25.43it/s]
 77%|  | 61/79 [00:03<00:00, 25.61it/s]
 81%|  | 64/79 [00:03<00:00, 25.59it/s]
 85%| | 67/79 [00:03<00:00, 25.89it/s]
 89%| | 70/79 [00:03<00:00, 26.15it/s]
 92%|| 73/79 [00:03<00:00, 26.29it/s]
 96%|| 76/79 [00:03<00:00, 26.97it/s]
100%|| 79/79 [00:03<00:00, 27.80it/s]
, 24.50it/s]
 70%|   | 55/79 [00:02<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 25.01it/s]
 77%|  | 61/79 [00:03<00:00, 25.29it/s]
 81%|  | 64/79 [00:03<00:00, 25.36it/s]
 85%| | 67/79 [00:03<00:00, 25.60it/s]
 89%| | 70/79 [00:03<00:00, 25.46it/s]
 92%|| 73/79 [00:03<00:00, 25.94it/s]
 96%|| 76/79 [00:03<00:00, 26.51it/s]
100%|| 79/79 [00:03<00:00, 27.23it/s]
, 24.59it/s]
 70%|   | 55/79 [00:02<00:00, 25.04it/s]
 73%|  | 58/79 [00:03<00:00, 25.21it/s]
 77%|  | 61/79 [00:03<00:00, 25.65it/s]
 81%|  | 64/79 [00:03<00:00, 25.70it/s]
 85%| | 67/79 [00:03<00:00, 25.77it/s]
 89%| | 70/79 [00:03<00:00, 25.93it/s]
 92%|| 73/79 [00:03<00:00, 26.30it/s]
 96%|| 76/79 [00:03<00:00, 26.93it/s]
100%|| 79/79 [00:03<00:00, 27.75it/s]
, 24.82it/s]
 70%|   | 55/79 [00:02<00:00, 25.30it/s]
 73%|  | 58/79 [00:03<00:00, 25.27it/s]
 77%|  | 61/79 [00:03<00:00, 25.48it/s]
 81%|  | 64/79 [00:03<00:00, 25.48it/s]
 85%| | 67/79 [00:03<00:00, 25.64it/s]
 89%| | 70/79 [00:03<00:00, 25.71it/s]
 92%|| 73/79 [00:03<00:00, 25.97it/s]
 96%|| 76/79 [00:03<00:00, 26.49it/s]
100%|| 79/79 [00:03<00:00, 27.39it/s]
, 23.99it/s]
 70%|   | 55/79 [00:02<00:00, 24.71it/s]
 73%|  | 58/79 [00:03<00:00, 24.74it/s]
 77%|  | 61/79 [00:03<00:00, 24.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.94it/s]
 85%| | 67/79 [00:03<00:00, 25.19it/s]
 89%| | 70/79 [00:03<00:00, 25.16it/s]
 92%|| 73/79 [00:03<00:00, 25.69it/s]
 96%|| 76/79 [00:03<00:00, 26.42it/s]
100%|| 79/79 [00:03<00:00, 20.10it/s]
, 24.38it/s]
 70%|   | 55/79 [00:02<00:00, 24.37it/s]
 73%|  | 58/79 [00:03<00:00, 24.90it/s]
 77%|  | 61/79 [00:03<00:00, 24.73it/s]
 81%|  | 64/79 [00:03<00:00, 25.03it/s]
 85%| | 67/79 [00:03<00:00, 25.12it/s]
 89%| | 70/79 [00:03<00:00, 25.15it/s]
 92%|| 73/79 [00:03<00:00, 25.52it/s]
 96%|| 76/79 [00:03<00:00, 26.24it/s]
100%|| 79/79 [00:03<00:00, 27.12it/s]
, 24.45it/s]
 70%|   | 55/79 [00:03<00:00, 24.80it/s]
 73%|  | 58/79 [00:03<00:00, 25.39it/s]
 77%|  | 61/79 [00:03<00:00, 25.36it/s]
 81%|  | 64/79 [00:03<00:00, 25.79it/s]
 85%| | 67/79 [00:03<00:00, 25.59it/s]
 89%| | 70/79 [00:03<00:00, 25.62it/s]
 92%|| 73/79 [00:03<00:00, 25.82it/s]
 97%|| 77/79 [00:03<00:00, 26.86it/s]
100%|| 79/79 [00:03<00:00, 19.92it/s]
, 24.39it/s]
 70%|   | 55/79 [00:02<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 24.94it/s]
 77%|  | 61/79 [00:03<00:00, 24.81it/s]
 81%|  | 64/79 [00:03<00:00, 24.83it/s]
 85%| | 67/79 [00:03<00:00, 24.85it/s]
 89%| | 70/79 [00:03<00:00, 25.16it/s]
 92%|| 73/79 [00:03<00:00, 25.36it/s]
 96%|| 76/79 [00:03<00:00, 26.20it/s]
100%|| 79/79 [00:03<00:00, 27.19it/s]
, 24.69it/s]
 70%|   | 55/79 [00:02<00:00, 24.87it/s]
 73%|  | 58/79 [00:03<00:00, 25.17it/s]
 77%|  | 61/79 [00:03<00:00, 25.13it/s]
 81%|  | 64/79 [00:03<00:00, 25.40it/s]
 85%| | 67/79 [00:03<00:00, 25.52it/s]
 89%| | 70/79 [00:03<00:00, 25.71it/s]
 92%|| 73/79 [00:03<00:00, 26.01it/s]
 96%|| 76/79 [00:03<00:00, 26.72it/s]
100%|| 79/79 [00:03<00:00, 27.51it/s]
, 24.24it/s]
 70%|   | 55/79 [00:02<00:00, 24.48it/s]
 73%|  | 58/79 [00:03<00:00, 24.65it/s]
 77%|  | 61/79 [00:03<00:00, 24.39it/s]
 81%|  | 64/79 [00:03<00:00, 24.72it/s]
 85%| | 67/79 [00:03<00:00, 24.86it/s]
 89%| | 70/79 [00:03<00:00, 24.99it/s]
 92%|| 73/79 [00:03<00:00, 25.20it/s]
 96%|| 76/79 [00:03<00:00, 25.87it/s]
100%|| 79/79 [00:03<00:00, 26.75it/s]
, 24.06it/s]
 70%|   | 55/79 [00:03<00:00, 24.42it/s]
 73%|  | 58/79 [00:03<00:00, 24.61it/s]
 77%|  | 61/79 [00:03<00:00, 25.10it/s]
 81%|  | 64/79 [00:03<00:00, 25.16it/s]
 85%| | 67/79 [00:03<00:00, 25.24it/s]
 89%| | 70/79 [00:03<00:00, 25.40it/s]
 92%|| 73/79 [00:03<00:00, 25.65it/s]
 96%|| 76/79 [00:03<00:00, 26.32it/s]
100%|| 79/79 [00:03<00:00, 27.25it/s]
, 23.85it/s]
 70%|   | 55/79 [00:02<00:00, 24.38it/s]
 73%|  | 58/79 [00:03<00:00, 24.59it/s]
 77%|  | 61/79 [00:03<00:00, 24.88it/s]
 81%|  | 64/79 [00:03<00:00, 24.57it/s]
 85%| | 67/79 [00:03<00:00, 24.95it/s]
 89%| | 70/79 [00:03<00:00, 24.90it/s]
 92%|| 73/79 [00:03<00:00, 25.52it/s]
 96%|| 76/79 [00:03<00:00, 26.29it/s]
100%|| 79/79 [00:03<00:00, 19.89it/s]
, 24.04it/s]
 70%|   | 55/79 [00:03<00:00, 24.44it/s]
 73%|  | 58/79 [00:03<00:00, 24.66it/s]
 77%|  | 61/79 [00:03<00:00, 24.97it/s]
 81%|  | 64/79 [00:03<00:00, 25.11it/s]
 85%| | 67/79 [00:03<00:00, 25.22it/s]
 89%| | 70/79 [00:03<00:00, 25.04it/s]
 92%|| 73/79 [00:03<00:00, 25.57it/s]
 96%|| 76/79 [00:03<00:00, 26.39it/s]
100%|| 79/79 [00:03<00:00, 27.35it/s]
, 23.81it/s]
 70%|   | 55/79 [00:03<00:00, 24.07it/s]
 73%|  | 58/79 [00:03<00:00, 24.51it/s]
 77%|  | 61/79 [00:03<00:00, 24.42it/s]
 81%|  | 64/79 [00:03<00:00, 24.54it/s]
 85%| | 67/79 [00:03<00:00, 24.83it/s]
 89%| | 70/79 [00:03<00:00, 24.97it/s]
 92%|| 73/79 [00:03<00:00, 25.34it/s]
 96%|| 76/79 [00:03<00:00, 25.96it/s]
100%|| 79/79 [00:03<00:00, 26.81it/s]
, 24.28it/s]
 70%|   | 55/79 [00:03<00:00, 24.54it/s]
 73%|  | 58/79 [00:03<00:00, 24.88it/s]
 77%|  | 61/79 [00:03<00:00, 24.68it/s]
 81%|  | 64/79 [00:03<00:00, 24.74it/s]
 85%| | 67/79 [00:03<00:00, 25.05it/s]
 89%| | 70/79 [00:03<00:00, 25.10it/s]
 92%|| 73/79 [00:03<00:00, 25.46it/s]
 96%|| 76/79 [00:03<00:00, 26.11it/s]
100%|| 79/79 [00:03<00:00, 26.99it/s]
, 23.90it/s]
 70%|   | 55/79 [00:03<00:00, 24.19it/s]
 73%|  | 58/79 [00:03<00:00, 24.58it/s]
 77%|  | 61/79 [00:03<00:00, 24.87it/s]
 81%|  | 64/79 [00:03<00:00, 24.93it/s]
 85%| | 67/79 [00:03<00:00, 25.15it/s]
 89%| | 70/79 [00:03<00:00, 24.67it/s]
 92%|| 73/79 [00:03<00:00, 25.19it/s]
 96%|| 76/79 [00:03<00:00, 25.82it/s]
100%|| 79/79 [00:03<00:00, 26.92it/s]
, 24.19it/s]
 70%|   | 55/79 [00:03<00:00, 24.46it/s]
 73%|  | 58/79 [00:03<00:00, 24.63it/s]
 77%|  | 61/79 [00:03<00:00, 25.04it/s]
 81%|  | 64/79 [00:03<00:00, 24.94it/s]
 85%| | 67/79 [00:03<00:00, 25.23it/s]
 89%| | 70/79 [00:03<00:00, 25.18it/s]
 92%|| 73/79 [00:03<00:00, 25.34it/s]
 96%|| 76/79 [00:03<00:00, 26.40it/s]
100%|| 79/79 [00:03<00:00, 26.71it/s]
, 24.08it/s]
 70%|   | 55/79 [00:03<00:00, 24.54it/s]
 73%|  | 58/79 [00:03<00:00, 24.91it/s]
 77%|  | 61/79 [00:03<00:00, 25.01it/s]
 81%|  | 64/79 [00:03<00:00, 25.10it/s]
 85%| | 67/79 [00:03<00:00, 25.25it/s]
 89%| | 70/79 [00:03<00:00, 25.01it/s]
 92%|| 73/79 [00:03<00:00, 25.30it/s]
 96%|| 76/79 [00:03<00:00, 25.94it/s]
100%|| 79/79 [00:03<00:00, 26.66it/s]
, 23.68it/s]
 70%|   | 55/79 [00:03<00:00, 24.08it/s]
 73%|  | 58/79 [00:03<00:00, 24.39it/s]
 77%|  | 61/79 [00:03<00:00, 24.30it/s]
 81%|  | 64/79 [00:03<00:00, 24.37it/s]
 85%| | 67/79 [00:03<00:00, 25.01it/s]
 89%| | 70/79 [00:03<00:00, 24.65it/s]
 92%|| 73/79 [00:03<00:00, 25.28it/s]
 96%|| 76/79 [00:03<00:00, 26.14it/s]
100%|| 79/79 [00:04<00:00, 19.50it/s]
75it/s]
 68%|   | 54/79 [00:03<00:01, 24.09it/s]
 72%|  | 57/79 [00:03<00:00, 24.35it/s]
 76%|  | 60/79 [00:03<00:00, 24.59it/s]
 80%|  | 63/79 [00:03<00:00, 24.82it/s]
 84%| | 66/79 [00:03<00:00, 25.23it/s]
 87%| | 69/79 [00:03<00:00, 25.20it/s]
 91%| | 72/79 [00:03<00:00, 25.30it/s]
 95%|| 75/79 [00:03<00:00, 26.07it/s]
 99%|| 78/79 [00:03<00:00, 26.57it/s]
100%|| 79/79 [00:04<00:00, 19.52it/s]
, 23.69it/s]
 70%|   | 55/79 [00:03<00:00, 24.28it/s]
 73%|  | 58/79 [00:03<00:00, 24.49it/s]
 77%|  | 61/79 [00:03<00:00, 24.76it/s]
 81%|  | 64/79 [00:03<00:00, 25.04it/s]
 85%| | 67/79 [00:03<00:00, 25.23it/s]
 89%| | 70/79 [00:03<00:00, 25.29it/s]
 92%|| 73/79 [00:03<00:00, 25.51it/s]
 96%|| 76/79 [00:03<00:00, 26.17it/s]
100%|| 79/79 [00:03<00:00, 26.79it/s]
51it/s]
 68%|   | 54/79 [00:03<00:01, 23.79it/s]
 72%|  | 57/79 [00:03<00:00, 24.42it/s]
 76%|  | 60/79 [00:03<00:00, 24.53it/s]
 80%|  | 63/79 [00:03<00:00, 24.59it/s]
 84%| | 66/79 [00:03<00:00, 24.74it/s]
 87%| | 69/79 [00:03<00:00, 25.05it/s]
 91%| | 72/79 [00:03<00:00, 25.12it/s]
 95%|| 75/79 [00:03<00:00, 25.78it/s]
 99%|| 78/79 [00:04<00:00, 26.28it/s]
100%|| 79/79 [00:04<00:00, 19.28it/s]
, 23.75it/s]
 70%|   | 55/79 [00:03<00:00, 24.42it/s]
 73%|  | 58/79 [00:03<00:00, 24.64it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 25.17it/s]
 85%| | 67/79 [00:03<00:00, 25.38it/s]
 89%| | 70/79 [00:03<00:00, 25.31it/s]
 92%|| 73/79 [00:03<00:00, 25.52it/s]
 96%|| 76/79 [00:03<00:00, 26.02it/s]
100%|| 79/79 [00:04<00:00, 26.66it/s]
, 23.23it/s]
 70%|   | 55/79 [00:03<00:01, 23.72it/s]
 73%|  | 58/79 [00:03<00:00, 23.99it/s]
 77%|  | 61/79 [00:03<00:00, 24.28it/s]
 81%|  | 64/79 [00:03<00:00, 24.39it/s]
 85%| | 67/79 [00:03<00:00, 24.66it/s]
 89%| | 70/79 [00:03<00:00, 24.69it/s]
 92%|| 73/79 [00:03<00:00, 25.26it/s]
 96%|| 76/79 [00:03<00:00, 25.89it/s]
100%|| 79/79 [00:04<00:00, 26.71it/s]
33it/s]
 68%|   | 54/79 [00:03<00:01, 23.63it/s]
 72%|  | 57/79 [00:03<00:00, 24.01it/s]
 76%|  | 60/79 [00:03<00:00, 24.37it/s]
 80%|  | 63/79 [00:03<00:00, 24.41it/s]
 84%| | 66/79 [00:03<00:00, 24.39it/s]
 87%| | 69/79 [00:03<00:00, 24.61it/s]
 91%| | 72/79 [00:03<00:00, 24.60it/s]
 95%|| 75/79 [00:03<00:00, 25.40it/s]
 99%|| 78/79 [00:04<00:00, 25.92it/s]
100%|| 79/79 [00:04<00:00, 19.09it/s]
2020-06-23 17:11:37,359 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.153855 (0.026584674072265627 s / img per device, on 32 devices)
2020-06-23 17:11:37,377 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:11:37,377 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:11:37,396 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592957503856, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 13, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592957503856, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 13}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:11:45,592 maskrcnn_benchmark.trainer INFO: eta: 1:00:11  iter: 11020  loss: 0.4924 (0.7293)  loss_classifier: 0.1354 (0.2640)  loss_box_reg: 0.0704 (0.1178)  loss_mask: 0.2358 (0.2912)  loss_objectness: 0.0140 (0.0359)  loss_rpn_box_reg: 0.0077 (0.0202)  time: 0.1088 (0.1246)  data: 0.0015 (0.0175)  lr: 0.016000  max mem: 5148
2020-06-23 17:11:47,764 maskrcnn_benchmark.trainer INFO: eta: 1:00:07  iter: 11040  loss: 0.5504 (0.7290)  loss_classifier: 0.1943 (0.2639)  loss_box_reg: 0.0781 (0.1178)  loss_mask: 0.2249 (0.2911)  loss_objectness: 0.0129 (0.0359)  loss_rpn_box_reg: 0.0059 (0.0202)  time: 0.1088 (0.1246)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.54s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 17:11:49,941 maskrcnn_benchmark.trainer INFO: eta: 1:00:04  iter: 11060  loss: 0.5692 (0.7286)  loss_classifier: 0.1667 (0.2637)  loss_box_reg: 0.0855 (0.1177)  loss_mask: 0.2477 (0.2911)  loss_objectness: 0.0184 (0.0359)  loss_rpn_box_reg: 0.0107 (0.0202)  time: 0.1082 (0.1246)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5148
DONE (t=1.40s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36918
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.58554
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.39831
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20991
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.40102
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48156
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30811
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.48404
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.50793
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.31410
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.54695
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.64364
2020-06-23 17:11:52,103 maskrcnn_benchmark.trainer INFO: eta: 1:00:01  iter: 11080  loss: 0.4489 (0.7283)  loss_classifier: 0.1281 (0.2636)  loss_box_reg: 0.0655 (0.1177)  loss_mask: 0.2399 (0.2910)  loss_objectness: 0.0125 (0.0359)  loss_rpn_box_reg: 0.0049 (0.0202)  time: 0.1074 (0.1245)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5148
2020-06-23 17:11:54,263 maskrcnn_benchmark.trainer INFO: eta: 0:59:57  iter: 11100  loss: 0.4949 (0.7279)  loss_classifier: 0.1549 (0.2634)  loss_box_reg: 0.0725 (0.1176)  loss_mask: 0.2268 (0.2908)  loss_objectness: 0.0154 (0.0358)  loss_rpn_box_reg: 0.0077 (0.0202)  time: 0.1075 (0.1245)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:11:56,429 maskrcnn_benchmark.trainer INFO: eta: 0:59:54  iter: 11120  loss: 0.5580 (0.7276)  loss_classifier: 0.1580 (0.2632)  loss_box_reg: 0.0875 (0.1176)  loss_mask: 0.2556 (0.2908)  loss_objectness: 0.0165 (0.0358)  loss_rpn_box_reg: 0.0041 (0.0202)  time: 0.1087 (0.1245)  data: 0.0015 (0.0174)  lr: 0.016000  max mem: 5148
DONE (t=1.40s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:11:58,596 maskrcnn_benchmark.trainer INFO: eta: 0:59:51  iter: 11140  loss: 0.5118 (0.7273)  loss_classifier: 0.1676 (0.2631)  loss_box_reg: 0.0897 (0.1176)  loss_mask: 0.2385 (0.2907)  loss_objectness: 0.0148 (0.0358)  loss_rpn_box_reg: 0.0075 (0.0202)  time: 0.1084 (0.1244)  data: 0.0015 (0.0173)  lr: 0.016000  max mem: 5148
DONE (t=2.27s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.33714
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.55245
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.35930
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15053
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36370
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49682
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29018
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.44651
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.46637
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.26516
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50542
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62029
2020-06-23 17:11:59,280 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.36918375110394674, segm mAP: 0.3371374532540677
:::MLLOG {"namespace": "", "time_ms": 1592957519281, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.36918375110394674, "SEGM": 0.3371374532540677}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 12}}
:::MLLOG {"namespace": "", "time_ms": 1592957519281, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 12}}

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153


Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0



Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0
Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153


Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0
Grad overflow on iteration  11153
Grad overflow on iteration  11153

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0
Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0
Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11153
Using dynamic loss scale of  65536.0
2020-06-23 17:12:00,914 maskrcnn_benchmark.trainer INFO: eta: 0:59:48  iter: 11160  loss: 0.5095 (0.7270)  loss_classifier: 0.1750 (0.2630)  loss_box_reg: 0.0858 (0.1175)  loss_mask: 0.2360 (0.2906)  loss_objectness: 0.0172 (0.0357)  loss_rpn_box_reg: 0.0103 (0.0202)  time: 0.1083 (0.1244)  data: 0.0016 (0.0173)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:03,073 maskrcnn_benchmark.trainer INFO: eta: 0:59:44  iter: 11180  loss: 0.6199 (0.7267)  loss_classifier: 0.1988 (0.2629)  loss_box_reg: 0.0908 (0.1175)  loss_mask: 0.2570 (0.2905)  loss_objectness: 0.0111 (0.0357)  loss_rpn_box_reg: 0.0055 (0.0201)  time: 0.1080 (0.1244)  data: 0.0015 (0.0173)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:05,249 maskrcnn_benchmark.trainer INFO: eta: 0:59:41  iter: 11200  loss: 0.5034 (0.7264)  loss_classifier: 0.1604 (0.2628)  loss_box_reg: 0.0778 (0.1174)  loss_mask: 0.2393 (0.2904)  loss_objectness: 0.0190 (0.0357)  loss_rpn_box_reg: 0.0063 (0.0201)  time: 0.1089 (0.1244)  data: 0.0015 (0.0173)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:07,420 maskrcnn_benchmark.trainer INFO: eta: 0:59:38  iter: 11220  loss: 0.5651 (0.7261)  loss_classifier: 0.1908 (0.2626)  loss_box_reg: 0.0899 (0.1174)  loss_mask: 0.2375 (0.2903)  loss_objectness: 0.0159 (0.0357)  loss_rpn_box_reg: 0.0089 (0.0201)  time: 0.1081 (0.1243)  data: 0.0015 (0.0172)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:09,592 maskrcnn_benchmark.trainer INFO: eta: 0:59:35  iter: 11240  loss: 0.4746 (0.7257)  loss_classifier: 0.1425 (0.2624)  loss_box_reg: 0.0705 (0.1173)  loss_mask: 0.2120 (0.2902)  loss_objectness: 0.0108 (0.0356)  loss_rpn_box_reg: 0.0068 (0.0201)  time: 0.1077 (0.1243)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:11,757 maskrcnn_benchmark.trainer INFO: eta: 0:59:31  iter: 11260  loss: 0.5016 (0.7254)  loss_classifier: 0.1617 (0.2623)  loss_box_reg: 0.0678 (0.1173)  loss_mask: 0.2233 (0.2901)  loss_objectness: 0.0089 (0.0356)  loss_rpn_box_reg: 0.0064 (0.0201)  time: 0.1081 (0.1243)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:13,908 maskrcnn_benchmark.trainer INFO: eta: 0:59:28  iter: 11280  loss: 0.5406 (0.7251)  loss_classifier: 0.1543 (0.2622)  loss_box_reg: 0.0901 (0.1172)  loss_mask: 0.2560 (0.2901)  loss_objectness: 0.0077 (0.0356)  loss_rpn_box_reg: 0.0095 (0.0201)  time: 0.1077 (0.1242)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:16,076 maskrcnn_benchmark.trainer INFO: eta: 0:59:25  iter: 11300  loss: 0.5455 (0.7248)  loss_classifier: 0.1688 (0.2620)  loss_box_reg: 0.0894 (0.1172)  loss_mask: 0.2572 (0.2900)  loss_objectness: 0.0137 (0.0355)  loss_rpn_box_reg: 0.0079 (0.0200)  time: 0.1087 (0.1242)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:18,250 maskrcnn_benchmark.trainer INFO: eta: 0:59:21  iter: 11320  loss: 0.5492 (0.7245)  loss_classifier: 0.1855 (0.2619)  loss_box_reg: 0.0838 (0.1172)  loss_mask: 0.2394 (0.2899)  loss_objectness: 0.0126 (0.0355)  loss_rpn_box_reg: 0.0066 (0.0200)  time: 0.1076 (0.1242)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:20,423 maskrcnn_benchmark.trainer INFO: eta: 0:59:18  iter: 11340  loss: 0.5612 (0.7243)  loss_classifier: 0.1889 (0.2618)  loss_box_reg: 0.0929 (0.1171)  loss_mask: 0.2821 (0.2899)  loss_objectness: 0.0150 (0.0355)  loss_rpn_box_reg: 0.0063 (0.0200)  time: 0.1084 (0.1242)  data: 0.0015 (0.0171)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:22,581 maskrcnn_benchmark.trainer INFO: eta: 0:59:15  iter: 11360  loss: 0.5619 (0.7240)  loss_classifier: 0.1697 (0.2616)  loss_box_reg: 0.0756 (0.1171)  loss_mask: 0.2377 (0.2898)  loss_objectness: 0.0136 (0.0354)  loss_rpn_box_reg: 0.0050 (0.0200)  time: 0.1071 (0.1241)  data: 0.0014 (0.0170)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:24,752 maskrcnn_benchmark.trainer INFO: eta: 0:59:11  iter: 11380  loss: 0.6378 (0.7238)  loss_classifier: 0.2206 (0.2615)  loss_box_reg: 0.1012 (0.1171)  loss_mask: 0.2410 (0.2898)  loss_objectness: 0.0222 (0.0354)  loss_rpn_box_reg: 0.0087 (0.0200)  time: 0.1088 (0.1241)  data: 0.0015 (0.0170)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:26,924 maskrcnn_benchmark.trainer INFO: eta: 0:59:08  iter: 11400  loss: 0.5335 (0.7236)  loss_classifier: 0.1815 (0.2614)  loss_box_reg: 0.0910 (0.1170)  loss_mask: 0.2425 (0.2897)  loss_objectness: 0.0166 (0.0354)  loss_rpn_box_reg: 0.0073 (0.0200)  time: 0.1084 (0.1241)  data: 0.0014 (0.0170)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:29,114 maskrcnn_benchmark.trainer INFO: eta: 0:59:05  iter: 11420  loss: 0.4752 (0.7233)  loss_classifier: 0.1509 (0.2613)  loss_box_reg: 0.0774 (0.1170)  loss_mask: 0.2304 (0.2896)  loss_objectness: 0.0099 (0.0354)  loss_rpn_box_reg: 0.0042 (0.0200)  time: 0.1090 (0.1241)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:31,275 maskrcnn_benchmark.trainer INFO: eta: 0:59:02  iter: 11440  loss: 0.5936 (0.7230)  loss_classifier: 0.1956 (0.2612)  loss_box_reg: 0.1177 (0.1170)  loss_mask: 0.2623 (0.2895)  loss_objectness: 0.0126 (0.0354)  loss_rpn_box_reg: 0.0043 (0.0200)  time: 0.1074 (0.1240)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:33,451 maskrcnn_benchmark.trainer INFO: eta: 0:58:58  iter: 11460  loss: 0.5803 (0.7228)  loss_classifier: 0.1949 (0.2611)  loss_box_reg: 0.0973 (0.1169)  loss_mask: 0.2497 (0.2895)  loss_objectness: 0.0145 (0.0353)  loss_rpn_box_reg: 0.0093 (0.0200)  time: 0.1083 (0.1240)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:35,635 maskrcnn_benchmark.trainer INFO: eta: 0:58:55  iter: 11480  loss: 0.5255 (0.7225)  loss_classifier: 0.1728 (0.2609)  loss_box_reg: 0.0706 (0.1169)  loss_mask: 0.2294 (0.2894)  loss_objectness: 0.0170 (0.0353)  loss_rpn_box_reg: 0.0060 (0.0200)  time: 0.1087 (0.1240)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:37,826 maskrcnn_benchmark.trainer INFO: eta: 0:58:52  iter: 11500  loss: 0.5298 (0.7222)  loss_classifier: 0.1760 (0.2608)  loss_box_reg: 0.0876 (0.1168)  loss_mask: 0.2354 (0.2893)  loss_objectness: 0.0102 (0.0353)  loss_rpn_box_reg: 0.0096 (0.0200)  time: 0.1081 (0.1240)  data: 0.0015 (0.0168)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:40,014 maskrcnn_benchmark.trainer INFO: eta: 0:58:49  iter: 11520  loss: 0.5685 (0.7220)  loss_classifier: 0.2027 (0.2607)  loss_box_reg: 0.0893 (0.1168)  loss_mask: 0.2531 (0.2892)  loss_objectness: 0.0132 (0.0353)  loss_rpn_box_reg: 0.0102 (0.0200)  time: 0.1084 (0.1239)  data: 0.0014 (0.0168)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:42,179 maskrcnn_benchmark.trainer INFO: eta: 0:58:46  iter: 11540  loss: 0.5056 (0.7217)  loss_classifier: 0.1579 (0.2605)  loss_box_reg: 0.0787 (0.1167)  loss_mask: 0.2396 (0.2892)  loss_objectness: 0.0096 (0.0352)  loss_rpn_box_reg: 0.0059 (0.0200)  time: 0.1079 (0.1239)  data: 0.0014 (0.0168)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:44,351 maskrcnn_benchmark.trainer INFO: eta: 0:58:42  iter: 11560  loss: 0.4851 (0.7213)  loss_classifier: 0.1608 (0.2604)  loss_box_reg: 0.0714 (0.1167)  loss_mask: 0.2219 (0.2891)  loss_objectness: 0.0136 (0.0352)  loss_rpn_box_reg: 0.0058 (0.0200)  time: 0.1081 (0.1239)  data: 0.0014 (0.0168)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:46,526 maskrcnn_benchmark.trainer INFO: eta: 0:58:39  iter: 11580  loss: 0.5971 (0.7212)  loss_classifier: 0.2126 (0.2603)  loss_box_reg: 0.1056 (0.1167)  loss_mask: 0.2608 (0.2890)  loss_objectness: 0.0156 (0.0352)  loss_rpn_box_reg: 0.0115 (0.0200)  time: 0.1087 (0.1238)  data: 0.0015 (0.0167)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:48,720 maskrcnn_benchmark.trainer INFO: eta: 0:58:36  iter: 11600  loss: 0.4534 (0.7209)  loss_classifier: 0.1679 (0.2602)  loss_box_reg: 0.0751 (0.1166)  loss_mask: 0.2106 (0.2889)  loss_objectness: 0.0112 (0.0352)  loss_rpn_box_reg: 0.0064 (0.0200)  time: 0.1095 (0.1238)  data: 0.0014 (0.0167)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:50,877 maskrcnn_benchmark.trainer INFO: eta: 0:58:33  iter: 11620  loss: 0.4484 (0.7205)  loss_classifier: 0.1540 (0.2600)  loss_box_reg: 0.0760 (0.1166)  loss_mask: 0.2293 (0.2888)  loss_objectness: 0.0093 (0.0351)  loss_rpn_box_reg: 0.0042 (0.0199)  time: 0.1080 (0.1238)  data: 0.0014 (0.0167)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:53,048 maskrcnn_benchmark.trainer INFO: eta: 0:58:30  iter: 11640  loss: 0.5159 (0.7202)  loss_classifier: 0.1651 (0.2598)  loss_box_reg: 0.0870 (0.1166)  loss_mask: 0.2415 (0.2888)  loss_objectness: 0.0128 (0.0351)  loss_rpn_box_reg: 0.0060 (0.0199)  time: 0.1085 (0.1238)  data: 0.0014 (0.0167)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:55,211 maskrcnn_benchmark.trainer INFO: eta: 0:58:26  iter: 11660  loss: 0.5675 (0.7200)  loss_classifier: 0.2019 (0.2598)  loss_box_reg: 0.0970 (0.1165)  loss_mask: 0.2411 (0.2887)  loss_objectness: 0.0201 (0.0351)  loss_rpn_box_reg: 0.0119 (0.0200)  time: 0.1078 (0.1237)  data: 0.0014 (0.0166)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:57,407 maskrcnn_benchmark.trainer INFO: eta: 0:58:23  iter: 11680  loss: 0.5964 (0.7198)  loss_classifier: 0.2055 (0.2596)  loss_box_reg: 0.0907 (0.1165)  loss_mask: 0.2648 (0.2887)  loss_objectness: 0.0171 (0.0351)  loss_rpn_box_reg: 0.0081 (0.0199)  time: 0.1091 (0.1237)  data: 0.0014 (0.0166)  lr: 0.016000  max mem: 5148
2020-06-23 17:12:59,580 maskrcnn_benchmark.trainer INFO: eta: 0:58:20  iter: 11700  loss: 0.5894 (0.7196)  loss_classifier: 0.2013 (0.2596)  loss_box_reg: 0.1019 (0.1165)  loss_mask: 0.2529 (0.2886)  loss_objectness: 0.0211 (0.0350)  loss_rpn_box_reg: 0.0088 (0.0199)  time: 0.1078 (0.1237)  data: 0.0014 (0.0166)  lr: 0.016000  max mem: 5148
2020-06-23 17:13:01,752 maskrcnn_benchmark.trainer INFO: eta: 0:58:17  iter: 11720  loss: 0.4704 (0.7193)  loss_classifier: 0.1404 (0.2594)  loss_box_reg: 0.0666 (0.1164)  loss_mask: 0.2269 (0.2885)  loss_objectness: 0.0063 (0.0350)  loss_rpn_box_reg: 0.0040 (0.0199)  time: 0.1083 (0.1237)  data: 0.0014 (0.0166)  lr: 0.016000  max mem: 5148
2020-06-23 17:13:03,938 maskrcnn_benchmark.trainer INFO: eta: 0:58:14  iter: 11740  loss: 0.5905 (0.7190)  loss_classifier: 0.1752 (0.2593)  loss_box_reg: 0.0866 (0.1164)  loss_mask: 0.2469 (0.2885)  loss_objectness: 0.0150 (0.0350)  loss_rpn_box_reg: 0.0075 (0.0199)  time: 0.1092 (0.1236)  data: 0.0014 (0.0165)  lr: 0.016000  max mem: 5148
2020-06-23 17:13:06,101 maskrcnn_benchmark.trainer INFO: eta: 0:58:10  iter: 11760  loss: 0.5253 (0.7187)  loss_classifier: 0.1703 (0.2592)  loss_box_reg: 0.0868 (0.1163)  loss_mask: 0.2389 (0.2884)  loss_objectness: 0.0121 (0.0350)  loss_rpn_box_reg: 0.0054 (0.0199)  time: 0.1079 (0.1236)  data: 0.0013 (0.0165)  lr: 0.016000  max mem: 5148
2020-06-23 17:13:08,257 maskrcnn_benchmark.trainer INFO: eta: 0:58:07  iter: 11780  loss: 0.4948 (0.7184)  loss_classifier: 0.1642 (0.2590)  loss_box_reg: 0.0899 (0.1163)  loss_mask: 0.2345 (0.2883)  loss_objectness: 0.0138 (0.0349)  loss_rpn_box_reg: 0.0056 (0.0199)  time: 0.1078 (0.1236)  data: 0.0014 (0.0165)  lr: 0.016000  max mem: 5148
2020-06-23 17:13:10,425 maskrcnn_benchmark.trainer INFO: eta: 0:58:04  iter: 11800  loss: 0.5110 (0.7181)  loss_classifier: 0.1497 (0.2589)  loss_box_reg: 0.0774 (0.1162)  loss_mask: 0.2342 (0.2882)  loss_objectness: 0.0129 (0.0349)  loss_rpn_box_reg: 0.0050 (0.0199)  time: 0.1078 (0.1236)  data: 0.0014 (0.0164)  lr: 0.016000  max mem: 5148
2020-06-23 17:13:12,599 maskrcnn_benchmark.trainer INFO: eta: 0:58:01  iter: 11820  loss: 0.4985 (0.7178)  loss_classifier: 0.1912 (0.2587)  loss_box_reg: 0.0783 (0.1162)  loss_mask: 0.2103 (0.2881)  loss_objectness: 0.0099 (0.0349)  loss_rpn_box_reg: 0.0058 (0.0199)  time: 0.1076 (0.1235)  data: 0.0014 (0.0164)  lr: 0.016000  max mem: 5148
2020-06-23 17:13:14,772 maskrcnn_benchmark.trainer INFO: eta: 0:57:58  iter: 11840  loss: 0.5879 (0.7175)  loss_classifier: 0.1941 (0.2586)  loss_box_reg: 0.0865 (0.1161)  loss_mask: 0.2444 (0.2880)  loss_objectness: 0.0141 (0.0349)  loss_rpn_box_reg: 0.0053 (0.0198)  time: 0.1083 (0.1235)  data: 0.0014 (0.0164)  lr: 0.016000  max mem: 5148
2020-06-23 17:13:16,946 maskrcnn_benchmark.trainer INFO: eta: 0:57:54  iter: 11860  loss: 0.4547 (0.7172)  loss_classifier: 0.1551 (0.2585)  loss_box_reg: 0.0866 (0.1161)  loss_mask: 0.2151 (0.2879)  loss_objectness: 0.0109 (0.0348)  loss_rpn_box_reg: 0.0098 (0.0198)  time: 0.1084 (0.1235)  data: 0.0014 (0.0164)  lr: 0.016000  max mem: 5148
2020-06-23 17:13:19,112 maskrcnn_benchmark.trainer INFO: eta: 0:57:51  iter: 11880  loss: 0.5238 (0.7170)  loss_classifier: 0.1845 (0.2584)  loss_box_reg: 0.0842 (0.1161)  loss_mask: 0.2377 (0.2879)  loss_objectness: 0.0118 (0.0348)  loss_rpn_box_reg: 0.0062 (0.0198)  time: 0.1078 (0.1235)  data: 0.0014 (0.0163)  lr: 0.016000  max mem: 5148
2020-06-23 17:13:21,285 maskrcnn_benchmark.trainer INFO: eta: 0:57:48  iter: 11900  loss: 0.6208 (0.7169)  loss_classifier: 0.2056 (0.2583)  loss_box_reg: 0.1060 (0.1161)  loss_mask: 0.2806 (0.2879)  loss_objectness: 0.0218 (0.0348)  loss_rpn_box_reg: 0.0090 (0.0198)  time: 0.1082 (0.1234)  data: 0.0016 (0.0163)  lr: 0.016000  max mem: 5148
2020-06-23 17:13:23,470 maskrcnn_benchmark.trainer INFO: eta: 0:57:45  iter: 11920  loss: 0.4744 (0.7165)  loss_classifier: 0.1661 (0.2582)  loss_box_reg: 0.0680 (0.1160)  loss_mask: 0.2442 (0.2878)  loss_objectness: 0.0155 (0.0348)  loss_rpn_box_reg: 0.0029 (0.0198)  time: 0.1093 (0.1234)  data: 0.0014 (0.0163)  lr: 0.016000  max mem: 5148
:::MLLOG {"namespace": "", "time_ms": 1592957603577, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 13}}
:::MLLOG {"namespace": "", "time_ms": 1592957603577, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 13}}
:::MLLOG {"namespace": "", "time_ms": 1592957603577, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 13}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 17:13:23,779 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.26s)
index created!
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
2020-06-23 17:13:24,085 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  4%|         | 3/79 [00:00<00:45,  1.68it/s]
  8%|         | 6/79 [00:01<00:31,  2.33it/s]
 11%|        | 9/79 [00:01<00:21,  3.20it/s]
 15%|        | 12/79 [00:01<00:15,  4.35it/s]
 19%|        | 15/79 [00:01<00:11,  5.79it/s]
 23%|       | 18/79 [00:01<00:08,  7.55it/s]
 27%|       | 21/79 [00:01<00:06,  9.60it/s]
 30%|       | 24/79 [00:01<00:04, 11.89it/s]
 34%|      | 27/79 [00:01<00:03, 14.21it/s]
 38%|      | 30/79 [00:01<00:02, 16.51it/s]
 42%|     | 33/79 [00:02<00:02, 18.58it/s]
 46%|     | 36/79 [00:02<00:02, 20.46it/s]
 49%|     | 39/79 [00:02<00:01, 21.87it/s]
 53%|    | 42/79 [00:02<00:01, 23.10it/s]
 57%|    | 45/79 [00:02<00:01, 24.06it/s]
 61%|    | 48/79 [00:02<00:01, 24.62it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:05,  9.56it/s]
 32%|      | 25/79 [00:01<00:04, 11.81it/s]
 35%|      | 28/79 [00:01<00:03, 14.12it/s]
 39%|      | 31/79 [00:01<00:02, 16.41it/s]
 43%|     | 34/79 [00:02<00:02, 18.55it/s]
 47%|     | 37/79 [00:02<00:02, 20.36it/s]
 51%|     | 40/79 [00:02<00:01, 21.75it/s]
 54%|    | 43/79 [00:02<00:01, 22.94it/s]
 58%|    | 46/79 [00:02<00:01, 23.81it/s]
 62%|   | 49/79 [00:02<00:01, 24.64it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  4%|         | 3/79 [00:00<00:45,  1.66it/s]
  8%|         | 6/79 [00:01<00:31,  2.32it/s]
 11%|        | 9/79 [00:01<00:21,  3.18it/s]
 15%|        | 12/79 [00:01<00:15,  4.31it/s]
 19%|        | 15/79 [00:01<00:11,  5.73it/s]
 23%|       | 18/79 [00:01<00:08,  7.47it/s]
 27%|       | 21/79 [00:01<00:06,  9.49it/s]
 30%|       | 24/79 [00:01<00:04, 11.75it/s]
 34%|      | 27/79 [00:01<00:03, 14.07it/s]
 38%|      | 30/79 [00:01<00:02, 16.39it/s]
 42%|     | 33/79 [00:02<00:02, 18.33it/s]
 46%|     | 36/79 [00:02<00:02, 20.19it/s]
 49%|     | 39/79 [00:02<00:01, 21.83it/s]
 53%|    | 42/79 [00:02<00:01, 23.09it/s]
 57%|    | 45/79 [00:02<00:01, 24.35it/s]
 61%|    | 48/79 [00:02<00:01, 24.54it/s]
 65%|   | 51/79 [00:02<00:01, 25.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.54it/s]
 28%|       | 22/79 [00:01<00:05,  9.57it/s]
 32%|      | 25/79 [00:01<00:04, 11.82it/s]
 35%|      | 28/79 [00:01<00:03, 14.18it/s]
 39%|      | 31/79 [00:02<00:02, 16.41it/s]
 43%|     | 34/79 [00:02<00:02, 18.46it/s]
 47%|     | 37/79 [00:02<00:02, 20.19it/s]
 51%|     | 40/79 [00:02<00:01, 21.63it/s]
 54%|    | 43/79 [00:02<00:01, 22.82it/s]
 58%|    | 46/79 [00:02<00:01, 23.59it/s]
 62%|   | 49/79 [00:02<00:01, 24.42it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  4%|         | 3/79 [00:00<00:45,  1.68it/s]
  8%|         | 6/79 [00:01<00:31,  2.33it/s]
 11%|        | 9/79 [00:01<00:21,  3.21it/s]
 15%|        | 12/79 [00:01<00:15,  4.35it/s]
 19%|        | 15/79 [00:01<00:11,  5.80it/s]
 23%|       | 18/79 [00:01<00:08,  7.57it/s]
 27%|       | 21/79 [00:01<00:06,  9.56it/s]
 30%|       | 24/79 [00:01<00:04, 11.79it/s]
 34%|      | 27/79 [00:01<00:03, 13.94it/s]
 38%|      | 30/79 [00:01<00:03, 16.17it/s]
 42%|     | 33/79 [00:02<00:02, 18.15it/s]
 46%|     | 36/79 [00:02<00:02, 19.85it/s]
 49%|     | 39/79 [00:02<00:01, 21.53it/s]
 53%|    | 42/79 [00:02<00:01, 22.57it/s]
 57%|    | 45/79 [00:02<00:01, 23.51it/s]
 61%|    | 48/79 [00:02<00:01, 24.07it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.42it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.65it/s]
 28%|       | 22/79 [00:01<00:05,  9.72it/s]
 32%|      | 25/79 [00:01<00:04, 11.98it/s]
 35%|      | 28/79 [00:01<00:03, 14.30it/s]
 39%|      | 31/79 [00:01<00:02, 16.64it/s]
 43%|     | 34/79 [00:02<00:02, 18.67it/s]
 47%|     | 37/79 [00:02<00:02, 20.55it/s]
 51%|     | 40/79 [00:02<00:01, 21.84it/s]
 54%|    | 43/79 [00:02<00:01, 22.80it/s]
 58%|    | 46/79 [00:02<00:01, 23.69it/s]
 62%|   | 49/79 [00:02<00:01, 24.26it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.45it/s]
 20%|        | 16/79 [00:01<00:10,  5.92it/s]
 24%|       | 19/79 [00:01<00:07,  7.72it/s]
 28%|       | 22/79 [00:01<00:05,  9.75it/s]
 32%|      | 25/79 [00:01<00:04, 12.01it/s]
 35%|      | 28/79 [00:01<00:03, 14.32it/s]
 39%|      | 31/79 [00:01<00:02, 16.57it/s]
 43%|     | 34/79 [00:02<00:02, 18.48it/s]
 47%|     | 37/79 [00:02<00:02, 20.16it/s]
 51%|     | 40/79 [00:02<00:01, 21.68it/s]
 54%|    | 43/79 [00:02<00:01, 22.84it/s]
 58%|    | 46/79 [00:02<00:01, 23.15it/s]
 62%|   | 49/79 [00:02<00:01, 24.14it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.34it/s]
 32%|      | 25/79 [00:01<00:04, 11.64it/s]
 35%|      | 28/79 [00:01<00:03, 13.98it/s]
 39%|      | 31/79 [00:02<00:02, 16.23it/s]
 43%|     | 34/79 [00:02<00:02, 18.39it/s]
 47%|     | 37/79 [00:02<00:02, 20.28it/s]
 51%|     | 40/79 [00:02<00:01, 21.84it/s]
 54%|    | 43/79 [00:02<00:01, 22.87it/s]
 58%|    | 46/79 [00:02<00:01, 23.93it/s]
 62%|   | 49/79 [00:02<00:01, 24.72it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.62it/s]
 35%|      | 28/79 [00:01<00:03, 13.98it/s]
 39%|      | 31/79 [00:02<00:02, 16.27it/s]
 43%|     | 34/79 [00:02<00:02, 18.37it/s]
 47%|     | 37/79 [00:02<00:02, 20.00it/s]
 51%|     | 40/79 [00:02<00:01, 21.64it/s]
 54%|    | 43/79 [00:02<00:01, 22.78it/s]
 58%|    | 46/79 [00:02<00:01, 23.74it/s]
 62%|   | 49/79 [00:02<00:01, 24.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.57it/s]
 32%|      | 25/79 [00:01<00:04, 11.72it/s]
 35%|      | 28/79 [00:01<00:03, 13.95it/s]
 39%|      | 31/79 [00:02<00:03, 15.98it/s]
 43%|     | 34/79 [00:02<00:02, 18.08it/s]
 47%|     | 37/79 [00:02<00:02, 19.67it/s]
 51%|     | 40/79 [00:02<00:01, 21.22it/s]
 54%|    | 43/79 [00:02<00:01, 22.28it/s]
 58%|    | 46/79 [00:02<00:01, 23.13it/s]
 62%|   | 49/79 [00:02<00:01, 23.91it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  4%|         | 3/79 [00:00<00:44,  1.73it/s]
  8%|         | 6/79 [00:01<00:30,  2.39it/s]
 11%|        | 9/79 [00:01<00:21,  3.28it/s]
 15%|        | 12/79 [00:01<00:15,  4.43it/s]
 19%|        | 15/79 [00:01<00:10,  5.88it/s]
 23%|       | 18/79 [00:01<00:07,  7.63it/s]
 27%|       | 21/79 [00:01<00:06,  9.63it/s]
 30%|       | 24/79 [00:01<00:04, 11.82it/s]
 34%|      | 27/79 [00:01<00:03, 14.06it/s]
 38%|      | 30/79 [00:02<00:03, 16.24it/s]
 42%|     | 33/79 [00:02<00:02, 18.18it/s]
 46%|     | 36/79 [00:02<00:02, 19.92it/s]
 49%|     | 39/79 [00:02<00:01, 21.11it/s]
 53%|    | 42/79 [00:02<00:01, 22.18it/s]
 57%|    | 45/79 [00:02<00:01, 22.80it/s]
 61%|    | 48/79 [00:02<00:01, 23.36it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.64it/s]
 35%|      | 28/79 [00:01<00:03, 14.00it/s]
 39%|      | 31/79 [00:02<00:02, 16.14it/s]
 43%|     | 34/79 [00:02<00:02, 18.17it/s]
 47%|     | 37/79 [00:02<00:02, 19.99it/s]
 51%|     | 40/79 [00:02<00:01, 21.42it/s]
 54%|    | 43/79 [00:02<00:01, 22.52it/s]
 58%|    | 46/79 [00:02<00:01, 23.20it/s]
 62%|   | 49/79 [00:02<00:01, 23.91it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.32it/s]
 32%|      | 25/79 [00:01<00:04, 11.52it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:02, 16.08it/s]
 43%|     | 34/79 [00:02<00:02, 18.09it/s]
 47%|     | 37/79 [00:02<00:02, 19.78it/s]
 51%|     | 40/79 [00:02<00:01, 20.95it/s]
 54%|    | 43/79 [00:02<00:01, 22.11it/s]
 58%|    | 46/79 [00:02<00:01, 23.07it/s]
 62%|   | 49/79 [00:02<00:01, 23.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:11,  5.26it/s]
 24%|       | 19/79 [00:01<00:08,  6.92it/s]
 28%|       | 22/79 [00:01<00:06,  8.90it/s]
 32%|      | 25/79 [00:01<00:04, 11.11it/s]
 35%|      | 28/79 [00:01<00:03, 13.50it/s]
 39%|      | 31/79 [00:02<00:03, 15.82it/s]
 43%|     | 34/79 [00:02<00:02, 17.99it/s]
 47%|     | 37/79 [00:02<00:02, 19.90it/s]
 51%|     | 40/79 [00:02<00:01, 21.40it/s]
 54%|    | 43/79 [00:02<00:01, 22.68it/s]
 58%|    | 46/79 [00:02<00:01, 23.62it/s]
 62%|   | 49/79 [00:02<00:01, 24.46it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  4%|         | 3/79 [00:01<00:49,  1.54it/s]
  8%|         | 6/79 [00:01<00:33,  2.15it/s]
 11%|        | 9/79 [00:01<00:23,  2.96it/s]
 15%|        | 12/79 [00:01<00:16,  4.03it/s]
 19%|        | 15/79 [00:01<00:11,  5.40it/s]
 23%|       | 18/79 [00:01<00:08,  7.06it/s]
 27%|       | 21/79 [00:01<00:06,  9.01it/s]
 30%|       | 24/79 [00:01<00:04, 11.22it/s]
 34%|      | 27/79 [00:01<00:03, 13.46it/s]
 38%|      | 30/79 [00:02<00:03, 15.58it/s]
 42%|     | 33/79 [00:02<00:02, 17.54it/s]
 46%|     | 36/79 [00:02<00:02, 19.35it/s]
 49%|     | 39/79 [00:02<00:01, 20.88it/s]
 53%|    | 42/79 [00:02<00:01, 22.01it/s]
 57%|    | 45/79 [00:02<00:01, 22.79it/s]
 61%|    | 48/79 [00:02<00:01, 23.78it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.34it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.46it/s]
 35%|      | 28/79 [00:01<00:03, 13.69it/s]
 39%|      | 31/79 [00:02<00:03, 15.89it/s]
 43%|     | 34/79 [00:02<00:02, 17.80it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 20.74it/s]
 54%|    | 43/79 [00:02<00:01, 21.88it/s]
 58%|    | 46/79 [00:02<00:01, 22.84it/s]
 62%|   | 49/79 [00:02<00:01, 23.69it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.69it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.41it/s]
 32%|      | 25/79 [00:01<00:04, 11.63it/s]
 35%|      | 28/79 [00:01<00:03, 13.77it/s]
 39%|      | 31/79 [00:02<00:03, 15.94it/s]
 43%|     | 34/79 [00:02<00:02, 17.92it/s]
 47%|     | 37/79 [00:02<00:02, 19.71it/s]
 51%|     | 40/79 [00:02<00:01, 20.88it/s]
 54%|    | 43/79 [00:02<00:01, 21.80it/s]
 58%|    | 46/79 [00:02<00:01, 22.89it/s]
 62%|   | 49/79 [00:02<00:01, 23.29it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.33it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.46it/s]
 35%|      | 28/79 [00:01<00:03, 13.75it/s]
 39%|      | 31/79 [00:02<00:02, 16.02it/s]
 43%|     | 34/79 [00:02<00:02, 17.96it/s]
 47%|     | 37/79 [00:02<00:02, 19.75it/s]
 51%|     | 40/79 [00:02<00:01, 20.88it/s]
 54%|    | 43/79 [00:02<00:01, 22.03it/s]
 58%|    | 46/79 [00:02<00:01, 22.35it/s]
 62%|   | 49/79 [00:02<00:01, 23.16it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  4%|         | 3/79 [00:01<00:51,  1.49it/s]
  8%|         | 6/79 [00:01<00:35,  2.08it/s]
 11%|        | 9/79 [00:01<00:24,  2.87it/s]
 15%|        | 12/79 [00:01<00:17,  3.90it/s]
 19%|        | 15/79 [00:01<00:12,  5.23it/s]
 23%|       | 18/79 [00:01<00:08,  6.86it/s]
 27%|       | 21/79 [00:01<00:06,  8.78it/s]
 30%|       | 24/79 [00:01<00:05, 10.89it/s]
 34%|      | 27/79 [00:01<00:03, 13.12it/s]
 38%|      | 30/79 [00:02<00:03, 15.42it/s]
 42%|     | 33/79 [00:02<00:02, 17.45it/s]
 46%|     | 36/79 [00:02<00:02, 19.28it/s]
 49%|     | 39/79 [00:02<00:01, 20.67it/s]
 53%|    | 42/79 [00:02<00:01, 21.84it/s]
 57%|    | 45/79 [00:02<00:01, 22.87it/s]
 61%|    | 48/79 [00:02<00:01, 23.49it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.18it/s]
 24%|       | 19/79 [00:01<00:08,  6.82it/s]
 28%|       | 22/79 [00:01<00:06,  8.74it/s]
 32%|      | 25/79 [00:01<00:04, 10.88it/s]
 35%|      | 28/79 [00:02<00:03, 13.16it/s]
 39%|      | 31/79 [00:02<00:03, 15.44it/s]
 43%|     | 34/79 [00:02<00:02, 17.58it/s]
 47%|     | 37/79 [00:02<00:02, 19.38it/s]
 51%|     | 40/79 [00:02<00:01, 21.17it/s]
 54%|    | 43/79 [00:02<00:01, 22.54it/s]
 58%|    | 46/79 [00:02<00:01, 23.67it/s]
 62%|   | 49/79 [00:02<00:01, 24.49it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  4%|         | 3/79 [00:01<00:50,  1.51it/s]
  8%|         | 6/79 [00:01<00:34,  2.10it/s]
 11%|        | 9/79 [00:01<00:24,  2.90it/s]
 15%|        | 12/79 [00:01<00:16,  3.94it/s]
 19%|        | 15/79 [00:01<00:12,  5.29it/s]
 23%|       | 18/79 [00:01<00:08,  6.95it/s]
 27%|       | 21/79 [00:01<00:06,  8.87it/s]
 30%|       | 24/79 [00:01<00:05, 10.95it/s]
 34%|      | 27/79 [00:01<00:03, 13.24it/s]
 38%|      | 30/79 [00:02<00:03, 15.40it/s]
 42%|     | 33/79 [00:02<00:02, 17.36it/s]
 46%|     | 36/79 [00:02<00:02, 19.01it/s]
 49%|     | 39/79 [00:02<00:01, 20.60it/s]
 53%|    | 42/79 [00:02<00:01, 21.86it/s]
 57%|    | 45/79 [00:02<00:01, 22.62it/s]
 61%|    | 48/79 [00:02<00:01, 23.21it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.43it/s]
  9%|         | 7/79 [00:01<00:36,  2.00it/s]
 13%|        | 10/79 [00:01<00:24,  2.76it/s]
 16%|        | 13/79 [00:01<00:17,  3.77it/s]
 20%|        | 16/79 [00:01<00:12,  5.07it/s]
 24%|       | 19/79 [00:01<00:08,  6.68it/s]
 28%|       | 22/79 [00:01<00:06,  8.59it/s]
 32%|      | 25/79 [00:01<00:05, 10.73it/s]
 35%|      | 28/79 [00:02<00:03, 13.04it/s]
 39%|      | 31/79 [00:02<00:03, 15.28it/s]
 43%|     | 34/79 [00:02<00:02, 17.48it/s]
 47%|     | 37/79 [00:02<00:02, 19.30it/s]
 51%|     | 40/79 [00:02<00:01, 20.86it/s]
 54%|    | 43/79 [00:02<00:01, 22.28it/s]
 58%|    | 46/79 [00:02<00:01, 23.26it/s]
 62%|   | 49/79 [00:02<00:01, 23.76it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  5%|         | 4/79 [00:01<00:52,  1.42it/s]
  9%|         | 7/79 [00:01<00:36,  1.98it/s]
 13%|        | 10/79 [00:01<00:25,  2.74it/s]
 16%|        | 13/79 [00:01<00:17,  3.75it/s]
 20%|        | 16/79 [00:01<00:12,  5.04it/s]
 24%|       | 19/79 [00:01<00:09,  6.66it/s]
 28%|       | 22/79 [00:01<00:06,  8.54it/s]
 32%|      | 25/79 [00:01<00:05, 10.72it/s]
 35%|      | 28/79 [00:02<00:03, 12.97it/s]
 39%|      | 31/79 [00:02<00:03, 15.35it/s]
 43%|     | 34/79 [00:02<00:02, 17.54it/s]
 47%|     | 37/79 [00:02<00:02, 19.48it/s]
 51%|     | 40/79 [00:02<00:01, 21.06it/s]
 54%|    | 43/79 [00:02<00:01, 22.41it/s]
 58%|    | 46/79 [00:02<00:01, 23.31it/s]
 62%|   | 49/79 [00:02<00:01, 23.80it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.97it/s]
 20%|        | 16/79 [00:01<00:11,  5.33it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.96it/s]
 32%|      | 25/79 [00:01<00:04, 11.08it/s]
 35%|      | 28/79 [00:01<00:03, 13.37it/s]
 39%|      | 31/79 [00:02<00:03, 15.53it/s]
 43%|     | 34/79 [00:02<00:02, 17.54it/s]
 47%|     | 37/79 [00:02<00:02, 19.12it/s]
 51%|     | 40/79 [00:02<00:01, 20.57it/s]
 54%|    | 43/79 [00:02<00:01, 21.88it/s]
 58%|    | 46/79 [00:02<00:01, 22.54it/s]
 62%|   | 49/79 [00:02<00:01, 23.31it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.03it/s]
 32%|      | 25/79 [00:01<00:04, 11.23it/s]
 35%|      | 28/79 [00:01<00:03, 13.36it/s]
 39%|      | 31/79 [00:02<00:03, 15.59it/s]
 43%|     | 34/79 [00:02<00:02, 17.57it/s]
 47%|     | 37/79 [00:02<00:02, 19.38it/s]
 51%|     | 40/79 [00:02<00:01, 20.58it/s]
 54%|    | 43/79 [00:02<00:01, 21.50it/s]
 58%|    | 46/79 [00:02<00:01, 22.52it/s]
 62%|   | 49/79 [00:02<00:01, 23.15it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.82it/s]
 16%|        | 13/79 [00:01<00:17,  3.85it/s]
 20%|        | 16/79 [00:01<00:12,  5.16it/s]
 24%|       | 19/79 [00:01<00:08,  6.77it/s]
 28%|       | 22/79 [00:01<00:06,  8.69it/s]
 32%|      | 25/79 [00:01<00:04, 10.80it/s]
 35%|      | 28/79 [00:02<00:03, 13.05it/s]
 39%|      | 31/79 [00:02<00:03, 15.32it/s]
 43%|     | 34/79 [00:02<00:02, 17.58it/s]
 47%|     | 37/79 [00:02<00:02, 19.34it/s]
 51%|     | 40/79 [00:02<00:01, 20.74it/s]
 54%|    | 43/79 [00:02<00:01, 21.89it/s]
 58%|    | 46/79 [00:02<00:01, 22.96it/s]
 62%|   | 49/79 [00:02<00:01, 23.47it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.12it/s]
 28%|       | 22/79 [00:01<00:06,  9.11it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.50it/s]
 39%|      | 31/79 [00:02<00:03, 15.66it/s]
 43%|     | 34/79 [00:02<00:02, 17.63it/s]
 47%|     | 37/79 [00:02<00:02, 19.45it/s]
 51%|     | 40/79 [00:02<00:01, 20.79it/s]
 54%|    | 43/79 [00:02<00:01, 21.84it/s]
 58%|    | 46/79 [00:02<00:01, 22.46it/s]
 62%|   | 49/79 [00:02<00:01, 22.92it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  8.91it/s]
 32%|      | 25/79 [00:01<00:04, 11.06it/s]
 35%|      | 28/79 [00:02<00:03, 13.23it/s]
 39%|      | 31/79 [00:02<00:03, 15.35it/s]
 43%|     | 34/79 [00:02<00:02, 17.37it/s]
 47%|     | 37/79 [00:02<00:02, 19.03it/s]
 51%|     | 40/79 [00:02<00:01, 20.44it/s]
 54%|    | 43/79 [00:02<00:01, 21.28it/s]
 58%|    | 46/79 [00:02<00:01, 22.21it/s]
 62%|   | 49/79 [00:02<00:01, 22.95it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  8.96it/s]
 32%|      | 25/79 [00:01<00:04, 11.06it/s]
 35%|      | 28/79 [00:02<00:03, 13.25it/s]
 39%|      | 31/79 [00:02<00:03, 15.42it/s]
 43%|     | 34/79 [00:02<00:02, 17.38it/s]
 47%|     | 37/79 [00:02<00:02, 19.06it/s]
 51%|     | 40/79 [00:02<00:01, 20.45it/s]
 54%|    | 43/79 [00:02<00:01, 21.81it/s]
 58%|    | 46/79 [00:02<00:01, 22.57it/s]
 62%|   | 49/79 [00:02<00:01, 23.13it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.88it/s]
 20%|        | 16/79 [00:01<00:12,  5.20it/s]
 24%|       | 19/79 [00:01<00:08,  6.83it/s]
 28%|       | 22/79 [00:01<00:06,  8.75it/s]
 32%|      | 25/79 [00:01<00:04, 10.91it/s]
 35%|      | 28/79 [00:02<00:03, 13.14it/s]
 39%|      | 31/79 [00:02<00:03, 15.33it/s]
 43%|     | 34/79 [00:02<00:02, 17.36it/s]
 47%|     | 37/79 [00:02<00:02, 19.18it/s]
 51%|     | 40/79 [00:02<00:01, 20.36it/s]
 54%|    | 43/79 [00:02<00:01, 21.24it/s]
 58%|    | 46/79 [00:02<00:01, 22.08it/s]
 62%|   | 49/79 [00:02<00:01, 23.17it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.04it/s]
 32%|      | 25/79 [00:01<00:04, 11.12it/s]
 35%|      | 28/79 [00:02<00:03, 13.25it/s]
 39%|      | 31/79 [00:02<00:03, 15.34it/s]
 43%|     | 34/79 [00:02<00:02, 17.26it/s]
 47%|     | 37/79 [00:02<00:02, 18.81it/s]
 51%|     | 40/79 [00:02<00:01, 20.18it/s]
 54%|    | 43/79 [00:02<00:01, 21.36it/s]
 58%|    | 46/79 [00:02<00:01, 22.29it/s]
 62%|   | 49/79 [00:02<00:01, 22.76it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  8%|         | 6/79 [00:01<00:34,  2.14it/s]
 11%|        | 9/79 [00:01<00:23,  2.95it/s]
 15%|        | 12/79 [00:01<00:16,  4.02it/s]
 19%|        | 15/79 [00:01<00:11,  5.36it/s]
 23%|       | 18/79 [00:01<00:08,  7.02it/s]
 27%|       | 21/79 [00:01<00:06,  8.93it/s]
 30%|       | 24/79 [00:01<00:04, 11.10it/s]
 34%|      | 27/79 [00:01<00:03, 13.27it/s]
 38%|      | 30/79 [00:02<00:03, 15.23it/s]
 42%|     | 33/79 [00:02<00:02, 17.25it/s]
 46%|     | 36/79 [00:02<00:02, 18.75it/s]
 49%|     | 39/79 [00:02<00:01, 20.15it/s]
 53%|    | 42/79 [00:02<00:01, 21.14it/s]
 57%|    | 45/79 [00:02<00:01, 21.87it/s]
 61%|    | 48/79 [00:02<00:01, 22.55it/s]
 65%|   | 51/79 [00:02<00:01, 22., 25.19it/s]
 70%|   | 55/79 [00:02<00:00, 25.33it/s]
 73%|  | 58/79 [00:03<00:00, 25.86it/s]
 77%|  | 61/79 [00:03<00:00, 26.00it/s]
 81%|  | 64/79 [00:03<00:00, 26.25it/s]
 85%| | 67/79 [00:03<00:00, 26.41it/s]
 89%| | 70/79 [00:03<00:00, 26.56it/s]
 92%|| 73/79 [00:03<00:00, 26.72it/s]
 96%|| 76/79 [00:03<00:00, 27.17it/s]
100%|| 79/79 [00:03<00:00, 27.86it/s]
, 24.63it/s]
 70%|   | 55/79 [00:02<00:00, 25.19it/s]
 73%|  | 58/79 [00:03<00:00, 25.43it/s]
 77%|  | 61/79 [00:03<00:00, 25.72it/s]
 81%|  | 64/79 [00:03<00:00, 25.75it/s]
 85%| | 67/79 [00:03<00:00, 25.67it/s]
 89%| | 70/79 [00:03<00:00, 25.52it/s]
 92%|| 73/79 [00:03<00:00, 26.16it/s]
 96%|| 76/79 [00:03<00:00, 26.75it/s]
100%|| 79/79 [00:03<00:00, 27.61it/s]
, 24.94it/s]
 70%|   | 55/79 [00:02<00:00, 25.06it/s]
 73%|  | 58/79 [00:03<00:00, 25.36it/s]
 77%|  | 61/79 [00:03<00:00, 25.50it/s]
 81%|  | 64/79 [00:03<00:00, 25.66it/s]
 85%| | 67/79 [00:03<00:00, 25.69it/s]
 89%| | 70/79 [00:03<00:00, 25.94it/s]
 92%|| 73/79 [00:03<00:00, 25.87it/s]
 96%|| 76/79 [00:03<00:00, 26.53it/s]
100%|| 79/79 [00:03<00:00, 27.23it/s]
98it/s]
 68%|   | 54/79 [00:02<00:00, 25.36it/s]
 72%|  | 57/79 [00:03<00:00, 25.51it/s]
 76%|  | 60/79 [00:03<00:00, 25.68it/s]
 80%|  | 63/79 [00:03<00:00, 25.88it/s]
 84%| | 66/79 [00:03<00:00, 25.79it/s]
 87%| | 69/79 [00:03<00:00, 25.75it/s]
 91%| | 72/79 [00:03<00:00, 26.09it/s]
 95%|| 75/79 [00:03<00:00, 26.61it/s]
 99%|| 78/79 [00:03<00:00, 27.10it/s]
100%|| 79/79 [00:03<00:00, 20.27it/s]
02it/s]
 68%|   | 54/79 [00:02<00:00, 25.14it/s]
 72%|  | 57/79 [00:03<00:00, 25.31it/s]
 76%|  | 60/79 [00:03<00:00, 25.65it/s]
 80%|  | 63/79 [00:03<00:00, 25.88it/s]
 84%| | 66/79 [00:03<00:00, 26.09it/s]
 87%| | 69/79 [00:03<00:00, 26.28it/s]
 91%| | 72/79 [00:03<00:00, 26.32it/s]
 95%|| 75/79 [00:03<00:00, 26.96it/s]
 99%|| 78/79 [00:03<00:00, 27.39it/s]
100%|| 79/79 [00:03<00:00, 20.28it/s]
, 24.73it/s]
 70%|   | 55/79 [00:02<00:00, 25.17it/s]
 73%|  | 58/79 [00:03<00:00, 25.41it/s]
 77%|  | 61/79 [00:03<00:00, 25.75it/s]
 81%|  | 64/79 [00:03<00:00, 25.67it/s]
 85%| | 67/79 [00:03<00:00, 25.97it/s]
 89%| | 70/79 [00:03<00:00, 25.93it/s]
 92%|| 73/79 [00:03<00:00, 26.15it/s]
 96%|| 76/79 [00:03<00:00, 26.68it/s]
100%|| 79/79 [00:03<00:00, 27.56it/s]
, 24.57it/s]
 70%|   | 55/79 [00:02<00:00, 25.11it/s]
 73%|  | 58/79 [00:03<00:00, 25.31it/s]
 77%|  | 61/79 [00:03<00:00, 25.50it/s]
 81%|  | 64/79 [00:03<00:00, 25.68it/s]
 85%| | 67/79 [00:03<00:00, 25.70it/s]
 89%| | 70/79 [00:03<00:00, 25.77it/s]
 92%|| 73/79 [00:03<00:00, 26.00it/s]
 96%|| 76/79 [00:03<00:00, 26.70it/s]
100%|| 79/79 [00:03<00:00, 27.40it/s]
53it/s]
 68%|   | 54/79 [00:02<00:00, 25.14it/s]
 72%|  | 57/79 [00:03<00:00, 25.42it/s]
 76%|  | 60/79 [00:03<00:00, 25.92it/s]
 80%|  | 63/79 [00:03<00:00, 25.59it/s]
 84%| | 66/79 [00:03<00:00, 25.85it/s]
 87%| | 69/79 [00:03<00:00, 25.71it/s]
 91%| | 72/79 [00:03<00:00, 25.92it/s]
 95%|| 75/79 [00:03<00:00, 26.59it/s]
100%|| 79/79 [00:03<00:00, 27.43it/s]
, 25.04it/s]
 70%|   | 55/79 [00:02<00:00, 25.57it/s]
 73%|  | 58/79 [00:03<00:00, 25.44it/s]
 77%|  | 61/79 [00:03<00:00, 25.61it/s]
 81%|  | 64/79 [00:03<00:00, 25.67it/s]
 85%| | 67/79 [00:03<00:00, 25.77it/s]
 89%| | 70/79 [00:03<00:00, 25.90it/s]
 92%|| 73/79 [00:03<00:00, 26.10it/s]
 96%|| 76/79 [00:03<00:00, 26.56it/s]
100%|| 79/79 [00:03<00:00, 27.43it/s]
, 24.64it/s]
 70%|   | 55/79 [00:02<00:00, 25.06it/s]
 73%|  | 58/79 [00:03<00:00, 25.41it/s]
 77%|  | 61/79 [00:03<00:00, 25.42it/s]
 81%|  | 64/79 [00:03<00:00, 25.53it/s]
 85%| | 67/79 [00:03<00:00, 25.59it/s]
 89%| | 70/79 [00:03<00:00, 25.50it/s]
 92%|| 73/79 [00:03<00:00, 25.97it/s]
 96%|| 76/79 [00:03<00:00, 26.64it/s]
100%|| 79/79 [00:03<00:00, 27.48it/s]
, 25.37it/s]
 70%|   | 55/79 [00:02<00:00, 25.76it/s]
 73%|  | 58/79 [00:03<00:00, 26.04it/s]
 77%|  | 61/79 [00:03<00:00, 26.31it/s]
 81%|  | 64/79 [00:03<00:00, 26.28it/s]
 85%| | 67/79 [00:03<00:00, 26.20it/s]
 89%| | 70/79 [00:03<00:00, 25.88it/s]
 92%|| 73/79 [00:03<00:00, 26.26it/s]
 96%|| 76/79 [00:03<00:00, 26.55it/s]
100%|| 79/79 [00:03<00:00, 27.46it/s]
, 24.37it/s]
 70%|   | 55/79 [00:02<00:00, 24.86it/s]
 73%|  | 58/79 [00:03<00:00, 25.31it/s]
 77%|  | 61/79 [00:03<00:00, 25.31it/s]
 81%|  | 64/79 [00:03<00:00, 25.34it/s]
 85%| | 67/79 [00:03<00:00, 25.59it/s]
 89%| | 70/79 [00:03<00:00, 25.65it/s]
 92%|| 73/79 [00:03<00:00, 25.85it/s]
 97%|| 77/79 [00:03<00:00, 26.87it/s]
100%|| 79/79 [00:03<00:00, 19.86it/s]
, 24.80it/s]
 70%|   | 55/79 [00:03<00:00, 25.12it/s]
 73%|  | 58/79 [00:03<00:00, 25.51it/s]
 77%|  | 61/79 [00:03<00:00, 25.78it/s]
 81%|  | 64/79 [00:03<00:00, 25.90it/s]
 85%| | 67/79 [00:03<00:00, 25.96it/s]
 89%| | 70/79 [00:03<00:00, 25.87it/s]
 92%|| 73/79 [00:03<00:00, 26.09it/s]
 96%|| 76/79 [00:03<00:00, 26.67it/s]
100%|| 79/79 [00:03<00:00, 27.40it/s]
00it/s]
 68%|   | 54/79 [00:02<00:01, 24.38it/s]
 72%|  | 57/79 [00:03<00:00, 24.70it/s]
 76%|  | 60/79 [00:03<00:00, 24.63it/s]
 80%|  | 63/79 [00:03<00:00, 24.78it/s]
 84%| | 66/79 [00:03<00:00, 24.92it/s]
 87%| | 69/79 [00:03<00:00, 24.94it/s]
 91%| | 72/79 [00:03<00:00, 25.10it/s]
 95%|| 75/79 [00:03<00:00, 25.92it/s]
 99%|| 78/79 [00:03<00:00, 26.54it/s]
100%|| 79/79 [00:03<00:00, 19.83it/s]
35it/s]
 68%|   | 54/79 [00:03<00:01, 24.59it/s]
 72%|  | 57/79 [00:03<00:00, 24.93it/s]
 76%|  | 60/79 [00:03<00:00, 25.09it/s]
 80%|  | 63/79 [00:03<00:00, 25.11it/s]
 84%| | 66/79 [00:03<00:00, 24.99it/s]
 87%| | 69/79 [00:03<00:00, 25.10it/s]
 91%| | 72/79 [00:03<00:00, 25.28it/s]
 95%|| 75/79 [00:03<00:00, 26.06it/s]
 99%|| 78/79 [00:03<00:00, 26.78it/s]
100%|| 79/79 [00:04<00:00, 19.58it/s]
, 24.56it/s]
 70%|   | 55/79 [00:03<00:00, 24.96it/s]
 73%|  | 58/79 [00:03<00:00, 25.13it/s]
 77%|  | 61/79 [00:03<00:00, 25.40it/s]
 81%|  | 64/79 [00:03<00:00, 25.56it/s]
 85%| | 67/79 [00:03<00:00, 25.52it/s]
 89%| | 70/79 [00:03<00:00, 25.73it/s]
 92%|| 73/79 [00:03<00:00, 26.05it/s]
 96%|| 76/79 [00:03<00:00, 26.61it/s]
100%|| 79/79 [00:03<00:00, 27.48it/s]
, 24.88it/s]
 70%|   | 55/79 [00:03<00:00, 25.34it/s]
 73%|  | 58/79 [00:03<00:00, 25.52it/s]
 77%|  | 61/79 [00:03<00:00, 25.78it/s]
 81%|  | 64/79 [00:03<00:00, 25.48it/s]
 85%| | 67/79 [00:03<00:00, 25.70it/s]
 89%| | 70/79 [00:03<00:00, 25.62it/s]
 92%|| 73/79 [00:03<00:00, 26.02it/s]
 96%|| 76/79 [00:03<00:00, 26.51it/s]
100%|| 79/79 [00:03<00:00, 27.26it/s]
, 24.04it/s]
 70%|   | 55/79 [00:03<00:00, 24.27it/s]
 73%|  | 58/79 [00:03<00:00, 24.49it/s]
 77%|  | 61/79 [00:03<00:00, 24.57it/s]
 81%|  | 64/79 [00:03<00:00, 24.77it/s]
 85%| | 67/79 [00:03<00:00, 24.91it/s]
 89%| | 70/79 [00:03<00:00, 25.21it/s]
 92%|| 73/79 [00:03<00:00, 25.41it/s]
 96%|| 76/79 [00:03<00:00, 25.96it/s]
100%|| 79/79 [00:03<00:00, 26.71it/s]
, 24.36it/s]
 70%|   | 55/79 [00:03<00:00, 24.65it/s]
 73%|  | 58/79 [00:03<00:00, 25.12it/s]
 77%|  | 61/79 [00:03<00:00, 25.17it/s]
 81%|  | 64/79 [00:03<00:00, 25.27it/s]
 85%| | 67/79 [00:03<00:00, 25.43it/s]
 89%| | 70/79 [00:03<00:00, 25.50it/s]
 92%|| 73/79 [00:03<00:00, 25.74it/s]
 96%|| 76/79 [00:03<00:00, 26.49it/s]
100%|| 79/79 [00:03<00:00, 27.38it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:00, 24.25it/s]
 73%|  | 58/79 [00:03<00:00, 24.25it/s]
 77%|  | 61/79 [00:03<00:00, 24.24it/s]
 81%|  | 64/79 [00:03<00:00, 24.40it/s]
 85%| | 67/79 [00:03<00:00, 24.41it/s]
 89%| | 70/79 [00:03<00:00, 24.18it/s]
 92%|| 73/79 [00:03<00:00, 24.89it/s]
 96%|| 76/79 [00:03<00:00, 25.81it/s]
100%|| 79/79 [00:03<00:00, 26.92it/s]
, 23.43it/s]
 70%|   | 55/79 [00:03<00:01, 23.68it/s]
 73%|  | 58/79 [00:03<00:00, 24.43it/s]
 77%|  | 61/79 [00:03<00:00, 24.59it/s]
 81%|  | 64/79 [00:03<00:00, 24.39it/s]
 85%| | 67/79 [00:03<00:00, 24.68it/s]
 89%| | 70/79 [00:03<00:00, 24.84it/s]
 92%|| 73/79 [00:03<00:00, 25.26it/s]
 96%|| 76/79 [00:03<00:00, 26.07it/s]
100%|| 79/79 [00:03<00:00, 27.12it/s]
00it/s]
 68%|   | 54/79 [00:03<00:01, 24.36it/s]
 72%|  | 57/79 [00:03<00:00, 24.62it/s]
 76%|  | 60/79 [00:03<00:00, 24.94it/s]
 80%|  | 63/79 [00:03<00:00, 25.13it/s]
 84%| | 66/79 [00:03<00:00, 25.59it/s]
 87%| | 69/79 [00:03<00:00, 25.42it/s]
 91%| | 72/79 [00:03<00:00, 25.56it/s]
 95%|| 75/79 [00:03<00:00, 26.25it/s]
 99%|| 78/79 [00:03<00:00, 26.73it/s]
100%|| 79/79 [00:04<00:00, 19.42it/s]
, 23.90it/s]
 70%|   | 55/79 [00:03<00:00, 24.19it/s]
 73%|  | 58/79 [00:03<00:00, 24.47it/s]
 77%|  | 61/79 [00:03<00:00, 24.77it/s]
 81%|  | 64/79 [00:03<00:00, 24.93it/s]
 85%| | 67/79 [00:03<00:00, 25.15it/s]
 89%| | 70/79 [00:03<00:00, 25.23it/s]
 92%|| 73/79 [00:03<00:00, 25.45it/s]
 96%|| 76/79 [00:03<00:00, 26.46it/s]
100%|| 79/79 [00:04<00:00, 26.72it/s]
, 23.42it/s]
 70%|   | 55/79 [00:03<00:01, 23.95it/s]
 73%|  | 58/79 [00:03<00:00, 24.26it/s]
 77%|  | 61/79 [00:03<00:00, 24.68it/s]
 81%|  | 64/79 [00:03<00:00, 24.84it/s]
 85%| | 67/79 [00:03<00:00, 25.06it/s]
 89%| | 70/79 [00:03<00:00, 25.25it/s]
 92%|| 73/79 [00:03<00:00, 25.33it/s]
 96%|| 76/79 [00:03<00:00, 26.06it/s]
100%|| 79/79 [00:03<00:00, 26.63it/s]
, 23.86it/s]
 70%|   | 55/79 [00:03<00:00, 24.18it/s]
 73%|  | 58/79 [00:03<00:00, 24.56it/s]
 77%|  | 61/79 [00:03<00:00, 24.86it/s]
 81%|  | 64/79 [00:03<00:00, 24.90it/s]
 85%| | 67/79 [00:03<00:00, 25.06it/s]
 89%| | 70/79 [00:03<00:00, 24.93it/s]
 92%|| 73/79 [00:03<00:00, 25.44it/s]
 96%|| 76/79 [00:03<00:00, 25.99it/s]
100%|| 79/79 [00:04<00:00, 26.75it/s]
, 23.39it/s]
 70%|   | 55/79 [00:03<00:01, 23.87it/s]
 73%|  | 58/79 [00:03<00:00, 24.24it/s]
 77%|  | 61/79 [00:03<00:00, 24.62it/s]
 81%|  | 64/79 [00:03<00:00, 24.71it/s]
 85%| | 67/79 [00:03<00:00, 24.81it/s]
 89%| | 70/79 [00:03<00:00, 25.08it/s]
 92%|| 73/79 [00:03<00:00, 25.41it/s]
 96%|| 76/79 [00:03<00:00, 26.36it/s]
100%|| 79/79 [00:04<00:00, 27.31it/s]
67it/s]
 68%|   | 54/79 [00:03<00:01, 24.34it/s]
 72%|  | 57/79 [00:03<00:00, 24.38it/s]
 76%|  | 60/79 [00:03<00:00, 24.50it/s]
 80%|  | 63/79 [00:03<00:00, 24.84it/s]
 84%| | 66/79 [00:03<00:00, 25.17it/s]
 87%| | 69/79 [00:03<00:00, 25.02it/s]
 91%| | 72/79 [00:03<00:00, 25.37it/s]
 95%|| 75/79 [00:03<00:00, 26.19it/s]
 99%|| 78/79 [00:03<00:00, 26.82it/s]
100%|| 79/79 [00:04<00:00, 19.23it/s]
, 23.67it/s]
 70%|   | 55/79 [00:03<00:01, 23.72it/s]
 73%|  | 58/79 [00:03<00:00, 23.99it/s]
 77%|  | 61/79 [00:03<00:00, 24.07it/s]
 81%|  | 64/79 [00:03<00:00, 24.04it/s]
 85%| | 67/79 [00:03<00:00, 24.37it/s]
 89%| | 70/79 [00:03<00:00, 24.59it/s]
 92%|| 73/79 [00:03<00:00, 24.92it/s]
 96%|| 76/79 [00:03<00:00, 25.65it/s]
100%|| 79/79 [00:04<00:00, 26.55it/s]
, 23.53it/s]
 70%|   | 55/79 [00:03<00:00, 24.11it/s]
 73%|  | 58/79 [00:03<00:00, 24.32it/s]
 77%|  | 61/79 [00:03<00:00, 24.47it/s]
 81%|  | 64/79 [00:03<00:00, 24.53it/s]
 85%| | 67/79 [00:03<00:00, 24.82it/s]
 89%| | 70/79 [00:03<00:00, 24.48it/s]
 92%|| 73/79 [00:03<00:00, 24.82it/s]
 96%|| 76/79 [00:03<00:00, 25.51it/s]
100%|| 79/79 [00:04<00:00, 26.32it/s]
, 22.84it/s]
 70%|   | 55/79 [00:03<00:01, 23.19it/s]
 73%|  | 58/79 [00:03<00:00, 23.45it/s]
 77%|  | 61/79 [00:03<00:00, 23.89it/s]
 81%|  | 64/79 [00:03<00:00, 24.36it/s]
 85%| | 67/79 [00:03<00:00, 24.68it/s]
 89%| | 70/79 [00:03<00:00, 24.66it/s]
 92%|| 73/79 [00:03<00:00, 24.98it/s]
 96%|| 76/79 [00:03<00:00, 25.62it/s]
100%|| 79/79 [00:04<00:00, 26.32it/s]
, 23.35it/s]
 70%|   | 55/79 [00:03<00:01, 23.76it/s]
 73%|  | 58/79 [00:03<00:00, 24.14it/s]
 77%|  | 61/79 [00:03<00:00, 24.35it/s]
 81%|  | 64/79 [00:03<00:00, 24.41it/s]
 85%| | 67/79 [00:03<00:00, 24.66it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 25.02it/s]
 96%|| 76/79 [00:03<00:00, 25.70it/s]
100%|| 79/79 [00:04<00:00, 26.48it/s]
85it/s]
 68%|   | 54/79 [00:03<00:01, 23.15it/s]
 72%|  | 57/79 [00:03<00:00, 23.60it/s]
 76%|  | 60/79 [00:03<00:00, 23.96it/s]
 80%|  | 63/79 [00:03<00:00, 23.98it/s]
 84%| | 66/79 [00:03<00:00, 24.07it/s]
 87%| | 69/79 [00:03<00:00, 24.25it/s]
 91%| | 72/79 [00:03<00:00, 24.59it/s]
 95%|| 75/79 [00:03<00:00, 25.36it/s]
 99%|| 78/79 [00:04<00:00, 25.98it/s]
100%|| 79/79 [00:04<00:00, 18.86it/s]
2020-06-23 17:13:28,310 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.224273 (0.027035350036621095 s / img per device, on 32 devices)
2020-06-23 17:13:28,329 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:13:28,329 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:13:28,348 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592957615676, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 14, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592957615677, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 14}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:13:37,746 maskrcnn_benchmark.trainer INFO: eta: 0:58:10  iter: 11940  loss: 0.4995 (0.7162)  loss_classifier: 0.1588 (0.2580)  loss_box_reg: 0.0758 (0.1160)  loss_mask: 0.2160 (0.2877)  loss_objectness: 0.0073 (0.0347)  loss_rpn_box_reg: 0.0072 (0.0198)  time: 0.1088 (0.1244)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5148
2020-06-23 17:13:39,924 maskrcnn_benchmark.trainer INFO: eta: 0:58:07  iter: 11960  loss: 0.4980 (0.7158)  loss_classifier: 0.1577 (0.2579)  loss_box_reg: 0.0793 (0.1159)  loss_mask: 0.2123 (0.2876)  loss_objectness: 0.0122 (0.0347)  loss_rpn_box_reg: 0.0036 (0.0198)  time: 0.1081 (0.1244)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.62s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 17:13:42,122 maskrcnn_benchmark.trainer INFO: eta: 0:58:04  iter: 11980  loss: 0.6203 (0.7156)  loss_classifier: 0.1948 (0.2578)  loss_box_reg: 0.0940 (0.1159)  loss_mask: 0.2524 (0.2875)  loss_objectness: 0.0175 (0.0347)  loss_rpn_box_reg: 0.0077 (0.0198)  time: 0.1096 (0.1244)  data: 0.0015 (0.0172)  lr: 0.016000  max mem: 5148
DONE (t=1.51s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37179
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.58902
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.40065
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21121
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.40415
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48083
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30852
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.49002
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51508
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.31523
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.55553
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.64919
2020-06-23 17:13:44,309 maskrcnn_benchmark.trainer INFO: eta: 0:58:01  iter: 12000  loss: 0.5248 (0.7153)  loss_classifier: 0.1751 (0.2576)  loss_box_reg: 0.0811 (0.1158)  loss_mask: 0.2387 (0.2874)  loss_objectness: 0.0121 (0.0347)  loss_rpn_box_reg: 0.0055 (0.0198)  time: 0.1087 (0.1243)  data: 0.0015 (0.0172)  lr: 0.001600  max mem: 5148
2020-06-23 17:13:46,501 maskrcnn_benchmark.trainer INFO: eta: 0:57:57  iter: 12020  loss: 0.5430 (0.7151)  loss_classifier: 0.1635 (0.2575)  loss_box_reg: 0.0837 (0.1158)  loss_mask: 0.2547 (0.2874)  loss_objectness: 0.0116 (0.0346)  loss_rpn_box_reg: 0.0057 (0.0198)  time: 0.1102 (0.1243)  data: 0.0014 (0.0172)  lr: 0.001600  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:13:48,688 maskrcnn_benchmark.trainer INFO: eta: 0:57:54  iter: 12040  loss: 0.5236 (0.7148)  loss_classifier: 0.1736 (0.2574)  loss_box_reg: 0.0890 (0.1157)  loss_mask: 0.2440 (0.2873)  loss_objectness: 0.0175 (0.0346)  loss_rpn_box_reg: 0.0084 (0.0198)  time: 0.1093 (0.1243)  data: 0.0015 (0.0172)  lr: 0.001600  max mem: 5148
DONE (t=1.57s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:13:50,867 maskrcnn_benchmark.trainer INFO: eta: 0:57:51  iter: 12060  loss: 0.4715 (0.7145)  loss_classifier: 0.1494 (0.2572)  loss_box_reg: 0.0739 (0.1157)  loss_mask: 0.2403 (0.2872)  loss_objectness: 0.0094 (0.0346)  loss_rpn_box_reg: 0.0043 (0.0198)  time: 0.1092 (0.1243)  data: 0.0013 (0.0171)  lr: 0.001600  max mem: 5148
DONE (t=2.42s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.33871
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.55401
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.36081
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.14974
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36858
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49885
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29086
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.44969
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.47027
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.26186
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51420
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62221
2020-06-23 17:13:52,860 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3717884388874626, segm mAP: 0.33871144368226325
:::MLLOG {"namespace": "", "time_ms": 1592957632861, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.3717884388874626, "SEGM": 0.33871144368226325}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 13}}
:::MLLOG {"namespace": "", "time_ms": 1592957632861, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 13}}
2020-06-23 17:13:53,187 maskrcnn_benchmark.trainer INFO: eta: 0:57:48  iter: 12080  loss: 0.5625 (0.7143)  loss_classifier: 0.1919 (0.2571)  loss_box_reg: 0.1019 (0.1157)  loss_mask: 0.2481 (0.2872)  loss_objectness: 0.0164 (0.0346)  loss_rpn_box_reg: 0.0084 (0.0198)  time: 0.1096 (0.1242)  data: 0.0014 (0.0171)  lr: 0.001600  max mem: 5148
2020-06-23 17:13:55,380 maskrcnn_benchmark.trainer INFO: eta: 0:57:45  iter: 12100  loss: 0.5432 (0.7141)  loss_classifier: 0.1821 (0.2570)  loss_box_reg: 0.0820 (0.1156)  loss_mask: 0.2375 (0.2871)  loss_objectness: 0.0125 (0.0345)  loss_rpn_box_reg: 0.0056 (0.0198)  time: 0.1090 (0.1242)  data: 0.0014 (0.0171)  lr: 0.001600  max mem: 5148
2020-06-23 17:13:57,555 maskrcnn_benchmark.trainer INFO: eta: 0:57:42  iter: 12120  loss: 0.5447 (0.7138)  loss_classifier: 0.1901 (0.2569)  loss_box_reg: 0.0821 (0.1156)  loss_mask: 0.2454 (0.2870)  loss_objectness: 0.0130 (0.0345)  loss_rpn_box_reg: 0.0070 (0.0197)  time: 0.1090 (0.1242)  data: 0.0014 (0.0171)  lr: 0.001600  max mem: 5148
2020-06-23 17:13:59,724 maskrcnn_benchmark.trainer INFO: eta: 0:57:39  iter: 12140  loss: 0.4988 (0.7135)  loss_classifier: 0.1528 (0.2568)  loss_box_reg: 0.0804 (0.1156)  loss_mask: 0.2461 (0.2870)  loss_objectness: 0.0165 (0.0345)  loss_rpn_box_reg: 0.0075 (0.0197)  time: 0.1086 (0.1242)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:01,907 maskrcnn_benchmark.trainer INFO: eta: 0:57:35  iter: 12160  loss: 0.5254 (0.7132)  loss_classifier: 0.1628 (0.2566)  loss_box_reg: 0.0778 (0.1155)  loss_mask: 0.2149 (0.2869)  loss_objectness: 0.0072 (0.0345)  loss_rpn_box_reg: 0.0052 (0.0197)  time: 0.1089 (0.1241)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:04,068 maskrcnn_benchmark.trainer INFO: eta: 0:57:32  iter: 12180  loss: 0.5624 (0.7129)  loss_classifier: 0.1694 (0.2565)  loss_box_reg: 0.0766 (0.1154)  loss_mask: 0.2496 (0.2868)  loss_objectness: 0.0136 (0.0344)  loss_rpn_box_reg: 0.0079 (0.0197)  time: 0.1079 (0.1241)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:06,232 maskrcnn_benchmark.trainer INFO: eta: 0:57:29  iter: 12200  loss: 0.5690 (0.7127)  loss_classifier: 0.1783 (0.2564)  loss_box_reg: 0.1074 (0.1154)  loss_mask: 0.2617 (0.2867)  loss_objectness: 0.0160 (0.0344)  loss_rpn_box_reg: 0.0106 (0.0197)  time: 0.1082 (0.1241)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:08,403 maskrcnn_benchmark.trainer INFO: eta: 0:57:26  iter: 12220  loss: 0.5578 (0.7125)  loss_classifier: 0.1808 (0.2563)  loss_box_reg: 0.0884 (0.1154)  loss_mask: 0.2525 (0.2867)  loss_objectness: 0.0160 (0.0344)  loss_rpn_box_reg: 0.0085 (0.0197)  time: 0.1079 (0.1241)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:10,558 maskrcnn_benchmark.trainer INFO: eta: 0:57:23  iter: 12240  loss: 0.4119 (0.7120)  loss_classifier: 0.1288 (0.2561)  loss_box_reg: 0.0589 (0.1153)  loss_mask: 0.2130 (0.2866)  loss_objectness: 0.0077 (0.0343)  loss_rpn_box_reg: 0.0043 (0.0197)  time: 0.1072 (0.1240)  data: 0.0013 (0.0169)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:12,722 maskrcnn_benchmark.trainer INFO: eta: 0:57:19  iter: 12260  loss: 0.5653 (0.7117)  loss_classifier: 0.2005 (0.2560)  loss_box_reg: 0.0527 (0.1153)  loss_mask: 0.2309 (0.2865)  loss_objectness: 0.0144 (0.0343)  loss_rpn_box_reg: 0.0058 (0.0197)  time: 0.1080 (0.1240)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:14,895 maskrcnn_benchmark.trainer INFO: eta: 0:57:16  iter: 12280  loss: 0.4461 (0.7113)  loss_classifier: 0.1451 (0.2558)  loss_box_reg: 0.0588 (0.1152)  loss_mask: 0.2343 (0.2864)  loss_objectness: 0.0118 (0.0343)  loss_rpn_box_reg: 0.0069 (0.0197)  time: 0.1083 (0.1240)  data: 0.0013 (0.0168)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:17,073 maskrcnn_benchmark.trainer INFO: eta: 0:57:13  iter: 12300  loss: 0.5505 (0.7111)  loss_classifier: 0.1815 (0.2557)  loss_box_reg: 0.0826 (0.1152)  loss_mask: 0.2285 (0.2863)  loss_objectness: 0.0171 (0.0343)  loss_rpn_box_reg: 0.0074 (0.0197)  time: 0.1088 (0.1240)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:19,246 maskrcnn_benchmark.trainer INFO: eta: 0:57:10  iter: 12320  loss: 0.5939 (0.7109)  loss_classifier: 0.1987 (0.2556)  loss_box_reg: 0.1018 (0.1151)  loss_mask: 0.2547 (0.2863)  loss_objectness: 0.0184 (0.0343)  loss_rpn_box_reg: 0.0119 (0.0197)  time: 0.1089 (0.1239)  data: 0.0015 (0.0168)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:21,419 maskrcnn_benchmark.trainer INFO: eta: 0:57:07  iter: 12340  loss: 0.5399 (0.7107)  loss_classifier: 0.1730 (0.2555)  loss_box_reg: 0.0901 (0.1151)  loss_mask: 0.2465 (0.2862)  loss_objectness: 0.0106 (0.0342)  loss_rpn_box_reg: 0.0059 (0.0197)  time: 0.1084 (0.1239)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:23,587 maskrcnn_benchmark.trainer INFO: eta: 0:57:04  iter: 12360  loss: 0.5658 (0.7105)  loss_classifier: 0.1864 (0.2554)  loss_box_reg: 0.1022 (0.1151)  loss_mask: 0.2473 (0.2861)  loss_objectness: 0.0189 (0.0342)  loss_rpn_box_reg: 0.0074 (0.0197)  time: 0.1080 (0.1239)  data: 0.0014 (0.0167)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:25,769 maskrcnn_benchmark.trainer INFO: eta: 0:57:00  iter: 12380  loss: 0.4948 (0.7101)  loss_classifier: 0.1642 (0.2552)  loss_box_reg: 0.0847 (0.1150)  loss_mask: 0.2430 (0.2860)  loss_objectness: 0.0123 (0.0342)  loss_rpn_box_reg: 0.0042 (0.0196)  time: 0.1085 (0.1239)  data: 0.0013 (0.0167)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:27,927 maskrcnn_benchmark.trainer INFO: eta: 0:56:57  iter: 12400  loss: 0.4892 (0.7099)  loss_classifier: 0.1602 (0.2551)  loss_box_reg: 0.0798 (0.1150)  loss_mask: 0.2367 (0.2860)  loss_objectness: 0.0139 (0.0341)  loss_rpn_box_reg: 0.0040 (0.0196)  time: 0.1075 (0.1238)  data: 0.0013 (0.0167)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:30,105 maskrcnn_benchmark.trainer INFO: eta: 0:56:54  iter: 12420  loss: 0.5410 (0.7096)  loss_classifier: 0.1740 (0.2550)  loss_box_reg: 0.0850 (0.1150)  loss_mask: 0.2261 (0.2859)  loss_objectness: 0.0182 (0.0341)  loss_rpn_box_reg: 0.0075 (0.0196)  time: 0.1087 (0.1238)  data: 0.0014 (0.0167)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:32,262 maskrcnn_benchmark.trainer INFO: eta: 0:56:51  iter: 12440  loss: 0.5358 (0.7094)  loss_classifier: 0.1692 (0.2549)  loss_box_reg: 0.0959 (0.1149)  loss_mask: 0.2520 (0.2859)  loss_objectness: 0.0142 (0.0341)  loss_rpn_box_reg: 0.0059 (0.0196)  time: 0.1078 (0.1238)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:34,455 maskrcnn_benchmark.trainer INFO: eta: 0:56:48  iter: 12460  loss: 0.5156 (0.7091)  loss_classifier: 0.1420 (0.2547)  loss_box_reg: 0.0764 (0.1149)  loss_mask: 0.2457 (0.2858)  loss_objectness: 0.0116 (0.0341)  loss_rpn_box_reg: 0.0063 (0.0196)  time: 0.1091 (0.1238)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:36,620 maskrcnn_benchmark.trainer INFO: eta: 0:56:45  iter: 12480  loss: 0.5464 (0.7088)  loss_classifier: 0.1627 (0.2546)  loss_box_reg: 0.0900 (0.1149)  loss_mask: 0.2439 (0.2857)  loss_objectness: 0.0160 (0.0341)  loss_rpn_box_reg: 0.0077 (0.0196)  time: 0.1074 (0.1237)  data: 0.0013 (0.0166)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:38,779 maskrcnn_benchmark.trainer INFO: eta: 0:56:42  iter: 12500  loss: 0.4869 (0.7085)  loss_classifier: 0.1722 (0.2545)  loss_box_reg: 0.0801 (0.1148)  loss_mask: 0.2135 (0.2857)  loss_objectness: 0.0118 (0.0340)  loss_rpn_box_reg: 0.0056 (0.0196)  time: 0.1078 (0.1237)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:40,954 maskrcnn_benchmark.trainer INFO: eta: 0:56:38  iter: 12520  loss: 0.5250 (0.7082)  loss_classifier: 0.1686 (0.2543)  loss_box_reg: 0.0840 (0.1148)  loss_mask: 0.2261 (0.2856)  loss_objectness: 0.0105 (0.0340)  loss_rpn_box_reg: 0.0071 (0.0196)  time: 0.1082 (0.1237)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:43,100 maskrcnn_benchmark.trainer INFO: eta: 0:56:35  iter: 12540  loss: 0.4576 (0.7079)  loss_classifier: 0.1483 (0.2542)  loss_box_reg: 0.0612 (0.1147)  loss_mask: 0.2296 (0.2855)  loss_objectness: 0.0138 (0.0340)  loss_rpn_box_reg: 0.0074 (0.0196)  time: 0.1078 (0.1237)  data: 0.0014 (0.0165)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:45,253 maskrcnn_benchmark.trainer INFO: eta: 0:56:32  iter: 12560  loss: 0.5233 (0.7076)  loss_classifier: 0.1624 (0.2541)  loss_box_reg: 0.0874 (0.1147)  loss_mask: 0.2153 (0.2854)  loss_objectness: 0.0094 (0.0339)  loss_rpn_box_reg: 0.0043 (0.0196)  time: 0.1079 (0.1236)  data: 0.0013 (0.0165)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:47,441 maskrcnn_benchmark.trainer INFO: eta: 0:56:29  iter: 12580  loss: 0.5683 (0.7074)  loss_classifier: 0.1644 (0.2539)  loss_box_reg: 0.0895 (0.1147)  loss_mask: 0.2516 (0.2853)  loss_objectness: 0.0116 (0.0339)  loss_rpn_box_reg: 0.0085 (0.0195)  time: 0.1096 (0.1236)  data: 0.0014 (0.0165)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:49,610 maskrcnn_benchmark.trainer INFO: eta: 0:56:26  iter: 12600  loss: 0.4055 (0.7071)  loss_classifier: 0.1232 (0.2538)  loss_box_reg: 0.0586 (0.1146)  loss_mask: 0.2144 (0.2852)  loss_objectness: 0.0092 (0.0339)  loss_rpn_box_reg: 0.0042 (0.0195)  time: 0.1078 (0.1236)  data: 0.0013 (0.0165)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:51,794 maskrcnn_benchmark.trainer INFO: eta: 0:56:23  iter: 12620  loss: 0.4969 (0.7068)  loss_classifier: 0.1524 (0.2537)  loss_box_reg: 0.0774 (0.1146)  loss_mask: 0.2423 (0.2852)  loss_objectness: 0.0089 (0.0339)  loss_rpn_box_reg: 0.0091 (0.0195)  time: 0.1090 (0.1236)  data: 0.0013 (0.0164)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:53,963 maskrcnn_benchmark.trainer INFO: eta: 0:56:20  iter: 12640  loss: 0.4964 (0.7065)  loss_classifier: 0.1611 (0.2535)  loss_box_reg: 0.0862 (0.1145)  loss_mask: 0.2480 (0.2851)  loss_objectness: 0.0094 (0.0338)  loss_rpn_box_reg: 0.0072 (0.0195)  time: 0.1082 (0.1235)  data: 0.0013 (0.0164)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:56,137 maskrcnn_benchmark.trainer INFO: eta: 0:56:16  iter: 12660  loss: 0.5246 (0.7062)  loss_classifier: 0.1655 (0.2534)  loss_box_reg: 0.0745 (0.1145)  loss_mask: 0.2294 (0.2850)  loss_objectness: 0.0152 (0.0338)  loss_rpn_box_reg: 0.0067 (0.0195)  time: 0.1085 (0.1235)  data: 0.0013 (0.0164)  lr: 0.001600  max mem: 5148
2020-06-23 17:14:58,319 maskrcnn_benchmark.trainer INFO: eta: 0:56:13  iter: 12680  loss: 0.5001 (0.7061)  loss_classifier: 0.1578 (0.2533)  loss_box_reg: 0.0730 (0.1144)  loss_mask: 0.2476 (0.2850)  loss_objectness: 0.0165 (0.0338)  loss_rpn_box_reg: 0.0121 (0.0195)  time: 0.1085 (0.1235)  data: 0.0014 (0.0164)  lr: 0.001600  max mem: 5148
2020-06-23 17:15:00,488 maskrcnn_benchmark.trainer INFO: eta: 0:56:10  iter: 12700  loss: 0.4545 (0.7057)  loss_classifier: 0.1146 (0.2531)  loss_box_reg: 0.0654 (0.1144)  loss_mask: 0.2240 (0.2849)  loss_objectness: 0.0132 (0.0338)  loss_rpn_box_reg: 0.0032 (0.0195)  time: 0.1081 (0.1235)  data: 0.0013 (0.0163)  lr: 0.001600  max mem: 5148
2020-06-23 17:15:02,656 maskrcnn_benchmark.trainer INFO: eta: 0:56:07  iter: 12720  loss: 0.4199 (0.7054)  loss_classifier: 0.1420 (0.2530)  loss_box_reg: 0.0591 (0.1143)  loss_mask: 0.2300 (0.2848)  loss_objectness: 0.0088 (0.0338)  loss_rpn_box_reg: 0.0043 (0.0195)  time: 0.1081 (0.1234)  data: 0.0014 (0.0163)  lr: 0.001600  max mem: 5148
2020-06-23 17:15:04,832 maskrcnn_benchmark.trainer INFO: eta: 0:56:04  iter: 12740  loss: 0.4755 (0.7051)  loss_classifier: 0.1613 (0.2528)  loss_box_reg: 0.0820 (0.1143)  loss_mask: 0.2298 (0.2847)  loss_objectness: 0.0085 (0.0337)  loss_rpn_box_reg: 0.0056 (0.0195)  time: 0.1086 (0.1234)  data: 0.0014 (0.0163)  lr: 0.001600  max mem: 5148
2020-06-23 17:15:06,997 maskrcnn_benchmark.trainer INFO: eta: 0:56:01  iter: 12760  loss: 0.5128 (0.7048)  loss_classifier: 0.1601 (0.2527)  loss_box_reg: 0.0831 (0.1143)  loss_mask: 0.2424 (0.2847)  loss_objectness: 0.0117 (0.0337)  loss_rpn_box_reg: 0.0038 (0.0195)  time: 0.1081 (0.1234)  data: 0.0014 (0.0163)  lr: 0.001600  max mem: 5148
2020-06-23 17:15:09,169 maskrcnn_benchmark.trainer INFO: eta: 0:55:58  iter: 12780  loss: 0.6065 (0.7047)  loss_classifier: 0.1927 (0.2527)  loss_box_reg: 0.1111 (0.1142)  loss_mask: 0.2509 (0.2846)  loss_objectness: 0.0180 (0.0337)  loss_rpn_box_reg: 0.0087 (0.0194)  time: 0.1083 (0.1234)  data: 0.0014 (0.0162)  lr: 0.001600  max mem: 5148
2020-06-23 17:15:11,327 maskrcnn_benchmark.trainer INFO: eta: 0:55:55  iter: 12800  loss: 0.5001 (0.7044)  loss_classifier: 0.1611 (0.2525)  loss_box_reg: 0.0720 (0.1142)  loss_mask: 0.2446 (0.2846)  loss_objectness: 0.0100 (0.0337)  loss_rpn_box_reg: 0.0064 (0.0194)  time: 0.1074 (0.1234)  data: 0.0014 (0.0162)  lr: 0.001600  max mem: 5148
2020-06-23 17:15:13,495 maskrcnn_benchmark.trainer INFO: eta: 0:55:52  iter: 12820  loss: 0.5640 (0.7042)  loss_classifier: 0.1806 (0.2524)  loss_box_reg: 0.0884 (0.1142)  loss_mask: 0.2595 (0.2845)  loss_objectness: 0.0105 (0.0336)  loss_rpn_box_reg: 0.0103 (0.0194)  time: 0.1086 (0.1233)  data: 0.0014 (0.0162)  lr: 0.001600  max mem: 5148
:::MLLOG {"namespace": "", "time_ms": 1592957715442, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 14}}
:::MLLOG {"namespace": "", "time_ms": 1592957715442, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 14}}
:::MLLOG {"namespace": "", "time_ms": 1592957715442, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 14}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 17:15:15,642 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
2020-06-23 17:15:15,951 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
index created!
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.29it/s]
  5%|         | 4/79 [00:00<00:41,  1.80it/s]
  9%|         | 7/79 [00:01<00:28,  2.50it/s]
 13%|        | 10/79 [00:01<00:20,  3.43it/s]
 16%|        | 13/79 [00:01<00:14,  4.62it/s]
 20%|        | 16/79 [00:01<00:10,  6.12it/s]
 24%|       | 19/79 [00:01<00:07,  7.93it/s]
 28%|       | 22/79 [00:01<00:05, 10.03it/s]
 32%|      | 25/79 [00:01<00:04, 12.30it/s]
 35%|      | 28/79 [00:01<00:03, 14.67it/s]
 39%|      | 31/79 [00:01<00:02, 16.92it/s]
 43%|     | 34/79 [00:02<00:02, 18.91it/s]
 47%|     | 37/79 [00:02<00:02, 20.53it/s]
 51%|     | 40/79 [00:02<00:01, 21.80it/s]
 54%|    | 43/79 [00:02<00:01, 22.78it/s]
 58%|    | 46/79 [00:02<00:01, 23.59it/s]
 62%|   | 49/79 [00:02<00:01, 24.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:58,  1.34it/s]
  5%|         | 4/79 [00:00<00:40,  1.86it/s]
  9%|         | 7/79 [00:00<00:27,  2.58it/s]
 13%|        | 10/79 [00:01<00:19,  3.52it/s]
 16%|        | 13/79 [00:01<00:13,  4.75it/s]
 20%|        | 16/79 [00:01<00:10,  6.28it/s]
 24%|       | 19/79 [00:01<00:07,  8.12it/s]
 28%|       | 22/79 [00:01<00:05, 10.22it/s]
 32%|      | 25/79 [00:01<00:04, 12.45it/s]
 35%|      | 28/79 [00:01<00:03, 14.75it/s]
 39%|      | 31/79 [00:01<00:02, 16.97it/s]
 43%|     | 34/79 [00:02<00:02, 18.96it/s]
 47%|     | 37/79 [00:02<00:02, 20.43it/s]
 51%|     | 40/79 [00:02<00:01, 21.83it/s]
 54%|    | 43/79 [00:02<00:01, 22.90it/s]
 58%|    | 46/79 [00:02<00:01, 23.65it/s]
 62%|   | 49/79 [00:02<00:01, 24.36it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:58,  1.33it/s]
  4%|         | 3/79 [00:00<00:41,  1.84it/s]
  8%|         | 6/79 [00:00<00:28,  2.55it/s]
 11%|        | 9/79 [00:01<00:20,  3.49it/s]
 15%|        | 12/79 [00:01<00:14,  4.70it/s]
 19%|        | 15/79 [00:01<00:10,  6.20it/s]
 23%|       | 18/79 [00:01<00:07,  8.01it/s]
 27%|       | 21/79 [00:01<00:05, 10.07it/s]
 30%|       | 24/79 [00:01<00:04, 12.28it/s]
 34%|      | 27/79 [00:01<00:03, 14.54it/s]
 38%|      | 30/79 [00:01<00:02, 16.73it/s]
 42%|     | 33/79 [00:02<00:02, 18.78it/s]
 46%|     | 36/79 [00:02<00:02, 20.56it/s]
 49%|     | 39/79 [00:02<00:01, 21.66it/s]
 53%|    | 42/79 [00:02<00:01, 22.71it/s]
 57%|    | 45/79 [00:02<00:01, 23.46it/s]
 61%|    | 48/79 [00:02<00:01, 23.99it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:56,  1.38it/s]
  5%|         | 4/79 [00:00<00:38,  1.92it/s]
  9%|         | 7/79 [00:00<00:27,  2.66it/s]
 13%|        | 10/79 [00:01<00:19,  3.63it/s]
 16%|        | 13/79 [00:01<00:13,  4.88it/s]
 20%|        | 16/79 [00:01<00:09,  6.43it/s]
 24%|       | 19/79 [00:01<00:07,  8.27it/s]
 28%|       | 22/79 [00:01<00:05, 10.42it/s]
 32%|      | 25/79 [00:01<00:04, 12.54it/s]
 35%|      | 28/79 [00:01<00:03, 14.68it/s]
 39%|      | 31/79 [00:01<00:02, 16.76it/s]
 43%|     | 34/79 [00:02<00:02, 18.61it/s]
 47%|     | 37/79 [00:02<00:02, 20.11it/s]
 51%|     | 40/79 [00:02<00:01, 21.19it/s]
 54%|    | 43/79 [00:02<00:01, 22.01it/s]
 58%|    | 46/79 [00:02<00:01, 22.85it/s]
 62%|   | 49/79 [00:02<00:01, 23.07it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:58,  1.33it/s]
  5%|         | 4/79 [00:00<00:40,  1.85it/s]
  9%|         | 7/79 [00:01<00:28,  2.56it/s]
 13%|        | 10/79 [00:01<00:19,  3.51it/s]
 16%|        | 13/79 [00:01<00:13,  4.73it/s]
 20%|        | 16/79 [00:01<00:10,  6.26it/s]
 24%|       | 19/79 [00:01<00:07,  8.02it/s]
 28%|       | 22/79 [00:01<00:05, 10.10it/s]
 32%|      | 25/79 [00:01<00:04, 12.30it/s]
 35%|      | 28/79 [00:01<00:03, 14.56it/s]
 39%|      | 31/79 [00:01<00:02, 16.69it/s]
 43%|     | 34/79 [00:02<00:02, 18.45it/s]
 47%|     | 37/79 [00:02<00:02, 20.07it/s]
 51%|     | 40/79 [00:02<00:01, 21.41it/s]
 54%|    | 43/79 [00:02<00:01, 22.57it/s]
 58%|    | 46/79 [00:02<00:01, 23.18it/s]
 62%|   | 49/79 [00:02<00:01, 23.30it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:59,  1.31it/s]
  5%|         | 4/79 [00:00<00:41,  1.82it/s]
  9%|         | 7/79 [00:01<00:28,  2.52it/s]
 13%|        | 10/79 [00:01<00:19,  3.46it/s]
 16%|        | 13/79 [00:01<00:14,  4.67it/s]
 20%|        | 16/79 [00:01<00:10,  6.18it/s]
 24%|       | 19/79 [00:01<00:07,  8.01it/s]
 28%|       | 22/79 [00:01<00:05, 10.11it/s]
 32%|      | 25/79 [00:01<00:04, 12.34it/s]
 35%|      | 28/79 [00:01<00:03, 14.64it/s]
 39%|      | 31/79 [00:01<00:02, 16.86it/s]
 43%|     | 34/79 [00:02<00:02, 18.81it/s]
 47%|     | 37/79 [00:02<00:02, 20.58it/s]
 51%|     | 40/79 [00:02<00:01, 21.86it/s]
 54%|    | 43/79 [00:02<00:01, 22.86it/s]
 58%|    | 46/79 [00:02<00:01, 23.58it/s]
 62%|   | 49/79 [00:02<00:01, 24.18it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.27it/s]
  5%|         | 4/79 [00:00<00:42,  1.78it/s]
  9%|         | 7/79 [00:01<00:29,  2.47it/s]
 13%|        | 10/79 [00:01<00:20,  3.39it/s]
 16%|        | 13/79 [00:01<00:14,  4.59it/s]
 20%|        | 16/79 [00:01<00:10,  6.10it/s]
 24%|       | 19/79 [00:01<00:07,  7.91it/s]
 28%|       | 22/79 [00:01<00:05, 10.00it/s]
 32%|      | 25/79 [00:01<00:04, 12.23it/s]
 35%|      | 28/79 [00:01<00:03, 14.54it/s]
 39%|      | 31/79 [00:01<00:02, 16.78it/s]
 43%|     | 34/79 [00:02<00:02, 18.75it/s]
 47%|     | 37/79 [00:02<00:02, 20.32it/s]
 51%|     | 40/79 [00:02<00:01, 21.76it/s]
 54%|    | 43/79 [00:02<00:01, 22.75it/s]
 58%|    | 46/79 [00:02<00:01, 23.34it/s]
 62%|   | 49/79 [00:02<00:01, 23.97it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.88it/s]
 24%|       | 19/79 [00:01<00:07,  7.66it/s]
 28%|       | 22/79 [00:01<00:05,  9.70it/s]
 32%|      | 25/79 [00:01<00:04, 11.86it/s]
 35%|      | 28/79 [00:01<00:03, 14.19it/s]
 39%|      | 31/79 [00:01<00:02, 16.26it/s]
 43%|     | 34/79 [00:02<00:02, 18.32it/s]
 47%|     | 37/79 [00:02<00:02, 19.85it/s]
 51%|     | 40/79 [00:02<00:01, 21.29it/s]
 54%|    | 43/79 [00:02<00:01, 22.42it/s]
 58%|    | 46/79 [00:02<00:01, 23.45it/s]
 62%|   | 49/79 [00:02<00:01, 23.75it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.44it/s]
 20%|        | 16/79 [00:01<00:10,  5.91it/s]
 24%|       | 19/79 [00:01<00:07,  7.68it/s]
 28%|       | 22/79 [00:01<00:05,  9.72it/s]
 32%|      | 25/79 [00:01<00:04, 11.95it/s]
 35%|      | 28/79 [00:01<00:03, 14.30it/s]
 39%|      | 31/79 [00:01<00:02, 16.50it/s]
 43%|     | 34/79 [00:02<00:02, 18.46it/s]
 47%|     | 37/79 [00:02<00:02, 20.18it/s]
 51%|     | 40/79 [00:02<00:01, 21.62it/s]
 54%|    | 43/79 [00:02<00:01, 22.87it/s]
 58%|    | 46/79 [00:02<00:01, 23.61it/s]
 62%|   | 49/79 [00:02<00:01, 24.36it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.46it/s]
 28%|       | 22/79 [00:01<00:06,  9.49it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 14.02it/s]
 39%|      | 31/79 [00:02<00:02, 16.30it/s]
 43%|     | 34/79 [00:02<00:02, 18.26it/s]
 47%|     | 37/79 [00:02<00:02, 20.06it/s]
 51%|     | 40/79 [00:02<00:01, 21.38it/s]
 54%|    | 43/79 [00:02<00:01, 22.52it/s]
 58%|    | 46/79 [00:02<00:01, 23.25it/s]
 62%|   | 49/79 [00:02<00:01, 24.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  4%|         | 3/79 [00:00<00:44,  1.69it/s]
  8%|         | 6/79 [00:01<00:31,  2.35it/s]
 11%|        | 9/79 [00:01<00:21,  3.24it/s]
 15%|        | 12/79 [00:01<00:15,  4.39it/s]
 19%|        | 15/79 [00:01<00:10,  5.83it/s]
 23%|       | 18/79 [00:01<00:08,  7.57it/s]
 27%|       | 21/79 [00:01<00:06,  9.62it/s]
 30%|       | 24/79 [00:01<00:04, 11.74it/s]
 34%|      | 27/79 [00:01<00:03, 13.99it/s]
 38%|      | 30/79 [00:01<00:03, 16.14it/s]
 42%|     | 33/79 [00:02<00:02, 18.23it/s]
 46%|     | 36/79 [00:02<00:02, 19.86it/s]
 49%|     | 39/79 [00:02<00:01, 21.20it/s]
 53%|    | 42/79 [00:02<00:01, 22.34it/s]
 57%|    | 45/79 [00:02<00:01, 23.16it/s]
 61%|    | 48/79 [00:02<00:01, 23.79it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.76it/s]
  9%|         | 7/79 [00:01<00:29,  2.44it/s]
 13%|        | 10/79 [00:01<00:20,  3.34it/s]
 16%|        | 13/79 [00:01<00:14,  4.53it/s]
 20%|        | 16/79 [00:01<00:10,  6.00it/s]
 24%|       | 19/79 [00:01<00:07,  7.79it/s]
 28%|       | 22/79 [00:01<00:05,  9.86it/s]
 32%|      | 25/79 [00:01<00:04, 12.11it/s]
 35%|      | 28/79 [00:01<00:03, 14.41it/s]
 39%|      | 31/79 [00:01<00:02, 16.69it/s]
 43%|     | 34/79 [00:02<00:02, 18.68it/s]
 47%|     | 37/79 [00:02<00:02, 20.35it/s]
 51%|     | 40/79 [00:02<00:01, 21.82it/s]
 54%|    | 43/79 [00:02<00:01, 22.70it/s]
 58%|    | 46/79 [00:02<00:01, 23.59it/s]
 62%|   | 49/79 [00:02<00:01, 23.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.27it/s]
 16%|        | 13/79 [00:01<00:14,  4.42it/s]
 20%|        | 16/79 [00:01<00:10,  5.88it/s]
 24%|       | 19/79 [00:01<00:07,  7.66it/s]
 28%|       | 22/79 [00:01<00:05,  9.70it/s]
 32%|      | 25/79 [00:01<00:04, 11.94it/s]
 35%|      | 28/79 [00:01<00:03, 14.25it/s]
 39%|      | 31/79 [00:01<00:02, 16.47it/s]
 43%|     | 34/79 [00:02<00:02, 18.31it/s]
 47%|     | 37/79 [00:02<00:02, 20.17it/s]
 51%|     | 40/79 [00:02<00:01, 21.64it/s]
 54%|    | 43/79 [00:02<00:01, 22.80it/s]
 58%|    | 46/79 [00:02<00:01, 23.55it/s]
 62%|   | 49/79 [00:02<00:01, 24.24it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.30it/s]
  4%|         | 3/79 [00:00<00:42,  1.81it/s]
  8%|         | 6/79 [00:00<00:29,  2.50it/s]
 11%|        | 9/79 [00:01<00:20,  3.43it/s]
 15%|        | 12/79 [00:01<00:14,  4.62it/s]
 19%|        | 15/79 [00:01<00:10,  6.12it/s]
 23%|       | 18/79 [00:01<00:07,  7.91it/s]
 27%|       | 21/79 [00:01<00:05,  9.95it/s]
 30%|       | 24/79 [00:01<00:04, 12.17it/s]
 34%|      | 27/79 [00:01<00:03, 14.41it/s]
 38%|      | 30/79 [00:01<00:02, 16.65it/s]
 42%|     | 33/79 [00:02<00:02, 18.49it/s]
 46%|     | 36/79 [00:02<00:02, 19.96it/s]
 49%|     | 39/79 [00:02<00:01, 21.16it/s]
 53%|    | 42/79 [00:02<00:01, 22.32it/s]
 57%|    | 45/79 [00:02<00:01, 23.02it/s]
 61%|    | 48/79 [00:02<00:01, 23.56it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.77it/s]
 24%|       | 19/79 [00:01<00:07,  7.51it/s]
 28%|       | 22/79 [00:01<00:05,  9.60it/s]
 32%|      | 25/79 [00:01<00:04, 11.74it/s]
 35%|      | 28/79 [00:01<00:03, 14.01it/s]
 39%|      | 31/79 [00:02<00:02, 16.20it/s]
 43%|     | 34/79 [00:02<00:02, 18.32it/s]
 47%|     | 37/79 [00:02<00:02, 19.96it/s]
 51%|     | 40/79 [00:02<00:01, 21.30it/s]
 54%|    | 43/79 [00:02<00:01, 22.40it/s]
 58%|    | 46/79 [00:02<00:01, 22.94it/s]
 62%|   | 49/79 [00:02<00:01, 23.82it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:29,  2.41it/s]
 13%|        | 10/79 [00:01<00:20,  3.31it/s]
 16%|        | 13/79 [00:01<00:14,  4.48it/s]
 20%|        | 16/79 [00:01<00:10,  5.95it/s]
 24%|       | 19/79 [00:01<00:07,  7.71it/s]
 28%|       | 22/79 [00:01<00:05,  9.79it/s]
 32%|      | 25/79 [00:01<00:04, 11.97it/s]
 35%|      | 28/79 [00:01<00:03, 14.29it/s]
 39%|      | 31/79 [00:01<00:02, 16.43it/s]
 43%|     | 34/79 [00:02<00:02, 18.52it/s]
 47%|     | 37/79 [00:02<00:02, 20.06it/s]
 51%|     | 40/79 [00:02<00:01, 21.56it/s]
 54%|    | 43/79 [00:02<00:01, 22.62it/s]
 58%|    | 46/79 [00:02<00:01, 23.41it/s]
 62%|   | 49/79 [00:02<00:01, 24.15it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.42it/s]
 20%|        | 16/79 [00:01<00:10,  5.89it/s]
 24%|       | 19/79 [00:01<00:07,  7.63it/s]
 28%|       | 22/79 [00:01<00:05,  9.67it/s]
 32%|      | 25/79 [00:01<00:04, 11.86it/s]
 35%|      | 28/79 [00:01<00:03, 14.16it/s]
 39%|      | 31/79 [00:02<00:02, 16.41it/s]
 43%|     | 34/79 [00:02<00:02, 18.33it/s]
 47%|     | 37/79 [00:02<00:02, 19.90it/s]
 51%|     | 40/79 [00:02<00:01, 21.37it/s]
 54%|    | 43/79 [00:02<00:01, 22.75it/s]
 58%|    | 46/79 [00:02<00:01, 23.36it/s]
 62%|   | 49/79 [00:02<00:01, 23.94it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  4%|         | 3/79 [00:00<00:45,  1.67it/s]
  8%|         | 6/79 [00:01<00:31,  2.32it/s]
 11%|        | 9/79 [00:01<00:21,  3.19it/s]
 15%|        | 12/79 [00:01<00:15,  4.32it/s]
 19%|        | 15/79 [00:01<00:11,  5.75it/s]
 23%|       | 18/79 [00:01<00:08,  7.47it/s]
 27%|       | 21/79 [00:01<00:06,  9.49it/s]
 30%|       | 24/79 [00:01<00:04, 11.69it/s]
 34%|      | 27/79 [00:01<00:03, 13.97it/s]
 38%|      | 30/79 [00:02<00:03, 16.13it/s]
 42%|     | 33/79 [00:02<00:02, 18.00it/s]
 46%|     | 36/79 [00:02<00:02, 19.71it/s]
 49%|     | 39/79 [00:02<00:01, 21.20it/s]
 53%|    | 42/79 [00:02<00:01, 22.09it/s]
 57%|    | 45/79 [00:02<00:01, 22.98it/s]
 61%|    | 48/79 [00:02<00:01, 23.62it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  4%|         | 3/79 [00:00<00:44,  1.72it/s]
  8%|         | 6/79 [00:01<00:30,  2.37it/s]
 11%|        | 9/79 [00:01<00:21,  3.26it/s]
 15%|        | 12/79 [00:01<00:15,  4.41it/s]
 19%|        | 15/79 [00:01<00:10,  5.85it/s]
 23%|       | 18/79 [00:01<00:08,  7.61it/s]
 27%|       | 21/79 [00:01<00:06,  9.60it/s]
 30%|       | 24/79 [00:01<00:04, 11.76it/s]
 34%|      | 27/79 [00:01<00:03, 14.06it/s]
 38%|      | 30/79 [00:02<00:03, 16.21it/s]
 42%|     | 33/79 [00:02<00:02, 18.11it/s]
 46%|     | 36/79 [00:02<00:02, 19.75it/s]
 49%|     | 39/79 [00:02<00:01, 21.21it/s]
 53%|    | 42/79 [00:02<00:01, 22.35it/s]
 57%|    | 45/79 [00:02<00:01, 22.80it/s]
 61%|    | 48/79 [00:02<00:01, 23.57it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:15,  4.40it/s]
 20%|        | 16/79 [00:01<00:10,  5.83it/s]
 24%|       | 19/79 [00:01<00:07,  7.60it/s]
 28%|       | 22/79 [00:01<00:05,  9.57it/s]
 32%|      | 25/79 [00:01<00:04, 11.78it/s]
 35%|      | 28/79 [00:01<00:03, 14.04it/s]
 39%|      | 31/79 [00:02<00:02, 16.34it/s]
 43%|     | 34/79 [00:02<00:02, 18.31it/s]
 47%|     | 37/79 [00:02<00:02, 19.98it/s]
 51%|     | 40/79 [00:02<00:01, 21.19it/s]
 54%|    | 43/79 [00:02<00:01, 22.37it/s]
 58%|    | 46/79 [00:02<00:01, 22.98it/s]
 62%|   | 49/79 [00:02<00:01, 23.49it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.41it/s]
 32%|      | 25/79 [00:01<00:04, 11.51it/s]
 35%|      | 28/79 [00:01<00:03, 13.75it/s]
 39%|      | 31/79 [00:02<00:03, 15.98it/s]
 43%|     | 34/79 [00:02<00:02, 17.91it/s]
 47%|     | 37/79 [00:02<00:02, 19.73it/s]
 51%|     | 40/79 [00:02<00:01, 21.13it/s]
 54%|    | 43/79 [00:02<00:01, 22.44it/s]
 58%|    | 46/79 [00:02<00:01, 23.20it/s]
 62%|   | 49/79 [00:02<00:01, 23.82it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.42it/s]
 32%|      | 25/79 [00:01<00:04, 11.59it/s]
 35%|      | 28/79 [00:01<00:03, 13.88it/s]
 39%|      | 31/79 [00:02<00:03, 15.98it/s]
 43%|     | 34/79 [00:02<00:02, 18.01it/s]
 47%|     | 37/79 [00:02<00:02, 19.65it/s]
 51%|     | 40/79 [00:02<00:01, 20.79it/s]
 54%|    | 43/79 [00:02<00:01, 22.05it/s]
 58%|    | 46/79 [00:02<00:01, 22.52it/s]
 62%|   | 49/79 [00:02<00:01, 23.22it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.24it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.38it/s]
 35%|      | 28/79 [00:01<00:03, 13.65it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.80it/s]
 47%|     | 37/79 [00:02<00:02, 19.44it/s]
 51%|     | 40/79 [00:02<00:01, 20.76it/s]
 54%|    | 43/79 [00:02<00:01, 21.97it/s]
 58%|    | 46/79 [00:02<00:01, 22.70it/s]
 62%|   | 49/79 [00:02<00:01, 23.17it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.45it/s]
 32%|      | 25/79 [00:01<00:04, 11.64it/s]
 35%|      | 28/79 [00:01<00:03, 13.90it/s]
 39%|      | 31/79 [00:02<00:02, 16.13it/s]
 43%|     | 34/79 [00:02<00:02, 18.05it/s]
 47%|     | 37/79 [00:02<00:02, 19.76it/s]
 51%|     | 40/79 [00:02<00:01, 21.02it/s]
 54%|    | 43/79 [00:02<00:01, 22.16it/s]
 58%|    | 46/79 [00:02<00:01, 23.29it/s]
 62%|   | 49/79 [00:02<00:01, 23.89it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.44it/s]
 32%|      | 25/79 [00:01<00:04, 11.63it/s]
 35%|      | 28/79 [00:01<00:03, 13.94it/s]
 39%|      | 31/79 [00:02<00:02, 16.00it/s]
 43%|     | 34/79 [00:02<00:02, 17.64it/s]
 47%|     | 37/79 [00:02<00:02, 19.23it/s]
 51%|     | 40/79 [00:02<00:01, 20.65it/s]
 54%|    | 43/79 [00:02<00:01, 21.47it/s]
 58%|    | 46/79 [00:02<00:01, 22.37it/s]
 62%|   | 49/79 [00:02<00:01, 22.84it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.09it/s]
 20%|        | 16/79 [00:01<00:11,  5.46it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.10it/s]
 32%|      | 25/79 [00:01<00:04, 11.25it/s]
 35%|      | 28/79 [00:01<00:03, 13.48it/s]
 39%|      | 31/79 [00:02<00:03, 15.67it/s]
 43%|     | 34/79 [00:02<00:02, 17.64it/s]
 47%|     | 37/79 [00:02<00:02, 19.47it/s]
 51%|     | 40/79 [00:02<00:01, 20.61it/s]
 54%|    | 43/79 [00:02<00:01, 21.69it/s]
 58%|    | 46/79 [00:02<00:01, 22.64it/s]
 62%|   | 49/79 [00:02<00:01, 23.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.42it/s]
 28%|       | 22/79 [00:01<00:06,  9.39it/s]
 32%|      | 25/79 [00:01<00:04, 11.56it/s]
 35%|      | 28/79 [00:01<00:03, 13.87it/s]
 39%|      | 31/79 [00:02<00:02, 16.09it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.79it/s]
 51%|     | 40/79 [00:02<00:01, 21.12it/s]
 54%|    | 43/79 [00:02<00:01, 22.19it/s]
 58%|    | 46/79 [00:02<00:01, 22.64it/s]
 62%|   | 49/79 [00:02<00:01, 23.36it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.34it/s]
 28%|       | 22/79 [00:01<00:06,  9.28it/s]
 32%|      | 25/79 [00:01<00:04, 11.44it/s]
 35%|      | 28/79 [00:01<00:03, 13.64it/s]
 39%|      | 31/79 [00:02<00:03, 15.75it/s]
 43%|     | 34/79 [00:02<00:02, 17.72it/s]
 47%|     | 37/79 [00:02<00:02, 19.45it/s]
 51%|     | 40/79 [00:02<00:01, 20.81it/s]
 54%|    | 43/79 [00:02<00:01, 21.74it/s]
 58%|    | 46/79 [00:02<00:01, 22.68it/s]
 62%|   | 49/79 [00:02<00:01, 23.30it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.33it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.39it/s]
 35%|      | 28/79 [00:01<00:03, 13.65it/s]
 39%|      | 31/79 [00:02<00:03, 15.84it/s]
 43%|     | 34/79 [00:02<00:02, 17.66it/s]
 47%|     | 37/79 [00:02<00:02, 19.17it/s]
 51%|     | 40/79 [00:02<00:01, 20.61it/s]
 54%|    | 43/79 [00:02<00:01, 21.52it/s]
 58%|    | 46/79 [00:02<00:01, 22.33it/s]
 62%|   | 49/79 [00:02<00:01, 22.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.32it/s]
 24%|       | 19/79 [00:01<00:08,  6.95it/s]
 28%|       | 22/79 [00:01<00:06,  8.78it/s]
 32%|      | 25/79 [00:01<00:04, 10.89it/s]
 35%|      | 28/79 [00:02<00:03, 13.03it/s]
 39%|      | 31/79 [00:02<00:03, 15.17it/s]
 43%|     | 34/79 [00:02<00:02, 17.13it/s]
 47%|     | 37/79 [00:02<00:02, 18.84it/s]
 51%|     | 40/79 [00:02<00:01, 20.11it/s]
 54%|    | 43/79 [00:02<00:01, 21.07it/s]
 58%|    | 46/79 [00:02<00:01, 21.93it/s]
 62%|   | 49/79 [00:02<00:01, 22.59it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.90it/s]
 28%|       | 22/79 [00:01<00:06,  8.77it/s]
 32%|      | 25/79 [00:01<00:04, 10.92it/s]
 35%|      | 28/79 [00:02<00:03, 13.07it/s]
 39%|      | 31/79 [00:02<00:03, 15.27it/s]
 43%|     | 34/79 [00:02<00:02, 17.32it/s]
 47%|     | 37/79 [00:02<00:02, 18.97it/s]
 51%|     | 40/79 [00:02<00:01, 20.42it/s]
 54%|    | 43/79 [00:02<00:01, 21.66it/s]
 58%|    | 46/79 [00:02<00:01, 22.08it/s]
 62%|   | 49/79 [00:02<00:01, 22.72it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.09it/s]
 20%|        | 16/79 [00:01<00:11,  5.46it/s]
 24%|       | 19/79 [00:01<00:08,  7.13it/s]
 28%|       | 22/79 [00:01<00:06,  9.01it/s]
 32%|      | 25/79 [00:01<00:04, 11.10it/s]
 35%|      | 28/79 [00:02<00:03, 13.25it/s]
 39%|      | 31/79 [00:02<00:03, 15.33it/s]
 43%|     | 34/79 [00:02<00:02, 17.03it/s]
 47%|     | 37/79 [00:02<00:02, 18.64it/s]
 51%|     | 40/79 [00:02<00:01, 20.00it/s]
 54%|    | 43/79 [00:02<00:01, 21.04it/s]
 58%|    | 46/79 [00:02<00:01, 21.89it/s]
 62%|   | 49/79 [00:02<00:01, 22.46it/s]
 66%|   | 52/79 [00:03<00:01, 24.69it/s]
 70%|   | 55/79 [00:02<00:00, 24.75it/s]
 73%|  | 58/79 [00:03<00:00, 25.26it/s]
 77%|  | 61/79 [00:03<00:00, 25.17it/s]
 81%|  | 64/79 [00:03<00:00, 25.51it/s]
 85%| | 67/79 [00:03<00:00, 25.41it/s]
 89%| | 70/79 [00:03<00:00, 24.84it/s]
 92%|| 73/79 [00:03<00:00, 25.40it/s]
 96%|| 76/79 [00:03<00:00, 26.23it/s]
100%|| 79/79 [00:03<00:00, 27.05it/s]
, 24.64it/s]
 70%|   | 55/79 [00:02<00:00, 24.64it/s]
 73%|  | 58/79 [00:02<00:00, 25.04it/s]
 77%|  | 61/79 [00:03<00:00, 25.01it/s]
 81%|  | 64/79 [00:03<00:00, 25.05it/s]
 85%| | 67/79 [00:03<00:00, 25.06it/s]
 89%| | 70/79 [00:03<00:00, 25.31it/s]
 92%|| 73/79 [00:03<00:00, 25.59it/s]
 96%|| 76/79 [00:03<00:00, 26.41it/s]
100%|| 79/79 [00:03<00:00, 27.29it/s]
, 24.54it/s]
 70%|   | 55/79 [00:02<00:00, 25.18it/s]
 73%|  | 58/79 [00:03<00:00, 25.53it/s]
 77%|  | 61/79 [00:03<00:00, 25.34it/s]
 81%|  | 64/79 [00:03<00:00, 25.50it/s]
 85%| | 67/79 [00:03<00:00, 25.92it/s]
 89%| | 70/79 [00:03<00:00, 25.85it/s]
 92%|| 73/79 [00:03<00:00, 26.02it/s]
 97%|| 77/79 [00:03<00:00, 27.02it/s]
100%|| 79/79 [00:03<00:00, 20.16it/s]
, 24.55it/s]
 70%|   | 55/79 [00:02<00:00, 25.02it/s]
 73%|  | 58/79 [00:03<00:00, 25.21it/s]
 77%|  | 61/79 [00:03<00:00, 25.35it/s]
 81%|  | 64/79 [00:03<00:00, 25.48it/s]
 85%| | 67/79 [00:03<00:00, 25.54it/s]
 89%| | 70/79 [00:03<00:00, 25.56it/s]
 92%|| 73/79 [00:03<00:00, 25.84it/s]
 96%|| 76/79 [00:03<00:00, 26.52it/s]
100%|| 79/79 [00:03<00:00, 27.38it/s]
, 24.21it/s]
 70%|   | 55/79 [00:02<00:00, 24.79it/s]
 73%|  | 58/79 [00:03<00:00, 24.91it/s]
 77%|  | 61/79 [00:03<00:00, 25.23it/s]
 81%|  | 64/79 [00:03<00:00, 25.14it/s]
 85%| | 67/79 [00:03<00:00, 25.36it/s]
 89%| | 70/79 [00:03<00:00, 25.40it/s]
 92%|| 73/79 [00:03<00:00, 25.79it/s]
 96%|| 76/79 [00:03<00:00, 26.51it/s]
100%|| 79/79 [00:03<00:00, 27.42it/s]
, 23.49it/s]
 70%|   | 55/79 [00:02<00:01, 23.74it/s]
 73%|  | 58/79 [00:03<00:00, 24.07it/s]
 77%|  | 61/79 [00:03<00:00, 24.31it/s]
 81%|  | 64/79 [00:03<00:00, 24.47it/s]
 85%| | 67/79 [00:03<00:00, 24.67it/s]
 89%| | 70/79 [00:03<00:00, 24.12it/s]
 92%|| 73/79 [00:03<00:00, 24.90it/s]
 96%|| 76/79 [00:03<00:00, 25.85it/s]
100%|| 79/79 [00:03<00:00, 20.06it/s]
, 24.51it/s]
 70%|   | 55/79 [00:02<00:00, 24.64it/s]
 73%|  | 58/79 [00:03<00:00, 24.95it/s]
 77%|  | 61/79 [00:03<00:00, 25.13it/s]
 81%|  | 64/79 [00:03<00:00, 25.27it/s]
 85%| | 67/79 [00:03<00:00, 25.66it/s]
 89%| | 70/79 [00:03<00:00, 25.85it/s]
 92%|| 73/79 [00:03<00:00, 26.17it/s]
 96%|| 76/79 [00:03<00:00, 26.84it/s]
100%|| 79/79 [00:03<00:00, 27.70it/s]
, 24.49it/s]
 70%|   | 55/79 [00:02<00:00, 24.91it/s]
 73%|  | 58/79 [00:02<00:00, 25.12it/s]
 77%|  | 61/79 [00:03<00:00, 25.32it/s]
 81%|  | 64/79 [00:03<00:00, 25.41it/s]
 85%| | 67/79 [00:03<00:00, 25.47it/s]
 89%| | 70/79 [00:03<00:00, 25.05it/s]
 92%|| 73/79 [00:03<00:00, 25.50it/s]
 96%|| 76/79 [00:03<00:00, 26.03it/s]
100%|| 79/79 [00:03<00:00, 20.43it/s]
, 24.36it/s]
 70%|   | 55/79 [00:02<00:00, 24.77it/s]
 73%|  | 58/79 [00:03<00:00, 24.92it/s]
 77%|  | 61/79 [00:03<00:00, 25.23it/s]
 81%|  | 64/79 [00:03<00:00, 25.50it/s]
 85%| | 67/79 [00:03<00:00, 25.51it/s]
 89%| | 70/79 [00:03<00:00, 25.26it/s]
 92%|| 73/79 [00:03<00:00, 25.94it/s]
 96%|| 76/79 [00:03<00:00, 26.64it/s]
100%|| 79/79 [00:03<00:00, 27.53it/s]
, 24.93it/s]
 70%|   | 55/79 [00:02<00:00, 25.08it/s]
 73%|  | 58/79 [00:03<00:00, 25.27it/s]
 77%|  | 61/79 [00:03<00:00, 25.13it/s]
 81%|  | 64/79 [00:03<00:00, 25.35it/s]
 85%| | 67/79 [00:03<00:00, 25.41it/s]
 89%| | 70/79 [00:03<00:00, 25.50it/s]
 92%|| 73/79 [00:03<00:00, 25.64it/s]
 96%|| 76/79 [00:03<00:00, 26.41it/s]
100%|| 79/79 [00:03<00:00, 27.16it/s]
56it/s]
 68%|   | 54/79 [00:02<00:01, 24.83it/s]
 72%|  | 57/79 [00:02<00:00, 25.15it/s]
 76%|  | 60/79 [00:03<00:00, 25.08it/s]
 80%|  | 63/79 [00:03<00:00, 25.27it/s]
 84%| | 66/79 [00:03<00:00, 25.36it/s]
 87%| | 69/79 [00:03<00:00, 25.44it/s]
 91%| | 72/79 [00:03<00:00, 25.33it/s]
 95%|| 75/79 [00:03<00:00, 26.13it/s]
 99%|| 78/79 [00:03<00:00, 26.72it/s]
100%|| 79/79 [00:03<00:00, 20.17it/s]
, 24.50it/s]
 70%|   | 55/79 [00:02<00:00, 24.90it/s]
 73%|  | 58/79 [00:03<00:00, 25.52it/s]
 77%|  | 61/79 [00:03<00:00, 25.10it/s]
 81%|  | 64/79 [00:03<00:00, 25.05it/s]
 85%| | 67/79 [00:03<00:00, 25.18it/s]
 89%| | 70/79 [00:03<00:00, 25.43it/s]
 92%|| 73/79 [00:03<00:00, 25.71it/s]
 96%|| 76/79 [00:03<00:00, 26.30it/s]
100%|| 79/79 [00:03<00:00, 27.22it/s]
, 23.43it/s]
 70%|   | 55/79 [00:02<00:01, 23.47it/s]
 73%|  | 58/79 [00:03<00:00, 23.82it/s]
 77%|  | 61/79 [00:03<00:00, 23.71it/s]
 81%|  | 64/79 [00:03<00:00, 23.86it/s]
 85%| | 67/79 [00:03<00:00, 24.13it/s]
 89%| | 70/79 [00:03<00:00, 24.32it/s]
 92%|| 73/79 [00:03<00:00, 24.61it/s]
 96%|| 76/79 [00:03<00:00, 25.40it/s]
100%|| 79/79 [00:03<00:00, 26.35it/s]
, 24.41it/s]
 70%|   | 55/79 [00:02<00:00, 24.54it/s]
 73%|  | 58/79 [00:03<00:00, 24.59it/s]
 77%|  | 61/79 [00:03<00:00, 24.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.61it/s]
 85%| | 67/79 [00:03<00:00, 24.85it/s]
 89%| | 70/79 [00:03<00:00, 24.90it/s]
 92%|| 73/79 [00:03<00:00, 24.91it/s]
 96%|| 76/79 [00:03<00:00, 25.89it/s]
100%|| 79/79 [00:03<00:00, 26.85it/s]
, 24.30it/s]
 70%|   | 55/79 [00:03<00:00, 25.01it/s]
 73%|  | 58/79 [00:03<00:00, 25.09it/s]
 77%|  | 61/79 [00:03<00:00, 25.15it/s]
 81%|  | 64/79 [00:03<00:00, 25.30it/s]
 85%| | 67/79 [00:03<00:00, 25.79it/s]
 89%| | 70/79 [00:03<00:00, 25.49it/s]
 92%|| 73/79 [00:03<00:00, 25.96it/s]
 96%|| 76/79 [00:03<00:00, 26.62it/s]
100%|| 79/79 [00:03<00:00, 27.53it/s]
, 24.45it/s]
 70%|   | 55/79 [00:02<00:00, 24.86it/s]
 73%|  | 58/79 [00:03<00:00, 25.22it/s]
 77%|  | 61/79 [00:03<00:00, 25.24it/s]
 81%|  | 64/79 [00:03<00:00, 25.13it/s]
 85%| | 67/79 [00:03<00:00, 25.31it/s]
 89%| | 70/79 [00:03<00:00, 25.12it/s]
 92%|| 73/79 [00:03<00:00, 25.36it/s]
 96%|| 76/79 [00:03<00:00, 26.05it/s]
100%|| 79/79 [00:03<00:00, 26.87it/s]
, 23.83it/s]
 70%|   | 55/79 [00:02<00:00, 24.55it/s]
 73%|  | 58/79 [00:03<00:00, 24.41it/s]
 77%|  | 61/79 [00:03<00:00, 24.39it/s]
 81%|  | 64/79 [00:03<00:00, 24.46it/s]
 85%| | 67/79 [00:03<00:00, 24.87it/s]
 89%| | 70/79 [00:03<00:00, 24.88it/s]
 92%|| 73/79 [00:03<00:00, 25.29it/s]
 96%|| 76/79 [00:03<00:00, 26.04it/s]
100%|| 79/79 [00:03<00:00, 26.95it/s]
09it/s]
 68%|   | 54/79 [00:02<00:01, 24.41it/s]
 72%|  | 57/79 [00:03<00:00, 24.81it/s]
 76%|  | 60/79 [00:03<00:00, 25.04it/s]
 80%|  | 63/79 [00:03<00:00, 25.03it/s]
 84%| | 66/79 [00:03<00:00, 25.39it/s]
 87%| | 69/79 [00:03<00:00, 25.50it/s]
 91%| | 72/79 [00:03<00:00, 25.56it/s]
 95%|| 75/79 [00:03<00:00, 26.18it/s]
 99%|| 78/79 [00:03<00:00, 26.59it/s]
100%|| 79/79 [00:03<00:00, 19.85it/s]
16it/s]
 68%|   | 54/79 [00:02<00:01, 24.36it/s]
 72%|  | 57/79 [00:03<00:00, 24.71it/s]
 76%|  | 60/79 [00:03<00:00, 24.94it/s]
 80%|  | 63/79 [00:03<00:00, 24.63it/s]
 84%| | 66/79 [00:03<00:00, 24.59it/s]
 87%| | 69/79 [00:03<00:00, 24.61it/s]
 91%| | 72/79 [00:03<00:00, 25.07it/s]
 95%|| 75/79 [00:03<00:00, 25.90it/s]
 99%|| 78/79 [00:03<00:00, 26.56it/s]
100%|| 79/79 [00:04<00:00, 19.75it/s]
, 23.85it/s]
 70%|   | 55/79 [00:03<00:00, 24.33it/s]
 73%|  | 58/79 [00:03<00:00, 24.58it/s]
 77%|  | 61/79 [00:03<00:00, 24.81it/s]
 81%|  | 64/79 [00:03<00:00, 25.10it/s]
 85%| | 67/79 [00:03<00:00, 25.26it/s]
 89%| | 70/79 [00:03<00:00, 25.31it/s]
 92%|| 73/79 [00:03<00:00, 25.48it/s]
 96%|| 76/79 [00:03<00:00, 26.15it/s]
100%|| 79/79 [00:03<00:00, 26.74it/s]
06it/s]
 68%|   | 54/79 [00:02<00:01, 24.29it/s]
 72%|  | 57/79 [00:03<00:00, 24.46it/s]
 76%|  | 60/79 [00:03<00:00, 24.73it/s]
 80%|  | 63/79 [00:03<00:00, 24.80it/s]
 84%| | 66/79 [00:03<00:00, 24.81it/s]
 87%| | 69/79 [00:03<00:00, 25.12it/s]
 91%| | 72/79 [00:03<00:00, 25.04it/s]
 95%|| 75/79 [00:03<00:00, 26.11it/s]
 99%|| 78/79 [00:03<00:00, 26.37it/s]
100%|| 79/79 [00:03<00:00, 19.81it/s]
, 24.14it/s]
 70%|   | 55/79 [00:03<00:00, 24.47it/s]
 73%|  | 58/79 [00:03<00:00, 24.69it/s]
 77%|  | 61/79 [00:03<00:00, 24.66it/s]
 81%|  | 64/79 [00:03<00:00, 25.09it/s]
 85%| | 67/79 [00:03<00:00, 24.98it/s]
 89%| | 70/79 [00:03<00:00, 25.18it/s]
 92%|| 73/79 [00:03<00:00, 25.45it/s]
 96%|| 76/79 [00:03<00:00, 26.02it/s]
100%|| 79/79 [00:03<00:00, 26.87it/s]
90it/s]
 68%|   | 54/79 [00:02<00:01, 24.42it/s]
 72%|  | 57/79 [00:03<00:00, 24.68it/s]
 76%|  | 60/79 [00:03<00:00, 24.66it/s]
 80%|  | 63/79 [00:03<00:00, 24.76it/s]
 84%| | 66/79 [00:03<00:00, 24.60it/s]
 87%| | 69/79 [00:03<00:00, 24.76it/s]
 91%| | 72/79 [00:03<00:00, 24.78it/s]
 95%|| 75/79 [00:03<00:00, 25.71it/s]
 99%|| 78/79 [00:03<00:00, 26.47it/s]
100%|| 79/79 [00:03<00:00, 19.91it/s]
, 23.79it/s]
 70%|   | 55/79 [00:03<00:00, 24.36it/s]
 73%|  | 58/79 [00:03<00:00, 24.50it/s]
 77%|  | 61/79 [00:03<00:00, 24.64it/s]
 81%|  | 64/79 [00:03<00:00, 24.89it/s]
 85%| | 67/79 [00:03<00:00, 25.11it/s]
 89%| | 70/79 [00:03<00:00, 25.22it/s]
 92%|| 73/79 [00:03<00:00, 25.46it/s]
 96%|| 76/79 [00:03<00:00, 26.38it/s]
100%|| 79/79 [00:03<00:00, 27.34it/s]
, 23.75it/s]
 70%|   | 55/79 [00:03<00:00, 24.13it/s]
 73%|  | 58/79 [00:03<00:00, 24.15it/s]
 77%|  | 61/79 [00:03<00:00, 24.70it/s]
 81%|  | 64/79 [00:03<00:00, 24.76it/s]
 85%| | 67/79 [00:03<00:00, 24.81it/s]
 89%| | 70/79 [00:03<00:00, 24.41it/s]
 92%|| 73/79 [00:03<00:00, 25.10it/s]
 96%|| 76/79 [00:03<00:00, 25.95it/s]
100%|| 79/79 [00:03<00:00, 26.95it/s]
, 23.86it/s]
 70%|   | 55/79 [00:03<00:00, 24.31it/s]
 73%|  | 58/79 [00:03<00:00, 23.89it/s]
 77%|  | 61/79 [00:03<00:00, 24.13it/s]
 81%|  | 64/79 [00:03<00:00, 24.42it/s]
 85%| | 67/79 [00:03<00:00, 24.73it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 25.44it/s]
 96%|| 76/79 [00:03<00:00, 26.21it/s]
100%|| 79/79 [00:04<00:00, 19.74it/s]
, 23.25it/s]
 70%|   | 55/79 [00:03<00:01, 23.37it/s]
 73%|  | 58/79 [00:03<00:00, 23.92it/s]
 77%|  | 61/79 [00:03<00:00, 24.07it/s]
 81%|  | 64/79 [00:03<00:00, 24.39it/s]
 85%| | 67/79 [00:03<00:00, 24.59it/s]
 89%| | 70/79 [00:03<00:00, 24.59it/s]
 92%|| 73/79 [00:03<00:00, 24.99it/s]
 96%|| 76/79 [00:03<00:00, 25.75it/s]
100%|| 79/79 [00:03<00:00, 26.62it/s]
, 23.64it/s]
 70%|   | 55/79 [00:03<00:00, 24.02it/s]
 73%|  | 58/79 [00:03<00:00, 24.39it/s]
 77%|  | 61/79 [00:03<00:00, 24.65it/s]
 81%|  | 64/79 [00:03<00:00, 24.65it/s]
 85%| | 67/79 [00:03<00:00, 24.82it/s]
 89%| | 70/79 [00:03<00:00, 24.60it/s]
 92%|| 73/79 [00:03<00:00, 25.04it/s]
 96%|| 76/79 [00:03<00:00, 25.73it/s]
100%|| 79/79 [00:03<00:00, 26.46it/s]
, 23.45it/s]
 70%|   | 55/79 [00:03<00:01, 23.57it/s]
 73%|  | 58/79 [00:03<00:00, 23.66it/s]
 77%|  | 61/79 [00:03<00:00, 23.85it/s]
 81%|  | 64/79 [00:03<00:00, 24.05it/s]
 85%| | 67/79 [00:03<00:00, 24.32it/s]
 89%| | 70/79 [00:03<00:00, 24.44it/s]
 92%|| 73/79 [00:03<00:00, 25.12it/s]
 96%|| 76/79 [00:03<00:00, 25.75it/s]
100%|| 79/79 [00:04<00:00, 26.63it/s]
, 23.18it/s]
 70%|   | 55/79 [00:03<00:01, 23.59it/s]
 73%|  | 58/79 [00:03<00:00, 24.02it/s]
 77%|  | 61/79 [00:03<00:00, 24.22it/s]
 81%|  | 64/79 [00:03<00:00, 24.37it/s]
 85%| | 67/79 [00:03<00:00, 24.79it/s]
 89%| | 70/79 [00:03<00:00, 24.62it/s]
 92%|| 73/79 [00:03<00:00, 24.84it/s]
 96%|| 76/79 [00:03<00:00, 25.65it/s]
100%|| 79/79 [00:04<00:00, 26.64it/s]
, 23.07it/s]
 70%|   | 55/79 [00:03<00:01, 23.51it/s]
 73%|  | 58/79 [00:03<00:00, 23.84it/s]
 77%|  | 61/79 [00:03<00:00, 24.20it/s]
 81%|  | 64/79 [00:03<00:00, 24.44it/s]
 85%| | 67/79 [00:03<00:00, 24.62it/s]
 89%| | 70/79 [00:03<00:00, 24.41it/s]
 92%|| 73/79 [00:03<00:00, 24.86it/s]
 96%|| 76/79 [00:03<00:00, 25.53it/s]
100%|| 79/79 [00:04<00:00, 26.27it/s]
, 22.99it/s]
 70%|   | 55/79 [00:03<00:01, 23.44it/s]
 73%|  | 58/79 [00:03<00:00, 23.65it/s]
 77%|  | 61/79 [00:03<00:00, 23.90it/s]
 81%|  | 64/79 [00:03<00:00, 24.10it/s]
 85%| | 67/79 [00:03<00:00, 24.39it/s]
 89%| | 70/79 [00:03<00:00, 24.36it/s]
 92%|| 73/79 [00:03<00:00, 24.61it/s]
 96%|| 76/79 [00:03<00:00, 25.39it/s]
100%|| 79/79 [00:04<00:00, 26.25it/s]
2020-06-23 17:15:20,111 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.159216 (0.026618983459472657 s / img per device, on 32 devices)
2020-06-23 17:15:20,129 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:15:20,129 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:15:20,148 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592957726663, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 15, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592957726664, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 15}}
2020-06-23 17:15:26,887 maskrcnn_benchmark.trainer INFO: eta: 0:56:12  iter: 12840  loss: 0.4735 (0.7039)  loss_classifier: 0.1465 (0.2523)  loss_box_reg: 0.0730 (0.1141)  loss_mask: 0.2199 (0.2844)  loss_objectness: 0.0099 (0.0336)  loss_rpn_box_reg: 0.0067 (0.0194)  time: 0.1082 (0.1242)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5148
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:15:29,072 maskrcnn_benchmark.trainer INFO: eta: 0:56:09  iter: 12860  loss: 0.5409 (0.7036)  loss_classifier: 0.1755 (0.2522)  loss_box_reg: 0.0779 (0.1141)  loss_mask: 0.2398 (0.2843)  loss_objectness: 0.0149 (0.0336)  loss_rpn_box_reg: 0.0073 (0.0194)  time: 0.1084 (0.1242)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5148
2020-06-23 17:15:31,257 maskrcnn_benchmark.trainer INFO: eta: 0:56:06  iter: 12880  loss: 0.4952 (0.7034)  loss_classifier: 0.1545 (0.2521)  loss_box_reg: 0.0786 (0.1141)  loss_mask: 0.2365 (0.2843)  loss_objectness: 0.0178 (0.0336)  loss_rpn_box_reg: 0.0114 (0.0194)  time: 0.1086 (0.1241)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.55s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 17:15:33,452 maskrcnn_benchmark.trainer INFO: eta: 0:56:03  iter: 12900  loss: 0.5661 (0.7032)  loss_classifier: 0.1835 (0.2520)  loss_box_reg: 0.0821 (0.1140)  loss_mask: 0.2454 (0.2842)  loss_objectness: 0.0222 (0.0336)  loss_rpn_box_reg: 0.0096 (0.0194)  time: 0.1091 (0.1241)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5148
DONE (t=1.43s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37669
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.59466
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.40645
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21242
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.40808
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48580
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.31020
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.48975
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51381
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.31789
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.55222
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.64939
2020-06-23 17:15:35,633 maskrcnn_benchmark.trainer INFO: eta: 0:56:00  iter: 12920  loss: 0.5923 (0.7030)  loss_classifier: 0.1978 (0.2519)  loss_box_reg: 0.0955 (0.1140)  loss_mask: 0.2339 (0.2842)  loss_objectness: 0.0170 (0.0335)  loss_rpn_box_reg: 0.0110 (0.0194)  time: 0.1080 (0.1241)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5148
2020-06-23 17:15:37,824 maskrcnn_benchmark.trainer INFO: eta: 0:55:57  iter: 12940  loss: 0.5073 (0.7028)  loss_classifier: 0.1665 (0.2518)  loss_box_reg: 0.0869 (0.1140)  loss_mask: 0.2392 (0.2841)  loss_objectness: 0.0117 (0.0335)  loss_rpn_box_reg: 0.0092 (0.0194)  time: 0.1093 (0.1241)  data: 0.0013 (0.0169)  lr: 0.001600  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
DONE (t=1.37s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:15:39,997 maskrcnn_benchmark.trainer INFO: eta: 0:55:54  iter: 12960  loss: 0.5286 (0.7025)  loss_classifier: 0.1474 (0.2517)  loss_box_reg: 0.0805 (0.1139)  loss_mask: 0.2328 (0.2840)  loss_objectness: 0.0113 (0.0335)  loss_rpn_box_reg: 0.0084 (0.0194)  time: 0.1087 (0.1240)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5148
DONE (t=2.25s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.34286
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.55897
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.36373
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15230
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37186
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.50545
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29144
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.44899
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.46933
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.26470
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51200
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62246
2020-06-23 17:15:42,179 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.37669441886862154, segm mAP: 0.3428644067277883
:::MLLOG {"namespace": "", "time_ms": 1592957742180, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.37669441886862154, "SEGM": 0.3428644067277883}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 14}}
:::MLLOG {"namespace": "", "time_ms": 1592957742180, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 14}}
2020-06-23 17:15:42,288 maskrcnn_benchmark.trainer INFO: eta: 0:55:51  iter: 12980  loss: 0.4157 (0.7021)  loss_classifier: 0.1356 (0.2515)  loss_box_reg: 0.0611 (0.1139)  loss_mask: 0.2342 (0.2839)  loss_objectness: 0.0070 (0.0335)  loss_rpn_box_reg: 0.0063 (0.0194)  time: 0.1084 (0.1240)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5148
2020-06-23 17:15:44,478 maskrcnn_benchmark.trainer INFO: eta: 0:55:48  iter: 13000  loss: 0.5329 (0.7019)  loss_classifier: 0.1699 (0.2514)  loss_box_reg: 0.0858 (0.1138)  loss_mask: 0.2200 (0.2839)  loss_objectness: 0.0176 (0.0334)  loss_rpn_box_reg: 0.0076 (0.0194)  time: 0.1094 (0.1240)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5148
2020-06-23 17:15:46,659 maskrcnn_benchmark.trainer INFO: eta: 0:55:45  iter: 13020  loss: 0.4931 (0.7016)  loss_classifier: 0.1598 (0.2512)  loss_box_reg: 0.0724 (0.1138)  loss_mask: 0.2468 (0.2838)  loss_objectness: 0.0104 (0.0334)  loss_rpn_box_reg: 0.0099 (0.0194)  time: 0.1086 (0.1240)  data: 0.0013 (0.0168)  lr: 0.001600  max mem: 5148
2020-06-23 17:15:48,820 maskrcnn_benchmark.trainer INFO: eta: 0:55:41  iter: 13040  loss: 0.5575 (0.7014)  loss_classifier: 0.1577 (0.2511)  loss_box_reg: 0.0895 (0.1137)  loss_mask: 0.2445 (0.2838)  loss_objectness: 0.0167 (0.0334)  loss_rpn_box_reg: 0.0086 (0.0194)  time: 0.1077 (0.1240)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5148
2020-06-23 17:15:51,007 maskrcnn_benchmark.trainer INFO: eta: 0:55:38  iter: 13060  loss: 0.4965 (0.7011)  loss_classifier: 0.1630 (0.2510)  loss_box_reg: 0.0782 (0.1137)  loss_mask: 0.2306 (0.2837)  loss_objectness: 0.0120 (0.0334)  loss_rpn_box_reg: 0.0100 (0.0194)  time: 0.1090 (0.1239)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5148
2020-06-23 17:15:53,185 maskrcnn_benchmark.trainer INFO: eta: 0:55:35  iter: 13080  loss: 0.5290 (0.7009)  loss_classifier: 0.1549 (0.2509)  loss_box_reg: 0.0857 (0.1137)  loss_mask: 0.2534 (0.2836)  loss_objectness: 0.0106 (0.0334)  loss_rpn_box_reg: 0.0065 (0.0193)  time: 0.1087 (0.1239)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5148
2020-06-23 17:15:55,350 maskrcnn_benchmark.trainer INFO: eta: 0:55:32  iter: 13100  loss: 0.5448 (0.7006)  loss_classifier: 0.1634 (0.2508)  loss_box_reg: 0.0940 (0.1136)  loss_mask: 0.2301 (0.2836)  loss_objectness: 0.0093 (0.0333)  loss_rpn_box_reg: 0.0077 (0.0193)  time: 0.1082 (0.1239)  data: 0.0014 (0.0167)  lr: 0.001600  max mem: 5148
2020-06-23 17:15:57,532 maskrcnn_benchmark.trainer INFO: eta: 0:55:29  iter: 13120  loss: 0.4132 (0.7002)  loss_classifier: 0.1326 (0.2506)  loss_box_reg: 0.0569 (0.1136)  loss_mask: 0.1945 (0.2834)  loss_objectness: 0.0103 (0.0333)  loss_rpn_box_reg: 0.0068 (0.0193)  time: 0.1089 (0.1239)  data: 0.0014 (0.0167)  lr: 0.001600  max mem: 5148
2020-06-23 17:15:59,698 maskrcnn_benchmark.trainer INFO: eta: 0:55:26  iter: 13140  loss: 0.4636 (0.7000)  loss_classifier: 0.1638 (0.2505)  loss_box_reg: 0.0853 (0.1135)  loss_mask: 0.2368 (0.2834)  loss_objectness: 0.0144 (0.0333)  loss_rpn_box_reg: 0.0072 (0.0193)  time: 0.1083 (0.1238)  data: 0.0013 (0.0167)  lr: 0.001600  max mem: 5148

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0


Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0


Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0
Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0
Grad overflow on iteration  13158

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0

Grad overflow on iteration  13158
Using dynamic loss scale of  131072.0
2020-06-23 17:16:01,891 maskrcnn_benchmark.trainer INFO: eta: 0:55:23  iter: 13160  loss: 0.5028 (0.6998)  loss_classifier: 0.1575 (0.2504)  loss_box_reg: 0.1012 (0.1135)  loss_mask: 0.2432 (0.2833)  loss_objectness: 0.0142 (0.0333)  loss_rpn_box_reg: 0.0091 (0.0193)  time: 0.1093 (0.1238)  data: 0.0014 (0.0167)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:04,072 maskrcnn_benchmark.trainer INFO: eta: 0:55:20  iter: 13180  loss: 0.6064 (0.6996)  loss_classifier: 0.1954 (0.2503)  loss_box_reg: 0.1203 (0.1135)  loss_mask: 0.2501 (0.2833)  loss_objectness: 0.0103 (0.0332)  loss_rpn_box_reg: 0.0074 (0.0193)  time: 0.1088 (0.1238)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:06,256 maskrcnn_benchmark.trainer INFO: eta: 0:55:17  iter: 13200  loss: 0.5057 (0.6994)  loss_classifier: 0.1547 (0.2502)  loss_box_reg: 0.0925 (0.1135)  loss_mask: 0.2342 (0.2832)  loss_objectness: 0.0151 (0.0332)  loss_rpn_box_reg: 0.0086 (0.0193)  time: 0.1084 (0.1238)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:08,440 maskrcnn_benchmark.trainer INFO: eta: 0:55:14  iter: 13220  loss: 0.5911 (0.6992)  loss_classifier: 0.1737 (0.2501)  loss_box_reg: 0.0856 (0.1134)  loss_mask: 0.2412 (0.2831)  loss_objectness: 0.0100 (0.0332)  loss_rpn_box_reg: 0.0098 (0.0193)  time: 0.1095 (0.1238)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:10,630 maskrcnn_benchmark.trainer INFO: eta: 0:55:11  iter: 13240  loss: 0.5002 (0.6989)  loss_classifier: 0.1481 (0.2500)  loss_box_reg: 0.0793 (0.1134)  loss_mask: 0.2274 (0.2831)  loss_objectness: 0.0141 (0.0332)  loss_rpn_box_reg: 0.0067 (0.0193)  time: 0.1096 (0.1237)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:12,815 maskrcnn_benchmark.trainer INFO: eta: 0:55:08  iter: 13260  loss: 0.4686 (0.6986)  loss_classifier: 0.1498 (0.2498)  loss_box_reg: 0.0677 (0.1133)  loss_mask: 0.2363 (0.2830)  loss_objectness: 0.0129 (0.0332)  loss_rpn_box_reg: 0.0061 (0.0193)  time: 0.1085 (0.1237)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:15,004 maskrcnn_benchmark.trainer INFO: eta: 0:55:05  iter: 13280  loss: 0.4945 (0.6983)  loss_classifier: 0.1536 (0.2497)  loss_box_reg: 0.0765 (0.1133)  loss_mask: 0.2298 (0.2829)  loss_objectness: 0.0119 (0.0331)  loss_rpn_box_reg: 0.0067 (0.0193)  time: 0.1091 (0.1237)  data: 0.0014 (0.0165)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:17,178 maskrcnn_benchmark.trainer INFO: eta: 0:55:01  iter: 13300  loss: 0.5079 (0.6981)  loss_classifier: 0.1580 (0.2496)  loss_box_reg: 0.0824 (0.1133)  loss_mask: 0.2398 (0.2829)  loss_objectness: 0.0120 (0.0331)  loss_rpn_box_reg: 0.0043 (0.0192)  time: 0.1084 (0.1237)  data: 0.0014 (0.0165)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:19,360 maskrcnn_benchmark.trainer INFO: eta: 0:54:58  iter: 13320  loss: 0.5468 (0.6978)  loss_classifier: 0.1961 (0.2495)  loss_box_reg: 0.0860 (0.1132)  loss_mask: 0.2307 (0.2828)  loss_objectness: 0.0087 (0.0331)  loss_rpn_box_reg: 0.0062 (0.0192)  time: 0.1089 (0.1236)  data: 0.0014 (0.0165)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:21,535 maskrcnn_benchmark.trainer INFO: eta: 0:54:55  iter: 13340  loss: 0.4516 (0.6974)  loss_classifier: 0.1448 (0.2493)  loss_box_reg: 0.0701 (0.1131)  loss_mask: 0.2184 (0.2827)  loss_objectness: 0.0056 (0.0331)  loss_rpn_box_reg: 0.0048 (0.0192)  time: 0.1080 (0.1236)  data: 0.0014 (0.0165)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:23,706 maskrcnn_benchmark.trainer INFO: eta: 0:54:52  iter: 13360  loss: 0.5567 (0.6972)  loss_classifier: 0.1735 (0.2492)  loss_box_reg: 0.0972 (0.1131)  loss_mask: 0.2409 (0.2826)  loss_objectness: 0.0135 (0.0330)  loss_rpn_box_reg: 0.0074 (0.0192)  time: 0.1086 (0.1236)  data: 0.0015 (0.0164)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:25,890 maskrcnn_benchmark.trainer INFO: eta: 0:54:49  iter: 13380  loss: 0.5755 (0.6970)  loss_classifier: 0.1689 (0.2491)  loss_box_reg: 0.0900 (0.1131)  loss_mask: 0.2365 (0.2826)  loss_objectness: 0.0182 (0.0330)  loss_rpn_box_reg: 0.0068 (0.0192)  time: 0.1096 (0.1236)  data: 0.0014 (0.0164)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:28,064 maskrcnn_benchmark.trainer INFO: eta: 0:54:46  iter: 13400  loss: 0.5656 (0.6969)  loss_classifier: 0.1944 (0.2490)  loss_box_reg: 0.1000 (0.1131)  loss_mask: 0.2552 (0.2825)  loss_objectness: 0.0134 (0.0330)  loss_rpn_box_reg: 0.0070 (0.0192)  time: 0.1086 (0.1236)  data: 0.0015 (0.0164)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:30,248 maskrcnn_benchmark.trainer INFO: eta: 0:54:43  iter: 13420  loss: 0.5489 (0.6967)  loss_classifier: 0.1765 (0.2489)  loss_box_reg: 0.0822 (0.1130)  loss_mask: 0.2458 (0.2825)  loss_objectness: 0.0135 (0.0330)  loss_rpn_box_reg: 0.0085 (0.0192)  time: 0.1084 (0.1235)  data: 0.0014 (0.0164)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:32,428 maskrcnn_benchmark.trainer INFO: eta: 0:54:40  iter: 13440  loss: 0.4352 (0.6963)  loss_classifier: 0.1383 (0.2488)  loss_box_reg: 0.0765 (0.1130)  loss_mask: 0.2213 (0.2824)  loss_objectness: 0.0067 (0.0330)  loss_rpn_box_reg: 0.0043 (0.0192)  time: 0.1086 (0.1235)  data: 0.0013 (0.0164)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:34,604 maskrcnn_benchmark.trainer INFO: eta: 0:54:37  iter: 13460  loss: 0.5561 (0.6962)  loss_classifier: 0.1819 (0.2487)  loss_box_reg: 0.0973 (0.1130)  loss_mask: 0.2518 (0.2823)  loss_objectness: 0.0131 (0.0329)  loss_rpn_box_reg: 0.0091 (0.0192)  time: 0.1084 (0.1235)  data: 0.0014 (0.0163)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:36,792 maskrcnn_benchmark.trainer INFO: eta: 0:54:34  iter: 13480  loss: 0.5084 (0.6960)  loss_classifier: 0.1843 (0.2486)  loss_box_reg: 0.0990 (0.1130)  loss_mask: 0.2304 (0.2823)  loss_objectness: 0.0086 (0.0329)  loss_rpn_box_reg: 0.0060 (0.0192)  time: 0.1098 (0.1235)  data: 0.0014 (0.0163)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:38,979 maskrcnn_benchmark.trainer INFO: eta: 0:54:31  iter: 13500  loss: 0.5504 (0.6958)  loss_classifier: 0.1792 (0.2486)  loss_box_reg: 0.1024 (0.1129)  loss_mask: 0.2609 (0.2822)  loss_objectness: 0.0115 (0.0329)  loss_rpn_box_reg: 0.0089 (0.0192)  time: 0.1088 (0.1235)  data: 0.0013 (0.0163)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:41,149 maskrcnn_benchmark.trainer INFO: eta: 0:54:28  iter: 13520  loss: 0.5289 (0.6956)  loss_classifier: 0.1637 (0.2485)  loss_box_reg: 0.0837 (0.1129)  loss_mask: 0.2364 (0.2822)  loss_objectness: 0.0103 (0.0329)  loss_rpn_box_reg: 0.0067 (0.0192)  time: 0.1082 (0.1234)  data: 0.0014 (0.0163)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:43,348 maskrcnn_benchmark.trainer INFO: eta: 0:54:25  iter: 13540  loss: 0.4588 (0.6953)  loss_classifier: 0.1855 (0.2483)  loss_box_reg: 0.0774 (0.1129)  loss_mask: 0.2176 (0.2821)  loss_objectness: 0.0110 (0.0329)  loss_rpn_box_reg: 0.0039 (0.0192)  time: 0.1098 (0.1234)  data: 0.0014 (0.0162)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:45,525 maskrcnn_benchmark.trainer INFO: eta: 0:54:22  iter: 13560  loss: 0.4847 (0.6951)  loss_classifier: 0.1587 (0.2482)  loss_box_reg: 0.0803 (0.1128)  loss_mask: 0.2312 (0.2820)  loss_objectness: 0.0110 (0.0329)  loss_rpn_box_reg: 0.0084 (0.0192)  time: 0.1089 (0.1234)  data: 0.0014 (0.0162)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:47,689 maskrcnn_benchmark.trainer INFO: eta: 0:54:19  iter: 13580  loss: 0.5083 (0.6948)  loss_classifier: 0.1437 (0.2481)  loss_box_reg: 0.0765 (0.1128)  loss_mask: 0.2347 (0.2819)  loss_objectness: 0.0108 (0.0328)  loss_rpn_box_reg: 0.0067 (0.0191)  time: 0.1075 (0.1234)  data: 0.0014 (0.0162)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:49,852 maskrcnn_benchmark.trainer INFO: eta: 0:54:16  iter: 13600  loss: 0.5361 (0.6947)  loss_classifier: 0.1813 (0.2480)  loss_box_reg: 0.0845 (0.1128)  loss_mask: 0.2553 (0.2819)  loss_objectness: 0.0100 (0.0328)  loss_rpn_box_reg: 0.0046 (0.0191)  time: 0.1082 (0.1233)  data: 0.0014 (0.0162)  lr: 0.001600  max mem: 5148

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0


Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0
Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0

Grad overflow on iteration  13616
Using dynamic loss scale of  65536.0
2020-06-23 17:16:52,016 maskrcnn_benchmark.trainer INFO: eta: 0:54:13  iter: 13620  loss: 0.5174 (0.6944)  loss_classifier: 0.1630 (0.2479)  loss_box_reg: 0.0811 (0.1128)  loss_mask: 0.2252 (0.2818)  loss_objectness: 0.0094 (0.0328)  loss_rpn_box_reg: 0.0055 (0.0191)  time: 0.1080 (0.1233)  data: 0.0014 (0.0162)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:54,177 maskrcnn_benchmark.trainer INFO: eta: 0:54:10  iter: 13640  loss: 0.5625 (0.6942)  loss_classifier: 0.1581 (0.2478)  loss_box_reg: 0.0801 (0.1127)  loss_mask: 0.2450 (0.2818)  loss_objectness: 0.0172 (0.0328)  loss_rpn_box_reg: 0.0099 (0.0191)  time: 0.1077 (0.1233)  data: 0.0013 (0.0161)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:56,358 maskrcnn_benchmark.trainer INFO: eta: 0:54:07  iter: 13660  loss: 0.5081 (0.6940)  loss_classifier: 0.1546 (0.2477)  loss_box_reg: 0.0821 (0.1127)  loss_mask: 0.2391 (0.2817)  loss_objectness: 0.0111 (0.0328)  loss_rpn_box_reg: 0.0051 (0.0191)  time: 0.1090 (0.1233)  data: 0.0014 (0.0161)  lr: 0.001600  max mem: 5148
2020-06-23 17:16:58,528 maskrcnn_benchmark.trainer INFO: eta: 0:54:04  iter: 13680  loss: 0.5202 (0.6938)  loss_classifier: 0.1768 (0.2476)  loss_box_reg: 0.0794 (0.1127)  loss_mask: 0.2333 (0.2817)  loss_objectness: 0.0148 (0.0327)  loss_rpn_box_reg: 0.0113 (0.0191)  time: 0.1076 (0.1233)  data: 0.0014 (0.0161)  lr: 0.001600  max mem: 5148
2020-06-23 17:17:00,710 maskrcnn_benchmark.trainer INFO: eta: 0:54:01  iter: 13700  loss: 0.5401 (0.6937)  loss_classifier: 0.1551 (0.2475)  loss_box_reg: 0.0957 (0.1126)  loss_mask: 0.2492 (0.2817)  loss_objectness: 0.0204 (0.0327)  loss_rpn_box_reg: 0.0080 (0.0192)  time: 0.1085 (0.1232)  data: 0.0015 (0.0161)  lr: 0.001600  max mem: 5148
2020-06-23 17:17:02,894 maskrcnn_benchmark.trainer INFO: eta: 0:53:58  iter: 13720  loss: 0.5260 (0.6935)  loss_classifier: 0.1665 (0.2474)  loss_box_reg: 0.0824 (0.1126)  loss_mask: 0.2385 (0.2816)  loss_objectness: 0.0090 (0.0327)  loss_rpn_box_reg: 0.0108 (0.0191)  time: 0.1089 (0.1232)  data: 0.0014 (0.0160)  lr: 0.001600  max mem: 5148
2020-06-23 17:17:05,071 maskrcnn_benchmark.trainer INFO: eta: 0:53:55  iter: 13740  loss: 0.5341 (0.6933)  loss_classifier: 0.1410 (0.2473)  loss_box_reg: 0.0702 (0.1126)  loss_mask: 0.2175 (0.2815)  loss_objectness: 0.0131 (0.0327)  loss_rpn_box_reg: 0.0069 (0.0191)  time: 0.1084 (0.1232)  data: 0.0014 (0.0160)  lr: 0.001600  max mem: 5148
:::MLLOG {"namespace": "", "time_ms": 1592957826700, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 15}}
:::MLLOG {"namespace": "", "time_ms": 1592957826701, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 15}}
:::MLLOG {"namespace": "", "time_ms": 1592957826701, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 15}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 17:17:06,918 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
Done (t=0.27s)
creating index...
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
Done (t=0.28s)
creating index...
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
2020-06-23 17:17:07,228 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:56,  1.38it/s]
  4%|         | 3/79 [00:00<00:39,  1.91it/s]
  8%|         | 6/79 [00:00<00:27,  2.63it/s]
 11%|        | 9/79 [00:01<00:19,  3.60it/s]
 15%|        | 12/79 [00:01<00:13,  4.84it/s]
 19%|        | 15/79 [00:01<00:10,  6.39it/s]
 23%|       | 18/79 [00:01<00:07,  8.25it/s]
 27%|       | 21/79 [00:01<00:05, 10.35it/s]
 30%|       | 24/79 [00:01<00:04, 12.58it/s]
 34%|      | 27/79 [00:01<00:03, 14.85it/s]
 38%|      | 30/79 [00:01<00:02, 16.94it/s]
 42%|     | 33/79 [00:02<00:02, 18.99it/s]
 46%|     | 36/79 [00:02<00:02, 20.66it/s]
 49%|     | 39/79 [00:02<00:01, 21.56it/s]
 53%|    | 42/79 [00:02<00:01, 22.58it/s]
 57%|    | 45/79 [00:02<00:01, 23.46it/s]
 61%|    | 48/79 [00:02<00:01, 23.99it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.27it/s]
  5%|         | 4/79 [00:00<00:42,  1.78it/s]
  9%|         | 7/79 [00:01<00:29,  2.47it/s]
 13%|        | 10/79 [00:01<00:20,  3.39it/s]
 16%|        | 13/79 [00:01<00:14,  4.59it/s]
 20%|        | 16/79 [00:01<00:10,  6.08it/s]
 24%|       | 19/79 [00:01<00:07,  7.89it/s]
 28%|       | 22/79 [00:01<00:05,  9.96it/s]
 32%|      | 25/79 [00:01<00:04, 12.23it/s]
 35%|      | 28/79 [00:01<00:03, 14.32it/s]
 39%|      | 31/79 [00:01<00:02, 16.51it/s]
 43%|     | 34/79 [00:02<00:02, 18.44it/s]
 47%|     | 37/79 [00:02<00:02, 20.21it/s]
 51%|     | 40/79 [00:02<00:01, 21.65it/s]
 54%|    | 43/79 [00:02<00:01, 22.95it/s]
 58%|    | 46/79 [00:02<00:01, 23.59it/s]
 62%|   | 49/79 [00:02<00:01, 24.27it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.27it/s]
  5%|         | 4/79 [00:00<00:42,  1.77it/s]
  9%|         | 7/79 [00:01<00:29,  2.45it/s]
 13%|        | 10/79 [00:01<00:20,  3.37it/s]
 16%|        | 13/79 [00:01<00:14,  4.56it/s]
 20%|        | 16/79 [00:01<00:10,  6.06it/s]
 24%|       | 19/79 [00:01<00:07,  7.88it/s]
 28%|       | 22/79 [00:01<00:05,  9.96it/s]
 32%|      | 25/79 [00:01<00:04, 12.19it/s]
 35%|      | 28/79 [00:01<00:03, 14.51it/s]
 39%|      | 31/79 [00:01<00:02, 16.74it/s]
 43%|     | 34/79 [00:02<00:02, 18.78it/s]
 47%|     | 37/79 [00:02<00:02, 20.37it/s]
 51%|     | 40/79 [00:02<00:01, 21.75it/s]
 54%|    | 43/79 [00:02<00:01, 22.81it/s]
 58%|    | 46/79 [00:02<00:01, 23.54it/s]
 62%|   | 49/79 [00:02<00:01, 24.17it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.69it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.47it/s]
 32%|      | 25/79 [00:01<00:04, 11.70it/s]
 35%|      | 28/79 [00:01<00:03, 14.07it/s]
 39%|      | 31/79 [00:02<00:02, 16.39it/s]
 43%|     | 34/79 [00:02<00:02, 18.45it/s]
 47%|     | 37/79 [00:02<00:02, 20.41it/s]
 51%|     | 40/79 [00:02<00:01, 21.79it/s]
 54%|    | 43/79 [00:02<00:01, 22.91it/s]
 58%|    | 46/79 [00:02<00:01, 23.83it/s]
 62%|   | 49/79 [00:02<00:01, 24.48it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:07,  7.50it/s]
 28%|       | 22/79 [00:01<00:05,  9.56it/s]
 32%|      | 25/79 [00:01<00:04, 11.84it/s]
 35%|      | 28/79 [00:01<00:03, 14.21it/s]
 39%|      | 31/79 [00:01<00:02, 16.55it/s]
 43%|     | 34/79 [00:02<00:02, 18.55it/s]
 47%|     | 37/79 [00:02<00:02, 20.42it/s]
 51%|     | 40/79 [00:02<00:01, 21.87it/s]
 54%|    | 43/79 [00:02<00:01, 22.98it/s]
 58%|    | 46/79 [00:02<00:01, 23.88it/s]
 62%|   | 49/79 [00:02<00:01, 24.69it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:59,  1.30it/s]
  5%|         | 4/79 [00:00<00:41,  1.81it/s]
  9%|         | 7/79 [00:01<00:28,  2.52it/s]
 13%|        | 10/79 [00:01<00:19,  3.45it/s]
 16%|        | 13/79 [00:01<00:14,  4.65it/s]
 20%|        | 16/79 [00:01<00:10,  6.18it/s]
 24%|       | 19/79 [00:01<00:07,  7.94it/s]
 28%|       | 22/79 [00:01<00:05, 10.07it/s]
 32%|      | 25/79 [00:01<00:04, 12.30it/s]
 35%|      | 28/79 [00:01<00:03, 14.60it/s]
 39%|      | 31/79 [00:01<00:02, 16.77it/s]
 43%|     | 34/79 [00:02<00:02, 18.75it/s]
 47%|     | 37/79 [00:02<00:02, 20.59it/s]
 51%|     | 40/79 [00:02<00:01, 21.74it/s]
 54%|    | 43/79 [00:02<00:01, 22.71it/s]
 58%|    | 46/79 [00:02<00:01, 23.61it/s]
 62%|   | 49/79 [00:02<00:01, 24.08it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.76it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:05,  9.56it/s]
 32%|      | 25/79 [00:01<00:04, 11.79it/s]
 35%|      | 28/79 [00:01<00:03, 14.13it/s]
 39%|      | 31/79 [00:02<00:02, 16.31it/s]
 43%|     | 34/79 [00:02<00:02, 18.36it/s]
 47%|     | 37/79 [00:02<00:02, 20.02it/s]
 51%|     | 40/79 [00:02<00:01, 21.63it/s]
 54%|    | 43/79 [00:02<00:01, 22.61it/s]
 58%|    | 46/79 [00:02<00:01, 23.40it/s]
 62%|   | 49/79 [00:02<00:01, 23.78it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:20,  3.29it/s]
 16%|        | 13/79 [00:01<00:14,  4.45it/s]
 20%|        | 16/79 [00:01<00:10,  5.89it/s]
 24%|       | 19/79 [00:01<00:07,  7.65it/s]
 28%|       | 22/79 [00:01<00:05,  9.62it/s]
 32%|      | 25/79 [00:01<00:04, 11.89it/s]
 35%|      | 28/79 [00:01<00:03, 14.17it/s]
 39%|      | 31/79 [00:02<00:02, 16.26it/s]
 43%|     | 34/79 [00:02<00:02, 18.27it/s]
 47%|     | 37/79 [00:02<00:02, 20.13it/s]
 51%|     | 40/79 [00:02<00:01, 21.57it/s]
 54%|    | 43/79 [00:02<00:01, 22.57it/s]
 58%|    | 46/79 [00:02<00:01, 23.23it/s]
 62%|   | 49/79 [00:02<00:01, 24.01it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.28it/s]
  5%|         | 4/79 [00:00<00:41,  1.79it/s]
  9%|         | 7/79 [00:01<00:29,  2.47it/s]
 13%|        | 10/79 [00:01<00:20,  3.39it/s]
 16%|        | 13/79 [00:01<00:14,  4.58it/s]
 20%|        | 16/79 [00:01<00:10,  6.09it/s]
 24%|       | 19/79 [00:01<00:07,  7.88it/s]
 28%|       | 22/79 [00:01<00:05,  9.89it/s]
 32%|      | 25/79 [00:01<00:04, 12.15it/s]
 35%|      | 28/79 [00:01<00:03, 14.42it/s]
 39%|      | 31/79 [00:01<00:02, 16.58it/s]
 43%|     | 34/79 [00:02<00:02, 18.41it/s]
 47%|     | 37/79 [00:02<00:02, 20.01it/s]
 51%|     | 40/79 [00:02<00:01, 21.50it/s]
 54%|    | 43/79 [00:02<00:01, 22.43it/s]
 58%|    | 46/79 [00:02<00:01, 23.02it/s]
 62%|   | 49/79 [00:02<00:01, 23.88it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.70it/s]
 24%|       | 19/79 [00:01<00:08,  7.43it/s]
 28%|       | 22/79 [00:01<00:06,  9.45it/s]
 32%|      | 25/79 [00:01<00:04, 11.67it/s]
 35%|      | 28/79 [00:01<00:03, 13.97it/s]
 39%|      | 31/79 [00:02<00:02, 16.24it/s]
 43%|     | 34/79 [00:02<00:02, 18.29it/s]
 47%|     | 37/79 [00:02<00:02, 19.94it/s]
 51%|     | 40/79 [00:02<00:01, 21.36it/s]
 54%|    | 43/79 [00:02<00:01, 22.57it/s]
 58%|    | 46/79 [00:02<00:01, 23.31it/s]
 62%|   | 49/79 [00:02<00:01, 23.99it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.36it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.65it/s]
 32%|      | 25/79 [00:01<00:04, 11.90it/s]
 35%|      | 28/79 [00:01<00:03, 14.30it/s]
 39%|      | 31/79 [00:01<00:02, 16.66it/s]
 43%|     | 34/79 [00:02<00:02, 18.72it/s]
 47%|     | 37/79 [00:02<00:02, 20.48it/s]
 51%|     | 40/79 [00:02<00:01, 21.80it/s]
 54%|    | 43/79 [00:02<00:01, 22.83it/s]
 58%|    | 46/79 [00:02<00:01, 23.67it/s]
 62%|   | 49/79 [00:02<00:01, 24.14it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:00<00:46,  1.63it/s]
  8%|         | 6/79 [00:01<00:32,  2.26it/s]
 11%|        | 9/79 [00:01<00:22,  3.11it/s]
 15%|        | 12/79 [00:01<00:15,  4.23it/s]
 19%|        | 15/79 [00:01<00:11,  5.64it/s]
 23%|       | 18/79 [00:01<00:08,  7.38it/s]
 27%|       | 21/79 [00:01<00:06,  9.38it/s]
 30%|       | 24/79 [00:01<00:04, 11.61it/s]
 34%|      | 27/79 [00:01<00:03, 13.92it/s]
 38%|      | 30/79 [00:02<00:03, 16.16it/s]
 42%|     | 33/79 [00:02<00:02, 18.27it/s]
 46%|     | 36/79 [00:02<00:02, 20.06it/s]
 49%|     | 39/79 [00:02<00:01, 21.47it/s]
 53%|    | 42/79 [00:02<00:01, 22.72it/s]
 57%|    | 45/79 [00:02<00:01, 23.76it/s]
 61%|    | 48/79 [00:02<00:01, 24.63it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.61it/s]
 32%|      | 25/79 [00:01<00:04, 11.88it/s]
 35%|      | 28/79 [00:01<00:03, 14.23it/s]
 39%|      | 31/79 [00:02<00:02, 16.41it/s]
 43%|     | 34/79 [00:02<00:02, 18.52it/s]
 47%|     | 37/79 [00:02<00:02, 20.40it/s]
 51%|     | 40/79 [00:02<00:01, 21.77it/s]
 54%|    | 43/79 [00:02<00:01, 23.01it/s]
 58%|    | 46/79 [00:02<00:01, 23.81it/s]
 62%|   | 49/79 [00:02<00:01, 24.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.86it/s]
 24%|       | 19/79 [00:01<00:07,  7.61it/s]
 28%|       | 22/79 [00:01<00:05,  9.67it/s]
 32%|      | 25/79 [00:01<00:04, 11.83it/s]
 35%|      | 28/79 [00:01<00:03, 14.12it/s]
 39%|      | 31/79 [00:02<00:02, 16.24it/s]
 43%|     | 34/79 [00:02<00:02, 18.33it/s]
 47%|     | 37/79 [00:02<00:02, 20.04it/s]
 51%|     | 40/79 [00:02<00:01, 21.23it/s]
 54%|    | 43/79 [00:02<00:01, 22.20it/s]
 58%|    | 46/79 [00:02<00:01, 23.14it/s]
 62%|   | 49/79 [00:02<00:01, 23.95it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.50it/s]
 28%|       | 22/79 [00:01<00:05,  9.50it/s]
 32%|      | 25/79 [00:01<00:04, 11.70it/s]
 35%|      | 28/79 [00:01<00:03, 14.04it/s]
 39%|      | 31/79 [00:02<00:02, 16.07it/s]
 43%|     | 34/79 [00:02<00:02, 18.08it/s]
 47%|     | 37/79 [00:02<00:02, 19.67it/s]
 51%|     | 40/79 [00:02<00:01, 21.11it/s]
 54%|    | 43/79 [00:02<00:01, 22.28it/s]
 58%|    | 46/79 [00:02<00:01, 23.38it/s]
 62%|   | 49/79 [00:02<00:01, 23.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.78it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:05,  9.56it/s]
 32%|      | 25/79 [00:01<00:04, 11.77it/s]
 35%|      | 28/79 [00:01<00:03, 14.06it/s]
 39%|      | 31/79 [00:02<00:02, 16.29it/s]
 43%|     | 34/79 [00:02<00:02, 18.22it/s]
 47%|     | 37/79 [00:02<00:02, 19.93it/s]
 51%|     | 40/79 [00:02<00:01, 21.24it/s]
 54%|    | 43/79 [00:02<00:01, 22.15it/s]
 58%|    | 46/79 [00:02<00:01, 23.11it/s]
 62%|   | 49/79 [00:02<00:01, 23.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.36it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.57it/s]
 28%|       | 22/79 [00:01<00:05,  9.62it/s]
 32%|      | 25/79 [00:01<00:04, 11.79it/s]
 35%|      | 28/79 [00:01<00:03, 14.13it/s]
 39%|      | 31/79 [00:02<00:02, 16.29it/s]
 43%|     | 34/79 [00:02<00:02, 18.33it/s]
 47%|     | 37/79 [00:02<00:02, 19.85it/s]
 51%|     | 40/79 [00:02<00:01, 21.32it/s]
 54%|    | 43/79 [00:02<00:01, 22.47it/s]
 58%|    | 46/79 [00:02<00:01, 22.92it/s]
 62%|   | 49/79 [00:02<00:01, 23.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.70it/s]
 24%|       | 19/79 [00:01<00:08,  7.43it/s]
 28%|       | 22/79 [00:01<00:06,  9.45it/s]
 32%|      | 25/79 [00:01<00:04, 11.68it/s]
 35%|      | 28/79 [00:01<00:03, 13.98it/s]
 39%|      | 31/79 [00:02<00:02, 16.17it/s]
 43%|     | 34/79 [00:02<00:02, 18.21it/s]
 47%|     | 37/79 [00:02<00:02, 20.01it/s]
 51%|     | 40/79 [00:02<00:01, 21.52it/s]
 54%|    | 43/79 [00:02<00:01, 22.72it/s]
 58%|    | 46/79 [00:02<00:01, 23.47it/s]
 62%|   | 49/79 [00:02<00:01, 24.26it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.39it/s]
 32%|      | 25/79 [00:01<00:04, 11.58it/s]
 35%|      | 28/79 [00:01<00:03, 13.88it/s]
 39%|      | 31/79 [00:02<00:02, 16.18it/s]
 43%|     | 34/79 [00:02<00:02, 18.19it/s]
 47%|     | 37/79 [00:02<00:02, 19.93it/s]
 51%|     | 40/79 [00:02<00:01, 21.40it/s]
 54%|    | 43/79 [00:02<00:01, 22.59it/s]
 58%|    | 46/79 [00:02<00:01, 23.40it/s]
 62%|   | 49/79 [00:02<00:01, 23.88it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.54it/s]
 35%|      | 28/79 [00:01<00:03, 13.86it/s]
 39%|      | 31/79 [00:02<00:02, 16.05it/s]
 43%|     | 34/79 [00:02<00:02, 18.03it/s]
 47%|     | 37/79 [00:02<00:02, 19.79it/s]
 51%|     | 40/79 [00:02<00:01, 21.20it/s]
 54%|    | 43/79 [00:02<00:01, 22.40it/s]
 58%|    | 46/79 [00:02<00:01, 23.36it/s]
 62%|   | 49/79 [00:02<00:01, 24.25it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.45it/s]
 35%|      | 28/79 [00:01<00:03, 13.68it/s]
 39%|      | 31/79 [00:02<00:03, 15.90it/s]
 43%|     | 34/79 [00:02<00:02, 17.82it/s]
 47%|     | 37/79 [00:02<00:02, 19.56it/s]
 51%|     | 40/79 [00:02<00:01, 20.82it/s]
 54%|    | 43/79 [00:02<00:01, 21.93it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.67it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.47it/s]
 28%|       | 22/79 [00:01<00:06,  9.42it/s]
 32%|      | 25/79 [00:01<00:04, 11.59it/s]
 35%|      | 28/79 [00:01<00:03, 13.86it/s]
 39%|      | 31/79 [00:02<00:02, 16.06it/s]
 43%|     | 34/79 [00:02<00:02, 18.13it/s]
 47%|     | 37/79 [00:02<00:02, 19.77it/s]
 51%|     | 40/79 [00:02<00:01, 21.15it/s]
 54%|    | 43/79 [00:02<00:01, 22.23it/s]
 58%|    | 46/79 [00:02<00:01, 22.99it/s]
 62%|   | 49/79 [00:02<00:01, 23.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.42it/s]
 13%|        | 10/79 [00:01<00:20,  3.32it/s]
 16%|        | 13/79 [00:01<00:14,  4.48it/s]
 20%|        | 16/79 [00:01<00:10,  5.94it/s]
 24%|       | 19/79 [00:01<00:07,  7.68it/s]
 28%|       | 22/79 [00:01<00:05,  9.67it/s]
 32%|      | 25/79 [00:01<00:04, 11.82it/s]
 35%|      | 28/79 [00:01<00:03, 14.14it/s]
 39%|      | 31/79 [00:02<00:02, 16.26it/s]
 43%|     | 34/79 [00:02<00:02, 18.11it/s]
 47%|     | 37/79 [00:02<00:02, 19.73it/s]
 51%|     | 40/79 [00:02<00:01, 21.06it/s]
 54%|    | 43/79 [00:02<00:01, 21.90it/s]
 58%|    | 46/79 [00:02<00:01, 22.34it/s]
 62%|   | 49/79 [00:02<00:01, 23.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.40it/s]
 32%|      | 25/79 [00:01<00:04, 11.57it/s]
 35%|      | 28/79 [00:01<00:03, 13.75it/s]
 39%|      | 31/79 [00:02<00:03, 15.90it/s]
 43%|     | 34/79 [00:02<00:02, 17.86it/s]
 47%|     | 37/79 [00:02<00:02, 19.64it/s]
 51%|     | 40/79 [00:02<00:01, 21.02it/s]
 54%|    | 43/79 [00:02<00:01, 22.17it/s]
 58%|    | 46/79 [00:02<00:01, 22.92it/s]
 62%|   | 49/79 [00:02<00:01, 23.58it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.35it/s]
 35%|      | 28/79 [00:01<00:03, 13.49it/s]
 39%|      | 31/79 [00:02<00:03, 15.73it/s]
 43%|     | 34/79 [00:02<00:02, 17.81it/s]
 47%|     | 37/79 [00:02<00:02, 19.36it/s]
 51%|     | 40/79 [00:02<00:01, 20.62it/s]
 54%|    | 43/79 [00:02<00:01, 21.57it/s]
 58%|    | 46/79 [00:02<00:01, 22.50it/s]
 62%|   | 49/79 [00:02<00:01, 23.03it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  8.96it/s]
 32%|      | 25/79 [00:01<00:04, 11.14it/s]
 35%|      | 28/79 [00:01<00:03, 13.39it/s]
 39%|      | 31/79 [00:02<00:03, 15.62it/s]
 43%|     | 34/79 [00:02<00:02, 17.74it/s]
 47%|     | 37/79 [00:02<00:02, 19.43it/s]
 51%|     | 40/79 [00:02<00:01, 20.99it/s]
 54%|    | 43/79 [00:02<00:01, 22.07it/s]
 58%|    | 46/79 [00:02<00:01, 22.99it/s]
 62%|   | 49/79 [00:02<00:01, 23.51it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  4%|         | 3/79 [00:01<00:49,  1.54it/s]
  8%|         | 6/79 [00:01<00:34,  2.14it/s]
 11%|        | 9/79 [00:01<00:23,  2.95it/s]
 15%|        | 12/79 [00:01<00:16,  4.02it/s]
 19%|        | 15/79 [00:01<00:11,  5.37it/s]
 23%|       | 18/79 [00:01<00:08,  7.05it/s]
 27%|       | 21/79 [00:01<00:06,  9.00it/s]
 30%|       | 24/79 [00:01<00:04, 11.14it/s]
 34%|      | 27/79 [00:01<00:03, 13.43it/s]
 38%|      | 30/79 [00:02<00:03, 15.58it/s]
 42%|     | 33/79 [00:02<00:02, 17.42it/s]
 46%|     | 36/79 [00:02<00:02, 19.09it/s]
 49%|     | 39/79 [00:02<00:01, 20.57it/s]
 53%|    | 42/79 [00:02<00:01, 21.60it/s]
 57%|    | 45/79 [00:02<00:01, 22.54it/s]
 61%|    | 48/79 [00:02<00:01, 22.94it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.12it/s]
 28%|       | 22/79 [00:01<00:06,  9.05it/s]
 32%|      | 25/79 [00:01<00:04, 11.19it/s]
 35%|      | 28/79 [00:01<00:03, 13.41it/s]
 39%|      | 31/79 [00:02<00:03, 15.56it/s]
 43%|     | 34/79 [00:02<00:02, 17.43it/s]
 47%|     | 37/79 [00:02<00:02, 19.15it/s]
 51%|     | 40/79 [00:02<00:01, 20.50it/s]
 54%|    | 43/79 [00:02<00:01, 21.72it/s]
 58%|    | 46/79 [00:02<00:01, 22.27it/s]
 62%|   | 49/79 [00:02<00:01, 23.14it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  7.02it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.02it/s]
 35%|      | 28/79 [00:02<00:03, 13.24it/s]
 39%|      | 31/79 [00:02<00:03, 15.43it/s]
 43%|     | 34/79 [00:02<00:02, 17.43it/s]
 47%|     | 37/79 [00:02<00:02, 19.13it/s]
 51%|     | 40/79 [00:02<00:01, 20.53it/s]
 54%|    | 43/79 [00:02<00:01, 21.73it/s]
 58%|    | 46/79 [00:02<00:01, 22.60it/s]
 62%|   | 49/79 [00:02<00:01, 23.23it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  4%|         | 3/79 [00:00<00:48,  1.58it/s]
  8%|         | 6/79 [00:01<00:33,  2.19it/s]
 11%|        | 9/79 [00:01<00:23,  3.01it/s]
 15%|        | 12/79 [00:01<00:16,  4.07it/s]
 19%|        | 15/79 [00:01<00:11,  5.42it/s]
 23%|       | 18/79 [00:01<00:08,  7.09it/s]
 27%|       | 21/79 [00:01<00:06,  8.99it/s]
 30%|       | 24/79 [00:01<00:04, 11.06it/s]
 34%|      | 27/79 [00:01<00:03, 13.28it/s]
 38%|      | 30/79 [00:02<00:03, 15.39it/s]
 42%|     | 33/79 [00:02<00:02, 17.44it/s]
 46%|     | 36/79 [00:02<00:02, 18.83it/s]
 49%|     | 39/79 [00:02<00:01, 20.30it/s]
 53%|    | 42/79 [00:02<00:01, 21.45it/s]
 57%|    | 45/79 [00:02<00:01, 22.41it/s]
 61%|    | 48/79 [00:02<00:01, 22.79it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.81it/s]
 16%|        | 13/79 [00:01<00:17,  3.83it/s]
 20%|        | 16/79 [00:01<00:12,  5.14it/s]
 24%|       | 19/79 [00:01<00:08,  6.72it/s]
 28%|       | 22/79 [00:01<00:06,  8.59it/s]
 32%|      | 25/79 [00:01<00:05, 10.70it/s]
 35%|      | 28/79 [00:02<00:03, 12.81it/s]
 39%|      | 31/79 [00:02<00:03, 15.03it/s]
 43%|     | 34/79 [00:02<00:02, 17.15it/s]
 47%|     | 37/79 [00:02<00:02, 18.88it/s]
 51%|     | 40/79 [00:02<00:01, 20.22it/s]
 54%|    | 43/79 [00:02<00:01, 21.28it/s]
 58%|    | 46/79 [00:02<00:01, 22.26it/s]
 62%|   | 49/79 [00:02<00:01, 23.17it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.87it/s]
 20%|        | 16/79 [00:01<00:12,  5.18it/s]
 24%|       | 19/79 [00:01<00:08,  6.77it/s]
 28%|       | 22/79 [00:01<00:06,  8.66it/s]
 32%|      | 25/79 [00:01<00:05, 10.70it/s]
 35%|      | 28/79 [00:02<00:03, 12.87it/s]
 39%|      | 31/79 [00:02<00:03, 14.91it/s]
 43%|     | 34/79 [00:02<00:02, 16.83it/s]
 47%|     | 37/79 [00:02<00:02, 18.47it/s]
 51%|     | 40/79 [00:02<00:01, 19.68it/s]
 54%|    | 43/79 [00:02<00:01, 20.75it/s]
 58%|    | 46/79 [00:02<00:01, 21.18it/s]
 62%|   | 49/79 [00:02<00:01, 21.87it/s]
 66%|   | 52/79 [00:03<00:01, 25.43it/s]
 70%|   | 55/79 [00:02<00:00, 25.68it/s]
 73%|  | 58/79 [00:03<00:00, 26.07it/s]
 77%|  | 61/79 [00:03<00:00, 26.23it/s]
 81%|  | 64/79 [00:03<00:00, 26.14it/s]
 85%| | 67/79 [00:03<00:00, 26.25it/s]
 89%| | 70/79 [00:03<00:00, 26.52it/s]
 92%|| 73/79 [00:03<00:00, 26.67it/s]
 97%|| 77/79 [00:03<00:00, 27.52it/s]
100%|| 79/79 [00:03<00:00, 20.52it/s]
48it/s]
 68%|   | 54/79 [00:02<00:01, 24.83it/s]
 72%|  | 57/79 [00:02<00:00, 25.34it/s]
 76%|  | 60/79 [00:03<00:00, 25.22it/s]
 80%|  | 63/79 [00:03<00:00, 25.31it/s]
 84%| | 66/79 [00:03<00:00, 25.38it/s]
 87%| | 69/79 [00:03<00:00, 25.47it/s]
 91%| | 72/79 [00:03<00:00, 25.16it/s]
 95%|| 75/79 [00:03<00:00, 26.00it/s]
 99%|| 78/79 [00:03<00:00, 26.62it/s]
100%|| 79/79 [00:03<00:00, 20.33it/s]
, 24.51it/s]
 70%|   | 55/79 [00:02<00:00, 24.94it/s]
 73%|  | 58/79 [00:03<00:00, 25.14it/s]
 77%|  | 61/79 [00:03<00:00, 25.18it/s]
 81%|  | 64/79 [00:03<00:00, 25.32it/s]
 85%| | 67/79 [00:03<00:00, 25.55it/s]
 89%| | 70/79 [00:03<00:00, 25.39it/s]
 92%|| 73/79 [00:03<00:00, 25.97it/s]
 96%|| 76/79 [00:03<00:00, 26.64it/s]
100%|| 79/79 [00:03<00:00, 20.41it/s]
, 24.78it/s]
 70%|   | 55/79 [00:02<00:00, 25.25it/s]
 73%|  | 58/79 [00:03<00:00, 25.67it/s]
 77%|  | 61/79 [00:03<00:00, 25.60it/s]
 81%|  | 64/79 [00:03<00:00, 25.50it/s]
 85%| | 67/79 [00:03<00:00, 25.52it/s]
 89%| | 70/79 [00:03<00:00, 25.42it/s]
 92%|| 73/79 [00:03<00:00, 25.85it/s]
 96%|| 76/79 [00:03<00:00, 26.56it/s]
100%|| 79/79 [00:03<00:00, 27.44it/s]
, 24.13it/s]
 70%|   | 55/79 [00:02<00:00, 24.30it/s]
 73%|  | 58/79 [00:03<00:00, 24.89it/s]
 77%|  | 61/79 [00:03<00:00, 25.14it/s]
 81%|  | 64/79 [00:03<00:00, 25.17it/s]
 85%| | 67/79 [00:03<00:00, 25.55it/s]
 89%| | 70/79 [00:03<00:00, 25.21it/s]
 92%|| 73/79 [00:03<00:00, 25.65it/s]
 96%|| 76/79 [00:03<00:00, 26.41it/s]
100%|| 79/79 [00:03<00:00, 20.43it/s]
, 24.54it/s]
 70%|   | 55/79 [00:02<00:00, 24.87it/s]
 73%|  | 58/79 [00:03<00:00, 24.94it/s]
 77%|  | 61/79 [00:03<00:00, 25.28it/s]
 81%|  | 64/79 [00:03<00:00, 25.33it/s]
 85%| | 67/79 [00:03<00:00, 25.51it/s]
 89%| | 70/79 [00:03<00:00, 25.61it/s]
 92%|| 73/79 [00:03<00:00, 25.93it/s]
 96%|| 76/79 [00:03<00:00, 26.58it/s]
100%|| 79/79 [00:03<00:00, 27.47it/s]
, 24.81it/s]
 70%|   | 55/79 [00:02<00:00, 24.66it/s]
 73%|  | 58/79 [00:03<00:00, 24.98it/s]
 77%|  | 61/79 [00:03<00:00, 25.03it/s]
 81%|  | 64/79 [00:03<00:00, 25.26it/s]
 85%| | 67/79 [00:03<00:00, 25.27it/s]
 89%| | 70/79 [00:03<00:00, 25.24it/s]
 92%|| 73/79 [00:03<00:00, 25.81it/s]
 96%|| 76/79 [00:03<00:00, 26.48it/s]
100%|| 79/79 [00:03<00:00, 27.20it/s]
, 24.45it/s]
 70%|   | 55/79 [00:02<00:00, 24.84it/s]
 73%|  | 58/79 [00:03<00:00, 24.98it/s]
 77%|  | 61/79 [00:03<00:00, 25.28it/s]
 81%|  | 64/79 [00:03<00:00, 25.34it/s]
 85%| | 67/79 [00:03<00:00, 25.55it/s]
 89%| | 70/79 [00:03<00:00, 25.49it/s]
 92%|| 73/79 [00:03<00:00, 25.96it/s]
 96%|| 76/79 [00:03<00:00, 26.58it/s]
100%|| 79/79 [00:03<00:00, 27.49it/s]
, 24.69it/s]
 70%|   | 55/79 [00:02<00:00, 24.87it/s]
 73%|  | 58/79 [00:03<00:00, 25.07it/s]
 77%|  | 61/79 [00:03<00:00, 25.37it/s]
 81%|  | 64/79 [00:03<00:00, 25.61it/s]
 85%| | 67/79 [00:03<00:00, 25.54it/s]
 89%| | 70/79 [00:03<00:00, 24.80it/s]
 92%|| 73/79 [00:03<00:00, 25.33it/s]
 96%|| 76/79 [00:03<00:00, 25.92it/s]
100%|| 79/79 [00:03<00:00, 27.00it/s]
, 24.72it/s]
 70%|   | 55/79 [00:02<00:00, 25.02it/s]
 73%|  | 58/79 [00:03<00:00, 25.32it/s]
 77%|  | 61/79 [00:03<00:00, 25.43it/s]
 81%|  | 64/79 [00:03<00:00, 25.42it/s]
 85%| | 67/79 [00:03<00:00, 25.67it/s]
 89%| | 70/79 [00:03<00:00, 25.54it/s]
 92%|| 73/79 [00:03<00:00, 26.08it/s]
 96%|| 76/79 [00:03<00:00, 26.53it/s]
100%|| 79/79 [00:03<00:00, 27.48it/s]
, 24.53it/s]
 70%|   | 55/79 [00:02<00:00, 25.14it/s]
 73%|  | 58/79 [00:03<00:00, 25.30it/s]
 77%|  | 61/79 [00:03<00:00, 25.66it/s]
 81%|  | 64/79 [00:03<00:00, 25.78it/s]
 85%| | 67/79 [00:03<00:00, 25.97it/s]
 89%| | 70/79 [00:03<00:00, 25.97it/s]
 92%|| 73/79 [00:03<00:00, 26.17it/s]
 96%|| 76/79 [00:03<00:00, 26.79it/s]
100%|| 79/79 [00:03<00:00, 27.66it/s]
, 24.32it/s]
 70%|   | 55/79 [00:02<00:00, 24.94it/s]
 73%|  | 58/79 [00:03<00:00, 24.91it/s]
 77%|  | 61/79 [00:03<00:00, 25.12it/s]
 81%|  | 64/79 [00:03<00:00, 25.32it/s]
 85%| | 67/79 [00:03<00:00, 25.54it/s]
 89%| | 70/79 [00:03<00:00, 25.55it/s]
 92%|| 73/79 [00:03<00:00, 25.91it/s]
 96%|| 76/79 [00:03<00:00, 26.64it/s]
100%|| 79/79 [00:03<00:00, 27.52it/s]
, 24.34it/s]
 70%|   | 55/79 [00:02<00:00, 24.41it/s]
 73%|  | 58/79 [00:03<00:00, 24.64it/s]
 77%|  | 61/79 [00:03<00:00, 24.80it/s]
 81%|  | 64/79 [00:03<00:00, 25.36it/s]
 85%| | 67/79 [00:03<00:00, 25.49it/s]
 89%| | 70/79 [00:03<00:00, 25.63it/s]
 92%|| 73/79 [00:03<00:00, 26.22it/s]
 96%|| 76/79 [00:03<00:00, 26.85it/s]
100%|| 79/79 [00:03<00:00, 27.61it/s]
, 24.30it/s]
 70%|   | 55/79 [00:02<00:00, 24.77it/s]
 73%|  | 58/79 [00:03<00:00, 25.16it/s]
 77%|  | 61/79 [00:03<00:00, 25.24it/s]
 81%|  | 64/79 [00:03<00:00, 25.30it/s]
 85%| | 67/79 [00:03<00:00, 25.53it/s]
 89%| | 70/79 [00:03<00:00, 26.05it/s]
 92%|| 73/79 [00:03<00:00, 25.94it/s]
 96%|| 76/79 [00:03<00:00, 26.77it/s]
100%|| 79/79 [00:03<00:00, 27.61it/s]
98it/s]
 68%|   | 54/79 [00:02<00:00, 25.31it/s]
 72%|  | 57/79 [00:03<00:00, 25.63it/s]
 76%|  | 60/79 [00:03<00:00, 25.65it/s]
 80%|  | 63/79 [00:03<00:00, 25.55it/s]
 84%| | 66/79 [00:03<00:00, 25.72it/s]
 87%| | 69/79 [00:03<00:00, 25.79it/s]
 91%| | 72/79 [00:03<00:00, 25.86it/s]
 95%|| 75/79 [00:03<00:00, 26.43it/s]
 99%|| 78/79 [00:03<00:00, 26.79it/s]
100%|| 79/79 [00:03<00:00, 20.09it/s]
, 24.39it/s]
 70%|   | 55/79 [00:02<00:00, 24.66it/s]
 73%|  | 58/79 [00:03<00:00, 24.87it/s]
 77%|  | 61/79 [00:03<00:00, 25.24it/s]
 81%|  | 64/79 [00:03<00:00, 25.33it/s]
 85%| | 67/79 [00:03<00:00, 25.56it/s]
 89%| | 70/79 [00:03<00:00, 25.48it/s]
 92%|| 73/79 [00:03<00:00, 25.65it/s]
 96%|| 76/79 [00:03<00:00, 26.41it/s]
100%|| 79/79 [00:03<00:00, 27.20it/s]
, 24.43it/s]
 70%|   | 55/79 [00:02<00:00, 24.92it/s]
 73%|  | 58/79 [00:03<00:00, 25.24it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 24.74it/s]
 85%| | 67/79 [00:03<00:00, 24.76it/s]
 89%| | 70/79 [00:03<00:00, 25.06it/s]
 92%|| 73/79 [00:03<00:00, 25.38it/s]
 96%|| 76/79 [00:03<00:00, 26.08it/s]
100%|| 79/79 [00:03<00:00, 27.07it/s]
, 24.36it/s]
 70%|   | 55/79 [00:02<00:00, 24.70it/s]
 73%|  | 58/79 [00:03<00:00, 25.04it/s]
 77%|  | 61/79 [00:03<00:00, 24.98it/s]
 81%|  | 64/79 [00:03<00:00, 25.03it/s]
 85%| | 67/79 [00:03<00:00, 24.73it/s]
 89%| | 70/79 [00:03<00:00, 24.96it/s]
 92%|| 73/79 [00:03<00:00, 24.98it/s]
 96%|| 76/79 [00:03<00:00, 25.75it/s]
100%|| 79/79 [00:03<00:00, 26.62it/s]
, 24.55it/s]
 70%|   | 55/79 [00:02<00:00, 24.67it/s]
 73%|  | 58/79 [00:03<00:00, 24.73it/s]
 77%|  | 61/79 [00:03<00:00, 24.83it/s]
 81%|  | 64/79 [00:03<00:00, 24.89it/s]
 85%| | 67/79 [00:03<00:00, 24.98it/s]
 89%| | 70/79 [00:03<00:00, 24.77it/s]
 92%|| 73/79 [00:03<00:00, 25.11it/s]
 96%|| 76/79 [00:03<00:00, 26.20it/s]
100%|| 79/79 [00:03<00:00, 26.51it/s]
, 23.93it/s]
 70%|   | 55/79 [00:03<00:00, 24.25it/s]
 73%|  | 58/79 [00:03<00:00, 24.56it/s]
 77%|  | 61/79 [00:03<00:00, 24.89it/s]
 81%|  | 64/79 [00:03<00:00, 24.88it/s]
 85%| | 67/79 [00:03<00:00, 25.15it/s]
 89%| | 70/79 [00:03<00:00, 25.49it/s]
 92%|| 73/79 [00:03<00:00, 25.79it/s]
 96%|| 76/79 [00:03<00:00, 26.56it/s]
100%|| 79/79 [00:03<00:00, 27.46it/s]
, 23.83it/s]
 70%|   | 55/79 [00:03<00:00, 24.08it/s]
 73%|  | 58/79 [00:03<00:00, 24.62it/s]
 77%|  | 61/79 [00:03<00:00, 24.40it/s]
 81%|  | 64/79 [00:03<00:00, 24.79it/s]
 85%| | 67/79 [00:03<00:00, 24.94it/s]
 89%| | 70/79 [00:03<00:00, 25.18it/s]
 92%|| 73/79 [00:03<00:00, 25.45it/s]
 96%|| 76/79 [00:03<00:00, 26.21it/s]
100%|| 79/79 [00:03<00:00, 27.09it/s]
, 23.97it/s]
 70%|   | 55/79 [00:03<00:00, 24.24it/s]
 73%|  | 58/79 [00:03<00:00, 24.54it/s]
 77%|  | 61/79 [00:03<00:00, 24.57it/s]
 81%|  | 64/79 [00:03<00:00, 24.62it/s]
 85%| | 67/79 [00:03<00:00, 24.88it/s]
 89%| | 70/79 [00:03<00:00, 25.13it/s]
 92%|| 73/79 [00:03<00:00, 25.27it/s]
 96%|| 76/79 [00:03<00:00, 25.88it/s]
100%|| 79/79 [00:03<00:00, 26.70it/s]
, 24.76it/s]
 70%|   | 55/79 [00:02<00:00, 24.73it/s]
 73%|  | 58/79 [00:03<00:00, 24.91it/s]
 77%|  | 61/79 [00:03<00:00, 24.86it/s]
 81%|  | 64/79 [00:03<00:00, 25.02it/s]
 85%| | 67/79 [00:03<00:00, 24.68it/s]
 89%| | 70/79 [00:03<00:00, 25.04it/s]
 92%|| 73/79 [00:03<00:00, 25.30it/s]
 96%|| 76/79 [00:03<00:00, 26.15it/s]
100%|| 79/79 [00:03<00:00, 27.02it/s]
, 24.09it/s]
 70%|   | 55/79 [00:03<00:00, 24.36it/s]
 73%|  | 58/79 [00:03<00:00, 24.54it/s]
 77%|  | 61/79 [00:03<00:00, 24.77it/s]
 81%|  | 64/79 [00:03<00:00, 25.06it/s]
 85%| | 67/79 [00:03<00:00, 25.34it/s]
 89%| | 70/79 [00:03<00:00, 25.20it/s]
 92%|| 73/79 [00:03<00:00, 25.63it/s]
 96%|| 76/79 [00:03<00:00, 26.29it/s]
100%|| 79/79 [00:03<00:00, 27.12it/s]
, 23.78it/s]
 70%|   | 55/79 [00:03<00:01, 23.95it/s]
 73%|  | 58/79 [00:03<00:00, 24.11it/s]
 77%|  | 61/79 [00:03<00:00, 24.14it/s]
 81%|  | 64/79 [00:03<00:00, 24.38it/s]
 85%| | 67/79 [00:03<00:00, 24.39it/s]
 89%| | 70/79 [00:03<00:00, 24.41it/s]
 92%|| 73/79 [00:03<00:00, 25.08it/s]
 96%|| 76/79 [00:03<00:00, 25.95it/s]
100%|| 79/79 [00:03<00:00, 27.03it/s]
, 23.41it/s]
 70%|   | 55/79 [00:03<00:01, 23.37it/s]
 73%|  | 58/79 [00:03<00:00, 24.00it/s]
 77%|  | 61/79 [00:03<00:00, 23.76it/s]
 81%|  | 64/79 [00:03<00:00, 23.75it/s]
 85%| | 67/79 [00:03<00:00, 24.13it/s]
 89%| | 70/79 [00:03<00:00, 24.31it/s]
 92%|| 73/79 [00:03<00:00, 24.67it/s]
 96%|| 76/79 [00:03<00:00, 25.47it/s]
100%|| 79/79 [00:04<00:00, 26.41it/s]
38it/s]
 68%|   | 54/79 [00:03<00:01, 23.70it/s]
 72%|  | 57/79 [00:03<00:00, 24.39it/s]
 76%|  | 60/79 [00:03<00:00, 24.77it/s]
 80%|  | 63/79 [00:03<00:00, 24.78it/s]
 84%| | 66/79 [00:03<00:00, 24.85it/s]
 87%| | 69/79 [00:03<00:00, 24.91it/s]
 91%| | 72/79 [00:03<00:00, 25.17it/s]
 95%|| 75/79 [00:03<00:00, 25.81it/s]
 99%|| 78/79 [00:04<00:00, 26.28it/s]
100%|| 79/79 [00:04<00:00, 19.22it/s]
, 23.51it/s]
 70%|   | 55/79 [00:03<00:00, 24.15it/s]
 73%|  | 58/79 [00:03<00:00, 24.28it/s]
 77%|  | 61/79 [00:03<00:00, 24.48it/s]
 81%|  | 64/79 [00:03<00:00, 24.47it/s]
 85%| | 67/79 [00:03<00:00, 24.81it/s]
 89%| | 70/79 [00:03<00:00, 24.66it/s]
 92%|| 73/79 [00:03<00:00, 24.89it/s]
 96%|| 76/79 [00:03<00:00, 25.61it/s]
100%|| 79/79 [00:04<00:00, 26.45it/s]
, 23.56it/s]
 70%|   | 55/79 [00:03<00:01, 23.85it/s]
 73%|  | 58/79 [00:03<00:00, 24.21it/s]
 77%|  | 61/79 [00:03<00:00, 24.63it/s]
 81%|  | 64/79 [00:03<00:00, 24.46it/s]
 85%| | 67/79 [00:03<00:00, 24.55it/s]
 89%| | 70/79 [00:03<00:00, 24.55it/s]
 92%|| 73/79 [00:03<00:00, 25.17it/s]
 96%|| 76/79 [00:03<00:00, 25.79it/s]
100%|| 79/79 [00:04<00:00, 26.64it/s]
, 23.10it/s]
 70%|   | 55/79 [00:03<00:01, 23.75it/s]
 73%|  | 58/79 [00:03<00:00, 24.05it/s]
 77%|  | 61/79 [00:03<00:00, 24.37it/s]
 81%|  | 64/79 [00:03<00:00, 24.57it/s]
 85%| | 67/79 [00:03<00:00, 24.68it/s]
 89%| | 70/79 [00:03<00:00, 24.67it/s]
 92%|| 73/79 [00:03<00:00, 24.93it/s]
 96%|| 76/79 [00:03<00:00, 25.61it/s]
100%|| 79/79 [00:04<00:00, 26.38it/s]
34it/s]
 68%|   | 54/79 [00:03<00:01, 23.89it/s]
 72%|  | 57/79 [00:03<00:00, 24.08it/s]
 76%|  | 60/79 [00:03<00:00, 23.97it/s]
 80%|  | 63/79 [00:03<00:00, 24.11it/s]
 84%| | 66/79 [00:03<00:00, 24.36it/s]
 87%| | 69/79 [00:03<00:00, 24.29it/s]
 91%| | 72/79 [00:03<00:00, 24.19it/s]
 95%|| 75/79 [00:03<00:00, 25.05it/s]
 99%|| 78/79 [00:04<00:00, 25.64it/s]
100%|| 79/79 [00:04<00:00, 19.00it/s]
, 22.62it/s]
 70%|   | 55/79 [00:03<00:01, 23.13it/s]
 73%|  | 58/79 [00:03<00:00, 23.26it/s]
 77%|  | 61/79 [00:03<00:00, 23.47it/s]
 81%|  | 64/79 [00:03<00:00, 23.82it/s]
 85%| | 67/79 [00:03<00:00, 23.87it/s]
 89%| | 70/79 [00:03<00:00, 23.85it/s]
 92%|| 73/79 [00:03<00:00, 24.39it/s]
 96%|| 76/79 [00:04<00:00, 25.34it/s]
100%|| 79/79 [00:04<00:00, 26.15it/s]
2020-06-23 17:17:11,430 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.202480 (0.026895872497558593 s / img per device, on 32 devices)
2020-06-23 17:17:11,449 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:17:11,449 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:17:11,467 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592957837882, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 16, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592957837883, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 16}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:17:18,444 maskrcnn_benchmark.trainer INFO: eta: 0:54:13  iter: 13760  loss: 0.4935 (0.6930)  loss_classifier: 0.1650 (0.2472)  loss_box_reg: 0.0813 (0.1125)  loss_mask: 0.2402 (0.2815)  loss_objectness: 0.0113 (0.0327)  loss_rpn_box_reg: 0.0081 (0.0191)  time: 0.1094 (0.1240)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5148
2020-06-23 17:17:20,616 maskrcnn_benchmark.trainer INFO: eta: 0:54:10  iter: 13780  loss: 0.4785 (0.6927)  loss_classifier: 0.1591 (0.2470)  loss_box_reg: 0.0667 (0.1125)  loss_mask: 0.2309 (0.2814)  loss_objectness: 0.0147 (0.0327)  loss_rpn_box_reg: 0.0055 (0.0191)  time: 0.1078 (0.1240)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5148
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 17:17:22,785 maskrcnn_benchmark.trainer INFO: eta: 0:54:07  iter: 13800  loss: 0.4654 (0.6925)  loss_classifier: 0.1457 (0.2469)  loss_box_reg: 0.0770 (0.1124)  loss_mask: 0.2234 (0.2813)  loss_objectness: 0.0097 (0.0327)  loss_rpn_box_reg: 0.0085 (0.0191)  time: 0.1082 (0.1239)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5148
DONE (t=0.53s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.41s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37721
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.59409
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.40759
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21529
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.40740
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48992
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.31008
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.48887
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51247
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.31773
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.55085
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.64961
2020-06-23 17:17:24,977 maskrcnn_benchmark.trainer INFO: eta: 0:54:04  iter: 13820  loss: 0.4553 (0.6921)  loss_classifier: 0.1330 (0.2467)  loss_box_reg: 0.0641 (0.1124)  loss_mask: 0.2363 (0.2813)  loss_objectness: 0.0114 (0.0326)  loss_rpn_box_reg: 0.0078 (0.0191)  time: 0.1092 (0.1239)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5148
2020-06-23 17:17:27,146 maskrcnn_benchmark.trainer INFO: eta: 0:54:01  iter: 13840  loss: 0.5788 (0.6919)  loss_classifier: 0.1601 (0.2466)  loss_box_reg: 0.0777 (0.1123)  loss_mask: 0.2521 (0.2812)  loss_objectness: 0.0131 (0.0326)  loss_rpn_box_reg: 0.0102 (0.0191)  time: 0.1083 (0.1239)  data: 0.0014 (0.0167)  lr: 0.001600  max mem: 5156
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:17:29,329 maskrcnn_benchmark.trainer INFO: eta: 0:53:58  iter: 13860  loss: 0.5049 (0.6917)  loss_classifier: 0.1647 (0.2465)  loss_box_reg: 0.0881 (0.1123)  loss_mask: 0.2365 (0.2812)  loss_objectness: 0.0139 (0.0326)  loss_rpn_box_reg: 0.0071 (0.0191)  time: 0.1086 (0.1239)  data: 0.0014 (0.0167)  lr: 0.001600  max mem: 5156
DONE (t=1.35s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:17:31,504 maskrcnn_benchmark.trainer INFO: eta: 0:53:55  iter: 13880  loss: 0.5612 (0.6915)  loss_classifier: 0.1489 (0.2464)  loss_box_reg: 0.0857 (0.1123)  loss_mask: 0.2393 (0.2811)  loss_objectness: 0.0117 (0.0326)  loss_rpn_box_reg: 0.0049 (0.0191)  time: 0.1082 (0.1239)  data: 0.0014 (0.0167)  lr: 0.001600  max mem: 5156
DONE (t=2.24s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.34313
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.55986
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.36463
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15406
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37077
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.50714
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29123
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.44829
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.46838
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.26458
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.51083
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62248
2020-06-23 17:17:33,051 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.37720747780486097, segm mAP: 0.34312894759419404
:::MLLOG {"namespace": "", "time_ms": 1592957853051, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.37720747780486097, "SEGM": 0.34312894759419404}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 15}}
:::MLLOG {"namespace": "", "time_ms": 1592957853052, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 15}}
2020-06-23 17:17:33,052 maskrcnn_benchmark.trainer INFO: Target mAP reached, exiting...
&&&& MLPERF METRIC THROUGHPUT=1033.5142 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.1559 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.1559 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.3112 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.0987 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.5388 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.3693 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.4023 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.1926 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.1418 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.1414 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.2174 iterations / s
2020-06-23 17:17:33,197 maskrcnn_benchmark.trainer INFO: Total training time: 0:28:40.806984 (0.0430 s / it)
&&&& MLPERF METRIC THROUGHPUT=1033.4094 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.1132 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.0978 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.1882 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.0501 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.4101 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.2086 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.2052 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.2306 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.4822 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.1996 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.1926 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.3815 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.4038 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.1959 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.2317 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.1873 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.3462 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.0872 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1033.0557 iterations / s
&&&& MLPERF METRIC TIME= 1759.1220664978027
&&&& MLPERF METRIC TIME= 1758.9630801677704
&&&& MLPERF METRIC TIME= 1758.9656085968018
&&&& MLPERF METRIC TIME= 1758.808972120285
&&&& MLPERF METRIC TIME= 1759.0769822597504
&&&& MLPERF METRIC TIME= 1758.8031566143036
&&&& MLPERF METRIC TIME= 1758.8076660633087
&&&& MLPERF METRIC TIME= 1759.2257325649261
&&&& MLPERF METRIC TIME= 1759.0517542362213
&&&& MLPERF METRIC TIME= 1758.8280129432678
&&&& MLPERF METRIC TIME= 1759.1072771549225
&&&& MLPERF METRIC TIME= 1758.876231431961
&&&& MLPERF METRIC TIME= 1759.1754806041718
&&&& MLPERF METRIC TIME= 1758.9805810451508
&&&& MLPERF METRIC TIME= 1758.8090946674347
&&&& MLPERF METRIC TIME= 1759.0533843040466
&&&& MLPERF METRIC TIME= 1758.8169314861298
&&&& MLPERF METRIC TIME= 1758.8193864822388
&&&& MLPERF METRIC TIME= 1758.9505331516266
&&&& MLPERF METRIC TIME= 1759.066585302353
&&&& MLPERF METRIC TIME= 1758.8191690444946
&&&& MLPERF METRIC TIME= 1759.0006062984467
&&&& MLPERF METRIC TIME= 1759.4840455055237
&&&& MLPERF METRIC TIME= 1758.9045407772064
&&&& MLPERF METRIC TIME= 1759.2104523181915
&&&& MLPERF METRIC TIME= 1758.8625674247742
&&&& MLPERF METRIC TIME= 1759.0655846595764
&&&& MLPERF METRIC TIME= 1758.889624595642
&&&& MLPERF METRIC TIME= 1759.035026550293
&&&& MLPERF METRIC TIME= 1759.035306930542
&&&& MLPERF METRIC TIME= 1758.8683264255524
:::MLLOG {"namespace": "", "time_ms": 1592957855709, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 360, "status": "success"}}
&&&& MLPERF METRIC TIME= 1759.514671087265
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ ret_code=0
+ set +x
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ ret_code=0
+ set +x
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ ret_code=0
+ set +x
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
ENDING TIMING RUN AT 2020-06-23 05:17:39 PM
RESULT,OBJECT_DETECTION,,1765,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:39 PM
RESULT,OBJECT_DETECTION,,1765,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:39 PM
RESULT,OBJECT_DETECTION,,1765,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:39 PM
RESULT,OBJECT_DETECTION,,1765,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
slurmstepd: error: _is_a_lwp: open() /proc/240598/status failed: No such file or directory
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:40 PM
RESULT,OBJECT_DETECTION,,1766,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:41 PM
RESULT,OBJECT_DETECTION,,1767,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:41 PM
RESULT,OBJECT_DETECTION,,1767,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:41 PM
RESULT,OBJECT_DETECTION,,1767,nvidia,2020-06-23 04:48:14 PM
ENDING TIMING RUN AT 2020-06-23 05:17:41 PM
RESULT,OBJECT_DETECTION,,1767,nvidia,2020-06-23 04:48:14 PM
