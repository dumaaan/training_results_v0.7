+ echo 'Beginning trial 3 of 5'
Beginning trial 3 of 5
+ srun --ntasks=4 --container-name=object_detection python -c '
from mlperf_logging.mllog import constants
from maskrcnn_benchmark.utils.mlperf_logger import mlperf_submission_log
mlperf_submission_log(constants.MASKRCNN)'
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
:::MLLOG {"namespace": "", "time_ms": 1592954287140, "event_type": "POINT_IN_TIME", "key": "submission_benchmark", "value": "maskrcnn", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 73}}
:::MLLOG {"namespace": "", "time_ms": 1592954287179, "event_type": "POINT_IN_TIME", "key": "submission_org", "value": "NVIDIA", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 78}}
:::MLLOG {"namespace": "", "time_ms": 1592954287179, "event_type": "POINT_IN_TIME", "key": "submission_division", "value": "closed", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 82}}
:::MLLOG {"namespace": "", "time_ms": 1592954287179, "event_type": "POINT_IN_TIME", "key": "submission_status", "value": "onprem", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 86}}
:::MLLOG {"namespace": "", "time_ms": 1592954287179, "event_type": "POINT_IN_TIME", "key": "submission_platform", "value": "4xNVIDIA DGX A100", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 90}}
+ '[' 1 -eq 1 ']'
+ srun --ntasks=4 bash -c 'echo -n '\''Clearing cache on '\'' && hostname && sync && sudo /sbin/sysctl vm.drop_caches=3'
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
Clearing cache on luna-0208
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
Clearing cache on luna-0207
Clearing cache on luna-0206
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
Clearing cache on luna-0205
vm.drop_caches = 3
vm.drop_caches = 3
vm.drop_caches = 3
vm.drop_caches = 3
+ srun --ntasks=4 --container-name=object_detection python -c '
from mlperf_logging.mllog import constants
from maskrcnn_benchmark.utils.mlperf_logger import log_event
log_event(key=constants.CACHE_CLEAR, value=True, stack_offset=1)'
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
:::MLLOG {"namespace": "", "time_ms": 1592954292139, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
:::MLLOG {"namespace": "", "time_ms": 1592954292171, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
:::MLLOG {"namespace": "", "time_ms": 1592954292186, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
:::MLLOG {"namespace": "", "time_ms": 1592954292195, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
+ srun --mpi=none --ntasks=32 --ntasks-per-node=8 --container-name=object_detection --container-mounts=/raid/datasets/coco/coco-2017:/data,/lustre/fsw/mlperf-ci/14126173/results:/results ./run_and_time.sh
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
coco2017
+ echo coco2017
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ declare -a CMD
+ '[' -n 1 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
++ ls /data
++ ls /data
++ ls /data
+ echo coco2017
coco2017
+ declare -a CMD
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
+ echo 'running benchmark'
+ '[' -n 5 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
coco2017
+ echo coco2017
coco2017
+ echo coco2017
+ declare -a CMD
+ declare -a CMD
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 7 ']'
+ '[' -n 3 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ '[' -n 2 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 4 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
++ ls /data
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 0 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 6 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 1 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
coco2017
+ echo coco2017
+ declare -a CMD
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
+ '[' -n 4 ']'
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
+ ln -sTf /data/coco2017 /coco
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
++ ls /data
++ ls /data
++ ls /data
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 2 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
++ ls /data
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 3 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ '[' -n 7 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ echo coco2017
coco2017
+ declare -a CMD
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ '[' -n 5 ']'
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 0 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 6 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
+ echo 'running benchmark'
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
+ echo 'running benchmark'
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ '[' -n 5 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ln -sTf /data/coco2017 /coco
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 0 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 2 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
++ ls /data
+ '[' -n 4 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ '[' -n 6 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
++ ls /data
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 7 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ echo coco2017
coco2017
+ declare -a CMD
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ '[' -n 1 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 3 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
+ echo 'running benchmark'
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
+ echo 'running benchmark'
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 1 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 04:18:14 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
++ ls /data
+ ln -sTf /data/coco2017 /coco
++ ls /data
+ echo coco2017
coco2017
+ declare -a CMD
++ ls /data
+ '[' -n 5 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
++ ls /data
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
coco2017
+ echo coco2017
coco2017
+ echo coco2017
+ declare -a CMD
+ declare -a CMD
+ '[' -n 3 ']'
+ '[' -n 7 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 4 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
++ ls /data
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 2 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 0 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 6 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
:::MLLOG {"namespace": "", "time_ms": 1592954295792, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954295834, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954295818, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954295947, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954295957, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954295933, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296013, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954295995, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296039, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296083, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296086, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296095, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296096, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296098, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296099, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296155, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296128, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296129, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296130, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296135, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296135, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296136, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296176, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296176, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296176, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296222, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296231, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296248, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296270, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296270, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296270, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954296276, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592954303961, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1920442496, "metadata": {"file": "tools/train_mlperf.py", "lineno": 318}}
2020-06-23 16:18:23,969 maskrcnn_benchmark INFO: Using 32 GPUs
2020-06-23 16:18:23,969 maskrcnn_benchmark INFO: Namespace(config_file='configs/e2e_mask_rcnn_R_50_FPN_1x.yaml', distributed=True, local_rank=0, opts=['DTYPE', 'float16', 'PATHS_CATALOG', 'maskrcnn_benchmark/config/paths_catalog_dbcluster.py', 'MODEL.WEIGHT', '/coco/models/R-50.pkl', 'DISABLE_REDUCED_LOGGING', 'True', 'SOLVER.BASE_LR', '0.16', 'SOLVER.MAX_ITER', '40000', 'SOLVER.WARMUP_FACTOR', '0.000256', 'SOLVER.WARMUP_ITERS', '625', 'SOLVER.WARMUP_METHOD', 'mlperf_linear', 'SOLVER.STEPS', '(9000,12000)', 'SOLVER.IMS_PER_BATCH', '128', 'TEST.IMS_PER_BATCH', '64', 'MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN', '4000', 'NHWC', 'True'], seed=1920442496)
2020-06-23 16:18:23,969 maskrcnn_benchmark INFO: Worker 0: Setting seed 3878960740
2020-06-23 16:18:23,969 maskrcnn_benchmark INFO: Collecting env info (might take some time)
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
2020-06-23 16:18:34,490 maskrcnn_benchmark INFO:
PyTorch version: 1.6.0a0+9907a3e
Is debug build: No
CUDA used to build PyTorch: 11.0

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.14.0

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration:
GPU 0: A100-SXM4-40GB
GPU 1: A100-SXM4-40GB
GPU 2: A100-SXM4-40GB
GPU 3: A100-SXM4-40GB
GPU 4: A100-SXM4-40GB
GPU 5: A100-SXM4-40GB
GPU 6: A100-SXM4-40GB
GPU 7: A100-SXM4-40GB

Nvidia driver version: 450.36.06
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_adv_infer.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_adv_train.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_cnn_infer.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_cnn_train.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_ops_infer.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_ops_train.so.8.0.1

Versions of relevant libraries:
[pip] msgpack-numpy==0.4.3.2
[pip] numpy==1.17.4
[pip] pytorch-transformers==1.1.0
[pip] torch==1.6.0a0+9907a3e
[pip] torchtext==0.6.0
[pip] torchvision==0.7.0a0
[conda] magma-cuda110             2.5.2                         5    local
[conda] mkl                       2019.1                      144
[conda] mkl-include               2019.1                      144
[conda] msgpack-numpy             0.4.3.2                  py36_0
[conda] nomkl                     3.0                           0
[conda] numpy                     1.17.4           py36hd5be1e1_0
[conda] numpy-base                1.17.4           py36h2f8d375_0
[conda] pytorch-transformers      1.1.0                    pypi_0    pypi
[conda] torch                     1.6.0a0+9907a3e          pypi_0    pypi
[conda] torchtext                 0.6.0                    pypi_0    pypi
[conda] torchvision               0.7.0a0                  pypi_0    pypi
        Pillow (7.1.1)
2020-06-23 16:18:34,490 maskrcnn_benchmark INFO: Loaded configuration file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml
2020-06-23 16:18:34,490 maskrcnn_benchmark INFO:
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "catalog://ImageNetPretrained/MSRA/R-50"
  BACKBONE:
    CONV_BODY: "R-50-FPN"
    OUT_CHANNELS: 256
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
  ROI_MASK_HEAD:
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    FEATURE_EXTRACTOR: "MaskRCNNFPNFeatureExtractor"
    PREDICTOR: "MaskRCNNC4Predictor"
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  MASK_ON: True
DATASETS:
  TRAIN: ("coco_2017_train",)
  TEST: ("coco_2017_val",)
DATALOADER:
  SIZE_DIVISIBILITY: 32
SOLVER:
  BASE_LR: 0.02
  WEIGHT_DECAY: 0.0001
  STEPS: (60000, 80000)
  MAX_ITER: 90000

2020-06-23 16:18:34,491 maskrcnn_benchmark INFO: Running with config:
AMP_VERBOSE: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 4
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('coco_2017_val',)
  TRAIN: ('coco_2017_train',)
DISABLE_REDUCED_LOGGING: True
DTYPE: float16
INPUT:
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (800,)
  PIXEL_MEAN: [102.9801, 115.9465, 122.7717]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MLPERF:
  MIN_BBOX_MAP: 0.377
  MIN_SEGM_MAP: 0.339
MODEL:
  BACKBONE:
    CONV_BODY: R-50-FPN
    FREEZE_CONV_BODY_AT: 2
    OUT_CHANNELS: 256
    USE_GN: False
  CLS_AGNOSTIC_BBOX_REG: False
  DEVICE: cuda
  FPN:
    USE_GN: False
    USE_RELU: False
  GROUP_NORM:
    DIM_PER_GP: -1
    EPSILON: 1e-05
    NUM_GROUPS: 32
  KEYPOINT_ON: False
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    NUM_GROUPS: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 64
  RETINANET:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDES: (8, 16, 32, 64, 128)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BBOX_REG_BETA: 0.11
    BBOX_REG_WEIGHT: 4.0
    BG_IOU_THRESHOLD: 0.4
    FG_IOU_THRESHOLD: 0.5
    INFERENCE_TH: 0.05
    LOSS_ALPHA: 0.25
    LOSS_GAMMA: 2.0
    NMS_TH: 0.4
    NUM_CLASSES: 81
    NUM_CONVS: 4
    OCTAVE: 2.0
    PRE_NMS_TOP_N: 1000
    PRIOR_PROB: 0.01
    SCALES_PER_OCTAVE: 3
    STRADDLE_THRESH: 0
    USE_C5: True
  RETINANET_ON: False
  ROI_BOX_HEAD:
    CONV_HEAD_DIM: 256
    DILATION: 1
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 81
    NUM_STACKED_CONVS: 4
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
    USE_GN: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_KEYPOINT_HEAD:
    CONV_LAYERS: (512, 512, 512, 512, 512, 512, 512, 512)
    FEATURE_EXTRACTOR: KeypointRCNNFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_SCALES: (0.0625,)
    PREDICTOR: KeypointRCNNPredictor
    RESOLUTION: 14
    SHARE_BOX_FEATURE_EXTRACTOR: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    DILATION: 1
    FEATURE_EXTRACTOR: MaskRCNNFPNFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
    USE_GN: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 4000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 2000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: /coco/models/R-50.pkl
NHWC: True
OUTPUT_DIR: .
PATHS_CATALOG: maskrcnn_benchmark/config/paths_catalog_dbcluster.py
PER_EPOCH_EVAL: True
SAVE_CHECKPOINTS: False
SOLVER:
  BASE_LR: 0.16
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 2500
  GAMMA: 0.1
  IMS_PER_BATCH: 128
  MAX_ITER: 40000
  MOMENTUM: 0.9
  STEPS: (9000, 12000)
  WARMUP_FACTOR: 0.000256
  WARMUP_ITERS: 625
  WARMUP_METHOD: mlperf_linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  DETECTIONS_PER_IMG: 100
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 64
:::MLLOG {"namespace": "", "time_ms": 1592954314492, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 128, "metadata": {"file": "tools/train_mlperf.py", "lineno": 156}}
:::MLLOG {"namespace": "", "time_ms": 1592954314492, "event_type": "POINT_IN_TIME", "key": "num_image_candidates", "value": 4000, "metadata": {"file": "tools/train_mlperf.py", "lineno": 157}}
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
:::MLLOG {"namespace": "", "time_ms": 1592954319865, "event_type": "POINT_IN_TIME", "key": "opt_name", "value": "sgd_with_momentum", "metadata": {"file": "tools/train_mlperf.py", "lineno": 171}}
:::MLLOG {"namespace": "", "time_ms": 1592954319865, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.16, "metadata": {"file": "tools/train_mlperf.py", "lineno": 172}}
:::MLLOG {"namespace": "", "time_ms": 1592954319866, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 625, "metadata": {"file": "tools/train_mlperf.py", "lineno": 173}}
:::MLLOG {"namespace": "", "time_ms": 1592954319866, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0.000256, "metadata": {"file": "tools/train_mlperf.py", "lineno": 174}}
:::MLLOG {"namespace": "", "time_ms": 1592954319866, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_factor", "value": 0.1, "metadata": {"file": "tools/train_mlperf.py", "lineno": 175}}
:::MLLOG {"namespace": "", "time_ms": 1592954319866, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [9000, 12000], "metadata": {"file": "tools/train_mlperf.py", "lineno": 176}}
:::MLLOG {"namespace": "", "time_ms": 1592954319866, "event_type": "POINT_IN_TIME", "key": "min_image_size", "value": 800, "metadata": {"file": "tools/train_mlperf.py", "lineno": 177}}
:::MLLOG {"namespace": "", "time_ms": 1592954319866, "event_type": "POINT_IN_TIME", "key": "max_image_size", "value": 1333, "metadata": {"file": "tools/train_mlperf.py", "lineno": 178}}
2020-06-23 16:18:39,875 maskrcnn_benchmark.utils.checkpoint INFO: Loading checkpoint from /coco/models/R-50.pkl
2020-06-23 16:18:39,927 maskrcnn_benchmark.utils.c2_model_loading INFO: Remapping C2 weights
2020-06-23 16:18:39,927 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: conv1_b              mapped name: conv1.bias
2020-06-23 16:18:39,927 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: conv1_w              mapped name: conv1.weight
2020-06-23 16:18:39,927 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: fc1000_b             mapped name: fc1000.bias
2020-06-23 16:18:39,927 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: fc1000_w             mapped name: fc1000.weight
2020-06-23 16:18:39,927 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_b     mapped name: layer1.0.downsample.0.bias
2020-06-23 16:18:39,927 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_bn_b  mapped name: layer1.0.downsample.1.bias
2020-06-23 16:18:39,927 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_bn_s  mapped name: layer1.0.downsample.1.weight
2020-06-23 16:18:39,927 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_w     mapped name: layer1.0.downsample.0.weight
2020-06-23 16:18:39,927 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_b    mapped name: layer1.0.conv1.bias
2020-06-23 16:18:39,927 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_bn_b mapped name: layer1.0.bn1.bias
2020-06-23 16:18:39,927 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_bn_s mapped name: layer1.0.bn1.weight
2020-06-23 16:18:39,927 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_w    mapped name: layer1.0.conv1.weight
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_b    mapped name: layer1.0.conv2.bias
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_bn_b mapped name: layer1.0.bn2.bias
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_bn_s mapped name: layer1.0.bn2.weight
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_w    mapped name: layer1.0.conv2.weight
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_b    mapped name: layer1.0.conv3.bias
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_bn_b mapped name: layer1.0.bn3.bias
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_bn_s mapped name: layer1.0.bn3.weight
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_w    mapped name: layer1.0.conv3.weight
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_b    mapped name: layer1.1.conv1.bias
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_bn_b mapped name: layer1.1.bn1.bias
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_bn_s mapped name: layer1.1.bn1.weight
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_w    mapped name: layer1.1.conv1.weight
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_b    mapped name: layer1.1.conv2.bias
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_bn_b mapped name: layer1.1.bn2.bias
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_bn_s mapped name: layer1.1.bn2.weight
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_w    mapped name: layer1.1.conv2.weight
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_b    mapped name: layer1.1.conv3.bias
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_bn_b mapped name: layer1.1.bn3.bias
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_bn_s mapped name: layer1.1.bn3.weight
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_w    mapped name: layer1.1.conv3.weight
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_b    mapped name: layer1.2.conv1.bias
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_bn_b mapped name: layer1.2.bn1.bias
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_bn_s mapped name: layer1.2.bn1.weight
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_w    mapped name: layer1.2.conv1.weight
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_b    mapped name: layer1.2.conv2.bias
2020-06-23 16:18:39,928 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_bn_b mapped name: layer1.2.bn2.bias
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_bn_s mapped name: layer1.2.bn2.weight
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_w    mapped name: layer1.2.conv2.weight
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_b    mapped name: layer1.2.conv3.bias
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_bn_b mapped name: layer1.2.bn3.bias
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_bn_s mapped name: layer1.2.bn3.weight
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_w    mapped name: layer1.2.conv3.weight
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_b     mapped name: layer2.0.downsample.0.bias
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_bn_b  mapped name: layer2.0.downsample.1.bias
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_bn_s  mapped name: layer2.0.downsample.1.weight
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_w     mapped name: layer2.0.downsample.0.weight
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_b    mapped name: layer2.0.conv1.bias
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_bn_b mapped name: layer2.0.bn1.bias
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_bn_s mapped name: layer2.0.bn1.weight
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_w    mapped name: layer2.0.conv1.weight
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_b    mapped name: layer2.0.conv2.bias
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_bn_b mapped name: layer2.0.bn2.bias
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_bn_s mapped name: layer2.0.bn2.weight
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_w    mapped name: layer2.0.conv2.weight
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_b    mapped name: layer2.0.conv3.bias
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_bn_b mapped name: layer2.0.bn3.bias
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_bn_s mapped name: layer2.0.bn3.weight
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_w    mapped name: layer2.0.conv3.weight
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_b    mapped name: layer2.1.conv1.bias
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_bn_b mapped name: layer2.1.bn1.bias
2020-06-23 16:18:39,929 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_bn_s mapped name: layer2.1.bn1.weight
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_w    mapped name: layer2.1.conv1.weight
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_b    mapped name: layer2.1.conv2.bias
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_bn_b mapped name: layer2.1.bn2.bias
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_bn_s mapped name: layer2.1.bn2.weight
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_w    mapped name: layer2.1.conv2.weight
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_b    mapped name: layer2.1.conv3.bias
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_bn_b mapped name: layer2.1.bn3.bias
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_bn_s mapped name: layer2.1.bn3.weight
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_w    mapped name: layer2.1.conv3.weight
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_b    mapped name: layer2.2.conv1.bias
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_bn_b mapped name: layer2.2.bn1.bias
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_bn_s mapped name: layer2.2.bn1.weight
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_w    mapped name: layer2.2.conv1.weight
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_b    mapped name: layer2.2.conv2.bias
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_bn_b mapped name: layer2.2.bn2.bias
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_bn_s mapped name: layer2.2.bn2.weight
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_w    mapped name: layer2.2.conv2.weight
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_b    mapped name: layer2.2.conv3.bias
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_bn_b mapped name: layer2.2.bn3.bias
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_bn_s mapped name: layer2.2.bn3.weight
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_w    mapped name: layer2.2.conv3.weight
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_b    mapped name: layer2.3.conv1.bias
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_bn_b mapped name: layer2.3.bn1.bias
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_bn_s mapped name: layer2.3.bn1.weight
2020-06-23 16:18:39,930 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_w    mapped name: layer2.3.conv1.weight
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_b    mapped name: layer2.3.conv2.bias
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_bn_b mapped name: layer2.3.bn2.bias
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_bn_s mapped name: layer2.3.bn2.weight
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_w    mapped name: layer2.3.conv2.weight
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_b    mapped name: layer2.3.conv3.bias
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_bn_b mapped name: layer2.3.bn3.bias
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_bn_s mapped name: layer2.3.bn3.weight
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_w    mapped name: layer2.3.conv3.weight
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_b     mapped name: layer3.0.downsample.0.bias
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_bn_b  mapped name: layer3.0.downsample.1.bias
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_bn_s  mapped name: layer3.0.downsample.1.weight
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_w     mapped name: layer3.0.downsample.0.weight
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_b    mapped name: layer3.0.conv1.bias
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_bn_b mapped name: layer3.0.bn1.bias
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_bn_s mapped name: layer3.0.bn1.weight
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_w    mapped name: layer3.0.conv1.weight
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_b    mapped name: layer3.0.conv2.bias
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_bn_b mapped name: layer3.0.bn2.bias
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_bn_s mapped name: layer3.0.bn2.weight
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_w    mapped name: layer3.0.conv2.weight
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_b    mapped name: layer3.0.conv3.bias
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_bn_b mapped name: layer3.0.bn3.bias
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_bn_s mapped name: layer3.0.bn3.weight
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_w    mapped name: layer3.0.conv3.weight
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_b    mapped name: layer3.1.conv1.bias
2020-06-23 16:18:39,931 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_bn_b mapped name: layer3.1.bn1.bias
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_bn_s mapped name: layer3.1.bn1.weight
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_w    mapped name: layer3.1.conv1.weight
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_b    mapped name: layer3.1.conv2.bias
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_bn_b mapped name: layer3.1.bn2.bias
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_bn_s mapped name: layer3.1.bn2.weight
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_w    mapped name: layer3.1.conv2.weight
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_b    mapped name: layer3.1.conv3.bias
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_bn_b mapped name: layer3.1.bn3.bias
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_bn_s mapped name: layer3.1.bn3.weight
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_w    mapped name: layer3.1.conv3.weight
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_b    mapped name: layer3.2.conv1.bias
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_bn_b mapped name: layer3.2.bn1.bias
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_bn_s mapped name: layer3.2.bn1.weight
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_w    mapped name: layer3.2.conv1.weight
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_b    mapped name: layer3.2.conv2.bias
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_bn_b mapped name: layer3.2.bn2.bias
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_bn_s mapped name: layer3.2.bn2.weight
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_w    mapped name: layer3.2.conv2.weight
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_b    mapped name: layer3.2.conv3.bias
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_bn_b mapped name: layer3.2.bn3.bias
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_bn_s mapped name: layer3.2.bn3.weight
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_w    mapped name: layer3.2.conv3.weight
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_b    mapped name: layer3.3.conv1.bias
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_bn_b mapped name: layer3.3.bn1.bias
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_bn_s mapped name: layer3.3.bn1.weight
2020-06-23 16:18:39,932 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_w    mapped name: layer3.3.conv1.weight
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_b    mapped name: layer3.3.conv2.bias
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_bn_b mapped name: layer3.3.bn2.bias
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_bn_s mapped name: layer3.3.bn2.weight
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_w    mapped name: layer3.3.conv2.weight
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_b    mapped name: layer3.3.conv3.bias
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_bn_b mapped name: layer3.3.bn3.bias
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_bn_s mapped name: layer3.3.bn3.weight
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_w    mapped name: layer3.3.conv3.weight
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_b    mapped name: layer3.4.conv1.bias
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_bn_b mapped name: layer3.4.bn1.bias
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_bn_s mapped name: layer3.4.bn1.weight
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_w    mapped name: layer3.4.conv1.weight
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_b    mapped name: layer3.4.conv2.bias
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_bn_b mapped name: layer3.4.bn2.bias
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_bn_s mapped name: layer3.4.bn2.weight
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_w    mapped name: layer3.4.conv2.weight
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_b    mapped name: layer3.4.conv3.bias
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_bn_b mapped name: layer3.4.bn3.bias
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_bn_s mapped name: layer3.4.bn3.weight
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_w    mapped name: layer3.4.conv3.weight
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_b    mapped name: layer3.5.conv1.bias
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_bn_b mapped name: layer3.5.bn1.bias
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_bn_s mapped name: layer3.5.bn1.weight
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_w    mapped name: layer3.5.conv1.weight
2020-06-23 16:18:39,933 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_b    mapped name: layer3.5.conv2.bias
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_bn_b mapped name: layer3.5.bn2.bias
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_bn_s mapped name: layer3.5.bn2.weight
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_w    mapped name: layer3.5.conv2.weight
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_b    mapped name: layer3.5.conv3.bias
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_bn_b mapped name: layer3.5.bn3.bias
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_bn_s mapped name: layer3.5.bn3.weight
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_w    mapped name: layer3.5.conv3.weight
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_b     mapped name: layer4.0.downsample.0.bias
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_bn_b  mapped name: layer4.0.downsample.1.bias
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_bn_s  mapped name: layer4.0.downsample.1.weight
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_w     mapped name: layer4.0.downsample.0.weight
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_b    mapped name: layer4.0.conv1.bias
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_bn_b mapped name: layer4.0.bn1.bias
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_bn_s mapped name: layer4.0.bn1.weight
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_w    mapped name: layer4.0.conv1.weight
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_b    mapped name: layer4.0.conv2.bias
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_bn_b mapped name: layer4.0.bn2.bias
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_bn_s mapped name: layer4.0.bn2.weight
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_w    mapped name: layer4.0.conv2.weight
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_b    mapped name: layer4.0.conv3.bias
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_bn_b mapped name: layer4.0.bn3.bias
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_bn_s mapped name: layer4.0.bn3.weight
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_w    mapped name: layer4.0.conv3.weight
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_b    mapped name: layer4.1.conv1.bias
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_bn_b mapped name: layer4.1.bn1.bias
2020-06-23 16:18:39,934 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_bn_s mapped name: layer4.1.bn1.weight
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_w    mapped name: layer4.1.conv1.weight
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_b    mapped name: layer4.1.conv2.bias
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_bn_b mapped name: layer4.1.bn2.bias
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_bn_s mapped name: layer4.1.bn2.weight
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_w    mapped name: layer4.1.conv2.weight
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_b    mapped name: layer4.1.conv3.bias
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_bn_b mapped name: layer4.1.bn3.bias
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_bn_s mapped name: layer4.1.bn3.weight
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_w    mapped name: layer4.1.conv3.weight
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_b    mapped name: layer4.2.conv1.bias
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_bn_b mapped name: layer4.2.bn1.bias
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_bn_s mapped name: layer4.2.bn1.weight
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_w    mapped name: layer4.2.conv1.weight
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_b    mapped name: layer4.2.conv2.bias
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_bn_b mapped name: layer4.2.bn2.bias
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_bn_s mapped name: layer4.2.bn2.weight
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_w    mapped name: layer4.2.conv2.weight
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_b    mapped name: layer4.2.conv3.bias
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_bn_b mapped name: layer4.2.bn3.bias
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_bn_s mapped name: layer4.2.bn3.weight
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_w    mapped name: layer4.2.conv3.weight
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res_conv1_bn_b       mapped name: bn1.bias
2020-06-23 16:18:39,935 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res_conv1_bn_s       mapped name: bn1.weight
2020-06-23 16:18:39,949 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn1.bias                   loaded from layer1.0.bn1.bias            of shape (64,)
2020-06-23 16:18:39,949 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn1.weight                 loaded from layer1.0.bn1.weight          of shape (64,)
2020-06-23 16:18:39,949 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn2.bias                   loaded from layer1.0.bn2.bias            of shape (64,)
2020-06-23 16:18:39,949 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn2.weight                 loaded from layer1.0.bn2.weight          of shape (64,)
2020-06-23 16:18:39,949 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn3.bias                   loaded from layer1.0.bn3.bias            of shape (256,)
2020-06-23 16:18:39,949 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn3.weight                 loaded from layer1.0.bn3.weight          of shape (256,)
2020-06-23 16:18:39,949 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.conv1.weight               loaded from layer1.0.conv1.weight        of shape (64, 64, 1, 1)
2020-06-23 16:18:39,949 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.conv2.weight               loaded from layer1.0.conv2.weight        of shape (64, 64, 3, 3)
2020-06-23 16:18:39,949 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.conv3.weight               loaded from layer1.0.conv3.weight        of shape (256, 64, 1, 1)
2020-06-23 16:18:39,949 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.downsample.0.weight        loaded from layer1.0.downsample.0.weight of shape (256, 64, 1, 1)
2020-06-23 16:18:39,949 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.downsample.1.bias          loaded from layer1.0.downsample.1.bias   of shape (256,)
2020-06-23 16:18:39,949 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.downsample.1.weight        loaded from layer1.0.downsample.1.weight of shape (256,)
2020-06-23 16:18:39,949 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn1.bias                   loaded from layer1.1.bn1.bias            of shape (64,)
2020-06-23 16:18:39,949 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn1.weight                 loaded from layer1.1.bn1.weight          of shape (64,)
2020-06-23 16:18:39,949 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn2.bias                   loaded from layer1.1.bn2.bias            of shape (64,)
2020-06-23 16:18:39,949 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn2.weight                 loaded from layer1.1.bn2.weight          of shape (64,)
2020-06-23 16:18:39,949 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn3.bias                   loaded from layer1.1.bn3.bias            of shape (256,)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn3.weight                 loaded from layer1.1.bn3.weight          of shape (256,)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.conv1.weight               loaded from layer1.1.conv1.weight        of shape (64, 256, 1, 1)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.conv2.weight               loaded from layer1.1.conv2.weight        of shape (64, 64, 3, 3)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.conv3.weight               loaded from layer1.1.conv3.weight        of shape (256, 64, 1, 1)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn1.bias                   loaded from layer1.2.bn1.bias            of shape (64,)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn1.weight                 loaded from layer1.2.bn1.weight          of shape (64,)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn2.bias                   loaded from layer1.2.bn2.bias            of shape (64,)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn2.weight                 loaded from layer1.2.bn2.weight          of shape (64,)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn3.bias                   loaded from layer1.2.bn3.bias            of shape (256,)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn3.weight                 loaded from layer1.2.bn3.weight          of shape (256,)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.conv1.weight               loaded from layer1.2.conv1.weight        of shape (64, 256, 1, 1)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.conv2.weight               loaded from layer1.2.conv2.weight        of shape (64, 64, 3, 3)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.conv3.weight               loaded from layer1.2.conv3.weight        of shape (256, 64, 1, 1)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn1.bias                   loaded from layer2.0.bn1.bias            of shape (128,)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn1.weight                 loaded from layer2.0.bn1.weight          of shape (128,)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn2.bias                   loaded from layer2.0.bn2.bias            of shape (128,)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn2.weight                 loaded from layer2.0.bn2.weight          of shape (128,)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn3.bias                   loaded from layer2.0.bn3.bias            of shape (512,)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn3.weight                 loaded from layer2.0.bn3.weight          of shape (512,)
2020-06-23 16:18:39,950 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.conv1.weight               loaded from layer2.0.conv1.weight        of shape (128, 256, 1, 1)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.conv2.weight               loaded from layer2.0.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.conv3.weight               loaded from layer2.0.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.downsample.0.weight        loaded from layer2.0.downsample.0.weight of shape (512, 256, 1, 1)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.downsample.1.bias          loaded from layer2.0.downsample.1.bias   of shape (512,)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.downsample.1.weight        loaded from layer2.0.downsample.1.weight of shape (512,)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn1.bias                   loaded from layer2.1.bn1.bias            of shape (128,)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn1.weight                 loaded from layer2.1.bn1.weight          of shape (128,)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn2.bias                   loaded from layer2.1.bn2.bias            of shape (128,)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn2.weight                 loaded from layer2.1.bn2.weight          of shape (128,)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn3.bias                   loaded from layer2.1.bn3.bias            of shape (512,)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn3.weight                 loaded from layer2.1.bn3.weight          of shape (512,)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.conv1.weight               loaded from layer2.1.conv1.weight        of shape (128, 512, 1, 1)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.conv2.weight               loaded from layer2.1.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.conv3.weight               loaded from layer2.1.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn1.bias                   loaded from layer2.2.bn1.bias            of shape (128,)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn1.weight                 loaded from layer2.2.bn1.weight          of shape (128,)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn2.bias                   loaded from layer2.2.bn2.bias            of shape (128,)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn2.weight                 loaded from layer2.2.bn2.weight          of shape (128,)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn3.bias                   loaded from layer2.2.bn3.bias            of shape (512,)
2020-06-23 16:18:39,951 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn3.weight                 loaded from layer2.2.bn3.weight          of shape (512,)
2020-06-23 16:18:39,952 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.conv1.weight               loaded from layer2.2.conv1.weight        of shape (128, 512, 1, 1)
2020-06-23 16:18:39,952 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.conv2.weight               loaded from layer2.2.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 16:18:39,952 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.conv3.weight               loaded from layer2.2.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 16:18:39,952 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn1.bias                   loaded from layer2.3.bn1.bias            of shape (128,)
2020-06-23 16:18:39,952 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn1.weight                 loaded from layer2.3.bn1.weight          of shape (128,)
2020-06-23 16:18:39,952 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn2.bias                   loaded from layer2.3.bn2.bias            of shape (128,)
2020-06-23 16:18:39,952 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn2.weight                 loaded from layer2.3.bn2.weight          of shape (128,)
2020-06-23 16:18:39,952 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn3.bias                   loaded from layer2.3.bn3.bias            of shape (512,)
2020-06-23 16:18:39,952 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn3.weight                 loaded from layer2.3.bn3.weight          of shape (512,)
2020-06-23 16:18:39,952 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.conv1.weight               loaded from layer2.3.conv1.weight        of shape (128, 512, 1, 1)
2020-06-23 16:18:39,952 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.conv2.weight               loaded from layer2.3.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 16:18:39,952 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.conv3.weight               loaded from layer2.3.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 16:18:39,952 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn1.bias                   loaded from layer3.0.bn1.bias            of shape (256,)
2020-06-23 16:18:39,952 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn1.weight                 loaded from layer3.0.bn1.weight          of shape (256,)
2020-06-23 16:18:39,952 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn2.bias                   loaded from layer3.0.bn2.bias            of shape (256,)
2020-06-23 16:18:39,952 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn2.weight                 loaded from layer3.0.bn2.weight          of shape (256,)
2020-06-23 16:18:39,952 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn3.bias                   loaded from layer3.0.bn3.bias            of shape (1024,)
2020-06-23 16:18:39,952 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn3.weight                 loaded from layer3.0.bn3.weight          of shape (1024,)
2020-06-23 16:18:39,953 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.conv1.weight               loaded from layer3.0.conv1.weight        of shape (256, 512, 1, 1)
2020-06-23 16:18:39,953 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.conv2.weight               loaded from layer3.0.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 16:18:39,953 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.conv3.weight               loaded from layer3.0.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 16:18:39,953 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.downsample.0.weight        loaded from layer3.0.downsample.0.weight of shape (1024, 512, 1, 1)
2020-06-23 16:18:39,953 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.downsample.1.bias          loaded from layer3.0.downsample.1.bias   of shape (1024,)
2020-06-23 16:18:39,953 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.downsample.1.weight        loaded from layer3.0.downsample.1.weight of shape (1024,)
2020-06-23 16:18:39,953 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn1.bias                   loaded from layer3.1.bn1.bias            of shape (256,)
2020-06-23 16:18:39,953 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn1.weight                 loaded from layer3.1.bn1.weight          of shape (256,)
2020-06-23 16:18:39,953 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn2.bias                   loaded from layer3.1.bn2.bias            of shape (256,)
2020-06-23 16:18:39,953 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn2.weight                 loaded from layer3.1.bn2.weight          of shape (256,)
2020-06-23 16:18:39,953 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn3.bias                   loaded from layer3.1.bn3.bias            of shape (1024,)
2020-06-23 16:18:39,953 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn3.weight                 loaded from layer3.1.bn3.weight          of shape (1024,)
2020-06-23 16:18:39,953 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.conv1.weight               loaded from layer3.1.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 16:18:39,954 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.conv2.weight               loaded from layer3.1.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 16:18:39,954 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.conv3.weight               loaded from layer3.1.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 16:18:39,954 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn1.bias                   loaded from layer3.2.bn1.bias            of shape (256,)
2020-06-23 16:18:39,954 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn1.weight                 loaded from layer3.2.bn1.weight          of shape (256,)
2020-06-23 16:18:39,954 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn2.bias                   loaded from layer3.2.bn2.bias            of shape (256,)
2020-06-23 16:18:39,954 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn2.weight                 loaded from layer3.2.bn2.weight          of shape (256,)
2020-06-23 16:18:39,954 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn3.bias                   loaded from layer3.2.bn3.bias            of shape (1024,)
2020-06-23 16:18:39,954 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn3.weight                 loaded from layer3.2.bn3.weight          of shape (1024,)
2020-06-23 16:18:39,954 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.conv1.weight               loaded from layer3.2.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 16:18:39,955 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.conv2.weight               loaded from layer3.2.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 16:18:39,955 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.conv3.weight               loaded from layer3.2.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 16:18:39,955 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn1.bias                   loaded from layer3.3.bn1.bias            of shape (256,)
2020-06-23 16:18:39,955 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn1.weight                 loaded from layer3.3.bn1.weight          of shape (256,)
2020-06-23 16:18:39,955 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn2.bias                   loaded from layer3.3.bn2.bias            of shape (256,)
2020-06-23 16:18:39,955 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn2.weight                 loaded from layer3.3.bn2.weight          of shape (256,)
2020-06-23 16:18:39,955 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn3.bias                   loaded from layer3.3.bn3.bias            of shape (1024,)
2020-06-23 16:18:39,955 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn3.weight                 loaded from layer3.3.bn3.weight          of shape (1024,)
2020-06-23 16:18:39,955 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.conv1.weight               loaded from layer3.3.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 16:18:39,956 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.conv2.weight               loaded from layer3.3.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 16:18:39,956 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.conv3.weight               loaded from layer3.3.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 16:18:39,956 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn1.bias                   loaded from layer3.4.bn1.bias            of shape (256,)
2020-06-23 16:18:39,956 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn1.weight                 loaded from layer3.4.bn1.weight          of shape (256,)
2020-06-23 16:18:39,956 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn2.bias                   loaded from layer3.4.bn2.bias            of shape (256,)
2020-06-23 16:18:39,956 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn2.weight                 loaded from layer3.4.bn2.weight          of shape (256,)
2020-06-23 16:18:39,956 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn3.bias                   loaded from layer3.4.bn3.bias            of shape (1024,)
2020-06-23 16:18:39,956 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn3.weight                 loaded from layer3.4.bn3.weight          of shape (1024,)
2020-06-23 16:18:39,956 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.conv1.weight               loaded from layer3.4.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 16:18:39,956 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.conv2.weight               loaded from layer3.4.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 16:18:39,956 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.conv3.weight               loaded from layer3.4.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 16:18:39,956 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn1.bias                   loaded from layer3.5.bn1.bias            of shape (256,)
2020-06-23 16:18:39,957 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn1.weight                 loaded from layer3.5.bn1.weight          of shape (256,)
2020-06-23 16:18:39,957 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn2.bias                   loaded from layer3.5.bn2.bias            of shape (256,)
2020-06-23 16:18:39,957 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn2.weight                 loaded from layer3.5.bn2.weight          of shape (256,)
2020-06-23 16:18:39,957 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn3.bias                   loaded from layer3.5.bn3.bias            of shape (1024,)
2020-06-23 16:18:39,957 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn3.weight                 loaded from layer3.5.bn3.weight          of shape (1024,)
2020-06-23 16:18:39,957 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.conv1.weight               loaded from layer3.5.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 16:18:39,957 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.conv2.weight               loaded from layer3.5.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 16:18:39,957 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.conv3.weight               loaded from layer3.5.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 16:18:39,957 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn1.bias                   loaded from layer4.0.bn1.bias            of shape (512,)
2020-06-23 16:18:39,957 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn1.weight                 loaded from layer4.0.bn1.weight          of shape (512,)
2020-06-23 16:18:39,957 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn2.bias                   loaded from layer4.0.bn2.bias            of shape (512,)
2020-06-23 16:18:39,957 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn2.weight                 loaded from layer4.0.bn2.weight          of shape (512,)
2020-06-23 16:18:39,957 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn3.bias                   loaded from layer4.0.bn3.bias            of shape (2048,)
2020-06-23 16:18:39,957 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn3.weight                 loaded from layer4.0.bn3.weight          of shape (2048,)
2020-06-23 16:18:39,958 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.conv1.weight               loaded from layer4.0.conv1.weight        of shape (512, 1024, 1, 1)
2020-06-23 16:18:39,959 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.conv2.weight               loaded from layer4.0.conv2.weight        of shape (512, 512, 3, 3)
2020-06-23 16:18:39,960 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.conv3.weight               loaded from layer4.0.conv3.weight        of shape (2048, 512, 1, 1)
2020-06-23 16:18:39,960 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.downsample.0.weight        loaded from layer4.0.downsample.0.weight of shape (2048, 1024, 1, 1)
2020-06-23 16:18:39,960 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.downsample.1.bias          loaded from layer4.0.downsample.1.bias   of shape (2048,)
2020-06-23 16:18:39,960 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.downsample.1.weight        loaded from layer4.0.downsample.1.weight of shape (2048,)
2020-06-23 16:18:39,960 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn1.bias                   loaded from layer4.1.bn1.bias            of shape (512,)
2020-06-23 16:18:39,960 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn1.weight                 loaded from layer4.1.bn1.weight          of shape (512,)
2020-06-23 16:18:39,960 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn2.bias                   loaded from layer4.1.bn2.bias            of shape (512,)
2020-06-23 16:18:39,960 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn2.weight                 loaded from layer4.1.bn2.weight          of shape (512,)
2020-06-23 16:18:39,960 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn3.bias                   loaded from layer4.1.bn3.bias            of shape (2048,)
2020-06-23 16:18:39,960 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn3.weight                 loaded from layer4.1.bn3.weight          of shape (2048,)
2020-06-23 16:18:39,960 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.conv1.weight               loaded from layer4.1.conv1.weight        of shape (512, 2048, 1, 1)
2020-06-23 16:18:39,963 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.conv2.weight               loaded from layer4.1.conv2.weight        of shape (512, 512, 3, 3)
2020-06-23 16:18:39,964 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.conv3.weight               loaded from layer4.1.conv3.weight        of shape (2048, 512, 1, 1)
2020-06-23 16:18:39,964 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn1.bias                   loaded from layer4.2.bn1.bias            of shape (512,)
2020-06-23 16:18:39,964 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn1.weight                 loaded from layer4.2.bn1.weight          of shape (512,)
2020-06-23 16:18:39,964 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn2.bias                   loaded from layer4.2.bn2.bias            of shape (512,)
2020-06-23 16:18:39,964 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn2.weight                 loaded from layer4.2.bn2.weight          of shape (512,)
2020-06-23 16:18:39,964 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn3.bias                   loaded from layer4.2.bn3.bias            of shape (2048,)
2020-06-23 16:18:39,964 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn3.weight                 loaded from layer4.2.bn3.weight          of shape (2048,)
2020-06-23 16:18:39,964 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.conv1.weight               loaded from layer4.2.conv1.weight        of shape (512, 2048, 1, 1)
2020-06-23 16:18:39,967 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.conv2.weight               loaded from layer4.2.conv2.weight        of shape (512, 512, 3, 3)
2020-06-23 16:18:39,967 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.conv3.weight               loaded from layer4.2.conv3.weight        of shape (2048, 512, 1, 1)
2020-06-23 16:18:39,967 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.stem.bn1.bias                       loaded from bn1.bias                     of shape (64,)
2020-06-23 16:18:39,967 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.stem.bn1.weight                     loaded from bn1.weight                   of shape (64,)
2020-06-23 16:18:39,968 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.stem.conv1.weight                   loaded from conv1.weight                 of shape (64, 3, 7, 7)
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
:::MLLOG {"namespace": "", "time_ms": 1592954322473, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 205}}
:::MLLOG {"namespace": "", "time_ms": 1592954322542, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 207}}
2020-06-23 16:18:42,543 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
Done (t=6.88s)
creating index...
Done (t=6.98s)
creating index...
Done (t=7.01s)
creating index...
Done (t=6.94s)
creating index...
Done (t=6.80s)
creating index...
Done (t=6.89s)
creating index...
Done (t=7.10s)
creating index...
Done (t=6.88s)
creating index...
Done (t=6.89s)
creating index...
Done (t=7.11s)
creating index...
Done (t=6.96s)
creating index...
Done (t=6.93s)
creating index...
Done (t=6.92s)
creating index...
Done (t=7.08s)
creating index...
Done (t=6.99s)
creating index...
Done (t=6.94s)
creating index...
Done (t=6.82s)
creating index...
Done (t=7.12s)
creating index...
Done (t=7.01s)
creating index...
Done (t=7.20s)
creating index...
Done (t=7.14s)
creating index...
Done (t=6.96s)
creating index...
Done (t=7.20s)
creating index...
Done (t=7.25s)
creating index...
index created!
Done (t=6.99s)
creating index...
Done (t=7.32s)
creating index...
Done (t=7.36s)
creating index...
index created!
index created!
Done (t=7.32s)
creating index...
Done (t=7.42s)
creating index...
index created!
Done (t=7.32s)
creating index...
index created!
Done (t=7.43s)
creating index...
index created!
index created!
index created!
index created!
Done (t=7.53s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
:::MLLOG {"namespace": "", "time_ms": 1592954332558, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 40000, "metadata": {"file": "tools/train_mlperf.py", "lineno": 217}}
2020-06-23 16:18:52,558 maskrcnn_benchmark.trainer INFO: Start training
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
:::MLLOG {"namespace": "", "time_ms": 1592954333963, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 130, "first_epoch_num": 1, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592954333964, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 131, "epoch_num": 1}}
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)



Grad overflow on iteration  0
Using dynamic loss scale of  65536


Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536


Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Grad overflow on iteration  0
Using dynamic loss scale of  65536


Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536


Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536


Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536


Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0




Grad overflow on iteration  1

Grad overflow on iteration  1

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1

Grad overflow on iteration  1

Grad overflow on iteration  1


Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0


Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1

Grad overflow on iteration  1
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0


Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0


Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0


Grad overflow on iteration  1
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0



Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Grad overflow on iteration  2
Grad overflow on iteration  2

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0


Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0


Grad overflow on iteration  3
Using dynamic loss scale of  8192.0


Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0


Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Grad overflow on iteration  3

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Using dynamic loss scale of  8192.0

Using dynamic loss scale of  8192.0
Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Grad overflow on iteration  3

Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0


Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4


Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4

Grad overflow on iteration  4

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0
Grad overflow on iteration  4
Using dynamic loss scale of  4096.0


Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0


Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0


Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Using dynamic loss scale of  4096.0
Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0


Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0


Grad overflow on iteration  5

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0


Grad overflow on iteration  5

Using dynamic loss scale of  2048.0
Grad overflow on iteration  5

Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Grad overflow on iteration  5

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0


Grad overflow on iteration  6

Grad overflow on iteration  6
Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0


Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6

Using dynamic loss scale of  1024.0
Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Grad overflow on iteration  6
Using dynamic loss scale of  1024.0


Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0


Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
2020-06-23 16:19:00,215 maskrcnn_benchmark.trainer INFO: eta: 4:15:03  iter: 20  loss: 2.1881 (4.0356)  loss_classifier: 1.1120 (2.4435)  loss_box_reg: 0.0218 (0.0267)  loss_mask: 0.9940 (1.0032)  loss_objectness: 0.6014 (0.5196)  loss_rpn_box_reg: 0.0211 (0.0426)  time: 0.1054 (0.3828)  data: 0.0013 (0.0717)  lr: 0.005120  max mem: 4153
2020-06-23 16:19:02,322 maskrcnn_benchmark.trainer INFO: eta: 2:42:32  iter: 40  loss: 1.4011 (2.7658)  loss_classifier: 0.3475 (1.4480)  loss_box_reg: 0.0820 (0.0618)  loss_mask: 0.6906 (0.8481)  loss_objectness: 0.1480 (0.3649)  loss_rpn_box_reg: 0.0216 (0.0431)  time: 0.1045 (0.2441)  data: 0.0014 (0.0365)  lr: 0.010240  max mem: 4529
2020-06-23 16:19:04,369 maskrcnn_benchmark.trainer INFO: eta: 2:11:00  iter: 60  loss: 1.1306 (2.2393)  loss_classifier: 0.2785 (1.0608)  loss_box_reg: 0.0652 (0.0663)  loss_mask: 0.6765 (0.7905)  loss_objectness: 0.1108 (0.2846)  loss_rpn_box_reg: 0.0113 (0.0371)  time: 0.1016 (0.1968)  data: 0.0014 (0.0248)  lr: 0.015360  max mem: 4529
2020-06-23 16:19:06,413 maskrcnn_benchmark.trainer INFO: eta: 1:55:12  iter: 80  loss: 1.2279 (1.9993)  loss_classifier: 0.2765 (0.8801)  loss_box_reg: 0.0800 (0.0720)  loss_mask: 0.6598 (0.7582)  loss_objectness: 0.1342 (0.2503)  loss_rpn_box_reg: 0.0186 (0.0386)  time: 0.1020 (0.1732)  data: 0.0015 (0.0190)  lr: 0.020480  max mem: 4529
2020-06-23 16:19:08,461 maskrcnn_benchmark.trainer INFO: eta: 1:45:44  iter: 100  loss: 1.2786 (1.8562)  loss_classifier: 0.3710 (0.7822)  loss_box_reg: 0.1125 (0.0807)  loss_mask: 0.6363 (0.7362)  loss_objectness: 0.0969 (0.2214)  loss_rpn_box_reg: 0.0196 (0.0357)  time: 0.1018 (0.1590)  data: 0.0014 (0.0155)  lr: 0.025600  max mem: 4529
2020-06-23 16:19:10,549 maskrcnn_benchmark.trainer INFO: eta: 1:39:38  iter: 120  loss: 1.4757 (1.7958)  loss_classifier: 0.5023 (0.7379)  loss_box_reg: 0.1634 (0.0966)  loss_mask: 0.6146 (0.7155)  loss_objectness: 0.0773 (0.2070)  loss_rpn_box_reg: 0.0166 (0.0389)  time: 0.1029 (0.1499)  data: 0.0016 (0.0132)  lr: 0.030720  max mem: 4545
2020-06-23 16:19:12,648 maskrcnn_benchmark.trainer INFO: eta: 1:35:19  iter: 140  loss: 1.3559 (1.7413)  loss_classifier: 0.4742 (0.7073)  loss_box_reg: 0.1930 (0.1107)  loss_mask: 0.5947 (0.6978)  loss_objectness: 0.0588 (0.1876)  loss_rpn_box_reg: 0.0129 (0.0378)  time: 0.1047 (0.1435)  data: 0.0015 (0.0115)  lr: 0.035840  max mem: 4545
2020-06-23 16:19:14,746 maskrcnn_benchmark.trainer INFO: eta: 1:32:04  iter: 160  loss: 1.2448 (1.6897)  loss_classifier: 0.4354 (0.6802)  loss_box_reg: 0.1540 (0.1198)  loss_mask: 0.5371 (0.6785)  loss_objectness: 0.0605 (0.1743)  loss_rpn_box_reg: 0.0181 (0.0368)  time: 0.1043 (0.1387)  data: 0.0013 (0.0102)  lr: 0.040960  max mem: 4583
2020-06-23 16:19:16,838 maskrcnn_benchmark.trainer INFO: eta: 1:29:30  iter: 180  loss: 1.1828 (1.6444)  loss_classifier: 0.4533 (0.6605)  loss_box_reg: 0.1811 (0.1282)  loss_mask: 0.5180 (0.6603)  loss_objectness: 0.0460 (0.1610)  loss_rpn_box_reg: 0.0096 (0.0345)  time: 0.1046 (0.1349)  data: 0.0014 (0.0093)  lr: 0.046080  max mem: 4601
2020-06-23 16:19:18,906 maskrcnn_benchmark.trainer INFO: eta: 1:27:22  iter: 200  loss: 1.3078 (1.6118)  loss_classifier: 0.4959 (0.6470)  loss_box_reg: 0.1903 (0.1340)  loss_mask: 0.5144 (0.6457)  loss_objectness: 0.0505 (0.1515)  loss_rpn_box_reg: 0.0098 (0.0336)  time: 0.1029 (0.1317)  data: 0.0013 (0.0085)  lr: 0.051200  max mem: 4633
2020-06-23 16:19:21,028 maskrcnn_benchmark.trainer INFO: eta: 1:25:47  iter: 220  loss: 1.1916 (1.5829)  loss_classifier: 0.4915 (0.6361)  loss_box_reg: 0.2001 (0.1407)  loss_mask: 0.4641 (0.6300)  loss_objectness: 0.0489 (0.1434)  loss_rpn_box_reg: 0.0137 (0.0326)  time: 0.1054 (0.1294)  data: 0.0014 (0.0078)  lr: 0.056320  max mem: 4809
2020-06-23 16:19:23,125 maskrcnn_benchmark.trainer INFO: eta: 1:24:23  iter: 240  loss: 1.2022 (1.5572)  loss_classifier: 0.4840 (0.6250)  loss_box_reg: 0.1687 (0.1443)  loss_mask: 0.4655 (0.6175)  loss_objectness: 0.0530 (0.1382)  loss_rpn_box_reg: 0.0188 (0.0322)  time: 0.1042 (0.1274)  data: 0.0014 (0.0073)  lr: 0.061440  max mem: 4809
2020-06-23 16:19:25,232 maskrcnn_benchmark.trainer INFO: eta: 1:23:13  iter: 260  loss: 1.2020 (1.5333)  loss_classifier: 0.4978 (0.6153)  loss_box_reg: 0.1817 (0.1473)  loss_mask: 0.4579 (0.6062)  loss_objectness: 0.0535 (0.1329)  loss_rpn_box_reg: 0.0136 (0.0316)  time: 0.1043 (0.1257)  data: 0.0014 (0.0069)  lr: 0.066560  max mem: 4809
2020-06-23 16:19:27,342 maskrcnn_benchmark.trainer INFO: eta: 1:22:14  iter: 280  loss: 1.2575 (1.5130)  loss_classifier: 0.4882 (0.6079)  loss_box_reg: 0.1825 (0.1509)  loss_mask: 0.4401 (0.5946)  loss_objectness: 0.0403 (0.1283)  loss_rpn_box_reg: 0.0108 (0.0313)  time: 0.1057 (0.1242)  data: 0.0014 (0.0065)  lr: 0.071680  max mem: 4809
2020-06-23 16:19:29,447 maskrcnn_benchmark.trainer INFO: eta: 1:21:21  iter: 300  loss: 1.1570 (1.4904)  loss_classifier: 0.4560 (0.5987)  loss_box_reg: 0.1751 (0.1531)  loss_mask: 0.4316 (0.5845)  loss_objectness: 0.0444 (0.1234)  loss_rpn_box_reg: 0.0117 (0.0306)  time: 0.1053 (0.1230)  data: 0.0014 (0.0062)  lr: 0.076800  max mem: 4809
2020-06-23 16:19:31,553 maskrcnn_benchmark.trainer INFO: eta: 1:20:35  iter: 320  loss: 1.2357 (1.4757)  loss_classifier: 0.5180 (0.5952)  loss_box_reg: 0.1603 (0.1559)  loss_mask: 0.4285 (0.5743)  loss_objectness: 0.0416 (0.1196)  loss_rpn_box_reg: 0.0164 (0.0306)  time: 0.1053 (0.1219)  data: 0.0014 (0.0059)  lr: 0.081920  max mem: 4954
2020-06-23 16:19:33,645 maskrcnn_benchmark.trainer INFO: eta: 1:19:52  iter: 340  loss: 1.0779 (1.4550)  loss_classifier: 0.4448 (0.5867)  loss_box_reg: 0.1751 (0.1570)  loss_mask: 0.4335 (0.5661)  loss_objectness: 0.0350 (0.1153)  loss_rpn_box_reg: 0.0084 (0.0299)  time: 0.1038 (0.1208)  data: 0.0014 (0.0056)  lr: 0.087040  max mem: 4954
2020-06-23 16:19:35,744 maskrcnn_benchmark.trainer INFO: eta: 1:19:15  iter: 360  loss: 1.0276 (1.4329)  loss_classifier: 0.4160 (0.5759)  loss_box_reg: 0.1366 (0.1569)  loss_mask: 0.3789 (0.5569)  loss_objectness: 0.0444 (0.1132)  loss_rpn_box_reg: 0.0144 (0.0301)  time: 0.1043 (0.1200)  data: 0.0015 (0.0054)  lr: 0.092160  max mem: 4954
2020-06-23 16:19:37,863 maskrcnn_benchmark.trainer INFO: eta: 1:18:43  iter: 380  loss: 1.1521 (1.4195)  loss_classifier: 0.4445 (0.5705)  loss_box_reg: 0.2041 (0.1592)  loss_mask: 0.4122 (0.5495)  loss_objectness: 0.0563 (0.1103)  loss_rpn_box_reg: 0.0182 (0.0300)  time: 0.1053 (0.1192)  data: 0.0015 (0.0052)  lr: 0.097280  max mem: 4954
2020-06-23 16:19:39,958 maskrcnn_benchmark.trainer INFO: eta: 1:18:12  iter: 400  loss: 1.1815 (1.4046)  loss_classifier: 0.4423 (0.5638)  loss_box_reg: 0.1669 (0.1598)  loss_mask: 0.4219 (0.5433)  loss_objectness: 0.0472 (0.1077)  loss_rpn_box_reg: 0.0135 (0.0300)  time: 0.1044 (0.1185)  data: 0.0015 (0.0050)  lr: 0.102400  max mem: 4954
2020-06-23 16:19:42,066 maskrcnn_benchmark.trainer INFO: eta: 1:17:45  iter: 420  loss: 1.1865 (1.3918)  loss_classifier: 0.4859 (0.5586)  loss_box_reg: 0.1886 (0.1612)  loss_mask: 0.3861 (0.5363)  loss_objectness: 0.0532 (0.1058)  loss_rpn_box_reg: 0.0167 (0.0300)  time: 0.1054 (0.1179)  data: 0.0016 (0.0048)  lr: 0.107520  max mem: 4954
2020-06-23 16:19:44,204 maskrcnn_benchmark.trainer INFO: eta: 1:17:23  iter: 440  loss: 1.0552 (1.3791)  loss_classifier: 0.4606 (0.5546)  loss_box_reg: 0.1733 (0.1618)  loss_mask: 0.3760 (0.5292)  loss_objectness: 0.0415 (0.1036)  loss_rpn_box_reg: 0.0149 (0.0299)  time: 0.1067 (0.1174)  data: 0.0014 (0.0047)  lr: 0.112640  max mem: 4954
2020-06-23 16:19:46,315 maskrcnn_benchmark.trainer INFO: eta: 1:17:00  iter: 460  loss: 1.0177 (1.3642)  loss_classifier: 0.3910 (0.5482)  loss_box_reg: 0.1554 (0.1619)  loss_mask: 0.3841 (0.5229)  loss_objectness: 0.0371 (0.1014)  loss_rpn_box_reg: 0.0169 (0.0297)  time: 0.1056 (0.1169)  data: 0.0015 (0.0045)  lr: 0.117760  max mem: 4954
2020-06-23 16:19:48,416 maskrcnn_benchmark.trainer INFO: eta: 1:16:38  iter: 480  loss: 1.1264 (1.3530)  loss_classifier: 0.4133 (0.5427)  loss_box_reg: 0.1832 (0.1628)  loss_mask: 0.3768 (0.5177)  loss_objectness: 0.0365 (0.0998)  loss_rpn_box_reg: 0.0165 (0.0300)  time: 0.1045 (0.1164)  data: 0.0014 (0.0044)  lr: 0.122880  max mem: 4954
2020-06-23 16:19:50,517 maskrcnn_benchmark.trainer INFO: eta: 1:16:18  iter: 500  loss: 0.9872 (1.3406)  loss_classifier: 0.3790 (0.5368)  loss_box_reg: 0.1382 (0.1628)  loss_mask: 0.3908 (0.5129)  loss_objectness: 0.0484 (0.0981)  loss_rpn_box_reg: 0.0203 (0.0300)  time: 0.1042 (0.1159)  data: 0.0014 (0.0043)  lr: 0.128000  max mem: 4954
2020-06-23 16:19:52,633 maskrcnn_benchmark.trainer INFO: eta: 1:16:00  iter: 520  loss: 0.9526 (1.3274)  loss_classifier: 0.3656 (0.5312)  loss_box_reg: 0.1634 (0.1633)  loss_mask: 0.3483 (0.5072)  loss_objectness: 0.0346 (0.0959)  loss_rpn_box_reg: 0.0143 (0.0298)  time: 0.1051 (0.1155)  data: 0.0015 (0.0042)  lr: 0.133120  max mem: 4954
2020-06-23 16:19:54,756 maskrcnn_benchmark.trainer INFO: eta: 1:15:44  iter: 540  loss: 0.9285 (1.3168)  loss_classifier: 0.3954 (0.5274)  loss_box_reg: 0.1648 (0.1640)  loss_mask: 0.3609 (0.5019)  loss_objectness: 0.0370 (0.0942)  loss_rpn_box_reg: 0.0097 (0.0293)  time: 0.1055 (0.1152)  data: 0.0014 (0.0041)  lr: 0.138240  max mem: 4954
2020-06-23 16:19:56,841 maskrcnn_benchmark.trainer INFO: eta: 1:15:27  iter: 560  loss: 0.8870 (1.3037)  loss_classifier: 0.3394 (0.5215)  loss_box_reg: 0.1457 (0.1635)  loss_mask: 0.3595 (0.4968)  loss_objectness: 0.0367 (0.0928)  loss_rpn_box_reg: 0.0113 (0.0290)  time: 0.1042 (0.1148)  data: 0.0014 (0.0040)  lr: 0.143360  max mem: 4954
2020-06-23 16:19:58,971 maskrcnn_benchmark.trainer INFO: eta: 1:15:13  iter: 580  loss: 0.9205 (1.2934)  loss_classifier: 0.3918 (0.5178)  loss_box_reg: 0.1302 (0.1631)  loss_mask: 0.3676 (0.4924)  loss_objectness: 0.0296 (0.0912)  loss_rpn_box_reg: 0.0108 (0.0288)  time: 0.1065 (0.1145)  data: 0.0015 (0.0039)  lr: 0.148480  max mem: 4954
2020-06-23 16:20:01,088 maskrcnn_benchmark.trainer INFO: eta: 1:14:59  iter: 600  loss: 0.9237 (1.2812)  loss_classifier: 0.3625 (0.5124)  loss_box_reg: 0.1165 (0.1622)  loss_mask: 0.3529 (0.4879)  loss_objectness: 0.0513 (0.0899)  loss_rpn_box_reg: 0.0183 (0.0287)  time: 0.1053 (0.1142)  data: 0.0014 (0.0038)  lr: 0.153600  max mem: 4954
2020-06-23 16:20:03,220 maskrcnn_benchmark.trainer INFO: eta: 1:14:48  iter: 620  loss: 0.9515 (1.2718)  loss_classifier: 0.3916 (0.5082)  loss_box_reg: 0.1501 (0.1622)  loss_mask: 0.3574 (0.4844)  loss_objectness: 0.0264 (0.0884)  loss_rpn_box_reg: 0.0113 (0.0286)  time: 0.1061 (0.1140)  data: 0.0015 (0.0037)  lr: 0.158720  max mem: 4954
2020-06-23 16:20:05,337 maskrcnn_benchmark.trainer INFO: eta: 1:14:35  iter: 640  loss: 0.9888 (1.2621)  loss_classifier: 0.3643 (0.5044)  loss_box_reg: 0.1387 (0.1618)  loss_mask: 0.3319 (0.4800)  loss_objectness: 0.0440 (0.0873)  loss_rpn_box_reg: 0.0176 (0.0285)  time: 0.1053 (0.1137)  data: 0.0014 (0.0037)  lr: 0.160000  max mem: 4954
2020-06-23 16:20:07,446 maskrcnn_benchmark.trainer INFO: eta: 1:14:23  iter: 660  loss: 0.8830 (1.2510)  loss_classifier: 0.3450 (0.4999)  loss_box_reg: 0.1305 (0.1611)  loss_mask: 0.3570 (0.4760)  loss_objectness: 0.0238 (0.0858)  loss_rpn_box_reg: 0.0099 (0.0282)  time: 0.1047 (0.1135)  data: 0.0014 (0.0036)  lr: 0.160000  max mem: 4954
2020-06-23 16:20:09,556 maskrcnn_benchmark.trainer INFO: eta: 1:14:12  iter: 680  loss: 0.8826 (1.2403)  loss_classifier: 0.3476 (0.4949)  loss_box_reg: 0.1511 (0.1606)  loss_mask: 0.3396 (0.4722)  loss_objectness: 0.0400 (0.0846)  loss_rpn_box_reg: 0.0150 (0.0280)  time: 0.1056 (0.1132)  data: 0.0015 (0.0035)  lr: 0.160000  max mem: 4954
2020-06-23 16:20:11,691 maskrcnn_benchmark.trainer INFO: eta: 1:14:02  iter: 700  loss: 0.9929 (1.2351)  loss_classifier: 0.3592 (0.4916)  loss_box_reg: 0.1536 (0.1608)  loss_mask: 0.3804 (0.4698)  loss_objectness: 0.0426 (0.0844)  loss_rpn_box_reg: 0.0189 (0.0284)  time: 0.1063 (0.1130)  data: 0.0015 (0.0035)  lr: 0.160000  max mem: 4954
2020-06-23 16:20:13,794 maskrcnn_benchmark.trainer INFO: eta: 1:13:51  iter: 720  loss: 0.9125 (1.2267)  loss_classifier: 0.3589 (0.4878)  loss_box_reg: 0.1310 (0.1603)  loss_mask: 0.3708 (0.4668)  loss_objectness: 0.0262 (0.0836)  loss_rpn_box_reg: 0.0117 (0.0283)  time: 0.1054 (0.1128)  data: 0.0014 (0.0034)  lr: 0.160000  max mem: 4954
2020-06-23 16:20:15,912 maskrcnn_benchmark.trainer INFO: eta: 1:13:42  iter: 740  loss: 0.9122 (1.2194)  loss_classifier: 0.3420 (0.4848)  loss_box_reg: 0.1466 (0.1601)  loss_mask: 0.3493 (0.4637)  loss_objectness: 0.0413 (0.0828)  loss_rpn_box_reg: 0.0175 (0.0280)  time: 0.1052 (0.1126)  data: 0.0015 (0.0034)  lr: 0.160000  max mem: 4954
2020-06-23 16:20:18,033 maskrcnn_benchmark.trainer INFO: eta: 1:13:33  iter: 760  loss: 0.8430 (1.2101)  loss_classifier: 0.3370 (0.4811)  loss_box_reg: 0.1335 (0.1596)  loss_mask: 0.3267 (0.4603)  loss_objectness: 0.0260 (0.0814)  loss_rpn_box_reg: 0.0119 (0.0276)  time: 0.1058 (0.1125)  data: 0.0014 (0.0033)  lr: 0.160000  max mem: 4954
2020-06-23 16:20:20,156 maskrcnn_benchmark.trainer INFO: eta: 1:13:24  iter: 780  loss: 0.9588 (1.2034)  loss_classifier: 0.3479 (0.4779)  loss_box_reg: 0.1752 (0.1597)  loss_mask: 0.3417 (0.4573)  loss_objectness: 0.0406 (0.0809)  loss_rpn_box_reg: 0.0188 (0.0276)  time: 0.1058 (0.1123)  data: 0.0014 (0.0033)  lr: 0.160000  max mem: 4954
2020-06-23 16:20:22,259 maskrcnn_benchmark.trainer INFO: eta: 1:13:15  iter: 800  loss: 0.8265 (1.1958)  loss_classifier: 0.2802 (0.4742)  loss_box_reg: 0.1436 (0.1596)  loss_mask: 0.3296 (0.4548)  loss_objectness: 0.0304 (0.0798)  loss_rpn_box_reg: 0.0116 (0.0274)  time: 0.1048 (0.1121)  data: 0.0014 (0.0032)  lr: 0.160000  max mem: 4954
2020-06-23 16:20:24,379 maskrcnn_benchmark.trainer INFO: eta: 1:13:07  iter: 820  loss: 0.8622 (1.1881)  loss_classifier: 0.3153 (0.4708)  loss_box_reg: 0.1286 (0.1591)  loss_mask: 0.3438 (0.4521)  loss_objectness: 0.0362 (0.0789)  loss_rpn_box_reg: 0.0103 (0.0273)  time: 0.1058 (0.1120)  data: 0.0014 (0.0032)  lr: 0.160000  max mem: 4954
2020-06-23 16:20:26,494 maskrcnn_benchmark.trainer INFO: eta: 1:12:59  iter: 840  loss: 0.9357 (1.1823)  loss_classifier: 0.3309 (0.4678)  loss_box_reg: 0.1570 (0.1592)  loss_mask: 0.3460 (0.4495)  loss_objectness: 0.0508 (0.0784)  loss_rpn_box_reg: 0.0134 (0.0274)  time: 0.1056 (0.1118)  data: 0.0015 (0.0031)  lr: 0.160000  max mem: 4954
2020-06-23 16:20:28,620 maskrcnn_benchmark.trainer INFO: eta: 1:12:51  iter: 860  loss: 0.8735 (1.1751)  loss_classifier: 0.3297 (0.4648)  loss_box_reg: 0.1360 (0.1587)  loss_mask: 0.3138 (0.4466)  loss_objectness: 0.0358 (0.0775)  loss_rpn_box_reg: 0.0131 (0.0274)  time: 0.1055 (0.1117)  data: 0.0014 (0.0031)  lr: 0.160000  max mem: 4954
2020-06-23 16:20:30,741 maskrcnn_benchmark.trainer INFO: eta: 1:12:44  iter: 880  loss: 0.9067 (1.1692)  loss_classifier: 0.3192 (0.4619)  loss_box_reg: 0.1504 (0.1586)  loss_mask: 0.3350 (0.4442)  loss_objectness: 0.0340 (0.0770)  loss_rpn_box_reg: 0.0124 (0.0275)  time: 0.1054 (0.1116)  data: 0.0014 (0.0031)  lr: 0.160000  max mem: 4954
2020-06-23 16:20:32,849 maskrcnn_benchmark.trainer INFO: eta: 1:12:36  iter: 900  loss: 0.9172 (1.1638)  loss_classifier: 0.3722 (0.4598)  loss_box_reg: 0.1355 (0.1584)  loss_mask: 0.3456 (0.4418)  loss_objectness: 0.0384 (0.0764)  loss_rpn_box_reg: 0.0120 (0.0273)  time: 0.1052 (0.1114)  data: 0.0014 (0.0030)  lr: 0.160000  max mem: 4954
:::MLLOG {"namespace": "", "time_ms": 1592954440026, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592954440026, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592954440026, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 1}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 16:20:40,191 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.31s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.29s)
index created!
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.31s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
Done (t=0.31s)
creating index...
index created!
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.31s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.31s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
:::MLLOG {"namespace": "", "time_ms": 1592954440517, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 1, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/engine/tester.py", "lineno": 35}}
index created!
2020-06-23 16:20:40,518 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.65it/s]
 28%|       | 22/79 [00:01<00:05,  9.66it/s]
 32%|      | 25/79 [00:01<00:04, 11.92it/s]
 35%|      | 28/79 [00:01<00:03, 14.23it/s]
 39%|      | 31/79 [00:01<00:02, 16.44it/s]
 43%|     | 34/79 [00:02<00:02, 18.45it/s]
 47%|     | 37/79 [00:02<00:02, 20.15it/s]
 51%|     | 40/79 [00:02<00:01, 21.61it/s]
 54%|    | 43/79 [00:02<00:01, 22.77it/s]
 58%|    | 46/79 [00:02<00:01, 23.52it/s]
 62%|   | 49/79 [00:02<00:01, 24.12it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.43it/s]
 13%|        | 10/79 [00:01<00:20,  3.34it/s]
 16%|        | 13/79 [00:01<00:14,  4.51it/s]
 20%|        | 16/79 [00:01<00:10,  5.97it/s]
 24%|       | 19/79 [00:01<00:07,  7.72it/s]
 28%|       | 22/79 [00:01<00:05,  9.68it/s]
 32%|      | 25/79 [00:01<00:04, 11.94it/s]
 35%|      | 28/79 [00:01<00:03, 14.18it/s]
 39%|      | 31/79 [00:01<00:02, 16.31it/s]
 43%|     | 34/79 [00:02<00:02, 18.38it/s]
 47%|     | 37/79 [00:02<00:02, 20.09it/s]
 51%|     | 40/79 [00:02<00:01, 21.38it/s]
 54%|    | 43/79 [00:02<00:01, 22.33it/s]
 58%|    | 46/79 [00:02<00:01, 23.13it/s]
 62%|   | 49/79 [00:02<00:01, 24.08it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.69it/s]
 35%|      | 28/79 [00:01<00:03, 14.04it/s]
 39%|      | 31/79 [00:02<00:02, 16.31it/s]
 43%|     | 34/79 [00:02<00:02, 18.57it/s]
 47%|     | 37/79 [00:02<00:02, 20.35it/s]
 51%|     | 40/79 [00:02<00:01, 21.74it/s]
 54%|    | 43/79 [00:02<00:01, 23.04it/s]
 58%|    | 46/79 [00:02<00:01, 23.95it/s]
 62%|   | 49/79 [00:02<00:01, 24.59it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:05,  9.53it/s]
 32%|      | 25/79 [00:01<00:04, 11.70it/s]
 35%|      | 28/79 [00:01<00:03, 13.93it/s]
 39%|      | 31/79 [00:02<00:02, 16.04it/s]
 43%|     | 34/79 [00:02<00:02, 18.04it/s]
 47%|     | 37/79 [00:02<00:02, 19.62it/s]
 51%|     | 40/79 [00:02<00:01, 20.95it/s]
 54%|    | 43/79 [00:02<00:01, 21.98it/s]
 58%|    | 46/79 [00:02<00:01, 23.07it/s]
 62%|   | 49/79 [00:02<00:01, 23.50it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.16it/s]
 32%|      | 25/79 [00:01<00:04, 11.35it/s]
 35%|      | 28/79 [00:01<00:03, 13.72it/s]
 39%|      | 31/79 [00:02<00:02, 16.04it/s]
 43%|     | 34/79 [00:02<00:02, 18.05it/s]
 47%|     | 37/79 [00:02<00:02, 20.06it/s]
 51%|     | 40/79 [00:02<00:01, 21.44it/s]
 54%|    | 43/79 [00:02<00:01, 22.68it/s]
 58%|    | 46/79 [00:02<00:01, 23.35it/s]
 62%|   | 49/79 [00:02<00:01, 24.24it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.31it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.68it/s]
 39%|      | 31/79 [00:02<00:03, 15.95it/s]
 43%|     | 34/79 [00:02<00:02, 18.00it/s]
 47%|     | 37/79 [00:02<00:02, 19.50it/s]
 51%|     | 40/79 [00:02<00:01, 21.15it/s]
 54%|    | 43/79 [00:02<00:01, 22.40it/s]
 58%|    | 46/79 [00:02<00:01, 23.22it/s]
 62%|   | 49/79 [00:02<00:01, 23.81it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.33it/s]
 28%|       | 22/79 [00:01<00:06,  9.32it/s]
 32%|      | 25/79 [00:01<00:04, 11.49it/s]
 35%|      | 28/79 [00:01<00:03, 13.78it/s]
 39%|      | 31/79 [00:02<00:03, 15.98it/s]
 43%|     | 34/79 [00:02<00:02, 18.06it/s]
 47%|     | 37/79 [00:02<00:02, 19.80it/s]
 51%|     | 40/79 [00:02<00:01, 21.09it/s]
 54%|    | 43/79 [00:02<00:01, 22.33it/s]
 58%|    | 46/79 [00:02<00:01, 23.23it/s]
 62%|   | 49/79 [00:02<00:01, 23.68it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:00<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.17it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.49it/s]
 39%|      | 31/79 [00:02<00:03, 15.83it/s]
 43%|     | 34/79 [00:02<00:02, 17.84it/s]
 47%|     | 37/79 [00:02<00:02, 19.79it/s]
 51%|     | 40/79 [00:02<00:01, 21.14it/s]
 54%|    | 43/79 [00:02<00:01, 22.20it/s]
 58%|    | 46/79 [00:02<00:01, 23.11it/s]
 62%|   | 49/79 [00:02<00:01, 23.97it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:00<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.21it/s]
 28%|       | 22/79 [00:01<00:06,  9.18it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.56it/s]
 39%|      | 31/79 [00:02<00:03, 15.86it/s]
 43%|     | 34/79 [00:02<00:02, 17.72it/s]
 47%|     | 37/79 [00:02<00:02, 19.52it/s]
 51%|     | 40/79 [00:02<00:01, 20.98it/s]
 54%|    | 43/79 [00:02<00:01, 22.41it/s]
 58%|    | 46/79 [00:02<00:01, 23.27it/s]
 62%|   | 49/79 [00:02<00:01, 23.66it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  3.99it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  6.99it/s]
 28%|       | 22/79 [00:01<00:06,  8.94it/s]
 32%|      | 25/79 [00:01<00:04, 11.09it/s]
 35%|      | 28/79 [00:01<00:03, 13.38it/s]
 39%|      | 31/79 [00:02<00:03, 15.61it/s]
 43%|     | 34/79 [00:02<00:02, 17.73it/s]
 47%|     | 37/79 [00:02<00:02, 19.60it/s]
 51%|     | 40/79 [00:02<00:01, 21.12it/s]
 54%|    | 43/79 [00:02<00:01, 22.40it/s]
 58%|    | 46/79 [00:02<00:01, 23.20it/s]
 62%|   | 49/79 [00:02<00:01, 23.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  8.98it/s]
 32%|      | 25/79 [00:01<00:04, 11.13it/s]
 35%|      | 28/79 [00:01<00:03, 13.44it/s]
 39%|      | 31/79 [00:02<00:03, 15.68it/s]
 43%|     | 34/79 [00:02<00:02, 17.84it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 21.15it/s]
 54%|    | 43/79 [00:02<00:01, 22.25it/s]
 58%|    | 46/79 [00:02<00:01, 23.26it/s]
 62%|   | 49/79 [00:02<00:01, 23.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.26it/s]
 28%|       | 22/79 [00:01<00:06,  9.25it/s]
 32%|      | 25/79 [00:01<00:04, 11.29it/s]
 35%|      | 28/79 [00:01<00:03, 13.44it/s]
 39%|      | 31/79 [00:02<00:03, 15.61it/s]
 43%|     | 34/79 [00:02<00:02, 17.70it/s]
 47%|     | 37/79 [00:02<00:02, 19.33it/s]
 51%|     | 40/79 [00:02<00:01, 20.71it/s]
 54%|    | 43/79 [00:02<00:01, 21.87it/s]
 58%|    | 46/79 [00:02<00:01, 22.92it/s]
 62%|   | 49/79 [00:02<00:01, 23.68it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:11,  5.26it/s]
 24%|       | 19/79 [00:01<00:08,  6.89it/s]
 28%|       | 22/79 [00:01<00:06,  8.81it/s]
 32%|      | 25/79 [00:01<00:04, 10.92it/s]
 35%|      | 28/79 [00:01<00:03, 13.21it/s]
 39%|      | 31/79 [00:02<00:03, 15.44it/s]
 43%|     | 34/79 [00:02<00:02, 17.46it/s]
 47%|     | 37/79 [00:02<00:02, 19.15it/s]
 51%|     | 40/79 [00:02<00:01, 20.68it/s]
 54%|    | 43/79 [00:02<00:01, 22.11it/s]
 58%|    | 46/79 [00:02<00:01, 22.77it/s]
 62%|   | 49/79 [00:02<00:01, 23.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.51it/s]
 28%|       | 22/79 [00:01<00:06,  9.49it/s]
 32%|      | 25/79 [00:01<00:04, 11.67it/s]
 35%|      | 28/79 [00:01<00:03, 13.89it/s]
 39%|      | 31/79 [00:02<00:03, 15.99it/s]
 43%|     | 34/79 [00:02<00:02, 16.58it/s]
 47%|     | 37/79 [00:02<00:02, 18.53it/s]
 51%|     | 40/79 [00:02<00:01, 19.95it/s]
 54%|    | 43/79 [00:02<00:01, 21.31it/s]
 58%|    | 46/79 [00:02<00:01, 22.24it/s]
 62%|   | 49/79 [00:02<00:01, 23.17it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.24it/s]
 24%|       | 19/79 [00:01<00:08,  6.88it/s]
 28%|       | 22/79 [00:01<00:06,  8.79it/s]
 32%|      | 25/79 [00:01<00:04, 10.93it/s]
 35%|      | 28/79 [00:02<00:03, 13.08it/s]
 39%|      | 31/79 [00:02<00:03, 15.35it/s]
 43%|     | 34/79 [00:02<00:02, 17.39it/s]
 47%|     | 37/79 [00:02<00:02, 19.17it/s]
 51%|     | 40/79 [00:02<00:01, 20.60it/s]
 54%|    | 43/79 [00:02<00:01, 21.98it/s]
 58%|    | 46/79 [00:02<00:01, 22.91it/s]
 62%|   | 49/79 [00:02<00:01, 23.56it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.82it/s]
 16%|        | 13/79 [00:01<00:17,  3.84it/s]
 20%|        | 16/79 [00:01<00:12,  5.15it/s]
 24%|       | 19/79 [00:01<00:08,  6.78it/s]
 28%|       | 22/79 [00:01<00:06,  8.71it/s]
 32%|      | 25/79 [00:01<00:04, 10.81it/s]
 35%|      | 28/79 [00:02<00:03, 13.09it/s]
 39%|      | 31/79 [00:02<00:03, 15.32it/s]
 43%|     | 34/79 [00:02<00:02, 17.32it/s]
 47%|     | 37/79 [00:02<00:02, 18.90it/s]
 51%|     | 40/79 [00:02<00:01, 20.51it/s]
 54%|    | 43/79 [00:02<00:01, 21.73it/s]
 58%|    | 46/79 [00:02<00:01, 22.73it/s]
 62%|   | 49/79 [00:02<00:01, 23.67it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  8.99it/s]
 32%|      | 25/79 [00:01<00:04, 11.10it/s]
 35%|      | 28/79 [00:01<00:03, 13.36it/s]
 39%|      | 31/79 [00:02<00:03, 15.50it/s]
 43%|     | 34/79 [00:02<00:02, 17.45it/s]
 47%|     | 37/79 [00:02<00:02, 18.96it/s]
 51%|     | 40/79 [00:02<00:01, 20.59it/s]
 54%|    | 43/79 [00:02<00:01, 21.74it/s]
 58%|    | 46/79 [00:02<00:01, 22.27it/s]
 62%|   | 49/79 [00:02<00:01, 23.07it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.07it/s]
 32%|      | 25/79 [00:01<00:04, 11.17it/s]
 35%|      | 28/79 [00:01<00:03, 13.39it/s]
 39%|      | 31/79 [00:02<00:03, 15.55it/s]
 43%|     | 34/79 [00:02<00:02, 17.43it/s]
 47%|     | 37/79 [00:02<00:02, 19.10it/s]
 51%|     | 40/79 [00:02<00:01, 20.35it/s]
 54%|    | 43/79 [00:02<00:01, 21.51it/s]
 58%|    | 46/79 [00:02<00:01, 22.07it/s]
 62%|   | 49/79 [00:02<00:01, 22.98it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.43it/s]
  9%|         | 7/79 [00:01<00:36,  1.99it/s]
 13%|        | 10/79 [00:01<00:25,  2.75it/s]
 16%|        | 13/79 [00:01<00:17,  3.77it/s]
 20%|        | 16/79 [00:01<00:12,  5.06it/s]
 24%|       | 19/79 [00:01<00:08,  6.67it/s]
 28%|       | 22/79 [00:01<00:06,  8.61it/s]
 32%|      | 25/79 [00:01<00:05, 10.68it/s]
 35%|      | 28/79 [00:02<00:03, 12.94it/s]
 39%|      | 31/79 [00:02<00:03, 15.26it/s]
 43%|     | 34/79 [00:02<00:02, 17.52it/s]
 47%|     | 37/79 [00:02<00:02, 19.36it/s]
 51%|     | 40/79 [00:02<00:01, 20.88it/s]
 54%|    | 43/79 [00:02<00:01, 22.39it/s]
 58%|    | 46/79 [00:02<00:01, 23.33it/s]
 62%|   | 49/79 [00:02<00:01, 23.44it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:19,  1.02s/it]
  5%|         | 4/79 [00:01<00:54,  1.37it/s]
  9%|         | 7/79 [00:01<00:37,  1.92it/s]
 13%|        | 10/79 [00:01<00:25,  2.66it/s]
 16%|        | 13/79 [00:01<00:18,  3.64it/s]
 20%|        | 16/79 [00:01<00:12,  4.91it/s]
 24%|       | 19/79 [00:01<00:09,  6.46it/s]
 28%|       | 22/79 [00:01<00:06,  8.33it/s]
 32%|      | 25/79 [00:01<00:05, 10.45it/s]
 35%|      | 28/79 [00:02<00:03, 12.76it/s]
 39%|      | 31/79 [00:02<00:03, 15.10it/s]
 43%|     | 34/79 [00:02<00:02, 17.41it/s]
 47%|     | 37/79 [00:02<00:02, 19.22it/s]
 51%|     | 40/79 [00:02<00:01, 20.83it/s]
 54%|    | 43/79 [00:02<00:01, 22.22it/s]
 58%|    | 46/79 [00:02<00:01, 23.31it/s]
 62%|   | 49/79 [00:02<00:01, 23.99it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.86it/s]
 28%|       | 22/79 [00:01<00:06,  8.78it/s]
 32%|      | 25/79 [00:01<00:04, 10.87it/s]
 35%|      | 28/79 [00:02<00:03, 13.08it/s]
 39%|      | 31/79 [00:02<00:03, 15.24it/s]
 43%|     | 34/79 [00:02<00:02, 17.25it/s]
 47%|     | 37/79 [00:02<00:02, 19.02it/s]
 51%|     | 40/79 [00:02<00:01, 20.57it/s]
 54%|    | 43/79 [00:02<00:01, 21.63it/s]
 58%|    | 46/79 [00:02<00:01, 22.56it/s]
 62%|   | 49/79 [00:02<00:01, 23.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.43it/s]
  9%|         | 7/79 [00:01<00:36,  1.99it/s]
 13%|        | 10/79 [00:01<00:25,  2.75it/s]
 16%|        | 13/79 [00:01<00:17,  3.75it/s]
 20%|        | 16/79 [00:01<00:12,  5.04it/s]
 24%|       | 19/79 [00:01<00:09,  6.65it/s]
 28%|       | 22/79 [00:01<00:06,  8.54it/s]
 32%|      | 25/79 [00:01<00:05, 10.67it/s]
 35%|      | 28/79 [00:02<00:03, 12.93it/s]
 39%|      | 31/79 [00:02<00:03, 15.26it/s]
 43%|     | 34/79 [00:02<00:02, 17.36it/s]
 47%|     | 37/79 [00:02<00:02, 19.20it/s]
 51%|     | 40/79 [00:02<00:01, 20.43it/s]
 54%|    | 43/79 [00:02<00:01, 21.76it/s]
 58%|    | 46/79 [00:02<00:01, 22.66it/s]
 62%|   | 49/79 [00:02<00:01, 23.46it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.93it/s]
 20%|        | 16/79 [00:01<00:11,  5.27it/s]
 24%|       | 19/79 [00:01<00:08,  6.89it/s]
 28%|       | 22/79 [00:01<00:06,  8.82it/s]
 32%|      | 25/79 [00:01<00:04, 10.94it/s]
 35%|      | 28/79 [00:02<00:03, 13.12it/s]
 39%|      | 31/79 [00:02<00:03, 15.35it/s]
 43%|     | 34/79 [00:02<00:02, 16.98it/s]
 47%|     | 37/79 [00:02<00:02, 18.62it/s]
 51%|     | 40/79 [00:02<00:01, 20.09it/s]
 54%|    | 43/79 [00:02<00:01, 21.14it/s]
 58%|    | 46/79 [00:02<00:01, 22.08it/s]
 62%|   | 49/79 [00:02<00:01, 22.64it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.43it/s]
  9%|         | 7/79 [00:01<00:36,  2.00it/s]
 13%|        | 10/79 [00:01<00:25,  2.76it/s]
 16%|        | 13/79 [00:01<00:17,  3.76it/s]
 20%|        | 16/79 [00:01<00:12,  5.05it/s]
 24%|       | 19/79 [00:01<00:09,  6.64it/s]
 28%|       | 22/79 [00:01<00:06,  8.55it/s]
 32%|      | 25/79 [00:01<00:05, 10.68it/s]
 35%|      | 28/79 [00:02<00:03, 12.84it/s]
 39%|      | 31/79 [00:02<00:03, 15.09it/s]
 43%|     | 34/79 [00:02<00:02, 17.09it/s]
 47%|     | 37/79 [00:02<00:02, 18.97it/s]
 51%|     | 40/79 [00:02<00:01, 20.10it/s]
 54%|    | 43/79 [00:02<00:01, 21.42it/s]
 58%|    | 46/79 [00:02<00:01, 21.99it/s]
 62%|   | 49/79 [00:02<00:01, 22.80it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:18,  1.01s/it]
  5%|         | 4/79 [00:01<00:54,  1.39it/s]
  9%|         | 7/79 [00:01<00:37,  1.94it/s]
 13%|        | 10/79 [00:01<00:25,  2.68it/s]
 16%|        | 13/79 [00:01<00:18,  3.66it/s]
 20%|        | 16/79 [00:01<00:12,  4.92it/s]
 24%|       | 19/79 [00:01<00:09,  6.50it/s]
 28%|       | 22/79 [00:01<00:06,  8.36it/s]
 32%|      | 25/79 [00:01<00:05, 10.45it/s]
 35%|      | 28/79 [00:02<00:04, 12.75it/s]
 39%|      | 31/79 [00:02<00:03, 14.91it/s]
 43%|     | 34/79 [00:02<00:02, 17.04it/s]
 47%|     | 37/79 [00:02<00:02, 18.81it/s]
 51%|     | 40/79 [00:02<00:01, 20.35it/s]
 54%|    | 43/79 [00:02<00:01, 21.58it/s]
 58%|    | 46/79 [00:02<00:01, 22.71it/s]
 62%|   | 49/79 [00:02<00:01, 23.60it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  5%|         | 4/79 [00:01<00:52,  1.42it/s]
  9%|         | 7/79 [00:01<00:36,  1.98it/s]
 13%|        | 10/79 [00:01<00:25,  2.73it/s]
 16%|        | 13/79 [00:01<00:17,  3.72it/s]
 20%|        | 16/79 [00:01<00:12,  5.01it/s]
 24%|       | 19/79 [00:01<00:09,  6.59it/s]
 28%|       | 22/79 [00:01<00:06,  8.44it/s]
 32%|      | 25/79 [00:01<00:05, 10.56it/s]
 35%|      | 28/79 [00:02<00:03, 12.78it/s]
 39%|      | 31/79 [00:02<00:03, 15.07it/s]
 43%|     | 34/79 [00:02<00:02, 17.09it/s]
 47%|     | 37/79 [00:02<00:02, 19.07it/s]
 51%|     | 40/79 [00:02<00:01, 20.62it/s]
 54%|    | 43/79 [00:02<00:01, 21.61it/s]
 58%|    | 46/79 [00:02<00:01, 22.39it/s]
 62%|   | 49/79 [00:02<00:01, 23.04it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:19,  1.01s/it]
  5%|         | 4/79 [00:01<00:54,  1.39it/s]
  9%|         | 7/79 [00:01<00:37,  1.93it/s]
 13%|        | 10/79 [00:01<00:25,  2.68it/s]
 16%|        | 13/79 [00:01<00:18,  3.66it/s]
 20%|        | 16/79 [00:01<00:12,  4.93it/s]
 24%|       | 19/79 [00:01<00:09,  6.49it/s]
 28%|       | 22/79 [00:01<00:06,  8.31it/s]
 32%|      | 25/79 [00:01<00:05, 10.41it/s]
 35%|      | 28/79 [00:02<00:04, 12.68it/s]
 39%|      | 31/79 [00:02<00:03, 15.02it/s]
 43%|     | 34/79 [00:02<00:02, 17.16it/s]
 47%|     | 37/79 [00:02<00:02, 18.93it/s]
 51%|     | 40/79 [00:02<00:01, 20.48it/s]
 54%|    | 43/79 [00:02<00:01, 21.66it/s]
 58%|    | 46/79 [00:02<00:01, 22.37it/s]
 62%|   | 49/79 [00:02<00:01, 23.27it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.43it/s]
  9%|         | 7/79 [00:01<00:36,  1.99it/s]
 13%|        | 10/79 [00:01<00:25,  2.76it/s]
 16%|        | 13/79 [00:01<00:17,  3.77it/s]
 20%|        | 16/79 [00:01<00:12,  5.06it/s]
 24%|       | 19/79 [00:01<00:09,  6.67it/s]
 28%|       | 22/79 [00:01<00:06,  8.57it/s]
 32%|      | 25/79 [00:01<00:05, 10.60it/s]
 35%|      | 28/79 [00:02<00:03, 12.83it/s]
 39%|      | 31/79 [00:02<00:03, 15.07it/s]
 43%|     | 34/79 [00:02<00:02, 16.96it/s]
 47%|     | 37/79 [00:02<00:02, 18.65it/s]
 51%|     | 40/79 [00:02<00:01, 19.94it/s]
 54%|    | 43/79 [00:02<00:01, 21.25it/s]
 58%|    | 46/79 [00:02<00:01, 22.13it/s]
 62%|   | 49/79 [00:02<00:01, 22.83it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.00it/s]
  5%|         | 4/79 [00:01<00:53,  1.41it/s]
  9%|         | 7/79 [00:01<00:36,  1.96it/s]
 13%|        | 10/79 [00:01<00:25,  2.70it/s]
 16%|        | 13/79 [00:01<00:17,  3.69it/s]
 20%|        | 16/79 [00:01<00:12,  4.93it/s]
 24%|       | 19/79 [00:01<00:09,  6.51it/s]
 28%|       | 22/79 [00:01<00:06,  8.39it/s]
 32%|      | 25/79 [00:01<00:05, 10.51it/s]
 35%|      | 28/79 [00:02<00:03, 12.85it/s]
 39%|      | 31/79 [00:02<00:03, 14.91it/s]
 43%|     | 34/79 [00:02<00:02, 17.01it/s]
 47%|     | 37/79 [00:02<00:02, 18.84it/s]
 51%|     | 40/79 [00:02<00:01, 20.42it/s]
 54%|    | 43/79 [00:02<00:01, 21.89it/s]
 58%|    | 46/79 [00:02<00:01, 22.88it/s]
 62%|   | 49/79 [00:02<00:01, 23.56it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.85it/s]
 20%|        | 16/79 [00:01<00:12,  5.14it/s]
 24%|       | 19/79 [00:01<00:08,  6.76it/s]
 28%|       | 22/79 [00:01<00:06,  8.65it/s]
 32%|      | 25/79 [00:01<00:05, 10.76it/s]
 35%|      | 28/79 [00:02<00:03, 12.88it/s]
 39%|      | 31/79 [00:02<00:03, 15.01it/s]
 43%|     | 34/79 [00:02<00:02, 16.85it/s]
 47%|     | 37/79 [00:02<00:02, 18.41it/s]
 51%|     | 40/79 [00:02<00:01, 19.71it/s]
 54%|    | 43/79 [00:02<00:01, 20.90it/s]
 58%|    | 46/79 [00:02<00:01, 21.93it/s]
 62%|   | 49/79 [00:02<00:01, 22.37it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:18,  1.01s/it]
  5%|         | 4/79 [00:01<00:53,  1.39it/s]
  9%|         | 7/79 [00:01<00:37,  1.94it/s]
 13%|        | 10/79 [00:01<00:25,  2.68it/s]
 16%|        | 13/79 [00:01<00:18,  3.66it/s]
 20%|        | 16/79 [00:01<00:12,  4.92it/s]
 24%|       | 19/79 [00:01<00:09,  6.48it/s]
 28%|       | 22/79 [00:01<00:06,  8.32it/s]
 32%|      | 25/79 [00:01<00:05, 10.37it/s]
 35%|      | 28/79 [00:02<00:04, 12.55it/s]
 39%|      | 31/79 [00:02<00:03, 14.70it/s]
 43%|     | 34/79 [00:02<00:02, 16.70it/s]
 47%|     | 37/79 [00:02<00:02, 18.27it/s]
 51%|     | 40/79 [00:02<00:01, 19.70it/s]
 54%|    | 43/79 [00:02<00:01, 20.72it/s]
 58%|    | 46/79 [00:02<00:01, 21.87it/s]
 62%|   | 49/79 [00:02<00:01, 22.76it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:18,  1.00s/it]
  5%|         | 4/79 [00:01<00:53,  1.40it/s]
  9%|         | 7/79 [00:01<00:36,  1.95it/s]
 13%|        | 10/79 [00:01<00:25,  2.70it/s]
 16%|        | 13/79 [00:01<00:17,  3.67it/s]
 20%|        | 16/79 [00:01<00:12,  4.93it/s]
 24%|       | 19/79 [00:01<00:09,  6.48it/s]
 28%|       | 22/79 [00:01<00:06,  8.27it/s]
 32%|      | 25/79 [00:02<00:05, 10.32it/s]
 35%|      | 28/79 [00:02<00:04, 12.44it/s]
 39%|      | 31/79 [00:02<00:03, 14.65it/s]
 43%|     | 34/79 [00:02<00:02, 16.72it/s]
 47%|     | 37/79 [00:02<00:02, 18.34it/s]
 51%|     | 40/79 [00:02<00:01, 19.75it/s]
 54%|    | 43/79 [00:02<00:01, 21.05it/s]
 58%|    | 46/79 [00:02<00:01, 21.44it/s]
 62%|   | 49/79 [00:02<00:01, 22.05it/s]
 66%|   | 52/79 [00:03<00:01, 24.57it/s]
 70%|   | 55/79 [00:02<00:00, 25.15it/s]
 73%|  | 58/79 [00:03<00:00, 25.09it/s]
 77%|  | 61/79 [00:03<00:00, 24.98it/s]
 81%|  | 64/79 [00:03<00:00, 25.24it/s]
 85%| | 67/79 [00:03<00:00, 25.43it/s]
 89%| | 70/79 [00:03<00:00, 25.40it/s]
 92%|| 73/79 [00:03<00:00, 25.98it/s]
 96%|| 76/79 [00:03<00:00, 26.72it/s]
100%|| 79/79 [00:03<00:00, 20.02it/s]
, 24.38it/s]
 70%|   | 55/79 [00:03<00:00, 24.90it/s]
 73%|  | 58/79 [00:03<00:00, 25.14it/s]
 77%|  | 61/79 [00:03<00:00, 25.59it/s]
 81%|  | 64/79 [00:03<00:00, 25.57it/s]
 85%| | 67/79 [00:03<00:00, 25.61it/s]
 89%| | 70/79 [00:03<00:00, 25.49it/s]
 92%|| 73/79 [00:03<00:00, 25.92it/s]
 96%|| 76/79 [00:03<00:00, 26.52it/s]
100%|| 79/79 [00:03<00:00, 27.38it/s]
, 23.91it/s]
 70%|   | 55/79 [00:03<00:00, 24.10it/s]
 73%|  | 58/79 [00:03<00:00, 24.39it/s]
 77%|  | 61/79 [00:03<00:00, 24.38it/s]
 81%|  | 64/79 [00:03<00:00, 24.64it/s]
 85%| | 67/79 [00:03<00:00, 24.69it/s]
 89%| | 70/79 [00:03<00:00, 24.46it/s]
 92%|| 73/79 [00:03<00:00, 25.02it/s]
 96%|| 76/79 [00:03<00:00, 25.90it/s]
100%|| 79/79 [00:03<00:00, 19.80it/s]
, 24.21it/s]
 70%|   | 55/79 [00:03<00:00, 24.81it/s]
 73%|  | 58/79 [00:03<00:00, 25.16it/s]
 77%|  | 61/79 [00:03<00:00, 25.20it/s]
 81%|  | 64/79 [00:03<00:00, 25.14it/s]
 85%| | 67/79 [00:03<00:00, 25.40it/s]
 89%| | 70/79 [00:03<00:00, 25.63it/s]
 92%|| 73/79 [00:03<00:00, 25.81it/s]
 96%|| 76/79 [00:03<00:00, 26.48it/s]
100%|| 79/79 [00:03<00:00, 27.38it/s]
, 24.17it/s]
 70%|   | 55/79 [00:03<00:00, 24.71it/s]
 73%|  | 58/79 [00:03<00:00, 24.97it/s]
 77%|  | 61/79 [00:03<00:00, 25.25it/s]
 81%|  | 64/79 [00:03<00:00, 24.92it/s]
 85%| | 67/79 [00:03<00:00, 25.32it/s]
 89%| | 70/79 [00:03<00:00, 25.77it/s]
 92%|| 73/79 [00:03<00:00, 25.63it/s]
 96%|| 76/79 [00:03<00:00, 26.30it/s]
100%|| 79/79 [00:03<00:00, 27.10it/s]
, 23.83it/s]
 70%|   | 55/79 [00:03<00:00, 24.51it/s]
 73%|  | 58/79 [00:03<00:00, 24.54it/s]
 77%|  | 61/79 [00:03<00:00, 24.73it/s]
 81%|  | 64/79 [00:03<00:00, 24.86it/s]
 85%| | 67/79 [00:03<00:00, 25.02it/s]
 89%| | 70/79 [00:03<00:00, 24.74it/s]
 92%|| 73/79 [00:03<00:00, 25.08it/s]
 96%|| 76/79 [00:03<00:00, 26.02it/s]
100%|| 79/79 [00:03<00:00, 26.99it/s]
, 24.26it/s]
 70%|   | 55/79 [00:03<00:00, 24.77it/s]
 73%|  | 58/79 [00:03<00:00, 24.93it/s]
 77%|  | 61/79 [00:03<00:00, 25.33it/s]
 81%|  | 64/79 [00:03<00:00, 25.68it/s]
 85%| | 67/79 [00:03<00:00, 25.73it/s]
 89%| | 70/79 [00:03<00:00, 25.51it/s]
 92%|| 73/79 [00:03<00:00, 26.04it/s]
 96%|| 76/79 [00:03<00:00, 26.58it/s]
100%|| 79/79 [00:04<00:00, 19.25it/s]
, 24.08it/s]
 70%|   | 55/79 [00:03<00:00, 24.25it/s]
 73%|  | 58/79 [00:03<00:00, 24.39it/s]
 77%|  | 61/79 [00:03<00:00, 24.59it/s]
 81%|  | 64/79 [00:03<00:00, 24.86it/s]
 85%| | 67/79 [00:03<00:00, 24.79it/s]
 89%| | 70/79 [00:03<00:00, 25.23it/s]
 92%|| 73/79 [00:03<00:00, 25.43it/s]
 96%|| 76/79 [00:03<00:00, 26.16it/s]
100%|| 79/79 [00:04<00:00, 27.07it/s]
, 23.95it/s]
 70%|   | 55/79 [00:03<00:00, 24.48it/s]
 73%|  | 58/79 [00:03<00:00, 24.48it/s]
 77%|  | 61/79 [00:03<00:00, 25.05it/s]
 81%|  | 64/79 [00:03<00:00, 25.15it/s]
 85%| | 67/79 [00:03<00:00, 25.30it/s]
 89%| | 70/79 [00:03<00:00, 25.35it/s]
 92%|| 73/79 [00:03<00:00, 25.72it/s]
 96%|| 76/79 [00:03<00:00, 26.49it/s]
100%|| 79/79 [00:04<00:00, 27.45it/s]
, 23.41it/s]
 70%|   | 55/79 [00:03<00:00, 24.11it/s]
 73%|  | 58/79 [00:03<00:00, 24.53it/s]
 77%|  | 61/79 [00:03<00:00, 24.42it/s]
 81%|  | 64/79 [00:03<00:00, 24.49it/s]
 85%| | 67/79 [00:03<00:00, 24.89it/s]
 89%| | 70/79 [00:03<00:00, 25.29it/s]
 92%|| 73/79 [00:03<00:00, 25.24it/s]
 96%|| 76/79 [00:03<00:00, 26.29it/s]
100%|| 79/79 [00:04<00:00, 19.13it/s]
, 23.83it/s]
 70%|   | 55/79 [00:03<00:00, 24.06it/s]
 73%|  | 58/79 [00:03<00:00, 24.62it/s]
 77%|  | 61/79 [00:03<00:00, 24.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.69it/s]
 85%| | 67/79 [00:03<00:00, 25.02it/s]
 89%| | 70/79 [00:03<00:00, 25.10it/s]
 92%|| 73/79 [00:03<00:00, 25.51it/s]
 96%|| 76/79 [00:03<00:00, 26.18it/s]
100%|| 79/79 [00:04<00:00, 26.99it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:01, 23.96it/s]
 73%|  | 58/79 [00:03<00:00, 24.36it/s]
 77%|  | 61/79 [00:03<00:00, 24.13it/s]
 81%|  | 64/79 [00:03<00:00, 24.33it/s]
 85%| | 67/79 [00:03<00:00, 24.48it/s]
 89%| | 70/79 [00:03<00:00, 24.45it/s]
 92%|| 73/79 [00:03<00:00, 24.94it/s]
 96%|| 76/79 [00:03<00:00, 25.70it/s]
100%|| 79/79 [00:04<00:00, 26.58it/s]
, 23.05it/s]
 70%|   | 55/79 [00:03<00:01, 23.55it/s]
 73%|  | 58/79 [00:03<00:00, 24.02it/s]
 77%|  | 61/79 [00:03<00:00, 24.32it/s]
 81%|  | 64/79 [00:03<00:00, 24.52it/s]
 85%| | 67/79 [00:03<00:00, 25.03it/s]
 89%| | 70/79 [00:03<00:00, 25.00it/s]
 92%|| 73/79 [00:03<00:00, 25.16it/s]
 96%|| 76/79 [00:03<00:00, 25.83it/s]
100%|| 79/79 [00:04<00:00, 26.65it/s]
, 22.32it/s]
 70%|   | 55/79 [00:03<00:01, 23.09it/s]
 73%|  | 58/79 [00:03<00:00, 23.34it/s]
 77%|  | 61/79 [00:03<00:00, 23.74it/s]
 81%|  | 64/79 [00:03<00:00, 23.92it/s]
 85%| | 67/79 [00:03<00:00, 24.26it/s]
 89%| | 70/79 [00:03<00:00, 24.14it/s]
 92%|| 73/79 [00:03<00:00, 24.56it/s]
 96%|| 76/79 [00:04<00:00, 25.33it/s]
100%|| 79/79 [00:04<00:00, 26.17it/s]
, 24.59it/s]
 70%|   | 55/79 [00:02<00:00, 25.03it/s]
 73%|  | 58/79 [00:03<00:00, 25.24it/s]
 77%|  | 61/79 [00:03<00:00, 25.50it/s]
 81%|  | 64/79 [00:03<00:00, 25.70it/s]
 85%| | 67/79 [00:03<00:00, 25.73it/s]
 89%| | 70/79 [00:03<00:00, 25.57it/s]
 92%|| 73/79 [00:03<00:00, 26.01it/s]
 96%|| 76/79 [00:03<00:00, 26.70it/s]
100%|| 79/79 [00:04<00:00,  8.69it/s]
, 25.03it/s]
 70%|   | 55/79 [00:02<00:00, 25.55it/s]
 73%|  | 58/79 [00:03<00:00, 25.75it/s]
 77%|  | 61/79 [00:03<00:00, 25.56it/s]
 81%|  | 64/79 [00:03<00:00, 25.55it/s]
 85%| | 67/79 [00:03<00:00, 25.66it/s]
 89%| | 70/79 [00:03<00:00, 25.81it/s]
 92%|| 73/79 [00:03<00:00, 25.61it/s]
 96%|| 76/79 [00:03<00:00, 26.35it/s]
100%|| 79/79 [00:04<00:00,  8.66it/s]
, 24.65it/s]
 70%|   | 55/79 [00:02<00:00, 24.88it/s]
 73%|  | 58/79 [00:03<00:00, 25.26it/s]
 77%|  | 61/79 [00:03<00:00, 24.98it/s]
 81%|  | 64/79 [00:03<00:00, 24.92it/s]
 85%| | 67/79 [00:03<00:00, 24.80it/s]
 89%| | 70/79 [00:03<00:00, 24.59it/s]
 92%|| 73/79 [00:03<00:00, 25.06it/s]
 96%|| 76/79 [00:03<00:00, 25.72it/s]
100%|| 79/79 [00:04<00:00,  8.62it/s]
, 23.98it/s]
 70%|   | 55/79 [00:02<00:00, 24.47it/s]
 73%|  | 58/79 [00:03<00:00, 24.78it/s]
 77%|  | 61/79 [00:03<00:00, 24.95it/s]
 81%|  | 64/79 [00:03<00:00, 25.00it/s]
 85%| | 67/79 [00:03<00:00, 25.13it/s]
 89%| | 70/79 [00:03<00:00, 25.14it/s]
 92%|| 73/79 [00:03<00:00, 25.61it/s]
 96%|| 76/79 [00:03<00:00, 26.33it/s]
100%|| 79/79 [00:04<00:00,  8.77it/s]
, 24.04it/s]
 70%|   | 55/79 [00:03<00:00, 24.17it/s]
 73%|  | 58/79 [00:03<00:00, 24.39it/s]
 77%|  | 61/79 [00:03<00:00, 24.72it/s]
 81%|  | 64/79 [00:03<00:00, 24.84it/s]
 85%| | 67/79 [00:03<00:00, 25.15it/s]
 89%| | 70/79 [00:03<00:00, 25.51it/s]
 92%|| 73/79 [00:03<00:00, 25.76it/s]
 96%|| 76/79 [00:03<00:00, 26.51it/s]
100%|| 79/79 [00:04<00:00,  8.78it/s]
, 24.36it/s]
 70%|   | 55/79 [00:02<00:00, 24.81it/s]
 73%|  | 58/79 [00:03<00:00, 24.64it/s]
 77%|  | 61/79 [00:03<00:00, 24.72it/s]
 81%|  | 64/79 [00:03<00:00, 24.97it/s]
 85%| | 67/79 [00:03<00:00, 25.03it/s]
 89%| | 70/79 [00:03<00:00, 25.15it/s]
 92%|| 73/79 [00:03<00:00, 25.37it/s]
 96%|| 76/79 [00:03<00:00, 25.93it/s]
100%|| 79/79 [00:04<00:00,  8.65it/s]
, 24.35it/s]
 70%|   | 55/79 [00:03<00:00, 24.37it/s]
 73%|  | 58/79 [00:03<00:00, 24.65it/s]
 77%|  | 61/79 [00:03<00:00, 24.92it/s]
 81%|  | 64/79 [00:03<00:00, 25.15it/s]
 85%| | 67/79 [00:03<00:00, 25.18it/s]
 89%| | 70/79 [00:03<00:00, 25.39it/s]
 92%|| 73/79 [00:03<00:00, 25.90it/s]
 96%|| 76/79 [00:03<00:00, 26.63it/s]
100%|| 79/79 [00:04<00:00,  8.74it/s]
, 24.28it/s]
 70%|   | 55/79 [00:03<00:00, 24.60it/s]
 73%|  | 58/79 [00:03<00:00, 24.85it/s]
 77%|  | 61/79 [00:03<00:00, 24.94it/s]
 81%|  | 64/79 [00:03<00:00, 24.62it/s]
 85%| | 67/79 [00:03<00:00, 24.81it/s]
 89%| | 70/79 [00:03<00:00, 24.89it/s]
 92%|| 73/79 [00:03<00:00, 25.44it/s]
 96%|| 76/79 [00:03<00:00, 26.18it/s]
100%|| 79/79 [00:04<00:00,  8.63it/s]
, 23.96it/s]
 70%|   | 55/79 [00:03<00:00, 24.17it/s]
 73%|  | 58/79 [00:03<00:00, 24.54it/s]
 77%|  | 61/79 [00:03<00:00, 24.83it/s]
 81%|  | 64/79 [00:03<00:00, 25.03it/s]
 85%| | 67/79 [00:03<00:00, 24.97it/s]
 89%| | 70/79 [00:03<00:00, 25.27it/s]
 92%|| 73/79 [00:03<00:00, 25.64it/s]
 96%|| 76/79 [00:03<00:00, 26.36it/s]
100%|| 79/79 [00:04<00:00,  8.67it/s]
, 24.15it/s]
 70%|   | 55/79 [00:03<00:00, 24.62it/s]
 73%|  | 58/79 [00:03<00:00, 25.06it/s]
 77%|  | 61/79 [00:03<00:00, 25.21it/s]
 81%|  | 64/79 [00:03<00:00, 25.45it/s]
 85%| | 67/79 [00:03<00:00, 25.72it/s]
 89%| | 70/79 [00:03<00:00, 25.61it/s]
 92%|| 73/79 [00:03<00:00, 26.02it/s]
 96%|| 76/79 [00:03<00:00, 26.65it/s]
100%|| 79/79 [00:04<00:00,  8.68it/s]
, 24.45it/s]
 70%|   | 55/79 [00:03<00:00, 24.81it/s]
 73%|  | 58/79 [00:03<00:00, 25.31it/s]
 77%|  | 61/79 [00:03<00:00, 25.46it/s]
 81%|  | 64/79 [00:03<00:00, 25.46it/s]
 85%| | 67/79 [00:03<00:00, 25.54it/s]
 89%| | 70/79 [00:03<00:00, 25.82it/s]
 92%|| 73/79 [00:03<00:00, 26.02it/s]
 96%|| 76/79 [00:04<00:00,  8.65it/s]
100%|| 79/79 [00:04<00:00, 10.90it/s]
, 24.03it/s]
 70%|   | 55/79 [00:03<00:00, 24.54it/s]
 73%|  | 58/79 [00:03<00:00, 24.66it/s]
 77%|  | 61/79 [00:03<00:00, 24.67it/s]
 81%|  | 64/79 [00:03<00:00, 24.41it/s]
 85%| | 67/79 [00:03<00:00, 24.96it/s]
 89%| | 70/79 [00:03<00:00, 25.21it/s]
 92%|| 73/79 [00:03<00:00, 25.87it/s]
 96%|| 76/79 [00:03<00:00, 26.30it/s]
100%|| 79/79 [00:04<00:00,  8.68it/s]
, 23.97it/s]
 70%|   | 55/79 [00:03<00:00, 24.46it/s]
 73%|  | 58/79 [00:03<00:00, 24.77it/s]
 77%|  | 61/79 [00:03<00:00, 25.21it/s]
 81%|  | 64/79 [00:03<00:00, 25.50it/s]
 85%| | 67/79 [00:03<00:00, 25.83it/s]
 89%| | 70/79 [00:03<00:00, 25.80it/s]
 92%|| 73/79 [00:03<00:00, 26.11it/s]
 96%|| 76/79 [00:04<00:00,  8.64it/s]
100%|| 79/79 [00:04<00:00, 10.89it/s]
, 23.83it/s]
 70%|   | 55/79 [00:03<00:00, 24.33it/s]
 73%|  | 58/79 [00:03<00:00, 24.73it/s]
 77%|  | 61/79 [00:03<00:00, 25.11it/s]
 81%|  | 64/79 [00:03<00:00, 25.17it/s]
 85%| | 67/79 [00:03<00:00, 25.15it/s]
 89%| | 70/79 [00:03<00:00, 24.91it/s]
 92%|| 73/79 [00:03<00:00, 25.66it/s]
 96%|| 76/79 [00:03<00:00, 25.97it/s]
100%|| 79/79 [00:04<00:00,  8.45it/s]
, 23.32it/s]
 70%|   | 55/79 [00:03<00:01, 23.48it/s]
 73%|  | 58/79 [00:03<00:00, 23.68it/s]
 77%|  | 61/79 [00:03<00:00, 23.91it/s]
 81%|  | 64/79 [00:03<00:00, 24.13it/s]
 85%| | 67/79 [00:03<00:00, 24.04it/s]
 89%| | 70/79 [00:03<00:00, 24.11it/s]
 92%|| 73/79 [00:03<00:00, 24.55it/s]
 96%|| 76/79 [00:03<00:00, 25.35it/s]
100%|| 79/79 [00:04<00:00,  8.43it/s]
, 22.82it/s]
 70%|   | 55/79 [00:03<00:01, 23.30it/s]
 73%|  | 58/79 [00:03<00:00, 23.84it/s]
 77%|  | 61/79 [00:03<00:00, 24.01it/s]
 81%|  | 64/79 [00:03<00:00, 24.26it/s]
 85%| | 67/79 [00:03<00:00, 24.52it/s]
 89%| | 70/79 [00:03<00:00, 24.53it/s]
 92%|| 73/79 [00:03<00:00, 24.86it/s]
 96%|| 76/79 [00:03<00:00, 25.66it/s]
100%|| 79/79 [00:04<00:00,  8.47it/s]
, 23.32it/s]
 70%|   | 55/79 [00:03<00:01, 23.84it/s]
 73%|  | 58/79 [00:03<00:00, 24.08it/s]
 77%|  | 61/79 [00:03<00:00, 24.48it/s]
 81%|  | 64/79 [00:03<00:00, 24.56it/s]
 85%| | 67/79 [00:03<00:00, 24.74it/s]
 89%| | 70/79 [00:03<00:00, 24.79it/s]
 92%|| 73/79 [00:03<00:00, 25.15it/s]
 96%|| 76/79 [00:03<00:00, 26.04it/s]
100%|| 79/79 [00:04<00:00,  8.40it/s]
, 23.24it/s]
 70%|   | 55/79 [00:03<00:01, 23.51it/s]
 73%|  | 58/79 [00:03<00:00, 23.80it/s]
 77%|  | 61/79 [00:03<00:00, 23.95it/s]
 81%|  | 64/79 [00:03<00:00, 23.71it/s]
 85%| | 67/79 [00:03<00:00, 23.86it/s]
 89%| | 70/79 [00:03<00:00, 24.08it/s]
 92%|| 73/79 [00:03<00:00, 24.56it/s]
 96%|| 76/79 [00:04<00:00, 25.40it/s]
100%|| 79/79 [00:04<00:00,  8.50it/s]
2020-06-23 16:20:45,558 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:05.040505 (0.032259230041503904 s / img per device, on 32 devices)
2020-06-23 16:20:45,579 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:20:45,579 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:20:45,600 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592954456632, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 2, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592954456633, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 2}}
2020-06-23 16:20:56,970 maskrcnn_benchmark.trainer INFO: eta: 1:28:04  iter: 920  loss: 0.8473 (1.1569)  loss_classifier: 0.3099 (0.4566)  loss_box_reg: 0.1223 (0.1580)  loss_mask: 0.3112 (0.4391)  loss_objectness: 0.0341 (0.0759)  loss_rpn_box_reg: 0.0159 (0.0273)  time: 0.1083 (0.1352)  data: 0.0015 (0.0211)  lr: 0.160000  max mem: 4954
Evaluating predictions
creating index...
2020-06-23 16:20:59,156 maskrcnn_benchmark.trainer INFO: eta: 1:27:40  iter: 940  loss: 0.8767 (1.1518)  loss_classifier: 0.3185 (0.4545)  loss_box_reg: 0.1263 (0.1577)  loss_mask: 0.3395 (0.4371)  loss_objectness: 0.0421 (0.0753)  loss_rpn_box_reg: 0.0108 (0.0272)  time: 0.1090 (0.1347)  data: 0.0015 (0.0206)  lr: 0.160000  max mem: 4954
2020-06-23 16:21:01,292 maskrcnn_benchmark.trainer INFO: eta: 1:27:15  iter: 960  loss: 0.8936 (1.1463)  loss_classifier: 0.3367 (0.4513)  loss_box_reg: 0.1469 (0.1572)  loss_mask: 0.3285 (0.4349)  loss_objectness: 0.0474 (0.0753)  loss_rpn_box_reg: 0.0251 (0.0276)  time: 0.1068 (0.1341)  data: 0.0015 (0.0203)  lr: 0.160000  max mem: 4954
2020-06-23 16:21:03,439 maskrcnn_benchmark.trainer INFO: eta: 1:26:51  iter: 980  loss: 0.8492 (1.1402)  loss_classifier: 0.3190 (0.4485)  loss_box_reg: 0.1467 (0.1570)  loss_mask: 0.3323 (0.4329)  loss_objectness: 0.0271 (0.0744)  loss_rpn_box_reg: 0.0081 (0.0274)  time: 0.1069 (0.1335)  data: 0.0015 (0.0199)  lr: 0.160000  max mem: 4954
2020-06-23 16:21:05,563 maskrcnn_benchmark.trainer INFO: eta: 1:26:27  iter: 1000  loss: 0.8983 (1.1351)  loss_classifier: 0.3193 (0.4464)  loss_box_reg: 0.1233 (0.1568)  loss_mask: 0.3283 (0.4308)  loss_objectness: 0.0364 (0.0739)  loss_rpn_box_reg: 0.0114 (0.0273)  time: 0.1058 (0.1330)  data: 0.0015 (0.0195)  lr: 0.160000  max mem: 4954
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.93s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:21:07,702 maskrcnn_benchmark.trainer INFO: eta: 1:26:04  iter: 1020  loss: 0.8125 (1.1298)  loss_classifier: 0.2752 (0.4438)  loss_box_reg: 0.1145 (0.1564)  loss_mask: 0.3197 (0.4286)  loss_objectness: 0.0322 (0.0735)  loss_rpn_box_reg: 0.0121 (0.0275)  time: 0.1065 (0.1325)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 4954
DONE (t=1.76s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.16153
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.32920
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.14039
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.08573
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.17683
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.21447
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.18087
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.30336
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32040
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.16516
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33914
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.42088
2020-06-23 16:21:09,819 maskrcnn_benchmark.trainer INFO: eta: 1:25:41  iter: 1040  loss: 0.8447 (1.1246)  loss_classifier: 0.3130 (0.4417)  loss_box_reg: 0.1399 (0.1560)  loss_mask: 0.3219 (0.4267)  loss_objectness: 0.0316 (0.0728)  loss_rpn_box_reg: 0.0090 (0.0273)  time: 0.1055 (0.1320)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 4954
2020-06-23 16:21:11,948 maskrcnn_benchmark.trainer INFO: eta: 1:25:20  iter: 1060  loss: 0.8551 (1.1209)  loss_classifier: 0.3449 (0.4400)  loss_box_reg: 0.1609 (0.1560)  loss_mask: 0.3313 (0.4252)  loss_objectness: 0.0340 (0.0723)  loss_rpn_box_reg: 0.0158 (0.0274)  time: 0.1060 (0.1315)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 4954
2020-06-23 16:21:14,072 maskrcnn_benchmark.trainer INFO: eta: 1:24:59  iter: 1080  loss: 0.7640 (1.1145)  loss_classifier: 0.2764 (0.4371)  loss_box_reg: 0.1222 (0.1556)  loss_mask: 0.3104 (0.4230)  loss_objectness: 0.0257 (0.0716)  loss_rpn_box_reg: 0.0111 (0.0272)  time: 0.1058 (0.1310)  data: 0.0015 (0.0182)  lr: 0.160000  max mem: 4954
2020-06-23 16:21:16,205 maskrcnn_benchmark.trainer INFO: eta: 1:24:39  iter: 1100  loss: 0.8326 (1.1096)  loss_classifier: 0.3406 (0.4350)  loss_box_reg: 0.1337 (0.1554)  loss_mask: 0.3102 (0.4211)  loss_objectness: 0.0340 (0.0710)  loss_rpn_box_reg: 0.0111 (0.0270)  time: 0.1062 (0.1306)  data: 0.0015 (0.0179)  lr: 0.160000  max mem: 4954
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:21:18,329 maskrcnn_benchmark.trainer INFO: eta: 1:24:20  iter: 1120  loss: 0.7686 (1.1049)  loss_classifier: 0.3102 (0.4327)  loss_box_reg: 0.1189 (0.1551)  loss_mask: 0.3247 (0.4194)  loss_objectness: 0.0311 (0.0706)  loss_rpn_box_reg: 0.0126 (0.0271)  time: 0.1059 (0.1302)  data: 0.0015 (0.0176)  lr: 0.160000  max mem: 4954
DONE (t=2.76s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:21:20,468 maskrcnn_benchmark.trainer INFO: eta: 1:24:01  iter: 1140  loss: 0.9178 (1.1011)  loss_classifier: 0.3496 (0.4311)  loss_box_reg: 0.1511 (0.1551)  loss_mask: 0.3117 (0.4178)  loss_objectness: 0.0320 (0.0701)  loss_rpn_box_reg: 0.0132 (0.0271)  time: 0.1065 (0.1297)  data: 0.0015 (0.0173)  lr: 0.160000  max mem: 4954
DONE (t=3.08s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.16650
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.30891
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.15989
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.06406
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.17786
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.25318
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.18763
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.30111
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.31563
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.14833
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.33980
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.42151
2020-06-23 16:21:22,589 maskrcnn_benchmark.trainer INFO: eta: 1:23:43  iter: 1160  loss: 0.8886 (1.0986)  loss_classifier: 0.3573 (0.4302)  loss_box_reg: 0.1451 (0.1551)  loss_mask: 0.3096 (0.4162)  loss_objectness: 0.0405 (0.0699)  loss_rpn_box_reg: 0.0154 (0.0271)  time: 0.1055 (0.1293)  data: 0.0014 (0.0170)  lr: 0.160000  max mem: 4954
2020-06-23 16:21:23,036 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.16153003848363293, segm mAP: 0.16649739189940937
:::MLLOG {"namespace": "", "time_ms": 1592954483036, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.16153003848363293, "SEGM": 0.16649739189940937}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592954483036, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 1}}
2020-06-23 16:21:24,955 maskrcnn_benchmark.trainer INFO: eta: 1:23:33  iter: 1180  loss: 0.8033 (1.0937)  loss_classifier: 0.3050 (0.4279)  loss_box_reg: 0.1318 (0.1548)  loss_mask: 0.2953 (0.4146)  loss_objectness: 0.0274 (0.0692)  loss_rpn_box_reg: 0.0181 (0.0271)  time: 0.1056 (0.1291)  data: 0.0014 (0.0168)  lr: 0.160000  max mem: 4954
2020-06-23 16:21:27,105 maskrcnn_benchmark.trainer INFO: eta: 1:23:16  iter: 1200  loss: 0.7806 (1.0896)  loss_classifier: 0.2966 (0.4261)  loss_box_reg: 0.1407 (0.1544)  loss_mask: 0.3008 (0.4131)  loss_objectness: 0.0265 (0.0688)  loss_rpn_box_reg: 0.0151 (0.0271)  time: 0.1071 (0.1288)  data: 0.0015 (0.0165)  lr: 0.160000  max mem: 4954
2020-06-23 16:21:29,230 maskrcnn_benchmark.trainer INFO: eta: 1:23:00  iter: 1220  loss: 0.8887 (1.0868)  loss_classifier: 0.3325 (0.4250)  loss_box_reg: 0.1616 (0.1545)  loss_mask: 0.3182 (0.4116)  loss_objectness: 0.0463 (0.0685)  loss_rpn_box_reg: 0.0205 (0.0271)  time: 0.1067 (0.1284)  data: 0.0015 (0.0163)  lr: 0.160000  max mem: 4954
2020-06-23 16:21:31,356 maskrcnn_benchmark.trainer INFO: eta: 1:22:43  iter: 1240  loss: 0.7286 (1.0820)  loss_classifier: 0.2747 (0.4228)  loss_box_reg: 0.1211 (0.1543)  loss_mask: 0.3057 (0.4098)  loss_objectness: 0.0261 (0.0680)  loss_rpn_box_reg: 0.0094 (0.0271)  time: 0.1057 (0.1281)  data: 0.0014 (0.0160)  lr: 0.160000  max mem: 4954
2020-06-23 16:21:33,473 maskrcnn_benchmark.trainer INFO: eta: 1:22:27  iter: 1260  loss: 0.8334 (1.0786)  loss_classifier: 0.3198 (0.4216)  loss_box_reg: 0.1178 (0.1541)  loss_mask: 0.3233 (0.4085)  loss_objectness: 0.0281 (0.0676)  loss_rpn_box_reg: 0.0100 (0.0269)  time: 0.1062 (0.1277)  data: 0.0015 (0.0158)  lr: 0.160000  max mem: 4954
2020-06-23 16:21:35,613 maskrcnn_benchmark.trainer INFO: eta: 1:22:12  iter: 1280  loss: 0.7865 (1.0743)  loss_classifier: 0.2943 (0.4198)  loss_box_reg: 0.1285 (0.1537)  loss_mask: 0.2943 (0.4068)  loss_objectness: 0.0272 (0.0671)  loss_rpn_box_reg: 0.0135 (0.0268)  time: 0.1062 (0.1274)  data: 0.0015 (0.0156)  lr: 0.160000  max mem: 4954
2020-06-23 16:21:37,762 maskrcnn_benchmark.trainer INFO: eta: 1:21:57  iter: 1300  loss: 0.7895 (1.0707)  loss_classifier: 0.2737 (0.4180)  loss_box_reg: 0.1296 (0.1535)  loss_mask: 0.3461 (0.4061)  loss_objectness: 0.0252 (0.0665)  loss_rpn_box_reg: 0.0097 (0.0267)  time: 0.1073 (0.1271)  data: 0.0014 (0.0153)  lr: 0.160000  max mem: 4954
2020-06-23 16:21:39,885 maskrcnn_benchmark.trainer INFO: eta: 1:21:43  iter: 1320  loss: 0.8674 (1.0677)  loss_classifier: 0.3154 (0.4166)  loss_box_reg: 0.1556 (0.1535)  loss_mask: 0.3281 (0.4049)  loss_objectness: 0.0366 (0.0661)  loss_rpn_box_reg: 0.0135 (0.0266)  time: 0.1052 (0.1268)  data: 0.0015 (0.0151)  lr: 0.160000  max mem: 4954
2020-06-23 16:21:42,042 maskrcnn_benchmark.trainer INFO: eta: 1:21:29  iter: 1340  loss: 0.6776 (1.0628)  loss_classifier: 0.2631 (0.4144)  loss_box_reg: 0.1165 (0.1530)  loss_mask: 0.2764 (0.4032)  loss_objectness: 0.0196 (0.0657)  loss_rpn_box_reg: 0.0124 (0.0265)  time: 0.1073 (0.1265)  data: 0.0014 (0.0149)  lr: 0.160000  max mem: 4954
2020-06-23 16:21:44,191 maskrcnn_benchmark.trainer INFO: eta: 1:21:16  iter: 1360  loss: 0.8811 (1.0599)  loss_classifier: 0.3110 (0.4131)  loss_box_reg: 0.1364 (0.1530)  loss_mask: 0.3062 (0.4019)  loss_objectness: 0.0407 (0.0655)  loss_rpn_box_reg: 0.0163 (0.0264)  time: 0.1071 (0.1262)  data: 0.0015 (0.0147)  lr: 0.160000  max mem: 4954
2020-06-23 16:21:46,336 maskrcnn_benchmark.trainer INFO: eta: 1:21:03  iter: 1380  loss: 0.9063 (1.0581)  loss_classifier: 0.3316 (0.4125)  loss_box_reg: 0.1697 (0.1531)  loss_mask: 0.3354 (0.4010)  loss_objectness: 0.0301 (0.0652)  loss_rpn_box_reg: 0.0157 (0.0263)  time: 0.1063 (0.1259)  data: 0.0015 (0.0145)  lr: 0.160000  max mem: 4982
2020-06-23 16:21:48,463 maskrcnn_benchmark.trainer INFO: eta: 1:20:49  iter: 1400  loss: 0.7872 (1.0544)  loss_classifier: 0.2910 (0.4109)  loss_box_reg: 0.1418 (0.1529)  loss_mask: 0.3017 (0.3995)  loss_objectness: 0.0305 (0.0648)  loss_rpn_box_reg: 0.0115 (0.0263)  time: 0.1066 (0.1256)  data: 0.0015 (0.0144)  lr: 0.160000  max mem: 4982
2020-06-23 16:21:50,578 maskrcnn_benchmark.trainer INFO: eta: 1:20:36  iter: 1420  loss: 0.7141 (1.0508)  loss_classifier: 0.2684 (0.4094)  loss_box_reg: 0.1126 (0.1526)  loss_mask: 0.3168 (0.3983)  loss_objectness: 0.0249 (0.0643)  loss_rpn_box_reg: 0.0110 (0.0262)  time: 0.1048 (0.1254)  data: 0.0015 (0.0142)  lr: 0.160000  max mem: 4982
2020-06-23 16:21:52,725 maskrcnn_benchmark.trainer INFO: eta: 1:20:24  iter: 1440  loss: 0.7588 (1.0470)  loss_classifier: 0.2810 (0.4075)  loss_box_reg: 0.1256 (0.1523)  loss_mask: 0.3096 (0.3971)  loss_objectness: 0.0357 (0.0640)  loss_rpn_box_reg: 0.0113 (0.0260)  time: 0.1063 (0.1251)  data: 0.0015 (0.0140)  lr: 0.160000  max mem: 4982
2020-06-23 16:21:54,873 maskrcnn_benchmark.trainer INFO: eta: 1:20:12  iter: 1460  loss: 0.8848 (1.0449)  loss_classifier: 0.3352 (0.4065)  loss_box_reg: 0.1339 (0.1523)  loss_mask: 0.3336 (0.3964)  loss_objectness: 0.0358 (0.0637)  loss_rpn_box_reg: 0.0100 (0.0260)  time: 0.1074 (0.1249)  data: 0.0015 (0.0138)  lr: 0.160000  max mem: 4982
2020-06-23 16:21:57,011 maskrcnn_benchmark.trainer INFO: eta: 1:20:00  iter: 1480  loss: 0.7271 (1.0410)  loss_classifier: 0.2665 (0.4047)  loss_box_reg: 0.1194 (0.1519)  loss_mask: 0.3063 (0.3951)  loss_objectness: 0.0185 (0.0635)  loss_rpn_box_reg: 0.0090 (0.0258)  time: 0.1071 (0.1246)  data: 0.0014 (0.0137)  lr: 0.160000  max mem: 4982
2020-06-23 16:21:59,149 maskrcnn_benchmark.trainer INFO: eta: 1:19:49  iter: 1500  loss: 0.7747 (1.0376)  loss_classifier: 0.2816 (0.4031)  loss_box_reg: 0.1382 (0.1516)  loss_mask: 0.2939 (0.3938)  loss_objectness: 0.0300 (0.0631)  loss_rpn_box_reg: 0.0175 (0.0258)  time: 0.1061 (0.1244)  data: 0.0015 (0.0135)  lr: 0.160000  max mem: 4982
2020-06-23 16:22:01,289 maskrcnn_benchmark.trainer INFO: eta: 1:19:37  iter: 1520  loss: 0.8986 (1.0358)  loss_classifier: 0.3143 (0.4024)  loss_box_reg: 0.1461 (0.1515)  loss_mask: 0.2992 (0.3926)  loss_objectness: 0.0295 (0.0633)  loss_rpn_box_reg: 0.0099 (0.0260)  time: 0.1071 (0.1242)  data: 0.0015 (0.0133)  lr: 0.160000  max mem: 4982
2020-06-23 16:22:03,446 maskrcnn_benchmark.trainer INFO: eta: 1:19:27  iter: 1540  loss: 0.7102 (1.0316)  loss_classifier: 0.2806 (0.4008)  loss_box_reg: 0.1157 (0.1510)  loss_mask: 0.2520 (0.3911)  loss_objectness: 0.0236 (0.0628)  loss_rpn_box_reg: 0.0108 (0.0259)  time: 0.1063 (0.1240)  data: 0.0014 (0.0132)  lr: 0.160000  max mem: 4982
2020-06-23 16:22:05,575 maskrcnn_benchmark.trainer INFO: eta: 1:19:16  iter: 1560  loss: 0.8101 (1.0288)  loss_classifier: 0.2835 (0.3995)  loss_box_reg: 0.1254 (0.1508)  loss_mask: 0.2996 (0.3899)  loss_objectness: 0.0293 (0.0626)  loss_rpn_box_reg: 0.0141 (0.0260)  time: 0.1062 (0.1237)  data: 0.0015 (0.0130)  lr: 0.160000  max mem: 4982
2020-06-23 16:22:07,719 maskrcnn_benchmark.trainer INFO: eta: 1:19:05  iter: 1580  loss: 0.8288 (1.0268)  loss_classifier: 0.3103 (0.3984)  loss_box_reg: 0.1481 (0.1508)  loss_mask: 0.3141 (0.3892)  loss_objectness: 0.0304 (0.0623)  loss_rpn_box_reg: 0.0187 (0.0260)  time: 0.1064 (0.1235)  data: 0.0015 (0.0129)  lr: 0.160000  max mem: 4982
2020-06-23 16:22:09,864 maskrcnn_benchmark.trainer INFO: eta: 1:18:55  iter: 1600  loss: 0.7583 (1.0240)  loss_classifier: 0.3137 (0.3973)  loss_box_reg: 0.1289 (0.1506)  loss_mask: 0.2887 (0.3880)  loss_objectness: 0.0311 (0.0621)  loss_rpn_box_reg: 0.0144 (0.0259)  time: 0.1072 (0.1233)  data: 0.0014 (0.0128)  lr: 0.160000  max mem: 4982
2020-06-23 16:22:12,007 maskrcnn_benchmark.trainer INFO: eta: 1:18:45  iter: 1620  loss: 0.8348 (1.0221)  loss_classifier: 0.2936 (0.3964)  loss_box_reg: 0.1169 (0.1504)  loss_mask: 0.3139 (0.3872)  loss_objectness: 0.0438 (0.0621)  loss_rpn_box_reg: 0.0200 (0.0259)  time: 0.1069 (0.1231)  data: 0.0015 (0.0126)  lr: 0.160000  max mem: 4982
2020-06-23 16:22:14,130 maskrcnn_benchmark.trainer INFO: eta: 1:18:34  iter: 1640  loss: 0.7575 (1.0189)  loss_classifier: 0.2927 (0.3950)  loss_box_reg: 0.1267 (0.1502)  loss_mask: 0.3086 (0.3861)  loss_objectness: 0.0246 (0.0618)  loss_rpn_box_reg: 0.0095 (0.0258)  time: 0.1059 (0.1229)  data: 0.0014 (0.0125)  lr: 0.160000  max mem: 4982
2020-06-23 16:22:16,274 maskrcnn_benchmark.trainer INFO: eta: 1:18:25  iter: 1660  loss: 0.7729 (1.0163)  loss_classifier: 0.2942 (0.3938)  loss_box_reg: 0.1307 (0.1499)  loss_mask: 0.3082 (0.3853)  loss_objectness: 0.0319 (0.0615)  loss_rpn_box_reg: 0.0161 (0.0258)  time: 0.1067 (0.1227)  data: 0.0015 (0.0123)  lr: 0.160000  max mem: 4982
2020-06-23 16:22:18,413 maskrcnn_benchmark.trainer INFO: eta: 1:18:15  iter: 1680  loss: 0.8613 (1.0143)  loss_classifier: 0.3432 (0.3929)  loss_box_reg: 0.1438 (0.1498)  loss_mask: 0.2980 (0.3843)  loss_objectness: 0.0239 (0.0614)  loss_rpn_box_reg: 0.0121 (0.0258)  time: 0.1066 (0.1225)  data: 0.0014 (0.0122)  lr: 0.160000  max mem: 4982
2020-06-23 16:22:20,563 maskrcnn_benchmark.trainer INFO: eta: 1:18:06  iter: 1700  loss: 0.7652 (1.0125)  loss_classifier: 0.2833 (0.3920)  loss_box_reg: 0.1172 (0.1497)  loss_mask: 0.3317 (0.3837)  loss_objectness: 0.0248 (0.0612)  loss_rpn_box_reg: 0.0118 (0.0259)  time: 0.1064 (0.1224)  data: 0.0015 (0.0121)  lr: 0.160000  max mem: 4982
2020-06-23 16:22:22,700 maskrcnn_benchmark.trainer INFO: eta: 1:17:56  iter: 1720  loss: 0.8781 (1.0109)  loss_classifier: 0.3469 (0.3915)  loss_box_reg: 0.1434 (0.1498)  loss_mask: 0.3148 (0.3829)  loss_objectness: 0.0279 (0.0610)  loss_rpn_box_reg: 0.0150 (0.0258)  time: 0.1071 (0.1222)  data: 0.0015 (0.0120)  lr: 0.160000  max mem: 4982
2020-06-23 16:22:24,845 maskrcnn_benchmark.trainer INFO: eta: 1:17:47  iter: 1740  loss: 0.6525 (1.0080)  loss_classifier: 0.2371 (0.3902)  loss_box_reg: 0.1138 (0.1494)  loss_mask: 0.2999 (0.3818)  loss_objectness: 0.0230 (0.0608)  loss_rpn_box_reg: 0.0094 (0.0258)  time: 0.1071 (0.1220)  data: 0.0015 (0.0118)  lr: 0.160000  max mem: 4982
2020-06-23 16:22:27,005 maskrcnn_benchmark.trainer INFO: eta: 1:17:39  iter: 1760  loss: 0.7498 (1.0055)  loss_classifier: 0.2707 (0.3890)  loss_box_reg: 0.1228 (0.1492)  loss_mask: 0.3196 (0.3810)  loss_objectness: 0.0261 (0.0606)  loss_rpn_box_reg: 0.0122 (0.0257)  time: 0.1074 (0.1218)  data: 0.0015 (0.0117)  lr: 0.160000  max mem: 4982
2020-06-23 16:22:29,152 maskrcnn_benchmark.trainer INFO: eta: 1:17:30  iter: 1780  loss: 0.8483 (1.0037)  loss_classifier: 0.3172 (0.3883)  loss_box_reg: 0.1340 (0.1491)  loss_mask: 0.3119 (0.3802)  loss_objectness: 0.0311 (0.0604)  loss_rpn_box_reg: 0.0137 (0.0257)  time: 0.1071 (0.1217)  data: 0.0014 (0.0116)  lr: 0.160000  max mem: 4982
2020-06-23 16:22:31,275 maskrcnn_benchmark.trainer INFO: eta: 1:17:21  iter: 1800  loss: 0.7912 (1.0014)  loss_classifier: 0.3196 (0.3874)  loss_box_reg: 0.1279 (0.1490)  loss_mask: 0.3118 (0.3793)  loss_objectness: 0.0197 (0.0601)  loss_rpn_box_reg: 0.0105 (0.0256)  time: 0.1065 (0.1215)  data: 0.0014 (0.0115)  lr: 0.160000  max mem: 4982
2020-06-23 16:22:33,417 maskrcnn_benchmark.trainer INFO: eta: 1:17:13  iter: 1820  loss: 0.7788 (0.9990)  loss_classifier: 0.3080 (0.3865)  loss_box_reg: 0.1165 (0.1487)  loss_mask: 0.2930 (0.3784)  loss_objectness: 0.0273 (0.0599)  loss_rpn_box_reg: 0.0093 (0.0255)  time: 0.1064 (0.1213)  data: 0.0015 (0.0114)  lr: 0.160000  max mem: 4982
:::MLLOG {"namespace": "", "time_ms": 1592954555478, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1592954555478, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1592954555479, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 2}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 16:22:35,737 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
Done (t=0.29s)
creating index...
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.30s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.31s)
creating index...
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
Done (t=0.31s)
creating index...
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 16:22:36,063 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:59,  1.31it/s]
  5%|         | 4/79 [00:00<00:40,  1.83it/s]
  9%|         | 7/79 [00:01<00:28,  2.54it/s]
 13%|        | 10/79 [00:01<00:19,  3.48it/s]
 16%|        | 13/79 [00:01<00:14,  4.71it/s]
 20%|        | 16/79 [00:01<00:10,  6.24it/s]
 24%|       | 19/79 [00:01<00:07,  8.07it/s]
 28%|       | 22/79 [00:01<00:05, 10.15it/s]
 32%|      | 25/79 [00:01<00:04, 12.44it/s]
 35%|      | 28/79 [00:01<00:03, 14.68it/s]
 39%|      | 31/79 [00:01<00:02, 16.77it/s]
 43%|     | 34/79 [00:02<00:02, 18.77it/s]
 47%|     | 37/79 [00:02<00:02, 20.38it/s]
 51%|     | 40/79 [00:02<00:01, 21.79it/s]
 54%|    | 43/79 [00:02<00:01, 22.79it/s]
 58%|    | 46/79 [00:02<00:01, 23.39it/s]
 62%|   | 49/79 [00:02<00:01, 24.05it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  4%|         | 3/79 [00:00<00:44,  1.71it/s]
  8%|         | 6/79 [00:01<00:30,  2.37it/s]
 11%|        | 9/79 [00:01<00:21,  3.25it/s]
 15%|        | 12/79 [00:01<00:15,  4.41it/s]
 19%|        | 15/79 [00:01<00:10,  5.86it/s]
 23%|       | 18/79 [00:01<00:08,  7.61it/s]
 27%|       | 21/79 [00:01<00:05,  9.67it/s]
 30%|       | 24/79 [00:01<00:04, 11.91it/s]
 34%|      | 27/79 [00:01<00:03, 14.17it/s]
 38%|      | 30/79 [00:01<00:02, 16.42it/s]
 42%|     | 33/79 [00:02<00:02, 18.43it/s]
 46%|     | 36/79 [00:02<00:02, 20.03it/s]
 49%|     | 39/79 [00:02<00:01, 21.32it/s]
 53%|    | 42/79 [00:02<00:01, 22.62it/s]
 57%|    | 45/79 [00:02<00:01, 23.68it/s]
 61%|    | 48/79 [00:02<00:01, 24.28it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.27it/s]
 16%|        | 13/79 [00:01<00:14,  4.44it/s]
 20%|        | 16/79 [00:01<00:10,  5.88it/s]
 24%|       | 19/79 [00:01<00:07,  7.66it/s]
 28%|       | 22/79 [00:01<00:05,  9.70it/s]
 32%|      | 25/79 [00:01<00:04, 11.98it/s]
 35%|      | 28/79 [00:01<00:03, 14.20it/s]
 39%|      | 31/79 [00:02<00:02, 16.38it/s]
 43%|     | 34/79 [00:02<00:02, 18.42it/s]
 47%|     | 37/79 [00:02<00:02, 20.18it/s]
 51%|     | 40/79 [00:02<00:01, 21.57it/s]
 54%|    | 43/79 [00:02<00:01, 22.64it/s]
 58%|    | 46/79 [00:02<00:01, 23.18it/s]
 62%|   | 49/79 [00:02<00:01, 23.92it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.46it/s]
 28%|       | 22/79 [00:01<00:05,  9.51it/s]
 32%|      | 25/79 [00:01<00:04, 11.71it/s]
 35%|      | 28/79 [00:01<00:03, 14.03it/s]
 39%|      | 31/79 [00:02<00:02, 16.21it/s]
 43%|     | 34/79 [00:02<00:02, 18.34it/s]
 47%|     | 37/79 [00:02<00:02, 19.96it/s]
 51%|     | 40/79 [00:02<00:01, 21.50it/s]
 54%|    | 43/79 [00:02<00:01, 22.53it/s]
 58%|    | 46/79 [00:02<00:01, 23.27it/s]
 62%|   | 49/79 [00:02<00:01, 23.99it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.38it/s]
 32%|      | 25/79 [00:01<00:04, 11.55it/s]
 35%|      | 28/79 [00:01<00:03, 13.85it/s]
 39%|      | 31/79 [00:02<00:02, 16.11it/s]
 43%|     | 34/79 [00:02<00:02, 18.16it/s]
 47%|     | 37/79 [00:02<00:02, 19.93it/s]
 51%|     | 40/79 [00:02<00:01, 21.35it/s]
 54%|    | 43/79 [00:02<00:01, 22.55it/s]
 58%|    | 46/79 [00:02<00:01, 23.41it/s]
 62%|   | 49/79 [00:02<00:01, 24.20it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.36it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.59it/s]
 32%|      | 25/79 [00:01<00:04, 11.83it/s]
 35%|      | 28/79 [00:01<00:03, 14.16it/s]
 39%|      | 31/79 [00:02<00:02, 16.49it/s]
 43%|     | 34/79 [00:02<00:02, 18.48it/s]
 47%|     | 37/79 [00:02<00:02, 20.30it/s]
 51%|     | 40/79 [00:02<00:01, 21.65it/s]
 54%|    | 43/79 [00:02<00:01, 22.69it/s]
 58%|    | 46/79 [00:02<00:01, 23.50it/s]
 62%|   | 49/79 [00:02<00:01, 24.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.56it/s]
 28%|       | 22/79 [00:01<00:05,  9.60it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 13.99it/s]
 39%|      | 31/79 [00:02<00:02, 16.22it/s]
 43%|     | 34/79 [00:02<00:02, 18.18it/s]
 47%|     | 37/79 [00:02<00:02, 19.76it/s]
 51%|     | 40/79 [00:02<00:01, 21.27it/s]
 54%|    | 43/79 [00:02<00:01, 22.47it/s]
 58%|    | 46/79 [00:02<00:01, 23.28it/s]
 62%|   | 49/79 [00:02<00:01, 24.04it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.20it/s]
 28%|       | 22/79 [00:01<00:06,  9.21it/s]
 32%|      | 25/79 [00:01<00:04, 11.40it/s]
 35%|      | 28/79 [00:01<00:03, 13.78it/s]
 39%|      | 31/79 [00:02<00:02, 16.01it/s]
 43%|     | 34/79 [00:02<00:02, 18.05it/s]
 47%|     | 37/79 [00:02<00:02, 19.86it/s]
 51%|     | 40/79 [00:02<00:01, 21.48it/s]
 54%|    | 43/79 [00:02<00:01, 22.87it/s]
 58%|    | 46/79 [00:02<00:01, 23.53it/s]
 62%|   | 49/79 [00:02<00:01, 24.46it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.82it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.59it/s]
 32%|      | 25/79 [00:01<00:04, 11.76it/s]
 35%|      | 28/79 [00:01<00:03, 14.05it/s]
 39%|      | 31/79 [00:02<00:02, 16.20it/s]
 43%|     | 34/79 [00:02<00:02, 18.29it/s]
 47%|     | 37/79 [00:02<00:02, 19.87it/s]
 51%|     | 40/79 [00:02<00:01, 21.54it/s]
 54%|    | 43/79 [00:02<00:01, 22.43it/s]
 58%|    | 46/79 [00:02<00:01, 23.37it/s]
 62%|   | 49/79 [00:02<00:01, 23.83it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  4%|         | 3/79 [00:00<00:44,  1.72it/s]
  8%|         | 6/79 [00:01<00:30,  2.39it/s]
 11%|        | 9/79 [00:01<00:21,  3.27it/s]
 15%|        | 12/79 [00:01<00:15,  4.42it/s]
 19%|        | 15/79 [00:01<00:10,  5.85it/s]
 23%|       | 18/79 [00:01<00:08,  7.55it/s]
 27%|       | 21/79 [00:01<00:06,  9.52it/s]
 30%|       | 24/79 [00:01<00:04, 11.68it/s]
 34%|      | 27/79 [00:01<00:03, 13.90it/s]
 38%|      | 30/79 [00:02<00:03, 16.06it/s]
 42%|     | 33/79 [00:02<00:02, 18.08it/s]
 46%|     | 36/79 [00:02<00:02, 19.37it/s]
 49%|     | 39/79 [00:02<00:01, 20.55it/s]
 53%|    | 42/79 [00:02<00:01, 21.83it/s]
 57%|    | 45/79 [00:02<00:01, 22.67it/s]
 61%|    | 48/79 [00:02<00:01, 23.44it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.28it/s]
 32%|      | 25/79 [00:01<00:04, 11.54it/s]
 35%|      | 28/79 [00:01<00:03, 13.82it/s]
 39%|      | 31/79 [00:02<00:02, 16.00it/s]
 43%|     | 34/79 [00:02<00:02, 17.99it/s]
 47%|     | 37/79 [00:02<00:02, 19.78it/s]
 51%|     | 40/79 [00:02<00:01, 21.28it/s]
 54%|    | 43/79 [00:02<00:01, 22.36it/s]
 58%|    | 46/79 [00:02<00:01, 23.22it/s]
 62%|   | 49/79 [00:02<00:01, 24.12it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.39it/s]
 32%|      | 25/79 [00:01<00:04, 11.64it/s]
 35%|      | 28/79 [00:01<00:03, 13.93it/s]
 39%|      | 31/79 [00:02<00:02, 16.09it/s]
 43%|     | 34/79 [00:02<00:02, 17.96it/s]
 47%|     | 37/79 [00:02<00:02, 19.76it/s]
 51%|     | 40/79 [00:02<00:01, 21.10it/s]
 54%|    | 43/79 [00:02<00:01, 22.05it/s]
 58%|    | 46/79 [00:02<00:01, 22.73it/s]
 62%|   | 49/79 [00:02<00:01, 23.57it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.71it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.40it/s]
 32%|      | 25/79 [00:01<00:04, 11.60it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:02, 16.08it/s]
 43%|     | 34/79 [00:02<00:02, 17.87it/s]
 47%|     | 37/79 [00:02<00:02, 19.60it/s]
 51%|     | 40/79 [00:02<00:01, 21.02it/s]
 54%|    | 43/79 [00:02<00:01, 22.09it/s]
 58%|    | 46/79 [00:02<00:01, 22.96it/s]
 62%|   | 49/79 [00:02<00:01, 23.58it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  4%|         | 3/79 [00:01<00:51,  1.49it/s]
  8%|         | 6/79 [00:01<00:35,  2.07it/s]
 11%|        | 9/79 [00:01<00:24,  2.86it/s]
 15%|        | 12/79 [00:01<00:17,  3.90it/s]
 19%|        | 15/79 [00:01<00:12,  5.24it/s]
 23%|       | 18/79 [00:01<00:08,  6.88it/s]
 27%|       | 21/79 [00:01<00:06,  8.81it/s]
 30%|       | 24/79 [00:01<00:05, 10.97it/s]
 34%|      | 27/79 [00:01<00:03, 13.33it/s]
 38%|      | 30/79 [00:02<00:03, 15.52it/s]
 42%|     | 33/79 [00:02<00:02, 17.71it/s]
 46%|     | 36/79 [00:02<00:02, 19.60it/s]
 49%|     | 39/79 [00:02<00:01, 21.15it/s]
 53%|    | 42/79 [00:02<00:01, 22.31it/s]
 57%|    | 45/79 [00:02<00:01, 23.40it/s]
 61%|    | 48/79 [00:02<00:01, 23.96it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:15,  4.40it/s]
 20%|        | 16/79 [00:01<00:10,  5.84it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.55it/s]
 32%|      | 25/79 [00:01<00:04, 11.74it/s]
 35%|      | 28/79 [00:01<00:03, 13.90it/s]
 39%|      | 31/79 [00:02<00:02, 16.06it/s]
 43%|     | 34/79 [00:02<00:02, 17.94it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 20.76it/s]
 54%|    | 43/79 [00:02<00:01, 21.79it/s]
 58%|    | 46/79 [00:02<00:01, 22.22it/s]
 62%|   | 49/79 [00:02<00:01, 23.14it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.86it/s]
 24%|       | 19/79 [00:01<00:07,  7.61it/s]
 28%|       | 22/79 [00:01<00:05,  9.63it/s]
 32%|      | 25/79 [00:01<00:04, 11.84it/s]
 35%|      | 28/79 [00:01<00:03, 13.92it/s]
 39%|      | 31/79 [00:02<00:03, 15.99it/s]
 43%|     | 34/79 [00:02<00:02, 17.85it/s]
 47%|     | 37/79 [00:02<00:02, 19.67it/s]
 51%|     | 40/79 [00:02<00:01, 21.05it/s]
 54%|    | 43/79 [00:02<00:01, 22.10it/s]
 58%|    | 46/79 [00:02<00:01, 22.58it/s]
 62%|   | 49/79 [00:02<00:01, 23.74it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  7.01it/s]
 28%|       | 22/79 [00:01<00:06,  8.97it/s]
 32%|      | 25/79 [00:01<00:04, 11.18it/s]
 35%|      | 28/79 [00:01<00:03, 13.50it/s]
 39%|      | 31/79 [00:02<00:03, 15.82it/s]
 43%|     | 34/79 [00:02<00:02, 17.86it/s]
 47%|     | 37/79 [00:02<00:02, 19.87it/s]
 51%|     | 40/79 [00:02<00:01, 21.28it/s]
 54%|    | 43/79 [00:02<00:01, 22.48it/s]
 58%|    | 46/79 [00:02<00:01, 23.31it/s]
 62%|   | 49/79 [00:02<00:01, 24.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  4%|         | 3/79 [00:00<00:45,  1.66it/s]
  8%|         | 6/79 [00:01<00:31,  2.31it/s]
 11%|        | 9/79 [00:01<00:22,  3.17it/s]
 15%|        | 12/79 [00:01<00:15,  4.30it/s]
 19%|        | 15/79 [00:01<00:11,  5.73it/s]
 23%|       | 18/79 [00:01<00:08,  7.45it/s]
 27%|       | 21/79 [00:01<00:06,  9.46it/s]
 30%|       | 24/79 [00:01<00:04, 11.54it/s]
 34%|      | 27/79 [00:01<00:03, 13.83it/s]
 38%|      | 30/79 [00:02<00:03, 15.83it/s]
 42%|     | 33/79 [00:02<00:02, 17.77it/s]
 46%|     | 36/79 [00:02<00:02, 19.22it/s]
 49%|     | 39/79 [00:02<00:01, 20.77it/s]
 53%|    | 42/79 [00:02<00:01, 21.51it/s]
 57%|    | 45/79 [00:02<00:01, 22.55it/s]
 61%|    | 48/79 [00:02<00:01, 23.17it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.66it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.69it/s]
 47%|     | 37/79 [00:02<00:02, 19.46it/s]
 51%|     | 40/79 [00:02<00:01, 20.74it/s]
 54%|    | 43/79 [00:02<00:01, 21.72it/s]
 58%|    | 46/79 [00:02<00:01, 22.49it/s]
 62%|   | 49/79 [00:02<00:01, 23.03it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.09it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.57it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.84it/s]
 47%|     | 37/79 [00:02<00:02, 19.70it/s]
 51%|     | 40/79 [00:02<00:01, 20.92it/s]
 54%|    | 43/79 [00:02<00:01, 22.12it/s]
 58%|    | 46/79 [00:02<00:01, 23.11it/s]
 62%|   | 49/79 [00:02<00:01, 23.51it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.04it/s]
 32%|      | 25/79 [00:01<00:04, 11.20it/s]
 35%|      | 28/79 [00:01<00:03, 13.47it/s]
 39%|      | 31/79 [00:02<00:03, 15.86it/s]
 43%|     | 34/79 [00:02<00:02, 17.90it/s]
 47%|     | 37/79 [00:02<00:02, 19.72it/s]
 51%|     | 40/79 [00:02<00:01, 21.15it/s]
 54%|    | 43/79 [00:02<00:01, 22.53it/s]
 58%|    | 46/79 [00:02<00:01, 22.86it/s]
 62%|   | 49/79 [00:02<00:01, 23.54it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.30it/s]
 24%|       | 19/79 [00:01<00:08,  6.96it/s]
 28%|       | 22/79 [00:01<00:06,  8.91it/s]
 32%|      | 25/79 [00:01<00:04, 11.07it/s]
 35%|      | 28/79 [00:02<00:03, 13.32it/s]
 39%|      | 31/79 [00:02<00:03, 15.57it/s]
 43%|     | 34/79 [00:02<00:02, 17.53it/s]
 47%|     | 37/79 [00:02<00:02, 19.33it/s]
 51%|     | 40/79 [00:02<00:01, 20.68it/s]
 54%|    | 43/79 [00:02<00:01, 21.75it/s]
 58%|    | 46/79 [00:02<00:01, 23.00it/s]
 62%|   | 49/79 [00:02<00:01, 23.61it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:00<00:46,  1.63it/s]
  8%|         | 6/79 [00:01<00:32,  2.27it/s]
 11%|        | 9/79 [00:01<00:22,  3.12it/s]
 15%|        | 12/79 [00:01<00:15,  4.22it/s]
 19%|        | 15/79 [00:01<00:11,  5.62it/s]
 23%|       | 18/79 [00:01<00:08,  7.30it/s]
 27%|       | 21/79 [00:01<00:06,  9.27it/s]
 30%|       | 24/79 [00:01<00:04, 11.45it/s]
 34%|      | 27/79 [00:01<00:03, 13.45it/s]
 38%|      | 30/79 [00:02<00:03, 15.73it/s]
 42%|     | 33/79 [00:02<00:02, 17.38it/s]
 46%|     | 36/79 [00:02<00:02, 19.06it/s]
 49%|     | 39/79 [00:02<00:01, 20.27it/s]
 53%|    | 42/79 [00:02<00:01, 21.18it/s]
 57%|    | 45/79 [00:02<00:01, 21.86it/s]
 61%|    | 48/79 [00:02<00:01, 22.33it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  7.01it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.05it/s]
 35%|      | 28/79 [00:01<00:03, 13.28it/s]
 39%|      | 31/79 [00:02<00:03, 15.47it/s]
 43%|     | 34/79 [00:02<00:02, 17.50it/s]
 47%|     | 37/79 [00:02<00:02, 19.31it/s]
 51%|     | 40/79 [00:02<00:01, 20.77it/s]
 54%|    | 43/79 [00:02<00:01, 21.87it/s]
 58%|    | 46/79 [00:02<00:01, 22.89it/s]
 62%|   | 49/79 [00:02<00:01, 23.76it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  4%|         | 3/79 [00:01<00:50,  1.50it/s]
  8%|         | 6/79 [00:01<00:35,  2.08it/s]
 11%|        | 9/79 [00:01<00:24,  2.88it/s]
 15%|        | 12/79 [00:01<00:17,  3.91it/s]
 19%|        | 15/79 [00:01<00:12,  5.23it/s]
 23%|       | 18/79 [00:01<00:08,  6.85it/s]
 27%|       | 21/79 [00:01<00:06,  8.80it/s]
 30%|       | 24/79 [00:01<00:05, 10.78it/s]
 34%|      | 27/79 [00:02<00:04, 13.00it/s]
 38%|      | 30/79 [00:02<00:03, 15.20it/s]
 42%|     | 33/79 [00:02<00:02, 17.22it/s]
 46%|     | 36/79 [00:02<00:02, 18.99it/s]
 49%|     | 39/79 [00:02<00:01, 20.44it/s]
 53%|    | 42/79 [00:02<00:01, 21.42it/s]
 57%|    | 45/79 [00:02<00:01, 22.42it/s]
 61%|    | 48/79 [00:02<00:01, 22.86it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.92it/s]
 28%|       | 22/79 [00:01<00:06,  8.79it/s]
 32%|      | 25/79 [00:01<00:04, 10.94it/s]
 35%|      | 28/79 [00:02<00:03, 13.23it/s]
 39%|      | 31/79 [00:02<00:03, 15.47it/s]
 43%|     | 34/79 [00:02<00:02, 17.46it/s]
 47%|     | 37/79 [00:02<00:02, 19.28it/s]
 51%|     | 40/79 [00:02<00:01, 20.75it/s]
 54%|    | 43/79 [00:02<00:01, 21.79it/s]
 58%|    | 46/79 [00:02<00:01, 22.46it/s]
 62%|   | 49/79 [00:02<00:01, 23.12it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.06it/s]
 28%|       | 22/79 [00:01<00:06,  9.02it/s]
 32%|      | 25/79 [00:01<00:04, 11.20it/s]
 35%|      | 28/79 [00:01<00:03, 13.38it/s]
 39%|      | 31/79 [00:02<00:03, 15.48it/s]
 43%|     | 34/79 [00:02<00:02, 17.44it/s]
 47%|     | 37/79 [00:02<00:02, 19.09it/s]
 51%|     | 40/79 [00:02<00:01, 20.44it/s]
 54%|    | 43/79 [00:02<00:01, 21.42it/s]
 58%|    | 46/79 [00:02<00:01, 22.39it/s]
 62%|   | 49/79 [00:02<00:01, 22.23it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.95it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.90it/s]
 28%|       | 22/79 [00:01<00:06,  8.79it/s]
 32%|      | 25/79 [00:01<00:04, 10.91it/s]
 35%|      | 28/79 [00:02<00:03, 13.16it/s]
 39%|      | 31/79 [00:02<00:03, 15.33it/s]
 43%|     | 34/79 [00:02<00:02, 17.29it/s]
 47%|     | 37/79 [00:02<00:02, 18.99it/s]
 51%|     | 40/79 [00:02<00:01, 20.41it/s]
 54%|    | 43/79 [00:02<00:01, 21.71it/s]
 58%|    | 46/79 [00:02<00:01, 22.55it/s]
 62%|   | 49/79 [00:02<00:01, 23.52it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.71it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.20it/s]
 35%|      | 28/79 [00:01<00:03, 13.23it/s]
 39%|      | 31/79 [00:02<00:03, 15.07it/s]
 43%|     | 34/79 [00:02<00:02, 16.83it/s]
 47%|     | 37/79 [00:02<00:02, 18.53it/s]
 51%|     | 40/79 [00:02<00:01, 20.03it/s]
 54%|    | 43/79 [00:02<00:01, 21.33it/s]
 58%|    | 46/79 [00:02<00:01, 21.98it/s]
 62%|   | 49/79 [00:02<00:01, 22.78it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:18,  1.01s/it]
  5%|         | 4/79 [00:01<00:53,  1.40it/s]
  9%|         | 7/79 [00:01<00:36,  1.95it/s]
 13%|        | 10/79 [00:01<00:25,  2.69it/s]
 16%|        | 13/79 [00:01<00:17,  3.68it/s]
 20%|        | 16/79 [00:01<00:12,  4.95it/s]
 24%|       | 19/79 [00:01<00:09,  6.53it/s]
 28%|       | 22/79 [00:01<00:06,  8.44it/s]
 32%|      | 25/79 [00:01<00:05, 10.56it/s]
 35%|      | 28/79 [00:02<00:03, 12.82it/s]
 39%|      | 31/79 [00:02<00:03, 15.06it/s]
 43%|     | 34/79 [00:02<00:02, 17.26it/s]
 47%|     | 37/79 [00:02<00:02, 18.97it/s]
 51%|     | 40/79 [00:02<00:01, 20.52it/s]
 54%|    | 43/79 [00:02<00:01, 21.98it/s]
 58%|    | 46/79 [00:02<00:01, 22.96it/s]
 62%|   | 49/79 [00:02<00:01, 23.47it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:17,  3.88it/s]
 20%|        | 16/79 [00:01<00:12,  5.20it/s]
 24%|       | 19/79 [00:01<00:08,  6.82it/s]
 28%|       | 22/79 [00:01<00:06,  8.70it/s]
 32%|      | 25/79 [00:01<00:04, 10.80it/s]
 35%|      | 28/79 [00:02<00:03, 13.04it/s]
 39%|      | 31/79 [00:02<00:03, 15.13it/s]
 43%|     | 34/79 [00:02<00:02, 17.03it/s]
 47%|     | 37/79 [00:02<00:02, 18.77it/s]
 51%|     | 40/79 [00:02<00:01, 20.35it/s]
 54%|    | 43/79 [00:02<00:01, 21.49it/s]
 58%|    | 46/79 [00:02<00:01, 22.63it/s]
 62%|   | 49/79 [00:02<00:01, 23.22it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.30it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.79it/s]
 32%|      | 25/79 [00:01<00:04, 10.90it/s]
 35%|      | 28/79 [00:02<00:03, 13.06it/s]
 39%|      | 31/79 [00:02<00:03, 15.27it/s]
 43%|     | 34/79 [00:02<00:02, 17.33it/s]
 47%|     | 37/79 [00:02<00:02, 18.97it/s]
 51%|     | 40/79 [00:02<00:01, 20.45it/s]
 54%|    | 43/79 [00:02<00:01, 21.51it/s]
 58%|    | 46/79 [00:02<00:01, 22.23it/s]
 62%|   | 49/79 [00:02<00:01, 23.11it/s]
 66%|   | 52/79 [00:03<00:01, 24.76it/s]
 70%|   | 55/79 [00:02<00:00, 25.09it/s]
 73%|  | 58/79 [00:02<00:00, 25.55it/s]
 77%|  | 61/79 [00:03<00:00, 25.77it/s]
 81%|  | 64/79 [00:03<00:00, 25.83it/s]
 85%| | 67/79 [00:03<00:00, 25.83it/s]
 89%| | 70/79 [00:03<00:00, 25.63it/s]
 92%|| 73/79 [00:03<00:00, 25.73it/s]
 96%|| 76/79 [00:03<00:00, 26.35it/s]
100%|| 79/79 [00:03<00:00, 27.23it/s]
, 24.55it/s]
 70%|   | 55/79 [00:02<00:00, 25.08it/s]
 73%|  | 58/79 [00:03<00:00, 25.37it/s]
 77%|  | 61/79 [00:03<00:00, 25.76it/s]
 81%|  | 64/79 [00:03<00:00, 25.77it/s]
 85%| | 67/79 [00:03<00:00, 25.85it/s]
 89%| | 70/79 [00:03<00:00, 26.05it/s]
 92%|| 73/79 [00:03<00:00, 26.03it/s]
 96%|| 76/79 [00:03<00:00, 26.60it/s]
100%|| 79/79 [00:03<00:00, 27.30it/s]
, 24.41it/s]
 70%|   | 55/79 [00:02<00:00, 24.96it/s]
 73%|  | 58/79 [00:03<00:00, 25.08it/s]
 77%|  | 61/79 [00:03<00:00, 25.10it/s]
 81%|  | 64/79 [00:03<00:00, 25.26it/s]
 85%| | 67/79 [00:03<00:00, 25.37it/s]
 89%| | 70/79 [00:03<00:00, 25.51it/s]
 92%|| 73/79 [00:03<00:00, 25.56it/s]
 96%|| 76/79 [00:03<00:00, 26.21it/s]
100%|| 79/79 [00:03<00:00, 27.07it/s]
, 24.80it/s]
 70%|   | 55/79 [00:02<00:00, 25.33it/s]
 73%|  | 58/79 [00:03<00:00, 25.78it/s]
 77%|  | 61/79 [00:03<00:00, 26.07it/s]
 81%|  | 64/79 [00:03<00:00, 25.49it/s]
 85%| | 67/79 [00:03<00:00, 25.82it/s]
 89%| | 70/79 [00:03<00:00, 25.99it/s]
 92%|| 73/79 [00:03<00:00, 25.88it/s]
 96%|| 76/79 [00:03<00:00, 26.42it/s]
100%|| 79/79 [00:03<00:00, 27.17it/s]
72it/s]
 68%|   | 54/79 [00:02<00:00, 25.26it/s]
 72%|  | 57/79 [00:03<00:00, 25.15it/s]
 76%|  | 60/79 [00:03<00:00, 25.22it/s]
 80%|  | 63/79 [00:03<00:00, 25.38it/s]
 84%| | 66/79 [00:03<00:00, 25.06it/s]
 87%| | 69/79 [00:03<00:00, 25.12it/s]
 91%| | 72/79 [00:03<00:00, 25.48it/s]
 95%|| 75/79 [00:03<00:00, 25.93it/s]
 99%|| 78/79 [00:03<00:00, 26.53it/s]
100%|| 79/79 [00:03<00:00, 19.96it/s]
, 24.42it/s]
 70%|   | 55/79 [00:02<00:00, 24.85it/s]
 73%|  | 58/79 [00:03<00:00, 24.74it/s]
 77%|  | 61/79 [00:03<00:00, 25.16it/s]
 81%|  | 64/79 [00:03<00:00, 25.38it/s]
 85%| | 67/79 [00:03<00:00, 25.48it/s]
 89%| | 70/79 [00:03<00:00, 25.27it/s]
 92%|| 73/79 [00:03<00:00, 25.86it/s]
 96%|| 76/79 [00:03<00:00, 26.43it/s]
100%|| 79/79 [00:03<00:00, 27.25it/s]
, 24.46it/s]
 70%|   | 55/79 [00:02<00:00, 24.64it/s]
 73%|  | 58/79 [00:03<00:00, 25.08it/s]
 77%|  | 61/79 [00:03<00:00, 25.09it/s]
 81%|  | 64/79 [00:03<00:00, 25.39it/s]
 85%| | 67/79 [00:03<00:00, 25.50it/s]
 89%| | 70/79 [00:03<00:00, 25.61it/s]
 92%|| 73/79 [00:03<00:00, 25.99it/s]
 96%|| 76/79 [00:03<00:00, 26.67it/s]
100%|| 79/79 [00:03<00:00, 27.45it/s]
, 24.62it/s]
 70%|   | 55/79 [00:02<00:00, 25.36it/s]
 73%|  | 58/79 [00:03<00:00, 25.00it/s]
 77%|  | 61/79 [00:03<00:00, 25.07it/s]
 81%|  | 64/79 [00:03<00:00, 25.34it/s]
 85%| | 67/79 [00:03<00:00, 25.23it/s]
 89%| | 70/79 [00:03<00:00, 25.12it/s]
 92%|| 73/79 [00:03<00:00, 25.55it/s]
 96%|| 76/79 [00:03<00:00, 26.03it/s]
100%|| 79/79 [00:03<00:00, 27.00it/s]
, 23.75it/s]
 70%|   | 55/79 [00:03<00:01, 23.95it/s]
 73%|  | 58/79 [00:03<00:00, 24.31it/s]
 77%|  | 61/79 [00:03<00:00, 24.51it/s]
 81%|  | 64/79 [00:03<00:00, 24.60it/s]
 85%| | 67/79 [00:03<00:00, 24.95it/s]
 89%| | 70/79 [00:03<00:00, 25.18it/s]
 92%|| 73/79 [00:03<00:00, 25.58it/s]
 96%|| 76/79 [00:03<00:00, 26.25it/s]
100%|| 79/79 [00:03<00:00, 27.19it/s]
, 24.33it/s]
 70%|   | 55/79 [00:02<00:00, 24.39it/s]
 73%|  | 58/79 [00:03<00:00, 24.78it/s]
 77%|  | 61/79 [00:03<00:00, 25.06it/s]
 81%|  | 64/79 [00:03<00:00, 25.00it/s]
 85%| | 67/79 [00:03<00:00, 25.02it/s]
 89%| | 70/79 [00:03<00:00, 25.03it/s]
 92%|| 73/79 [00:03<00:00, 25.46it/s]
 96%|| 76/79 [00:03<00:00, 26.60it/s]
100%|| 79/79 [00:03<00:00, 26.98it/s]
, 24.01it/s]
 70%|   | 55/79 [00:02<00:00, 24.48it/s]
 73%|  | 58/79 [00:03<00:00, 24.86it/s]
 77%|  | 61/79 [00:03<00:00, 25.01it/s]
 81%|  | 64/79 [00:03<00:00, 25.19it/s]
 85%| | 67/79 [00:03<00:00, 25.23it/s]
 89%| | 70/79 [00:03<00:00, 25.17it/s]
 92%|| 73/79 [00:03<00:00, 25.80it/s]
 96%|| 76/79 [00:03<00:00, 26.39it/s]
100%|| 79/79 [00:03<00:00, 27.34it/s]
, 24.54it/s]
 70%|   | 55/79 [00:03<00:00, 24.98it/s]
 73%|  | 58/79 [00:03<00:00, 25.30it/s]
 77%|  | 61/79 [00:03<00:00, 25.38it/s]
 81%|  | 64/79 [00:03<00:00, 25.42it/s]
 85%| | 67/79 [00:03<00:00, 25.48it/s]
 89%| | 70/79 [00:03<00:00, 25.47it/s]
 92%|| 73/79 [00:03<00:00, 25.90it/s]
 96%|| 76/79 [00:03<00:00, 26.40it/s]
100%|| 79/79 [00:03<00:00, 27.15it/s]
, 24.21it/s]
 70%|   | 55/79 [00:02<00:00, 24.43it/s]
 73%|  | 58/79 [00:03<00:00, 24.54it/s]
 77%|  | 61/79 [00:03<00:00, 24.79it/s]
 81%|  | 64/79 [00:03<00:00, 25.07it/s]
 85%| | 67/79 [00:03<00:00, 25.43it/s]
 89%| | 70/79 [00:03<00:00, 24.92it/s]
 92%|| 73/79 [00:03<00:00, 25.52it/s]
 96%|| 76/79 [00:03<00:00, 26.01it/s]
100%|| 79/79 [00:03<00:00, 27.04it/s]
, 24.50it/s]
 70%|   | 55/79 [00:02<00:00, 24.58it/s]
 73%|  | 58/79 [00:03<00:00, 24.65it/s]
 77%|  | 61/79 [00:03<00:00, 24.70it/s]
 81%|  | 64/79 [00:03<00:00, 24.71it/s]
 85%| | 67/79 [00:03<00:00, 24.63it/s]
 89%| | 70/79 [00:03<00:00, 24.67it/s]
 92%|| 73/79 [00:03<00:00, 24.87it/s]
 96%|| 76/79 [00:03<00:00, 25.73it/s]
100%|| 79/79 [00:03<00:00, 26.58it/s]
, 23.58it/s]
 70%|   | 55/79 [00:03<00:01, 23.66it/s]
 73%|  | 58/79 [00:03<00:00, 23.97it/s]
 77%|  | 61/79 [00:03<00:00, 24.48it/s]
 81%|  | 64/79 [00:03<00:00, 23.95it/s]
 85%| | 67/79 [00:03<00:00, 24.21it/s]
 89%| | 70/79 [00:03<00:00, 24.30it/s]
 92%|| 73/79 [00:03<00:00, 24.71it/s]
 96%|| 76/79 [00:03<00:00, 25.62it/s]
100%|| 79/79 [00:03<00:00, 26.71it/s]
, 24.19it/s]
 70%|   | 55/79 [00:03<00:00, 24.69it/s]
 73%|  | 58/79 [00:03<00:00, 25.06it/s]
 77%|  | 61/79 [00:03<00:00, 25.19it/s]
 81%|  | 64/79 [00:03<00:00, 25.16it/s]
 85%| | 67/79 [00:03<00:00, 25.34it/s]
 89%| | 70/79 [00:03<00:00, 25.72it/s]
 92%|| 73/79 [00:03<00:00, 25.90it/s]
 96%|| 76/79 [00:03<00:00, 26.71it/s]
100%|| 79/79 [00:03<00:00, 27.54it/s]
53it/s]
 68%|   | 54/79 [00:03<00:01, 24.86it/s]
 72%|  | 57/79 [00:03<00:00, 25.22it/s]
 76%|  | 60/79 [00:03<00:00, 25.45it/s]
 80%|  | 63/79 [00:03<00:00, 25.73it/s]
 84%| | 66/79 [00:03<00:00, 25.67it/s]
 87%| | 69/79 [00:03<00:00, 25.71it/s]
 91%| | 72/79 [00:03<00:00, 25.61it/s]
 95%|| 75/79 [00:03<00:00, 26.61it/s]
 99%|| 78/79 [00:03<00:00, 26.70it/s]
100%|| 79/79 [00:04<00:00, 19.51it/s]
76it/s]
 68%|   | 54/79 [00:02<00:01, 24.16it/s]
 72%|  | 57/79 [00:03<00:00, 24.51it/s]
 76%|  | 60/79 [00:03<00:00, 24.33it/s]
 80%|  | 63/79 [00:03<00:00, 24.40it/s]
 84%| | 66/79 [00:03<00:00, 24.43it/s]
 87%| | 69/79 [00:03<00:00, 24.45it/s]
 91%| | 72/79 [00:03<00:00, 24.54it/s]
 95%|| 75/79 [00:03<00:00, 25.16it/s]
 99%|| 78/79 [00:03<00:00, 25.74it/s]
100%|| 79/79 [00:04<00:00, 19.57it/s]
, 23.72it/s]
 70%|   | 55/79 [00:03<00:01, 23.90it/s]
 73%|  | 58/79 [00:03<00:00, 24.21it/s]
 77%|  | 61/79 [00:03<00:00, 24.45it/s]
 81%|  | 64/79 [00:03<00:00, 24.63it/s]
 85%| | 67/79 [00:03<00:00, 25.15it/s]
 89%| | 70/79 [00:03<00:00, 24.77it/s]
 92%|| 73/79 [00:03<00:00, 25.30it/s]
 96%|| 76/79 [00:03<00:00, 26.01it/s]
100%|| 79/79 [00:03<00:00, 27.01it/s]
, 23.90it/s]
 70%|   | 55/79 [00:03<00:00, 24.48it/s]
 73%|  | 58/79 [00:03<00:00, 24.71it/s]
 77%|  | 61/79 [00:03<00:00, 24.69it/s]
 81%|  | 64/79 [00:03<00:00, 24.95it/s]
 85%| | 67/79 [00:03<00:00, 25.11it/s]
 89%| | 70/79 [00:03<00:00, 25.04it/s]
 92%|| 73/79 [00:03<00:00, 25.45it/s]
 96%|| 76/79 [00:03<00:00, 25.90it/s]
100%|| 79/79 [00:03<00:00, 26.66it/s]
68it/s]
 68%|   | 54/79 [00:03<00:01, 24.04it/s]
 72%|  | 57/79 [00:03<00:00, 24.32it/s]
 76%|  | 60/79 [00:03<00:00, 24.67it/s]
 80%|  | 63/79 [00:03<00:00, 25.06it/s]
 84%| | 66/79 [00:03<00:00, 25.04it/s]
 87%| | 69/79 [00:03<00:00, 25.13it/s]
 91%| | 72/79 [00:03<00:00, 25.04it/s]
 95%|| 75/79 [00:03<00:00, 25.67it/s]
 99%|| 78/79 [00:03<00:00, 26.06it/s]
100%|| 79/79 [00:04<00:00, 19.57it/s]
, 24.11it/s]
 70%|   | 55/79 [00:03<00:00, 24.62it/s]
 73%|  | 58/79 [00:03<00:00, 24.83it/s]
 77%|  | 61/79 [00:03<00:00, 24.87it/s]
 81%|  | 64/79 [00:03<00:00, 24.80it/s]
 85%| | 67/79 [00:03<00:00, 25.08it/s]
 89%| | 70/79 [00:03<00:00, 24.82it/s]
 92%|| 73/79 [00:03<00:00, 24.92it/s]
 96%|| 76/79 [00:03<00:00, 25.53it/s]
100%|| 79/79 [00:03<00:00, 26.43it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:01, 23.60it/s]
 73%|  | 58/79 [00:03<00:00, 23.87it/s]
 77%|  | 61/79 [00:03<00:00, 23.95it/s]
 81%|  | 64/79 [00:03<00:00, 24.22it/s]
 85%| | 67/79 [00:03<00:00, 24.29it/s]
 89%| | 70/79 [00:03<00:00, 24.37it/s]
 92%|| 73/79 [00:03<00:00, 24.74it/s]
 96%|| 76/79 [00:03<00:00, 25.38it/s]
100%|| 79/79 [00:03<00:00, 26.25it/s]
, 23.86it/s]
 70%|   | 55/79 [00:03<00:00, 24.04it/s]
 73%|  | 58/79 [00:03<00:00, 24.50it/s]
 77%|  | 61/79 [00:03<00:00, 24.21it/s]
 81%|  | 64/79 [00:03<00:00, 24.63it/s]
 85%| | 67/79 [00:03<00:00, 24.80it/s]
 89%| | 70/79 [00:03<00:00, 24.90it/s]
 92%|| 73/79 [00:03<00:00, 25.17it/s]
 96%|| 76/79 [00:03<00:00, 25.84it/s]
100%|| 79/79 [00:04<00:00, 26.70it/s]
, 24.08it/s]
 70%|   | 55/79 [00:03<00:00, 24.58it/s]
 73%|  | 58/79 [00:03<00:00, 24.76it/s]
 77%|  | 61/79 [00:03<00:00, 24.95it/s]
 81%|  | 64/79 [00:03<00:00, 24.97it/s]
 85%| | 67/79 [00:03<00:00, 25.21it/s]
 89%| | 70/79 [00:03<00:00, 25.38it/s]
 92%|| 73/79 [00:03<00:00, 25.72it/s]
 96%|| 76/79 [00:03<00:00, 26.30it/s]
100%|| 79/79 [00:04<00:00, 19.24it/s]
, 23.42it/s]
 70%|   | 55/79 [00:03<00:01, 23.95it/s]
 73%|  | 58/79 [00:03<00:00, 24.07it/s]
 77%|  | 61/79 [00:03<00:00, 24.56it/s]
 81%|  | 64/79 [00:03<00:00, 24.70it/s]
 85%| | 67/79 [00:03<00:00, 24.97it/s]
 89%| | 70/79 [00:03<00:00, 25.12it/s]
 92%|| 73/79 [00:03<00:00, 25.45it/s]
 96%|| 76/79 [00:03<00:00, 26.12it/s]
100%|| 79/79 [00:04<00:00, 27.04it/s]
, 22.72it/s]
 70%|   | 55/79 [00:03<00:01, 23.21it/s]
 73%|  | 58/79 [00:03<00:00, 23.70it/s]
 77%|  | 61/79 [00:03<00:00, 23.96it/s]
 81%|  | 64/79 [00:03<00:00, 24.24it/s]
 85%| | 67/79 [00:03<00:00, 24.38it/s]
 89%| | 70/79 [00:03<00:00, 24.51it/s]
 92%|| 73/79 [00:03<00:00, 24.82it/s]
 96%|| 76/79 [00:03<00:00, 25.57it/s]
100%|| 79/79 [00:04<00:00, 26.33it/s]
, 23.37it/s]
 70%|   | 55/79 [00:03<00:01, 23.70it/s]
 73%|  | 58/79 [00:03<00:00, 23.95it/s]
 77%|  | 61/79 [00:03<00:00, 24.29it/s]
 81%|  | 64/79 [00:03<00:00, 24.24it/s]
 85%| | 67/79 [00:03<00:00, 24.55it/s]
 89%| | 70/79 [00:03<00:00, 24.39it/s]
 92%|| 73/79 [00:03<00:00, 24.85it/s]
 96%|| 76/79 [00:03<00:00, 25.49it/s]
100%|| 79/79 [00:04<00:00, 26.36it/s]
11it/s]
 68%|   | 54/79 [00:03<00:01, 23.55it/s]
 72%|  | 57/79 [00:03<00:00, 23.96it/s]
 76%|  | 60/79 [00:03<00:00, 24.01it/s]
 80%|  | 63/79 [00:03<00:00, 24.40it/s]
 84%| | 66/79 [00:03<00:00, 24.46it/s]
 87%| | 69/79 [00:03<00:00, 24.60it/s]
 91%| | 72/79 [00:03<00:00, 24.44it/s]
 95%|| 75/79 [00:03<00:00, 25.32it/s]
 99%|| 78/79 [00:04<00:00, 25.68it/s]
100%|| 79/79 [00:04<00:00, 19.22it/s]
15it/s]
 68%|   | 54/79 [00:03<00:01, 23.35it/s]
 72%|  | 57/79 [00:03<00:00, 23.60it/s]
 76%|  | 60/79 [00:03<00:00, 23.89it/s]
 80%|  | 63/79 [00:03<00:00, 24.27it/s]
 84%| | 66/79 [00:03<00:00, 24.41it/s]
 87%| | 69/79 [00:03<00:00, 24.53it/s]
 91%| | 72/79 [00:03<00:00, 24.66it/s]
 95%|| 75/79 [00:03<00:00, 25.39it/s]
 99%|| 78/79 [00:04<00:00, 26.04it/s]
100%|| 79/79 [00:04<00:00, 19.07it/s]
, 23.71it/s]
 70%|   | 55/79 [00:03<00:00, 24.07it/s]
 73%|  | 58/79 [00:03<00:00, 24.21it/s]
 77%|  | 61/79 [00:03<00:00, 24.41it/s]
 81%|  | 64/79 [00:03<00:00, 23.90it/s]
 85%| | 67/79 [00:03<00:00, 24.21it/s]
 89%| | 70/79 [00:03<00:00, 24.22it/s]
 92%|| 73/79 [00:03<00:00, 24.93it/s]
 96%|| 76/79 [00:03<00:00, 25.59it/s]
100%|| 79/79 [00:04<00:00, 26.59it/s]
, 22.87it/s]
 70%|   | 55/79 [00:03<00:01, 23.34it/s]
 73%|  | 58/79 [00:03<00:00, 23.42it/s]
 77%|  | 61/79 [00:03<00:00, 23.67it/s]
 81%|  | 64/79 [00:03<00:00, 23.85it/s]
 85%| | 67/79 [00:03<00:00, 24.09it/s]
 89%| | 70/79 [00:03<00:00, 24.16it/s]
 92%|| 73/79 [00:03<00:00, 24.42it/s]
 96%|| 76/79 [00:03<00:00, 25.17it/s]
100%|| 79/79 [00:04<00:00, 26.01it/s]
2020-06-23 16:22:40,224 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.161244 (0.026631961059570313 s / img per device, on 32 devices)
2020-06-23 16:22:40,246 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:22:40,246 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:22:40,267 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592954572352, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 3, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592954572352, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 3}}
2020-06-23 16:22:52,999 maskrcnn_benchmark.trainer INFO: eta: 1:23:06  iter: 1840  loss: 0.7707 (0.9962)  loss_classifier: 0.2733 (0.3850)  loss_box_reg: 0.1143 (0.1484)  loss_mask: 0.2946 (0.3776)  loss_objectness: 0.0267 (0.0597)  loss_rpn_box_reg: 0.0126 (0.0255)  time: 0.1070 (0.1307)  data: 0.0015 (0.0205)  lr: 0.160000  max mem: 4982
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:22:55,134 maskrcnn_benchmark.trainer INFO: eta: 1:22:54  iter: 1860  loss: 0.8642 (0.9948)  loss_classifier: 0.3182 (0.3843)  loss_box_reg: 0.1684 (0.1484)  loss_mask: 0.3347 (0.3769)  loss_objectness: 0.0373 (0.0596)  loss_rpn_box_reg: 0.0219 (0.0256)  time: 0.1062 (0.1304)  data: 0.0016 (0.0203)  lr: 0.160000  max mem: 4982
2020-06-23 16:22:57,273 maskrcnn_benchmark.trainer INFO: eta: 1:22:41  iter: 1880  loss: 0.8755 (0.9934)  loss_classifier: 0.3291 (0.3837)  loss_box_reg: 0.1563 (0.1485)  loss_mask: 0.3235 (0.3764)  loss_objectness: 0.0290 (0.0593)  loss_rpn_box_reg: 0.0085 (0.0255)  time: 0.1063 (0.1302)  data: 0.0015 (0.0201)  lr: 0.160000  max mem: 4982
2020-06-23 16:22:59,397 maskrcnn_benchmark.trainer INFO: eta: 1:22:29  iter: 1900  loss: 0.8398 (0.9916)  loss_classifier: 0.2791 (0.3828)  loss_box_reg: 0.1425 (0.1484)  loss_mask: 0.3015 (0.3757)  loss_objectness: 0.0290 (0.0592)  loss_rpn_box_reg: 0.0107 (0.0255)  time: 0.1059 (0.1299)  data: 0.0015 (0.0199)  lr: 0.160000  max mem: 4982
2020-06-23 16:23:01,532 maskrcnn_benchmark.trainer INFO: eta: 1:22:17  iter: 1920  loss: 0.8360 (0.9894)  loss_classifier: 0.3035 (0.3818)  loss_box_reg: 0.1474 (0.1483)  loss_mask: 0.2923 (0.3748)  loss_objectness: 0.0329 (0.0590)  loss_rpn_box_reg: 0.0118 (0.0254)  time: 0.1059 (0.1297)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 4982
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=1.02s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:23:03,662 maskrcnn_benchmark.trainer INFO: eta: 1:22:06  iter: 1940  loss: 0.8746 (0.9886)  loss_classifier: 0.2837 (0.3811)  loss_box_reg: 0.1461 (0.1484)  loss_mask: 0.3132 (0.3744)  loss_objectness: 0.0407 (0.0591)  loss_rpn_box_reg: 0.0150 (0.0256)  time: 0.1059 (0.1294)  data: 0.0015 (0.0195)  lr: 0.160000  max mem: 4982
DONE (t=1.97s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21356
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.40301
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.20767
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11503
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.23859
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.27634
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.21834
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.35453
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37400
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19202
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.41150
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49118
2020-06-23 16:23:05,789 maskrcnn_benchmark.trainer INFO: eta: 1:21:54  iter: 1960  loss: 0.8440 (0.9865)  loss_classifier: 0.2595 (0.3802)  loss_box_reg: 0.1299 (0.1482)  loss_mask: 0.2907 (0.3736)  loss_objectness: 0.0280 (0.0590)  loss_rpn_box_reg: 0.0091 (0.0255)  time: 0.1060 (0.1292)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 4982
2020-06-23 16:23:07,929 maskrcnn_benchmark.trainer INFO: eta: 1:21:43  iter: 1980  loss: 0.8079 (0.9842)  loss_classifier: 0.2795 (0.3792)  loss_box_reg: 0.1420 (0.1480)  loss_mask: 0.3142 (0.3729)  loss_objectness: 0.0202 (0.0586)  loss_rpn_box_reg: 0.0091 (0.0254)  time: 0.1071 (0.1290)  data: 0.0015 (0.0191)  lr: 0.160000  max mem: 4982
2020-06-23 16:23:10,086 maskrcnn_benchmark.trainer INFO: eta: 1:21:32  iter: 2000  loss: 0.7815 (0.9825)  loss_classifier: 0.3003 (0.3785)  loss_box_reg: 0.1310 (0.1480)  loss_mask: 0.3036 (0.3722)  loss_objectness: 0.0302 (0.0584)  loss_rpn_box_reg: 0.0117 (0.0254)  time: 0.1071 (0.1288)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 4982
2020-06-23 16:23:12,229 maskrcnn_benchmark.trainer INFO: eta: 1:21:22  iter: 2020  loss: 0.5599 (0.9795)  loss_classifier: 0.1694 (0.3771)  loss_box_reg: 0.0812 (0.1476)  loss_mask: 0.2789 (0.3713)  loss_objectness: 0.0143 (0.0581)  loss_rpn_box_reg: 0.0069 (0.0253)  time: 0.1067 (0.1285)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 4982
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:23:14,364 maskrcnn_benchmark.trainer INFO: eta: 1:21:11  iter: 2040  loss: 0.7309 (0.9775)  loss_classifier: 0.2417 (0.3761)  loss_box_reg: 0.1201 (0.1474)  loss_mask: 0.3143 (0.3707)  loss_objectness: 0.0246 (0.0579)  loss_rpn_box_reg: 0.0103 (0.0253)  time: 0.1067 (0.1283)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 4982
2020-06-23 16:23:16,519 maskrcnn_benchmark.trainer INFO: eta: 1:21:01  iter: 2060  loss: 0.8132 (0.9761)  loss_classifier: 0.3037 (0.3755)  loss_box_reg: 0.1207 (0.1473)  loss_mask: 0.3248 (0.3702)  loss_objectness: 0.0285 (0.0577)  loss_rpn_box_reg: 0.0175 (0.0253)  time: 0.1072 (0.1281)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 4982
DONE (t=3.16s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:23:18,666 maskrcnn_benchmark.trainer INFO: eta: 1:20:51  iter: 2080  loss: 0.6671 (0.9742)  loss_classifier: 0.2486 (0.3745)  loss_box_reg: 0.1109 (0.1471)  loss_mask: 0.3232 (0.3698)  loss_objectness: 0.0226 (0.0576)  loss_rpn_box_reg: 0.0069 (0.0253)  time: 0.1071 (0.1279)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 4982
DONE (t=3.41s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20815
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.37684
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.20963
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.08125
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.22763
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.31026
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.21763
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.34189
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35875
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.16525
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.39758
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49545
2020-06-23 16:23:20,871 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.21355971168211188, segm mAP: 0.20815377771783677
:::MLLOG {"namespace": "", "time_ms": 1592954600871, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.21355971168211188, "SEGM": 0.20815377771783677}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1592954600871, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 2}}
2020-06-23 16:23:20,981 maskrcnn_benchmark.trainer INFO: eta: 1:20:44  iter: 2100  loss: 0.7679 (0.9727)  loss_classifier: 0.3045 (0.3738)  loss_box_reg: 0.1302 (0.1471)  loss_mask: 0.2932 (0.3691)  loss_objectness: 0.0316 (0.0574)  loss_rpn_box_reg: 0.0143 (0.0253)  time: 0.1053 (0.1278)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5079
2020-06-23 16:23:23,115 maskrcnn_benchmark.trainer INFO: eta: 1:20:34  iter: 2120  loss: 0.8077 (0.9711)  loss_classifier: 0.3235 (0.3732)  loss_box_reg: 0.1387 (0.1469)  loss_mask: 0.2985 (0.3684)  loss_objectness: 0.0272 (0.0572)  loss_rpn_box_reg: 0.0136 (0.0253)  time: 0.1059 (0.1276)  data: 0.0015 (0.0181)  lr: 0.160000  max mem: 5079
2020-06-23 16:23:25,245 maskrcnn_benchmark.trainer INFO: eta: 1:20:24  iter: 2140  loss: 0.7395 (0.9691)  loss_classifier: 0.2557 (0.3724)  loss_box_reg: 0.1187 (0.1468)  loss_mask: 0.2921 (0.3677)  loss_objectness: 0.0256 (0.0570)  loss_rpn_box_reg: 0.0106 (0.0252)  time: 0.1061 (0.1274)  data: 0.0015 (0.0179)  lr: 0.160000  max mem: 5079
2020-06-23 16:23:27,380 maskrcnn_benchmark.trainer INFO: eta: 1:20:14  iter: 2160  loss: 0.9253 (0.9683)  loss_classifier: 0.3705 (0.3722)  loss_box_reg: 0.1616 (0.1468)  loss_mask: 0.2964 (0.3671)  loss_objectness: 0.0397 (0.0569)  loss_rpn_box_reg: 0.0220 (0.0253)  time: 0.1064 (0.1272)  data: 0.0015 (0.0177)  lr: 0.160000  max mem: 5079
2020-06-23 16:23:29,532 maskrcnn_benchmark.trainer INFO: eta: 1:20:05  iter: 2180  loss: 0.7100 (0.9661)  loss_classifier: 0.2757 (0.3712)  loss_box_reg: 0.1116 (0.1467)  loss_mask: 0.2828 (0.3665)  loss_objectness: 0.0210 (0.0566)  loss_rpn_box_reg: 0.0103 (0.0252)  time: 0.1076 (0.1271)  data: 0.0015 (0.0176)  lr: 0.160000  max mem: 5079
2020-06-23 16:23:31,676 maskrcnn_benchmark.trainer INFO: eta: 1:19:55  iter: 2200  loss: 0.7105 (0.9643)  loss_classifier: 0.2758 (0.3703)  loss_box_reg: 0.1123 (0.1465)  loss_mask: 0.2911 (0.3658)  loss_objectness: 0.0249 (0.0564)  loss_rpn_box_reg: 0.0170 (0.0252)  time: 0.1066 (0.1269)  data: 0.0015 (0.0175)  lr: 0.160000  max mem: 5079
2020-06-23 16:23:33,809 maskrcnn_benchmark.trainer INFO: eta: 1:19:46  iter: 2220  loss: 0.7704 (0.9626)  loss_classifier: 0.2904 (0.3698)  loss_box_reg: 0.1300 (0.1464)  loss_mask: 0.2804 (0.3651)  loss_objectness: 0.0333 (0.0562)  loss_rpn_box_reg: 0.0112 (0.0251)  time: 0.1064 (0.1267)  data: 0.0015 (0.0173)  lr: 0.160000  max mem: 5079
2020-06-23 16:23:35,966 maskrcnn_benchmark.trainer INFO: eta: 1:19:37  iter: 2240  loss: 0.7110 (0.9612)  loss_classifier: 0.2458 (0.3691)  loss_box_reg: 0.1292 (0.1463)  loss_mask: 0.3023 (0.3646)  loss_objectness: 0.0378 (0.0561)  loss_rpn_box_reg: 0.0121 (0.0251)  time: 0.1077 (0.1265)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5079
2020-06-23 16:23:38,133 maskrcnn_benchmark.trainer INFO: eta: 1:19:28  iter: 2260  loss: 0.7491 (0.9597)  loss_classifier: 0.2831 (0.3686)  loss_box_reg: 0.1075 (0.1462)  loss_mask: 0.2974 (0.3640)  loss_objectness: 0.0232 (0.0559)  loss_rpn_box_reg: 0.0118 (0.0250)  time: 0.1077 (0.1264)  data: 0.0014 (0.0170)  lr: 0.160000  max mem: 5079
2020-06-23 16:23:40,274 maskrcnn_benchmark.trainer INFO: eta: 1:19:19  iter: 2280  loss: 0.6445 (0.9574)  loss_classifier: 0.2289 (0.3675)  loss_box_reg: 0.1079 (0.1459)  loss_mask: 0.2975 (0.3633)  loss_objectness: 0.0248 (0.0556)  loss_rpn_box_reg: 0.0111 (0.0250)  time: 0.1060 (0.1262)  data: 0.0014 (0.0169)  lr: 0.160000  max mem: 5079
2020-06-23 16:23:42,433 maskrcnn_benchmark.trainer INFO: eta: 1:19:11  iter: 2300  loss: 0.7565 (0.9559)  loss_classifier: 0.2645 (0.3670)  loss_box_reg: 0.1229 (0.1458)  loss_mask: 0.2900 (0.3629)  loss_objectness: 0.0230 (0.0554)  loss_rpn_box_reg: 0.0086 (0.0248)  time: 0.1079 (0.1260)  data: 0.0015 (0.0168)  lr: 0.160000  max mem: 5079
2020-06-23 16:23:44,605 maskrcnn_benchmark.trainer INFO: eta: 1:19:03  iter: 2320  loss: 0.8676 (0.9554)  loss_classifier: 0.3027 (0.3666)  loss_box_reg: 0.1404 (0.1458)  loss_mask: 0.3210 (0.3626)  loss_objectness: 0.0298 (0.0555)  loss_rpn_box_reg: 0.0177 (0.0248)  time: 0.1075 (0.1259)  data: 0.0015 (0.0166)  lr: 0.160000  max mem: 5079
2020-06-23 16:23:46,746 maskrcnn_benchmark.trainer INFO: eta: 1:18:54  iter: 2340  loss: 0.7270 (0.9535)  loss_classifier: 0.2688 (0.3658)  loss_box_reg: 0.1171 (0.1456)  loss_mask: 0.2910 (0.3620)  loss_objectness: 0.0264 (0.0553)  loss_rpn_box_reg: 0.0083 (0.0247)  time: 0.1060 (0.1257)  data: 0.0015 (0.0165)  lr: 0.160000  max mem: 5079
2020-06-23 16:23:48,896 maskrcnn_benchmark.trainer INFO: eta: 1:18:46  iter: 2360  loss: 0.7116 (0.9520)  loss_classifier: 0.2665 (0.3651)  loss_box_reg: 0.1249 (0.1455)  loss_mask: 0.2794 (0.3615)  loss_objectness: 0.0205 (0.0552)  loss_rpn_box_reg: 0.0092 (0.0247)  time: 0.1076 (0.1256)  data: 0.0015 (0.0164)  lr: 0.160000  max mem: 5079
2020-06-23 16:23:51,034 maskrcnn_benchmark.trainer INFO: eta: 1:18:37  iter: 2380  loss: 0.7897 (0.9508)  loss_classifier: 0.3081 (0.3646)  loss_box_reg: 0.1519 (0.1455)  loss_mask: 0.3179 (0.3612)  loss_objectness: 0.0262 (0.0550)  loss_rpn_box_reg: 0.0121 (0.0246)  time: 0.1066 (0.1254)  data: 0.0015 (0.0162)  lr: 0.160000  max mem: 5079
2020-06-23 16:23:53,210 maskrcnn_benchmark.trainer INFO: eta: 1:18:30  iter: 2400  loss: 0.6300 (0.9488)  loss_classifier: 0.2100 (0.3637)  loss_box_reg: 0.1092 (0.1452)  loss_mask: 0.2786 (0.3605)  loss_objectness: 0.0161 (0.0547)  loss_rpn_box_reg: 0.0149 (0.0246)  time: 0.1071 (0.1253)  data: 0.0014 (0.0161)  lr: 0.160000  max mem: 5079
2020-06-23 16:23:55,349 maskrcnn_benchmark.trainer INFO: eta: 1:18:21  iter: 2420  loss: 0.8208 (0.9480)  loss_classifier: 0.2992 (0.3633)  loss_box_reg: 0.1424 (0.1452)  loss_mask: 0.3111 (0.3602)  loss_objectness: 0.0292 (0.0546)  loss_rpn_box_reg: 0.0144 (0.0247)  time: 0.1068 (0.1251)  data: 0.0016 (0.0160)  lr: 0.160000  max mem: 5079
2020-06-23 16:23:57,480 maskrcnn_benchmark.trainer INFO: eta: 1:18:13  iter: 2440  loss: 0.7576 (0.9462)  loss_classifier: 0.2676 (0.3626)  loss_box_reg: 0.1321 (0.1450)  loss_mask: 0.2874 (0.3596)  loss_objectness: 0.0258 (0.0544)  loss_rpn_box_reg: 0.0094 (0.0246)  time: 0.1060 (0.1250)  data: 0.0015 (0.0159)  lr: 0.160000  max mem: 5079
2020-06-23 16:23:59,624 maskrcnn_benchmark.trainer INFO: eta: 1:18:05  iter: 2460  loss: 0.7111 (0.9449)  loss_classifier: 0.2534 (0.3619)  loss_box_reg: 0.1232 (0.1449)  loss_mask: 0.2922 (0.3592)  loss_objectness: 0.0261 (0.0543)  loss_rpn_box_reg: 0.0139 (0.0246)  time: 0.1068 (0.1248)  data: 0.0015 (0.0158)  lr: 0.160000  max mem: 5079
2020-06-23 16:24:01,771 maskrcnn_benchmark.trainer INFO: eta: 1:17:58  iter: 2480  loss: 0.6541 (0.9429)  loss_classifier: 0.2475 (0.3610)  loss_box_reg: 0.1013 (0.1447)  loss_mask: 0.2900 (0.3586)  loss_objectness: 0.0166 (0.0540)  loss_rpn_box_reg: 0.0117 (0.0246)  time: 0.1071 (0.1247)  data: 0.0015 (0.0156)  lr: 0.160000  max mem: 5079
2020-06-23 16:24:03,896 maskrcnn_benchmark.trainer INFO: eta: 1:17:50  iter: 2500  loss: 0.6840 (0.9415)  loss_classifier: 0.2593 (0.3605)  loss_box_reg: 0.1101 (0.1445)  loss_mask: 0.2908 (0.3580)  loss_objectness: 0.0255 (0.0539)  loss_rpn_box_reg: 0.0090 (0.0246)  time: 0.1061 (0.1245)  data: 0.0015 (0.0155)  lr: 0.160000  max mem: 5079
2020-06-23 16:24:06,021 maskrcnn_benchmark.trainer INFO: eta: 1:17:42  iter: 2520  loss: 0.7657 (0.9402)  loss_classifier: 0.2648 (0.3599)  loss_box_reg: 0.1186 (0.1444)  loss_mask: 0.2838 (0.3575)  loss_objectness: 0.0287 (0.0538)  loss_rpn_box_reg: 0.0151 (0.0247)  time: 0.1061 (0.1244)  data: 0.0015 (0.0154)  lr: 0.160000  max mem: 5079
2020-06-23 16:24:08,157 maskrcnn_benchmark.trainer INFO: eta: 1:17:34  iter: 2540  loss: 0.7180 (0.9390)  loss_classifier: 0.2637 (0.3593)  loss_box_reg: 0.1056 (0.1443)  loss_mask: 0.3044 (0.3571)  loss_objectness: 0.0271 (0.0536)  loss_rpn_box_reg: 0.0087 (0.0246)  time: 0.1062 (0.1243)  data: 0.0015 (0.0153)  lr: 0.160000  max mem: 5079
2020-06-23 16:24:10,297 maskrcnn_benchmark.trainer INFO: eta: 1:17:26  iter: 2560  loss: 0.7818 (0.9379)  loss_classifier: 0.2441 (0.3586)  loss_box_reg: 0.1126 (0.1442)  loss_mask: 0.3190 (0.3569)  loss_objectness: 0.0341 (0.0536)  loss_rpn_box_reg: 0.0105 (0.0246)  time: 0.1057 (0.1241)  data: 0.0015 (0.0152)  lr: 0.160000  max mem: 5079
2020-06-23 16:24:12,434 maskrcnn_benchmark.trainer INFO: eta: 1:17:19  iter: 2580  loss: 0.7357 (0.9368)  loss_classifier: 0.2741 (0.3581)  loss_box_reg: 0.1101 (0.1441)  loss_mask: 0.3145 (0.3564)  loss_objectness: 0.0173 (0.0535)  loss_rpn_box_reg: 0.0108 (0.0247)  time: 0.1065 (0.1240)  data: 0.0014 (0.0151)  lr: 0.160000  max mem: 5079
2020-06-23 16:24:14,582 maskrcnn_benchmark.trainer INFO: eta: 1:17:12  iter: 2600  loss: 0.7178 (0.9356)  loss_classifier: 0.2562 (0.3577)  loss_box_reg: 0.1085 (0.1440)  loss_mask: 0.3001 (0.3560)  loss_objectness: 0.0297 (0.0534)  loss_rpn_box_reg: 0.0114 (0.0246)  time: 0.1063 (0.1239)  data: 0.0015 (0.0150)  lr: 0.160000  max mem: 5079
2020-06-23 16:24:16,717 maskrcnn_benchmark.trainer INFO: eta: 1:17:04  iter: 2620  loss: 0.7819 (0.9344)  loss_classifier: 0.2639 (0.3572)  loss_box_reg: 0.1406 (0.1439)  loss_mask: 0.2955 (0.3556)  loss_objectness: 0.0264 (0.0532)  loss_rpn_box_reg: 0.0135 (0.0246)  time: 0.1068 (0.1237)  data: 0.0015 (0.0149)  lr: 0.160000  max mem: 5079
2020-06-23 16:24:18,855 maskrcnn_benchmark.trainer INFO: eta: 1:16:57  iter: 2640  loss: 0.7588 (0.9333)  loss_classifier: 0.2826 (0.3566)  loss_box_reg: 0.1141 (0.1437)  loss_mask: 0.2779 (0.3551)  loss_objectness: 0.0359 (0.0533)  loss_rpn_box_reg: 0.0091 (0.0246)  time: 0.1065 (0.1236)  data: 0.0015 (0.0148)  lr: 0.160000  max mem: 5079
2020-06-23 16:24:20,998 maskrcnn_benchmark.trainer INFO: eta: 1:16:50  iter: 2660  loss: 0.8002 (0.9322)  loss_classifier: 0.2683 (0.3561)  loss_box_reg: 0.1227 (0.1436)  loss_mask: 0.3110 (0.3547)  loss_objectness: 0.0203 (0.0532)  loss_rpn_box_reg: 0.0134 (0.0246)  time: 0.1065 (0.1235)  data: 0.0015 (0.0147)  lr: 0.160000  max mem: 5079
2020-06-23 16:24:23,137 maskrcnn_benchmark.trainer INFO: eta: 1:16:43  iter: 2680  loss: 0.6999 (0.9306)  loss_classifier: 0.2537 (0.3554)  loss_box_reg: 0.1085 (0.1434)  loss_mask: 0.2817 (0.3542)  loss_objectness: 0.0256 (0.0530)  loss_rpn_box_reg: 0.0120 (0.0246)  time: 0.1065 (0.1233)  data: 0.0014 (0.0146)  lr: 0.160000  max mem: 5079
2020-06-23 16:24:25,276 maskrcnn_benchmark.trainer INFO: eta: 1:16:36  iter: 2700  loss: 0.7145 (0.9294)  loss_classifier: 0.2951 (0.3548)  loss_box_reg: 0.1282 (0.1433)  loss_mask: 0.3014 (0.3539)  loss_objectness: 0.0212 (0.0529)  loss_rpn_box_reg: 0.0119 (0.0245)  time: 0.1073 (0.1232)  data: 0.0014 (0.0145)  lr: 0.160000  max mem: 5079
2020-06-23 16:24:27,405 maskrcnn_benchmark.trainer INFO: eta: 1:16:29  iter: 2720  loss: 0.7792 (0.9282)  loss_classifier: 0.3013 (0.3543)  loss_box_reg: 0.1357 (0.1432)  loss_mask: 0.3063 (0.3536)  loss_objectness: 0.0272 (0.0527)  loss_rpn_box_reg: 0.0086 (0.0244)  time: 0.1061 (0.1231)  data: 0.0015 (0.0144)  lr: 0.160000  max mem: 5079
2020-06-23 16:24:29,547 maskrcnn_benchmark.trainer INFO: eta: 1:16:22  iter: 2740  loss: 0.7585 (0.9270)  loss_classifier: 0.2748 (0.3536)  loss_box_reg: 0.1400 (0.1431)  loss_mask: 0.2954 (0.3531)  loss_objectness: 0.0254 (0.0526)  loss_rpn_box_reg: 0.0099 (0.0245)  time: 0.1060 (0.1230)  data: 0.0015 (0.0143)  lr: 0.160000  max mem: 5079
:::MLLOG {"namespace": "", "time_ms": 1592954671823, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1592954671824, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1592954671824, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 3}}
2020-06-23 16:24:32,030 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.28s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.30s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.30s)
creating index...
2020-06-23 16:24:32,351 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
Done (t=0.30s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:31,  3.48s/it]
  4%|         | 3/79 [00:03<03:06,  2.46s/it]
  8%|         | 6/79 [00:03<02:06,  1.73s/it]
 11%|        | 9/79 [00:03<01:25,  1.22s/it]
 15%|        | 12/79 [00:03<00:58,  1.15it/s]
 19%|        | 15/79 [00:04<00:39,  1.61it/s]
 23%|       | 18/79 [00:04<00:27,  2.24it/s]
 27%|       | 21/79 [00:04<00:18,  3.09it/s]
 30%|       | 24/79 [00:04<00:13,  4.19it/s]
 34%|      | 27/79 [00:04<00:09,  5.60it/s]
 38%|      | 30/79 [00:04<00:06,  7.31it/s]
 42%|     | 33/79 [00:04<00:04,  9.31it/s]
 46%|     | 36/79 [00:04<00:03, 11.51it/s]
 49%|     | 39/79 [00:05<00:02, 13.68it/s]
 53%|    | 42/79 [00:05<00:02, 15.94it/s]
 57%|    | 45/79 [00:05<00:01, 17.98it/s]
 61%|    | 48/79 [00:05<00:01, 19.79it/s]
 65%|   | 51/79 [00:05<00:01, 21.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:31,  3.48s/it]
  3%|         | 2/79 [00:03<03:10,  2.47s/it]
  6%|         | 5/79 [00:03<02:09,  1.74s/it]
 10%|         | 8/79 [00:03<01:27,  1.23s/it]
 14%|        | 11/79 [00:03<00:59,  1.14it/s]
 18%|        | 14/79 [00:04<00:40,  1.60it/s]
 22%|       | 17/79 [00:04<00:27,  2.23it/s]
 25%|       | 20/79 [00:04<00:19,  3.07it/s]
 29%|       | 23/79 [00:04<00:13,  4.17it/s]
 33%|      | 26/79 [00:04<00:09,  5.55it/s]
 37%|      | 29/79 [00:04<00:06,  7.25it/s]
 41%|      | 32/79 [00:04<00:05,  9.20it/s]
 44%|     | 35/79 [00:04<00:03, 11.37it/s]
 48%|     | 38/79 [00:05<00:03, 13.65it/s]
 52%|    | 41/79 [00:05<00:02, 15.72it/s]
 56%|    | 44/79 [00:05<00:01, 17.80it/s]
 59%|    | 47/79 [00:05<00:01, 19.49it/s]
 63%|   | 50/79 [00:05<00:01, 20.95it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:33,  3.51s/it]
  3%|         | 2/79 [00:03<03:12,  2.50s/it]
  6%|         | 5/79 [00:03<02:10,  1.76s/it]
 10%|         | 8/79 [00:03<01:28,  1.25s/it]
 14%|        | 11/79 [00:04<01:00,  1.13it/s]
 18%|        | 14/79 [00:04<00:40,  1.59it/s]
 22%|       | 17/79 [00:04<00:28,  2.20it/s]
 25%|       | 20/79 [00:04<00:19,  3.04it/s]
 29%|       | 23/79 [00:04<00:13,  4.13it/s]
 33%|      | 26/79 [00:04<00:09,  5.53it/s]
 37%|      | 29/79 [00:04<00:06,  7.22it/s]
 41%|      | 32/79 [00:04<00:05,  9.22it/s]
 44%|     | 35/79 [00:04<00:03, 11.45it/s]
 48%|     | 38/79 [00:05<00:02, 13.68it/s]
 52%|    | 41/79 [00:05<00:02, 15.88it/s]
 56%|    | 44/79 [00:05<00:01, 17.85it/s]
 59%|    | 47/79 [00:05<00:01, 19.56it/s]
 63%|   | 50/79 [00:05<00:01, 21.02it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:35,  3.53s/it]
  5%|         | 4/79 [00:03<03:06,  2.49s/it]
  9%|         | 7/79 [00:03<02:06,  1.75s/it]
 13%|        | 10/79 [00:03<01:25,  1.24s/it]
 16%|        | 13/79 [00:04<00:57,  1.14it/s]
 20%|        | 16/79 [00:04<00:39,  1.59it/s]
 24%|       | 19/79 [00:04<00:27,  2.22it/s]
 28%|       | 22/79 [00:04<00:18,  3.06it/s]
 32%|      | 25/79 [00:04<00:12,  4.15it/s]
 35%|      | 28/79 [00:04<00:09,  5.55it/s]
 39%|      | 31/79 [00:04<00:06,  7.27it/s]
 43%|     | 34/79 [00:04<00:04,  9.23it/s]
 47%|     | 37/79 [00:04<00:03, 11.46it/s]
 51%|     | 40/79 [00:05<00:02, 13.74it/s]
 54%|    | 43/79 [00:05<00:02, 16.06it/s]
 58%|    | 46/79 [00:05<00:01, 18.00it/s]
 62%|   | 49/79 [00:05<00:01, 19.87it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:25,  3.41s/it]
  3%|         | 2/79 [00:03<03:07,  2.43s/it]
  4%|         | 3/79 [00:03<02:12,  1.75s/it]
  8%|         | 6/79 [00:03<01:30,  1.23s/it]
 11%|        | 9/79 [00:03<01:01,  1.14it/s]
 15%|        | 12/79 [00:04<00:41,  1.60it/s]
 19%|        | 15/79 [00:04<00:28,  2.23it/s]
 23%|       | 18/79 [00:04<00:19,  3.07it/s]
 27%|       | 21/79 [00:04<00:13,  4.18it/s]
 30%|       | 24/79 [00:04<00:09,  5.57it/s]
 34%|      | 27/79 [00:04<00:07,  7.31it/s]
 38%|      | 30/79 [00:04<00:05,  9.33it/s]
 42%|     | 33/79 [00:04<00:04, 11.49it/s]
 46%|     | 36/79 [00:04<00:03, 13.80it/s]
 49%|     | 39/79 [00:05<00:02, 16.00it/s]
 53%|    | 42/79 [00:05<00:02, 18.09it/s]
 57%|    | 45/79 [00:05<00:01, 19.99it/s]
 61%|    | 48/79 [00:05<00:01, 21.54it/s]
 65%|
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:32,  3.50s/it]
  3%|         | 2/79 [00:03<03:11,  2.48s/it]
  6%|         | 5/79 [00:03<02:09,  1.75s/it]
 10%|         | 8/79 [00:03<01:27,  1.24s/it]
 14%|        | 11/79 [00:03<00:59,  1.14it/s]
 18%|        | 14/79 [00:04<00:40,  1.60it/s]
 22%|       | 17/79 [00:04<00:27,  2.22it/s]
 25%|       | 20/79 [00:04<00:19,  3.05it/s]
 29%|       | 23/79 [00:04<00:13,  4.14it/s]
 33%|      | 26/79 [00:04<00:09,  5.53it/s]
 37%|      | 29/79 [00:04<00:06,  7.21it/s]
 41%|      | 32/79 [00:04<00:05,  9.18it/s]
 44%|     | 35/79 [00:04<00:03, 11.29it/s]
 48%|     | 38/79 [00:05<00:03, 13.57it/s]
 52%|    | 41/79 [00:05<00:02, 15.61it/s]
 56%|    | 44/79 [00:05<00:01, 17.58it/s]
 59%|    | 47/79 [00:05<00:01, 19.10it/s]
 63%|   | 50/79 [00:05<00:01, 20.52it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:39,  3.59s/it]
  5%|         | 4/79 [00:03<03:09,  2.52s/it]
  9%|         | 7/79 [00:03<02:07,  1.78s/it]
 13%|        | 10/79 [00:03<01:26,  1.26s/it]
 16%|        | 13/79 [00:04<00:58,  1.12it/s]
 20%|        | 16/79 [00:04<00:40,  1.57it/s]
 24%|       | 19/79 [00:04<00:27,  2.19it/s]
 28%|       | 22/79 [00:04<00:18,  3.02it/s]
 32%|      | 25/79 [00:04<00:13,  4.11it/s]
 35%|      | 28/79 [00:04<00:09,  5.51it/s]
 39%|      | 31/79 [00:04<00:06,  7.24it/s]
 43%|     | 34/79 [00:04<00:04,  9.24it/s]
 47%|     | 37/79 [00:04<00:03, 11.49it/s]
 51%|     | 40/79 [00:05<00:02, 13.76it/s]
 54%|    | 43/79 [00:05<00:02, 16.11it/s]
 58%|    | 46/79 [00:05<00:01, 17.84it/s]
 62%|   | 49/79 [00:05<00:01, 19.57it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:39,  3.58s/it]
  5%|         | 4/79 [00:03<03:08,  2.52s/it]
  9%|         | 7/79 [00:03<02:07,  1.77s/it]
 13%|        | 10/79 [00:03<01:26,  1.25s/it]
 16%|        | 13/79 [00:04<00:58,  1.12it/s]
 20%|        | 16/79 [00:04<00:39,  1.58it/s]
 24%|       | 19/79 [00:04<00:27,  2.19it/s]
 28%|       | 22/79 [00:04<00:18,  3.03it/s]
 32%|      | 25/79 [00:04<00:13,  4.12it/s]
 35%|      | 28/79 [00:04<00:09,  5.50it/s]
 39%|      | 31/79 [00:04<00:06,  7.22it/s]
 43%|     | 34/79 [00:04<00:04,  9.21it/s]
 47%|     | 37/79 [00:04<00:03, 11.44it/s]
 51%|     | 40/79 [00:05<00:02, 13.71it/s]
 54%|    | 43/79 [00:05<00:02, 15.92it/s]
 58%|    | 46/79 [00:05<00:01, 18.07it/s]
 62%|   | 49/79 [00:05<00:01, 19.67it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:42,  3.63s/it]
  4%|         | 3/79 [00:03<03:14,  2.55s/it]
  8%|         | 6/79 [00:03<02:11,  1.80s/it]
 11%|        | 9/79 [00:03<01:28,  1.27s/it]
 15%|        | 12/79 [00:04<01:00,  1.11it/s]
 19%|        | 15/79 [00:04<00:41,  1.56it/s]
 23%|       | 18/79 [00:04<00:28,  2.17it/s]
 27%|       | 21/79 [00:04<00:19,  2.99it/s]
 30%|       | 24/79 [00:04<00:13,  4.06it/s]
 34%|      | 27/79 [00:04<00:09,  5.44it/s]
 38%|      | 30/79 [00:04<00:06,  7.13it/s]
 42%|     | 33/79 [00:04<00:05,  9.13it/s]
 46%|     | 36/79 [00:05<00:03, 11.33it/s]
 49%|     | 39/79 [00:05<00:02, 13.66it/s]
 53%|    | 42/79 [00:05<00:02, 15.81it/s]
 57%|    | 45/79 [00:05<00:01, 17.97it/s]
 61%|    | 48/79 [00:05<00:01, 19.71it/s]
 65%|   | 51/79 [00:05<00:01, 21.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:39,  3.58s/it]
  5%|         | 4/79 [00:03<03:09,  2.52s/it]
  9%|         | 7/79 [00:03<02:08,  1.78s/it]
 13%|        | 10/79 [00:03<01:26,  1.26s/it]
 16%|        | 13/79 [00:04<00:58,  1.12it/s]
 20%|        | 16/79 [00:04<00:40,  1.57it/s]
 24%|       | 19/79 [00:04<00:27,  2.19it/s]
 28%|       | 22/79 [00:04<00:18,  3.02it/s]
 32%|      | 25/79 [00:04<00:13,  4.11it/s]
 35%|      | 28/79 [00:04<00:09,  5.49it/s]
 39%|      | 31/79 [00:04<00:06,  7.17it/s]
 43%|     | 34/79 [00:04<00:04,  9.09it/s]
 47%|     | 37/79 [00:05<00:03, 11.25it/s]
 51%|     | 40/79 [00:05<00:02, 13.51it/s]
 54%|    | 43/79 [00:05<00:02, 15.63it/s]
 58%|    | 46/79 [00:05<00:01, 17.79it/s]
 62%|   | 49/79 [00:05<00:01, 19.70it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:36,  3.55s/it]
  4%|         | 3/79 [00:03<03:10,  2.50s/it]
  8%|         | 6/79 [00:03<02:08,  1.76s/it]
 11%|        | 9/79 [00:03<01:27,  1.25s/it]
 15%|        | 12/79 [00:04<00:59,  1.13it/s]
 19%|        | 15/79 [00:04<00:40,  1.58it/s]
 23%|       | 18/79 [00:04<00:27,  2.20it/s]
 27%|       | 21/79 [00:04<00:19,  3.03it/s]
 30%|       | 24/79 [00:04<00:13,  4.12it/s]
 34%|      | 27/79 [00:04<00:09,  5.49it/s]
 38%|      | 30/79 [00:04<00:06,  7.18it/s]
 42%|     | 33/79 [00:04<00:05,  9.12it/s]
 46%|     | 36/79 [00:04<00:03, 11.26it/s]
 49%|     | 39/79 [00:05<00:02, 13.43it/s]
 53%|    | 42/79 [00:05<00:02, 15.65it/s]
 57%|    | 45/79 [00:05<00:01, 17.45it/s]
 61%|    | 48/79 [00:05<00:01, 18.98it/s]
 65%|   | 51/79 [00:05<00:01, 20.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:41,  3.61s/it]
  5%|         | 4/79 [00:03<03:10,  2.54s/it]
  9%|         | 7/79 [00:03<02:08,  1.79s/it]
 13%|        | 10/79 [00:03<01:27,  1.26s/it]
 16%|        | 13/79 [00:04<00:59,  1.12it/s]
 20%|        | 16/79 [00:04<00:40,  1.56it/s]
 24%|       | 19/79 [00:04<00:27,  2.18it/s]
 28%|       | 22/79 [00:04<00:19,  2.99it/s]
 32%|      | 25/79 [00:04<00:13,  4.07it/s]
 35%|      | 28/79 [00:04<00:09,  5.45it/s]
 39%|      | 31/79 [00:04<00:06,  7.12it/s]
 43%|     | 34/79 [00:04<00:04,  9.05it/s]
 47%|     | 37/79 [00:05<00:03, 11.18it/s]
 51%|     | 40/79 [00:05<00:02, 13.47it/s]
 54%|    | 43/79 [00:05<00:02, 15.65it/s]
 58%|    | 46/79 [00:05<00:01, 17.66it/s]
 62%|   | 49/79 [00:05<00:01, 19.42it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:40,  3.59s/it]
  4%|         | 3/79 [00:03<03:12,  2.53s/it]
  8%|         | 6/79 [00:03<02:10,  1.78s/it]
 11%|        | 9/79 [00:03<01:28,  1.26s/it]
 15%|        | 12/79 [00:04<00:59,  1.12it/s]
 19%|        | 15/79 [00:04<00:40,  1.57it/s]
 23%|       | 18/79 [00:04<00:28,  2.18it/s]
 27%|       | 21/79 [00:04<00:19,  3.00it/s]
 30%|       | 24/79 [00:04<00:13,  4.08it/s]
 34%|      | 27/79 [00:04<00:09,  5.45it/s]
 38%|      | 30/79 [00:04<00:06,  7.10it/s]
 42%|     | 33/79 [00:04<00:05,  9.01it/s]
 46%|     | 36/79 [00:05<00:03, 11.12it/s]
 49%|     | 39/79 [00:05<00:02, 13.33it/s]
 53%|    | 42/79 [00:05<00:02, 15.39it/s]
 57%|    | 45/79 [00:05<00:01, 17.38it/s]
 61%|    | 48/79 [00:05<00:01, 18.85it/s]
 65%|   | 51/79 [00:05<00:01, 20.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:40,  3.60s/it]
  5%|         | 4/79 [00:03<03:09,  2.53s/it]
  9%|         | 7/79 [00:03<02:08,  1.78s/it]
 13%|        | 10/79 [00:03<01:26,  1.26s/it]
 16%|        | 13/79 [00:04<00:59,  1.12it/s]
 20%|        | 16/79 [00:04<00:40,  1.57it/s]
 24%|       | 19/79 [00:04<00:27,  2.18it/s]
 28%|       | 22/79 [00:04<00:19,  3.00it/s]
 32%|      | 25/79 [00:04<00:13,  4.07it/s]
 35%|      | 28/79 [00:04<00:09,  5.44it/s]
 39%|      | 31/79 [00:04<00:06,  7.11it/s]
 43%|     | 34/79 [00:04<00:04,  9.04it/s]
 47%|     | 37/79 [00:05<00:03, 11.19it/s]
 51%|     | 40/79 [00:05<00:02, 13.40it/s]
 54%|    | 43/79 [00:05<00:02, 15.56it/s]
 58%|    | 46/79 [00:05<00:01, 17.45it/s]
 62%|   | 49/79 [00:05<00:01, 18.96it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:41,  3.61s/it]
  5%|         | 4/79 [00:03<03:10,  2.54s/it]
  9%|         | 7/79 [00:03<02:09,  1.79s/it]
 13%|        | 10/79 [00:03<01:27,  1.27s/it]
 16%|        | 13/79 [00:04<00:59,  1.11it/s]
 20%|        | 16/79 [00:04<00:40,  1.56it/s]
 24%|       | 19/79 [00:04<00:27,  2.17it/s]
 28%|       | 22/79 [00:04<00:19,  2.99it/s]
 32%|      | 25/79 [00:04<00:13,  4.07it/s]
 35%|      | 28/79 [00:04<00:09,  5.43it/s]
 39%|      | 31/79 [00:04<00:06,  7.09it/s]
 43%|     | 34/79 [00:04<00:04,  9.04it/s]
 47%|     | 37/79 [00:05<00:03, 11.13it/s]
 51%|     | 40/79 [00:05<00:02, 13.33it/s]
 54%|    | 43/79 [00:05<00:02, 15.45it/s]
 58%|    | 46/79 [00:05<00:01, 17.44it/s]
 62%|   | 49/79 [00:05<00:01, 19.07it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:43,  3.64s/it]
  5%|         | 4/79 [00:03<03:11,  2.56s/it]
  9%|         | 7/79 [00:03<02:09,  1.80s/it]
 13%|        | 10/79 [00:03<01:27,  1.27s/it]
 16%|        | 13/79 [00:04<00:59,  1.11it/s]
 20%|        | 16/79 [00:04<00:40,  1.55it/s]
 24%|       | 19/79 [00:04<00:27,  2.16it/s]
 28%|       | 22/79 [00:04<00:19,  2.98it/s]
 32%|      | 25/79 [00:04<00:13,  4.05it/s]
 35%|      | 28/79 [00:04<00:09,  5.42it/s]
 39%|      | 31/79 [00:04<00:06,  7.09it/s]
 43%|     | 34/79 [00:04<00:05,  9.00it/s]
 47%|     | 37/79 [00:05<00:03, 11.16it/s]
 51%|     | 40/79 [00:05<00:02, 13.38it/s]
 54%|    | 43/79 [00:05<00:02, 15.48it/s]
 58%|    | 46/79 [00:05<00:01, 17.39it/s]
 62%|   | 49/79 [00:05<00:01, 19.13it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:44,  3.65s/it]
  5%|         | 4/79 [00:03<03:12,  2.57s/it]
  9%|         | 7/79 [00:03<02:10,  1.81s/it]
 13%|        | 10/79 [00:04<01:28,  1.28s/it]
 16%|        | 13/79 [00:04<00:59,  1.10it/s]
 20%|        | 16/79 [00:04<00:40,  1.55it/s]
 24%|       | 19/79 [00:04<00:27,  2.15it/s]
 28%|       | 22/79 [00:04<00:19,  2.97it/s]
 32%|      | 25/79 [00:04<00:13,  4.04it/s]
 35%|      | 28/79 [00:04<00:09,  5.40it/s]
 39%|      | 31/79 [00:04<00:06,  7.04it/s]
 43%|     | 34/79 [00:04<00:05,  8.99it/s]
 47%|     | 37/79 [00:05<00:03, 11.15it/s]
 51%|     | 40/79 [00:05<00:02, 13.34it/s]
 54%|    | 43/79 [00:05<00:02, 15.54it/s]
 58%|    | 46/79 [00:05<00:01, 17.46it/s]
 62%|   | 49/79 [00:05<00:01, 19.21it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:42,  3.62s/it]
  5%|         | 4/79 [00:03<03:11,  2.55s/it]
  9%|         | 7/79 [00:03<02:09,  1.80s/it]
 13%|        | 10/79 [00:03<01:27,  1.27s/it]
 16%|        | 13/79 [00:04<00:59,  1.11it/s]
 20%|        | 16/79 [00:04<00:40,  1.56it/s]
 24%|       | 19/79 [00:04<00:27,  2.17it/s]
 28%|       | 22/79 [00:04<00:19,  2.98it/s]
 32%|      | 25/79 [00:04<00:13,  4.05it/s]
 35%|      | 28/79 [00:04<00:09,  5.41it/s]
 39%|      | 31/79 [00:04<00:06,  7.07it/s]
 43%|     | 34/79 [00:04<00:04,  9.00it/s]
 47%|     | 37/79 [00:05<00:03, 11.16it/s]
 51%|     | 40/79 [00:05<00:02, 13.36it/s]
 54%|    | 43/79 [00:05<00:02, 15.52it/s]
 58%|    | 46/79 [00:05<00:01, 17.53it/s]
 62%|   | 49/79 [00:05<00:01, 19.24it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:42,  3.62s/it]
  4%|         | 3/79 [00:03<03:14,  2.55s/it]
  8%|         | 6/79 [00:03<02:11,  1.80s/it]
 11%|        | 9/79 [00:03<01:29,  1.27s/it]
 15%|        | 12/79 [00:04<01:00,  1.11it/s]
 19%|        | 15/79 [00:04<00:41,  1.55it/s]
 23%|       | 18/79 [00:04<00:28,  2.16it/s]
 27%|       | 21/79 [00:04<00:19,  2.98it/s]
 30%|       | 24/79 [00:04<00:13,  4.04it/s]
 34%|      | 27/79 [00:04<00:09,  5.39it/s]
 38%|      | 30/79 [00:04<00:06,  7.04it/s]
 42%|     | 33/79 [00:04<00:05,  8.97it/s]
 46%|     | 36/79 [00:05<00:03, 11.06it/s]
 49%|     | 39/79 [00:05<00:03, 13.23it/s]
 53%|    | 42/79 [00:05<00:02, 15.35it/s]
 57%|    | 45/79 [00:05<00:01, 17.39it/s]
 61%|    | 48/79 [00:05<00:01, 19.08it/s]
 65%|   | 51/79 [00:05<00:01, 20.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:40,  3.60s/it]
  5%|         | 4/79 [00:03<03:10,  2.53s/it]
  9%|         | 7/79 [00:03<02:08,  1.79s/it]
 13%|        | 10/79 [00:03<01:27,  1.26s/it]
 16%|        | 13/79 [00:04<00:59,  1.12it/s]
 20%|        | 16/79 [00:04<00:40,  1.57it/s]
 24%|       | 19/79 [00:04<00:27,  2.18it/s]
 28%|       | 22/79 [00:04<00:18,  3.00it/s]
 32%|      | 25/79 [00:04<00:13,  4.07it/s]
 35%|      | 28/79 [00:04<00:09,  5.44it/s]
 39%|      | 31/79 [00:04<00:06,  7.10it/s]
 43%|     | 34/79 [00:04<00:04,  9.02it/s]
 47%|     | 37/79 [00:05<00:03, 11.15it/s]
 51%|     | 40/79 [00:05<00:02, 13.27it/s]
 54%|    | 43/79 [00:05<00:02, 15.41it/s]
 58%|    | 46/79 [00:05<00:01, 17.17it/s]
 62%|   | 49/79 [00:05<00:01, 18.94it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:43,  3.63s/it]
  5%|         | 4/79 [00:03<03:11,  2.56s/it]
  9%|         | 7/79 [00:03<02:09,  1.80s/it]
 13%|        | 10/79 [00:04<01:27,  1.27s/it]
 16%|        | 13/79 [00:04<00:59,  1.11it/s]
 20%|        | 16/79 [00:04<00:40,  1.55it/s]
 24%|       | 19/79 [00:04<00:27,  2.16it/s]
 28%|       | 22/79 [00:04<00:19,  2.97it/s]
 32%|      | 25/79 [00:04<00:13,  4.04it/s]
 35%|      | 28/79 [00:04<00:09,  5.40it/s]
 39%|      | 31/79 [00:04<00:06,  7.07it/s]
 43%|     | 34/79 [00:04<00:05,  8.98it/s]
 47%|     | 37/79 [00:05<00:03, 11.12it/s]
 51%|     | 40/79 [00:05<00:02, 13.23it/s]
 54%|    | 43/79 [00:05<00:02, 15.50it/s]
 58%|    | 46/79 [00:05<00:01, 17.34it/s]
 62%|   | 49/79 [00:05<00:01, 19.24it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:43,  3.63s/it]
  5%|         | 4/79 [00:03<03:11,  2.56s/it]
  9%|         | 7/79 [00:03<02:09,  1.80s/it]
 13%|        | 10/79 [00:04<01:27,  1.27s/it]
 16%|        | 13/79 [00:04<00:59,  1.11it/s]
 20%|        | 16/79 [00:04<00:40,  1.55it/s]
 24%|       | 19/79 [00:04<00:27,  2.16it/s]
 28%|       | 22/79 [00:04<00:19,  2.97it/s]
 32%|      | 25/79 [00:04<00:13,  4.05it/s]
 35%|      | 28/79 [00:04<00:09,  5.40it/s]
 39%|      | 31/79 [00:04<00:06,  7.06it/s]
 43%|     | 34/79 [00:04<00:04,  9.01it/s]
 47%|     | 37/79 [00:05<00:03, 11.12it/s]
 51%|     | 40/79 [00:05<00:02, 13.40it/s]
 54%|    | 43/79 [00:05<00:02, 15.55it/s]
 58%|    | 46/79 [00:05<00:01, 17.47it/s]
 62%|   | 49/79 [00:05<00:01, 19.38it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:38,  3.57s/it]
  5%|         | 4/79 [00:03<03:08,  2.52s/it]
  9%|         | 7/79 [00:03<02:07,  1.77s/it]
 13%|        | 10/79 [00:03<01:26,  1.25s/it]
 16%|        | 13/79 [00:04<00:58,  1.12it/s]
 20%|        | 16/79 [00:04<00:40,  1.57it/s]
 24%|       | 19/79 [00:04<00:27,  2.19it/s]
 28%|       | 22/79 [00:04<00:18,  3.01it/s]
 32%|      | 25/79 [00:04<00:13,  4.07it/s]
 35%|      | 28/79 [00:04<00:09,  5.43it/s]
 39%|      | 31/79 [00:04<00:06,  7.08it/s]
 43%|     | 34/79 [00:04<00:05,  8.96it/s]
 47%|     | 37/79 [00:05<00:03, 11.06it/s]
 51%|     | 40/79 [00:05<00:02, 13.25it/s]
 54%|    | 43/79 [00:05<00:02, 15.35it/s]
 58%|    | 46/79 [00:05<00:01, 17.18it/s]
 62%|   | 49/79 [00:05<00:01, 18.83it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:40,  3.59s/it]
  5%|         | 4/79 [00:03<03:09,  2.53s/it]
  9%|         | 7/79 [00:03<02:08,  1.78s/it]
 13%|        | 10/79 [00:03<01:26,  1.26s/it]
 16%|        | 13/79 [00:04<00:59,  1.12it/s]
 20%|        | 16/79 [00:04<00:40,  1.57it/s]
 24%|       | 19/79 [00:04<00:27,  2.18it/s]
 28%|       | 22/79 [00:04<00:18,  3.00it/s]
 32%|      | 25/79 [00:04<00:13,  4.07it/s]
 35%|      | 28/79 [00:04<00:09,  5.43it/s]
 39%|      | 31/79 [00:04<00:06,  7.07it/s]
 43%|     | 34/79 [00:04<00:05,  8.96it/s]
 47%|     | 37/79 [00:05<00:03, 11.02it/s]
 51%|     | 40/79 [00:05<00:02, 13.22it/s]
 54%|    | 43/79 [00:05<00:02, 15.30it/s]
 58%|    | 46/79 [00:05<00:01, 17.17it/s]
 62%|   | 49/79 [00:05<00:01, 19.01it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:44,  3.64s/it]
  5%|         | 4/79 [00:03<03:12,  2.56s/it]
  9%|         | 7/79 [00:03<02:10,  1.81s/it]
 13%|        | 10/79 [00:04<01:28,  1.28s/it]
 16%|        | 13/79 [00:04<00:59,  1.10it/s]
 20%|        | 16/79 [00:04<00:40,  1.55it/s]
 24%|       | 19/79 [00:04<00:27,  2.15it/s]
 28%|       | 22/79 [00:04<00:19,  2.96it/s]
 32%|      | 25/79 [00:04<00:13,  4.02it/s]
 35%|      | 28/79 [00:04<00:09,  5.37it/s]
 39%|      | 31/79 [00:04<00:06,  7.03it/s]
 43%|     | 34/79 [00:04<00:05,  8.96it/s]
 47%|     | 37/79 [00:05<00:03, 11.04it/s]
 51%|     | 40/79 [00:05<00:02, 13.26it/s]
 54%|    | 43/79 [00:05<00:02, 15.31it/s]
 58%|    | 46/79 [00:05<00:01, 17.24it/s]
 62%|   | 49/79 [00:05<00:01, 18.89it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:40,  3.59s/it]
  5%|         | 4/79 [00:03<03:09,  2.53s/it]
  9%|         | 7/79 [00:03<02:08,  1.78s/it]
 13%|        | 10/79 [00:03<01:26,  1.26s/it]
 16%|        | 13/79 [00:04<00:59,  1.12it/s]
 20%|        | 16/79 [00:04<00:40,  1.57it/s]
 24%|       | 19/79 [00:04<00:27,  2.18it/s]
 28%|       | 22/79 [00:04<00:19,  2.99it/s]
 32%|      | 25/79 [00:04<00:13,  4.06it/s]
 35%|      | 28/79 [00:04<00:09,  5.41it/s]
 39%|      | 31/79 [00:04<00:06,  7.06it/s]
 43%|     | 34/79 [00:04<00:05,  8.99it/s]
 47%|     | 37/79 [00:05<00:03, 11.05it/s]
 51%|     | 40/79 [00:05<00:02, 13.24it/s]
 54%|    | 43/79 [00:05<00:02, 15.29it/s]
 58%|    | 46/79 [00:05<00:01, 17.05it/s]
 62%|   | 49/79 [00:05<00:01, 18.71it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:45,  3.66s/it]
  5%|         | 4/79 [00:03<03:12,  2.57s/it]
  9%|         | 7/79 [00:03<02:10,  1.81s/it]
 13%|        | 10/79 [00:04<01:28,  1.28s/it]
 16%|        | 13/79 [00:04<01:00,  1.10it/s]
 20%|        | 16/79 [00:04<00:40,  1.54it/s]
 24%|       | 19/79 [00:04<00:27,  2.14it/s]
 28%|       | 22/79 [00:04<00:19,  2.95it/s]
 32%|      | 25/79 [00:04<00:13,  4.01it/s]
 35%|      | 28/79 [00:04<00:09,  5.34it/s]
 39%|      | 31/79 [00:04<00:06,  6.94it/s]
 43%|     | 34/79 [00:05<00:05,  8.85it/s]
 47%|     | 37/79 [00:05<00:03, 10.90it/s]
 51%|     | 40/79 [00:05<00:03, 13.00it/s]
 54%|    | 43/79 [00:05<00:02, 14.97it/s]
 58%|    | 46/79 [00:05<00:01, 16.98it/s]
 62%|   | 49/79 [00:05<00:01, 18.77it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:45,  3.67s/it]
  5%|         | 4/79 [00:03<03:13,  2.58s/it]
  9%|         | 7/79 [00:03<02:10,  1.82s/it]
 13%|        | 10/79 [00:04<01:28,  1.28s/it]
 16%|        | 13/79 [00:04<01:00,  1.10it/s]
 20%|        | 16/79 [00:04<00:40,  1.54it/s]
 24%|       | 19/79 [00:04<00:28,  2.14it/s]
 28%|       | 22/79 [00:04<00:19,  2.95it/s]
 32%|      | 25/79 [00:04<00:13,  4.00it/s]
 35%|      | 28/79 [00:04<00:09,  5.34it/s]
 39%|      | 31/79 [00:04<00:06,  6.93it/s]
 43%|     | 34/79 [00:05<00:05,  8.81it/s]
 47%|     | 37/79 [00:05<00:03, 10.90it/s]
 51%|     | 40/79 [00:05<00:02, 13.05it/s]
 54%|    | 43/79 [00:05<00:02, 15.04it/s]
 58%|    | 46/79 [00:05<00:01, 17.04it/s]
 62%|   | 49/79 [00:05<00:01, 18.66it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:50,  3.73s/it]
  5%|         | 4/79 [00:03<03:16,  2.62s/it]
  9%|         | 7/79 [00:03<02:12,  1.85s/it]
 13%|        | 10/79 [00:04<01:29,  1.30s/it]
 16%|        | 13/79 [00:04<01:01,  1.08it/s]
 20%|        | 16/79 [00:04<00:41,  1.52it/s]
 24%|       | 19/79 [00:04<00:28,  2.11it/s]
 28%|       | 22/79 [00:04<00:19,  2.91it/s]
 32%|      | 25/79 [00:04<00:13,  3.96it/s]
 35%|      | 28/79 [00:04<00:09,  5.31it/s]
 39%|      | 31/79 [00:04<00:06,  6.96it/s]
 43%|     | 34/79 [00:05<00:05,  8.88it/s]
 47%|     | 37/79 [00:05<00:03, 11.05it/s]
 51%|     | 40/79 [00:05<00:02, 13.24it/s]
 54%|    | 43/79 [00:05<00:02, 15.44it/s]
 58%|    | 46/79 [00:05<00:01, 17.42it/s]
 62%|   | 49/79 [00:05<00:01, 19.16it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:47,  3.69s/it]
  5%|         | 4/79 [00:03<03:14,  2.60s/it]
  9%|         | 7/79 [00:03<02:11,  1.83s/it]
 13%|        | 10/79 [00:04<01:29,  1.29s/it]
 16%|        | 13/79 [00:04<01:00,  1.09it/s]
 20%|        | 16/79 [00:04<00:41,  1.53it/s]
 24%|       | 19/79 [00:04<00:28,  2.13it/s]
 28%|       | 22/79 [00:04<00:19,  2.93it/s]
 32%|      | 25/79 [00:04<00:13,  3.97it/s]
 35%|      | 28/79 [00:04<00:09,  5.30it/s]
 39%|      | 31/79 [00:04<00:06,  6.92it/s]
 43%|     | 34/79 [00:05<00:05,  8.81it/s]
 47%|     | 37/79 [00:05<00:03, 10.84it/s]
 51%|     | 40/79 [00:05<00:02, 13.02it/s]
 54%|    | 43/79 [00:05<00:02, 15.14it/s]
 58%|    | 46/79 [00:05<00:01, 17.11it/s]
 62%|   | 49/79 [00:05<00:01, 18.90it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:50,  3.72s/it]
  5%|         | 4/79 [00:03<03:16,  2.62s/it]
  9%|         | 7/79 [00:03<02:12,  1.84s/it]
 13%|        | 10/79 [00:04<01:29,  1.30s/it]
 16%|        | 13/79 [00:04<01:00,  1.08it/s]
 20%|        | 16/79 [00:04<00:41,  1.52it/s]
 24%|       | 19/79 [00:04<00:28,  2.11it/s]
 28%|       | 22/79 [00:04<00:19,  2.91it/s]
 32%|      | 25/79 [00:04<00:13,  3.95it/s]
 35%|      | 28/79 [00:04<00:09,  5.28it/s]
 39%|      | 31/79 [00:04<00:06,  6.90it/s]
 43%|     | 34/79 [00:05<00:05,  8.78it/s]
 47%|     | 37/79 [00:05<00:03, 10.85it/s]
 51%|     | 40/79 [00:05<00:03, 12.98it/s]
 54%|    | 43/79 [00:05<00:02, 14.96it/s]
 58%|    | 46/79 [00:05<00:01, 16.98it/s]
 62%|   | 49/79 [00:05<00:01, 18.73it/s]
 66%|   | 52/79 [00:05<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:03<04:46,  3.67s/it]
  5%|         | 4/79 [00:03<03:13,  2.58s/it]
  9%|         | 7/79 [00:03<02:11,  1.82s/it]
 13%|        | 10/79 [00:04<01:28,  1.29s/it]
 16%|        | 13/79 [00:04<01:00,  1.09it/s]
 20%|        | 16/79 [00:04<00:41,  1.53it/s]
 24%|       | 19/79 [00:04<00:28,  2.13it/s]
 28%|       | 22/79 [00:04<00:19,  2.93it/s]
 32%|      | 25/79 [00:04<00:13,  3.98it/s]
 35%|      | 28/79 [00:04<00:09,  5.30it/s]
 39%|      | 31/79 [00:04<00:06,  6.93it/s]
 43%|     | 34/79 [00:05<00:05,  8.82it/s]
 47%|     | 37/79 [00:05<00:03, 10.94it/s]
 51%|     | 40/79 [00:05<00:02, 13.03it/s]
 54%|    | 43/79 [00:05<00:02, 15.15it/s]
 58%|    | 46/79 [00:05<00:01, 17.04it/s]
 62%|   | 49/79 [00:05<00:01, 18.39it/s]
 66%|   | 52/79 [00:05<00:0125it/s]
 68%|   | 54/79 [00:05<00:01, 22.29it/s]
 72%|  | 57/79 [00:05<00:00, 23.33it/s]
 76%|  | 60/79 [00:05<00:00, 23.96it/s]
 80%|  | 63/79 [00:05<00:00, 24.35it/s]
 84%| | 66/79 [00:06<00:00, 24.97it/s]
 87%| | 69/79 [00:06<00:00, 25.30it/s]
 91%| | 72/79 [00:06<00:00, 25.36it/s]
 95%|| 75/79 [00:06<00:00, 25.96it/s]
 99%|| 78/79 [00:06<00:00, 26.57it/s]
100%|| 79/79 [00:06<00:00, 11.88it/s]
, 21.08it/s]
 70%|   | 55/79 [00:05<00:01, 22.22it/s]
 73%|  | 58/79 [00:05<00:00, 23.02it/s]
 77%|  | 61/79 [00:05<00:00, 23.73it/s]
 81%|  | 64/79 [00:06<00:00, 24.15it/s]
 85%| | 67/79 [00:06<00:00, 24.88it/s]
 89%| | 70/79 [00:06<00:00, 25.26it/s]
 92%|| 73/79 [00:06<00:00, 25.69it/s]
 96%|| 76/79 [00:06<00:00, 26.25it/s]
100%|| 79/79 [00:06<00:00, 27.18it/s]
, 21.14it/s]
 70%|   | 55/79 [00:05<00:01, 22.48it/s]
 73%|  | 58/79 [00:05<00:00, 23.14it/s]
 77%|  | 61/79 [00:05<00:00, 24.11it/s]
 81%|  | 64/79 [00:06<00:00, 24.61it/s]
 85%| | 67/79 [00:06<00:00, 25.04it/s]
 89%| | 70/79 [00:06<00:00, 24.77it/s]
 92%|| 73/79 [00:06<00:00, 25.61it/s]
 96%|| 76/79 [00:06<00:00, 26.12it/s]
100%|| 79/79 [00:06<00:00, 26.93it/s]
   | 51/79 [00:05<00:01, 22.83it/s]
 68%|   | 54/79 [00:05<00:01, 23.54it/s]
 72%|  | 57/79 [00:05<00:00, 24.22it/s]
 76%|  | 60/79 [00:05<00:00, 24.79it/s]
 80%|  | 63/79 [00:06<00:00, 24.85it/s]
 84%| | 66/79 [00:06<00:00, 25.11it/s]
 87%| | 69/79 [00:06<00:00, 25.20it/s]
 91%| | 72/79 [00:06<00:00, 25.18it/s]
 95%|| 75/79 [00:06<00:00, 25.83it/s]
 99%|| 78/79 [00:06<00:00, 26.23it/s]
100%|| 79/79 [00:06<00:00, 11.82it/s]
, 21.00it/s]
 70%|   | 55/79 [00:05<00:01, 22.36it/s]
 73%|  | 58/79 [00:05<00:00, 23.16it/s]
 77%|  | 61/79 [00:05<00:00, 23.75it/s]
 81%|  | 64/79 [00:06<00:00, 24.33it/s]
 85%| | 67/79 [00:06<00:00, 24.62it/s]
 89%| | 70/79 [00:06<00:00, 24.85it/s]
 92%|| 73/79 [00:06<00:00, 25.60it/s]
 96%|| 76/79 [00:06<00:00, 26.31it/s]
100%|| 79/79 [00:06<00:00, 27.26it/s]
, 21.10it/s]
 70%|   | 55/79 [00:05<00:01, 22.39it/s]
 73%|  | 58/79 [00:05<00:00, 23.38it/s]
 77%|  | 61/79 [00:05<00:00, 23.81it/s]
 81%|  | 64/79 [00:06<00:00, 24.30it/s]
 85%| | 67/79 [00:06<00:00, 24.73it/s]
 89%| | 70/79 [00:06<00:00, 25.47it/s]
 92%|| 73/79 [00:06<00:00, 25.42it/s]
 96%|| 76/79 [00:06<00:00, 26.22it/s]
100%|| 79/79 [00:06<00:00, 27.16it/s]
/s]
 67%|   | 53/79 [00:05<00:01, 22.06it/s]
 71%|   | 56/79 [00:05<00:00, 23.06it/s]
 75%|  | 59/79 [00:05<00:00, 23.72it/s]
 78%|  | 62/79 [00:06<00:00, 24.37it/s]
 82%| | 65/79 [00:06<00:00, 24.59it/s]
 86%| | 68/79 [00:06<00:00, 24.80it/s]
 90%| | 71/79 [00:06<00:00, 25.28it/s]
 94%|| 74/79 [00:06<00:00, 25.61it/s]
 97%|| 77/79 [00:06<00:00, 26.26it/s]
100%|| 79/79 [00:06<00:00, 11.77it/s]
/s]
 67%|   | 53/79 [00:05<00:01, 22.05it/s]
 71%|   | 56/79 [00:05<00:01, 22.92it/s]
 75%|  | 59/79 [00:05<00:00, 23.66it/s]
 78%|  | 62/79 [00:05<00:00, 23.96it/s]
 82%| | 65/79 [00:06<00:00, 24.07it/s]
 86%| | 68/79 [00:06<00:00, 24.38it/s]
 90%| | 71/79 [00:06<00:00, 24.49it/s]
 94%|| 74/79 [00:06<00:00, 25.17it/s]
 97%|| 77/79 [00:06<00:00, 25.73it/s]
100%|| 79/79 [00:06<00:00, 11.79it/s]
22it/s]
 68%|   | 54/79 [00:05<00:01, 22.55it/s]
 72%|  | 57/79 [00:05<00:00, 23.23it/s]
 76%|  | 60/79 [00:05<00:00, 24.02it/s]
 80%|  | 63/79 [00:06<00:00, 24.75it/s]
 84%| | 66/79 [00:06<00:00, 24.94it/s]
 87%| | 69/79 [00:06<00:00, 25.21it/s]
 91%| | 72/79 [00:06<00:00, 25.30it/s]
 95%|| 75/79 [00:06<00:00, 26.38it/s]
 99%|| 78/79 [00:06<00:00, 26.64it/s]
100%|| 79/79 [00:06<00:00, 11.76it/s]
, 20.77it/s]
 70%|   | 55/79 [00:05<00:01, 21.91it/s]
 73%|  | 58/79 [00:05<00:00, 22.69it/s]
 77%|  | 61/79 [00:06<00:00, 23.27it/s]
 81%|  | 64/79 [00:06<00:00, 23.48it/s]
 85%| | 67/79 [00:06<00:00, 23.87it/s]
 89%| | 70/79 [00:06<00:00, 24.07it/s]
 92%|| 73/79 [00:06<00:00, 24.67it/s]
 96%|| 76/79 [00:06<00:00, 25.42it/s]
100%|| 79/79 [00:06<00:00, 26.41it/s]
, 20.75it/s]
 70%|   | 55/79 [00:05<00:01, 22.03it/s]
 73%|  | 58/79 [00:05<00:00, 22.91it/s]
 77%|  | 61/79 [00:06<00:00, 23.58it/s]
 81%|  | 64/79 [00:06<00:00, 24.29it/s]
 85%| | 67/79 [00:06<00:00, 24.57it/s]
 89%| | 70/79 [00:06<00:00, 24.69it/s]
 92%|| 73/79 [00:06<00:00, 25.24it/s]
 96%|| 76/79 [00:06<00:00, 26.32it/s]
100%|| 79/79 [00:06<00:00, 26.71it/s]
, 20.67it/s]
 70%|   | 55/79 [00:05<00:01, 21.90it/s]
 73%|  | 58/79 [00:05<00:00, 22.98it/s]
 77%|  | 61/79 [00:06<00:00, 23.52it/s]
 81%|  | 64/79 [00:06<00:00, 23.94it/s]
 85%| | 67/79 [00:06<00:00, 24.36it/s]
 89%| | 70/79 [00:06<00:00, 24.50it/s]
 92%|| 73/79 [00:06<00:00, 25.00it/s]
 96%|| 76/79 [00:06<00:00, 25.73it/s]
100%|| 79/79 [00:06<00:00, 26.64it/s]
, 20.76it/s]
 70%|   | 55/79 [00:05<00:01, 21.78it/s]
 73%|  | 58/79 [00:05<00:00, 22.63it/s]
 77%|  | 61/79 [00:06<00:00, 23.57it/s]
 81%|  | 64/79 [00:06<00:00, 23.85it/s]
 85%| | 67/79 [00:06<00:00, 24.20it/s]
 89%| | 70/79 [00:06<00:00, 24.39it/s]
 92%|| 73/79 [00:06<00:00, 24.97it/s]
 96%|| 76/79 [00:06<00:00, 25.66it/s]
100%|| 79/79 [00:06<00:00, 26.71it/s]
41it/s]
 68%|   | 54/79 [00:05<00:01, 21.35it/s]
 72%|  | 57/79 [00:05<00:00, 22.24it/s]
 76%|  | 60/79 [00:05<00:00, 22.84it/s]
 80%|  | 63/79 [00:06<00:00, 23.24it/s]
 84%| | 66/79 [00:06<00:00, 23.57it/s]
 87%| | 69/79 [00:06<00:00, 23.56it/s]
 91%| | 72/79 [00:06<00:00, 23.80it/s]
 95%|| 75/79 [00:06<00:00, 24.75it/s]
 99%|| 78/79 [00:06<00:00, 25.66it/s]
100%|| 79/79 [00:06<00:00, 11.63it/s]
, 20.38it/s]
 70%|   | 55/79 [00:05<00:01, 21.39it/s]
 73%|  | 58/79 [00:05<00:00, 22.39it/s]
 77%|  | 61/79 [00:06<00:00, 23.01it/s]
 81%|  | 64/79 [00:06<00:00, 23.31it/s]
 85%| | 67/79 [00:06<00:00, 23.55it/s]
 89%| | 70/79 [00:06<00:00, 23.76it/s]
 92%|| 73/79 [00:06<00:00, 24.23it/s]
 96%|| 76/79 [00:06<00:00, 25.16it/s]
100%|| 79/79 [00:06<00:00, 26.12it/s]
/s]
 67%|   | 53/79 [00:05<00:01, 21.57it/s]
 71%|   | 56/79 [00:05<00:01, 22.32it/s]
 75%|  | 59/79 [00:05<00:00, 22.85it/s]
 78%|  | 62/79 [00:06<00:00, 23.17it/s]
 82%| | 65/79 [00:06<00:00, 23.68it/s]
 86%| | 68/79 [00:06<00:00, 23.84it/s]
 90%| | 71/79 [00:06<00:00, 24.11it/s]
 94%|| 74/79 [00:06<00:00, 24.97it/s]
 97%|| 77/79 [00:06<00:00, 25.40it/s]
100%|| 79/79 [00:06<00:00, 11.63it/s]
, 20.55it/s]
 70%|   | 55/79 [00:05<00:01, 21.86it/s]
 73%|  | 58/79 [00:05<00:00, 22.72it/s]
 77%|  | 61/79 [00:06<00:00, 23.04it/s]
 81%|  | 64/79 [00:06<00:00, 23.83it/s]
 85%| | 67/79 [00:06<00:00, 23.86it/s]
 89%| | 70/79 [00:06<00:00, 24.21it/s]
 92%|| 73/79 [00:06<00:00, 24.51it/s]
 96%|| 76/79 [00:06<00:00, 25.18it/s]
100%|| 79/79 [00:06<00:00, 26.12it/s]
, 20.56it/s]
 70%|   | 55/79 [00:05<00:01, 21.81it/s]
 73%|  | 58/79 [00:05<00:00, 22.64it/s]
 77%|  | 61/79 [00:06<00:00, 23.21it/s]
 81%|  | 64/79 [00:06<00:00, 23.79it/s]
 85%| | 67/79 [00:06<00:00, 24.36it/s]
 89%| | 70/79 [00:06<00:00, 24.27it/s]
 92%|| 73/79 [00:06<00:00, 24.74it/s]
 96%|| 76/79 [00:06<00:00, 25.44it/s]
100%|| 79/79 [00:06<00:00, 26.32it/s]
, 20.36it/s]
 70%|   | 55/79 [00:05<00:01, 21.59it/s]
 73%|  | 58/79 [00:05<00:00, 22.49it/s]
 77%|  | 61/79 [00:06<00:00, 23.21it/s]
 81%|  | 64/79 [00:06<00:00, 23.79it/s]
 85%| | 67/79 [00:06<00:00, 24.17it/s]
 89%| | 70/79 [00:06<00:00, 24.38it/s]
 92%|| 73/79 [00:06<00:00, 24.70it/s]
 96%|| 76/79 [00:06<00:00, 25.51it/s]
100%|| 79/79 [00:06<00:00, 26.20it/s]
, 20.28it/s]
 70%|   | 55/79 [00:05<00:01, 21.67it/s]
 73%|  | 58/79 [00:05<00:00, 22.47it/s]
 77%|  | 61/79 [00:06<00:00, 22.95it/s]
 81%|  | 64/79 [00:06<00:00, 23.39it/s]
 85%| | 67/79 [00:06<00:00, 23.99it/s]
 89%| | 70/79 [00:06<00:00, 23.99it/s]
 92%|| 73/79 [00:06<00:00, 24.43it/s]
 96%|| 76/79 [00:06<00:00, 25.34it/s]
100%|| 79/79 [00:06<00:00, 26.46it/s]
, 20.72it/s]
 70%|   | 55/79 [00:05<00:01, 21.92it/s]
 73%|  | 58/79 [00:05<00:00, 22.97it/s]
 77%|  | 61/79 [00:06<00:00, 23.55it/s]
 81%|  | 64/79 [00:06<00:00, 24.23it/s]
 85%| | 67/79 [00:06<00:00, 23.93it/s]
 89%| | 70/79 [00:06<00:00, 24.60it/s]
 92%|| 73/79 [00:06<00:00, 24.40it/s]
 96%|| 76/79 [00:06<00:00, 25.26it/s]
100%|| 79/79 [00:06<00:00, 26.25it/s]
30it/s]
 68%|   | 54/79 [00:05<00:01, 21.36it/s]
 72%|  | 57/79 [00:05<00:00, 22.38it/s]
 76%|  | 60/79 [00:06<00:00, 23.07it/s]
 80%|  | 63/79 [00:06<00:00, 23.46it/s]
 84%| | 66/79 [00:06<00:00, 23.86it/s]
 87%| | 69/79 [00:06<00:00, 24.23it/s]
 91%| | 72/79 [00:06<00:00, 24.35it/s]
 95%|| 75/79 [00:06<00:00, 25.15it/s]
 99%|| 78/79 [00:06<00:00, 25.48it/s]
100%|| 79/79 [00:06<00:00, 11.57it/s]
, 20.36it/s]
 70%|   | 55/79 [00:05<00:01, 21.57it/s]
 73%|  | 58/79 [00:05<00:00, 22.39it/s]
 77%|  | 61/79 [00:06<00:00, 23.15it/s]
 81%|  | 64/79 [00:06<00:00, 23.39it/s]
 85%| | 67/79 [00:06<00:00, 23.80it/s]
 89%| | 70/79 [00:06<00:00, 24.03it/s]
 92%|| 73/79 [00:06<00:00, 24.38it/s]
 96%|| 76/79 [00:06<00:00, 25.33it/s]
100%|| 79/79 [00:06<00:00, 26.23it/s]
55it/s]
 68%|   | 54/79 [00:05<00:01, 21.58it/s]
 72%|  | 57/79 [00:05<00:00, 22.63it/s]
 76%|  | 60/79 [00:06<00:00, 23.36it/s]
 80%|  | 63/79 [00:06<00:00, 23.89it/s]
 84%| | 66/79 [00:06<00:00, 24.31it/s]
 87%| | 69/79 [00:06<00:00, 24.66it/s]
 91%| | 72/79 [00:06<00:00, 24.63it/s]
 95%|| 75/79 [00:06<00:00, 25.34it/s]
 99%|| 78/79 [00:06<00:00, 25.81it/s]
100%|| 79/79 [00:06<00:00, 11.53it/s]
, 20.13it/s]
 70%|   | 55/79 [00:05<00:01, 21.26it/s]
 73%|  | 58/79 [00:05<00:00, 22.10it/s]
 77%|  | 61/79 [00:06<00:00, 22.84it/s]
 81%|  | 64/79 [00:06<00:00, 23.05it/s]
 85%| | 67/79 [00:06<00:00, 23.45it/s]
 89%| | 70/79 [00:06<00:00, 23.75it/s]
 92%|| 73/79 [00:06<00:00, 24.39it/s]
 96%|| 76/79 [00:06<00:00, 25.34it/s]
100%|| 79/79 [00:06<00:00, 26.44it/s]
, 20.50it/s]
 70%|   | 55/79 [00:05<00:01, 21.32it/s]
 73%|  | 58/79 [00:05<00:00, 22.02it/s]
 77%|  | 61/79 [00:06<00:00, 22.80it/s]
 81%|  | 64/79 [00:06<00:00, 23.48it/s]
 85%| | 67/79 [00:06<00:00, 23.98it/s]
 89%| | 70/79 [00:06<00:00, 24.04it/s]
 92%|| 73/79 [00:06<00:00, 24.61it/s]
 96%|| 76/79 [00:06<00:00, 25.20it/s]
100%|| 79/79 [00:06<00:00, 25.98it/s]
, 20.52it/s]
 70%|   | 55/79 [00:05<00:01, 21.72it/s]
 73%|  | 58/79 [00:06<00:00, 22.75it/s]
 77%|  | 61/79 [00:06<00:00, 23.29it/s]
 81%|  | 64/79 [00:06<00:00, 24.01it/s]
 85%| | 67/79 [00:06<00:00, 24.10it/s]
 89%| | 70/79 [00:06<00:00, 24.31it/s]
 92%|| 73/79 [00:06<00:00, 25.04it/s]
 96%|| 76/79 [00:06<00:00, 25.69it/s]
100%|| 79/79 [00:06<00:00, 26.66it/s]
, 19.96it/s]
 70%|   | 55/79 [00:05<00:01, 21.10it/s]
 73%|  | 58/79 [00:06<00:00, 21.97it/s]
 77%|  | 61/79 [00:06<00:00, 22.96it/s]
 81%|  | 64/79 [00:06<00:00, 23.41it/s]
 85%| | 67/79 [00:06<00:00, 23.66it/s]
 89%| | 70/79 [00:06<00:00, 23.84it/s]
 92%|| 73/79 [00:06<00:00, 24.44it/s]
 96%|| 76/79 [00:06<00:00, 25.28it/s]
100%|| 79/79 [00:06<00:00, 26.38it/s]
, 20.32it/s]
 70%|   | 55/79 [00:05<00:01, 21.26it/s]
 73%|  | 58/79 [00:06<00:00, 22.03it/s]
 77%|  | 61/79 [00:06<00:00, 22.74it/s]
 81%|  | 64/79 [00:06<00:00, 23.28it/s]
 85%| | 67/79 [00:06<00:00, 23.46it/s]
 89%| | 70/79 [00:06<00:00, 23.62it/s]
 92%|| 73/79 [00:06<00:00, 24.05it/s]
 96%|| 76/79 [00:06<00:00, 24.91it/s]
100%|| 79/79 [00:06<00:00, 26.13it/s]
, 20.23it/s]
 70%|   | 55/79 [00:05<00:01, 21.31it/s]
 73%|  | 58/79 [00:06<00:00, 22.04it/s]
 77%|  | 61/79 [00:06<00:00, 22.77it/s]
 81%|  | 64/79 [00:06<00:00, 23.07it/s]
 85%| | 67/79 [00:06<00:00, 23.27it/s]
 89%| | 70/79 [00:06<00:00, 23.69it/s]
 92%|| 73/79 [00:06<00:00, 24.28it/s]
 96%|| 76/79 [00:06<00:00, 25.06it/s]
100%|| 79/79 [00:06<00:00, 26.15it/s]
, 19.80it/s]
 70%|   | 55/79 [00:05<00:01, 20.81it/s]
 73%|  | 58/79 [00:06<00:00, 21.78it/s]
 77%|  | 61/79 [00:06<00:00, 22.59it/s]
 81%|  | 64/79 [00:06<00:00, 23.08it/s]
 85%| | 67/79 [00:06<00:00, 23.43it/s]
 89%| | 70/79 [00:06<00:00, 23.65it/s]
 92%|| 73/79 [00:06<00:00, 24.22it/s]
 96%|| 76/79 [00:06<00:00, 25.06it/s]
100%|| 79/79 [00:06<00:00, 26.11it/s]
, 19.95it/s]
 70%|   | 55/79 [00:05<00:01, 20.75it/s]
 73%|  | 58/79 [00:06<00:00, 21.77it/s]
 77%|  | 61/79 [00:06<00:00, 22.45it/s]
 81%|  | 64/79 [00:06<00:00, 22.76it/s]
 85%| | 67/79 [00:06<00:00, 23.08it/s]
 89%| | 70/79 [00:06<00:00, 23.25it/s]
 92%|| 73/79 [00:06<00:00, 23.89it/s]
 96%|| 76/79 [00:06<00:00, 24.73it/s]
100%|| 79/79 [00:06<00:00, 25.77it/s]
2020-06-23 16:24:39,343 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:06.991590 (0.044746173095703126 s / img per device, on 32 devices)
2020-06-23 16:24:39,365 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:24:39,365 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:24:39,387 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592954692191, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 4, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592954692192, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 4}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:24:53,183 maskrcnn_benchmark.trainer INFO: eta: 1:21:05  iter: 2760  loss: 0.7549 (0.9259)  loss_classifier: 0.2571 (0.3531)  loss_box_reg: 0.1204 (0.1430)  loss_mask: 0.2945 (0.3527)  loss_objectness: 0.0295 (0.0526)  loss_rpn_box_reg: 0.0139 (0.0245)  time: 0.1094 (0.1307)  data: 0.0015 (0.0216)  lr: 0.160000  max mem: 5079
2020-06-23 16:24:55,336 maskrcnn_benchmark.trainer INFO: eta: 1:20:57  iter: 2780  loss: 0.6424 (0.9244)  loss_classifier: 0.2433 (0.3524)  loss_box_reg: 0.0924 (0.1429)  loss_mask: 0.2523 (0.3521)  loss_objectness: 0.0323 (0.0525)  loss_rpn_box_reg: 0.0091 (0.0245)  time: 0.1073 (0.1305)  data: 0.0015 (0.0215)  lr: 0.160000  max mem: 5079
2020-06-23 16:24:57,500 maskrcnn_benchmark.trainer INFO: eta: 1:20:48  iter: 2800  loss: 0.7119 (0.9232)  loss_classifier: 0.2264 (0.3518)  loss_box_reg: 0.1144 (0.1427)  loss_mask: 0.2979 (0.3519)  loss_objectness: 0.0227 (0.0524)  loss_rpn_box_reg: 0.0088 (0.0245)  time: 0.1079 (0.1303)  data: 0.0014 (0.0213)  lr: 0.160000  max mem: 5079
2020-06-23 16:24:59,651 maskrcnn_benchmark.trainer INFO: eta: 1:20:39  iter: 2820  loss: 0.6883 (0.9213)  loss_classifier: 0.2443 (0.3509)  loss_box_reg: 0.1000 (0.1425)  loss_mask: 0.2659 (0.3514)  loss_objectness: 0.0244 (0.0522)  loss_rpn_box_reg: 0.0076 (0.0244)  time: 0.1071 (0.1302)  data: 0.0015 (0.0212)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:01,803 maskrcnn_benchmark.trainer INFO: eta: 1:20:31  iter: 2840  loss: 0.8073 (0.9204)  loss_classifier: 0.2827 (0.3505)  loss_box_reg: 0.1310 (0.1424)  loss_mask: 0.3017 (0.3511)  loss_objectness: 0.0266 (0.0521)  loss_rpn_box_reg: 0.0092 (0.0244)  time: 0.1067 (0.1300)  data: 0.0016 (0.0210)  lr: 0.160000  max mem: 5079
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 16:25:03,953 maskrcnn_benchmark.trainer INFO: eta: 1:20:22  iter: 2860  loss: 0.6637 (0.9187)  loss_classifier: 0.2285 (0.3497)  loss_box_reg: 0.0998 (0.1422)  loss_mask: 0.2722 (0.3505)  loss_objectness: 0.0221 (0.0519)  loss_rpn_box_reg: 0.0103 (0.0243)  time: 0.1076 (0.1299)  data: 0.0016 (0.0209)  lr: 0.160000  max mem: 5079
DONE (t=1.18s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:25:06,100 maskrcnn_benchmark.trainer INFO: eta: 1:20:14  iter: 2880  loss: 0.6972 (0.9173)  loss_classifier: 0.2537 (0.3492)  loss_box_reg: 0.1123 (0.1421)  loss_mask: 0.2945 (0.3501)  loss_objectness: 0.0232 (0.0517)  loss_rpn_box_reg: 0.0106 (0.0243)  time: 0.1065 (0.1297)  data: 0.0015 (0.0208)  lr: 0.160000  max mem: 5079
DONE (t=2.10s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22526
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.41283
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.22258
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11765
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.24460
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.28971
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.22138
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.37058
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.39069
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22567
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.42126
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47475
2020-06-23 16:25:08,236 maskrcnn_benchmark.trainer INFO: eta: 1:20:06  iter: 2900  loss: 0.6861 (0.9161)  loss_classifier: 0.2364 (0.3485)  loss_box_reg: 0.1046 (0.1419)  loss_mask: 0.2861 (0.3497)  loss_objectness: 0.0321 (0.0517)  loss_rpn_box_reg: 0.0166 (0.0243)  time: 0.1068 (0.1295)  data: 0.0015 (0.0206)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:10,376 maskrcnn_benchmark.trainer INFO: eta: 1:19:57  iter: 2920  loss: 0.7128 (0.9150)  loss_classifier: 0.2860 (0.3480)  loss_box_reg: 0.1170 (0.1419)  loss_mask: 0.2754 (0.3492)  loss_objectness: 0.0298 (0.0516)  loss_rpn_box_reg: 0.0115 (0.0243)  time: 0.1066 (0.1294)  data: 0.0015 (0.0205)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:12,535 maskrcnn_benchmark.trainer INFO: eta: 1:19:49  iter: 2940  loss: 0.7530 (0.9141)  loss_classifier: 0.2663 (0.3476)  loss_box_reg: 0.1170 (0.1418)  loss_mask: 0.3033 (0.3490)  loss_objectness: 0.0224 (0.0515)  loss_rpn_box_reg: 0.0113 (0.0243)  time: 0.1081 (0.1292)  data: 0.0014 (0.0204)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:14,695 maskrcnn_benchmark.trainer INFO: eta: 1:19:41  iter: 2960  loss: 0.6725 (0.9125)  loss_classifier: 0.2354 (0.3469)  loss_box_reg: 0.1189 (0.1415)  loss_mask: 0.2813 (0.3486)  loss_objectness: 0.0231 (0.0513)  loss_rpn_box_reg: 0.0084 (0.0242)  time: 0.1067 (0.1291)  data: 0.0014 (0.0202)  lr: 0.160000  max mem: 5079
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:25:16,857 maskrcnn_benchmark.trainer INFO: eta: 1:19:34  iter: 2980  loss: 0.7222 (0.9117)  loss_classifier: 0.2289 (0.3464)  loss_box_reg: 0.1094 (0.1414)  loss_mask: 0.3081 (0.3483)  loss_objectness: 0.0227 (0.0513)  loss_rpn_box_reg: 0.0122 (0.0243)  time: 0.1074 (0.1290)  data: 0.0014 (0.0201)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:19,018 maskrcnn_benchmark.trainer INFO: eta: 1:19:26  iter: 3000  loss: 0.6935 (0.9106)  loss_classifier: 0.2512 (0.3459)  loss_box_reg: 0.1191 (0.1413)  loss_mask: 0.2888 (0.3480)  loss_objectness: 0.0263 (0.0512)  loss_rpn_box_reg: 0.0094 (0.0242)  time: 0.1081 (0.1288)  data: 0.0014 (0.0200)  lr: 0.160000  max mem: 5079
DONE (t=2.88s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:25:21,165 maskrcnn_benchmark.trainer INFO: eta: 1:19:18  iter: 3020  loss: 0.7378 (0.9097)  loss_classifier: 0.2867 (0.3456)  loss_box_reg: 0.1253 (0.1412)  loss_mask: 0.2945 (0.3476)  loss_objectness: 0.0179 (0.0510)  loss_rpn_box_reg: 0.0081 (0.0242)  time: 0.1074 (0.1287)  data: 0.0014 (0.0199)  lr: 0.160000  max mem: 5079
DONE (t=3.51s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22033
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.39013
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.22485
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.08570
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.24146
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.32189
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.22033
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.35066
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36722
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19568
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.40413
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.45697
2020-06-23 16:25:23,215 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.2252639404213653, segm mAP: 0.22032621124461363
:::MLLOG {"namespace": "", "time_ms": 1592954723216, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.2252639404213653, "SEGM": 0.22032621124461363}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1592954723216, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 3}}
2020-06-23 16:25:23,543 maskrcnn_benchmark.trainer INFO: eta: 1:19:13  iter: 3040  loss: 0.6821 (0.9079)  loss_classifier: 0.2193 (0.3449)  loss_box_reg: 0.0951 (0.1409)  loss_mask: 0.2807 (0.3472)  loss_objectness: 0.0208 (0.0509)  loss_rpn_box_reg: 0.0068 (0.0241)  time: 0.1088 (0.1286)  data: 0.0013 (0.0197)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:25,671 maskrcnn_benchmark.trainer INFO: eta: 1:19:05  iter: 3060  loss: 0.6572 (0.9063)  loss_classifier: 0.2186 (0.3441)  loss_box_reg: 0.0955 (0.1406)  loss_mask: 0.2769 (0.3468)  loss_objectness: 0.0210 (0.0507)  loss_rpn_box_reg: 0.0093 (0.0241)  time: 0.1065 (0.1285)  data: 0.0013 (0.0196)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:27,822 maskrcnn_benchmark.trainer INFO: eta: 1:18:57  iter: 3080  loss: 0.7590 (0.9053)  loss_classifier: 0.2530 (0.3437)  loss_box_reg: 0.1191 (0.1405)  loss_mask: 0.2883 (0.3464)  loss_objectness: 0.0230 (0.0506)  loss_rpn_box_reg: 0.0156 (0.0241)  time: 0.1069 (0.1283)  data: 0.0014 (0.0195)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:29,975 maskrcnn_benchmark.trainer INFO: eta: 1:18:50  iter: 3100  loss: 0.6911 (0.9045)  loss_classifier: 0.2843 (0.3433)  loss_box_reg: 0.1272 (0.1405)  loss_mask: 0.2898 (0.3461)  loss_objectness: 0.0235 (0.0505)  loss_rpn_box_reg: 0.0093 (0.0241)  time: 0.1076 (0.1282)  data: 0.0014 (0.0194)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:32,126 maskrcnn_benchmark.trainer INFO: eta: 1:18:43  iter: 3120  loss: 0.6048 (0.9028)  loss_classifier: 0.2154 (0.3425)  loss_box_reg: 0.0734 (0.1402)  loss_mask: 0.2562 (0.3456)  loss_objectness: 0.0295 (0.0504)  loss_rpn_box_reg: 0.0135 (0.0241)  time: 0.1071 (0.1281)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:34,262 maskrcnn_benchmark.trainer INFO: eta: 1:18:35  iter: 3140  loss: 0.6851 (0.9015)  loss_classifier: 0.2327 (0.3419)  loss_box_reg: 0.0988 (0.1400)  loss_mask: 0.2833 (0.3453)  loss_objectness: 0.0169 (0.0503)  loss_rpn_box_reg: 0.0083 (0.0240)  time: 0.1060 (0.1279)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:36,418 maskrcnn_benchmark.trainer INFO: eta: 1:18:28  iter: 3160  loss: 0.7556 (0.9006)  loss_classifier: 0.2760 (0.3414)  loss_box_reg: 0.1409 (0.1399)  loss_mask: 0.2940 (0.3450)  loss_objectness: 0.0289 (0.0502)  loss_rpn_box_reg: 0.0149 (0.0240)  time: 0.1070 (0.1278)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:38,553 maskrcnn_benchmark.trainer INFO: eta: 1:18:20  iter: 3180  loss: 0.7520 (0.8995)  loss_classifier: 0.2634 (0.3409)  loss_box_reg: 0.1266 (0.1398)  loss_mask: 0.2976 (0.3447)  loss_objectness: 0.0203 (0.0501)  loss_rpn_box_reg: 0.0162 (0.0240)  time: 0.1061 (0.1277)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:40,690 maskrcnn_benchmark.trainer INFO: eta: 1:18:13  iter: 3200  loss: 0.8120 (0.8989)  loss_classifier: 0.2980 (0.3406)  loss_box_reg: 0.1374 (0.1398)  loss_mask: 0.2967 (0.3444)  loss_objectness: 0.0296 (0.0501)  loss_rpn_box_reg: 0.0104 (0.0240)  time: 0.1067 (0.1275)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:42,827 maskrcnn_benchmark.trainer INFO: eta: 1:18:06  iter: 3220  loss: 0.6647 (0.8977)  loss_classifier: 0.2441 (0.3402)  loss_box_reg: 0.1042 (0.1396)  loss_mask: 0.2694 (0.3440)  loss_objectness: 0.0216 (0.0500)  loss_rpn_box_reg: 0.0104 (0.0239)  time: 0.1068 (0.1274)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:44,966 maskrcnn_benchmark.trainer INFO: eta: 1:17:59  iter: 3240  loss: 0.6837 (0.8963)  loss_classifier: 0.2211 (0.3397)  loss_box_reg: 0.0949 (0.1394)  loss_mask: 0.2907 (0.3436)  loss_objectness: 0.0146 (0.0498)  loss_rpn_box_reg: 0.0067 (0.0239)  time: 0.1069 (0.1273)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:47,108 maskrcnn_benchmark.trainer INFO: eta: 1:17:51  iter: 3260  loss: 0.7456 (0.8954)  loss_classifier: 0.2747 (0.3393)  loss_box_reg: 0.1174 (0.1393)  loss_mask: 0.2818 (0.3432)  loss_objectness: 0.0217 (0.0497)  loss_rpn_box_reg: 0.0070 (0.0239)  time: 0.1074 (0.1272)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:49,251 maskrcnn_benchmark.trainer INFO: eta: 1:17:44  iter: 3280  loss: 0.7102 (0.8946)  loss_classifier: 0.2931 (0.3390)  loss_box_reg: 0.1026 (0.1392)  loss_mask: 0.2995 (0.3429)  loss_objectness: 0.0243 (0.0496)  loss_rpn_box_reg: 0.0130 (0.0239)  time: 0.1075 (0.1270)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:51,407 maskrcnn_benchmark.trainer INFO: eta: 1:17:38  iter: 3300  loss: 0.7309 (0.8938)  loss_classifier: 0.2961 (0.3386)  loss_box_reg: 0.1176 (0.1391)  loss_mask: 0.2893 (0.3426)  loss_objectness: 0.0219 (0.0496)  loss_rpn_box_reg: 0.0083 (0.0239)  time: 0.1082 (0.1269)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:53,534 maskrcnn_benchmark.trainer INFO: eta: 1:17:30  iter: 3320  loss: 0.7231 (0.8931)  loss_classifier: 0.2635 (0.3383)  loss_box_reg: 0.1190 (0.1391)  loss_mask: 0.2909 (0.3423)  loss_objectness: 0.0253 (0.0495)  loss_rpn_box_reg: 0.0129 (0.0239)  time: 0.1061 (0.1268)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:55,661 maskrcnn_benchmark.trainer INFO: eta: 1:17:23  iter: 3340  loss: 0.6961 (0.8923)  loss_classifier: 0.2282 (0.3379)  loss_box_reg: 0.1193 (0.1390)  loss_mask: 0.2950 (0.3421)  loss_objectness: 0.0291 (0.0495)  loss_rpn_box_reg: 0.0116 (0.0239)  time: 0.1061 (0.1267)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:57,798 maskrcnn_benchmark.trainer INFO: eta: 1:17:17  iter: 3360  loss: 0.7029 (0.8913)  loss_classifier: 0.2118 (0.3375)  loss_box_reg: 0.1159 (0.1390)  loss_mask: 0.2706 (0.3417)  loss_objectness: 0.0206 (0.0493)  loss_rpn_box_reg: 0.0127 (0.0238)  time: 0.1062 (0.1266)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5079
2020-06-23 16:25:59,927 maskrcnn_benchmark.trainer INFO: eta: 1:17:10  iter: 3380  loss: 0.5949 (0.8898)  loss_classifier: 0.1969 (0.3368)  loss_box_reg: 0.0982 (0.1388)  loss_mask: 0.2538 (0.3412)  loss_objectness: 0.0169 (0.0492)  loss_rpn_box_reg: 0.0076 (0.0238)  time: 0.1061 (0.1264)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5079
2020-06-23 16:26:02,066 maskrcnn_benchmark.trainer INFO: eta: 1:17:03  iter: 3400  loss: 0.7889 (0.8892)  loss_classifier: 0.2784 (0.3366)  loss_box_reg: 0.1308 (0.1387)  loss_mask: 0.2867 (0.3410)  loss_objectness: 0.0326 (0.0492)  loss_rpn_box_reg: 0.0127 (0.0238)  time: 0.1066 (0.1263)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5079
2020-06-23 16:26:04,212 maskrcnn_benchmark.trainer INFO: eta: 1:16:56  iter: 3420  loss: 0.6984 (0.8880)  loss_classifier: 0.2503 (0.3361)  loss_box_reg: 0.0990 (0.1386)  loss_mask: 0.2582 (0.3405)  loss_objectness: 0.0269 (0.0491)  loss_rpn_box_reg: 0.0084 (0.0237)  time: 0.1066 (0.1262)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5079
2020-06-23 16:26:06,365 maskrcnn_benchmark.trainer INFO: eta: 1:16:50  iter: 3440  loss: 0.6728 (0.8869)  loss_classifier: 0.2548 (0.3357)  loss_box_reg: 0.1203 (0.1384)  loss_mask: 0.2836 (0.3401)  loss_objectness: 0.0168 (0.0489)  loss_rpn_box_reg: 0.0086 (0.0237)  time: 0.1075 (0.1261)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5079
2020-06-23 16:26:08,521 maskrcnn_benchmark.trainer INFO: eta: 1:16:44  iter: 3460  loss: 0.6778 (0.8861)  loss_classifier: 0.2776 (0.3354)  loss_box_reg: 0.1190 (0.1383)  loss_mask: 0.2911 (0.3399)  loss_objectness: 0.0212 (0.0488)  loss_rpn_box_reg: 0.0080 (0.0236)  time: 0.1068 (0.1260)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5079
2020-06-23 16:26:10,699 maskrcnn_benchmark.trainer INFO: eta: 1:16:37  iter: 3480  loss: 0.7783 (0.8851)  loss_classifier: 0.2580 (0.3350)  loss_box_reg: 0.1177 (0.1382)  loss_mask: 0.2749 (0.3395)  loss_objectness: 0.0235 (0.0487)  loss_rpn_box_reg: 0.0106 (0.0236)  time: 0.1085 (0.1259)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5079
2020-06-23 16:26:12,846 maskrcnn_benchmark.trainer INFO: eta: 1:16:31  iter: 3500  loss: 0.7156 (0.8842)  loss_classifier: 0.2777 (0.3347)  loss_box_reg: 0.1280 (0.1381)  loss_mask: 0.2807 (0.3393)  loss_objectness: 0.0227 (0.0486)  loss_rpn_box_reg: 0.0076 (0.0236)  time: 0.1070 (0.1258)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5079
2020-06-23 16:26:14,992 maskrcnn_benchmark.trainer INFO: eta: 1:16:25  iter: 3520  loss: 0.6928 (0.8834)  loss_classifier: 0.2751 (0.3343)  loss_box_reg: 0.1138 (0.1381)  loss_mask: 0.2909 (0.3390)  loss_objectness: 0.0182 (0.0485)  loss_rpn_box_reg: 0.0072 (0.0235)  time: 0.1070 (0.1257)  data: 0.0013 (0.0172)  lr: 0.160000  max mem: 5079
2020-06-23 16:26:17,153 maskrcnn_benchmark.trainer INFO: eta: 1:16:19  iter: 3540  loss: 0.7410 (0.8826)  loss_classifier: 0.2475 (0.3340)  loss_box_reg: 0.1126 (0.1380)  loss_mask: 0.3009 (0.3387)  loss_objectness: 0.0306 (0.0484)  loss_rpn_box_reg: 0.0122 (0.0235)  time: 0.1080 (0.1256)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5079
2020-06-23 16:26:19,306 maskrcnn_benchmark.trainer INFO: eta: 1:16:12  iter: 3560  loss: 0.7168 (0.8817)  loss_classifier: 0.2423 (0.3335)  loss_box_reg: 0.1148 (0.1379)  loss_mask: 0.2941 (0.3385)  loss_objectness: 0.0237 (0.0483)  loss_rpn_box_reg: 0.0098 (0.0235)  time: 0.1074 (0.1255)  data: 0.0014 (0.0171)  lr: 0.160000  max mem: 5079
2020-06-23 16:26:21,459 maskrcnn_benchmark.trainer INFO: eta: 1:16:06  iter: 3580  loss: 0.7133 (0.8811)  loss_classifier: 0.2647 (0.3333)  loss_box_reg: 0.1260 (0.1379)  loss_mask: 0.3221 (0.3383)  loss_objectness: 0.0245 (0.0482)  loss_rpn_box_reg: 0.0091 (0.0235)  time: 0.1069 (0.1254)  data: 0.0014 (0.0170)  lr: 0.160000  max mem: 5079
2020-06-23 16:26:23,623 maskrcnn_benchmark.trainer INFO: eta: 1:16:00  iter: 3600  loss: 0.7222 (0.8803)  loss_classifier: 0.2690 (0.3329)  loss_box_reg: 0.1145 (0.1378)  loss_mask: 0.2990 (0.3380)  loss_objectness: 0.0210 (0.0481)  loss_rpn_box_reg: 0.0070 (0.0234)  time: 0.1079 (0.1253)  data: 0.0014 (0.0169)  lr: 0.160000  max mem: 5079
2020-06-23 16:26:25,776 maskrcnn_benchmark.trainer INFO: eta: 1:15:54  iter: 3620  loss: 0.6744 (0.8794)  loss_classifier: 0.2454 (0.3325)  loss_box_reg: 0.1042 (0.1376)  loss_mask: 0.2995 (0.3377)  loss_objectness: 0.0219 (0.0481)  loss_rpn_box_reg: 0.0119 (0.0234)  time: 0.1075 (0.1252)  data: 0.0014 (0.0168)  lr: 0.160000  max mem: 5079
2020-06-23 16:26:27,927 maskrcnn_benchmark.trainer INFO: eta: 1:15:48  iter: 3640  loss: 0.6480 (0.8783)  loss_classifier: 0.2416 (0.3321)  loss_box_reg: 0.1022 (0.1375)  loss_mask: 0.2619 (0.3373)  loss_objectness: 0.0232 (0.0480)  loss_rpn_box_reg: 0.0106 (0.0234)  time: 0.1077 (0.1251)  data: 0.0014 (0.0167)  lr: 0.160000  max mem: 5079
2020-06-23 16:26:30,084 maskrcnn_benchmark.trainer INFO: eta: 1:15:42  iter: 3660  loss: 0.7736 (0.8777)  loss_classifier: 0.2731 (0.3318)  loss_box_reg: 0.1081 (0.1374)  loss_mask: 0.2875 (0.3372)  loss_objectness: 0.0353 (0.0480)  loss_rpn_box_reg: 0.0152 (0.0234)  time: 0.1076 (0.1250)  data: 0.0014 (0.0166)  lr: 0.160000  max mem: 5079
:::MLLOG {"namespace": "", "time_ms": 1592954792058, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1592954792059, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1592954792059, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 4}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
2020-06-23 16:26:32,311 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.31s)
creating index...
index created!
index created!
index created!
2020-06-23 16:26:32,625 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.27it/s]
  5%|         | 4/79 [00:00<00:42,  1.77it/s]
  9%|         | 7/79 [00:01<00:29,  2.46it/s]
 13%|        | 10/79 [00:01<00:20,  3.37it/s]
 16%|        | 13/79 [00:01<00:14,  4.56it/s]
 20%|        | 16/79 [00:01<00:10,  6.05it/s]
 24%|       | 19/79 [00:01<00:07,  7.85it/s]
 28%|       | 22/79 [00:01<00:05,  9.95it/s]
 32%|      | 25/79 [00:01<00:04, 12.21it/s]
 35%|      | 28/79 [00:01<00:03, 14.51it/s]
 39%|      | 31/79 [00:01<00:02, 16.84it/s]
 43%|     | 34/79 [00:02<00:02, 18.81it/s]
 47%|     | 37/79 [00:02<00:02, 20.54it/s]
 51%|     | 40/79 [00:02<00:01, 21.85it/s]
 54%|    | 43/79 [00:02<00:01, 22.87it/s]
 58%|    | 46/79 [00:02<00:01, 23.76it/s]
 62%|   | 49/79 [00:02<00:01, 24.31it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.45it/s]
 20%|        | 16/79 [00:01<00:10,  5.91it/s]
 24%|       | 19/79 [00:01<00:07,  7.68it/s]
 28%|       | 22/79 [00:01<00:05,  9.74it/s]
 32%|      | 25/79 [00:01<00:04, 11.98it/s]
 35%|      | 28/79 [00:01<00:03, 14.34it/s]
 39%|      | 31/79 [00:01<00:02, 16.46it/s]
 43%|     | 34/79 [00:02<00:02, 18.54it/s]
 47%|     | 37/79 [00:02<00:02, 20.29it/s]
 51%|     | 40/79 [00:02<00:01, 21.55it/s]
 54%|    | 43/79 [00:02<00:01, 22.75it/s]
 58%|    | 46/79 [00:02<00:01, 23.61it/s]
 62%|   | 49/79 [00:02<00:01, 24.39it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  8%|         | 6/79 [00:01<00:31,  2.34it/s]
 10%|         | 8/79 [00:01<00:22,  3.18it/s]
 14%|        | 11/79 [00:01<00:15,  4.32it/s]
 18%|        | 14/79 [00:01<00:11,  5.76it/s]
 22%|       | 17/79 [00:01<00:08,  7.50it/s]
 25%|       | 20/79 [00:01<00:06,  9.55it/s]
 29%|       | 23/79 [00:01<00:04, 11.79it/s]
 33%|      | 26/79 [00:01<00:03, 14.05it/s]
 37%|      | 29/79 [00:01<00:03, 16.17it/s]
 41%|      | 32/79 [00:02<00:02, 18.24it/s]
 44%|     | 35/79 [00:02<00:02, 19.91it/s]
 48%|     | 38/79 [00:02<00:01, 21.13it/s]
 52%|    | 41/79 [00:02<00:01, 22.47it/s]
 56%|    | 44/79 [00:02<00:01, 23.12it/s]
 59%|    | 47/79 [00:02<00:01, 23.79it/s]
 63%|   | 50/79 [00:02<00:01, 24.26it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.29it/s]
  5%|         | 4/79 [00:00<00:41,  1.79it/s]
  9%|         | 7/79 [00:01<00:28,  2.48it/s]
 13%|        | 10/79 [00:01<00:20,  3.40it/s]
 16%|        | 13/79 [00:01<00:14,  4.58it/s]
 20%|        | 16/79 [00:01<00:10,  6.07it/s]
 24%|       | 19/79 [00:01<00:07,  7.86it/s]
 28%|       | 22/79 [00:01<00:05,  9.85it/s]
 32%|      | 25/79 [00:01<00:04, 11.99it/s]
 35%|      | 28/79 [00:01<00:03, 14.15it/s]
 39%|      | 31/79 [00:02<00:02, 16.19it/s]
 43%|     | 34/79 [00:02<00:02, 18.13it/s]
 47%|     | 37/79 [00:02<00:02, 19.75it/s]
 51%|     | 40/79 [00:02<00:01, 21.11it/s]
 54%|    | 43/79 [00:02<00:01, 22.32it/s]
 58%|    | 46/79 [00:02<00:01, 23.14it/s]
 62%|   | 49/79 [00:02<00:01, 23.84it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.82it/s]
 35%|      | 28/79 [00:01<00:03, 14.19it/s]
 39%|      | 31/79 [00:02<00:02, 16.36it/s]
 43%|     | 34/79 [00:02<00:02, 18.33it/s]
 47%|     | 37/79 [00:02<00:02, 20.06it/s]
 51%|     | 40/79 [00:02<00:01, 21.61it/s]
 54%|    | 43/79 [00:02<00:01, 22.57it/s]
 58%|    | 46/79 [00:02<00:01, 23.49it/s]
 62%|   | 49/79 [00:02<00:01, 24.07it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.50it/s]
 28%|       | 22/79 [00:01<00:05,  9.55it/s]
 32%|      | 25/79 [00:01<00:04, 11.78it/s]
 35%|      | 28/79 [00:01<00:03, 14.10it/s]
 39%|      | 31/79 [00:02<00:02, 16.36it/s]
 43%|     | 34/79 [00:02<00:02, 18.44it/s]
 47%|     | 37/79 [00:02<00:02, 20.25it/s]
 51%|     | 40/79 [00:02<00:01, 21.59it/s]
 54%|    | 43/79 [00:02<00:01, 22.92it/s]
 58%|    | 46/79 [00:02<00:01, 23.85it/s]
 62%|   | 49/79 [00:02<00:01, 24.54it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.36it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.57it/s]
 28%|       | 22/79 [00:01<00:05,  9.61it/s]
 32%|      | 25/79 [00:01<00:04, 11.83it/s]
 35%|      | 28/79 [00:01<00:03, 14.13it/s]
 39%|      | 31/79 [00:02<00:02, 16.31it/s]
 43%|     | 34/79 [00:02<00:02, 18.25it/s]
 47%|     | 37/79 [00:02<00:02, 20.15it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 21.98it/s]
 58%|    | 46/79 [00:02<00:01, 23.04it/s]
 62%|   | 49/79 [00:02<00:01, 23.83it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:10,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.45it/s]
 28%|       | 22/79 [00:01<00:05,  9.50it/s]
 32%|      | 25/79 [00:01<00:04, 11.69it/s]
 35%|      | 28/79 [00:01<00:03, 14.02it/s]
 39%|      | 31/79 [00:02<00:02, 16.33it/s]
 43%|     | 34/79 [00:02<00:02, 18.25it/s]
 47%|     | 37/79 [00:02<00:02, 20.17it/s]
 51%|     | 40/79 [00:02<00:01, 21.46it/s]
 54%|    | 43/79 [00:02<00:01, 22.60it/s]
 58%|    | 46/79 [00:02<00:01, 23.15it/s]
 62%|   | 49/79 [00:02<00:01, 23.91it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.36it/s]
 28%|       | 22/79 [00:01<00:06,  9.40it/s]
 32%|      | 25/79 [00:01<00:04, 11.63it/s]
 35%|      | 28/79 [00:01<00:03, 13.95it/s]
 39%|      | 31/79 [00:02<00:02, 16.29it/s]
 43%|     | 34/79 [00:02<00:02, 18.30it/s]
 47%|     | 37/79 [00:02<00:02, 20.21it/s]
 51%|     | 40/79 [00:02<00:01, 21.60it/s]
 54%|    | 43/79 [00:02<00:01, 22.86it/s]
 58%|    | 46/79 [00:02<00:01, 23.64it/s]
 62%|   | 49/79 [00:02<00:01, 24.35it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:11,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.47it/s]
 28%|       | 22/79 [00:01<00:06,  9.44it/s]
 32%|      | 25/79 [00:01<00:04, 11.63it/s]
 35%|      | 28/79 [00:01<00:03, 13.96it/s]
 39%|      | 31/79 [00:02<00:02, 16.29it/s]
 43%|     | 34/79 [00:02<00:02, 18.29it/s]
 47%|     | 37/79 [00:02<00:02, 20.07it/s]
 51%|     | 40/79 [00:02<00:01, 21.43it/s]
 54%|    | 43/79 [00:02<00:01, 22.54it/s]
 58%|    | 46/79 [00:02<00:01, 23.23it/s]
 62%|   | 49/79 [00:02<00:01, 23.91it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.33it/s]
 28%|       | 22/79 [00:01<00:06,  9.32it/s]
 32%|      | 25/79 [00:01<00:04, 11.59it/s]
 35%|      | 28/79 [00:01<00:03, 13.88it/s]
 39%|      | 31/79 [00:02<00:02, 16.09it/s]
 43%|     | 34/79 [00:02<00:02, 17.92it/s]
 47%|     | 37/79 [00:02<00:02, 19.68it/s]
 51%|     | 40/79 [00:02<00:01, 20.92it/s]
 54%|    | 43/79 [00:02<00:01, 22.10it/s]
 58%|    | 46/79 [00:02<00:01, 23.13it/s]
 62%|   | 49/79 [00:02<00:01, 23.72it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.56it/s]
 28%|       | 22/79 [00:01<00:05,  9.55it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 14.01it/s]
 39%|      | 31/79 [00:02<00:02, 16.14it/s]
 43%|     | 34/79 [00:02<00:02, 18.08it/s]
 47%|     | 37/79 [00:02<00:02, 19.77it/s]
 51%|     | 40/79 [00:02<00:01, 21.11it/s]
 54%|    | 43/79 [00:02<00:01, 22.09it/s]
 58%|    | 46/79 [00:02<00:01, 22.73it/s]
 62%|   | 49/79 [00:02<00:01, 23.44it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.42it/s]
 13%|        | 10/79 [00:01<00:20,  3.32it/s]
 16%|        | 13/79 [00:01<00:14,  4.48it/s]
 20%|        | 16/79 [00:01<00:10,  5.92it/s]
 24%|       | 19/79 [00:01<00:07,  7.70it/s]
 28%|       | 22/79 [00:01<00:05,  9.68it/s]
 32%|      | 25/79 [00:01<00:04, 11.81it/s]
 35%|      | 28/79 [00:01<00:03, 14.01it/s]
 39%|      | 31/79 [00:02<00:02, 16.12it/s]
 43%|     | 34/79 [00:02<00:02, 17.98it/s]
 47%|     | 37/79 [00:02<00:02, 19.37it/s]
 51%|     | 40/79 [00:02<00:01, 20.65it/s]
 54%|    | 43/79 [00:02<00:01, 21.83it/s]
 58%|    | 46/79 [00:02<00:01, 22.64it/s]
 62%|   | 49/79 [00:02<00:01, 23.34it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.33it/s]
 28%|       | 22/79 [00:01<00:06,  9.32it/s]
 32%|      | 25/79 [00:01<00:04, 11.50it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:02, 16.02it/s]
 43%|     | 34/79 [00:02<00:02, 18.08it/s]
 47%|     | 37/79 [00:02<00:02, 19.61it/s]
 51%|     | 40/79 [00:02<00:01, 21.25it/s]
 54%|    | 43/79 [00:02<00:01, 22.52it/s]
 58%|    | 46/79 [00:02<00:01, 23.40it/s]
 62%|   | 49/79 [00:02<00:01, 23.94it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.47it/s]
 28%|       | 22/79 [00:01<00:06,  9.47it/s]
 32%|      | 25/79 [00:01<00:04, 11.69it/s]
 35%|      | 28/79 [00:01<00:03, 13.95it/s]
 39%|      | 31/79 [00:02<00:02, 16.22it/s]
 43%|     | 34/79 [00:02<00:02, 18.12it/s]
 47%|     | 37/79 [00:02<00:02, 19.83it/s]
 51%|     | 40/79 [00:02<00:01, 21.30it/s]
 54%|    | 43/79 [00:02<00:01, 22.43it/s]
 58%|    | 46/79 [00:02<00:01, 23.38it/s]
 62%|   | 49/79 [00:02<00:01, 24.07it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.45it/s]
 35%|      | 28/79 [00:01<00:03, 13.73it/s]
 39%|      | 31/79 [00:02<00:03, 15.89it/s]
 43%|     | 34/79 [00:02<00:02, 17.84it/s]
 47%|     | 37/79 [00:02<00:02, 19.59it/s]
 51%|     | 40/79 [00:02<00:01, 21.00it/s]
 54%|    | 43/79 [00:02<00:01, 22.15it/s]
 58%|    | 46/79 [00:02<00:01, 23.08it/s]
 62%|   | 49/79 [00:02<00:01, 24.06it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.97it/s]
 20%|        | 16/79 [00:01<00:11,  5.31it/s]
 24%|       | 19/79 [00:01<00:08,  6.98it/s]
 28%|       | 22/79 [00:01<00:06,  8.96it/s]
 32%|      | 25/79 [00:01<00:04, 11.13it/s]
 35%|      | 28/79 [00:01<00:03, 13.46it/s]
 39%|      | 31/79 [00:02<00:03, 15.65it/s]
 43%|     | 34/79 [00:02<00:02, 17.84it/s]
 47%|     | 37/79 [00:02<00:02, 19.57it/s]
 51%|     | 40/79 [00:02<00:01, 21.04it/s]
 54%|    | 43/79 [00:02<00:01, 22.49it/s]
 58%|    | 46/79 [00:02<00:01, 23.38it/s]
 62%|   | 49/79 [00:02<00:01, 23.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.45it/s]
 24%|       | 19/79 [00:01<00:08,  7.12it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.20it/s]
 35%|      | 28/79 [00:01<00:03, 13.47it/s]
 39%|      | 31/79 [00:02<00:03, 15.64it/s]
 43%|     | 34/79 [00:02<00:02, 17.65it/s]
 47%|     | 37/79 [00:02<00:02, 19.41it/s]
 51%|     | 40/79 [00:02<00:01, 20.95it/s]
 54%|    | 43/79 [00:02<00:01, 22.01it/s]
 58%|    | 46/79 [00:02<00:01, 22.94it/s]
 62%|   | 49/79 [00:02<00:01, 23.31it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.45it/s]
 24%|       | 19/79 [00:01<00:08,  7.12it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.23it/s]
 35%|      | 28/79 [00:01<00:03, 13.53it/s]
 39%|      | 31/79 [00:02<00:03, 15.68it/s]
 43%|     | 34/79 [00:02<00:02, 17.66it/s]
 47%|     | 37/79 [00:02<00:02, 19.41it/s]
 51%|     | 40/79 [00:02<00:01, 20.96it/s]
 54%|    | 43/79 [00:02<00:01, 22.25it/s]
 58%|    | 46/79 [00:02<00:01, 22.84it/s]
 62%|   | 49/79 [00:02<00:01, 23.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.45it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.52it/s]
 35%|      | 28/79 [00:01<00:03, 13.62it/s]
 39%|      | 31/79 [00:02<00:03, 15.68it/s]
 43%|     | 34/79 [00:02<00:02, 17.53it/s]
 47%|     | 37/79 [00:02<00:02, 19.31it/s]
 51%|     | 40/79 [00:02<00:01, 20.68it/s]
 54%|    | 43/79 [00:02<00:01, 21.62it/s]
 58%|    | 46/79 [00:02<00:01, 22.52it/s]
 62%|   | 49/79 [00:02<00:01, 23.18it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  4%|         | 3/79 [00:00<00:48,  1.57it/s]
  8%|         | 6/79 [00:01<00:33,  2.18it/s]
 11%|        | 9/79 [00:01<00:23,  2.99it/s]
 15%|        | 12/79 [00:01<00:16,  4.07it/s]
 19%|        | 15/79 [00:01<00:11,  5.44it/s]
 23%|       | 18/79 [00:01<00:08,  7.12it/s]
 27%|       | 21/79 [00:01<00:06,  9.05it/s]
 30%|       | 24/79 [00:01<00:04, 11.19it/s]
 34%|      | 27/79 [00:01<00:03, 13.41it/s]
 38%|      | 30/79 [00:02<00:03, 15.51it/s]
 42%|     | 33/79 [00:02<00:02, 17.47it/s]
 46%|     | 36/79 [00:02<00:02, 19.05it/s]
 49%|     | 39/79 [00:02<00:01, 20.50it/s]
 53%|    | 42/79 [00:02<00:01, 21.69it/s]
 57%|    | 45/79 [00:02<00:01, 22.63it/s]
 61%|    | 48/79 [00:02<00:01, 23.15it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.97it/s]
 20%|        | 16/79 [00:01<00:11,  5.32it/s]
 24%|       | 19/79 [00:01<00:08,  6.95it/s]
 28%|       | 22/79 [00:01<00:06,  8.91it/s]
 32%|      | 25/79 [00:01<00:04, 11.03it/s]
 35%|      | 28/79 [00:01<00:03, 13.38it/s]
 39%|      | 31/79 [00:02<00:03, 15.42it/s]
 43%|     | 34/79 [00:02<00:02, 17.39it/s]
 47%|     | 37/79 [00:02<00:02, 19.18it/s]
 51%|     | 40/79 [00:02<00:01, 20.82it/s]
 54%|    | 43/79 [00:02<00:01, 21.95it/s]
 58%|    | 46/79 [00:02<00:01, 22.59it/s]
 62%|   | 49/79 [00:02<00:01, 23.44it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  8.95it/s]
 32%|      | 25/79 [00:01<00:04, 11.07it/s]
 35%|      | 28/79 [00:02<00:03, 13.25it/s]
 39%|      | 31/79 [00:02<00:03, 15.39it/s]
 43%|     | 34/79 [00:02<00:02, 17.35it/s]
 47%|     | 37/79 [00:02<00:02, 19.06it/s]
 51%|     | 40/79 [00:02<00:01, 20.49it/s]
 54%|    | 43/79 [00:02<00:01, 21.79it/s]
 58%|    | 46/79 [00:02<00:01, 22.49it/s]
 62%|   | 49/79 [00:02<00:01, 23.01it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.12it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.18it/s]
 35%|      | 28/79 [00:01<00:03, 13.43it/s]
 39%|      | 31/79 [00:02<00:03, 15.50it/s]
 43%|     | 34/79 [00:02<00:02, 17.46it/s]
 47%|     | 37/79 [00:02<00:02, 18.75it/s]
 51%|     | 40/79 [00:02<00:01, 20.21it/s]
 54%|    | 43/79 [00:02<00:01, 21.44it/s]
 58%|    | 46/79 [00:02<00:01, 21.87it/s]
 62%|   | 49/79 [00:02<00:01, 20.78it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.01it/s]
 32%|      | 25/79 [00:01<00:04, 11.11it/s]
 35%|      | 28/79 [00:02<00:03, 13.33it/s]
 39%|      | 31/79 [00:02<00:03, 15.42it/s]
 43%|     | 34/79 [00:02<00:02, 17.23it/s]
 47%|     | 37/79 [00:02<00:02, 18.87it/s]
 51%|     | 40/79 [00:02<00:01, 20.23it/s]
 54%|    | 43/79 [00:02<00:01, 21.37it/s]
 58%|    | 46/79 [00:02<00:01, 22.15it/s]
 62%|   | 49/79 [00:02<00:01, 22.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  6.98it/s]
 28%|       | 22/79 [00:01<00:06,  8.88it/s]
 32%|      | 25/79 [00:01<00:04, 10.95it/s]
 35%|      | 28/79 [00:02<00:03, 13.14it/s]
 39%|      | 31/79 [00:02<00:03, 15.31it/s]
 43%|     | 34/79 [00:02<00:02, 17.23it/s]
 47%|     | 37/79 [00:02<00:02, 18.74it/s]
 51%|     | 40/79 [00:02<00:01, 20.14it/s]
 54%|    | 43/79 [00:02<00:01, 21.40it/s]
 58%|    | 46/79 [00:02<00:01, 22.37it/s]
 62%|   | 49/79 [00:02<00:01, 22.89it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.89it/s]
 20%|        | 16/79 [00:01<00:12,  5.20it/s]
 24%|       | 19/79 [00:01<00:08,  6.82it/s]
 28%|       | 22/79 [00:01<00:06,  8.74it/s]
 32%|      | 25/79 [00:01<00:04, 10.88it/s]
 35%|      | 28/79 [00:02<00:03, 13.05it/s]
 39%|      | 31/79 [00:02<00:03, 15.21it/s]
 43%|     | 34/79 [00:02<00:02, 17.20it/s]
 47%|     | 37/79 [00:02<00:02, 19.14it/s]
 51%|     | 40/79 [00:02<00:01, 20.42it/s]
 54%|    | 43/79 [00:02<00:01, 21.52it/s]
 58%|    | 46/79 [00:02<00:01, 22.04it/s]
 62%|   | 49/79 [00:02<00:01, 22.88it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:12,  5.23it/s]
 24%|       | 19/79 [00:01<00:08,  6.87it/s]
 28%|       | 22/79 [00:01<00:06,  8.74it/s]
 32%|      | 25/79 [00:01<00:04, 10.85it/s]
 35%|      | 28/79 [00:02<00:03, 13.02it/s]
 39%|      | 31/79 [00:02<00:03, 15.33it/s]
 43%|     | 34/79 [00:02<00:02, 17.15it/s]
 47%|     | 37/79 [00:02<00:02, 18.91it/s]
 51%|     | 40/79 [00:02<00:01, 20.41it/s]
 54%|    | 43/79 [00:02<00:01, 21.51it/s]
 58%|    | 46/79 [00:02<00:01, 22.05it/s]
 62%|   | 49/79 [00:02<00:01, 21.83it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.87it/s]
 20%|        | 16/79 [00:01<00:12,  5.18it/s]
 24%|       | 19/79 [00:01<00:08,  6.78it/s]
 28%|       | 22/79 [00:01<00:06,  8.63it/s]
 32%|      | 25/79 [00:01<00:05, 10.76it/s]
 35%|      | 28/79 [00:02<00:03, 12.91it/s]
 39%|      | 31/79 [00:02<00:03, 15.09it/s]
 43%|     | 34/79 [00:02<00:02, 17.26it/s]
 47%|     | 37/79 [00:02<00:02, 18.85it/s]
 51%|     | 40/79 [00:02<00:01, 20.29it/s]
 54%|    | 43/79 [00:02<00:01, 21.52it/s]
 58%|    | 46/79 [00:02<00:01, 22.58it/s]
 62%|   | 49/79 [00:02<00:01, 21.23it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.80it/s]
 16%|        | 13/79 [00:01<00:17,  3.82it/s]
 20%|        | 16/79 [00:01<00:12,  5.10it/s]
 24%|       | 19/79 [00:01<00:08,  6.70it/s]
 28%|       | 22/79 [00:01<00:06,  8.56it/s]
 32%|      | 25/79 [00:01<00:05, 10.67it/s]
 35%|      | 28/79 [00:02<00:03, 12.80it/s]
 39%|      | 31/79 [00:02<00:03, 15.02it/s]
 43%|     | 34/79 [00:02<00:02, 17.19it/s]
 47%|     | 37/79 [00:02<00:02, 18.86it/s]
 51%|     | 40/79 [00:02<00:01, 20.20it/s]
 54%|    | 43/79 [00:02<00:01, 21.43it/s]
 58%|    | 46/79 [00:02<00:01, 22.24it/s]
 62%|   | 49/79 [00:02<00:01, 22.88it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.36it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.92it/s]
 32%|      | 25/79 [00:01<00:04, 11.02it/s]
 35%|      | 28/79 [00:02<00:03, 13.24it/s]
 39%|      | 31/79 [00:02<00:03, 15.14it/s]
 43%|     | 34/79 [00:02<00:02, 17.02it/s]
 47%|     | 37/79 [00:02<00:02, 18.53it/s]
 51%|     | 40/79 [00:02<00:01, 19.98it/s]
 54%|    | 43/79 [00:02<00:01, 20.86it/s]
 58%|    | 46/79 [00:02<00:01, 21.75it/s]
 62%|   | 49/79 [00:02<00:01, 22.46it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:17,  3.87it/s]
 20%|        | 16/79 [00:01<00:12,  5.18it/s]
 24%|       | 19/79 [00:01<00:08,  6.81it/s]
 28%|       | 22/79 [00:01<00:06,  8.67it/s]
 32%|      | 25/79 [00:01<00:05, 10.68it/s]
 35%|      | 28/79 [00:02<00:03, 12.85it/s]
 39%|      | 31/79 [00:02<00:03, 14.98it/s]
 43%|     | 34/79 [00:02<00:02, 16.91it/s]
 47%|     | 37/79 [00:02<00:02, 18.44it/s]
 51%|     | 40/79 [00:02<00:01, 19.71it/s]
 54%|    | 43/79 [00:02<00:01, 20.80it/s]
 58%|    | 46/79 [00:02<00:01, 21.73it/s]
 62%|   | 49/79 [00:02<00:01, 22.35it/s]
 66%|   | 52/79 [00:03<00:01, 24.83it/s]
 70%|   | 55/79 [00:02<00:00, 25.15it/s]
 73%|  | 58/79 [00:03<00:00, 25.29it/s]
 77%|  | 61/79 [00:03<00:00, 25.74it/s]
 81%|  | 64/79 [00:03<00:00, 25.64it/s]
 85%| | 67/79 [00:03<00:00, 25.72it/s]
 89%| | 70/79 [00:03<00:00, 25.49it/s]
 92%|| 73/79 [00:03<00:00, 26.11it/s]
 96%|| 76/79 [00:03<00:00, 26.54it/s]
100%|| 79/79 [00:03<00:00, 27.28it/s]
, 24.93it/s]
 70%|   | 55/79 [00:02<00:00, 24.92it/s]
 73%|  | 58/79 [00:03<00:00, 25.50it/s]
 77%|  | 61/79 [00:03<00:00, 25.46it/s]
 81%|  | 64/79 [00:03<00:00, 25.91it/s]
 85%| | 67/79 [00:03<00:00, 26.02it/s]
 89%| | 70/79 [00:03<00:00, 26.30it/s]
 92%|| 73/79 [00:03<00:00, 26.62it/s]
 96%|| 76/79 [00:03<00:00, 27.10it/s]
100%|| 79/79 [00:03<00:00, 27.72it/s]
, 24.92it/s]
 70%|   | 55/79 [00:02<00:00, 25.36it/s]
 73%|  | 58/79 [00:03<00:00, 25.60it/s]
 77%|  | 61/79 [00:03<00:00, 25.54it/s]
 81%|  | 64/79 [00:03<00:00, 25.56it/s]
 85%| | 67/79 [00:03<00:00, 25.85it/s]
 89%| | 70/79 [00:03<00:00, 25.70it/s]
 92%|| 73/79 [00:03<00:00, 26.07it/s]
 96%|| 76/79 [00:03<00:00, 26.43it/s]
100%|| 79/79 [00:03<00:00, 27.35it/s]
, 24.43it/s]
 70%|   | 55/79 [00:02<00:00, 24.52it/s]
 73%|  | 58/79 [00:03<00:00, 25.00it/s]
 77%|  | 61/79 [00:03<00:00, 25.13it/s]
 81%|  | 64/79 [00:03<00:00, 25.37it/s]
 85%| | 67/79 [00:03<00:00, 25.64it/s]
 89%| | 70/79 [00:03<00:00, 25.39it/s]
 92%|| 73/79 [00:03<00:00, 25.82it/s]
 96%|| 76/79 [00:03<00:00, 26.41it/s]
100%|| 79/79 [00:03<00:00, 27.36it/s]
, 24.50it/s]
 70%|   | 55/79 [00:02<00:00, 24.85it/s]
 73%|  | 58/79 [00:03<00:00, 25.04it/s]
 77%|  | 61/79 [00:03<00:00, 25.33it/s]
 81%|  | 64/79 [00:03<00:00, 25.18it/s]
 85%| | 67/79 [00:03<00:00, 25.77it/s]
 89%| | 70/79 [00:03<00:00, 25.27it/s]
 92%|| 73/79 [00:03<00:00, 25.51it/s]
 96%|| 76/79 [00:03<00:00, 25.97it/s]
100%|| 79/79 [00:03<00:00, 26.97it/s]
, 24.25it/s]
 70%|   | 55/79 [00:02<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 25.08it/s]
 77%|  | 61/79 [00:03<00:00, 25.14it/s]
 81%|  | 64/79 [00:03<00:00, 25.22it/s]
 85%| | 67/79 [00:03<00:00, 25.40it/s]
 89%| | 70/79 [00:03<00:00, 25.61it/s]
 92%|| 73/79 [00:03<00:00, 25.78it/s]
 96%|| 76/79 [00:03<00:00, 26.60it/s]
100%|| 79/79 [00:03<00:00, 27.52it/s]
, 24.29it/s]
 70%|   | 55/79 [00:02<00:00, 24.73it/s]
 73%|  | 58/79 [00:03<00:00, 24.83it/s]
 77%|  | 61/79 [00:03<00:00, 24.91it/s]
 81%|  | 64/79 [00:03<00:00, 25.13it/s]
 85%| | 67/79 [00:03<00:00, 25.20it/s]
 89%| | 70/79 [00:03<00:00, 24.74it/s]
 92%|| 73/79 [00:03<00:00, 25.35it/s]
 96%|| 76/79 [00:03<00:00, 26.17it/s]
100%|| 79/79 [00:03<00:00, 27.21it/s]
, 24.77it/s]
 70%|   | 55/79 [00:02<00:00, 24.96it/s]
 73%|  | 58/79 [00:03<00:00, 25.27it/s]
 77%|  | 61/79 [00:03<00:00, 25.33it/s]
 81%|  | 64/79 [00:03<00:00, 25.55it/s]
 85%| | 67/79 [00:03<00:00, 25.46it/s]
 89%| | 70/79 [00:03<00:00, 25.43it/s]
 92%|| 73/79 [00:03<00:00, 25.79it/s]
 96%|| 76/79 [00:03<00:00, 26.37it/s]
100%|| 79/79 [00:03<00:00, 27.12it/s]
, 24.33it/s]
 70%|   | 55/79 [00:02<00:00, 24.56it/s]
 73%|  | 58/79 [00:03<00:00, 24.90it/s]
 77%|  | 61/79 [00:03<00:00, 25.09it/s]
 81%|  | 64/79 [00:03<00:00, 25.04it/s]
 85%| | 67/79 [00:03<00:00, 25.28it/s]
 89%| | 70/79 [00:03<00:00, 25.35it/s]
 92%|| 73/79 [00:03<00:00, 25.65it/s]
 96%|| 76/79 [00:03<00:00, 26.17it/s]
100%|| 79/79 [00:03<00:00, 26.87it/s]
, 24.40it/s]
 70%|   | 55/79 [00:02<00:00, 24.59it/s]
 73%|  | 58/79 [00:03<00:00, 25.14it/s]
 77%|  | 61/79 [00:03<00:00, 25.49it/s]
 81%|  | 64/79 [00:03<00:00, 25.47it/s]
 85%| | 67/79 [00:03<00:00, 25.60it/s]
 89%| | 70/79 [00:03<00:00, 25.69it/s]
 92%|| 73/79 [00:03<00:00, 26.00it/s]
 96%|| 76/79 [00:03<00:00, 27.02it/s]
100%|| 79/79 [00:03<00:00, 27.33it/s]
, 24.19it/s]
 70%|   | 55/79 [00:02<00:00, 24.61it/s]
 73%|  | 58/79 [00:03<00:00, 24.82it/s]
 77%|  | 61/79 [00:03<00:00, 24.65it/s]
 81%|  | 64/79 [00:03<00:00, 24.84it/s]
 85%| | 67/79 [00:03<00:00, 25.16it/s]
 89%| | 70/79 [00:03<00:00, 24.88it/s]
 92%|| 73/79 [00:03<00:00, 25.37it/s]
 96%|| 76/79 [00:03<00:00, 26.00it/s]
100%|| 79/79 [00:03<00:00, 26.90it/s]
, 23.96it/s]
 70%|   | 55/79 [00:02<00:00, 24.33it/s]
 73%|  | 58/79 [00:03<00:00, 24.58it/s]
 77%|  | 61/79 [00:03<00:00, 24.83it/s]
 81%|  | 64/79 [00:03<00:00, 25.03it/s]
 85%| | 67/79 [00:03<00:00, 24.98it/s]
 89%| | 70/79 [00:03<00:00, 25.03it/s]
 92%|| 73/79 [00:03<00:00, 25.51it/s]
 96%|| 76/79 [00:03<00:00, 26.22it/s]
100%|| 79/79 [00:03<00:00, 27.21it/s]
/s]
 67%|   | 53/79 [00:02<00:01, 24.61it/s]
 71%|   | 56/79 [00:03<00:00, 24.91it/s]
 75%|  | 59/79 [00:03<00:00, 25.27it/s]
 78%|  | 62/79 [00:03<00:00, 25.57it/s]
 82%| | 65/79 [00:03<00:00, 25.42it/s]
 86%| | 68/79 [00:03<00:00, 25.49it/s]
 90%| | 71/79 [00:03<00:00, 25.32it/s]
 94%|| 74/79 [00:03<00:00, 26.07it/s]
 97%|| 77/79 [00:03<00:00, 26.56it/s]
100%|| 79/79 [00:03<00:00, 19.93it/s]
, 24.38it/s]
 70%|   | 55/79 [00:02<00:00, 24.52it/s]
 73%|  | 58/79 [00:03<00:00, 24.93it/s]
 77%|  | 61/79 [00:03<00:00, 24.69it/s]
 81%|  | 64/79 [00:03<00:00, 24.14it/s]
 85%| | 67/79 [00:03<00:00, 24.46it/s]
 89%| | 70/79 [00:03<00:00, 24.85it/s]
 92%|| 73/79 [00:03<00:00, 24.98it/s]
 96%|| 76/79 [00:03<00:00, 25.84it/s]
100%|| 79/79 [00:03<00:00, 26.70it/s]
, 24.36it/s]
 70%|   | 55/79 [00:03<00:00, 24.74it/s]
 73%|  | 58/79 [00:03<00:00, 25.23it/s]
 77%|  | 61/79 [00:03<00:00, 24.93it/s]
 81%|  | 64/79 [00:03<00:00, 24.88it/s]
 85%| | 67/79 [00:03<00:00, 25.03it/s]
 89%| | 70/79 [00:03<00:00, 25.13it/s]
 92%|| 73/79 [00:03<00:00, 25.48it/s]
 96%|| 76/79 [00:03<00:00, 25.99it/s]
100%|| 79/79 [00:03<00:00, 26.91it/s]
, 24.47it/s]
 70%|   | 55/79 [00:03<00:00, 24.87it/s]
 73%|  | 58/79 [00:03<00:00, 25.08it/s]
 77%|  | 61/79 [00:03<00:00, 25.44it/s]
 81%|  | 64/79 [00:03<00:00, 25.56it/s]
 85%| | 67/79 [00:03<00:00, 25.87it/s]
 89%| | 70/79 [00:03<00:00, 25.96it/s]
 92%|| 73/79 [00:03<00:00, 26.16it/s]
 96%|| 76/79 [00:03<00:00, 26.61it/s]
100%|| 79/79 [00:03<00:00, 27.51it/s]
, 23.74it/s]
 70%|   | 55/79 [00:03<00:00, 24.29it/s]
 73%|  | 58/79 [00:03<00:00, 24.68it/s]
 77%|  | 61/79 [00:03<00:00, 24.61it/s]
 81%|  | 64/79 [00:03<00:00, 24.75it/s]
 85%| | 67/79 [00:03<00:00, 24.88it/s]
 89%| | 70/79 [00:03<00:00, 25.11it/s]
 92%|| 73/79 [00:03<00:00, 25.33it/s]
 96%|| 76/79 [00:03<00:00, 25.97it/s]
100%|| 79/79 [00:03<00:00, 26.92it/s]
, 24.13it/s]
 70%|   | 55/79 [00:03<00:00, 24.47it/s]
 73%|  | 58/79 [00:03<00:00, 24.87it/s]
 77%|  | 61/79 [00:03<00:00, 25.23it/s]
 81%|  | 64/79 [00:03<00:00, 24.88it/s]
 85%| | 67/79 [00:03<00:00, 25.12it/s]
 89%| | 70/79 [00:03<00:00, 25.22it/s]
 92%|| 73/79 [00:03<00:00, 25.49it/s]
 96%|| 76/79 [00:03<00:00, 26.11it/s]
100%|| 79/79 [00:03<00:00, 26.91it/s]
, 23.81it/s]
 70%|   | 55/79 [00:03<00:00, 24.30it/s]
 73%|  | 58/79 [00:03<00:00, 24.47it/s]
 77%|  | 61/79 [00:03<00:00, 24.60it/s]
 81%|  | 64/79 [00:03<00:00, 24.75it/s]
 85%| | 67/79 [00:03<00:00, 24.86it/s]
 89%| | 70/79 [00:03<00:00, 24.80it/s]
 92%|| 73/79 [00:03<00:00, 25.16it/s]
 96%|| 76/79 [00:03<00:00, 25.94it/s]
100%|| 79/79 [00:03<00:00, 26.98it/s]
, 24.07it/s]
 70%|   | 55/79 [00:03<00:00, 24.06it/s]
 73%|  | 58/79 [00:03<00:00, 24.15it/s]
 77%|  | 61/79 [00:03<00:00, 24.35it/s]
 81%|  | 64/79 [00:03<00:00, 24.68it/s]
 85%| | 67/79 [00:03<00:00, 24.78it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 24.97it/s]
 96%|| 76/79 [00:03<00:00, 26.01it/s]
100%|| 79/79 [00:04<00:00, 26.45it/s]
, 24.27it/s]
 70%|   | 55/79 [00:03<00:00, 24.74it/s]
 73%|  | 58/79 [00:03<00:00, 24.89it/s]
 77%|  | 61/79 [00:03<00:00, 25.26it/s]
 81%|  | 64/79 [00:03<00:00, 25.47it/s]
 85%| | 67/79 [00:03<00:00, 25.22it/s]
 89%| | 70/79 [00:03<00:00, 25.39it/s]
 92%|| 73/79 [00:03<00:00, 25.55it/s]
 96%|| 76/79 [00:03<00:00, 26.30it/s]
100%|| 79/79 [00:03<00:00, 27.08it/s]
, 21.82it/s]
 70%|   | 55/79 [00:03<00:01, 22.83it/s]
 73%|  | 58/79 [00:03<00:00, 23.40it/s]
 77%|  | 61/79 [00:03<00:00, 23.99it/s]
 81%|  | 64/79 [00:03<00:00, 24.20it/s]
 85%| | 67/79 [00:03<00:00, 24.65it/s]
 89%| | 70/79 [00:03<00:00, 24.48it/s]
 92%|| 73/79 [00:03<00:00, 25.12it/s]
 96%|| 76/79 [00:03<00:00, 25.92it/s]
100%|| 79/79 [00:04<00:00, 26.92it/s]
, 23.34it/s]
 70%|   | 55/79 [00:03<00:01, 23.83it/s]
 73%|  | 58/79 [00:03<00:00, 24.05it/s]
 77%|  | 61/79 [00:03<00:00, 24.31it/s]
 81%|  | 64/79 [00:03<00:00, 24.38it/s]
 85%| | 67/79 [00:03<00:00, 24.80it/s]
 89%| | 70/79 [00:03<00:00, 25.14it/s]
 92%|| 73/79 [00:03<00:00, 25.45it/s]
 96%|| 76/79 [00:03<00:00, 26.07it/s]
100%|| 79/79 [00:04<00:00, 26.95it/s]
69it/s]
 68%|   | 54/79 [00:03<00:01, 23.98it/s]
 72%|  | 57/79 [00:03<00:00, 24.27it/s]
 76%|  | 60/79 [00:03<00:00, 24.64it/s]
 80%|  | 63/79 [00:03<00:00, 24.73it/s]
 84%| | 66/79 [00:03<00:00, 24.93it/s]
 87%| | 69/79 [00:03<00:00, 25.09it/s]
 91%| | 72/79 [00:03<00:00, 24.86it/s]
 95%|| 75/79 [00:03<00:00, 25.57it/s]
 99%|| 78/79 [00:03<00:00, 26.00it/s]
100%|| 79/79 [00:04<00:00, 19.27it/s]
, 22.18it/s]
 70%|   | 55/79 [00:03<00:01, 22.74it/s]
 73%|  | 58/79 [00:03<00:00, 23.50it/s]
 77%|  | 61/79 [00:03<00:00, 23.94it/s]
 81%|  | 64/79 [00:03<00:00, 24.13it/s]
 85%| | 67/79 [00:03<00:00, 24.52it/s]
 89%| | 70/79 [00:03<00:00, 24.39it/s]
 92%|| 73/79 [00:03<00:00, 24.88it/s]
 96%|| 76/79 [00:03<00:00, 25.68it/s]
100%|| 79/79 [00:04<00:00, 26.66it/s]
, 23.46it/s]
 70%|   | 55/79 [00:03<00:01, 23.95it/s]
 73%|  | 58/79 [00:03<00:00, 24.05it/s]
 77%|  | 61/79 [00:03<00:00, 24.14it/s]
 81%|  | 64/79 [00:03<00:00, 24.51it/s]
 85%| | 67/79 [00:03<00:00, 24.61it/s]
 89%| | 70/79 [00:03<00:00, 24.11it/s]
 92%|| 73/79 [00:03<00:00, 24.68it/s]
 96%|| 76/79 [00:03<00:00, 25.43it/s]
100%|| 79/79 [00:04<00:00, 26.37it/s]
, 23.55it/s]
 70%|   | 55/79 [00:03<00:01, 23.48it/s]
 73%|  | 58/79 [00:03<00:00, 23.94it/s]
 77%|  | 61/79 [00:03<00:00, 24.36it/s]
 81%|  | 64/79 [00:03<00:00, 24.94it/s]
 85%| | 67/79 [00:03<00:00, 24.84it/s]
 89%| | 70/79 [00:03<00:00, 24.89it/s]
 92%|| 73/79 [00:03<00:00, 24.28it/s]
 96%|| 76/79 [00:03<00:00, 25.27it/s]
100%|| 79/79 [00:04<00:00, 26.03it/s]
, 23.02it/s]
 70%|   | 55/79 [00:03<00:01, 23.40it/s]
 73%|  | 58/79 [00:03<00:00, 23.64it/s]
 77%|  | 61/79 [00:03<00:00, 23.52it/s]
 81%|  | 64/79 [00:03<00:00, 23.71it/s]
 85%| | 67/79 [00:03<00:00, 23.90it/s]
 89%| | 70/79 [00:03<00:00, 24.11it/s]
 92%|| 73/79 [00:03<00:00, 24.48it/s]
 96%|| 76/79 [00:03<00:00, 25.19it/s]
100%|| 79/79 [00:04<00:00, 26.18it/s]
, 22.59it/s]
 70%|   | 55/79 [00:03<00:01, 23.06it/s]
 73%|  | 58/79 [00:03<00:00, 23.22it/s]
 77%|  | 61/79 [00:03<00:00, 23.42it/s]
 81%|  | 64/79 [00:03<00:00, 23.70it/s]
 85%| | 67/79 [00:03<00:00, 24.10it/s]
 89%| | 70/79 [00:03<00:00, 24.00it/s]
 92%|| 73/79 [00:03<00:00, 24.59it/s]
 96%|| 76/79 [00:04<00:00, 25.30it/s]
100%|| 79/79 [00:04<00:00, 26.22it/s]
, 22.68it/s]
 70%|   | 55/79 [00:03<00:01, 22.98it/s]
 73%|  | 58/79 [00:03<00:00, 23.49it/s]
 77%|  | 61/79 [00:03<00:00, 23.44it/s]
 81%|  | 64/79 [00:03<00:00, 23.88it/s]
 85%| | 67/79 [00:03<00:00, 23.93it/s]
 89%| | 70/79 [00:03<00:00, 24.04it/s]
 92%|| 73/79 [00:03<00:00, 24.53it/s]
 96%|| 76/79 [00:04<00:00, 25.35it/s]
100%|| 79/79 [00:04<00:00, 26.21it/s]
, 23.01it/s]
 70%|   | 55/79 [00:03<00:01, 23.60it/s]
 73%|  | 58/79 [00:03<00:00, 23.91it/s]
 77%|  | 61/79 [00:03<00:00, 24.15it/s]
 81%|  | 64/79 [00:03<00:00, 24.27it/s]
 85%| | 67/79 [00:03<00:00, 24.41it/s]
 89%| | 70/79 [00:03<00:00, 24.55it/s]
 92%|| 73/79 [00:03<00:00, 24.77it/s]
 96%|| 76/79 [00:03<00:00, 25.34it/s]
100%|| 79/79 [00:04<00:00, 26.05it/s]
, 22.79it/s]
 70%|   | 55/79 [00:03<00:01, 23.18it/s]
 73%|  | 58/79 [00:03<00:00, 23.55it/s]
 77%|  | 61/79 [00:03<00:00, 23.76it/s]
 81%|  | 64/79 [00:03<00:00, 23.59it/s]
 85%| | 67/79 [00:03<00:00, 23.75it/s]
 89%| | 70/79 [00:03<00:00, 23.76it/s]
 92%|| 73/79 [00:03<00:00, 24.34it/s]
 96%|| 76/79 [00:04<00:00, 25.14it/s]
100%|| 79/79 [00:04<00:00, 26.12it/s]
2020-06-23 16:26:36,859 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.233603 (0.027095062255859375 s / img per device, on 32 devices)
2020-06-23 16:26:36,881 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:26:36,881 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:26:36,901 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592954807251, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 5, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592954807252, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 5}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:26:48,545 maskrcnn_benchmark.trainer INFO: eta: 1:18:17  iter: 3680  loss: 0.6467 (0.8765)  loss_classifier: 0.2306 (0.3313)  loss_box_reg: 0.0887 (0.1372)  loss_mask: 0.2708 (0.3368)  loss_objectness: 0.0182 (0.0478)  loss_rpn_box_reg: 0.0091 (0.0234)  time: 0.1085 (0.1293)  data: 0.0015 (0.0207)  lr: 0.160000  max mem: 5079
2020-06-23 16:26:50,721 maskrcnn_benchmark.trainer INFO: eta: 1:18:11  iter: 3700  loss: 0.8434 (0.8764)  loss_classifier: 0.3139 (0.3313)  loss_box_reg: 0.1440 (0.1372)  loss_mask: 0.2984 (0.3367)  loss_objectness: 0.0323 (0.0478)  loss_rpn_box_reg: 0.0144 (0.0235)  time: 0.1086 (0.1292)  data: 0.0016 (0.0206)  lr: 0.160000  max mem: 5079
2020-06-23 16:26:52,869 maskrcnn_benchmark.trainer INFO: eta: 1:18:04  iter: 3720  loss: 0.7166 (0.8756)  loss_classifier: 0.2423 (0.3309)  loss_box_reg: 0.1137 (0.1372)  loss_mask: 0.2836 (0.3364)  loss_objectness: 0.0210 (0.0477)  loss_rpn_box_reg: 0.0089 (0.0234)  time: 0.1075 (0.1291)  data: 0.0015 (0.0205)  lr: 0.160000  max mem: 5079
2020-06-23 16:26:55,014 maskrcnn_benchmark.trainer INFO: eta: 1:17:57  iter: 3740  loss: 0.7358 (0.8747)  loss_classifier: 0.2393 (0.3305)  loss_box_reg: 0.1123 (0.1371)  loss_mask: 0.2990 (0.3362)  loss_objectness: 0.0270 (0.0476)  loss_rpn_box_reg: 0.0096 (0.0233)  time: 0.1073 (0.1290)  data: 0.0015 (0.0204)  lr: 0.160000  max mem: 5079
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.89s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:26:57,158 maskrcnn_benchmark.trainer INFO: eta: 1:17:50  iter: 3760  loss: 0.5911 (0.8737)  loss_classifier: 0.2244 (0.3301)  loss_box_reg: 0.0961 (0.1370)  loss_mask: 0.2838 (0.3358)  loss_objectness: 0.0181 (0.0475)  loss_rpn_box_reg: 0.0097 (0.0233)  time: 0.1065 (0.1289)  data: 0.0015 (0.0203)  lr: 0.160000  max mem: 5079
DONE (t=1.78s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.25368
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.44961
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.26073
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.14039
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.27766
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.32564
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.24184
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.39329
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.41486
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24911
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.44757
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.51220
2020-06-23 16:26:59,318 maskrcnn_benchmark.trainer INFO: eta: 1:17:44  iter: 3780  loss: 0.6897 (0.8725)  loss_classifier: 0.2552 (0.3296)  loss_box_reg: 0.0974 (0.1368)  loss_mask: 0.2636 (0.3354)  loss_objectness: 0.0161 (0.0474)  loss_rpn_box_reg: 0.0145 (0.0233)  time: 0.1073 (0.1288)  data: 0.0015 (0.0202)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:01,462 maskrcnn_benchmark.trainer INFO: eta: 1:17:37  iter: 3800  loss: 0.6875 (0.8717)  loss_classifier: 0.2141 (0.3292)  loss_box_reg: 0.1279 (0.1367)  loss_mask: 0.2782 (0.3351)  loss_objectness: 0.0302 (0.0474)  loss_rpn_box_reg: 0.0129 (0.0233)  time: 0.1074 (0.1287)  data: 0.0015 (0.0201)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:03,631 maskrcnn_benchmark.trainer INFO: eta: 1:17:31  iter: 3820  loss: 0.7718 (0.8709)  loss_classifier: 0.2418 (0.3289)  loss_box_reg: 0.1103 (0.1366)  loss_mask: 0.2726 (0.3348)  loss_objectness: 0.0208 (0.0473)  loss_rpn_box_reg: 0.0089 (0.0233)  time: 0.1081 (0.1286)  data: 0.0015 (0.0200)  lr: 0.160000  max mem: 5079
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:27:05,811 maskrcnn_benchmark.trainer INFO: eta: 1:17:24  iter: 3840  loss: 0.6923 (0.8699)  loss_classifier: 0.2658 (0.3285)  loss_box_reg: 0.1071 (0.1365)  loss_mask: 0.2815 (0.3345)  loss_objectness: 0.0199 (0.0472)  loss_rpn_box_reg: 0.0078 (0.0232)  time: 0.1084 (0.1285)  data: 0.0015 (0.0199)  lr: 0.160000  max mem: 5079
DONE (t=2.30s)
2020-06-23 16:27:07,957 maskrcnn_benchmark.trainer INFO: eta: 1:17:18  iter: 3860  loss: 0.6203 (0.8691)  loss_classifier: 0.2375 (0.3281)  loss_box_reg: 0.0906 (0.1363)  loss_mask: 0.2561 (0.3342)  loss_objectness: 0.0228 (0.0472)  loss_rpn_box_reg: 0.0077 (0.0232)  time: 0.1067 (0.1283)  data: 0.0015 (0.0198)  lr: 0.160000  max mem: 5079
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:27:10,112 maskrcnn_benchmark.trainer INFO: eta: 1:17:11  iter: 3880  loss: 0.6185 (0.8679)  loss_classifier: 0.2261 (0.3276)  loss_box_reg: 0.0973 (0.1362)  loss_mask: 0.2609 (0.3339)  loss_objectness: 0.0135 (0.0470)  loss_rpn_box_reg: 0.0071 (0.0232)  time: 0.1073 (0.1282)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5079
DONE (t=2.93s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.24507
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.42523
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.25207
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.09949
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.26516
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.36185
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.23696
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.36918
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.38686
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21206
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.42127
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49612
2020-06-23 16:27:11,492 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.2536810365280514, segm mAP: 0.2450716196894732
:::MLLOG {"namespace": "", "time_ms": 1592954831492, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.2536810365280514, "SEGM": 0.2450716196894732}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1592954831493, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 4}}
2020-06-23 16:27:12,465 maskrcnn_benchmark.trainer INFO: eta: 1:17:07  iter: 3900  loss: 0.6187 (0.8669)  loss_classifier: 0.1969 (0.3271)  loss_box_reg: 0.0911 (0.1360)  loss_mask: 0.2780 (0.3337)  loss_objectness: 0.0196 (0.0470)  loss_rpn_box_reg: 0.0092 (0.0231)  time: 0.1084 (0.1282)  data: 0.0015 (0.0196)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:14,628 maskrcnn_benchmark.trainer INFO: eta: 1:17:01  iter: 3920  loss: 0.6953 (0.8663)  loss_classifier: 0.2671 (0.3269)  loss_box_reg: 0.1098 (0.1359)  loss_mask: 0.2638 (0.3334)  loss_objectness: 0.0266 (0.0469)  loss_rpn_box_reg: 0.0124 (0.0231)  time: 0.1071 (0.1281)  data: 0.0014 (0.0195)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:16,777 maskrcnn_benchmark.trainer INFO: eta: 1:16:54  iter: 3940  loss: 0.7325 (0.8656)  loss_classifier: 0.2889 (0.3266)  loss_box_reg: 0.1159 (0.1358)  loss_mask: 0.2795 (0.3331)  loss_objectness: 0.0256 (0.0469)  loss_rpn_box_reg: 0.0109 (0.0231)  time: 0.1078 (0.1280)  data: 0.0014 (0.0194)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:18,920 maskrcnn_benchmark.trainer INFO: eta: 1:16:48  iter: 3960  loss: 0.7180 (0.8651)  loss_classifier: 0.2675 (0.3264)  loss_box_reg: 0.1144 (0.1358)  loss_mask: 0.2966 (0.3329)  loss_objectness: 0.0223 (0.0468)  loss_rpn_box_reg: 0.0113 (0.0231)  time: 0.1066 (0.1279)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:21,083 maskrcnn_benchmark.trainer INFO: eta: 1:16:42  iter: 3980  loss: 0.6995 (0.8641)  loss_classifier: 0.2311 (0.3260)  loss_box_reg: 0.1012 (0.1356)  loss_mask: 0.2560 (0.3326)  loss_objectness: 0.0313 (0.0468)  loss_rpn_box_reg: 0.0123 (0.0231)  time: 0.1080 (0.1278)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:23,233 maskrcnn_benchmark.trainer INFO: eta: 1:16:36  iter: 4000  loss: 0.6794 (0.8634)  loss_classifier: 0.2480 (0.3257)  loss_box_reg: 0.1066 (0.1356)  loss_mask: 0.2819 (0.3323)  loss_objectness: 0.0272 (0.0467)  loss_rpn_box_reg: 0.0163 (0.0231)  time: 0.1070 (0.1277)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:25,388 maskrcnn_benchmark.trainer INFO: eta: 1:16:29  iter: 4020  loss: 0.8068 (0.8631)  loss_classifier: 0.2878 (0.3256)  loss_box_reg: 0.1359 (0.1356)  loss_mask: 0.2922 (0.3321)  loss_objectness: 0.0267 (0.0467)  loss_rpn_box_reg: 0.0121 (0.0231)  time: 0.1074 (0.1276)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:27,555 maskrcnn_benchmark.trainer INFO: eta: 1:16:23  iter: 4040  loss: 0.6536 (0.8625)  loss_classifier: 0.2499 (0.3254)  loss_box_reg: 0.1208 (0.1355)  loss_mask: 0.2904 (0.3319)  loss_objectness: 0.0253 (0.0466)  loss_rpn_box_reg: 0.0121 (0.0231)  time: 0.1076 (0.1275)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:29,694 maskrcnn_benchmark.trainer INFO: eta: 1:16:17  iter: 4060  loss: 0.6715 (0.8618)  loss_classifier: 0.2651 (0.3251)  loss_box_reg: 0.1207 (0.1355)  loss_mask: 0.2828 (0.3316)  loss_objectness: 0.0234 (0.0465)  loss_rpn_box_reg: 0.0087 (0.0231)  time: 0.1071 (0.1274)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:31,856 maskrcnn_benchmark.trainer INFO: eta: 1:16:11  iter: 4080  loss: 0.6997 (0.8610)  loss_classifier: 0.2617 (0.3247)  loss_box_reg: 0.1193 (0.1354)  loss_mask: 0.2516 (0.3313)  loss_objectness: 0.0326 (0.0465)  loss_rpn_box_reg: 0.0106 (0.0231)  time: 0.1077 (0.1273)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:33,996 maskrcnn_benchmark.trainer INFO: eta: 1:16:05  iter: 4100  loss: 0.6370 (0.8604)  loss_classifier: 0.2626 (0.3245)  loss_box_reg: 0.1050 (0.1353)  loss_mask: 0.2762 (0.3311)  loss_objectness: 0.0266 (0.0465)  loss_rpn_box_reg: 0.0122 (0.0231)  time: 0.1068 (0.1272)  data: 0.0013 (0.0187)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:36,163 maskrcnn_benchmark.trainer INFO: eta: 1:15:59  iter: 4120  loss: 0.7600 (0.8598)  loss_classifier: 0.2557 (0.3242)  loss_box_reg: 0.1156 (0.1352)  loss_mask: 0.2886 (0.3309)  loss_objectness: 0.0247 (0.0464)  loss_rpn_box_reg: 0.0096 (0.0230)  time: 0.1081 (0.1271)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:38,325 maskrcnn_benchmark.trainer INFO: eta: 1:15:54  iter: 4140  loss: 0.6606 (0.8591)  loss_classifier: 0.2303 (0.3238)  loss_box_reg: 0.1075 (0.1351)  loss_mask: 0.2923 (0.3308)  loss_objectness: 0.0190 (0.0463)  loss_rpn_box_reg: 0.0070 (0.0230)  time: 0.1072 (0.1270)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:40,481 maskrcnn_benchmark.trainer INFO: eta: 1:15:48  iter: 4160  loss: 0.6836 (0.8582)  loss_classifier: 0.2505 (0.3234)  loss_box_reg: 0.1093 (0.1350)  loss_mask: 0.2716 (0.3306)  loss_objectness: 0.0168 (0.0462)  loss_rpn_box_reg: 0.0070 (0.0230)  time: 0.1072 (0.1269)  data: 0.0013 (0.0185)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:42,662 maskrcnn_benchmark.trainer INFO: eta: 1:15:42  iter: 4180  loss: 0.6382 (0.8575)  loss_classifier: 0.2175 (0.3230)  loss_box_reg: 0.0936 (0.1349)  loss_mask: 0.2849 (0.3304)  loss_objectness: 0.0268 (0.0462)  loss_rpn_box_reg: 0.0110 (0.0229)  time: 0.1090 (0.1268)  data: 0.0013 (0.0184)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:44,794 maskrcnn_benchmark.trainer INFO: eta: 1:15:36  iter: 4200  loss: 0.7247 (0.8568)  loss_classifier: 0.2373 (0.3227)  loss_box_reg: 0.1066 (0.1349)  loss_mask: 0.2841 (0.3302)  loss_objectness: 0.0275 (0.0461)  loss_rpn_box_reg: 0.0115 (0.0229)  time: 0.1060 (0.1267)  data: 0.0013 (0.0183)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:46,967 maskrcnn_benchmark.trainer INFO: eta: 1:15:31  iter: 4220  loss: 0.6395 (0.8560)  loss_classifier: 0.2243 (0.3223)  loss_box_reg: 0.1056 (0.1348)  loss_mask: 0.2909 (0.3299)  loss_objectness: 0.0237 (0.0461)  loss_rpn_box_reg: 0.0107 (0.0229)  time: 0.1085 (0.1266)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:49,117 maskrcnn_benchmark.trainer INFO: eta: 1:15:25  iter: 4240  loss: 0.7926 (0.8556)  loss_classifier: 0.2970 (0.3222)  loss_box_reg: 0.1159 (0.1348)  loss_mask: 0.2952 (0.3297)  loss_objectness: 0.0234 (0.0460)  loss_rpn_box_reg: 0.0113 (0.0229)  time: 0.1080 (0.1265)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:51,294 maskrcnn_benchmark.trainer INFO: eta: 1:15:19  iter: 4260  loss: 0.6657 (0.8550)  loss_classifier: 0.2277 (0.3219)  loss_box_reg: 0.1033 (0.1347)  loss_mask: 0.2955 (0.3296)  loss_objectness: 0.0234 (0.0460)  loss_rpn_box_reg: 0.0093 (0.0229)  time: 0.1080 (0.1265)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:53,439 maskrcnn_benchmark.trainer INFO: eta: 1:15:14  iter: 4280  loss: 0.5380 (0.8540)  loss_classifier: 0.1662 (0.3214)  loss_box_reg: 0.0844 (0.1345)  loss_mask: 0.2572 (0.3293)  loss_objectness: 0.0194 (0.0459)  loss_rpn_box_reg: 0.0125 (0.0229)  time: 0.1068 (0.1264)  data: 0.0013 (0.0180)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:55,590 maskrcnn_benchmark.trainer INFO: eta: 1:15:08  iter: 4300  loss: 0.6890 (0.8535)  loss_classifier: 0.2273 (0.3211)  loss_box_reg: 0.1166 (0.1345)  loss_mask: 0.2910 (0.3291)  loss_objectness: 0.0199 (0.0459)  loss_rpn_box_reg: 0.0113 (0.0229)  time: 0.1067 (0.1263)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:57,729 maskrcnn_benchmark.trainer INFO: eta: 1:15:02  iter: 4320  loss: 0.6201 (0.8523)  loss_classifier: 0.1899 (0.3205)  loss_box_reg: 0.0926 (0.1343)  loss_mask: 0.2765 (0.3289)  loss_objectness: 0.0185 (0.0458)  loss_rpn_box_reg: 0.0070 (0.0229)  time: 0.1067 (0.1262)  data: 0.0013 (0.0178)  lr: 0.160000  max mem: 5079
2020-06-23 16:27:59,860 maskrcnn_benchmark.trainer INFO: eta: 1:14:56  iter: 4340  loss: 0.6750 (0.8516)  loss_classifier: 0.2040 (0.3201)  loss_box_reg: 0.1205 (0.1342)  loss_mask: 0.2810 (0.3287)  loss_objectness: 0.0210 (0.0457)  loss_rpn_box_reg: 0.0118 (0.0229)  time: 0.1071 (0.1261)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5079
2020-06-23 16:28:02,010 maskrcnn_benchmark.trainer INFO: eta: 1:14:51  iter: 4360  loss: 0.7477 (0.8511)  loss_classifier: 0.2595 (0.3199)  loss_box_reg: 0.1132 (0.1342)  loss_mask: 0.3066 (0.3286)  loss_objectness: 0.0207 (0.0456)  loss_rpn_box_reg: 0.0096 (0.0229)  time: 0.1070 (0.1260)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5079
2020-06-23 16:28:04,175 maskrcnn_benchmark.trainer INFO: eta: 1:14:45  iter: 4380  loss: 0.8368 (0.8509)  loss_classifier: 0.2971 (0.3198)  loss_box_reg: 0.1410 (0.1342)  loss_mask: 0.2955 (0.3284)  loss_objectness: 0.0346 (0.0456)  loss_rpn_box_reg: 0.0175 (0.0229)  time: 0.1070 (0.1259)  data: 0.0015 (0.0176)  lr: 0.160000  max mem: 5079
2020-06-23 16:28:06,328 maskrcnn_benchmark.trainer INFO: eta: 1:14:40  iter: 4400  loss: 0.6965 (0.8503)  loss_classifier: 0.2440 (0.3195)  loss_box_reg: 0.1066 (0.1341)  loss_mask: 0.2658 (0.3282)  loss_objectness: 0.0266 (0.0456)  loss_rpn_box_reg: 0.0112 (0.0229)  time: 0.1077 (0.1259)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5079
2020-06-23 16:28:08,497 maskrcnn_benchmark.trainer INFO: eta: 1:14:35  iter: 4420  loss: 0.6690 (0.8496)  loss_classifier: 0.2736 (0.3192)  loss_box_reg: 0.0981 (0.1340)  loss_mask: 0.2797 (0.3279)  loss_objectness: 0.0264 (0.0456)  loss_rpn_box_reg: 0.0101 (0.0229)  time: 0.1078 (0.1258)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5079
2020-06-23 16:28:10,651 maskrcnn_benchmark.trainer INFO: eta: 1:14:29  iter: 4440  loss: 0.7132 (0.8491)  loss_classifier: 0.2314 (0.3189)  loss_box_reg: 0.1002 (0.1340)  loss_mask: 0.2927 (0.3278)  loss_objectness: 0.0244 (0.0455)  loss_rpn_box_reg: 0.0140 (0.0229)  time: 0.1073 (0.1257)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5079
2020-06-23 16:28:12,808 maskrcnn_benchmark.trainer INFO: eta: 1:14:24  iter: 4460  loss: 0.6469 (0.8484)  loss_classifier: 0.2340 (0.3187)  loss_box_reg: 0.1066 (0.1339)  loss_mask: 0.2592 (0.3275)  loss_objectness: 0.0305 (0.0454)  loss_rpn_box_reg: 0.0112 (0.0229)  time: 0.1063 (0.1256)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5079
2020-06-23 16:28:14,963 maskrcnn_benchmark.trainer INFO: eta: 1:14:19  iter: 4480  loss: 0.6845 (0.8477)  loss_classifier: 0.2298 (0.3183)  loss_box_reg: 0.1110 (0.1338)  loss_mask: 0.3054 (0.3273)  loss_objectness: 0.0240 (0.0454)  loss_rpn_box_reg: 0.0117 (0.0229)  time: 0.1067 (0.1255)  data: 0.0015 (0.0173)  lr: 0.160000  max mem: 5079
2020-06-23 16:28:17,130 maskrcnn_benchmark.trainer INFO: eta: 1:14:13  iter: 4500  loss: 0.6213 (0.8470)  loss_classifier: 0.2387 (0.3180)  loss_box_reg: 0.0886 (0.1337)  loss_mask: 0.2608 (0.3271)  loss_objectness: 0.0260 (0.0454)  loss_rpn_box_reg: 0.0085 (0.0228)  time: 0.1083 (0.1255)  data: 0.0015 (0.0172)  lr: 0.160000  max mem: 5079
2020-06-23 16:28:19,294 maskrcnn_benchmark.trainer INFO: eta: 1:14:08  iter: 4520  loss: 0.7844 (0.8465)  loss_classifier: 0.2749 (0.3178)  loss_box_reg: 0.1262 (0.1337)  loss_mask: 0.2831 (0.3269)  loss_objectness: 0.0241 (0.0453)  loss_rpn_box_reg: 0.0095 (0.0228)  time: 0.1082 (0.1254)  data: 0.0015 (0.0171)  lr: 0.160000  max mem: 5079
2020-06-23 16:28:21,461 maskrcnn_benchmark.trainer INFO: eta: 1:14:03  iter: 4540  loss: 0.7771 (0.8461)  loss_classifier: 0.2735 (0.3176)  loss_box_reg: 0.1260 (0.1337)  loss_mask: 0.2802 (0.3267)  loss_objectness: 0.0306 (0.0453)  loss_rpn_box_reg: 0.0132 (0.0228)  time: 0.1088 (0.1253)  data: 0.0015 (0.0170)  lr: 0.160000  max mem: 5079
2020-06-23 16:28:23,630 maskrcnn_benchmark.trainer INFO: eta: 1:13:58  iter: 4560  loss: 0.6423 (0.8456)  loss_classifier: 0.2442 (0.3174)  loss_box_reg: 0.1122 (0.1336)  loss_mask: 0.2797 (0.3266)  loss_objectness: 0.0297 (0.0453)  loss_rpn_box_reg: 0.0108 (0.0228)  time: 0.1077 (0.1252)  data: 0.0015 (0.0170)  lr: 0.160000  max mem: 5079
2020-06-23 16:28:25,782 maskrcnn_benchmark.trainer INFO: eta: 1:13:53  iter: 4580  loss: 0.6734 (0.8451)  loss_classifier: 0.2630 (0.3172)  loss_box_reg: 0.1097 (0.1336)  loss_mask: 0.2813 (0.3264)  loss_objectness: 0.0228 (0.0452)  loss_rpn_box_reg: 0.0090 (0.0227)  time: 0.1067 (0.1252)  data: 0.0015 (0.0169)  lr: 0.160000  max mem: 5079
:::MLLOG {"namespace": "", "time_ms": 1592954906314, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1592954906314, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1592954906314, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 5}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 16:28:26,537 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
index created!
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
2020-06-23 16:28:26,851 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:57,  1.35it/s]
  5%|         | 4/79 [00:00<00:39,  1.88it/s]
  9%|         | 7/79 [00:00<00:27,  2.60it/s]
 13%|        | 10/79 [00:01<00:19,  3.56it/s]
 16%|        | 13/79 [00:01<00:13,  4.79it/s]
 20%|        | 16/79 [00:01<00:09,  6.35it/s]
 24%|       | 19/79 [00:01<00:07,  8.21it/s]
 28%|       | 22/79 [00:01<00:05, 10.35it/s]
 32%|      | 25/79 [00:01<00:04, 12.60it/s]
 35%|      | 28/79 [00:01<00:03, 14.94it/s]
 39%|      | 31/79 [00:01<00:02, 17.16it/s]
 43%|     | 34/79 [00:02<00:02, 18.93it/s]
 47%|     | 37/79 [00:02<00:02, 20.58it/s]
 51%|     | 40/79 [00:02<00:01, 21.83it/s]
 54%|    | 43/79 [00:02<00:01, 22.88it/s]
 58%|    | 46/79 [00:02<00:01, 23.45it/s]
 62%|   | 49/79 [00:02<00:01, 24.01it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:58,  1.34it/s]
  5%|         | 4/79 [00:00<00:40,  1.86it/s]
  9%|         | 7/79 [00:00<00:27,  2.58it/s]
 13%|        | 10/79 [00:01<00:19,  3.53it/s]
 16%|        | 13/79 [00:01<00:13,  4.77it/s]
 20%|        | 16/79 [00:01<00:09,  6.32it/s]
 24%|       | 19/79 [00:01<00:07,  8.15it/s]
 28%|       | 22/79 [00:01<00:05, 10.29it/s]
 32%|      | 25/79 [00:01<00:04, 12.56it/s]
 35%|      | 28/79 [00:01<00:03, 14.81it/s]
 39%|      | 31/79 [00:01<00:02, 17.07it/s]
 43%|     | 34/79 [00:02<00:02, 19.00it/s]
 47%|     | 37/79 [00:02<00:02, 20.70it/s]
 51%|     | 40/79 [00:02<00:01, 21.98it/s]
 54%|    | 43/79 [00:02<00:01, 22.86it/s]
 58%|    | 46/79 [00:02<00:01, 23.68it/s]
 62%|   | 49/79 [00:02<00:01, 24.21it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.76it/s]
  9%|         | 7/79 [00:01<00:29,  2.45it/s]
 13%|        | 10/79 [00:01<00:20,  3.36it/s]
 16%|        | 13/79 [00:01<00:14,  4.55it/s]
 20%|        | 16/79 [00:01<00:10,  6.06it/s]
 24%|       | 19/79 [00:01<00:07,  7.85it/s]
 28%|       | 22/79 [00:01<00:05,  9.93it/s]
 32%|      | 25/79 [00:01<00:04, 12.26it/s]
 35%|      | 28/79 [00:01<00:03, 14.61it/s]
 39%|      | 31/79 [00:01<00:02, 16.88it/s]
 43%|     | 34/79 [00:02<00:02, 18.86it/s]
 47%|     | 37/79 [00:02<00:02, 20.57it/s]
 51%|     | 40/79 [00:02<00:01, 22.05it/s]
 54%|    | 43/79 [00:02<00:01, 23.16it/s]
 58%|    | 46/79 [00:02<00:01, 23.91it/s]
 62%|   | 49/79 [00:02<00:01, 24.47it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.27it/s]
 16%|        | 13/79 [00:01<00:14,  4.44it/s]
 20%|        | 16/79 [00:01<00:10,  5.90it/s]
 24%|       | 19/79 [00:01<00:07,  7.69it/s]
 28%|       | 22/79 [00:01<00:05,  9.78it/s]
 32%|      | 25/79 [00:01<00:04, 12.02it/s]
 35%|      | 28/79 [00:01<00:03, 14.31it/s]
 39%|      | 31/79 [00:01<00:02, 16.53it/s]
 43%|     | 34/79 [00:02<00:02, 18.62it/s]
 47%|     | 37/79 [00:02<00:02, 20.37it/s]
 51%|     | 40/79 [00:02<00:01, 21.81it/s]
 54%|    | 43/79 [00:02<00:01, 22.93it/s]
 58%|    | 46/79 [00:02<00:01, 23.64it/s]
 62%|   | 49/79 [00:02<00:01, 24.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.78it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:05,  9.56it/s]
 32%|      | 25/79 [00:01<00:04, 11.77it/s]
 35%|      | 28/79 [00:01<00:03, 14.12it/s]
 39%|      | 31/79 [00:02<00:02, 16.31it/s]
 43%|     | 34/79 [00:02<00:02, 18.20it/s]
 47%|     | 37/79 [00:02<00:02, 19.99it/s]
 51%|     | 40/79 [00:02<00:01, 21.35it/s]
 54%|    | 43/79 [00:02<00:01, 22.31it/s]
 58%|    | 46/79 [00:02<00:01, 23.31it/s]
 62%|   | 49/79 [00:02<00:01, 24.30it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.82it/s]
 35%|      | 28/79 [00:01<00:03, 14.20it/s]
 39%|      | 31/79 [00:02<00:02, 16.47it/s]
 43%|     | 34/79 [00:02<00:02, 18.56it/s]
 47%|     | 37/79 [00:02<00:02, 20.19it/s]
 51%|     | 40/79 [00:02<00:01, 21.62it/s]
 54%|    | 43/79 [00:02<00:01, 22.89it/s]
 58%|    | 46/79 [00:02<00:01, 23.87it/s]
 62%|   | 49/79 [00:02<00:01, 24.55it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.53it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.79it/s]
 35%|      | 28/79 [00:01<00:03, 14.12it/s]
 39%|      | 31/79 [00:02<00:02, 16.35it/s]
 43%|     | 34/79 [00:02<00:02, 18.30it/s]
 47%|     | 37/79 [00:02<00:02, 20.03it/s]
 51%|     | 40/79 [00:02<00:01, 21.45it/s]
 54%|    | 43/79 [00:02<00:01, 22.61it/s]
 58%|    | 46/79 [00:02<00:01, 23.39it/s]
 62%|   | 49/79 [00:02<00:01, 23.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.36it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.60it/s]
 32%|      | 25/79 [00:01<00:04, 11.79it/s]
 35%|      | 28/79 [00:01<00:03, 14.11it/s]
 39%|      | 31/79 [00:02<00:02, 16.35it/s]
 43%|     | 34/79 [00:02<00:02, 18.29it/s]
 47%|     | 37/79 [00:02<00:02, 20.00it/s]
 51%|     | 40/79 [00:02<00:01, 21.52it/s]
 54%|    | 43/79 [00:02<00:01, 22.67it/s]
 58%|    | 46/79 [00:02<00:01, 23.69it/s]
 62%|   | 49/79 [00:02<00:01, 24.50it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.76it/s]
  9%|         | 7/79 [00:01<00:29,  2.44it/s]
 13%|        | 10/79 [00:01<00:20,  3.35it/s]
 16%|        | 13/79 [00:01<00:14,  4.53it/s]
 20%|        | 16/79 [00:01<00:10,  6.01it/s]
 24%|       | 19/79 [00:01<00:07,  7.81it/s]
 28%|       | 22/79 [00:01<00:05,  9.83it/s]
 32%|      | 25/79 [00:01<00:04, 12.06it/s]
 35%|      | 28/79 [00:01<00:03, 14.30it/s]
 39%|      | 31/79 [00:01<00:02, 16.53it/s]
 43%|     | 34/79 [00:02<00:02, 18.47it/s]
 47%|     | 37/79 [00:02<00:02, 20.18it/s]
 51%|     | 40/79 [00:02<00:01, 21.28it/s]
 54%|    | 43/79 [00:02<00:01, 22.56it/s]
 58%|    | 46/79 [00:02<00:01, 23.13it/s]
 62%|   | 49/79 [00:02<00:01, 23.58it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.43it/s]
 13%|        | 10/79 [00:01<00:20,  3.34it/s]
 16%|        | 13/79 [00:01<00:14,  4.52it/s]
 20%|        | 16/79 [00:01<00:10,  5.99it/s]
 24%|       | 19/79 [00:01<00:07,  7.78it/s]
 28%|       | 22/79 [00:01<00:05,  9.82it/s]
 32%|      | 25/79 [00:01<00:04, 12.05it/s]
 35%|      | 28/79 [00:01<00:03, 14.28it/s]
 39%|      | 31/79 [00:01<00:02, 16.41it/s]
 43%|     | 34/79 [00:02<00:02, 18.41it/s]
 47%|     | 37/79 [00:02<00:02, 19.85it/s]
 51%|     | 40/79 [00:02<00:01, 21.12it/s]
 54%|    | 43/79 [00:02<00:01, 22.32it/s]
 58%|    | 46/79 [00:02<00:01, 22.88it/s]
 62%|   | 49/79 [00:02<00:01, 23.65it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.84it/s]
 24%|       | 19/79 [00:01<00:07,  7.59it/s]
 28%|       | 22/79 [00:01<00:05,  9.64it/s]
 32%|      | 25/79 [00:01<00:04, 11.90it/s]
 35%|      | 28/79 [00:01<00:03, 14.20it/s]
 39%|      | 31/79 [00:02<00:02, 16.45it/s]
 43%|     | 34/79 [00:02<00:02, 18.45it/s]
 47%|     | 37/79 [00:02<00:02, 20.19it/s]
 51%|     | 40/79 [00:02<00:01, 21.53it/s]
 54%|    | 43/79 [00:02<00:01, 22.88it/s]
 58%|    | 46/79 [00:02<00:01, 23.72it/s]
 62%|   | 49/79 [00:02<00:01, 24.35it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:11,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.46it/s]
 28%|       | 22/79 [00:01<00:06,  9.41it/s]
 32%|      | 25/79 [00:01<00:04, 11.64it/s]
 35%|      | 28/79 [00:01<00:03, 13.88it/s]
 39%|      | 31/79 [00:02<00:02, 16.01it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.78it/s]
 51%|     | 40/79 [00:02<00:01, 21.18it/s]
 54%|    | 43/79 [00:02<00:01, 22.15it/s]
 58%|    | 46/79 [00:02<00:01, 23.02it/s]
 62%|   | 49/79 [00:02<00:01, 23.84it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.57it/s]
 32%|      | 25/79 [00:01<00:04, 11.76it/s]
 35%|      | 28/79 [00:01<00:03, 14.08it/s]
 39%|      | 31/79 [00:02<00:02, 16.43it/s]
 43%|     | 34/79 [00:02<00:02, 18.44it/s]
 47%|     | 37/79 [00:02<00:02, 20.28it/s]
 51%|     | 40/79 [00:02<00:01, 21.51it/s]
 54%|    | 43/79 [00:02<00:01, 22.74it/s]
 58%|    | 46/79 [00:02<00:01, 23.09it/s]
 62%|   | 49/79 [00:02<00:01, 23.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.69it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.41it/s]
 32%|      | 25/79 [00:01<00:04, 11.58it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:02, 16.07it/s]
 43%|     | 34/79 [00:02<00:02, 18.18it/s]
 47%|     | 37/79 [00:02<00:02, 19.81it/s]
 51%|     | 40/79 [00:02<00:01, 21.32it/s]
 54%|    | 43/79 [00:02<00:01, 22.39it/s]
 58%|    | 46/79 [00:02<00:01, 23.16it/s]
 62%|   | 49/79 [00:02<00:01, 23.71it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.33it/s]
 32%|      | 25/79 [00:01<00:04, 11.58it/s]
 35%|      | 28/79 [00:01<00:03, 13.85it/s]
 39%|      | 31/79 [00:02<00:03, 15.99it/s]
 43%|     | 34/79 [00:02<00:02, 18.10it/s]
 47%|     | 37/79 [00:02<00:02, 19.83it/s]
 51%|     | 40/79 [00:02<00:01, 21.32it/s]
 54%|    | 43/79 [00:02<00:01, 22.57it/s]
 58%|    | 46/79 [00:02<00:01, 23.47it/s]
 62%|   | 49/79 [00:02<00:01, 23.97it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.69it/s]
 24%|       | 19/79 [00:01<00:08,  7.43it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.65it/s]
 35%|      | 28/79 [00:01<00:03, 13.97it/s]
 39%|      | 31/79 [00:02<00:02, 16.21it/s]
 43%|     | 34/79 [00:02<00:02, 18.10it/s]
 47%|     | 37/79 [00:02<00:02, 19.84it/s]
 51%|     | 40/79 [00:02<00:01, 21.21it/s]
 54%|    | 43/79 [00:02<00:01, 22.24it/s]
 58%|    | 46/79 [00:02<00:01, 23.10it/s]
 62%|   | 49/79 [00:02<00:01, 23.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.34it/s]
 28%|       | 22/79 [00:01<00:06,  9.27it/s]
 32%|      | 25/79 [00:01<00:04, 11.52it/s]
 35%|      | 28/79 [00:01<00:03, 13.81it/s]
 39%|      | 31/79 [00:02<00:02, 16.12it/s]
 43%|     | 34/79 [00:02<00:02, 18.15it/s]
 47%|     | 37/79 [00:02<00:02, 19.99it/s]
 51%|     | 40/79 [00:02<00:01, 21.41it/s]
 54%|    | 43/79 [00:02<00:01, 22.56it/s]
 58%|    | 46/79 [00:02<00:01, 23.36it/s]
 62%|   | 49/79 [00:02<00:01, 23.80it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:11,  5.71it/s]
 24%|       | 19/79 [00:01<00:08,  7.42it/s]
 28%|       | 22/79 [00:01<00:06,  9.45it/s]
 32%|      | 25/79 [00:01<00:04, 11.60it/s]
 35%|      | 28/79 [00:01<00:03, 13.92it/s]
 39%|      | 31/79 [00:02<00:02, 16.01it/s]
 43%|     | 34/79 [00:02<00:02, 18.00it/s]
 47%|     | 37/79 [00:02<00:02, 19.69it/s]
 51%|     | 40/79 [00:02<00:01, 21.00it/s]
 54%|    | 43/79 [00:02<00:01, 22.17it/s]
 58%|    | 46/79 [00:02<00:01, 22.98it/s]
 62%|   | 49/79 [00:02<00:01, 23.82it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.45it/s]
 28%|       | 22/79 [00:01<00:06,  9.44it/s]
 32%|      | 25/79 [00:01<00:04, 11.63it/s]
 35%|      | 28/79 [00:01<00:03, 13.89it/s]
 39%|      | 31/79 [00:02<00:03, 15.98it/s]
 43%|     | 34/79 [00:02<00:02, 17.92it/s]
 47%|     | 37/79 [00:02<00:02, 19.68it/s]
 51%|     | 40/79 [00:02<00:01, 21.16it/s]
 54%|    | 43/79 [00:02<00:01, 22.14it/s]
 58%|    | 46/79 [00:02<00:01, 22.97it/s]
 62%|   | 49/79 [00:02<00:01, 23.93it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.42it/s]
 28%|       | 22/79 [00:01<00:06,  9.40it/s]
 32%|      | 25/79 [00:01<00:04, 11.56it/s]
 35%|      | 28/79 [00:01<00:03, 13.62it/s]
 39%|      | 31/79 [00:02<00:03, 15.69it/s]
 43%|     | 34/79 [00:02<00:02, 17.60it/s]
 47%|     | 37/79 [00:02<00:02, 19.42it/s]
 51%|     | 40/79 [00:02<00:01, 20.93it/s]
 54%|    | 43/79 [00:02<00:01, 22.01it/s]
 58%|    | 46/79 [00:02<00:01, 22.99it/s]
 62%|   | 49/79 [00:02<00:01, 23.97it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.25it/s]
 24%|       | 19/79 [00:01<00:08,  6.88it/s]
 28%|       | 22/79 [00:01<00:06,  8.83it/s]
 32%|      | 25/79 [00:01<00:04, 10.98it/s]
 35%|      | 28/79 [00:01<00:03, 13.29it/s]
 39%|      | 31/79 [00:02<00:03, 15.57it/s]
 43%|     | 34/79 [00:02<00:02, 17.86it/s]
 47%|     | 37/79 [00:02<00:02, 19.66it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 22.35it/s]
 58%|    | 46/79 [00:02<00:01, 23.46it/s]
 62%|   | 49/79 [00:02<00:01, 23.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.76it/s]
 24%|       | 19/79 [00:01<00:08,  7.46it/s]
 28%|       | 22/79 [00:01<00:06,  9.47it/s]
 32%|      | 25/79 [00:01<00:04, 11.68it/s]
 35%|      | 28/79 [00:01<00:03, 13.92it/s]
 39%|      | 31/79 [00:02<00:03, 15.98it/s]
 43%|     | 34/79 [00:02<00:02, 17.98it/s]
 47%|     | 37/79 [00:02<00:02, 19.64it/s]
 51%|     | 40/79 [00:02<00:01, 20.95it/s]
 54%|    | 43/79 [00:02<00:01, 22.03it/s]
 58%|    | 46/79 [00:02<00:01, 22.94it/s]
 62%|   | 49/79 [00:02<00:01, 23.69it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.14it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.67it/s]
 39%|      | 31/79 [00:02<00:03, 15.78it/s]
 43%|     | 34/79 [00:02<00:02, 17.89it/s]
 47%|     | 37/79 [00:02<00:02, 19.61it/s]
 51%|     | 40/79 [00:02<00:01, 20.88it/s]
 54%|    | 43/79 [00:02<00:01, 21.72it/s]
 58%|    | 46/79 [00:02<00:01, 22.68it/s]
 62%|   | 49/79 [00:02<00:01, 23.25it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.36it/s]
 24%|       | 19/79 [00:01<00:08,  7.02it/s]
 28%|       | 22/79 [00:01<00:06,  9.00it/s]
 32%|      | 25/79 [00:01<00:04, 11.11it/s]
 35%|      | 28/79 [00:01<00:03, 13.27it/s]
 39%|      | 31/79 [00:02<00:03, 15.55it/s]
 43%|     | 34/79 [00:02<00:02, 17.58it/s]
 47%|     | 37/79 [00:02<00:02, 19.49it/s]
 51%|     | 40/79 [00:02<00:01, 21.04it/s]
 54%|    | 43/79 [00:02<00:01, 21.95it/s]
 58%|    | 46/79 [00:02<00:01, 22.79it/s]
 62%|   | 49/79 [00:02<00:01, 23.34it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:11,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.45it/s]
 28%|       | 22/79 [00:01<00:06,  9.42it/s]
 32%|      | 25/79 [00:01<00:04, 11.65it/s]
 35%|      | 28/79 [00:01<00:03, 13.82it/s]
 39%|      | 31/79 [00:02<00:02, 16.03it/s]
 43%|     | 34/79 [00:02<00:02, 17.68it/s]
 47%|     | 37/79 [00:02<00:02, 19.48it/s]
 51%|     | 40/79 [00:02<00:01, 20.77it/s]
 54%|    | 43/79 [00:02<00:01, 21.86it/s]
 58%|    | 46/79 [00:02<00:01, 22.79it/s]
 62%|   | 49/79 [00:02<00:01, 23.14it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.39it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  8.95it/s]
 32%|      | 25/79 [00:01<00:04, 11.04it/s]
 35%|      | 28/79 [00:02<00:03, 13.22it/s]
 39%|      | 31/79 [00:02<00:03, 15.46it/s]
 43%|     | 34/79 [00:02<00:02, 17.42it/s]
 47%|     | 37/79 [00:02<00:02, 19.14it/s]
 51%|     | 40/79 [00:02<00:01, 20.37it/s]
 54%|    | 43/79 [00:02<00:01, 21.62it/s]
 58%|    | 46/79 [00:02<00:01, 22.49it/s]
 62%|   | 49/79 [00:02<00:01, 23.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  4%|         | 3/79 [00:01<00:49,  1.53it/s]
  8%|         | 6/79 [00:01<00:34,  2.13it/s]
 11%|        | 9/79 [00:01<00:23,  2.94it/s]
 15%|        | 12/79 [00:01<00:16,  3.99it/s]
 19%|        | 15/79 [00:01<00:11,  5.33it/s]
 23%|       | 18/79 [00:01<00:08,  7.00it/s]
 27%|       | 21/79 [00:01<00:06,  8.88it/s]
 30%|       | 24/79 [00:01<00:05, 10.99it/s]
 34%|      | 27/79 [00:02<00:03, 13.22it/s]
 38%|      | 30/79 [00:02<00:03, 15.33it/s]
 42%|     | 33/79 [00:02<00:02, 17.33it/s]
 46%|     | 36/79 [00:02<00:02, 18.70it/s]
 49%|     | 39/79 [00:02<00:01, 20.08it/s]
 53%|    | 42/79 [00:02<00:01, 21.26it/s]
 57%|    | 45/79 [00:02<00:01, 22.33it/s]
 61%|    | 48/79 [00:02<00:01, 22.78it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.85it/s]
 28%|       | 22/79 [00:01<00:06,  8.76it/s]
 32%|      | 25/79 [00:01<00:04, 10.91it/s]
 35%|      | 28/79 [00:02<00:03, 13.04it/s]
 39%|      | 31/79 [00:02<00:03, 15.29it/s]
 43%|     | 34/79 [00:02<00:02, 16.98it/s]
 47%|     | 37/79 [00:02<00:02, 18.78it/s]
 51%|     | 40/79 [00:02<00:01, 19.72it/s]
 54%|    | 43/79 [00:02<00:01, 21.05it/s]
 58%|    | 46/79 [00:02<00:01, 21.43it/s]
 62%|   | 49/79 [00:02<00:01, 22.14it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.01it/s]
  5%|         | 4/79 [00:01<00:52,  1.42it/s]
  9%|         | 7/79 [00:01<00:36,  1.98it/s]
 13%|        | 10/79 [00:01<00:25,  2.74it/s]
 16%|        | 13/79 [00:01<00:17,  3.74it/s]
 20%|        | 16/79 [00:01<00:12,  5.03it/s]
 24%|       | 19/79 [00:01<00:09,  6.60it/s]
 28%|       | 22/79 [00:01<00:06,  8.45it/s]
 32%|      | 25/79 [00:01<00:05, 10.60it/s]
 35%|      | 28/79 [00:02<00:04, 12.74it/s]
 39%|      | 31/79 [00:02<00:03, 14.92it/s]
 43%|     | 34/79 [00:02<00:02, 17.02it/s]
 47%|     | 37/79 [00:02<00:02, 18.88it/s]
 51%|     | 40/79 [00:02<00:01, 20.35it/s]
 54%|    | 43/79 [00:02<00:01, 21.47it/s]
 58%|    | 46/79 [00:02<00:01, 22.46it/s]
 62%|   | 49/79 [00:02<00:01, 23.29it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.23it/s]
 24%|       | 19/79 [00:01<00:08,  6.86it/s]
 28%|       | 22/79 [00:01<00:06,  8.74it/s]
 32%|      | 25/79 [00:01<00:04, 10.88it/s]
 35%|      | 28/79 [00:02<00:03, 13.01it/s]
 39%|      | 31/79 [00:02<00:03, 15.08it/s]
 43%|     | 34/79 [00:02<00:02, 17.03it/s]
 47%|     | 37/79 [00:02<00:02, 18.73it/s]
 51%|     | 40/79 [00:02<00:01, 20.06it/s]
 54%|    | 43/79 [00:02<00:01, 21.03it/s]
 58%|    | 46/79 [00:02<00:01, 22.04it/s]
 62%|   | 49/79 [00:02<00:01, 22.53it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:18,  1.01s/it]
  5%|         | 4/79 [00:01<00:54,  1.39it/s]
  9%|         | 7/79 [00:01<00:37,  1.93it/s]
 13%|        | 10/79 [00:01<00:25,  2.67it/s]
 16%|        | 13/79 [00:01<00:18,  3.65it/s]
 20%|        | 16/79 [00:01<00:12,  4.89it/s]
 24%|       | 19/79 [00:01<00:09,  6.45it/s]
 28%|       | 22/79 [00:01<00:06,  8.27it/s]
 32%|      | 25/79 [00:01<00:05, 10.39it/s]
 35%|      | 28/79 [00:02<00:04, 12.56it/s]
 39%|      | 31/79 [00:02<00:03, 14.77it/s]
 43%|     | 34/79 [00:02<00:02, 16.90it/s]
 47%|     | 37/79 [00:02<00:02, 18.66it/s]
 51%|     | 40/79 [00:02<00:01, 20.25it/s]
 54%|    | 43/79 [00:02<00:01, 21.27it/s]
 58%|    | 46/79 [00:02<00:01, 22.21it/s]
 62%|   | 49/79 [00:02<00:01, 22.95it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:20,  1.03s/it]
  5%|         | 4/79 [00:01<00:55,  1.36it/s]
  9%|         | 7/79 [00:01<00:37,  1.90it/s]
 13%|        | 10/79 [00:01<00:26,  2.62it/s]
 16%|        | 13/79 [00:01<00:18,  3.59it/s]
 20%|        | 16/79 [00:01<00:13,  4.82it/s]
 24%|       | 19/79 [00:01<00:09,  6.35it/s]
 28%|       | 22/79 [00:01<00:06,  8.16it/s]
 32%|      | 25/79 [00:02<00:05, 10.22it/s]
 35%|      | 28/79 [00:02<00:04, 12.37it/s]
 39%|      | 31/79 [00:02<00:03, 14.51it/s]
 43%|     | 34/79 [00:02<00:02, 16.49it/s]
 47%|     | 37/79 [00:02<00:02, 18.29it/s]
 51%|     | 40/79 [00:02<00:01, 19.86it/s]
 54%|    | 43/79 [00:02<00:01, 20.97it/s]
 58%|    | 46/79 [00:02<00:01, 21.90it/s]
 62%|   | 49/79 [00:03<00:01, 22.42it/s]
 66%|   | 52/79 [00:03<00:01, 24.80it/s]
 70%|   | 55/79 [00:02<00:00, 25.01it/s]
 73%|  | 58/79 [00:02<00:00, 25.15it/s]
 77%|  | 61/79 [00:03<00:00, 25.57it/s]
 81%|  | 64/79 [00:03<00:00, 25.66it/s]
 85%| | 67/79 [00:03<00:00, 25.80it/s]
 89%| | 70/79 [00:03<00:00, 25.42it/s]
 92%|| 73/79 [00:03<00:00, 25.95it/s]
 96%|| 76/79 [00:03<00:00, 26.53it/s]
100%|| 79/79 [00:03<00:00, 27.35it/s]
, 24.45it/s]
 70%|   | 55/79 [00:02<00:00, 24.77it/s]
 73%|  | 58/79 [00:02<00:00, 25.26it/s]
 77%|  | 61/79 [00:03<00:00, 25.19it/s]
 81%|  | 64/79 [00:03<00:00, 25.55it/s]
 85%| | 67/79 [00:03<00:00, 25.29it/s]
 89%| | 70/79 [00:03<00:00, 25.30it/s]
 92%|| 73/79 [00:03<00:00, 25.82it/s]
 96%|| 76/79 [00:03<00:00, 26.44it/s]
100%|| 79/79 [00:03<00:00, 27.20it/s]
, 25.05it/s]
 70%|   | 55/79 [00:02<00:00, 25.09it/s]
 73%|  | 58/79 [00:03<00:00, 25.59it/s]
 77%|  | 61/79 [00:03<00:00, 25.66it/s]
 81%|  | 64/79 [00:03<00:00, 26.07it/s]
 85%| | 67/79 [00:03<00:00, 26.16it/s]
 89%| | 70/79 [00:03<00:00, 26.30it/s]
 92%|| 73/79 [00:03<00:00, 26.52it/s]
 96%|| 76/79 [00:03<00:00, 27.10it/s]
100%|| 79/79 [00:03<00:00, 27.76it/s]
, 25.08it/s]
 70%|   | 55/79 [00:02<00:00, 25.18it/s]
 73%|  | 58/79 [00:02<00:00, 25.18it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 24.94it/s]
 85%| | 67/79 [00:03<00:00, 25.00it/s]
 89%| | 70/79 [00:03<00:00, 24.59it/s]
 92%|| 73/79 [00:03<00:00, 25.39it/s]
 96%|| 76/79 [00:03<00:00, 26.12it/s]
100%|| 79/79 [00:03<00:00, 27.10it/s]
, 24.61it/s]
 70%|   | 55/79 [00:02<00:00, 25.00it/s]
 73%|  | 58/79 [00:03<00:00, 25.31it/s]
 77%|  | 61/79 [00:03<00:00, 25.46it/s]
 81%|  | 64/79 [00:03<00:00, 25.70it/s]
 85%| | 67/79 [00:03<00:00, 25.85it/s]
 89%| | 70/79 [00:03<00:00, 26.10it/s]
 92%|| 73/79 [00:03<00:00, 26.19it/s]
 96%|| 76/79 [00:03<00:00, 26.94it/s]
100%|| 79/79 [00:03<00:00, 27.74it/s]
, 24.96it/s]
 70%|   | 55/79 [00:02<00:00, 25.54it/s]
 73%|  | 58/79 [00:03<00:00, 25.43it/s]
 77%|  | 61/79 [00:03<00:00, 25.65it/s]
 81%|  | 64/79 [00:03<00:00, 25.39it/s]
 85%| | 67/79 [00:03<00:00, 25.70it/s]
 89%| | 70/79 [00:03<00:00, 25.61it/s]
 92%|| 73/79 [00:03<00:00, 25.88it/s]
 96%|| 76/79 [00:03<00:00, 26.31it/s]
100%|| 79/79 [00:03<00:00, 27.20it/s]
, 24.96it/s]
 70%|   | 55/79 [00:02<00:00, 25.42it/s]
 73%|  | 58/79 [00:03<00:00, 25.48it/s]
 77%|  | 61/79 [00:03<00:00, 25.49it/s]
 81%|  | 64/79 [00:03<00:00, 25.40it/s]
 85%| | 67/79 [00:03<00:00, 25.49it/s]
 89%| | 70/79 [00:03<00:00, 25.48it/s]
 92%|| 73/79 [00:03<00:00, 25.91it/s]
 96%|| 76/79 [00:03<00:00, 26.51it/s]
100%|| 79/79 [00:03<00:00, 27.31it/s]
, 24.72it/s]
 70%|   | 55/79 [00:02<00:00, 25.16it/s]
 73%|  | 58/79 [00:03<00:00, 25.46it/s]
 77%|  | 61/79 [00:03<00:00, 25.45it/s]
 81%|  | 64/79 [00:03<00:00, 25.31it/s]
 85%| | 67/79 [00:03<00:00, 25.61it/s]
 89%| | 70/79 [00:03<00:00, 25.50it/s]
 92%|| 73/79 [00:03<00:00, 25.95it/s]
 96%|| 76/79 [00:03<00:00, 26.33it/s]
100%|| 79/79 [00:03<00:00, 27.32it/s]
, 23.89it/s]
 70%|   | 55/79 [00:02<00:00, 24.34it/s]
 73%|  | 58/79 [00:03<00:00, 24.77it/s]
 77%|  | 61/79 [00:03<00:00, 25.00it/s]
 81%|  | 64/79 [00:03<00:00, 24.86it/s]
 85%| | 67/79 [00:03<00:00, 25.31it/s]
 89%| | 70/79 [00:03<00:00, 25.19it/s]
 92%|| 73/79 [00:03<00:00, 25.33it/s]
 96%|| 76/79 [00:03<00:00, 26.13it/s]
100%|| 79/79 [00:03<00:00, 20.15it/s]
, 24.06it/s]
 70%|   | 55/79 [00:02<00:00, 24.35it/s]
 73%|  | 58/79 [00:03<00:00, 24.92it/s]
 77%|  | 61/79 [00:03<00:00, 25.27it/s]
 81%|  | 64/79 [00:03<00:00, 25.38it/s]
 85%| | 67/79 [00:03<00:00, 25.67it/s]
 89%| | 70/79 [00:03<00:00, 25.46it/s]
 92%|| 73/79 [00:03<00:00, 25.83it/s]
 96%|| 76/79 [00:03<00:00, 26.47it/s]
100%|| 79/79 [00:03<00:00, 27.42it/s]
, 24.54it/s]
 70%|   | 55/79 [00:02<00:00, 24.91it/s]
 73%|  | 58/79 [00:03<00:00, 25.08it/s]
 77%|  | 61/79 [00:03<00:00, 25.54it/s]
 81%|  | 64/79 [00:03<00:00, 25.61it/s]
 85%| | 67/79 [00:03<00:00, 25.78it/s]
 89%| | 70/79 [00:03<00:00, 25.78it/s]
 92%|| 73/79 [00:03<00:00, 26.16it/s]
 96%|| 76/79 [00:03<00:00, 26.64it/s]
100%|| 79/79 [00:03<00:00, 27.54it/s]
, 24.25it/s]
 70%|   | 55/79 [00:02<00:00, 24.94it/s]
 73%|  | 58/79 [00:03<00:00, 24.97it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 25.03it/s]
 85%| | 67/79 [00:03<00:00, 25.33it/s]
 89%| | 70/79 [00:03<00:00, 25.31it/s]
 92%|| 73/79 [00:03<00:00, 25.88it/s]
 96%|| 76/79 [00:03<00:00, 26.60it/s]
100%|| 79/79 [00:03<00:00, 20.11it/s]
, 24.28it/s]
 70%|   | 55/79 [00:02<00:00, 24.17it/s]
 73%|  | 58/79 [00:03<00:00, 24.41it/s]
 77%|  | 61/79 [00:03<00:00, 24.38it/s]
 81%|  | 64/79 [00:03<00:00, 24.57it/s]
 85%| | 67/79 [00:03<00:00, 24.78it/s]
 89%| | 70/79 [00:03<00:00, 24.77it/s]
 92%|| 73/79 [00:03<00:00, 25.14it/s]
 96%|| 76/79 [00:03<00:00, 25.91it/s]
100%|| 79/79 [00:03<00:00, 26.87it/s]
, 24.48it/s]
 70%|   | 55/79 [00:02<00:00, 25.07it/s]
 73%|  | 58/79 [00:03<00:00, 25.42it/s]
 77%|  | 61/79 [00:03<00:00, 25.40it/s]
 81%|  | 64/79 [00:03<00:00, 25.37it/s]
 85%| | 67/79 [00:03<00:00, 25.61it/s]
 89%| | 70/79 [00:03<00:00, 25.20it/s]
 92%|| 73/79 [00:03<00:00, 25.70it/s]
 96%|| 76/79 [00:03<00:00, 26.17it/s]
100%|| 79/79 [00:03<00:00, 27.14it/s]
, 24.65it/s]
 70%|   | 55/79 [00:02<00:00, 24.80it/s]
 73%|  | 58/79 [00:03<00:00, 25.06it/s]
 77%|  | 61/79 [00:03<00:00, 25.47it/s]
 81%|  | 64/79 [00:03<00:00, 25.42it/s]
 85%| | 67/79 [00:03<00:00, 25.50it/s]
 89%| | 70/79 [00:03<00:00, 25.66it/s]
 92%|| 73/79 [00:03<00:00, 25.94it/s]
 96%|| 76/79 [00:03<00:00, 27.01it/s]
100%|| 79/79 [00:03<00:00, 27.35it/s]
, 24.16it/s]
 70%|   | 55/79 [00:02<00:00, 24.40it/s]
 73%|  | 58/79 [00:03<00:00, 24.77it/s]
 77%|  | 61/79 [00:03<00:00, 24.99it/s]
 81%|  | 64/79 [00:03<00:00, 25.20it/s]
 85%| | 67/79 [00:03<00:00, 25.34it/s]
 89%| | 70/79 [00:03<00:00, 25.39it/s]
 92%|| 73/79 [00:03<00:00, 25.77it/s]
 96%|| 76/79 [00:03<00:00, 26.36it/s]
100%|| 79/79 [00:03<00:00, 27.19it/s]
, 24.40it/s]
 70%|   | 55/79 [00:02<00:00, 24.79it/s]
 73%|  | 58/79 [00:03<00:00, 25.19it/s]
 77%|  | 61/79 [00:03<00:00, 25.45it/s]
 81%|  | 64/79 [00:03<00:00, 25.60it/s]
 85%| | 67/79 [00:03<00:00, 25.45it/s]
 89%| | 70/79 [00:03<00:00, 25.76it/s]
 92%|| 73/79 [00:03<00:00, 25.83it/s]
 96%|| 76/79 [00:03<00:00, 26.50it/s]
100%|| 79/79 [00:03<00:00, 27.23it/s]
, 24.26it/s]
 70%|   | 55/79 [00:02<00:00, 24.52it/s]
 73%|  | 58/79 [00:03<00:00, 25.01it/s]
 77%|  | 61/79 [00:03<00:00, 25.01it/s]
 81%|  | 64/79 [00:03<00:00, 25.35it/s]
 85%| | 67/79 [00:03<00:00, 25.58it/s]
 89%| | 70/79 [00:03<00:00, 25.54it/s]
 92%|| 73/79 [00:03<00:00, 25.73it/s]
 96%|| 76/79 [00:03<00:00, 26.33it/s]
100%|| 79/79 [00:03<00:00, 27.05it/s]
, 24.25it/s]
 70%|   | 55/79 [00:03<00:00, 24.56it/s]
 73%|  | 58/79 [00:03<00:00, 24.78it/s]
 77%|  | 61/79 [00:03<00:00, 24.91it/s]
 81%|  | 64/79 [00:03<00:00, 25.14it/s]
 85%| | 67/79 [00:03<00:00, 25.23it/s]
 89%| | 70/79 [00:03<00:00, 25.17it/s]
 92%|| 73/79 [00:03<00:00, 25.71it/s]
 96%|| 76/79 [00:03<00:00, 26.41it/s]
100%|| 79/79 [00:03<00:00, 27.38it/s]
, 24.47it/s]
 70%|   | 55/79 [00:03<00:00, 24.83it/s]
 73%|  | 58/79 [00:03<00:00, 24.98it/s]
 77%|  | 61/79 [00:03<00:00, 25.24it/s]
 81%|  | 64/79 [00:03<00:00, 25.43it/s]
 85%| | 67/79 [00:03<00:00, 25.60it/s]
 89%| | 70/79 [00:03<00:00, 25.86it/s]
 92%|| 73/79 [00:03<00:00, 25.56it/s]
 96%|| 76/79 [00:03<00:00, 26.57it/s]
100%|| 79/79 [00:03<00:00, 26.81it/s]
, 23.87it/s]
 70%|   | 55/79 [00:03<00:00, 24.51it/s]
 73%|  | 58/79 [00:03<00:00, 24.59it/s]
 77%|  | 61/79 [00:03<00:00, 24.97it/s]
 81%|  | 64/79 [00:03<00:00, 25.22it/s]
 85%| | 67/79 [00:03<00:00, 25.30it/s]
 89%| | 70/79 [00:03<00:00, 25.31it/s]
 92%|| 73/79 [00:03<00:00, 25.93it/s]
 96%|| 76/79 [00:03<00:00, 26.64it/s]
100%|| 79/79 [00:03<00:00, 27.51it/s]
, 24.19it/s]
 70%|   | 55/79 [00:02<00:00, 24.44it/s]
 73%|  | 58/79 [00:03<00:00, 24.94it/s]
 77%|  | 61/79 [00:03<00:00, 24.99it/s]
 81%|  | 64/79 [00:03<00:00, 25.07it/s]
 85%| | 67/79 [00:03<00:00, 24.99it/s]
 89%| | 70/79 [00:03<00:00, 25.44it/s]
 92%|| 73/79 [00:03<00:00, 25.32it/s]
 96%|| 76/79 [00:03<00:00, 26.10it/s]
100%|| 79/79 [00:03<00:00, 26.93it/s]
, 24.10it/s]
 70%|   | 55/79 [00:02<00:00, 24.44it/s]
 73%|  | 58/79 [00:03<00:00, 24.88it/s]
 77%|  | 61/79 [00:03<00:00, 24.93it/s]
 81%|  | 64/79 [00:03<00:00, 24.95it/s]
 85%| | 67/79 [00:03<00:00, 24.75it/s]
 89%| | 70/79 [00:03<00:00, 25.17it/s]
 92%|| 73/79 [00:03<00:00, 25.08it/s]
 96%|| 76/79 [00:03<00:00, 25.83it/s]
100%|| 79/79 [00:03<00:00, 26.70it/s]
, 23.40it/s]
 70%|   | 55/79 [00:03<00:01, 23.52it/s]
 73%|  | 58/79 [00:03<00:00, 23.76it/s]
 77%|  | 61/79 [00:03<00:00, 24.10it/s]
 81%|  | 64/79 [00:03<00:00, 24.17it/s]
 85%| | 67/79 [00:03<00:00, 24.45it/s]
 89%| | 70/79 [00:03<00:00, 25.05it/s]
 92%|| 73/79 [00:03<00:00, 25.38it/s]
 96%|| 76/79 [00:03<00:00, 26.23it/s]
100%|| 79/79 [00:03<00:00, 27.24it/s]
, 23.90it/s]
 70%|   | 55/79 [00:03<00:00, 24.10it/s]
 73%|  | 58/79 [00:03<00:00, 24.20it/s]
 77%|  | 61/79 [00:03<00:00, 24.33it/s]
 81%|  | 64/79 [00:03<00:00, 24.80it/s]
 85%| | 67/79 [00:03<00:00, 24.65it/s]
 89%| | 70/79 [00:03<00:00, 24.74it/s]
 92%|| 73/79 [00:03<00:00, 25.03it/s]
 96%|| 76/79 [00:03<00:00, 25.66it/s]
100%|| 79/79 [00:03<00:00, 26.51it/s]
, 23.67it/s]
 70%|   | 55/79 [00:03<00:00, 24.16it/s]
 73%|  | 58/79 [00:03<00:00, 24.46it/s]
 77%|  | 61/79 [00:03<00:00, 24.55it/s]
 81%|  | 64/79 [00:03<00:00, 24.67it/s]
 85%| | 67/79 [00:03<00:00, 24.48it/s]
 89%| | 70/79 [00:03<00:00, 24.82it/s]
 92%|| 73/79 [00:03<00:00, 24.88it/s]
 96%|| 76/79 [00:03<00:00, 25.52it/s]
100%|| 79/79 [00:04<00:00, 26.43it/s]
38it/s]
 68%|   | 54/79 [00:03<00:01, 23.88it/s]
 72%|  | 57/79 [00:03<00:00, 24.12it/s]
 76%|  | 60/79 [00:03<00:00, 24.34it/s]
 80%|  | 63/79 [00:03<00:00, 24.57it/s]
 84%| | 66/79 [00:03<00:00, 24.75it/s]
 87%| | 69/79 [00:03<00:00, 24.83it/s]
 91%| | 72/79 [00:03<00:00, 24.64it/s]
 95%|| 75/79 [00:03<00:00, 25.41it/s]
 99%|| 78/79 [00:04<00:00, 25.92it/s]
100%|| 79/79 [00:04<00:00, 18.98it/s]
, 23.66it/s]
 70%|   | 55/79 [00:03<00:00, 24.23it/s]
 73%|  | 58/79 [00:03<00:00, 24.50it/s]
 77%|  | 61/79 [00:03<00:00, 24.75it/s]
 81%|  | 64/79 [00:03<00:00, 24.79it/s]
 85%| | 67/79 [00:03<00:00, 24.93it/s]
 89%| | 70/79 [00:03<00:00, 24.76it/s]
 92%|| 73/79 [00:03<00:00, 25.25it/s]
 96%|| 76/79 [00:03<00:00, 25.87it/s]
100%|| 79/79 [00:04<00:00, 26.67it/s]
, 22.91it/s]
 70%|   | 55/79 [00:03<00:01, 23.49it/s]
 73%|  | 58/79 [00:03<00:00, 23.81it/s]
 77%|  | 61/79 [00:03<00:00, 24.08it/s]
 81%|  | 64/79 [00:03<00:00, 24.36it/s]
 85%| | 67/79 [00:03<00:00, 24.57it/s]
 89%| | 70/79 [00:03<00:00, 24.55it/s]
 92%|| 73/79 [00:03<00:00, 24.80it/s]
 96%|| 76/79 [00:03<00:00, 25.70it/s]
100%|| 79/79 [00:04<00:00, 26.41it/s]
, 22.80it/s]
 70%|   | 55/79 [00:03<00:01, 23.20it/s]
 73%|  | 58/79 [00:03<00:00, 23.75it/s]
 77%|  | 61/79 [00:03<00:00, 24.01it/s]
 81%|  | 64/79 [00:03<00:00, 24.09it/s]
 85%| | 67/79 [00:03<00:00, 24.19it/s]
 89%| | 70/79 [00:03<00:00, 24.47it/s]
 92%|| 73/79 [00:03<00:00, 24.79it/s]
 96%|| 76/79 [00:04<00:00, 25.58it/s]
100%|| 79/79 [00:04<00:00, 26.40it/s]
, 23.34it/s]
 70%|   | 55/79 [00:03<00:01, 23.71it/s]
 73%|  | 58/79 [00:03<00:00, 23.88it/s]
 77%|  | 61/79 [00:03<00:00, 24.26it/s]
 81%|  | 64/79 [00:03<00:00, 24.54it/s]
 85%| | 67/79 [00:03<00:00, 24.76it/s]
 89%| | 70/79 [00:03<00:00, 24.72it/s]
 92%|| 73/79 [00:03<00:00, 24.95it/s]
 96%|| 76/79 [00:04<00:00, 25.60it/s]
100%|| 79/79 [00:04<00:00, 26.40it/s]
, 22.46it/s]
 70%|   | 55/79 [00:03<00:01, 22.81it/s]
 73%|  | 58/79 [00:03<00:00, 22.95it/s]
 77%|  | 61/79 [00:03<00:00, 23.33it/s]
 81%|  | 64/79 [00:03<00:00, 23.58it/s]
 85%| | 67/79 [00:03<00:00, 23.74it/s]
 89%| | 70/79 [00:03<00:00, 23.68it/s]
 92%|| 73/79 [00:04<00:00, 24.44it/s]
 96%|| 76/79 [00:04<00:00, 25.23it/s]
100%|| 79/79 [00:04<00:00, 26.18it/s]
2020-06-23 16:28:31,155 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.304609 (0.027549496459960937 s / img per device, on 32 devices)
2020-06-23 16:28:31,176 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:28:31,176 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:28:31,196 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592954920928, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 6, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592954920929, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 6}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:28:42,547 maskrcnn_benchmark.trainer INFO: eta: 1:15:40  iter: 4600  loss: 0.6694 (0.8446)  loss_classifier: 0.2560 (0.3170)  loss_box_reg: 0.1183 (0.1335)  loss_mask: 0.2963 (0.3262)  loss_objectness: 0.0237 (0.0451)  loss_rpn_box_reg: 0.0125 (0.0227)  time: 0.1078 (0.1283)  data: 0.0014 (0.0200)  lr: 0.160000  max mem: 5079
2020-06-23 16:28:44,726 maskrcnn_benchmark.trainer INFO: eta: 1:15:34  iter: 4620  loss: 0.6301 (0.8440)  loss_classifier: 0.2352 (0.3167)  loss_box_reg: 0.0918 (0.1334)  loss_mask: 0.2796 (0.3260)  loss_objectness: 0.0226 (0.0451)  loss_rpn_box_reg: 0.0105 (0.0227)  time: 0.1083 (0.1282)  data: 0.0016 (0.0199)  lr: 0.160000  max mem: 5079
2020-06-23 16:28:46,883 maskrcnn_benchmark.trainer INFO: eta: 1:15:29  iter: 4640  loss: 0.6921 (0.8433)  loss_classifier: 0.2410 (0.3164)  loss_box_reg: 0.1117 (0.1333)  loss_mask: 0.2719 (0.3258)  loss_objectness: 0.0216 (0.0450)  loss_rpn_box_reg: 0.0090 (0.0227)  time: 0.1073 (0.1281)  data: 0.0014 (0.0199)  lr: 0.160000  max mem: 5079
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 16:28:49,027 maskrcnn_benchmark.trainer INFO: eta: 1:15:23  iter: 4660  loss: 0.6635 (0.8426)  loss_classifier: 0.2244 (0.3160)  loss_box_reg: 0.1026 (0.1332)  loss_mask: 0.2739 (0.3256)  loss_objectness: 0.0206 (0.0450)  loss_rpn_box_reg: 0.0081 (0.0227)  time: 0.1070 (0.1280)  data: 0.0015 (0.0198)  lr: 0.160000  max mem: 5079
DONE (t=0.82s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.71s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.27355
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.47816
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.28547
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15257
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.30285
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.34640
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25474
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.40938
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.43174
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24353
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47471
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.54164
2020-06-23 16:28:51,189 maskrcnn_benchmark.trainer INFO: eta: 1:15:17  iter: 4680  loss: 0.6646 (0.8419)  loss_classifier: 0.2456 (0.3158)  loss_box_reg: 0.1147 (0.1331)  loss_mask: 0.2719 (0.3254)  loss_objectness: 0.0208 (0.0449)  loss_rpn_box_reg: 0.0068 (0.0227)  time: 0.1076 (0.1279)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5079
2020-06-23 16:28:53,350 maskrcnn_benchmark.trainer INFO: eta: 1:15:12  iter: 4700  loss: 0.6397 (0.8412)  loss_classifier: 0.2170 (0.3154)  loss_box_reg: 0.0903 (0.1330)  loss_mask: 0.2541 (0.3252)  loss_objectness: 0.0185 (0.0449)  loss_rpn_box_reg: 0.0097 (0.0227)  time: 0.1072 (0.1278)  data: 0.0014 (0.0196)  lr: 0.160000  max mem: 5079
2020-06-23 16:28:55,495 maskrcnn_benchmark.trainer INFO: eta: 1:15:06  iter: 4720  loss: 0.5853 (0.8402)  loss_classifier: 0.1978 (0.3149)  loss_box_reg: 0.0853 (0.1329)  loss_mask: 0.2614 (0.3250)  loss_objectness: 0.0180 (0.0448)  loss_rpn_box_reg: 0.0071 (0.0226)  time: 0.1070 (0.1277)  data: 0.0014 (0.0196)  lr: 0.160000  max mem: 5079
2020-06-23 16:28:57,648 maskrcnn_benchmark.trainer INFO: eta: 1:15:01  iter: 4740  loss: 0.6111 (0.8395)  loss_classifier: 0.2581 (0.3147)  loss_box_reg: 0.1007 (0.1327)  loss_mask: 0.2520 (0.3247)  loss_objectness: 0.0212 (0.0447)  loss_rpn_box_reg: 0.0111 (0.0226)  time: 0.1069 (0.1277)  data: 0.0014 (0.0195)  lr: 0.160000  max mem: 5079
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:28:59,804 maskrcnn_benchmark.trainer INFO: eta: 1:14:55  iter: 4760  loss: 0.6119 (0.8388)  loss_classifier: 0.1939 (0.3144)  loss_box_reg: 0.1078 (0.1326)  loss_mask: 0.2618 (0.3245)  loss_objectness: 0.0236 (0.0447)  loss_rpn_box_reg: 0.0074 (0.0226)  time: 0.1076 (0.1276)  data: 0.0015 (0.0194)  lr: 0.160000  max mem: 5079
DONE (t=2.26s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:29:01,957 maskrcnn_benchmark.trainer INFO: eta: 1:14:50  iter: 4780  loss: 0.7042 (0.8383)  loss_classifier: 0.2369 (0.3141)  loss_box_reg: 0.1229 (0.1326)  loss_mask: 0.2917 (0.3244)  loss_objectness: 0.0237 (0.0446)  loss_rpn_box_reg: 0.0116 (0.0226)  time: 0.1066 (0.1275)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 5079
DONE (t=2.87s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.26349
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.45037
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.27602
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.10863
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.28951
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.38069
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25021
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.38935
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.40799
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21111
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.45323
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.53036
2020-06-23 16:29:03,732 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.27354902835579076, segm mAP: 0.26349462834114784
:::MLLOG {"namespace": "", "time_ms": 1592954943732, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.27354902835579076, "SEGM": 0.26349462834114784}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1592954943732, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 5}}
2020-06-23 16:29:04,267 maskrcnn_benchmark.trainer INFO: eta: 1:14:45  iter: 4800  loss: 0.6841 (0.8379)  loss_classifier: 0.2340 (0.3139)  loss_box_reg: 0.1071 (0.1326)  loss_mask: 0.2896 (0.3242)  loss_objectness: 0.0183 (0.0446)  loss_rpn_box_reg: 0.0192 (0.0226)  time: 0.1067 (0.1274)  data: 0.0016 (0.0193)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:06,427 maskrcnn_benchmark.trainer INFO: eta: 1:14:40  iter: 4820  loss: 0.5769 (0.8370)  loss_classifier: 0.1799 (0.3135)  loss_box_reg: 0.0948 (0.1325)  loss_mask: 0.2728 (0.3240)  loss_objectness: 0.0225 (0.0445)  loss_rpn_box_reg: 0.0085 (0.0226)  time: 0.1076 (0.1274)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:08,584 maskrcnn_benchmark.trainer INFO: eta: 1:14:35  iter: 4840  loss: 0.7190 (0.8364)  loss_classifier: 0.2446 (0.3133)  loss_box_reg: 0.1114 (0.1324)  loss_mask: 0.2761 (0.3238)  loss_objectness: 0.0250 (0.0444)  loss_rpn_box_reg: 0.0139 (0.0226)  time: 0.1073 (0.1273)  data: 0.0015 (0.0191)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:10,755 maskrcnn_benchmark.trainer INFO: eta: 1:14:29  iter: 4860  loss: 0.6569 (0.8358)  loss_classifier: 0.2095 (0.3130)  loss_box_reg: 0.1015 (0.1323)  loss_mask: 0.2743 (0.3236)  loss_objectness: 0.0190 (0.0443)  loss_rpn_box_reg: 0.0105 (0.0225)  time: 0.1083 (0.1272)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:12,930 maskrcnn_benchmark.trainer INFO: eta: 1:14:24  iter: 4880  loss: 0.6850 (0.8352)  loss_classifier: 0.2193 (0.3127)  loss_box_reg: 0.1132 (0.1323)  loss_mask: 0.2849 (0.3234)  loss_objectness: 0.0236 (0.0443)  loss_rpn_box_reg: 0.0126 (0.0226)  time: 0.1086 (0.1271)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:15,085 maskrcnn_benchmark.trainer INFO: eta: 1:14:19  iter: 4900  loss: 0.6464 (0.8346)  loss_classifier: 0.2133 (0.3123)  loss_box_reg: 0.1133 (0.1322)  loss_mask: 0.2907 (0.3232)  loss_objectness: 0.0234 (0.0443)  loss_rpn_box_reg: 0.0117 (0.0226)  time: 0.1076 (0.1270)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:17,241 maskrcnn_benchmark.trainer INFO: eta: 1:14:14  iter: 4920  loss: 0.7092 (0.8342)  loss_classifier: 0.2754 (0.3122)  loss_box_reg: 0.1083 (0.1321)  loss_mask: 0.2741 (0.3230)  loss_objectness: 0.0185 (0.0442)  loss_rpn_box_reg: 0.0074 (0.0226)  time: 0.1074 (0.1270)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:19,416 maskrcnn_benchmark.trainer INFO: eta: 1:14:08  iter: 4940  loss: 0.6277 (0.8336)  loss_classifier: 0.2122 (0.3119)  loss_box_reg: 0.0948 (0.1321)  loss_mask: 0.2673 (0.3228)  loss_objectness: 0.0222 (0.0443)  loss_rpn_box_reg: 0.0080 (0.0226)  time: 0.1082 (0.1269)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:21,572 maskrcnn_benchmark.trainer INFO: eta: 1:14:03  iter: 4960  loss: 0.6634 (0.8330)  loss_classifier: 0.2210 (0.3117)  loss_box_reg: 0.1105 (0.1320)  loss_mask: 0.2513 (0.3226)  loss_objectness: 0.0128 (0.0442)  loss_rpn_box_reg: 0.0085 (0.0225)  time: 0.1076 (0.1268)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:23,718 maskrcnn_benchmark.trainer INFO: eta: 1:13:58  iter: 4980  loss: 0.6497 (0.8322)  loss_classifier: 0.2324 (0.3113)  loss_box_reg: 0.0977 (0.1319)  loss_mask: 0.2620 (0.3223)  loss_objectness: 0.0230 (0.0441)  loss_rpn_box_reg: 0.0085 (0.0226)  time: 0.1075 (0.1267)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:25,866 maskrcnn_benchmark.trainer INFO: eta: 1:13:53  iter: 5000  loss: 0.7122 (0.8317)  loss_classifier: 0.2484 (0.3111)  loss_box_reg: 0.0985 (0.1318)  loss_mask: 0.2708 (0.3222)  loss_objectness: 0.0297 (0.0441)  loss_rpn_box_reg: 0.0104 (0.0225)  time: 0.1068 (0.1267)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:28,045 maskrcnn_benchmark.trainer INFO: eta: 1:13:48  iter: 5020  loss: 0.6984 (0.8313)  loss_classifier: 0.2536 (0.3110)  loss_box_reg: 0.1269 (0.1318)  loss_mask: 0.2892 (0.3220)  loss_objectness: 0.0238 (0.0440)  loss_rpn_box_reg: 0.0101 (0.0225)  time: 0.1093 (0.1266)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:30,184 maskrcnn_benchmark.trainer INFO: eta: 1:13:42  iter: 5040  loss: 0.6631 (0.8307)  loss_classifier: 0.2598 (0.3107)  loss_box_reg: 0.1029 (0.1317)  loss_mask: 0.2861 (0.3219)  loss_objectness: 0.0189 (0.0439)  loss_rpn_box_reg: 0.0120 (0.0225)  time: 0.1071 (0.1265)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:32,321 maskrcnn_benchmark.trainer INFO: eta: 1:13:37  iter: 5060  loss: 0.6809 (0.8301)  loss_classifier: 0.2465 (0.3104)  loss_box_reg: 0.0994 (0.1316)  loss_mask: 0.2741 (0.3217)  loss_objectness: 0.0239 (0.0439)  loss_rpn_box_reg: 0.0124 (0.0225)  time: 0.1067 (0.1264)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:34,476 maskrcnn_benchmark.trainer INFO: eta: 1:13:32  iter: 5080  loss: 0.7932 (0.8299)  loss_classifier: 0.2657 (0.3103)  loss_box_reg: 0.1493 (0.1316)  loss_mask: 0.2979 (0.3216)  loss_objectness: 0.0203 (0.0438)  loss_rpn_box_reg: 0.0077 (0.0225)  time: 0.1068 (0.1264)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:36,596 maskrcnn_benchmark.trainer INFO: eta: 1:13:27  iter: 5100  loss: 0.6485 (0.8293)  loss_classifier: 0.2114 (0.3101)  loss_box_reg: 0.0868 (0.1315)  loss_mask: 0.2761 (0.3215)  loss_objectness: 0.0176 (0.0438)  loss_rpn_box_reg: 0.0081 (0.0224)  time: 0.1055 (0.1263)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:38,743 maskrcnn_benchmark.trainer INFO: eta: 1:13:22  iter: 5120  loss: 0.6570 (0.8287)  loss_classifier: 0.2259 (0.3098)  loss_box_reg: 0.1081 (0.1314)  loss_mask: 0.2749 (0.3213)  loss_objectness: 0.0222 (0.0438)  loss_rpn_box_reg: 0.0099 (0.0225)  time: 0.1075 (0.1262)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:40,880 maskrcnn_benchmark.trainer INFO: eta: 1:13:16  iter: 5140  loss: 0.6248 (0.8280)  loss_classifier: 0.2082 (0.3095)  loss_box_reg: 0.0857 (0.1313)  loss_mask: 0.2654 (0.3211)  loss_objectness: 0.0172 (0.0437)  loss_rpn_box_reg: 0.0081 (0.0224)  time: 0.1067 (0.1261)  data: 0.0013 (0.0181)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:43,024 maskrcnn_benchmark.trainer INFO: eta: 1:13:11  iter: 5160  loss: 0.6504 (0.8275)  loss_classifier: 0.2432 (0.3093)  loss_box_reg: 0.1004 (0.1312)  loss_mask: 0.2804 (0.3209)  loss_objectness: 0.0296 (0.0437)  loss_rpn_box_reg: 0.0231 (0.0224)  time: 0.1072 (0.1261)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:45,174 maskrcnn_benchmark.trainer INFO: eta: 1:13:06  iter: 5180  loss: 0.7141 (0.8270)  loss_classifier: 0.2493 (0.3091)  loss_box_reg: 0.1141 (0.1312)  loss_mask: 0.2692 (0.3207)  loss_objectness: 0.0168 (0.0437)  loss_rpn_box_reg: 0.0094 (0.0224)  time: 0.1066 (0.1260)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:47,322 maskrcnn_benchmark.trainer INFO: eta: 1:13:01  iter: 5200  loss: 0.7310 (0.8267)  loss_classifier: 0.2759 (0.3089)  loss_box_reg: 0.1248 (0.1312)  loss_mask: 0.2997 (0.3206)  loss_objectness: 0.0236 (0.0436)  loss_rpn_box_reg: 0.0153 (0.0224)  time: 0.1080 (0.1259)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:49,468 maskrcnn_benchmark.trainer INFO: eta: 1:12:56  iter: 5220  loss: 0.6267 (0.8258)  loss_classifier: 0.1881 (0.3085)  loss_box_reg: 0.0877 (0.1310)  loss_mask: 0.2677 (0.3203)  loss_objectness: 0.0183 (0.0436)  loss_rpn_box_reg: 0.0065 (0.0224)  time: 0.1069 (0.1258)  data: 0.0013 (0.0178)  lr: 0.160000  max mem: 5079
2020-06-23 16:29:51,617 maskrcnn_benchmark.trainer INFO: eta: 1:12:51  iter: 5240  loss: 0.7463 (0.8255)  loss_classifier: 0.2639 (0.3084)  loss_box_reg: 0.1180 (0.1310)  loss_mask: 0.2580 (0.3201)  loss_objectness: 0.0269 (0.0435)  loss_rpn_box_reg: 0.0127 (0.0224)  time: 0.1070 (0.1258)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5120
2020-06-23 16:29:53,765 maskrcnn_benchmark.trainer INFO: eta: 1:12:46  iter: 5260  loss: 0.7165 (0.8252)  loss_classifier: 0.2433 (0.3083)  loss_box_reg: 0.1249 (0.1310)  loss_mask: 0.2906 (0.3200)  loss_objectness: 0.0234 (0.0435)  loss_rpn_box_reg: 0.0101 (0.0224)  time: 0.1072 (0.1257)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5120
2020-06-23 16:29:55,930 maskrcnn_benchmark.trainer INFO: eta: 1:12:42  iter: 5280  loss: 0.6692 (0.8248)  loss_classifier: 0.2622 (0.3081)  loss_box_reg: 0.1136 (0.1310)  loss_mask: 0.2644 (0.3199)  loss_objectness: 0.0233 (0.0435)  loss_rpn_box_reg: 0.0094 (0.0224)  time: 0.1074 (0.1256)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5120
2020-06-23 16:29:58,064 maskrcnn_benchmark.trainer INFO: eta: 1:12:37  iter: 5300  loss: 0.6929 (0.8243)  loss_classifier: 0.2313 (0.3079)  loss_box_reg: 0.0940 (0.1309)  loss_mask: 0.2781 (0.3197)  loss_objectness: 0.0266 (0.0434)  loss_rpn_box_reg: 0.0110 (0.0224)  time: 0.1060 (0.1256)  data: 0.0013 (0.0176)  lr: 0.160000  max mem: 5120
2020-06-23 16:30:00,222 maskrcnn_benchmark.trainer INFO: eta: 1:12:32  iter: 5320  loss: 0.7758 (0.8241)  loss_classifier: 0.2817 (0.3078)  loss_box_reg: 0.1317 (0.1309)  loss_mask: 0.2852 (0.3196)  loss_objectness: 0.0257 (0.0434)  loss_rpn_box_reg: 0.0097 (0.0224)  time: 0.1070 (0.1255)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5120
2020-06-23 16:30:02,375 maskrcnn_benchmark.trainer INFO: eta: 1:12:27  iter: 5340  loss: 0.7109 (0.8237)  loss_classifier: 0.2436 (0.3077)  loss_box_reg: 0.1050 (0.1308)  loss_mask: 0.2656 (0.3195)  loss_objectness: 0.0197 (0.0433)  loss_rpn_box_reg: 0.0090 (0.0223)  time: 0.1073 (0.1254)  data: 0.0013 (0.0175)  lr: 0.160000  max mem: 5120
2020-06-23 16:30:04,520 maskrcnn_benchmark.trainer INFO: eta: 1:12:22  iter: 5360  loss: 0.6837 (0.8233)  loss_classifier: 0.2420 (0.3075)  loss_box_reg: 0.1176 (0.1308)  loss_mask: 0.2688 (0.3193)  loss_objectness: 0.0238 (0.0433)  loss_rpn_box_reg: 0.0073 (0.0223)  time: 0.1071 (0.1254)  data: 0.0013 (0.0174)  lr: 0.160000  max mem: 5120
2020-06-23 16:30:06,665 maskrcnn_benchmark.trainer INFO: eta: 1:12:17  iter: 5380  loss: 0.7286 (0.8228)  loss_classifier: 0.2616 (0.3073)  loss_box_reg: 0.1125 (0.1308)  loss_mask: 0.2724 (0.3192)  loss_objectness: 0.0246 (0.0433)  loss_rpn_box_reg: 0.0130 (0.0223)  time: 0.1070 (0.1253)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5120
2020-06-23 16:30:08,818 maskrcnn_benchmark.trainer INFO: eta: 1:12:13  iter: 5400  loss: 0.6408 (0.8224)  loss_classifier: 0.2381 (0.3070)  loss_box_reg: 0.0901 (0.1307)  loss_mask: 0.2954 (0.3191)  loss_objectness: 0.0190 (0.0433)  loss_rpn_box_reg: 0.0064 (0.0223)  time: 0.1070 (0.1252)  data: 0.0013 (0.0173)  lr: 0.160000  max mem: 5120
2020-06-23 16:30:10,974 maskrcnn_benchmark.trainer INFO: eta: 1:12:08  iter: 5420  loss: 0.6495 (0.8218)  loss_classifier: 0.2344 (0.3068)  loss_box_reg: 0.0904 (0.1306)  loss_mask: 0.2859 (0.3189)  loss_objectness: 0.0222 (0.0432)  loss_rpn_box_reg: 0.0092 (0.0223)  time: 0.1077 (0.1252)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5120
2020-06-23 16:30:13,124 maskrcnn_benchmark.trainer INFO: eta: 1:12:03  iter: 5440  loss: 0.7478 (0.8218)  loss_classifier: 0.2727 (0.3067)  loss_box_reg: 0.1291 (0.1307)  loss_mask: 0.2979 (0.3189)  loss_objectness: 0.0308 (0.0432)  loss_rpn_box_reg: 0.0230 (0.0223)  time: 0.1067 (0.1251)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5120
2020-06-23 16:30:15,253 maskrcnn_benchmark.trainer INFO: eta: 1:11:58  iter: 5460  loss: 0.5973 (0.8210)  loss_classifier: 0.2217 (0.3064)  loss_box_reg: 0.1003 (0.1306)  loss_mask: 0.2445 (0.3186)  loss_objectness: 0.0138 (0.0431)  loss_rpn_box_reg: 0.0069 (0.0223)  time: 0.1062 (0.1250)  data: 0.0014 (0.0171)  lr: 0.160000  max mem: 5120
2020-06-23 16:30:17,419 maskrcnn_benchmark.trainer INFO: eta: 1:11:54  iter: 5480  loss: 0.8038 (0.8210)  loss_classifier: 0.3148 (0.3064)  loss_box_reg: 0.1298 (0.1306)  loss_mask: 0.2868 (0.3185)  loss_objectness: 0.0355 (0.0432)  loss_rpn_box_reg: 0.0163 (0.0223)  time: 0.1078 (0.1250)  data: 0.0015 (0.0170)  lr: 0.160000  max mem: 5120
2020-06-23 16:30:19,591 maskrcnn_benchmark.trainer INFO: eta: 1:11:49  iter: 5500  loss: 0.7269 (0.8206)  loss_classifier: 0.2268 (0.3062)  loss_box_reg: 0.1022 (0.1305)  loss_mask: 0.2880 (0.3184)  loss_objectness: 0.0183 (0.0432)  loss_rpn_box_reg: 0.0069 (0.0223)  time: 0.1077 (0.1249)  data: 0.0014 (0.0170)  lr: 0.160000  max mem: 5120
:::MLLOG {"namespace": "", "time_ms": 1592955019797, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 6}}
:::MLLOG {"namespace": "", "time_ms": 1592955019797, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 6}}
:::MLLOG {"namespace": "", "time_ms": 1592955019797, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 6}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 16:30:20,022 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
Done (t=0.27s)
creating index...
creating index...
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
Done (t=0.27s)
creating index...
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
2020-06-23 16:30:20,327 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.29it/s]
  5%|         | 4/79 [00:00<00:41,  1.81it/s]
  9%|         | 7/79 [00:01<00:28,  2.50it/s]
 13%|        | 10/79 [00:01<00:20,  3.43it/s]
 16%|        | 13/79 [00:01<00:14,  4.63it/s]
 20%|        | 16/79 [00:01<00:10,  6.13it/s]
 24%|       | 19/79 [00:01<00:07,  7.94it/s]
 28%|       | 22/79 [00:01<00:05, 10.03it/s]
 32%|      | 25/79 [00:01<00:04, 12.22it/s]
 35%|      | 28/79 [00:01<00:03, 14.48it/s]
 39%|      | 31/79 [00:01<00:02, 16.71it/s]
 43%|     | 34/79 [00:02<00:02, 18.57it/s]
 47%|     | 37/79 [00:02<00:02, 20.29it/s]
 51%|     | 40/79 [00:02<00:01, 21.43it/s]
 54%|    | 43/79 [00:02<00:01, 22.36it/s]
 58%|    | 46/79 [00:02<00:01, 23.11it/s]
 62%|   | 49/79 [00:02<00:01, 23.67it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.26it/s]
  4%|         | 3/79 [00:00<00:43,  1.75it/s]
  8%|         | 6/79 [00:01<00:30,  2.43it/s]
 11%|        | 9/79 [00:01<00:20,  3.33it/s]
 15%|        | 12/79 [00:01<00:14,  4.50it/s]
 19%|        | 15/79 [00:01<00:10,  5.97it/s]
 23%|       | 18/79 [00:01<00:07,  7.73it/s]
 27%|       | 21/79 [00:01<00:05,  9.79it/s]
 30%|       | 24/79 [00:01<00:04, 11.98it/s]
 34%|      | 27/79 [00:01<00:03, 14.18it/s]
 38%|      | 30/79 [00:01<00:03, 16.28it/s]
 42%|     | 33/79 [00:02<00:02, 18.40it/s]
 46%|     | 36/79 [00:02<00:02, 19.88it/s]
 49%|     | 39/79 [00:02<00:01, 21.22it/s]
 53%|    | 42/79 [00:02<00:01, 22.11it/s]
 57%|    | 45/79 [00:02<00:01, 23.02it/s]
 61%|    | 48/79 [00:02<00:01, 23.56it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.43it/s]
 13%|        | 10/79 [00:01<00:20,  3.33it/s]
 16%|        | 13/79 [00:01<00:14,  4.52it/s]
 20%|        | 16/79 [00:01<00:10,  5.99it/s]
 24%|       | 19/79 [00:01<00:07,  7.78it/s]
 28%|       | 22/79 [00:01<00:05,  9.81it/s]
 32%|      | 25/79 [00:01<00:04, 12.06it/s]
 35%|      | 28/79 [00:01<00:03, 14.33it/s]
 39%|      | 31/79 [00:01<00:02, 16.56it/s]
 43%|     | 34/79 [00:02<00:02, 18.48it/s]
 47%|     | 37/79 [00:02<00:02, 20.09it/s]
 51%|     | 40/79 [00:02<00:01, 21.27it/s]
 54%|    | 43/79 [00:02<00:01, 22.49it/s]
 58%|    | 46/79 [00:02<00:01, 23.12it/s]
 62%|   | 49/79 [00:02<00:01, 23.80it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.26it/s]
  4%|         | 3/79 [00:00<00:43,  1.75it/s]
  8%|         | 6/79 [00:01<00:30,  2.41it/s]
 11%|        | 9/79 [00:01<00:21,  3.31it/s]
 15%|        | 12/79 [00:01<00:14,  4.48it/s]
 19%|        | 15/79 [00:01<00:10,  5.95it/s]
 23%|       | 18/79 [00:01<00:07,  7.73it/s]
 27%|       | 21/79 [00:01<00:05,  9.77it/s]
 30%|       | 24/79 [00:01<00:04, 11.94it/s]
 34%|      | 27/79 [00:01<00:03, 14.02it/s]
 38%|      | 30/79 [00:01<00:03, 16.06it/s]
 42%|     | 33/79 [00:02<00:02, 17.93it/s]
 46%|     | 36/79 [00:02<00:02, 19.62it/s]
 49%|     | 39/79 [00:02<00:01, 21.13it/s]
 53%|    | 42/79 [00:02<00:01, 22.15it/s]
 57%|    | 45/79 [00:02<00:01, 23.07it/s]
 61%|    | 48/79 [00:02<00:01, 23.67it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  4%|         | 3/79 [00:00<00:44,  1.70it/s]
  8%|         | 6/79 [00:01<00:30,  2.36it/s]
 11%|        | 9/79 [00:01<00:21,  3.24it/s]
 15%|        | 12/79 [00:01<00:15,  4.39it/s]
 19%|        | 15/79 [00:01<00:10,  5.84it/s]
 23%|       | 18/79 [00:01<00:08,  7.60it/s]
 27%|       | 21/79 [00:01<00:06,  9.63it/s]
 30%|       | 24/79 [00:01<00:04, 11.85it/s]
 34%|      | 27/79 [00:01<00:03, 14.08it/s]
 38%|      | 30/79 [00:02<00:03, 16.30it/s]
 42%|     | 33/79 [00:02<00:02, 18.20it/s]
 46%|     | 36/79 [00:02<00:02, 19.87it/s]
 49%|     | 39/79 [00:02<00:01, 21.26it/s]
 53%|    | 42/79 [00:02<00:01, 22.46it/s]
 57%|    | 45/79 [00:02<00:01, 23.26it/s]
 61%|    | 48/79 [00:02<00:01, 23.89it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  4%|         | 3/79 [00:00<00:44,  1.70it/s]
  8%|         | 6/79 [00:01<00:30,  2.36it/s]
 11%|        | 9/79 [00:01<00:21,  3.25it/s]
 15%|        | 12/79 [00:01<00:15,  4.39it/s]
 19%|        | 15/79 [00:01<00:10,  5.84it/s]
 23%|       | 18/79 [00:01<00:08,  7.60it/s]
 27%|       | 21/79 [00:01<00:06,  9.62it/s]
 30%|       | 24/79 [00:01<00:04, 11.78it/s]
 34%|      | 27/79 [00:01<00:03, 14.09it/s]
 38%|      | 30/79 [00:01<00:03, 16.19it/s]
 42%|     | 33/79 [00:02<00:02, 18.13it/s]
 46%|     | 36/79 [00:02<00:02, 19.72it/s]
 49%|     | 39/79 [00:02<00:01, 21.02it/s]
 53%|    | 42/79 [00:02<00:01, 22.26it/s]
 57%|    | 45/79 [00:02<00:01, 23.21it/s]
 61%|    | 48/79 [00:02<00:01, 23.74it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:10,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.47it/s]
 28%|       | 22/79 [00:01<00:05,  9.51it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 14.03it/s]
 39%|      | 31/79 [00:02<00:02, 16.33it/s]
 43%|     | 34/79 [00:02<00:02, 18.28it/s]
 47%|     | 37/79 [00:02<00:02, 20.08it/s]
 51%|     | 40/79 [00:02<00:01, 21.36it/s]
 54%|    | 43/79 [00:02<00:01, 22.59it/s]
 58%|    | 46/79 [00:02<00:01, 23.23it/s]
 62%|   | 49/79 [00:02<00:01, 23.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.59it/s]
 28%|       | 22/79 [00:01<00:05,  9.61it/s]
 32%|      | 25/79 [00:01<00:04, 11.84it/s]
 35%|      | 28/79 [00:01<00:03, 14.04it/s]
 39%|      | 31/79 [00:02<00:02, 16.23it/s]
 43%|     | 34/79 [00:02<00:02, 18.33it/s]
 47%|     | 37/79 [00:02<00:02, 20.04it/s]
 51%|     | 40/79 [00:02<00:01, 21.46it/s]
 54%|    | 43/79 [00:02<00:01, 22.78it/s]
 58%|    | 46/79 [00:02<00:01, 23.38it/s]
 62%|   | 49/79 [00:02<00:01, 23.91it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.43it/s]
 20%|        | 16/79 [00:01<00:10,  5.89it/s]
 24%|       | 19/79 [00:01<00:07,  7.66it/s]
 28%|       | 22/79 [00:01<00:05,  9.67it/s]
 32%|      | 25/79 [00:01<00:04, 11.84it/s]
 35%|      | 28/79 [00:01<00:03, 13.98it/s]
 39%|      | 31/79 [00:02<00:02, 16.29it/s]
 43%|     | 34/79 [00:02<00:02, 18.05it/s]
 47%|     | 37/79 [00:02<00:02, 19.60it/s]
 51%|     | 40/79 [00:02<00:01, 20.89it/s]
 54%|    | 43/79 [00:02<00:01, 22.22it/s]
 58%|    | 46/79 [00:02<00:01, 22.42it/s]
 62%|   | 49/79 [00:02<00:01, 23.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.48it/s]
 28%|       | 22/79 [00:01<00:06,  9.47it/s]
 32%|      | 25/79 [00:01<00:04, 11.68it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:03, 15.88it/s]
 43%|     | 34/79 [00:02<00:02, 17.84it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.93it/s]
 54%|    | 43/79 [00:02<00:01, 21.74it/s]
 58%|    | 46/79 [00:02<00:01, 22.36it/s]
 62%|   | 49/79 [00:02<00:01, 23.17it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.23it/s]
 32%|      | 25/79 [00:01<00:04, 11.37it/s]
 35%|      | 28/79 [00:01<00:03, 13.64it/s]
 39%|      | 31/79 [00:02<00:03, 15.89it/s]
 43%|     | 34/79 [00:02<00:02, 17.88it/s]
 47%|     | 37/79 [00:02<00:02, 19.63it/s]
 51%|     | 40/79 [00:02<00:01, 21.03it/s]
 54%|    | 43/79 [00:02<00:01, 22.18it/s]
 58%|    | 46/79 [00:02<00:01, 23.02it/s]
 62%|   | 49/79 [00:02<00:01, 23.33it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.43it/s]
 35%|      | 28/79 [00:01<00:03, 13.70it/s]
 39%|      | 31/79 [00:02<00:03, 15.71it/s]
 43%|     | 34/79 [00:02<00:02, 17.62it/s]
 47%|     | 37/79 [00:02<00:02, 19.21it/s]
 51%|     | 40/79 [00:02<00:01, 20.57it/s]
 54%|    | 43/79 [00:02<00:01, 21.53it/s]
 58%|    | 46/79 [00:02<00:01, 22.45it/s]
 62%|   | 49/79 [00:02<00:01, 23.15it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:11,  5.70it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.40it/s]
 32%|      | 25/79 [00:01<00:04, 11.56it/s]
 35%|      | 28/79 [00:01<00:03, 13.74it/s]
 39%|      | 31/79 [00:02<00:03, 15.99it/s]
 43%|     | 34/79 [00:02<00:02, 17.73it/s]
 47%|     | 37/79 [00:02<00:02, 19.40it/s]
 51%|     | 40/79 [00:02<00:01, 20.75it/s]
 54%|    | 43/79 [00:02<00:01, 21.78it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.06it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.23it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.34it/s]
 28%|       | 22/79 [00:01<00:06,  9.39it/s]
 32%|      | 25/79 [00:01<00:04, 11.45it/s]
 35%|      | 28/79 [00:01<00:03, 13.66it/s]
 39%|      | 31/79 [00:02<00:03, 15.85it/s]
 43%|     | 34/79 [00:02<00:02, 17.74it/s]
 47%|     | 37/79 [00:02<00:02, 19.47it/s]
 51%|     | 40/79 [00:02<00:01, 20.70it/s]
 54%|    | 43/79 [00:02<00:01, 21.76it/s]
 58%|    | 46/79 [00:02<00:01, 22.37it/s]
 62%|   | 49/79 [00:02<00:01, 22.84it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  4%|         | 3/79 [00:00<00:47,  1.61it/s]
  8%|         | 6/79 [00:01<00:32,  2.24it/s]
 11%|        | 9/79 [00:01<00:22,  3.08it/s]
 15%|        | 12/79 [00:01<00:16,  4.18it/s]
 19%|        | 15/79 [00:01<00:11,  5.56it/s]
 23%|       | 18/79 [00:01<00:08,  7.24it/s]
 27%|       | 21/79 [00:01<00:06,  9.12it/s]
 30%|       | 24/79 [00:01<00:04, 11.30it/s]
 34%|      | 27/79 [00:01<00:03, 13.49it/s]
 38%|      | 30/79 [00:02<00:03, 15.72it/s]
 42%|     | 33/79 [00:02<00:02, 17.63it/s]
 46%|     | 36/79 [00:02<00:02, 19.23it/s]
 49%|     | 39/79 [00:02<00:01, 20.60it/s]
 53%|    | 42/79 [00:02<00:01, 21.81it/s]
 57%|    | 45/79 [00:02<00:01, 22.50it/s]
 61%|    | 48/79 [00:02<00:01, 22.98it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.08it/s]
 28%|       | 22/79 [00:01<00:06,  9.06it/s]
 32%|      | 25/79 [00:01<00:04, 11.18it/s]
 35%|      | 28/79 [00:01<00:03, 13.41it/s]
 39%|      | 31/79 [00:02<00:03, 15.51it/s]
 43%|     | 34/79 [00:02<00:02, 17.45it/s]
 47%|     | 37/79 [00:02<00:02, 19.22it/s]
 51%|     | 40/79 [00:02<00:01, 20.30it/s]
 54%|    | 43/79 [00:02<00:01, 21.56it/s]
 58%|    | 46/79 [00:02<00:01, 22.13it/s]
 62%|   | 49/79 [00:02<00:01, 23.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.24it/s]
 35%|      | 28/79 [00:01<00:03, 13.51it/s]
 39%|      | 31/79 [00:02<00:03, 15.84it/s]
 43%|     | 34/79 [00:02<00:02, 17.74it/s]
 47%|     | 37/79 [00:02<00:02, 19.46it/s]
 51%|     | 40/79 [00:02<00:01, 20.98it/s]
 54%|    | 43/79 [00:02<00:01, 21.95it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.36it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.09it/s]
 20%|        | 16/79 [00:01<00:11,  5.46it/s]
 24%|       | 19/79 [00:01<00:08,  7.14it/s]
 28%|       | 22/79 [00:01<00:06,  9.09it/s]
 32%|      | 25/79 [00:01<00:04, 11.24it/s]
 35%|      | 28/79 [00:01<00:03, 13.45it/s]
 39%|      | 31/79 [00:02<00:03, 15.67it/s]
 43%|     | 34/79 [00:02<00:02, 17.56it/s]
 47%|     | 37/79 [00:02<00:02, 19.11it/s]
 51%|     | 40/79 [00:02<00:01, 20.52it/s]
 54%|    | 43/79 [00:02<00:01, 21.59it/s]
 58%|    | 46/79 [00:02<00:01, 22.32it/s]
 62%|   | 49/79 [00:02<00:01, 23.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.27it/s]
 32%|      | 25/79 [00:01<00:04, 11.40it/s]
 35%|      | 28/79 [00:01<00:03, 13.71it/s]
 39%|      | 31/79 [00:02<00:03, 15.73it/s]
 43%|     | 34/79 [00:02<00:02, 17.69it/s]
 47%|     | 37/79 [00:02<00:02, 19.32it/s]
 51%|     | 40/79 [00:02<00:01, 20.50it/s]
 54%|    | 43/79 [00:02<00:01, 21.81it/s]
 58%|    | 46/79 [00:02<00:01, 22.71it/s]
 62%|   | 49/79 [00:02<00:01, 23.16it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:01<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.27it/s]
 32%|      | 25/79 [00:01<00:04, 11.41it/s]
 35%|      | 28/79 [00:01<00:03, 13.62it/s]
 39%|      | 31/79 [00:02<00:03, 15.66it/s]
 43%|     | 34/79 [00:02<00:02, 17.51it/s]
 47%|     | 37/79 [00:02<00:02, 19.06it/s]
 51%|     | 40/79 [00:02<00:01, 20.45it/s]
 54%|    | 43/79 [00:02<00:01, 21.53it/s]
 58%|    | 46/79 [00:02<00:01, 22.42it/s]
 62%|   | 49/79 [00:02<00:01, 23.19it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.48it/s]
 24%|       | 19/79 [00:01<00:08,  7.14it/s]
 28%|       | 22/79 [00:01<00:06,  9.04it/s]
 32%|      | 25/79 [00:01<00:04, 11.19it/s]
 35%|      | 28/79 [00:01<00:03, 13.40it/s]
 39%|      | 31/79 [00:02<00:03, 15.51it/s]
 43%|     | 34/79 [00:02<00:02, 17.47it/s]
 47%|     | 37/79 [00:02<00:02, 19.21it/s]
 51%|     | 40/79 [00:02<00:01, 20.59it/s]
 54%|    | 43/79 [00:02<00:01, 21.58it/s]
 58%|    | 46/79 [00:02<00:01, 22.66it/s]
 62%|   | 49/79 [00:02<00:01, 23.32it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.05it/s]
 28%|       | 22/79 [00:01<00:06,  9.00it/s]
 32%|      | 25/79 [00:01<00:04, 11.10it/s]
 35%|      | 28/79 [00:02<00:03, 13.29it/s]
 39%|      | 31/79 [00:02<00:03, 15.41it/s]
 43%|     | 34/79 [00:02<00:02, 17.37it/s]
 47%|     | 37/79 [00:02<00:02, 18.99it/s]
 51%|     | 40/79 [00:02<00:01, 20.44it/s]
 54%|    | 43/79 [00:02<00:01, 21.42it/s]
 58%|    | 46/79 [00:02<00:01, 22.37it/s]
 62%|   | 49/79 [00:02<00:01, 23.10it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.97it/s]
 20%|        | 16/79 [00:01<00:11,  5.31it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.82it/s]
 32%|      | 25/79 [00:01<00:04, 10.99it/s]
 35%|      | 28/79 [00:02<00:03, 13.13it/s]
 39%|      | 31/79 [00:02<00:03, 15.38it/s]
 43%|     | 34/79 [00:02<00:02, 17.48it/s]
 47%|     | 37/79 [00:02<00:02, 19.10it/s]
 51%|     | 40/79 [00:02<00:01, 20.38it/s]
 54%|    | 43/79 [00:02<00:01, 21.45it/s]
 58%|    | 46/79 [00:02<00:01, 22.30it/s]
 62%|   | 49/79 [00:02<00:01, 22.94it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.21it/s]
 32%|      | 25/79 [00:01<00:04, 11.31it/s]
 35%|      | 28/79 [00:01<00:03, 13.49it/s]
 39%|      | 31/79 [00:02<00:03, 15.69it/s]
 43%|     | 34/79 [00:02<00:02, 17.56it/s]
 47%|     | 37/79 [00:02<00:02, 19.16it/s]
 51%|     | 40/79 [00:02<00:01, 20.47it/s]
 54%|    | 43/79 [00:02<00:01, 21.58it/s]
 58%|    | 46/79 [00:02<00:01, 22.24it/s]
 62%|   | 49/79 [00:02<00:01, 22.71it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:01<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.22it/s]
 32%|      | 25/79 [00:01<00:04, 11.37it/s]
 35%|      | 28/79 [00:01<00:03, 13.52it/s]
 39%|      | 31/79 [00:02<00:03, 15.57it/s]
 43%|     | 34/79 [00:02<00:02, 17.40it/s]
 47%|     | 37/79 [00:02<00:02, 19.05it/s]
 51%|     | 40/79 [00:02<00:01, 20.38it/s]
 54%|    | 43/79 [00:02<00:01, 21.36it/s]
 58%|    | 46/79 [00:02<00:01, 22.18it/s]
 62%|   | 49/79 [00:02<00:01, 22.77it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.17it/s]
 20%|        | 16/79 [00:01<00:11,  5.57it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.35it/s]
 35%|      | 28/79 [00:01<00:03, 13.52it/s]
 39%|      | 31/79 [00:02<00:03, 15.47it/s]
 43%|     | 34/79 [00:02<00:02, 17.35it/s]
 47%|     | 37/79 [00:02<00:02, 18.93it/s]
 51%|     | 40/79 [00:02<00:01, 20.19it/s]
 54%|    | 43/79 [00:02<00:01, 21.13it/s]
 58%|    | 46/79 [00:02<00:01, 22.08it/s]
 62%|   | 49/79 [00:02<00:01, 22.29it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  4%|         | 3/79 [00:00<00:48,  1.56it/s]
  8%|         | 6/79 [00:01<00:33,  2.17it/s]
 11%|        | 9/79 [00:01<00:23,  2.99it/s]
 15%|        | 12/79 [00:01<00:16,  4.05it/s]
 19%|        | 15/79 [00:01<00:11,  5.40it/s]
 23%|       | 18/79 [00:01<00:08,  7.03it/s]
 27%|       | 21/79 [00:01<00:06,  8.95it/s]
 30%|       | 24/79 [00:01<00:04, 11.01it/s]
 34%|      | 27/79 [00:02<00:03, 13.13it/s]
 38%|      | 30/79 [00:02<00:03, 15.20it/s]
 42%|     | 33/79 [00:02<00:02, 17.10it/s]
 46%|     | 36/79 [00:02<00:02, 18.62it/s]
 49%|     | 39/79 [00:02<00:02, 19.85it/s]
 53%|    | 42/79 [00:02<00:01, 20.82it/s]
 57%|    | 45/79 [00:02<00:01, 21.60it/s]
 61%|    | 48/79 [00:02<00:01, 22.44it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  6.97it/s]
 28%|       | 22/79 [00:01<00:06,  8.87it/s]
 32%|      | 25/79 [00:01<00:04, 10.97it/s]
 35%|      | 28/79 [00:02<00:03, 13.20it/s]
 39%|      | 31/79 [00:02<00:03, 15.19it/s]
 43%|     | 34/79 [00:02<00:02, 17.16it/s]
 47%|     | 37/79 [00:02<00:02, 18.90it/s]
 51%|     | 40/79 [00:02<00:01, 20.34it/s]
 54%|    | 43/79 [00:02<00:01, 20.60it/s]
 58%|    | 46/79 [00:02<00:01, 20.80it/s]
 62%|   | 49/79 [00:02<00:01, 22.06it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.09it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.13it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.52it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.63it/s]
 47%|     | 37/79 [00:02<00:02, 19.35it/s]
 51%|     | 40/79 [00:02<00:01, 20.82it/s]
 54%|    | 43/79 [00:02<00:01, 22.13it/s]
 58%|    | 46/79 [00:02<00:01, 22.00it/s]
 62%|   | 49/79 [00:02<00:01, 20.05it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  6.96it/s]
 28%|       | 22/79 [00:01<00:06,  8.88it/s]
 32%|      | 25/79 [00:01<00:04, 10.96it/s]
 35%|      | 28/79 [00:02<00:03, 13.14it/s]
 39%|      | 31/79 [00:02<00:03, 15.27it/s]
 43%|     | 34/79 [00:02<00:02, 17.03it/s]
 47%|     | 37/79 [00:02<00:02, 18.60it/s]
 51%|     | 40/79 [00:02<00:01, 19.97it/s]
 54%|    | 43/79 [00:02<00:01, 21.12it/s]
 58%|    | 46/79 [00:02<00:01, 21.88it/s]
 62%|   | 49/79 [00:02<00:01, 22.58it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.36it/s]
 24%|       | 19/79 [00:01<00:08,  6.98it/s]
 28%|       | 22/79 [00:01<00:06,  8.85it/s]
 32%|      | 25/79 [00:01<00:04, 11.00it/s]
 35%|      | 28/79 [00:02<00:03, 13.07it/s]
 39%|      | 31/79 [00:02<00:03, 15.20it/s]
 43%|     | 34/79 [00:02<00:02, 17.04it/s]
 47%|     | 37/79 [00:02<00:02, 18.73it/s]
 51%|     | 40/79 [00:02<00:01, 20.18it/s]
 54%|    | 43/79 [00:02<00:01, 21.15it/s]
 58%|    | 46/79 [00:02<00:01, 21.83it/s]
 62%|   | 49/79 [00:02<00:01, 22.55it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  9.03it/s]
 32%|      | 25/79 [00:01<00:04, 11.20it/s]
 35%|      | 28/79 [00:01<00:03, 13.41it/s]
 39%|      | 31/79 [00:02<00:03, 15.52it/s]
 43%|     | 34/79 [00:02<00:02, 17.67it/s]
 47%|     | 37/79 [00:02<00:02, 19.34it/s]
 51%|     | 40/79 [00:02<00:01, 20.73it/s]
 54%|    | 43/79 [00:02<00:01, 20.79it/s]
 58%|    | 46/79 [00:02<00:01, 19.19it/s]
 62%|   | 49/79 [00:02<00:01, 19.21it/s]
 66%|   | 52/79 [00:03<00:01, 23.86it/s]
 70%|   | 55/79 [00:02<00:00, 24.32it/s]
 73%|  | 58/79 [00:03<00:00, 24.46it/s]
 77%|  | 61/79 [00:03<00:00, 24.79it/s]
 81%|  | 64/79 [00:03<00:00, 24.87it/s]
 85%| | 67/79 [00:03<00:00, 24.90it/s]
 89%| | 70/79 [00:03<00:00, 24.71it/s]
 92%|| 73/79 [00:03<00:00, 25.14it/s]
 96%|| 76/79 [00:03<00:00, 25.68it/s]
100%|| 79/79 [00:03<00:00, 26.50it/s]
, 24.30it/s]
 70%|   | 55/79 [00:02<00:00, 24.85it/s]
 73%|  | 58/79 [00:03<00:00, 25.00it/s]
 77%|  | 61/79 [00:03<00:00, 25.01it/s]
 81%|  | 64/79 [00:03<00:00, 25.17it/s]
 85%| | 67/79 [00:03<00:00, 25.33it/s]
 89%| | 70/79 [00:03<00:00, 25.36it/s]
 92%|| 73/79 [00:03<00:00, 25.61it/s]
 96%|| 76/79 [00:03<00:00, 26.10it/s]
100%|| 79/79 [00:03<00:00, 26.83it/s]
88it/s]
 68%|   | 54/79 [00:02<00:01, 24.16it/s]
 72%|  | 57/79 [00:03<00:00, 24.52it/s]
 76%|  | 60/79 [00:03<00:00, 24.64it/s]
 80%|  | 63/79 [00:03<00:00, 24.57it/s]
 84%| | 66/79 [00:03<00:00, 24.53it/s]
 87%| | 69/79 [00:03<00:00, 24.67it/s]
 91%| | 72/79 [00:03<00:00, 24.55it/s]
 95%|| 75/79 [00:03<00:00, 25.41it/s]
 99%|| 78/79 [00:03<00:00, 25.89it/s]
100%|| 79/79 [00:03<00:00, 19.88it/s]
, 24.07it/s]
 70%|   | 55/79 [00:02<00:00, 24.19it/s]
 73%|  | 58/79 [00:03<00:00, 24.41it/s]
 77%|  | 61/79 [00:03<00:00, 24.77it/s]
 81%|  | 64/79 [00:03<00:00, 24.89it/s]
 85%| | 67/79 [00:03<00:00, 25.32it/s]
 89%| | 70/79 [00:03<00:00, 25.05it/s]
 92%|| 73/79 [00:03<00:00, 25.39it/s]
 96%|| 76/79 [00:03<00:00, 26.02it/s]
100%|| 79/79 [00:03<00:00, 26.91it/s]
, 23.72it/s]
 70%|   | 55/79 [00:02<00:00, 24.35it/s]
 73%|  | 58/79 [00:03<00:00, 24.48it/s]
 77%|  | 61/79 [00:03<00:00, 24.81it/s]
 81%|  | 64/79 [00:03<00:00, 24.81it/s]
 85%| | 67/79 [00:03<00:00, 24.99it/s]
 89%| | 70/79 [00:03<00:00, 25.04it/s]
 92%|| 73/79 [00:03<00:00, 25.24it/s]
 96%|| 76/79 [00:03<00:00, 25.76it/s]
100%|| 79/79 [00:03<00:00, 26.76it/s]
33it/s]
 68%|   | 54/79 [00:02<00:01, 24.55it/s]
 72%|  | 57/79 [00:03<00:00, 24.60it/s]
 76%|  | 60/79 [00:03<00:00, 24.74it/s]
 80%|  | 63/79 [00:03<00:00, 24.69it/s]
 84%| | 66/79 [00:03<00:00, 24.91it/s]
 87%| | 69/79 [00:03<00:00, 24.86it/s]
 91%| | 72/79 [00:03<00:00, 25.18it/s]
 95%|| 75/79 [00:03<00:00, 25.61it/s]
 99%|| 78/79 [00:03<00:00, 26.09it/s]
100%|| 79/79 [00:03<00:00, 19.83it/s]
, 24.25it/s]
 70%|   | 55/79 [00:02<00:00, 24.71it/s]
 73%|  | 58/79 [00:03<00:00, 24.57it/s]
 77%|  | 61/79 [00:03<00:00, 24.66it/s]
 81%|  | 64/79 [00:03<00:00, 24.71it/s]
 85%| | 67/79 [00:03<00:00, 24.79it/s]
 89%| | 70/79 [00:03<00:00, 24.89it/s]
 92%|| 73/79 [00:03<00:00, 25.52it/s]
 96%|| 76/79 [00:03<00:00, 26.18it/s]
100%|| 79/79 [00:03<00:00, 27.15it/s]
22it/s]
 68%|   | 54/79 [00:02<00:01, 24.65it/s]
 72%|  | 57/79 [00:03<00:00, 24.75it/s]
 76%|  | 60/79 [00:03<00:00, 24.95it/s]
 80%|  | 63/79 [00:03<00:00, 24.94it/s]
 84%| | 66/79 [00:03<00:00, 24.95it/s]
 87%| | 69/79 [00:03<00:00, 24.94it/s]
 91%| | 72/79 [00:03<00:00, 25.01it/s]
 95%|| 75/79 [00:03<00:00, 25.66it/s]
 99%|| 78/79 [00:03<00:00, 26.69it/s]
100%|| 79/79 [00:03<00:00, 19.84it/s]
, 23.66it/s]
 70%|   | 55/79 [00:03<00:00, 24.12it/s]
 73%|  | 58/79 [00:03<00:00, 24.19it/s]
 77%|  | 61/79 [00:03<00:00, 24.65it/s]
 81%|  | 64/79 [00:03<00:00, 24.92it/s]
 85%| | 67/79 [00:03<00:00, 24.86it/s]
 89%| | 70/79 [00:03<00:00, 24.80it/s]
 92%|| 73/79 [00:03<00:00, 25.22it/s]
 96%|| 76/79 [00:03<00:00, 25.89it/s]
100%|| 79/79 [00:03<00:00, 26.77it/s]
, 23.73it/s]
 70%|   | 55/79 [00:03<00:01, 23.75it/s]
 73%|  | 58/79 [00:03<00:00, 24.14it/s]
 77%|  | 61/79 [00:03<00:00, 24.51it/s]
 81%|  | 64/79 [00:03<00:00, 24.64it/s]
 85%| | 67/79 [00:03<00:00, 24.88it/s]
 89%| | 70/79 [00:03<00:00, 24.85it/s]
 92%|| 73/79 [00:03<00:00, 24.95it/s]
 96%|| 76/79 [00:03<00:00, 25.70it/s]
100%|| 79/79 [00:03<00:00, 26.60it/s]
08it/s]
 68%|   | 54/79 [00:02<00:01, 24.20it/s]
 72%|  | 57/79 [00:03<00:00, 24.33it/s]
 76%|  | 60/79 [00:03<00:00, 24.31it/s]
 80%|  | 63/79 [00:03<00:00, 24.44it/s]
 84%| | 66/79 [00:03<00:00, 24.53it/s]
 87%| | 69/79 [00:03<00:00, 24.57it/s]
 91%| | 72/79 [00:03<00:00, 24.39it/s]
 95%|| 75/79 [00:03<00:00, 25.22it/s]
 99%|| 78/79 [00:03<00:00, 25.68it/s]
100%|| 79/79 [00:04<00:00, 19.67it/s]
, 23.68it/s]
 70%|   | 55/79 [00:03<00:00, 24.22it/s]
 73%|  | 58/79 [00:03<00:00, 24.33it/s]
 77%|  | 61/79 [00:03<00:00, 24.53it/s]
 81%|  | 64/79 [00:03<00:00, 24.88it/s]
 85%| | 67/79 [00:03<00:00, 24.83it/s]
 89%| | 70/79 [00:03<00:00, 25.07it/s]
 92%|| 73/79 [00:03<00:00, 25.24it/s]
 96%|| 76/79 [00:03<00:00, 26.07it/s]
100%|| 79/79 [00:03<00:00, 26.96it/s]
, 24.05it/s]
 70%|   | 55/79 [00:03<00:00, 24.24it/s]
 73%|  | 58/79 [00:03<00:00, 24.20it/s]
 77%|  | 61/79 [00:03<00:00, 24.59it/s]
 81%|  | 64/79 [00:03<00:00, 24.92it/s]
 85%| | 67/79 [00:03<00:00, 25.05it/s]
 89%| | 70/79 [00:03<00:00, 24.90it/s]
 92%|| 73/79 [00:03<00:00, 25.19it/s]
 96%|| 76/79 [00:03<00:00, 26.13it/s]
100%|| 79/79 [00:03<00:00, 26.36it/s]
, 23.81it/s]
 70%|   | 55/79 [00:03<00:00, 24.21it/s]
 73%|  | 58/79 [00:03<00:00, 24.67it/s]
 77%|  | 61/79 [00:03<00:00, 24.66it/s]
 81%|  | 64/79 [00:03<00:00, 24.86it/s]
 85%| | 67/79 [00:03<00:00, 25.01it/s]
 89%| | 70/79 [00:03<00:00, 24.96it/s]
 92%|| 73/79 [00:03<00:00, 25.52it/s]
 96%|| 76/79 [00:03<00:00, 26.06it/s]
100%|| 79/79 [00:03<00:00, 26.77it/s]
, 23.33it/s]
 70%|   | 55/79 [00:03<00:01, 23.58it/s]
 73%|  | 58/79 [00:03<00:00, 23.88it/s]
 77%|  | 61/79 [00:03<00:00, 24.07it/s]
 81%|  | 64/79 [00:03<00:00, 24.10it/s]
 85%| | 67/79 [00:03<00:00, 24.19it/s]
 89%| | 70/79 [00:03<00:00, 24.29it/s]
 92%|| 73/79 [00:03<00:00, 24.46it/s]
 96%|| 76/79 [00:03<00:00, 25.14it/s]
100%|| 79/79 [00:03<00:00, 26.27it/s]
, 23.79it/s]
 70%|   | 55/79 [00:03<00:00, 24.04it/s]
 73%|  | 58/79 [00:03<00:00, 24.25it/s]
 77%|  | 61/79 [00:03<00:00, 24.17it/s]
 81%|  | 64/79 [00:03<00:00, 24.18it/s]
 85%| | 67/79 [00:03<00:00, 24.23it/s]
 89%| | 70/79 [00:03<00:00, 24.46it/s]
 92%|| 73/79 [00:03<00:00, 24.85it/s]
 96%|| 76/79 [00:03<00:00, 25.51it/s]
100%|| 79/79 [00:03<00:00, 26.47it/s]
, 23.87it/s]
 70%|   | 55/79 [00:03<00:00, 24.46it/s]
 73%|  | 58/79 [00:03<00:00, 24.61it/s]
 77%|  | 61/79 [00:03<00:00, 24.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.71it/s]
 85%| | 67/79 [00:03<00:00, 24.69it/s]
 89%| | 70/79 [00:03<00:00, 24.32it/s]
 92%|| 73/79 [00:03<00:00, 24.90it/s]
 96%|| 76/79 [00:03<00:00, 25.51it/s]
100%|| 79/79 [00:04<00:00, 26.43it/s]
, 23.31it/s]
 70%|   | 55/79 [00:03<00:01, 23.55it/s]
 73%|  | 58/79 [00:03<00:00, 23.89it/s]
 77%|  | 61/79 [00:03<00:00, 23.90it/s]
 81%|  | 64/79 [00:03<00:00, 24.01it/s]
 85%| | 67/79 [00:03<00:00, 23.90it/s]
 89%| | 70/79 [00:03<00:00, 23.86it/s]
 92%|| 73/79 [00:03<00:00, 24.21it/s]
 96%|| 76/79 [00:03<00:00, 24.97it/s]
100%|| 79/79 [00:04<00:00, 25.90it/s]
, 23.70it/s]
 70%|   | 55/79 [00:03<00:00, 24.12it/s]
 73%|  | 58/79 [00:03<00:00, 24.31it/s]
 77%|  | 61/79 [00:03<00:00, 24.45it/s]
 81%|  | 64/79 [00:03<00:00, 24.55it/s]
 85%| | 67/79 [00:03<00:00, 24.55it/s]
 89%| | 70/79 [00:03<00:00, 24.67it/s]
 92%|| 73/79 [00:03<00:00, 25.03it/s]
 96%|| 76/79 [00:03<00:00, 25.55it/s]
100%|| 79/79 [00:04<00:00, 26.49it/s]
34it/s]
 68%|   | 54/79 [00:03<00:01, 23.76it/s]
 72%|  | 57/79 [00:03<00:00, 23.95it/s]
 76%|  | 60/79 [00:03<00:00, 24.23it/s]
 80%|  | 63/79 [00:03<00:00, 24.26it/s]
 84%| | 66/79 [00:03<00:00, 24.54it/s]
 87%| | 69/79 [00:03<00:00, 24.44it/s]
 91%| | 72/79 [00:03<00:00, 24.49it/s]
 95%|| 75/79 [00:03<00:00, 25.22it/s]
 99%|| 78/79 [00:03<00:00, 25.75it/s]
100%|| 79/79 [00:04<00:00, 19.33it/s]
, 23.78it/s]
 70%|   | 55/79 [00:03<00:01, 23.88it/s]
 73%|  | 58/79 [00:03<00:00, 24.31it/s]
 77%|  | 61/79 [00:03<00:00, 24.75it/s]
 81%|  | 64/79 [00:03<00:00, 24.52it/s]
 85%| | 67/79 [00:03<00:00, 24.48it/s]
 89%| | 70/79 [00:03<00:00, 24.73it/s]
 92%|| 73/79 [00:03<00:00, 24.78it/s]
 96%|| 76/79 [00:03<00:00, 25.98it/s]
100%|| 79/79 [00:04<00:00, 26.38it/s]
, 23.58it/s]
 70%|   | 55/79 [00:03<00:01, 23.95it/s]
 73%|  | 58/79 [00:03<00:00, 24.15it/s]
 77%|  | 61/79 [00:03<00:00, 24.41it/s]
 81%|  | 64/79 [00:03<00:00, 24.57it/s]
 85%| | 67/79 [00:03<00:00, 24.69it/s]
 89%| | 70/79 [00:03<00:00, 24.72it/s]
 92%|| 73/79 [00:03<00:00, 24.76it/s]
 96%|| 76/79 [00:03<00:00, 25.41it/s]
100%|| 79/79 [00:04<00:00, 26.08it/s]
, 23.46it/s]
 70%|   | 55/79 [00:03<00:01, 23.67it/s]
 73%|  | 58/79 [00:03<00:00, 24.02it/s]
 77%|  | 61/79 [00:03<00:00, 24.44it/s]
 81%|  | 64/79 [00:03<00:00, 24.61it/s]
 85%| | 67/79 [00:03<00:00, 24.68it/s]
 89%| | 70/79 [00:03<00:00, 24.80it/s]
 92%|| 73/79 [00:03<00:00, 24.87it/s]
 96%|| 76/79 [00:03<00:00, 25.37it/s]
100%|| 79/79 [00:04<00:00, 26.04it/s]
, 23.35it/s]
 70%|   | 55/79 [00:03<00:01, 23.76it/s]
 73%|  | 58/79 [00:03<00:00, 23.99it/s]
 77%|  | 61/79 [00:03<00:00, 24.25it/s]
 81%|  | 64/79 [00:03<00:00, 24.37it/s]
 85%| | 67/79 [00:03<00:00, 24.43it/s]
 89%| | 70/79 [00:03<00:00, 24.36it/s]
 92%|| 73/79 [00:03<00:00, 24.72it/s]
 96%|| 76/79 [00:03<00:00, 25.24it/s]
100%|| 79/79 [00:04<00:00, 25.97it/s]
, 22.98it/s]
 70%|   | 55/79 [00:03<00:01, 23.04it/s]
 73%|  | 58/79 [00:03<00:00, 23.72it/s]
 77%|  | 61/79 [00:03<00:00, 23.59it/s]
 81%|  | 64/79 [00:03<00:00, 23.82it/s]
 85%| | 67/79 [00:03<00:00, 23.84it/s]
 89%| | 70/79 [00:03<00:00, 23.89it/s]
 92%|| 73/79 [00:03<00:00, 24.25it/s]
 96%|| 76/79 [00:03<00:00, 25.04it/s]
100%|| 79/79 [00:04<00:00, 25.80it/s]
, 23.10it/s]
 70%|   | 55/79 [00:03<00:01, 23.68it/s]
 73%|  | 58/79 [00:03<00:00, 23.67it/s]
 77%|  | 61/79 [00:03<00:00, 23.56it/s]
 81%|  | 64/79 [00:03<00:00, 23.63it/s]
 85%| | 67/79 [00:03<00:00, 23.65it/s]
 89%| | 70/79 [00:03<00:00, 23.56it/s]
 92%|| 73/79 [00:03<00:00, 23.62it/s]
 96%|| 76/79 [00:03<00:00, 24.49it/s]
100%|| 79/79 [00:04<00:00, 25.59it/s]
, 22.70it/s]
 70%|   | 55/79 [00:03<00:01, 22.80it/s]
 73%|  | 58/79 [00:03<00:00, 23.39it/s]
 77%|  | 61/79 [00:03<00:00, 23.74it/s]
 81%|  | 64/79 [00:03<00:00, 23.96it/s]
 85%| | 67/79 [00:03<00:00, 24.13it/s]
 89%| | 70/79 [00:03<00:00, 24.47it/s]
 92%|| 73/79 [00:03<00:00, 24.28it/s]
 96%|| 76/79 [00:04<00:00, 25.27it/s]
100%|| 79/79 [00:04<00:00, 26.27it/s]
, 20.62it/s]
 70%|   | 55/79 [00:03<00:01, 21.68it/s]
 73%|  | 58/79 [00:03<00:00, 22.66it/s]
 77%|  | 61/79 [00:03<00:00, 23.45it/s]
 81%|  | 64/79 [00:03<00:00, 23.99it/s]
 85%| | 67/79 [00:03<00:00, 24.31it/s]
 89%| | 70/79 [00:03<00:00, 24.65it/s]
 92%|| 73/79 [00:03<00:00, 25.03it/s]
 96%|| 76/79 [00:04<00:00, 25.62it/s]
100%|| 79/79 [00:04<00:00, 26.66it/s]
, 22.94it/s]
 70%|   | 55/79 [00:03<00:01, 23.47it/s]
 73%|  | 58/79 [00:03<00:00, 23.46it/s]
 77%|  | 61/79 [00:03<00:00, 23.62it/s]
 81%|  | 64/79 [00:03<00:00, 23.81it/s]
 85%| | 67/79 [00:03<00:00, 24.02it/s]
 89%| | 70/79 [00:03<00:00, 23.69it/s]
 92%|| 73/79 [00:03<00:00, 24.01it/s]
 96%|| 76/79 [00:04<00:00, 24.74it/s]
100%|| 79/79 [00:04<00:00, 25.81it/s]
, 19.45it/s]
 70%|   | 55/79 [00:03<00:01, 20.82it/s]
 73%|  | 58/79 [00:03<00:01, 20.97it/s]
 77%|  | 61/79 [00:03<00:00, 20.12it/s]
 81%|  | 64/79 [00:03<00:00, 21.05it/s]
 85%| | 67/79 [00:03<00:00, 22.02it/s]
 89%| | 70/79 [00:03<00:00, 22.79it/s]
 92%|| 73/79 [00:03<00:00, 23.38it/s]
 96%|| 76/79 [00:04<00:00, 24.49it/s]
100%|| 79/79 [00:04<00:00, 25.63it/s]
72it/s]
 68%|   | 54/79 [00:03<00:01, 23.12it/s]
 72%|  | 57/79 [00:03<00:00, 23.53it/s]
 76%|  | 60/79 [00:03<00:00, 23.52it/s]
 80%|  | 63/79 [00:03<00:00, 23.55it/s]
 84%| | 66/79 [00:03<00:00, 23.58it/s]
 87%| | 69/79 [00:03<00:00, 23.85it/s]
 91%| | 72/79 [00:03<00:00, 24.01it/s]
 95%|| 75/79 [00:03<00:00, 24.66it/s]
 99%|| 78/79 [00:04<00:00, 25.27it/s]
100%|| 79/79 [00:04<00:00, 18.65it/s]
, 22.70it/s]
 70%|   | 55/79 [00:03<00:01, 23.18it/s]
 73%|  | 58/79 [00:03<00:00, 23.28it/s]
 77%|  | 61/79 [00:03<00:00, 23.22it/s]
 81%|  | 64/79 [00:03<00:00, 23.34it/s]
 85%| | 67/79 [00:03<00:00, 23.56it/s]
 89%| | 70/79 [00:03<00:00, 23.71it/s]
 92%|| 73/79 [00:03<00:00, 24.02it/s]
 96%|| 76/79 [00:04<00:00, 24.81it/s]
100%|| 79/79 [00:04<00:00, 25.79it/s]
2020-06-23 16:30:24,568 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.240733 (0.027140692138671874 s / img per device, on 32 devices)
2020-06-23 16:30:24,592 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:30:24,592 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:30:24,614 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592955038475, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 7, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592955038476, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 7}}

Grad overflow on iteration  5502

Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502

Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0

Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0


Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502

Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502
Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0
Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0


Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502
Grad overflow on iteration  5502


Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0
Grad overflow on iteration  5502
Grad overflow on iteration  5502

Using dynamic loss scale of  16384.0

Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0
Grad overflow on iteration  5502
Using dynamic loss scale of  16384.0
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:30:40,448 maskrcnn_benchmark.trainer INFO: eta: 1:13:41  iter: 5520  loss: 0.7474 (0.8205)  loss_classifier: 0.2740 (0.3062)  loss_box_reg: 0.1273 (0.1305)  loss_mask: 0.2948 (0.3183)  loss_objectness: 0.0256 (0.0432)  loss_rpn_box_reg: 0.0126 (0.0223)  time: 0.1083 (0.1282)  data: 0.0016 (0.0203)  lr: 0.160000  max mem: 5120
2020-06-23 16:30:42,594 maskrcnn_benchmark.trainer INFO: eta: 1:13:36  iter: 5540  loss: 0.7186 (0.8200)  loss_classifier: 0.2419 (0.3060)  loss_box_reg: 0.1102 (0.1304)  loss_mask: 0.2724 (0.3182)  loss_objectness: 0.0278 (0.0431)  loss_rpn_box_reg: 0.0138 (0.0223)  time: 0.1072 (0.1282)  data: 0.0014 (0.0203)  lr: 0.160000  max mem: 5120
2020-06-23 16:30:44,751 maskrcnn_benchmark.trainer INFO: eta: 1:13:31  iter: 5560  loss: 0.7038 (0.8195)  loss_classifier: 0.2457 (0.3058)  loss_box_reg: 0.0989 (0.1303)  loss_mask: 0.2556 (0.3180)  loss_objectness: 0.0200 (0.0431)  loss_rpn_box_reg: 0.0127 (0.0223)  time: 0.1072 (0.1281)  data: 0.0015 (0.0202)  lr: 0.160000  max mem: 5120
2020-06-23 16:30:46,906 maskrcnn_benchmark.trainer INFO: eta: 1:13:26  iter: 5580  loss: 0.6417 (0.8189)  loss_classifier: 0.2146 (0.3055)  loss_box_reg: 0.0956 (0.1302)  loss_mask: 0.2545 (0.3178)  loss_objectness: 0.0234 (0.0431)  loss_rpn_box_reg: 0.0075 (0.0223)  time: 0.1082 (0.1280)  data: 0.0016 (0.0201)  lr: 0.160000  max mem: 5120
2020-06-23 16:30:49,082 maskrcnn_benchmark.trainer INFO: eta: 1:13:21  iter: 5600  loss: 0.7147 (0.8185)  loss_classifier: 0.2510 (0.3053)  loss_box_reg: 0.1259 (0.1302)  loss_mask: 0.2764 (0.3176)  loss_objectness: 0.0252 (0.0430)  loss_rpn_box_reg: 0.0108 (0.0223)  time: 0.1085 (0.1279)  data: 0.0015 (0.0200)  lr: 0.160000  max mem: 5120
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=1.24s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:30:51,236 maskrcnn_benchmark.trainer INFO: eta: 1:13:16  iter: 5620  loss: 0.6258 (0.8179)  loss_classifier: 0.2314 (0.3051)  loss_box_reg: 0.0924 (0.1301)  loss_mask: 0.2617 (0.3175)  loss_objectness: 0.0227 (0.0430)  loss_rpn_box_reg: 0.0084 (0.0223)  time: 0.1073 (0.1279)  data: 0.0015 (0.0200)  lr: 0.160000  max mem: 5120
DONE (t=2.11s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.25602
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.44593
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.26560
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.14155
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.27313
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.33130
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.24504
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.39720
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.42030
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24388
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.44679
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.53570
2020-06-23 16:30:53,395 maskrcnn_benchmark.trainer INFO: eta: 1:13:11  iter: 5640  loss: 0.6441 (0.8174)  loss_classifier: 0.2140 (0.3048)  loss_box_reg: 0.1072 (0.1301)  loss_mask: 0.2647 (0.3173)  loss_objectness: 0.0219 (0.0430)  loss_rpn_box_reg: 0.0068 (0.0223)  time: 0.1072 (0.1278)  data: 0.0015 (0.0199)  lr: 0.160000  max mem: 5120
2020-06-23 16:30:55,551 maskrcnn_benchmark.trainer INFO: eta: 1:13:06  iter: 5660  loss: 0.7151 (0.8170)  loss_classifier: 0.2424 (0.3046)  loss_box_reg: 0.1160 (0.1300)  loss_mask: 0.2770 (0.3171)  loss_objectness: 0.0298 (0.0429)  loss_rpn_box_reg: 0.0113 (0.0223)  time: 0.1079 (0.1277)  data: 0.0015 (0.0199)  lr: 0.160000  max mem: 5120
2020-06-23 16:30:57,735 maskrcnn_benchmark.trainer INFO: eta: 1:13:01  iter: 5680  loss: 0.6611 (0.8167)  loss_classifier: 0.2647 (0.3045)  loss_box_reg: 0.1111 (0.1300)  loss_mask: 0.2964 (0.3171)  loss_objectness: 0.0209 (0.0429)  loss_rpn_box_reg: 0.0119 (0.0223)  time: 0.1089 (0.1277)  data: 0.0015 (0.0198)  lr: 0.160000  max mem: 5120
2020-06-23 16:30:59,907 maskrcnn_benchmark.trainer INFO: eta: 1:12:56  iter: 5700  loss: 0.6400 (0.8163)  loss_classifier: 0.2210 (0.3042)  loss_box_reg: 0.1008 (0.1299)  loss_mask: 0.2486 (0.3169)  loss_objectness: 0.0255 (0.0429)  loss_rpn_box_reg: 0.0133 (0.0223)  time: 0.1091 (0.1276)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:02,064 maskrcnn_benchmark.trainer INFO: eta: 1:12:51  iter: 5720  loss: 0.5763 (0.8155)  loss_classifier: 0.2141 (0.3039)  loss_box_reg: 0.0864 (0.1298)  loss_mask: 0.2581 (0.3167)  loss_objectness: 0.0127 (0.0428)  loss_rpn_box_reg: 0.0081 (0.0223)  time: 0.1069 (0.1275)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5120
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:31:04,213 maskrcnn_benchmark.trainer INFO: eta: 1:12:46  iter: 5740  loss: 0.7134 (0.8151)  loss_classifier: 0.2750 (0.3038)  loss_box_reg: 0.1078 (0.1298)  loss_mask: 0.2805 (0.3165)  loss_objectness: 0.0203 (0.0428)  loss_rpn_box_reg: 0.0062 (0.0222)  time: 0.1067 (0.1275)  data: 0.0015 (0.0196)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:06,367 maskrcnn_benchmark.trainer INFO: eta: 1:12:42  iter: 5760  loss: 0.6967 (0.8147)  loss_classifier: 0.2314 (0.3036)  loss_box_reg: 0.1324 (0.1297)  loss_mask: 0.2834 (0.3164)  loss_objectness: 0.0252 (0.0427)  loss_rpn_box_reg: 0.0115 (0.0223)  time: 0.1066 (0.1274)  data: 0.0015 (0.0195)  lr: 0.160000  max mem: 5120
DONE (t=3.20s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:31:08,534 maskrcnn_benchmark.trainer INFO: eta: 1:12:37  iter: 5780  loss: 0.6562 (0.8143)  loss_classifier: 0.2317 (0.3034)  loss_box_reg: 0.1039 (0.1297)  loss_mask: 0.2637 (0.3162)  loss_objectness: 0.0309 (0.0427)  loss_rpn_box_reg: 0.0099 (0.0223)  time: 0.1084 (0.1273)  data: 0.0015 (0.0195)  lr: 0.160000  max mem: 5120
DONE (t=3.37s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.24731
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.42260
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.25658
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.10294
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.26585
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.37340
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.24123
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.37840
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.39786
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20742
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.42940
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.53971
2020-06-23 16:31:10,701 maskrcnn_benchmark.trainer INFO: eta: 1:12:32  iter: 5800  loss: 0.6566 (0.8138)  loss_classifier: 0.2128 (0.3032)  loss_box_reg: 0.0966 (0.1296)  loss_mask: 0.2919 (0.3161)  loss_objectness: 0.0216 (0.0427)  loss_rpn_box_reg: 0.0099 (0.0222)  time: 0.1085 (0.1273)  data: 0.0015 (0.0194)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:11,155 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.2560169880375962, segm mAP: 0.24730775349867284
:::MLLOG {"namespace": "", "time_ms": 1592955071156, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.2560169880375962, "SEGM": 0.24730775349867284}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 6}}
:::MLLOG {"namespace": "", "time_ms": 1592955071156, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 6}}
2020-06-23 16:31:13,123 maskrcnn_benchmark.trainer INFO: eta: 1:12:29  iter: 5820  loss: 0.6357 (0.8133)  loss_classifier: 0.2284 (0.3029)  loss_box_reg: 0.0955 (0.1296)  loss_mask: 0.2756 (0.3159)  loss_objectness: 0.0183 (0.0426)  loss_rpn_box_reg: 0.0065 (0.0222)  time: 0.1088 (0.1272)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:15,287 maskrcnn_benchmark.trainer INFO: eta: 1:12:24  iter: 5840  loss: 0.6030 (0.8128)  loss_classifier: 0.2672 (0.3028)  loss_box_reg: 0.0942 (0.1295)  loss_mask: 0.2533 (0.3157)  loss_objectness: 0.0229 (0.0426)  loss_rpn_box_reg: 0.0081 (0.0222)  time: 0.1081 (0.1272)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:17,472 maskrcnn_benchmark.trainer INFO: eta: 1:12:19  iter: 5860  loss: 0.6513 (0.8123)  loss_classifier: 0.2331 (0.3025)  loss_box_reg: 0.1215 (0.1294)  loss_mask: 0.2463 (0.3155)  loss_objectness: 0.0253 (0.0426)  loss_rpn_box_reg: 0.0119 (0.0222)  time: 0.1077 (0.1271)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:19,638 maskrcnn_benchmark.trainer INFO: eta: 1:12:15  iter: 5880  loss: 0.6671 (0.8118)  loss_classifier: 0.2511 (0.3024)  loss_box_reg: 0.1044 (0.1294)  loss_mask: 0.2801 (0.3153)  loss_objectness: 0.0204 (0.0425)  loss_rpn_box_reg: 0.0085 (0.0222)  time: 0.1077 (0.1271)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:21,793 maskrcnn_benchmark.trainer INFO: eta: 1:12:10  iter: 5900  loss: 0.5875 (0.8112)  loss_classifier: 0.2145 (0.3022)  loss_box_reg: 0.0951 (0.1293)  loss_mask: 0.2526 (0.3151)  loss_objectness: 0.0182 (0.0425)  loss_rpn_box_reg: 0.0082 (0.0221)  time: 0.1068 (0.1270)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:23,952 maskrcnn_benchmark.trainer INFO: eta: 1:12:05  iter: 5920  loss: 0.6587 (0.8107)  loss_classifier: 0.2447 (0.3020)  loss_box_reg: 0.1235 (0.1292)  loss_mask: 0.2708 (0.3150)  loss_objectness: 0.0197 (0.0424)  loss_rpn_box_reg: 0.0076 (0.0221)  time: 0.1079 (0.1269)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:26,118 maskrcnn_benchmark.trainer INFO: eta: 1:12:00  iter: 5940  loss: 0.6977 (0.8103)  loss_classifier: 0.2383 (0.3018)  loss_box_reg: 0.1188 (0.1292)  loss_mask: 0.2927 (0.3149)  loss_objectness: 0.0211 (0.0423)  loss_rpn_box_reg: 0.0106 (0.0221)  time: 0.1078 (0.1269)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:28,270 maskrcnn_benchmark.trainer INFO: eta: 1:11:56  iter: 5960  loss: 0.6874 (0.8098)  loss_classifier: 0.2415 (0.3016)  loss_box_reg: 0.0970 (0.1291)  loss_mask: 0.2723 (0.3147)  loss_objectness: 0.0211 (0.0423)  loss_rpn_box_reg: 0.0121 (0.0221)  time: 0.1071 (0.1268)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:30,435 maskrcnn_benchmark.trainer INFO: eta: 1:11:51  iter: 5980  loss: 0.5904 (0.8093)  loss_classifier: 0.2053 (0.3014)  loss_box_reg: 0.0896 (0.1291)  loss_mask: 0.2534 (0.3146)  loss_objectness: 0.0176 (0.0422)  loss_rpn_box_reg: 0.0095 (0.0220)  time: 0.1081 (0.1267)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:32,599 maskrcnn_benchmark.trainer INFO: eta: 1:11:46  iter: 6000  loss: 0.6662 (0.8088)  loss_classifier: 0.1973 (0.3011)  loss_box_reg: 0.0928 (0.1290)  loss_mask: 0.2662 (0.3144)  loss_objectness: 0.0287 (0.0422)  loss_rpn_box_reg: 0.0087 (0.0221)  time: 0.1072 (0.1267)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:34,782 maskrcnn_benchmark.trainer INFO: eta: 1:11:42  iter: 6020  loss: 0.6138 (0.8084)  loss_classifier: 0.2387 (0.3009)  loss_box_reg: 0.0959 (0.1289)  loss_mask: 0.2753 (0.3143)  loss_objectness: 0.0222 (0.0422)  loss_rpn_box_reg: 0.0075 (0.0221)  time: 0.1085 (0.1266)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:36,947 maskrcnn_benchmark.trainer INFO: eta: 1:11:37  iter: 6040  loss: 0.7004 (0.8080)  loss_classifier: 0.2221 (0.3007)  loss_box_reg: 0.0951 (0.1288)  loss_mask: 0.2710 (0.3142)  loss_objectness: 0.0218 (0.0421)  loss_rpn_box_reg: 0.0172 (0.0221)  time: 0.1074 (0.1266)  data: 0.0013 (0.0187)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:39,113 maskrcnn_benchmark.trainer INFO: eta: 1:11:33  iter: 6060  loss: 0.6103 (0.8074)  loss_classifier: 0.2255 (0.3005)  loss_box_reg: 0.0958 (0.1287)  loss_mask: 0.2605 (0.3141)  loss_objectness: 0.0218 (0.0421)  loss_rpn_box_reg: 0.0116 (0.0221)  time: 0.1081 (0.1265)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:41,277 maskrcnn_benchmark.trainer INFO: eta: 1:11:28  iter: 6080  loss: 0.6437 (0.8068)  loss_classifier: 0.2396 (0.3002)  loss_box_reg: 0.1007 (0.1286)  loss_mask: 0.2383 (0.3139)  loss_objectness: 0.0241 (0.0421)  loss_rpn_box_reg: 0.0113 (0.0220)  time: 0.1081 (0.1264)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:43,433 maskrcnn_benchmark.trainer INFO: eta: 1:11:24  iter: 6100  loss: 0.6289 (0.8064)  loss_classifier: 0.2141 (0.3000)  loss_box_reg: 0.0962 (0.1286)  loss_mask: 0.2720 (0.3138)  loss_objectness: 0.0154 (0.0420)  loss_rpn_box_reg: 0.0072 (0.0220)  time: 0.1077 (0.1264)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:45,615 maskrcnn_benchmark.trainer INFO: eta: 1:11:19  iter: 6120  loss: 0.6664 (0.8059)  loss_classifier: 0.2243 (0.2998)  loss_box_reg: 0.1004 (0.1285)  loss_mask: 0.2820 (0.3137)  loss_objectness: 0.0170 (0.0420)  loss_rpn_box_reg: 0.0063 (0.0220)  time: 0.1084 (0.1263)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:47,772 maskrcnn_benchmark.trainer INFO: eta: 1:11:15  iter: 6140  loss: 0.6008 (0.8054)  loss_classifier: 0.2089 (0.2995)  loss_box_reg: 0.0914 (0.1284)  loss_mask: 0.2746 (0.3136)  loss_objectness: 0.0248 (0.0419)  loss_rpn_box_reg: 0.0119 (0.0220)  time: 0.1080 (0.1263)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:49,944 maskrcnn_benchmark.trainer INFO: eta: 1:11:10  iter: 6160  loss: 0.6981 (0.8049)  loss_classifier: 0.2557 (0.2993)  loss_box_reg: 0.0979 (0.1283)  loss_mask: 0.2744 (0.3135)  loss_objectness: 0.0214 (0.0419)  loss_rpn_box_reg: 0.0111 (0.0220)  time: 0.1084 (0.1262)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:52,102 maskrcnn_benchmark.trainer INFO: eta: 1:11:06  iter: 6180  loss: 0.7970 (0.8048)  loss_classifier: 0.2794 (0.2992)  loss_box_reg: 0.1373 (0.1284)  loss_mask: 0.2966 (0.3134)  loss_objectness: 0.0279 (0.0418)  loss_rpn_box_reg: 0.0107 (0.0220)  time: 0.1081 (0.1261)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:54,274 maskrcnn_benchmark.trainer INFO: eta: 1:11:01  iter: 6200  loss: 0.5550 (0.8042)  loss_classifier: 0.2092 (0.2990)  loss_box_reg: 0.0845 (0.1283)  loss_mask: 0.2479 (0.3132)  loss_objectness: 0.0226 (0.0418)  loss_rpn_box_reg: 0.0090 (0.0220)  time: 0.1082 (0.1261)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:56,447 maskrcnn_benchmark.trainer INFO: eta: 1:10:57  iter: 6220  loss: 0.5937 (0.8036)  loss_classifier: 0.2180 (0.2987)  loss_box_reg: 0.0838 (0.1282)  loss_mask: 0.2554 (0.3131)  loss_objectness: 0.0205 (0.0417)  loss_rpn_box_reg: 0.0121 (0.0219)  time: 0.1080 (0.1260)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5120
2020-06-23 16:31:58,643 maskrcnn_benchmark.trainer INFO: eta: 1:10:52  iter: 6240  loss: 0.6758 (0.8033)  loss_classifier: 0.2540 (0.2986)  loss_box_reg: 0.1207 (0.1281)  loss_mask: 0.2703 (0.3129)  loss_objectness: 0.0253 (0.0417)  loss_rpn_box_reg: 0.0108 (0.0219)  time: 0.1094 (0.1260)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5188
2020-06-23 16:32:00,803 maskrcnn_benchmark.trainer INFO: eta: 1:10:48  iter: 6260  loss: 0.6983 (0.8032)  loss_classifier: 0.2573 (0.2986)  loss_box_reg: 0.1216 (0.1282)  loss_mask: 0.2790 (0.3128)  loss_objectness: 0.0247 (0.0417)  loss_rpn_box_reg: 0.0145 (0.0219)  time: 0.1073 (0.1259)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5188
2020-06-23 16:32:02,965 maskrcnn_benchmark.trainer INFO: eta: 1:10:44  iter: 6280  loss: 0.7716 (0.8029)  loss_classifier: 0.2442 (0.2984)  loss_box_reg: 0.1187 (0.1281)  loss_mask: 0.2688 (0.3127)  loss_objectness: 0.0272 (0.0418)  loss_rpn_box_reg: 0.0128 (0.0220)  time: 0.1078 (0.1259)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5188
2020-06-23 16:32:05,123 maskrcnn_benchmark.trainer INFO: eta: 1:10:39  iter: 6300  loss: 0.6416 (0.8025)  loss_classifier: 0.2189 (0.2982)  loss_box_reg: 0.1108 (0.1280)  loss_mask: 0.2767 (0.3126)  loss_objectness: 0.0267 (0.0417)  loss_rpn_box_reg: 0.0120 (0.0220)  time: 0.1078 (0.1258)  data: 0.0013 (0.0180)  lr: 0.160000  max mem: 5188
2020-06-23 16:32:07,300 maskrcnn_benchmark.trainer INFO: eta: 1:10:35  iter: 6320  loss: 0.7056 (0.8021)  loss_classifier: 0.2388 (0.2980)  loss_box_reg: 0.0976 (0.1280)  loss_mask: 0.2583 (0.3124)  loss_objectness: 0.0191 (0.0417)  loss_rpn_box_reg: 0.0072 (0.0220)  time: 0.1077 (0.1257)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5188
2020-06-23 16:32:09,462 maskrcnn_benchmark.trainer INFO: eta: 1:10:30  iter: 6340  loss: 0.6894 (0.8018)  loss_classifier: 0.2268 (0.2979)  loss_box_reg: 0.1030 (0.1280)  loss_mask: 0.2897 (0.3124)  loss_objectness: 0.0237 (0.0416)  loss_rpn_box_reg: 0.0086 (0.0220)  time: 0.1077 (0.1257)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5188
2020-06-23 16:32:11,631 maskrcnn_benchmark.trainer INFO: eta: 1:10:26  iter: 6360  loss: 0.6702 (0.8014)  loss_classifier: 0.2146 (0.2977)  loss_box_reg: 0.1108 (0.1279)  loss_mask: 0.2677 (0.3123)  loss_objectness: 0.0211 (0.0416)  loss_rpn_box_reg: 0.0099 (0.0219)  time: 0.1081 (0.1256)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5188
2020-06-23 16:32:13,790 maskrcnn_benchmark.trainer INFO: eta: 1:10:22  iter: 6380  loss: 0.7023 (0.8011)  loss_classifier: 0.2226 (0.2975)  loss_box_reg: 0.1066 (0.1279)  loss_mask: 0.2820 (0.3122)  loss_objectness: 0.0227 (0.0416)  loss_rpn_box_reg: 0.0083 (0.0220)  time: 0.1078 (0.1256)  data: 0.0015 (0.0178)  lr: 0.160000  max mem: 5188
2020-06-23 16:32:15,973 maskrcnn_benchmark.trainer INFO: eta: 1:10:17  iter: 6400  loss: 0.7185 (0.8011)  loss_classifier: 0.2711 (0.2975)  loss_box_reg: 0.1217 (0.1279)  loss_mask: 0.2844 (0.3121)  loss_objectness: 0.0252 (0.0416)  loss_rpn_box_reg: 0.0138 (0.0220)  time: 0.1077 (0.1255)  data: 0.0015 (0.0177)  lr: 0.160000  max mem: 5188
:::MLLOG {"namespace": "", "time_ms": 1592955138019, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1592955138019, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1592955138019, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 7}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 16:32:18,280 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.27s)
index created!
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 16:32:18,584 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:54,  1.43it/s]
  5%|         | 4/79 [00:00<00:37,  1.99it/s]
  9%|         | 7/79 [00:00<00:26,  2.75it/s]
 13%|        | 10/79 [00:01<00:18,  3.76it/s]
 16%|        | 13/79 [00:01<00:13,  5.07it/s]
 20%|        | 16/79 [00:01<00:09,  6.68it/s]
 24%|       | 19/79 [00:01<00:06,  8.58it/s]
 28%|       | 22/79 [00:01<00:05, 10.74it/s]
 32%|      | 25/79 [00:01<00:04, 13.10it/s]
 35%|      | 28/79 [00:01<00:03, 15.32it/s]
 39%|      | 31/79 [00:01<00:02, 17.59it/s]
 43%|     | 34/79 [00:01<00:02, 19.51it/s]
 47%|     | 37/79 [00:02<00:01, 21.20it/s]
 51%|     | 40/79 [00:02<00:01, 22.14it/s]
 54%|    | 43/79 [00:02<00:01, 23.24it/s]
 58%|    | 46/79 [00:02<00:01, 24.08it/s]
 62%|   | 49/79 [00:02<00:01, 24.73it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.83it/s]
 24%|       | 19/79 [00:01<00:07,  7.61it/s]
 28%|       | 22/79 [00:01<00:05,  9.62it/s]
 32%|      | 25/79 [00:01<00:04, 11.82it/s]
 35%|      | 28/79 [00:01<00:03, 14.13it/s]
 39%|      | 31/79 [00:01<00:02, 16.37it/s]
 43%|     | 34/79 [00:02<00:02, 18.28it/s]
 47%|     | 37/79 [00:02<00:02, 19.89it/s]
 51%|     | 40/79 [00:02<00:01, 21.50it/s]
 54%|    | 43/79 [00:02<00:01, 22.46it/s]
 58%|    | 46/79 [00:02<00:01, 23.17it/s]
 62%|   | 49/79 [00:02<00:01, 23.78it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.77it/s]
 24%|       | 19/79 [00:01<00:08,  7.47it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.09it/s]
 35%|      | 28/79 [00:01<00:03, 13.41it/s]
 39%|      | 31/79 [00:02<00:03, 15.59it/s]
 43%|     | 34/79 [00:02<00:02, 17.70it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 21.09it/s]
 54%|    | 43/79 [00:02<00:01, 22.43it/s]
 58%|    | 46/79 [00:02<00:01, 23.43it/s]
 62%|   | 49/79 [00:02<00:01, 24.27it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.47it/s]
 28%|       | 22/79 [00:01<00:05,  9.50it/s]
 32%|      | 25/79 [00:01<00:04, 11.75it/s]
 35%|      | 28/79 [00:01<00:03, 14.11it/s]
 39%|      | 31/79 [00:02<00:02, 16.30it/s]
 43%|     | 34/79 [00:02<00:02, 18.23it/s]
 47%|     | 37/79 [00:02<00:02, 19.97it/s]
 51%|     | 40/79 [00:02<00:01, 21.58it/s]
 54%|    | 43/79 [00:02<00:01, 22.86it/s]
 58%|    | 46/79 [00:02<00:01, 23.53it/s]
 62%|   | 49/79 [00:02<00:01, 24.47it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.84it/s]
 24%|       | 19/79 [00:01<00:07,  7.61it/s]
 28%|       | 22/79 [00:01<00:05,  9.63it/s]
 32%|      | 25/79 [00:01<00:04, 11.88it/s]
 35%|      | 28/79 [00:01<00:03, 14.17it/s]
 39%|      | 31/79 [00:02<00:02, 16.36it/s]
 43%|     | 34/79 [00:02<00:02, 18.45it/s]
 47%|     | 37/79 [00:02<00:02, 20.17it/s]
 51%|     | 40/79 [00:02<00:01, 21.48it/s]
 54%|    | 43/79 [00:02<00:01, 22.57it/s]
 58%|    | 46/79 [00:02<00:01, 23.42it/s]
 62%|   | 49/79 [00:02<00:01, 24.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.27it/s]
 16%|        | 13/79 [00:01<00:14,  4.43it/s]
 20%|        | 16/79 [00:01<00:10,  5.88it/s]
 24%|       | 19/79 [00:01<00:07,  7.65it/s]
 28%|       | 22/79 [00:01<00:05,  9.65it/s]
 32%|      | 25/79 [00:01<00:04, 11.85it/s]
 35%|      | 28/79 [00:01<00:03, 14.07it/s]
 39%|      | 31/79 [00:02<00:02, 16.22it/s]
 43%|     | 34/79 [00:02<00:02, 18.31it/s]
 47%|     | 37/79 [00:02<00:02, 20.08it/s]
 51%|     | 40/79 [00:02<00:01, 21.34it/s]
 54%|    | 43/79 [00:02<00:01, 22.25it/s]
 58%|    | 46/79 [00:02<00:01, 23.35it/s]
 62%|   | 49/79 [00:02<00:01, 24.10it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.48it/s]
 32%|      | 25/79 [00:01<00:04, 11.60it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:03, 15.93it/s]
 43%|     | 34/79 [00:02<00:02, 18.00it/s]
 47%|     | 37/79 [00:02<00:02, 19.66it/s]
 51%|     | 40/79 [00:02<00:01, 20.99it/s]
 54%|    | 43/79 [00:02<00:01, 22.21it/s]
 58%|    | 46/79 [00:02<00:01, 23.16it/s]
 62%|   | 49/79 [00:02<00:01, 23.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.69it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.38it/s]
 32%|      | 25/79 [00:01<00:04, 11.61it/s]
 35%|      | 28/79 [00:01<00:03, 13.89it/s]
 39%|      | 31/79 [00:02<00:02, 16.06it/s]
 43%|     | 34/79 [00:02<00:02, 18.08it/s]
 47%|     | 37/79 [00:02<00:02, 19.86it/s]
 51%|     | 40/79 [00:02<00:01, 21.31it/s]
 54%|    | 43/79 [00:02<00:01, 22.49it/s]
 58%|    | 46/79 [00:02<00:01, 23.41it/s]
 62%|   | 49/79 [00:02<00:01, 24.24it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.24it/s]
  4%|         | 3/79 [00:00<00:44,  1.72it/s]
  8%|         | 6/79 [00:01<00:30,  2.38it/s]
 11%|        | 9/79 [00:01<00:21,  3.26it/s]
 15%|        | 12/79 [00:01<00:15,  4.42it/s]
 19%|        | 15/79 [00:01<00:10,  5.87it/s]
 23%|       | 18/79 [00:01<00:07,  7.63it/s]
 27%|       | 21/79 [00:01<00:06,  9.63it/s]
 30%|       | 24/79 [00:01<00:04, 11.83it/s]
 34%|      | 27/79 [00:01<00:03, 13.94it/s]
 38%|      | 30/79 [00:02<00:03, 15.76it/s]
 42%|     | 33/79 [00:02<00:02, 17.68it/s]
 46%|     | 36/79 [00:02<00:02, 19.37it/s]
 49%|     | 39/79 [00:02<00:01, 20.81it/s]
 53%|    | 42/79 [00:02<00:01, 21.56it/s]
 57%|    | 45/79 [00:02<00:01, 22.62it/s]
 61%|    | 48/79 [00:02<00:01, 23.13it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.51it/s]
 35%|      | 28/79 [00:01<00:03, 13.74it/s]
 39%|      | 31/79 [00:02<00:03, 15.99it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 21.03it/s]
 54%|    | 43/79 [00:02<00:01, 22.27it/s]
 58%|    | 46/79 [00:02<00:01, 22.74it/s]
 62%|   | 49/79 [00:02<00:01, 23.36it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.51it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:02, 16.06it/s]
 43%|     | 34/79 [00:02<00:02, 17.51it/s]
 47%|     | 37/79 [00:02<00:02, 19.31it/s]
 51%|     | 40/79 [00:02<00:01, 20.89it/s]
 54%|    | 43/79 [00:02<00:01, 22.31it/s]
 58%|    | 46/79 [00:02<00:01, 23.05it/s]
 62%|   | 49/79 [00:02<00:01, 23.82it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  4%|         | 3/79 [00:00<00:47,  1.62it/s]
  8%|         | 6/79 [00:01<00:32,  2.25it/s]
 11%|        | 9/79 [00:01<00:22,  3.08it/s]
 15%|        | 12/79 [00:01<00:15,  4.19it/s]
 19%|        | 15/79 [00:01<00:11,  5.59it/s]
 23%|       | 18/79 [00:01<00:08,  7.28it/s]
 27%|       | 21/79 [00:01<00:06,  9.22it/s]
 30%|       | 24/79 [00:01<00:04, 11.37it/s]
 34%|      | 27/79 [00:01<00:03, 13.62it/s]
 38%|      | 30/79 [00:02<00:03, 15.84it/s]
 42%|     | 33/79 [00:02<00:02, 17.72it/s]
 46%|     | 36/79 [00:02<00:02, 19.45it/s]
 49%|     | 39/79 [00:02<00:01, 20.91it/s]
 53%|    | 42/79 [00:02<00:01, 22.18it/s]
 57%|    | 45/79 [00:02<00:01, 22.74it/s]
 61%|    | 48/79 [00:02<00:01, 23.27it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.16it/s]
 32%|      | 25/79 [00:01<00:04, 11.23it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.85it/s]
 43%|     | 34/79 [00:02<00:02, 17.89it/s]
 47%|     | 37/79 [00:02<00:02, 19.71it/s]
 51%|     | 40/79 [00:02<00:01, 21.29it/s]
 54%|    | 43/79 [00:02<00:01, 22.51it/s]
 58%|    | 46/79 [00:02<00:01, 23.35it/s]
 62%|   | 49/79 [00:02<00:01, 24.29it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.54it/s]
 28%|       | 22/79 [00:01<00:05,  9.60it/s]
 32%|      | 25/79 [00:01<00:04, 11.70it/s]
 35%|      | 28/79 [00:01<00:03, 13.87it/s]
 39%|      | 31/79 [00:02<00:03, 15.89it/s]
 43%|     | 34/79 [00:02<00:02, 17.78it/s]
 47%|     | 37/79 [00:02<00:02, 19.67it/s]
 51%|     | 40/79 [00:02<00:01, 21.04it/s]
 54%|    | 43/79 [00:02<00:01, 22.09it/s]
 58%|    | 46/79 [00:02<00:01, 23.23it/s]
 62%|   | 49/79 [00:02<00:01, 23.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  4%|         | 3/79 [00:00<00:47,  1.59it/s]
  8%|         | 6/79 [00:01<00:33,  2.21it/s]
 11%|        | 9/79 [00:01<00:22,  3.05it/s]
 15%|        | 12/79 [00:01<00:16,  4.14it/s]
 19%|        | 15/79 [00:01<00:11,  5.54it/s]
 23%|       | 18/79 [00:01<00:08,  7.22it/s]
 27%|       | 21/79 [00:01<00:06,  9.22it/s]
 30%|       | 24/79 [00:01<00:04, 11.40it/s]
 34%|      | 27/79 [00:01<00:03, 13.67it/s]
 38%|      | 30/79 [00:02<00:03, 15.58it/s]
 42%|     | 33/79 [00:02<00:02, 17.65it/s]
 46%|     | 36/79 [00:02<00:02, 19.30it/s]
 49%|     | 39/79 [00:02<00:01, 20.51it/s]
 53%|    | 42/79 [00:02<00:01, 21.75it/s]
 57%|    | 45/79 [00:02<00:01, 22.84it/s]
 61%|    | 48/79 [00:02<00:01, 23.28it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  9.00it/s]
 32%|      | 25/79 [00:01<00:04, 11.17it/s]
 35%|      | 28/79 [00:01<00:03, 13.51it/s]
 39%|      | 31/79 [00:02<00:03, 15.85it/s]
 43%|     | 34/79 [00:02<00:02, 17.90it/s]
 47%|     | 37/79 [00:02<00:02, 19.88it/s]
 51%|     | 40/79 [00:02<00:01, 21.43it/s]
 54%|    | 43/79 [00:02<00:01, 22.30it/s]
 58%|    | 46/79 [00:02<00:01, 22.78it/s]
 62%|   | 49/79 [00:02<00:01, 23.73it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  4%|         | 3/79 [00:00<00:47,  1.62it/s]
  8%|         | 6/79 [00:01<00:32,  2.25it/s]
 11%|        | 9/79 [00:01<00:22,  3.09it/s]
 15%|        | 12/79 [00:01<00:15,  4.19it/s]
 19%|        | 15/79 [00:01<00:11,  5.59it/s]
 23%|       | 18/79 [00:01<00:08,  7.30it/s]
 27%|       | 21/79 [00:01<00:06,  9.25it/s]
 30%|       | 24/79 [00:01<00:04, 11.40it/s]
 34%|      | 27/79 [00:01<00:03, 13.60it/s]
 38%|      | 30/79 [00:02<00:03, 15.89it/s]
 42%|     | 33/79 [00:02<00:02, 17.58it/s]
 46%|     | 36/79 [00:02<00:02, 19.44it/s]
 49%|     | 39/79 [00:02<00:01, 20.59it/s]
 53%|    | 42/79 [00:02<00:01, 21.92it/s]
 57%|    | 45/79 [00:02<00:01, 22.76it/s]
 61%|    | 48/79 [00:02<00:01, 23.58it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.57it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.28it/s]
 32%|      | 25/79 [00:01<00:04, 11.27it/s]
 35%|      | 28/79 [00:01<00:03, 13.52it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.76it/s]
 47%|     | 37/79 [00:02<00:02, 19.56it/s]
 51%|     | 40/79 [00:02<00:01, 21.04it/s]
 54%|    | 43/79 [00:02<00:01, 22.19it/s]
 58%|    | 46/79 [00:02<00:01, 23.04it/s]
 62%|   | 49/79 [00:02<00:01, 23.84it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:16,  3.89it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.87it/s]
 28%|       | 22/79 [00:01<00:06,  8.81it/s]
 32%|      | 25/79 [00:01<00:04, 10.98it/s]
 35%|      | 28/79 [00:02<00:03, 13.28it/s]
 39%|      | 31/79 [00:02<00:03, 15.50it/s]
 43%|     | 34/79 [00:02<00:02, 17.59it/s]
 47%|     | 37/79 [00:02<00:02, 19.43it/s]
 51%|     | 40/79 [00:02<00:01, 20.79it/s]
 54%|    | 43/79 [00:02<00:01, 21.87it/s]
 58%|    | 46/79 [00:02<00:01, 22.98it/s]
 62%|   | 49/79 [00:02<00:01, 23.90it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:11,  5.69it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.57it/s]
 35%|      | 28/79 [00:01<00:03, 13.21it/s]
 39%|      | 31/79 [00:02<00:03, 15.44it/s]
 43%|     | 34/79 [00:02<00:02, 17.56it/s]
 47%|     | 37/79 [00:02<00:02, 19.35it/s]
 51%|     | 40/79 [00:02<00:01, 20.83it/s]
 54%|    | 43/79 [00:02<00:01, 21.95it/s]
 58%|    | 46/79 [00:02<00:01, 22.95it/s]
 62%|   | 49/79 [00:02<00:01, 23.61it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:16,  3.89it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.85it/s]
 28%|       | 22/79 [00:01<00:06,  8.78it/s]
 32%|      | 25/79 [00:01<00:04, 10.96it/s]
 35%|      | 28/79 [00:02<00:03, 13.28it/s]
 39%|      | 31/79 [00:02<00:03, 15.49it/s]
 43%|     | 34/79 [00:02<00:02, 17.65it/s]
 47%|     | 37/79 [00:02<00:02, 19.45it/s]
 51%|     | 40/79 [00:02<00:01, 20.95it/s]
 54%|    | 43/79 [00:02<00:01, 22.23it/s]
 58%|    | 46/79 [00:02<00:01, 23.22it/s]
 62%|   | 49/79 [00:02<00:01, 24.06it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.04it/s]
  4%|         | 3/79 [00:01<00:52,  1.45it/s]
  8%|         | 6/79 [00:01<00:36,  2.02it/s]
 11%|        | 9/79 [00:01<00:25,  2.79it/s]
 15%|        | 12/79 [00:01<00:17,  3.81it/s]
 19%|        | 15/79 [00:01<00:12,  5.13it/s]
 23%|       | 18/79 [00:01<00:09,  6.73it/s]
 27%|       | 21/79 [00:01<00:06,  8.64it/s]
 30%|       | 24/79 [00:01<00:05, 10.77it/s]
 34%|      | 27/79 [00:02<00:03, 13.12it/s]
 38%|      | 30/79 [00:02<00:03, 15.35it/s]
 42%|     | 33/79 [00:02<00:02, 17.49it/s]
 46%|     | 36/79 [00:02<00:02, 19.32it/s]
 49%|     | 39/79 [00:02<00:01, 20.91it/s]
 53%|    | 42/79 [00:02<00:01, 22.15it/s]
 57%|    | 45/79 [00:02<00:01, 23.17it/s]
 61%|    | 48/79 [00:02<00:01, 23.65it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.17it/s]
 28%|       | 22/79 [00:01<00:06,  9.05it/s]
 32%|      | 25/79 [00:01<00:04, 11.24it/s]
 35%|      | 28/79 [00:01<00:03, 13.34it/s]
 39%|      | 31/79 [00:02<00:03, 15.46it/s]
 43%|     | 34/79 [00:02<00:02, 17.42it/s]
 47%|     | 37/79 [00:02<00:02, 19.08it/s]
 51%|     | 40/79 [00:02<00:01, 20.37it/s]
 54%|    | 43/79 [00:02<00:01, 21.30it/s]
 58%|    | 46/79 [00:02<00:01, 22.13it/s]
 62%|   | 49/79 [00:02<00:01, 22.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.26it/s]
 28%|       | 22/79 [00:01<00:06,  9.27it/s]
 32%|      | 25/79 [00:01<00:04, 11.41it/s]
 35%|      | 28/79 [00:01<00:03, 13.68it/s]
 39%|      | 31/79 [00:02<00:03, 15.73it/s]
 43%|     | 34/79 [00:02<00:02, 17.52it/s]
 47%|     | 37/79 [00:02<00:02, 19.02it/s]
 51%|     | 40/79 [00:02<00:01, 20.44it/s]
 54%|    | 43/79 [00:02<00:01, 21.34it/s]
 58%|    | 46/79 [00:02<00:01, 22.44it/s]
 62%|   | 49/79 [00:02<00:01, 22.76it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.09it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.12it/s]
 28%|       | 22/79 [00:01<00:06,  9.09it/s]
 32%|      | 25/79 [00:01<00:04, 11.19it/s]
 35%|      | 28/79 [00:01<00:03, 13.38it/s]
 39%|      | 31/79 [00:02<00:03, 15.57it/s]
 43%|     | 34/79 [00:02<00:02, 17.54it/s]
 47%|     | 37/79 [00:02<00:02, 19.35it/s]
 51%|     | 40/79 [00:02<00:01, 20.71it/s]
 54%|    | 43/79 [00:02<00:01, 21.61it/s]
 58%|    | 46/79 [00:02<00:01, 22.13it/s]
 62%|   | 49/79 [00:02<00:01, 22.76it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:20,  1.03s/it]
  5%|         | 4/79 [00:01<00:54,  1.37it/s]
  9%|         | 7/79 [00:01<00:37,  1.91it/s]
 13%|        | 10/79 [00:01<00:26,  2.64it/s]
 16%|        | 13/79 [00:01<00:18,  3.62it/s]
 20%|        | 16/79 [00:01<00:12,  4.88it/s]
 24%|       | 19/79 [00:01<00:09,  6.45it/s]
 28%|       | 22/79 [00:01<00:06,  8.36it/s]
 32%|      | 25/79 [00:01<00:05, 10.52it/s]
 35%|      | 28/79 [00:02<00:03, 12.85it/s]
 39%|      | 31/79 [00:02<00:03, 15.14it/s]
 43%|     | 34/79 [00:02<00:02, 17.37it/s]
 47%|     | 37/79 [00:02<00:02, 19.28it/s]
 51%|     | 40/79 [00:02<00:01, 20.95it/s]
 54%|    | 43/79 [00:02<00:01, 22.28it/s]
 58%|    | 46/79 [00:02<00:01, 23.30it/s]
 62%|   | 49/79 [00:02<00:01, 23.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  5%|         | 4/79 [00:01<00:53,  1.41it/s]
  9%|         | 7/79 [00:01<00:36,  1.97it/s]
 13%|        | 10/79 [00:01<00:25,  2.72it/s]
 16%|        | 13/79 [00:01<00:17,  3.72it/s]
 20%|        | 16/79 [00:01<00:12,  5.00it/s]
 24%|       | 19/79 [00:01<00:09,  6.60it/s]
 28%|       | 22/79 [00:01<00:06,  8.52it/s]
 32%|      | 25/79 [00:01<00:05, 10.65it/s]
 35%|      | 28/79 [00:02<00:03, 12.94it/s]
 39%|      | 31/79 [00:02<00:03, 15.31it/s]
 43%|     | 34/79 [00:02<00:02, 17.47it/s]
 47%|     | 37/79 [00:02<00:02, 19.39it/s]
 51%|     | 40/79 [00:02<00:01, 20.81it/s]
 54%|    | 43/79 [00:02<00:01, 22.19it/s]
 58%|    | 46/79 [00:02<00:01, 23.18it/s]
 62%|   | 49/79 [00:02<00:01, 23.84it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  5%|         | 4/79 [00:01<00:52,  1.42it/s]
  9%|         | 7/79 [00:01<00:36,  1.98it/s]
 13%|        | 10/79 [00:01<00:25,  2.73it/s]
 16%|        | 13/79 [00:01<00:17,  3.73it/s]
 20%|        | 16/79 [00:01<00:12,  5.02it/s]
 24%|       | 19/79 [00:01<00:09,  6.62it/s]
 28%|       | 22/79 [00:01<00:06,  8.52it/s]
 32%|      | 25/79 [00:01<00:05, 10.62it/s]
 35%|      | 28/79 [00:02<00:03, 12.94it/s]
 39%|      | 31/79 [00:02<00:03, 15.08it/s]
 43%|     | 34/79 [00:02<00:02, 17.22it/s]
 47%|     | 37/79 [00:02<00:02, 18.90it/s]
 51%|     | 40/79 [00:02<00:01, 20.54it/s]
 54%|    | 43/79 [00:02<00:01, 21.71it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.65it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.39it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  8.99it/s]
 32%|      | 25/79 [00:01<00:04, 11.11it/s]
 35%|      | 28/79 [00:01<00:03, 13.35it/s]
 39%|      | 31/79 [00:02<00:03, 15.42it/s]
 43%|     | 34/79 [00:02<00:02, 17.33it/s]
 47%|     | 37/79 [00:02<00:02, 19.09it/s]
 51%|     | 40/79 [00:02<00:01, 20.43it/s]
 54%|    | 43/79 [00:02<00:01, 21.36it/s]
 58%|    | 46/79 [00:02<00:01, 21.85it/s]
 62%|   | 49/79 [00:02<00:01, 22.37it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.80it/s]
 16%|        | 13/79 [00:01<00:17,  3.82it/s]
 20%|        | 16/79 [00:01<00:12,  5.12it/s]
 24%|       | 19/79 [00:01<00:08,  6.73it/s]
 28%|       | 22/79 [00:01<00:06,  8.61it/s]
 32%|      | 25/79 [00:01<00:05, 10.75it/s]
 35%|      | 28/79 [00:02<00:03, 12.99it/s]
 39%|      | 31/79 [00:02<00:03, 15.27it/s]
 43%|     | 34/79 [00:02<00:02, 17.37it/s]
 47%|     | 37/79 [00:02<00:02, 19.29it/s]
 51%|     | 40/79 [00:02<00:01, 20.73it/s]
 54%|    | 43/79 [00:02<00:01, 21.96it/s]
 58%|    | 46/79 [00:02<00:01, 22.71it/s]
 62%|   | 49/79 [00:02<00:01, 23.46it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.05it/s]
 28%|       | 22/79 [00:01<00:06,  8.99it/s]
 32%|      | 25/79 [00:01<00:04, 11.11it/s]
 35%|      | 28/79 [00:02<00:03, 13.30it/s]
 39%|      | 31/79 [00:02<00:03, 15.42it/s]
 43%|     | 34/79 [00:02<00:02, 17.35it/s]
 47%|     | 37/79 [00:02<00:02, 19.04it/s]
 51%|     | 40/79 [00:02<00:01, 20.37it/s]
 54%|    | 43/79 [00:02<00:01, 21.30it/s]
 58%|    | 46/79 [00:02<00:01, 22.29it/s]
 62%|   | 49/79 [00:02<00:01, 23.03it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:18,  1.00s/it]
  5%|         | 4/79 [00:01<00:53,  1.40it/s]
  9%|         | 7/79 [00:01<00:36,  1.96it/s]
 13%|        | 10/79 [00:01<00:25,  2.71it/s]
 16%|        | 13/79 [00:01<00:17,  3.70it/s]
 20%|        | 16/79 [00:01<00:12,  4.97it/s]
 24%|       | 19/79 [00:01<00:09,  6.55it/s]
 28%|       | 22/79 [00:01<00:06,  8.42it/s]
 32%|      | 25/79 [00:01<00:05, 10.45it/s]
 35%|      | 28/79 [00:02<00:04, 12.66it/s]
 39%|      | 31/79 [00:02<00:03, 14.92it/s]
 43%|     | 34/79 [00:02<00:02, 17.08it/s]
 47%|     | 37/79 [00:02<00:02, 18.81it/s]
 51%|     | 40/79 [00:02<00:01, 20.44it/s]
 54%|    | 43/79 [00:02<00:01, 21.92it/s]
 58%|    | 46/79 [00:02<00:01, 22.87it/s]
 62%|   | 49/79 [00:02<00:01, 23.03it/s]
 66%|   | 52/79 [00:03<00:01, 24.81it/s]
 70%|   | 55/79 [00:02<00:00, 25.53it/s]
 73%|  | 58/79 [00:02<00:00, 25.57it/s]
 77%|  | 61/79 [00:03<00:00, 25.88it/s]
 81%|  | 64/79 [00:03<00:00, 26.04it/s]
 85%| | 67/79 [00:03<00:00, 26.13it/s]
 89%| | 70/79 [00:03<00:00, 25.71it/s]
 92%|| 73/79 [00:03<00:00, 26.07it/s]
 96%|| 76/79 [00:03<00:00, 26.62it/s]
100%|| 79/79 [00:03<00:00, 27.43it/s]
, 24.54it/s]
 70%|   | 55/79 [00:02<00:00, 24.85it/s]
 73%|  | 58/79 [00:03<00:00, 25.32it/s]
 77%|  | 61/79 [00:03<00:00, 25.38it/s]
 81%|  | 64/79 [00:03<00:00, 25.80it/s]
 85%| | 67/79 [00:03<00:00, 25.57it/s]
 89%| | 70/79 [00:03<00:00, 25.38it/s]
 92%|| 73/79 [00:03<00:00, 25.84it/s]
 96%|| 76/79 [00:03<00:00, 26.46it/s]
100%|| 79/79 [00:03<00:00, 27.34it/s]
, 24.52it/s]
 70%|   | 55/79 [00:02<00:00, 24.90it/s]
 73%|  | 58/79 [00:03<00:00, 25.52it/s]
 77%|  | 61/79 [00:03<00:00, 25.43it/s]
 81%|  | 64/79 [00:03<00:00, 25.43it/s]
 85%| | 67/79 [00:03<00:00, 25.37it/s]
 89%| | 70/79 [00:03<00:00, 25.54it/s]
 92%|| 73/79 [00:03<00:00, 25.72it/s]
 96%|| 76/79 [00:03<00:00, 26.40it/s]
100%|| 79/79 [00:03<00:00, 27.24it/s]
, 25.01it/s]
 70%|   | 55/79 [00:02<00:00, 25.07it/s]
 73%|  | 58/79 [00:03<00:00, 25.57it/s]
 77%|  | 61/79 [00:03<00:00, 25.20it/s]
 81%|  | 64/79 [00:03<00:00, 25.25it/s]
 85%| | 67/79 [00:03<00:00, 25.36it/s]
 89%| | 70/79 [00:03<00:00, 25.39it/s]
 92%|| 73/79 [00:03<00:00, 25.68it/s]
 96%|| 76/79 [00:03<00:00, 26.21it/s]
100%|| 79/79 [00:03<00:00, 27.14it/s]
, 24.47it/s]
 70%|   | 55/79 [00:02<00:00, 24.82it/s]
 73%|  | 58/79 [00:03<00:00, 25.20it/s]
 77%|  | 61/79 [00:03<00:00, 25.45it/s]
 81%|  | 64/79 [00:03<00:00, 25.39it/s]
 85%| | 67/79 [00:03<00:00, 25.44it/s]
 89%| | 70/79 [00:03<00:00, 25.19it/s]
 92%|| 73/79 [00:03<00:00, 25.52it/s]
 96%|| 76/79 [00:03<00:00, 25.97it/s]
100%|| 79/79 [00:03<00:00, 27.02it/s]
, 24.77it/s]
 70%|   | 55/79 [00:02<00:00, 25.30it/s]
 73%|  | 58/79 [00:03<00:00, 25.75it/s]
 77%|  | 61/79 [00:03<00:00, 25.77it/s]
 81%|  | 64/79 [00:03<00:00, 25.64it/s]
 85%| | 67/79 [00:03<00:00, 25.79it/s]
 89%| | 70/79 [00:03<00:00, 25.87it/s]
 92%|| 73/79 [00:03<00:00, 25.81it/s]
 96%|| 76/79 [00:03<00:00, 26.35it/s]
100%|| 79/79 [00:03<00:00, 27.18it/s]
, 24.83it/s]
 70%|   | 55/79 [00:02<00:00, 25.49it/s]
 73%|  | 58/79 [00:03<00:00, 25.43it/s]
 77%|  | 61/79 [00:03<00:00, 25.82it/s]
 81%|  | 64/79 [00:03<00:00, 26.07it/s]
 85%| | 67/79 [00:03<00:00, 25.75it/s]
 89%| | 70/79 [00:03<00:00, 25.90it/s]
 92%|| 73/79 [00:03<00:00, 26.07it/s]
 96%|| 76/79 [00:03<00:00, 26.73it/s]
100%|| 79/79 [00:03<00:00, 27.43it/s]
, 24.10it/s]
 70%|   | 55/79 [00:02<00:00, 24.14it/s]
 73%|  | 58/79 [00:03<00:00, 24.72it/s]
 77%|  | 61/79 [00:03<00:00, 24.75it/s]
 81%|  | 64/79 [00:03<00:00, 25.00it/s]
 85%| | 67/79 [00:03<00:00, 25.16it/s]
 89%| | 70/79 [00:03<00:00, 25.49it/s]
 92%|| 73/79 [00:03<00:00, 25.62it/s]
 96%|| 76/79 [00:03<00:00, 26.44it/s]
100%|| 79/79 [00:03<00:00, 27.29it/s]
, 24.29it/s]
 70%|   | 55/79 [00:02<00:00, 24.58it/s]
 73%|  | 58/79 [00:03<00:00, 24.65it/s]
 77%|  | 61/79 [00:03<00:00, 25.00it/s]
 81%|  | 64/79 [00:03<00:00, 25.15it/s]
 85%| | 67/79 [00:03<00:00, 25.48it/s]
 89%| | 70/79 [00:03<00:00, 25.68it/s]
 92%|| 73/79 [00:03<00:00, 26.11it/s]
 96%|| 76/79 [00:03<00:00, 26.74it/s]
100%|| 79/79 [00:03<00:00, 27.59it/s]
, 24.67it/s]
 70%|   | 55/79 [00:02<00:00, 24.72it/s]
 73%|  | 58/79 [00:03<00:00, 25.15it/s]
 77%|  | 61/79 [00:03<00:00, 25.21it/s]
 81%|  | 64/79 [00:03<00:00, 25.19it/s]
 85%| | 67/79 [00:03<00:00, 25.19it/s]
 89%| | 70/79 [00:03<00:00, 25.24it/s]
 92%|| 73/79 [00:03<00:00, 25.27it/s]
 96%|| 76/79 [00:03<00:00, 26.10it/s]
100%|| 79/79 [00:03<00:00, 26.91it/s]
, 23.91it/s]
 70%|   | 55/79 [00:03<00:00, 24.46it/s]
 73%|  | 58/79 [00:03<00:00, 24.69it/s]
 77%|  | 61/79 [00:03<00:00, 24.92it/s]
 81%|  | 64/79 [00:03<00:00, 25.28it/s]
 85%| | 67/79 [00:03<00:00, 24.74it/s]
 89%| | 70/79 [00:03<00:00, 24.92it/s]
 92%|| 73/79 [00:03<00:00, 25.37it/s]
 96%|| 76/79 [00:03<00:00, 26.14it/s]
100%|| 79/79 [00:03<00:00, 19.82it/s]
, 24.22it/s]
 70%|   | 55/79 [00:02<00:00, 24.73it/s]
 73%|  | 58/79 [00:03<00:00, 24.87it/s]
 77%|  | 61/79 [00:03<00:00, 25.16it/s]
 81%|  | 64/79 [00:03<00:00, 24.99it/s]
 85%| | 67/79 [00:03<00:00, 25.27it/s]
 89%| | 70/79 [00:03<00:00, 25.57it/s]
 92%|| 73/79 [00:03<00:00, 25.62it/s]
 96%|| 76/79 [00:03<00:00, 26.33it/s]
100%|| 79/79 [00:03<00:00, 27.29it/s]
, 24.20it/s]
 70%|   | 55/79 [00:03<00:00, 24.70it/s]
 73%|  | 58/79 [00:03<00:00, 24.65it/s]
 77%|  | 61/79 [00:03<00:00, 24.84it/s]
 81%|  | 64/79 [00:03<00:00, 25.23it/s]
 85%| | 67/79 [00:03<00:00, 25.02it/s]
 89%| | 70/79 [00:03<00:00, 25.06it/s]
 92%|| 73/79 [00:03<00:00, 25.60it/s]
 96%|| 76/79 [00:03<00:00, 26.41it/s]
100%|| 79/79 [00:04<00:00, 19.69it/s]
, 24.15it/s]
 70%|   | 55/79 [00:03<00:00, 24.73it/s]
 73%|  | 58/79 [00:03<00:00, 24.97it/s]
 77%|  | 61/79 [00:03<00:00, 25.57it/s]
 81%|  | 64/79 [00:03<00:00, 25.38it/s]
 85%| | 67/79 [00:03<00:00, 25.64it/s]
 89%| | 70/79 [00:03<00:00, 25.34it/s]
 92%|| 73/79 [00:03<00:00, 25.65it/s]
 96%|| 76/79 [00:03<00:00, 26.14it/s]
100%|| 79/79 [00:03<00:00, 26.87it/s]
, 24.29it/s]
 70%|   | 55/79 [00:03<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 25.06it/s]
 77%|  | 61/79 [00:03<00:00, 25.24it/s]
 81%|  | 64/79 [00:03<00:00, 25.42it/s]
 85%| | 67/79 [00:03<00:00, 25.62it/s]
 89%| | 70/79 [00:03<00:00, 25.90it/s]
 92%|| 73/79 [00:03<00:00, 26.05it/s]
 96%|| 76/79 [00:03<00:00, 26.85it/s]
100%|| 79/79 [00:03<00:00, 27.70it/s]
76it/s]
 68%|   | 54/79 [00:02<00:01, 24.17it/s]
 72%|  | 57/79 [00:03<00:00, 24.36it/s]
 76%|  | 60/79 [00:03<00:00, 24.73it/s]
 80%|  | 63/79 [00:03<00:00, 24.90it/s]
 84%| | 66/79 [00:03<00:00, 24.97it/s]
 87%| | 69/79 [00:03<00:00, 25.09it/s]
 91%| | 72/79 [00:03<00:00, 24.88it/s]
 95%|| 75/79 [00:03<00:00, 25.55it/s]
 99%|| 78/79 [00:03<00:00, 26.02it/s]
100%|| 79/79 [00:04<00:00, 19.65it/s]
, 24.10it/s]
 70%|   | 55/79 [00:03<00:00, 24.43it/s]
 73%|  | 58/79 [00:03<00:00, 24.66it/s]
 77%|  | 61/79 [00:03<00:00, 24.83it/s]
 81%|  | 64/79 [00:03<00:00, 24.54it/s]
 85%| | 67/79 [00:03<00:00, 24.81it/s]
 89%| | 70/79 [00:03<00:00, 24.91it/s]
 92%|| 73/79 [00:03<00:00, 25.44it/s]
 96%|| 76/79 [00:03<00:00, 25.98it/s]
100%|| 79/79 [00:03<00:00, 27.04it/s]
00it/s]
 68%|   | 54/79 [00:03<00:01, 24.21it/s]
 72%|  | 57/79 [00:03<00:00, 24.75it/s]
 76%|  | 60/79 [00:03<00:00, 25.03it/s]
 80%|  | 63/79 [00:03<00:00, 24.93it/s]
 84%| | 66/79 [00:03<00:00, 25.36it/s]
 87%| | 69/79 [00:03<00:00, 25.40it/s]
 91%| | 72/79 [00:03<00:00, 25.40it/s]
 95%|| 75/79 [00:03<00:00, 26.21it/s]
 99%|| 78/79 [00:03<00:00, 27.16it/s]
100%|| 79/79 [00:04<00:00, 19.60it/s]
, 24.36it/s]
 70%|   | 55/79 [00:03<00:00, 24.68it/s]
 73%|  | 58/79 [00:03<00:00, 24.86it/s]
 77%|  | 61/79 [00:03<00:00, 25.01it/s]
 81%|  | 64/79 [00:03<00:00, 25.01it/s]
 85%| | 67/79 [00:03<00:00, 25.39it/s]
 89%| | 70/79 [00:03<00:00, 25.04it/s]
 92%|| 73/79 [00:03<00:00, 25.56it/s]
 96%|| 76/79 [00:03<00:00, 26.26it/s]
100%|| 79/79 [00:03<00:00, 27.09it/s]
, 24.69it/s]
 70%|   | 55/79 [00:03<00:00, 25.13it/s]
 73%|  | 58/79 [00:03<00:00, 25.47it/s]
 77%|  | 61/79 [00:03<00:00, 25.77it/s]
 81%|  | 64/79 [00:03<00:00, 25.95it/s]
 85%| | 67/79 [00:03<00:00, 26.20it/s]
 89%| | 70/79 [00:03<00:00, 26.27it/s]
 92%|| 73/79 [00:03<00:00, 26.60it/s]
 96%|| 76/79 [00:03<00:00, 26.99it/s]
100%|| 79/79 [00:03<00:00, 27.78it/s]
00it/s]
 68%|   | 54/79 [00:03<00:01, 24.36it/s]
 72%|  | 57/79 [00:03<00:00, 24.72it/s]
 76%|  | 60/79 [00:03<00:00, 24.59it/s]
 80%|  | 63/79 [00:03<00:00, 24.80it/s]
 84%| | 66/79 [00:03<00:00, 24.93it/s]
 87%| | 69/79 [00:03<00:00, 24.91it/s]
 91%| | 72/79 [00:03<00:00, 25.00it/s]
 95%|| 75/79 [00:03<00:00, 25.66it/s]
 99%|| 78/79 [00:03<00:00, 26.10it/s]
100%|| 79/79 [00:04<00:00, 19.53it/s]
, 24.30it/s]
 70%|   | 55/79 [00:03<00:00, 24.83it/s]
 73%|  | 58/79 [00:03<00:00, 25.28it/s]
 77%|  | 61/79 [00:03<00:00, 25.29it/s]
 81%|  | 64/79 [00:03<00:00, 25.36it/s]
 85%| | 67/79 [00:03<00:00, 25.48it/s]
 89%| | 70/79 [00:03<00:00, 25.59it/s]
 92%|| 73/79 [00:03<00:00, 25.87it/s]
 96%|| 76/79 [00:03<00:00, 26.54it/s]
100%|| 79/79 [00:04<00:00, 27.32it/s]
, 24.00it/s]
 70%|   | 55/79 [00:03<00:00, 24.57it/s]
 73%|  | 58/79 [00:03<00:00, 24.74it/s]
 77%|  | 61/79 [00:03<00:00, 25.12it/s]
 81%|  | 64/79 [00:03<00:00, 25.28it/s]
 85%| | 67/79 [00:03<00:00, 25.35it/s]
 89%| | 70/79 [00:03<00:00, 25.40it/s]
 92%|| 73/79 [00:03<00:00, 25.80it/s]
 96%|| 76/79 [00:03<00:00, 26.52it/s]
100%|| 79/79 [00:04<00:00, 27.40it/s]
, 23.21it/s]
 70%|   | 55/79 [00:03<00:01, 23.58it/s]
 73%|  | 58/79 [00:03<00:00, 24.09it/s]
 77%|  | 61/79 [00:03<00:00, 24.04it/s]
 81%|  | 64/79 [00:03<00:00, 24.25it/s]
 85%| | 67/79 [00:03<00:00, 24.51it/s]
 89%| | 70/79 [00:03<00:00, 24.43it/s]
 92%|| 73/79 [00:03<00:00, 24.88it/s]
 96%|| 76/79 [00:03<00:00, 25.63it/s]
100%|| 79/79 [00:04<00:00, 26.45it/s]
, 23.03it/s]
 70%|   | 55/79 [00:03<00:01, 23.43it/s]
 73%|  | 58/79 [00:03<00:00, 23.72it/s]
 77%|  | 61/79 [00:03<00:00, 24.21it/s]
 81%|  | 64/79 [00:03<00:00, 24.20it/s]
 85%| | 67/79 [00:03<00:00, 24.40it/s]
 89%| | 70/79 [00:03<00:00, 24.40it/s]
 92%|| 73/79 [00:03<00:00, 24.77it/s]
 96%|| 76/79 [00:03<00:00, 25.40it/s]
100%|| 79/79 [00:04<00:00, 26.13it/s]
26it/s]
 68%|   | 54/79 [00:03<00:01, 24.76it/s]
 72%|  | 57/79 [00:03<00:00, 24.80it/s]
 76%|  | 60/79 [00:03<00:00, 25.07it/s]
 80%|  | 63/79 [00:03<00:00, 25.43it/s]
 84%| | 66/79 [00:03<00:00, 25.24it/s]
 87%| | 69/79 [00:03<00:00, 25.47it/s]
 91%| | 72/79 [00:03<00:00, 25.50it/s]
 95%|| 75/79 [00:03<00:00, 26.33it/s]
 99%|| 78/79 [00:03<00:00, 26.59it/s]
100%|| 79/79 [00:04<00:00, 19.26it/s]
, 23.99it/s]
 70%|   | 55/79 [00:03<00:00, 24.18it/s]
 73%|  | 58/79 [00:03<00:00, 24.65it/s]
 77%|  | 61/79 [00:03<00:00, 24.66it/s]
 81%|  | 64/79 [00:03<00:00, 24.80it/s]
 85%| | 67/79 [00:03<00:00, 24.90it/s]
 89%| | 70/79 [00:03<00:00, 25.05it/s]
 92%|| 73/79 [00:03<00:00, 25.36it/s]
 96%|| 76/79 [00:03<00:00, 26.04it/s]
100%|| 79/79 [00:04<00:00, 26.89it/s]
, 23.37it/s]
 70%|   | 55/79 [00:03<00:01, 23.36it/s]
 73%|  | 58/79 [00:03<00:00, 23.72it/s]
 77%|  | 61/79 [00:03<00:00, 23.73it/s]
 81%|  | 64/79 [00:03<00:00, 24.19it/s]
 85%| | 67/79 [00:03<00:00, 23.94it/s]
 89%| | 70/79 [00:03<00:00, 23.92it/s]
 92%|| 73/79 [00:03<00:00, 24.47it/s]
 96%|| 76/79 [00:03<00:00, 25.29it/s]
100%|| 79/79 [00:04<00:00, 26.27it/s]
, 23.69it/s]
 70%|   | 55/79 [00:03<00:00, 24.07it/s]
 73%|  | 58/79 [00:03<00:00, 24.55it/s]
 77%|  | 61/79 [00:03<00:00, 24.60it/s]
 81%|  | 64/79 [00:03<00:00, 24.77it/s]
 85%| | 67/79 [00:03<00:00, 25.32it/s]
 89%| | 70/79 [00:03<00:00, 25.06it/s]
 92%|| 73/79 [00:03<00:00, 25.39it/s]
 96%|| 76/79 [00:03<00:00, 26.15it/s]
100%|| 79/79 [00:04<00:00, 27.00it/s]
, 23.32it/s]
 70%|   | 55/79 [00:03<00:01, 23.52it/s]
 73%|  | 58/79 [00:03<00:00, 23.87it/s]
 77%|  | 61/79 [00:03<00:00, 24.17it/s]
 81%|  | 64/79 [00:03<00:00, 24.00it/s]
 85%| | 67/79 [00:03<00:00, 24.07it/s]
 89%| | 70/79 [00:03<00:00, 24.24it/s]
 92%|| 73/79 [00:03<00:00, 24.71it/s]
 96%|| 76/79 [00:03<00:00, 25.40it/s]
100%|| 79/79 [00:04<00:00, 26.33it/s]
, 23.03it/s]
 70%|   | 55/79 [00:03<00:01, 23.55it/s]
 73%|  | 58/79 [00:03<00:00, 23.72it/s]
 77%|  | 61/79 [00:03<00:00, 24.04it/s]
 81%|  | 64/79 [00:03<00:00, 24.40it/s]
 85%| | 67/79 [00:03<00:00, 24.55it/s]
 89%| | 70/79 [00:03<00:00, 24.49it/s]
 92%|| 73/79 [00:03<00:00, 24.71it/s]
 96%|| 76/79 [00:03<00:00, 25.63it/s]
100%|| 79/79 [00:04<00:00, 26.31it/s]
30it/s]
 68%|   | 54/79 [00:03<00:01, 23.62it/s]
 72%|  | 57/79 [00:03<00:00, 24.03it/s]
 76%|  | 60/79 [00:03<00:00, 24.00it/s]
 80%|  | 63/79 [00:03<00:00, 24.21it/s]
 84%| | 66/79 [00:03<00:00, 24.54it/s]
 87%| | 69/79 [00:03<00:00, 24.42it/s]
 91%| | 72/79 [00:03<00:00, 21.28it/s]
 95%|| 75/79 [00:03<00:00, 19.76it/s]
 99%|| 78/79 [00:04<00:00, 20.73it/s]
100%|| 79/79 [00:04<00:00, 18.74it/s]
2020-06-23 16:32:22,777 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.192945 (0.026834844970703126 s / img per device, on 32 devices)
2020-06-23 16:32:22,798 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:32:22,798 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:32:22,817 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592955151568, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 8, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592955151568, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 8}}
2020-06-23 16:32:31,664 maskrcnn_benchmark.trainer INFO: eta: 1:11:24  iter: 6420  loss: 0.7402 (0.8010)  loss_classifier: 0.2693 (0.2975)  loss_box_reg: 0.1271 (0.1278)  loss_mask: 0.2768 (0.3120)  loss_objectness: 0.0259 (0.0416)  loss_rpn_box_reg: 0.0125 (0.0220)  time: 0.1071 (0.1276)  data: 0.0016 (0.0198)  lr: 0.160000  max mem: 5188
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:32:33,844 maskrcnn_benchmark.trainer INFO: eta: 1:11:19  iter: 6440  loss: 0.7142 (0.8008)  loss_classifier: 0.2662 (0.2974)  loss_box_reg: 0.1179 (0.1279)  loss_mask: 0.2702 (0.3119)  loss_objectness: 0.0140 (0.0416)  loss_rpn_box_reg: 0.0113 (0.0220)  time: 0.1085 (0.1275)  data: 0.0014 (0.0197)  lr: 0.160000  max mem: 5188
2020-06-23 16:32:36,014 maskrcnn_benchmark.trainer INFO: eta: 1:11:15  iter: 6460  loss: 0.6633 (0.8004)  loss_classifier: 0.2323 (0.2973)  loss_box_reg: 0.1174 (0.1278)  loss_mask: 0.2603 (0.3118)  loss_objectness: 0.0218 (0.0416)  loss_rpn_box_reg: 0.0081 (0.0220)  time: 0.1077 (0.1275)  data: 0.0016 (0.0197)  lr: 0.160000  max mem: 5188
2020-06-23 16:32:38,182 maskrcnn_benchmark.trainer INFO: eta: 1:11:10  iter: 6480  loss: 0.5630 (0.7998)  loss_classifier: 0.1896 (0.2970)  loss_box_reg: 0.0734 (0.1277)  loss_mask: 0.2430 (0.3116)  loss_objectness: 0.0203 (0.0415)  loss_rpn_box_reg: 0.0066 (0.0219)  time: 0.1082 (0.1274)  data: 0.0014 (0.0196)  lr: 0.160000  max mem: 5188
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.73s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:32:40,336 maskrcnn_benchmark.trainer INFO: eta: 1:11:06  iter: 6500  loss: 0.7087 (0.7996)  loss_classifier: 0.2314 (0.2969)  loss_box_reg: 0.1267 (0.1278)  loss_mask: 0.2832 (0.3115)  loss_objectness: 0.0298 (0.0415)  loss_rpn_box_reg: 0.0124 (0.0219)  time: 0.1083 (0.1273)  data: 0.0015 (0.0196)  lr: 0.160000  max mem: 5188
DONE (t=1.63s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.29233
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.49078
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.31070
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.16358
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.32646
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.37728
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.26693
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.42385
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44504
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.26030
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47945
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.56846
2020-06-23 16:32:42,502 maskrcnn_benchmark.trainer INFO: eta: 1:11:01  iter: 6520  loss: 0.5933 (0.7992)  loss_classifier: 0.2328 (0.2968)  loss_box_reg: 0.1004 (0.1277)  loss_mask: 0.2432 (0.3113)  loss_objectness: 0.0137 (0.0414)  loss_rpn_box_reg: 0.0078 (0.0219)  time: 0.1074 (0.1273)  data: 0.0015 (0.0195)  lr: 0.160000  max mem: 5188
2020-06-23 16:32:44,656 maskrcnn_benchmark.trainer INFO: eta: 1:10:57  iter: 6540  loss: 0.6161 (0.7987)  loss_classifier: 0.2041 (0.2965)  loss_box_reg: 0.0954 (0.1276)  loss_mask: 0.2641 (0.3112)  loss_objectness: 0.0188 (0.0414)  loss_rpn_box_reg: 0.0138 (0.0220)  time: 0.1074 (0.1272)  data: 0.0015 (0.0195)  lr: 0.160000  max mem: 5188
2020-06-23 16:32:46,816 maskrcnn_benchmark.trainer INFO: eta: 1:10:52  iter: 6560  loss: 0.6020 (0.7981)  loss_classifier: 0.1758 (0.2962)  loss_box_reg: 0.0678 (0.1275)  loss_mask: 0.2594 (0.3111)  loss_objectness: 0.0183 (0.0414)  loss_rpn_box_reg: 0.0063 (0.0220)  time: 0.1076 (0.1272)  data: 0.0014 (0.0194)  lr: 0.160000  max mem: 5188
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
DONE (t=2.01s)
2020-06-23 16:32:48,970 maskrcnn_benchmark.trainer INFO: eta: 1:10:48  iter: 6580  loss: 0.6930 (0.7979)  loss_classifier: 0.2643 (0.2962)  loss_box_reg: 0.1257 (0.1275)  loss_mask: 0.2570 (0.3110)  loss_objectness: 0.0352 (0.0414)  loss_rpn_box_reg: 0.0164 (0.0220)  time: 0.1072 (0.1271)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 5188
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:32:51,127 maskrcnn_benchmark.trainer INFO: eta: 1:10:43  iter: 6600  loss: 0.6561 (0.7976)  loss_classifier: 0.2367 (0.2960)  loss_box_reg: 0.1010 (0.1274)  loss_mask: 0.2532 (0.3108)  loss_objectness: 0.0312 (0.0414)  loss_rpn_box_reg: 0.0158 (0.0220)  time: 0.1075 (0.1271)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 5188
DONE (t=2.65s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.27767
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.46403
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.29290
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.12020
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.30454
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.40286
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25772
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.39972
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.41815
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22448
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.45641
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.55032
2020-06-23 16:32:52,027 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.2923252226705254, segm mAP: 0.2776713304558068
:::MLLOG {"namespace": "", "time_ms": 1592955172028, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.2923252226705254, "SEGM": 0.2776713304558068}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1592955172028, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 7}}
2020-06-23 16:32:53,441 maskrcnn_benchmark.trainer INFO: eta: 1:10:39  iter: 6620  loss: 0.7160 (0.7975)  loss_classifier: 0.2589 (0.2960)  loss_box_reg: 0.1080 (0.1274)  loss_mask: 0.2699 (0.3107)  loss_objectness: 0.0271 (0.0414)  loss_rpn_box_reg: 0.0169 (0.0220)  time: 0.1072 (0.1270)  data: 0.0016 (0.0192)  lr: 0.160000  max mem: 5188
2020-06-23 16:32:55,634 maskrcnn_benchmark.trainer INFO: eta: 1:10:35  iter: 6640  loss: 0.7131 (0.7971)  loss_classifier: 0.2267 (0.2958)  loss_box_reg: 0.1191 (0.1274)  loss_mask: 0.2755 (0.3106)  loss_objectness: 0.0227 (0.0414)  loss_rpn_box_reg: 0.0122 (0.0220)  time: 0.1093 (0.1270)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 5188
2020-06-23 16:32:57,798 maskrcnn_benchmark.trainer INFO: eta: 1:10:31  iter: 6660  loss: 0.7267 (0.7970)  loss_classifier: 0.2749 (0.2957)  loss_box_reg: 0.1344 (0.1274)  loss_mask: 0.2910 (0.3106)  loss_objectness: 0.0167 (0.0413)  loss_rpn_box_reg: 0.0091 (0.0220)  time: 0.1071 (0.1269)  data: 0.0015 (0.0191)  lr: 0.160000  max mem: 5188
2020-06-23 16:32:59,969 maskrcnn_benchmark.trainer INFO: eta: 1:10:26  iter: 6680  loss: 0.6752 (0.7966)  loss_classifier: 0.2132 (0.2955)  loss_box_reg: 0.1003 (0.1273)  loss_mask: 0.2808 (0.3105)  loss_objectness: 0.0198 (0.0413)  loss_rpn_box_reg: 0.0078 (0.0220)  time: 0.1091 (0.1269)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:02,140 maskrcnn_benchmark.trainer INFO: eta: 1:10:22  iter: 6700  loss: 0.7056 (0.7964)  loss_classifier: 0.2457 (0.2954)  loss_box_reg: 0.1103 (0.1273)  loss_mask: 0.2812 (0.3104)  loss_objectness: 0.0294 (0.0413)  loss_rpn_box_reg: 0.0136 (0.0220)  time: 0.1079 (0.1268)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:04,316 maskrcnn_benchmark.trainer INFO: eta: 1:10:18  iter: 6720  loss: 0.7057 (0.7961)  loss_classifier: 0.2378 (0.2953)  loss_box_reg: 0.1036 (0.1272)  loss_mask: 0.2759 (0.3103)  loss_objectness: 0.0204 (0.0413)  loss_rpn_box_reg: 0.0109 (0.0220)  time: 0.1085 (0.1267)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:06,495 maskrcnn_benchmark.trainer INFO: eta: 1:10:13  iter: 6740  loss: 0.6466 (0.7959)  loss_classifier: 0.2357 (0.2953)  loss_box_reg: 0.1032 (0.1272)  loss_mask: 0.2742 (0.3102)  loss_objectness: 0.0189 (0.0413)  loss_rpn_box_reg: 0.0107 (0.0220)  time: 0.1091 (0.1267)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:08,635 maskrcnn_benchmark.trainer INFO: eta: 1:10:09  iter: 6760  loss: 0.7418 (0.7957)  loss_classifier: 0.2382 (0.2951)  loss_box_reg: 0.1241 (0.1272)  loss_mask: 0.2576 (0.3100)  loss_objectness: 0.0217 (0.0413)  loss_rpn_box_reg: 0.0106 (0.0220)  time: 0.1064 (0.1266)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:10,819 maskrcnn_benchmark.trainer INFO: eta: 1:10:05  iter: 6780  loss: 0.7093 (0.7953)  loss_classifier: 0.2585 (0.2950)  loss_box_reg: 0.0988 (0.1271)  loss_mask: 0.2631 (0.3099)  loss_objectness: 0.0148 (0.0412)  loss_rpn_box_reg: 0.0059 (0.0220)  time: 0.1091 (0.1266)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:13,003 maskrcnn_benchmark.trainer INFO: eta: 1:10:00  iter: 6800  loss: 0.6994 (0.7951)  loss_classifier: 0.2532 (0.2950)  loss_box_reg: 0.1144 (0.1271)  loss_mask: 0.2881 (0.3099)  loss_objectness: 0.0290 (0.0412)  loss_rpn_box_reg: 0.0093 (0.0220)  time: 0.1085 (0.1265)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:15,167 maskrcnn_benchmark.trainer INFO: eta: 1:09:56  iter: 6820  loss: 0.7272 (0.7949)  loss_classifier: 0.2582 (0.2949)  loss_box_reg: 0.1229 (0.1271)  loss_mask: 0.2768 (0.3097)  loss_objectness: 0.0253 (0.0412)  loss_rpn_box_reg: 0.0106 (0.0220)  time: 0.1080 (0.1265)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:17,347 maskrcnn_benchmark.trainer INFO: eta: 1:09:52  iter: 6840  loss: 0.6168 (0.7945)  loss_classifier: 0.2173 (0.2947)  loss_box_reg: 0.1102 (0.1270)  loss_mask: 0.2563 (0.3096)  loss_objectness: 0.0177 (0.0411)  loss_rpn_box_reg: 0.0057 (0.0220)  time: 0.1082 (0.1264)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:19,514 maskrcnn_benchmark.trainer INFO: eta: 1:09:48  iter: 6860  loss: 0.7123 (0.7943)  loss_classifier: 0.2459 (0.2946)  loss_box_reg: 0.1202 (0.1270)  loss_mask: 0.2785 (0.3096)  loss_objectness: 0.0225 (0.0411)  loss_rpn_box_reg: 0.0105 (0.0220)  time: 0.1078 (0.1264)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:21,659 maskrcnn_benchmark.trainer INFO: eta: 1:09:43  iter: 6880  loss: 0.6048 (0.7940)  loss_classifier: 0.2030 (0.2945)  loss_box_reg: 0.0975 (0.1270)  loss_mask: 0.2792 (0.3095)  loss_objectness: 0.0277 (0.0411)  loss_rpn_box_reg: 0.0133 (0.0220)  time: 0.1070 (0.1263)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:23,838 maskrcnn_benchmark.trainer INFO: eta: 1:09:39  iter: 6900  loss: 0.6105 (0.7936)  loss_classifier: 0.2195 (0.2943)  loss_box_reg: 0.0986 (0.1269)  loss_mask: 0.2710 (0.3094)  loss_objectness: 0.0236 (0.0411)  loss_rpn_box_reg: 0.0106 (0.0220)  time: 0.1090 (0.1263)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:26,003 maskrcnn_benchmark.trainer INFO: eta: 1:09:35  iter: 6920  loss: 0.7356 (0.7932)  loss_classifier: 0.2407 (0.2942)  loss_box_reg: 0.1060 (0.1269)  loss_mask: 0.2462 (0.3092)  loss_objectness: 0.0227 (0.0410)  loss_rpn_box_reg: 0.0070 (0.0219)  time: 0.1083 (0.1262)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:28,161 maskrcnn_benchmark.trainer INFO: eta: 1:09:31  iter: 6940  loss: 0.6918 (0.7930)  loss_classifier: 0.2597 (0.2941)  loss_box_reg: 0.1070 (0.1268)  loss_mask: 0.2637 (0.3091)  loss_objectness: 0.0210 (0.0410)  loss_rpn_box_reg: 0.0122 (0.0219)  time: 0.1071 (0.1262)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:30,329 maskrcnn_benchmark.trainer INFO: eta: 1:09:26  iter: 6960  loss: 0.5880 (0.7926)  loss_classifier: 0.1870 (0.2939)  loss_box_reg: 0.0907 (0.1268)  loss_mask: 0.2582 (0.3091)  loss_objectness: 0.0179 (0.0410)  loss_rpn_box_reg: 0.0102 (0.0219)  time: 0.1077 (0.1261)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:32,478 maskrcnn_benchmark.trainer INFO: eta: 1:09:22  iter: 6980  loss: 0.6751 (0.7923)  loss_classifier: 0.2454 (0.2937)  loss_box_reg: 0.1223 (0.1268)  loss_mask: 0.2738 (0.3090)  loss_objectness: 0.0222 (0.0409)  loss_rpn_box_reg: 0.0097 (0.0219)  time: 0.1072 (0.1261)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:34,627 maskrcnn_benchmark.trainer INFO: eta: 1:09:18  iter: 7000  loss: 0.7053 (0.7921)  loss_classifier: 0.2488 (0.2936)  loss_box_reg: 0.1188 (0.1267)  loss_mask: 0.2699 (0.3089)  loss_objectness: 0.0242 (0.0409)  loss_rpn_box_reg: 0.0135 (0.0219)  time: 0.1069 (0.1260)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:36,778 maskrcnn_benchmark.trainer INFO: eta: 1:09:14  iter: 7020  loss: 0.6395 (0.7918)  loss_classifier: 0.2648 (0.2935)  loss_box_reg: 0.0906 (0.1267)  loss_mask: 0.2703 (0.3088)  loss_objectness: 0.0186 (0.0409)  loss_rpn_box_reg: 0.0120 (0.0219)  time: 0.1069 (0.1260)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:38,941 maskrcnn_benchmark.trainer INFO: eta: 1:09:09  iter: 7040  loss: 0.7460 (0.7915)  loss_classifier: 0.2476 (0.2934)  loss_box_reg: 0.1171 (0.1267)  loss_mask: 0.2783 (0.3087)  loss_objectness: 0.0240 (0.0409)  loss_rpn_box_reg: 0.0121 (0.0219)  time: 0.1075 (0.1259)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:41,103 maskrcnn_benchmark.trainer INFO: eta: 1:09:05  iter: 7060  loss: 0.7036 (0.7913)  loss_classifier: 0.2420 (0.2933)  loss_box_reg: 0.1158 (0.1266)  loss_mask: 0.2769 (0.3086)  loss_objectness: 0.0234 (0.0408)  loss_rpn_box_reg: 0.0185 (0.0219)  time: 0.1082 (0.1259)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:43,254 maskrcnn_benchmark.trainer INFO: eta: 1:09:01  iter: 7080  loss: 0.5273 (0.7908)  loss_classifier: 0.1896 (0.2931)  loss_box_reg: 0.0789 (0.1266)  loss_mask: 0.2433 (0.3085)  loss_objectness: 0.0166 (0.0408)  loss_rpn_box_reg: 0.0086 (0.0219)  time: 0.1070 (0.1258)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:45,407 maskrcnn_benchmark.trainer INFO: eta: 1:08:57  iter: 7100  loss: 0.6119 (0.7904)  loss_classifier: 0.2372 (0.2929)  loss_box_reg: 0.1020 (0.1265)  loss_mask: 0.2584 (0.3083)  loss_objectness: 0.0262 (0.0408)  loss_rpn_box_reg: 0.0066 (0.0219)  time: 0.1070 (0.1258)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:47,569 maskrcnn_benchmark.trainer INFO: eta: 1:08:53  iter: 7120  loss: 0.7077 (0.7902)  loss_classifier: 0.2514 (0.2928)  loss_box_reg: 0.1202 (0.1265)  loss_mask: 0.2765 (0.3083)  loss_objectness: 0.0293 (0.0408)  loss_rpn_box_reg: 0.0115 (0.0219)  time: 0.1077 (0.1257)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:49,737 maskrcnn_benchmark.trainer INFO: eta: 1:08:49  iter: 7140  loss: 0.6500 (0.7897)  loss_classifier: 0.2314 (0.2926)  loss_box_reg: 0.1080 (0.1264)  loss_mask: 0.2695 (0.3081)  loss_objectness: 0.0229 (0.0407)  loss_rpn_box_reg: 0.0083 (0.0218)  time: 0.1085 (0.1257)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:51,916 maskrcnn_benchmark.trainer INFO: eta: 1:08:44  iter: 7160  loss: 0.6599 (0.7895)  loss_classifier: 0.2179 (0.2925)  loss_box_reg: 0.1158 (0.1264)  loss_mask: 0.2568 (0.3080)  loss_objectness: 0.0234 (0.0407)  loss_rpn_box_reg: 0.0119 (0.0219)  time: 0.1081 (0.1256)  data: 0.0015 (0.0179)  lr: 0.160000  max mem: 5188
2020-06-23 16:33:54,086 maskrcnn_benchmark.trainer INFO: eta: 1:08:40  iter: 7180  loss: 0.6985 (0.7893)  loss_classifier: 0.2655 (0.2925)  loss_box_reg: 0.1117 (0.1264)  loss_mask: 0.2674 (0.3080)  loss_objectness: 0.0213 (0.0407)  loss_rpn_box_reg: 0.0132 (0.0218)  time: 0.1075 (0.1256)  data: 0.0015 (0.0179)  lr: 0.160000  max mem: 5193
2020-06-23 16:33:56,238 maskrcnn_benchmark.trainer INFO: eta: 1:08:36  iter: 7200  loss: 0.5792 (0.7888)  loss_classifier: 0.1888 (0.2923)  loss_box_reg: 0.0826 (0.1263)  loss_mask: 0.2627 (0.3078)  loss_objectness: 0.0179 (0.0406)  loss_rpn_box_reg: 0.0077 (0.0218)  time: 0.1074 (0.1255)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5193
2020-06-23 16:33:58,377 maskrcnn_benchmark.trainer INFO: eta: 1:08:32  iter: 7220  loss: 0.5853 (0.7884)  loss_classifier: 0.1851 (0.2921)  loss_box_reg: 0.0887 (0.1263)  loss_mask: 0.2553 (0.3077)  loss_objectness: 0.0154 (0.0406)  loss_rpn_box_reg: 0.0081 (0.0218)  time: 0.1066 (0.1255)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5193
2020-06-23 16:34:00,550 maskrcnn_benchmark.trainer INFO: eta: 1:08:28  iter: 7240  loss: 0.6509 (0.7879)  loss_classifier: 0.2126 (0.2919)  loss_box_reg: 0.0908 (0.1262)  loss_mask: 0.2647 (0.3076)  loss_objectness: 0.0202 (0.0405)  loss_rpn_box_reg: 0.0115 (0.0218)  time: 0.1083 (0.1254)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5193
2020-06-23 16:34:02,693 maskrcnn_benchmark.trainer INFO: eta: 1:08:24  iter: 7260  loss: 0.6053 (0.7875)  loss_classifier: 0.2047 (0.2917)  loss_box_reg: 0.0859 (0.1261)  loss_mask: 0.2534 (0.3075)  loss_objectness: 0.0188 (0.0405)  loss_rpn_box_reg: 0.0078 (0.0218)  time: 0.1073 (0.1254)  data: 0.0015 (0.0177)  lr: 0.160000  max mem: 5193
2020-06-23 16:34:04,832 maskrcnn_benchmark.trainer INFO: eta: 1:08:20  iter: 7280  loss: 0.5878 (0.7872)  loss_classifier: 0.2275 (0.2915)  loss_box_reg: 0.0869 (0.1260)  loss_mask: 0.2623 (0.3073)  loss_objectness: 0.0197 (0.0405)  loss_rpn_box_reg: 0.0068 (0.0218)  time: 0.1064 (0.1253)  data: 0.0015 (0.0176)  lr: 0.160000  max mem: 5193
2020-06-23 16:34:06,990 maskrcnn_benchmark.trainer INFO: eta: 1:08:16  iter: 7300  loss: 0.6141 (0.7867)  loss_classifier: 0.2013 (0.2913)  loss_box_reg: 0.0907 (0.1260)  loss_mask: 0.2623 (0.3072)  loss_objectness: 0.0171 (0.0405)  loss_rpn_box_reg: 0.0076 (0.0217)  time: 0.1078 (0.1253)  data: 0.0015 (0.0176)  lr: 0.160000  max mem: 5193
2020-06-23 16:34:09,144 maskrcnn_benchmark.trainer INFO: eta: 1:08:12  iter: 7320  loss: 0.6306 (0.7864)  loss_classifier: 0.2290 (0.2912)  loss_box_reg: 0.1119 (0.1259)  loss_mask: 0.2507 (0.3071)  loss_objectness: 0.0222 (0.0404)  loss_rpn_box_reg: 0.0104 (0.0217)  time: 0.1071 (0.1252)  data: 0.0015 (0.0175)  lr: 0.160000  max mem: 5193
:::MLLOG {"namespace": "", "time_ms": 1592955251391, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 8}}
:::MLLOG {"namespace": "", "time_ms": 1592955251392, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 8}}
:::MLLOG {"namespace": "", "time_ms": 1592955251392, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 8}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
2020-06-23 16:34:11,610 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.26s)
index created!
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
2020-06-23 16:34:11,915 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
Done (t=0.29s)
index created!
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.29it/s]
  4%|         | 3/79 [00:00<00:42,  1.79it/s]
  8%|         | 6/79 [00:00<00:29,  2.48it/s]
 11%|        | 9/79 [00:01<00:20,  3.41it/s]
 15%|        | 12/79 [00:01<00:14,  4.60it/s]
 19%|        | 15/79 [00:01<00:10,  6.10it/s]
 23%|       | 18/79 [00:01<00:07,  7.88it/s]
 27%|       | 21/79 [00:01<00:05,  9.93it/s]
 30%|       | 24/79 [00:01<00:04, 12.14it/s]
 34%|      | 27/79 [00:01<00:03, 14.32it/s]
 38%|      | 30/79 [00:01<00:02, 16.53it/s]
 42%|     | 33/79 [00:02<00:02, 18.46it/s]
 46%|     | 36/79 [00:02<00:02, 20.20it/s]
 49%|     | 39/79 [00:02<00:01, 21.41it/s]
 53%|    | 42/79 [00:02<00:01, 22.55it/s]
 57%|    | 45/79 [00:02<00:01, 23.30it/s]
 61%|    | 48/79 [00:02<00:01, 23.70it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.29it/s]
  5%|         | 4/79 [00:00<00:41,  1.79it/s]
  9%|         | 7/79 [00:01<00:28,  2.49it/s]
 13%|        | 10/79 [00:01<00:20,  3.42it/s]
 16%|        | 13/79 [00:01<00:14,  4.62it/s]
 20%|        | 16/79 [00:01<00:10,  6.13it/s]
 24%|       | 19/79 [00:01<00:07,  7.95it/s]
 28%|       | 22/79 [00:01<00:05, 10.04it/s]
 32%|      | 25/79 [00:01<00:04, 12.28it/s]
 35%|      | 28/79 [00:01<00:03, 14.58it/s]
 39%|      | 31/79 [00:01<00:02, 16.85it/s]
 43%|     | 34/79 [00:02<00:02, 18.72it/s]
 47%|     | 37/79 [00:02<00:02, 20.33it/s]
 51%|     | 40/79 [00:02<00:01, 21.62it/s]
 54%|    | 43/79 [00:02<00:01, 22.64it/s]
 58%|    | 46/79 [00:02<00:01, 23.38it/s]
 62%|   | 49/79 [00:02<00:01, 23.62it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.77it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:05,  9.61it/s]
 32%|      | 25/79 [00:01<00:04, 11.85it/s]
 35%|      | 28/79 [00:01<00:03, 14.25it/s]
 39%|      | 31/79 [00:01<00:02, 16.64it/s]
 43%|     | 34/79 [00:02<00:02, 18.71it/s]
 47%|     | 37/79 [00:02<00:02, 20.65it/s]
 51%|     | 40/79 [00:02<00:01, 22.03it/s]
 54%|    | 43/79 [00:02<00:01, 23.24it/s]
 58%|    | 46/79 [00:02<00:01, 23.59it/s]
 62%|   | 49/79 [00:02<00:01, 24.43it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.40it/s]
 32%|      | 25/79 [00:01<00:04, 11.62it/s]
 35%|      | 28/79 [00:01<00:03, 13.95it/s]
 39%|      | 31/79 [00:02<00:02, 16.13it/s]
 43%|     | 34/79 [00:02<00:02, 18.30it/s]
 47%|     | 37/79 [00:02<00:02, 20.06it/s]
 51%|     | 40/79 [00:02<00:01, 21.41it/s]
 54%|    | 43/79 [00:02<00:01, 22.79it/s]
 58%|    | 46/79 [00:02<00:01, 23.69it/s]
 62%|   | 49/79 [00:02<00:01, 24.22it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.36it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.57it/s]
 28%|       | 22/79 [00:01<00:05,  9.59it/s]
 32%|      | 25/79 [00:01<00:04, 11.81it/s]
 35%|      | 28/79 [00:01<00:03, 14.10it/s]
 39%|      | 31/79 [00:02<00:02, 16.36it/s]
 43%|     | 34/79 [00:02<00:02, 18.35it/s]
 47%|     | 37/79 [00:02<00:02, 20.27it/s]
 51%|     | 40/79 [00:02<00:01, 21.39it/s]
 54%|    | 43/79 [00:02<00:01, 22.50it/s]
 58%|    | 46/79 [00:02<00:01, 23.21it/s]
 62%|   | 49/79 [00:02<00:01, 24.04it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.63it/s]
 28%|       | 22/79 [00:01<00:05,  9.66it/s]
 32%|      | 25/79 [00:01<00:04, 11.89it/s]
 35%|      | 28/79 [00:01<00:03, 14.20it/s]
 39%|      | 31/79 [00:01<00:02, 16.40it/s]
 43%|     | 34/79 [00:02<00:02, 18.35it/s]
 47%|     | 37/79 [00:02<00:02, 20.02it/s]
 51%|     | 40/79 [00:02<00:01, 21.47it/s]
 54%|    | 43/79 [00:02<00:01, 22.70it/s]
 58%|    | 46/79 [00:02<00:01, 23.44it/s]
 62%|   | 49/79 [00:02<00:01, 24.21it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.70it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.49it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 14.09it/s]
 39%|      | 31/79 [00:02<00:02, 16.38it/s]
 43%|     | 34/79 [00:02<00:02, 18.46it/s]
 47%|     | 37/79 [00:02<00:02, 20.27it/s]
 51%|     | 40/79 [00:02<00:01, 21.65it/s]
 54%|    | 43/79 [00:02<00:01, 22.97it/s]
 58%|    | 46/79 [00:02<00:01, 23.90it/s]
 62%|   | 49/79 [00:02<00:01, 24.50it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  4%|         | 3/79 [00:00<00:45,  1.67it/s]
  8%|         | 6/79 [00:01<00:31,  2.32it/s]
 11%|        | 9/79 [00:01<00:21,  3.19it/s]
 15%|        | 12/79 [00:01<00:15,  4.32it/s]
 19%|        | 15/79 [00:01<00:11,  5.74it/s]
 23%|       | 18/79 [00:01<00:08,  7.47it/s]
 27%|       | 21/79 [00:01<00:06,  9.48it/s]
 30%|       | 24/79 [00:01<00:04, 11.67it/s]
 34%|      | 27/79 [00:01<00:03, 13.91it/s]
 38%|      | 30/79 [00:02<00:03, 16.17it/s]
 42%|     | 33/79 [00:02<00:02, 18.19it/s]
 46%|     | 36/79 [00:02<00:02, 19.90it/s]
 49%|     | 39/79 [00:02<00:01, 21.09it/s]
 53%|    | 42/79 [00:02<00:01, 21.81it/s]
 57%|    | 45/79 [00:02<00:01, 22.64it/s]
 61%|    | 48/79 [00:02<00:01, 23.18it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.28it/s]
  5%|         | 4/79 [00:00<00:42,  1.78it/s]
  9%|         | 7/79 [00:01<00:29,  2.47it/s]
 13%|        | 10/79 [00:01<00:20,  3.39it/s]
 16%|        | 13/79 [00:01<00:14,  4.57it/s]
 20%|        | 16/79 [00:01<00:10,  6.05it/s]
 24%|       | 19/79 [00:01<00:07,  7.86it/s]
 28%|       | 22/79 [00:01<00:05,  9.91it/s]
 32%|      | 25/79 [00:01<00:04, 12.00it/s]
 35%|      | 28/79 [00:01<00:03, 14.08it/s]
 39%|      | 31/79 [00:02<00:02, 16.15it/s]
 43%|     | 34/79 [00:02<00:02, 18.02it/s]
 47%|     | 37/79 [00:02<00:02, 19.65it/s]
 51%|     | 40/79 [00:02<00:01, 20.87it/s]
 54%|    | 43/79 [00:02<00:01, 21.98it/s]
 58%|    | 46/79 [00:02<00:01, 22.92it/s]
 62%|   | 49/79 [00:02<00:01, 23.66it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.33it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.59it/s]
 35%|      | 28/79 [00:01<00:03, 13.95it/s]
 39%|      | 31/79 [00:02<00:02, 16.20it/s]
 43%|     | 34/79 [00:02<00:02, 18.16it/s]
 47%|     | 37/79 [00:02<00:02, 19.95it/s]
 51%|     | 40/79 [00:02<00:01, 21.59it/s]
 54%|    | 43/79 [00:02<00:01, 22.86it/s]
 58%|    | 46/79 [00:02<00:01, 23.40it/s]
 62%|   | 49/79 [00:02<00:01, 24.27it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.21it/s]
 28%|       | 22/79 [00:01<00:06,  9.21it/s]
 32%|      | 25/79 [00:01<00:04, 11.41it/s]
 35%|      | 28/79 [00:01<00:03, 13.75it/s]
 39%|      | 31/79 [00:02<00:03, 15.96it/s]
 43%|     | 34/79 [00:02<00:02, 18.05it/s]
 47%|     | 37/79 [00:02<00:02, 19.70it/s]
 51%|     | 40/79 [00:02<00:01, 21.24it/s]
 54%|    | 43/79 [00:02<00:01, 22.51it/s]
 58%|    | 46/79 [00:02<00:01, 23.42it/s]
 62%|   | 49/79 [00:02<00:01, 23.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.47it/s]
 28%|       | 22/79 [00:01<00:05,  9.52it/s]
 32%|      | 25/79 [00:01<00:04, 11.71it/s]
 35%|      | 28/79 [00:01<00:03, 13.91it/s]
 39%|      | 31/79 [00:02<00:02, 16.10it/s]
 43%|     | 34/79 [00:02<00:02, 18.12it/s]
 47%|     | 37/79 [00:02<00:02, 19.65it/s]
 51%|     | 40/79 [00:02<00:01, 21.19it/s]
 54%|    | 43/79 [00:02<00:01, 22.33it/s]
 58%|    | 46/79 [00:02<00:01, 23.14it/s]
 62%|   | 49/79 [00:02<00:01, 23.91it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:05,  9.51it/s]
 32%|      | 25/79 [00:01<00:04, 11.72it/s]
 35%|      | 28/79 [00:01<00:03, 14.01it/s]
 39%|      | 31/79 [00:02<00:02, 16.19it/s]
 43%|     | 34/79 [00:02<00:02, 18.22it/s]
 47%|     | 37/79 [00:02<00:02, 19.80it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 22.04it/s]
 58%|    | 46/79 [00:02<00:01, 22.94it/s]
 62%|   | 49/79 [00:02<00:01, 23.69it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.33it/s]
 28%|       | 22/79 [00:01<00:06,  9.32it/s]
 32%|      | 25/79 [00:01<00:04, 11.51it/s]
 35%|      | 28/79 [00:01<00:03, 13.80it/s]
 39%|      | 31/79 [00:02<00:02, 16.06it/s]
 43%|     | 34/79 [00:02<00:02, 18.17it/s]
 47%|     | 37/79 [00:02<00:02, 19.93it/s]
 51%|     | 40/79 [00:02<00:01, 21.30it/s]
 54%|    | 43/79 [00:02<00:01, 22.43it/s]
 58%|    | 46/79 [00:02<00:01, 23.36it/s]
 62%|   | 49/79 [00:02<00:01, 23.83it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.35it/s]
 32%|      | 25/79 [00:01<00:04, 11.54it/s]
 35%|      | 28/79 [00:01<00:03, 13.95it/s]
 39%|      | 31/79 [00:02<00:02, 16.07it/s]
 43%|     | 34/79 [00:02<00:02, 18.08it/s]
 47%|     | 37/79 [00:02<00:02, 19.85it/s]
 51%|     | 40/79 [00:02<00:01, 21.27it/s]
 54%|    | 43/79 [00:02<00:01, 22.44it/s]
 58%|    | 46/79 [00:02<00:01, 23.50it/s]
 62%|   | 49/79 [00:02<00:01, 24.38it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.17it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.28it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.77it/s]
 39%|      | 31/79 [00:02<00:02, 16.05it/s]
 43%|     | 34/79 [00:02<00:02, 18.02it/s]
 47%|     | 37/79 [00:02<00:02, 19.90it/s]
 51%|     | 40/79 [00:02<00:01, 21.34it/s]
 54%|    | 43/79 [00:02<00:01, 22.46it/s]
 58%|    | 46/79 [00:02<00:01, 23.44it/s]
 62%|   | 49/79 [00:02<00:01, 24.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.36it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.54it/s]
 28%|       | 22/79 [00:01<00:05,  9.54it/s]
 32%|      | 25/79 [00:01<00:04, 11.70it/s]
 35%|      | 28/79 [00:01<00:03, 13.94it/s]
 39%|      | 31/79 [00:02<00:02, 16.06it/s]
 43%|     | 34/79 [00:02<00:02, 17.86it/s]
 47%|     | 37/79 [00:02<00:02, 19.55it/s]
 51%|     | 40/79 [00:02<00:01, 20.81it/s]
 54%|    | 43/79 [00:02<00:01, 21.69it/s]
 58%|    | 46/79 [00:02<00:01, 22.51it/s]
 62%|   | 49/79 [00:02<00:01, 23.29it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.78it/s]
 35%|      | 28/79 [00:01<00:03, 14.00it/s]
 39%|      | 31/79 [00:02<00:02, 16.23it/s]
 43%|     | 34/79 [00:02<00:02, 18.03it/s]
 47%|     | 37/79 [00:02<00:02, 19.77it/s]
 51%|     | 40/79 [00:02<00:01, 21.10it/s]
 54%|    | 43/79 [00:02<00:01, 22.23it/s]
 58%|    | 46/79 [00:02<00:01, 23.09it/s]
 62%|   | 49/79 [00:02<00:01, 23.68it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.22it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.74it/s]
 39%|      | 31/79 [00:02<00:03, 15.88it/s]
 43%|     | 34/79 [00:02<00:02, 17.81it/s]
 47%|     | 37/79 [00:02<00:02, 19.67it/s]
 51%|     | 40/79 [00:02<00:01, 21.19it/s]
 54%|    | 43/79 [00:02<00:01, 22.22it/s]
 58%|    | 46/79 [00:02<00:01, 22.99it/s]
 62%|   | 49/79 [00:02<00:01, 23.82it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.25it/s]
 28%|       | 22/79 [00:01<00:06,  9.16it/s]
 32%|      | 25/79 [00:01<00:04, 11.33it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.92it/s]
 43%|     | 34/79 [00:02<00:02, 17.90it/s]
 47%|     | 37/79 [00:02<00:02, 19.60it/s]
 51%|     | 40/79 [00:02<00:01, 20.97it/s]
 54%|    | 43/79 [00:02<00:01, 22.20it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.49it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.78it/s]
 24%|       | 19/79 [00:01<00:07,  7.50it/s]
 28%|       | 22/79 [00:01<00:05,  9.53it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 13.90it/s]
 39%|      | 31/79 [00:02<00:02, 16.10it/s]
 43%|     | 34/79 [00:02<00:02, 18.02it/s]
 47%|     | 37/79 [00:02<00:02, 19.90it/s]
 51%|     | 40/79 [00:02<00:01, 21.16it/s]
 54%|    | 43/79 [00:02<00:01, 22.16it/s]
 58%|    | 46/79 [00:02<00:01, 23.17it/s]
 62%|   | 49/79 [00:02<00:01, 23.78it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.26it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.36it/s]
 35%|      | 28/79 [00:01<00:03, 13.58it/s]
 39%|      | 31/79 [00:02<00:03, 15.61it/s]
 43%|     | 34/79 [00:02<00:02, 17.58it/s]
 47%|     | 37/79 [00:02<00:02, 19.12it/s]
 51%|     | 40/79 [00:02<00:01, 20.67it/s]
 54%|    | 43/79 [00:02<00:01, 21.71it/s]
 58%|    | 46/79 [00:02<00:01, 22.74it/s]
 62%|   | 49/79 [00:02<00:01, 23.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  4%|         | 3/79 [00:00<00:48,  1.58it/s]
  8%|         | 6/79 [00:01<00:33,  2.20it/s]
 11%|        | 9/79 [00:01<00:23,  3.03it/s]
 15%|        | 12/79 [00:01<00:16,  4.12it/s]
 19%|        | 15/79 [00:01<00:11,  5.49it/s]
 23%|       | 18/79 [00:01<00:08,  7.17it/s]
 27%|       | 21/79 [00:01<00:06,  9.15it/s]
 30%|       | 24/79 [00:01<00:04, 11.26it/s]
 34%|      | 27/79 [00:01<00:03, 13.50it/s]
 38%|      | 30/79 [00:02<00:03, 15.69it/s]
 42%|     | 33/79 [00:02<00:02, 17.69it/s]
 46%|     | 36/79 [00:02<00:02, 19.40it/s]
 49%|     | 39/79 [00:02<00:01, 20.81it/s]
 53%|    | 42/79 [00:02<00:01, 21.89it/s]
 57%|    | 45/79 [00:02<00:01, 22.78it/s]
 61%|    | 48/79 [00:02<00:01, 23.49it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.24it/s]
 28%|       | 22/79 [00:01<00:06,  9.16it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.53it/s]
 39%|      | 31/79 [00:02<00:03, 15.82it/s]
 43%|     | 34/79 [00:02<00:02, 17.69it/s]
 47%|     | 37/79 [00:02<00:02, 19.30it/s]
 51%|     | 40/79 [00:02<00:01, 20.81it/s]
 54%|    | 43/79 [00:02<00:01, 21.92it/s]
 58%|    | 46/79 [00:02<00:01, 22.72it/s]
 62%|   | 49/79 [00:02<00:01, 22.99it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.17it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.25it/s]
 28%|       | 22/79 [00:01<00:06,  9.21it/s]
 32%|      | 25/79 [00:01<00:04, 11.28it/s]
 35%|      | 28/79 [00:01<00:03, 13.52it/s]
 39%|      | 31/79 [00:02<00:03, 15.63it/s]
 43%|     | 34/79 [00:02<00:02, 17.57it/s]
 47%|     | 37/79 [00:02<00:02, 18.98it/s]
 51%|     | 40/79 [00:02<00:01, 20.34it/s]
 54%|    | 43/79 [00:02<00:01, 21.63it/s]
 58%|    | 46/79 [00:02<00:01, 22.56it/s]
 62%|   | 49/79 [00:02<00:01, 23.15it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  4%|         | 3/79 [00:00<00:47,  1.60it/s]
  8%|         | 6/79 [00:01<00:33,  2.20it/s]
 11%|        | 9/79 [00:01<00:23,  3.03it/s]
 15%|        | 12/79 [00:01<00:16,  4.11it/s]
 19%|        | 15/79 [00:01<00:11,  5.48it/s]
 23%|       | 18/79 [00:01<00:08,  7.16it/s]
 27%|       | 21/79 [00:01<00:06,  9.13it/s]
 30%|       | 24/79 [00:01<00:04, 11.24it/s]
 34%|      | 27/79 [00:02<00:03, 13.39it/s]
 38%|      | 30/79 [00:02<00:03, 15.43it/s]
 42%|     | 33/79 [00:02<00:02, 17.40it/s]
 46%|     | 36/79 [00:02<00:02, 19.00it/s]
 49%|     | 39/79 [00:02<00:01, 20.26it/s]
 53%|    | 42/79 [00:02<00:01, 21.17it/s]
 57%|    | 45/79 [00:02<00:01, 22.18it/s]
 61%|    | 48/79 [00:02<00:01, 22.78it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:11,  5.26it/s]
 24%|       | 19/79 [00:01<00:08,  6.90it/s]
 28%|       | 22/79 [00:01<00:06,  8.84it/s]
 32%|      | 25/79 [00:01<00:04, 10.94it/s]
 35%|      | 28/79 [00:02<00:03, 13.21it/s]
 39%|      | 31/79 [00:02<00:03, 15.38it/s]
 43%|     | 34/79 [00:02<00:02, 17.37it/s]
 47%|     | 37/79 [00:02<00:02, 19.03it/s]
 51%|     | 40/79 [00:02<00:01, 20.32it/s]
 54%|    | 43/79 [00:02<00:01, 21.63it/s]
 58%|    | 46/79 [00:02<00:01, 22.11it/s]
 62%|   | 49/79 [00:02<00:01, 22.77it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.85it/s]
 28%|       | 22/79 [00:01<00:06,  8.76it/s]
 32%|      | 25/79 [00:01<00:04, 10.86it/s]
 35%|      | 28/79 [00:02<00:03, 13.00it/s]
 39%|      | 31/79 [00:02<00:03, 15.07it/s]
 43%|     | 34/79 [00:02<00:02, 17.06it/s]
 47%|     | 37/79 [00:02<00:02, 18.64it/s]
 51%|     | 40/79 [00:02<00:01, 19.89it/s]
 54%|    | 43/79 [00:02<00:01, 21.20it/s]
 58%|    | 46/79 [00:02<00:01, 21.72it/s]
 62%|   | 49/79 [00:02<00:01, 22.49it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  9.00it/s]
 32%|      | 25/79 [00:01<00:04, 11.03it/s]
 35%|      | 28/79 [00:02<00:03, 13.11it/s]
 39%|      | 31/79 [00:02<00:03, 15.32it/s]
 43%|     | 34/79 [00:02<00:02, 17.32it/s]
 47%|     | 37/79 [00:02<00:02, 19.05it/s]
 51%|     | 40/79 [00:02<00:01, 20.36it/s]
 54%|    | 43/79 [00:02<00:01, 21.37it/s]
 58%|    | 46/79 [00:02<00:01, 22.23it/s]
 62%|   | 49/79 [00:02<00:01, 22.66it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.90it/s]
 28%|       | 22/79 [00:01<00:06,  8.78it/s]
 32%|      | 25/79 [00:01<00:04, 10.83it/s]
 35%|      | 28/79 [00:02<00:03, 12.95it/s]
 39%|      | 31/79 [00:02<00:03, 15.09it/s]
 43%|     | 34/79 [00:02<00:02, 16.84it/s]
 47%|     | 37/79 [00:02<00:02, 18.46it/s]
 51%|     | 40/79 [00:02<00:01, 19.85it/s]
 54%|    | 43/79 [00:02<00:01, 21.09it/s]
 58%|    | 46/79 [00:02<00:01, 21.93it/s]
 62%|   | 49/79 [00:02<00:01, 22.70it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:18,  1.00s/it]
  5%|         | 4/79 [00:01<00:53,  1.40it/s]
  9%|         | 7/79 [00:01<00:36,  1.95it/s]
 13%|        | 10/79 [00:01<00:25,  2.70it/s]
 16%|        | 13/79 [00:01<00:17,  3.68it/s]
 20%|        | 16/79 [00:01<00:12,  4.95it/s]
 24%|       | 19/79 [00:01<00:09,  6.52it/s]
 28%|       | 22/79 [00:01<00:06,  8.35it/s]
 32%|      | 25/79 [00:01<00:05, 10.45it/s]
 35%|      | 28/79 [00:02<00:04, 12.62it/s]
 39%|      | 31/79 [00:02<00:03, 14.87it/s]
 43%|     | 34/79 [00:02<00:02, 16.94it/s]
 47%|     | 37/79 [00:02<00:02, 18.58it/s]
 51%|     | 40/79 [00:02<00:01, 20.14it/s]
 54%|    | 43/79 [00:02<00:01, 21.15it/s]
 58%|    | 46/79 [00:02<00:01, 21.95it/s]
 62%|   | 49/79 [00:02<00:01, 22.63it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.02it/s]
 13%|        | 10/79 [00:01<00:24,  2.79it/s]
 16%|        | 13/79 [00:01<00:17,  3.80it/s]
 20%|        | 16/79 [00:01<00:12,  5.09it/s]
 24%|       | 19/79 [00:01<00:08,  6.68it/s]
 28%|       | 22/79 [00:01<00:06,  8.56it/s]
 32%|      | 25/79 [00:01<00:05, 10.68it/s]
 35%|      | 28/79 [00:02<00:03, 12.87it/s]
 39%|      | 31/79 [00:02<00:03, 14.89it/s]
 43%|     | 34/79 [00:02<00:02, 16.83it/s]
 47%|     | 37/79 [00:02<00:02, 18.45it/s]
 51%|     | 40/79 [00:02<00:01, 19.79it/s]
 54%|    | 43/79 [00:02<00:01, 20.77it/s]
 58%|    | 46/79 [00:02<00:01, 21.76it/s]
 62%|   | 49/79 [00:02<00:01, 22.29it/s]
 66%|   | 52/79 [00:03<00:01, 24.33it/s]
 70%|   | 55/79 [00:02<00:00, 24.76it/s]
 73%|  | 58/79 [00:03<00:00, 25.24it/s]
 77%|  | 61/79 [00:03<00:00, 25.28it/s]
 81%|  | 64/79 [00:03<00:00, 25.45it/s]
 85%| | 67/79 [00:03<00:00, 25.50it/s]
 89%| | 70/79 [00:03<00:00, 25.47it/s]
 92%|| 73/79 [00:03<00:00, 25.67it/s]
 96%|| 76/79 [00:03<00:00, 26.28it/s]
100%|| 79/79 [00:03<00:00, 27.23it/s]
, 24.84it/s]
 70%|   | 55/79 [00:02<00:00, 25.39it/s]
 73%|  | 58/79 [00:03<00:00, 25.52it/s]
 77%|  | 61/79 [00:03<00:00, 25.68it/s]
 81%|  | 64/79 [00:03<00:00, 25.80it/s]
 85%| | 67/79 [00:03<00:00, 25.95it/s]
 89%| | 70/79 [00:03<00:00, 26.02it/s]
 92%|| 73/79 [00:03<00:00, 26.47it/s]
 96%|| 76/79 [00:03<00:00, 27.03it/s]
100%|| 79/79 [00:03<00:00, 20.40it/s]
, 24.92it/s]
 70%|   | 55/79 [00:02<00:00, 25.21it/s]
 73%|  | 58/79 [00:03<00:00, 25.50it/s]
 77%|  | 61/79 [00:03<00:00, 25.60it/s]
 81%|  | 64/79 [00:03<00:00, 25.75it/s]
 85%| | 67/79 [00:03<00:00, 25.90it/s]
 89%| | 70/79 [00:03<00:00, 26.01it/s]
 92%|| 73/79 [00:03<00:00, 26.24it/s]
 96%|| 76/79 [00:03<00:00, 26.63it/s]
100%|| 79/79 [00:03<00:00, 27.54it/s]
, 24.46it/s]
 70%|   | 55/79 [00:02<00:00, 24.85it/s]
 73%|  | 58/79 [00:03<00:00, 25.38it/s]
 77%|  | 61/79 [00:03<00:00, 25.72it/s]
 81%|  | 64/79 [00:03<00:00, 26.07it/s]
 85%| | 67/79 [00:03<00:00, 26.00it/s]
 89%| | 70/79 [00:03<00:00, 26.20it/s]
 92%|| 73/79 [00:03<00:00, 26.33it/s]
 96%|| 76/79 [00:03<00:00, 26.82it/s]
100%|| 79/79 [00:03<00:00, 27.51it/s]
, 24.93it/s]
 70%|   | 55/79 [00:02<00:00, 25.31it/s]
 73%|  | 58/79 [00:03<00:00, 25.58it/s]
 77%|  | 61/79 [00:03<00:00, 25.55it/s]
 81%|  | 64/79 [00:03<00:00, 25.68it/s]
 85%| | 67/79 [00:03<00:00, 25.83it/s]
 89%| | 70/79 [00:03<00:00, 25.68it/s]
 92%|| 73/79 [00:03<00:00, 26.19it/s]
 96%|| 76/79 [00:03<00:00, 26.43it/s]
100%|| 79/79 [00:03<00:00, 27.39it/s]
95it/s]
 68%|   | 54/79 [00:02<00:01, 24.34it/s]
 72%|  | 57/79 [00:03<00:00, 24.36it/s]
 76%|  | 60/79 [00:03<00:00, 24.56it/s]
 80%|  | 63/79 [00:03<00:00, 24.70it/s]
 84%| | 66/79 [00:03<00:00, 24.79it/s]
 87%| | 69/79 [00:03<00:00, 24.70it/s]
 91%| | 72/79 [00:03<00:00, 24.90it/s]
 95%|| 75/79 [00:03<00:00, 25.69it/s]
 99%|| 78/79 [00:03<00:00, 26.41it/s]
100%|| 79/79 [00:03<00:00, 20.01it/s]
, 24.58it/s]
 70%|   | 55/79 [00:02<00:00, 24.90it/s]
 73%|  | 58/79 [00:03<00:00, 25.48it/s]
 77%|  | 61/79 [00:03<00:00, 25.42it/s]
 81%|  | 64/79 [00:03<00:00, 25.90it/s]
 85%| | 67/79 [00:03<00:00, 25.90it/s]
 89%| | 70/79 [00:03<00:00, 26.10it/s]
 92%|| 73/79 [00:03<00:00, 26.25it/s]
 96%|| 76/79 [00:03<00:00, 26.86it/s]
100%|| 79/79 [00:03<00:00, 27.58it/s]
, 24.68it/s]
 70%|   | 55/79 [00:02<00:00, 24.80it/s]
 73%|  | 58/79 [00:03<00:00, 24.98it/s]
 77%|  | 61/79 [00:03<00:00, 24.94it/s]
 81%|  | 64/79 [00:03<00:00, 25.08it/s]
 85%| | 67/79 [00:03<00:00, 25.14it/s]
 89%| | 70/79 [00:03<00:00, 25.33it/s]
 92%|| 73/79 [00:03<00:00, 25.53it/s]
 96%|| 76/79 [00:03<00:00, 26.26it/s]
100%|| 79/79 [00:03<00:00, 27.03it/s]
, 24.39it/s]
 70%|   | 55/79 [00:02<00:00, 24.94it/s]
 73%|  | 58/79 [00:03<00:00, 25.23it/s]
 77%|  | 61/79 [00:03<00:00, 25.52it/s]
 81%|  | 64/79 [00:03<00:00, 25.57it/s]
 85%| | 67/79 [00:03<00:00, 25.70it/s]
 89%| | 70/79 [00:03<00:00, 25.70it/s]
 92%|| 73/79 [00:03<00:00, 26.01it/s]
 96%|| 76/79 [00:03<00:00, 26.62it/s]
100%|| 79/79 [00:03<00:00, 27.50it/s]
89it/s]
 68%|   | 54/79 [00:02<00:01, 24.37it/s]
 72%|  | 57/79 [00:03<00:00, 24.78it/s]
 76%|  | 60/79 [00:03<00:00, 24.71it/s]
 80%|  | 63/79 [00:03<00:00, 25.10it/s]
 84%| | 66/79 [00:03<00:00, 25.48it/s]
 87%| | 69/79 [00:03<00:00, 25.66it/s]
 91%| | 72/79 [00:03<00:00, 25.70it/s]
 95%|| 75/79 [00:03<00:00, 26.37it/s]
 99%|| 78/79 [00:03<00:00, 26.80it/s]
100%|| 79/79 [00:03<00:00, 19.93it/s]
, 24.36it/s]
 70%|   | 55/79 [00:02<00:00, 25.18it/s]
 73%|  | 58/79 [00:03<00:00, 25.21it/s]
 77%|  | 61/79 [00:03<00:00, 25.27it/s]
 81%|  | 64/79 [00:03<00:00, 25.22it/s]
 85%| | 67/79 [00:03<00:00, 25.67it/s]
 89%| | 70/79 [00:03<00:00, 25.43it/s]
 92%|| 73/79 [00:03<00:00, 25.75it/s]
 96%|| 76/79 [00:03<00:00, 26.37it/s]
100%|| 79/79 [00:03<00:00, 27.31it/s]
, 24.66it/s]
 70%|   | 55/79 [00:02<00:00, 24.85it/s]
 73%|  | 58/79 [00:03<00:00, 25.39it/s]
 77%|  | 61/79 [00:03<00:00, 25.78it/s]
 81%|  | 64/79 [00:03<00:00, 24.90it/s]
 85%| | 67/79 [00:03<00:00, 25.03it/s]
 89%| | 70/79 [00:03<00:00, 25.55it/s]
 92%|| 73/79 [00:03<00:00, 25.34it/s]
 96%|| 76/79 [00:03<00:00, 26.01it/s]
100%|| 79/79 [00:03<00:00, 26.84it/s]
, 24.15it/s]
 70%|   | 55/79 [00:02<00:00, 24.51it/s]
 73%|  | 58/79 [00:03<00:00, 25.05it/s]
 77%|  | 61/79 [00:03<00:00, 25.41it/s]
 81%|  | 64/79 [00:03<00:00, 25.07it/s]
 85%| | 67/79 [00:03<00:00, 25.18it/s]
 89%| | 70/79 [00:03<00:00, 25.51it/s]
 92%|| 73/79 [00:03<00:00, 25.61it/s]
 96%|| 76/79 [00:03<00:00, 26.78it/s]
100%|| 79/79 [00:03<00:00, 27.15it/s]
, 24.01it/s]
 70%|   | 55/79 [00:02<00:00, 24.21it/s]
 73%|  | 58/79 [00:03<00:00, 24.49it/s]
 77%|  | 61/79 [00:03<00:00, 24.82it/s]
 81%|  | 64/79 [00:03<00:00, 24.85it/s]
 85%| | 67/79 [00:03<00:00, 25.29it/s]
 89%| | 70/79 [00:03<00:00, 25.65it/s]
 92%|| 73/79 [00:03<00:00, 25.83it/s]
 96%|| 76/79 [00:03<00:00, 26.51it/s]
100%|| 79/79 [00:03<00:00, 27.38it/s]
, 24.36it/s]
 70%|   | 55/79 [00:02<00:00, 24.75it/s]
 73%|  | 58/79 [00:03<00:00, 24.84it/s]
 77%|  | 61/79 [00:03<00:00, 24.89it/s]
 81%|  | 64/79 [00:03<00:00, 25.05it/s]
 85%| | 67/79 [00:03<00:00, 25.20it/s]
 89%| | 70/79 [00:03<00:00, 25.14it/s]
 92%|| 73/79 [00:03<00:00, 25.56it/s]
 96%|| 76/79 [00:03<00:00, 26.24it/s]
100%|| 79/79 [00:03<00:00, 27.00it/s]
, 24.33it/s]
 70%|   | 55/79 [00:02<00:00, 24.55it/s]
 73%|  | 58/79 [00:03<00:00, 24.67it/s]
 77%|  | 61/79 [00:03<00:00, 25.00it/s]
 81%|  | 64/79 [00:03<00:00, 25.21it/s]
 85%| | 67/79 [00:03<00:00, 25.40it/s]
 89%| | 70/79 [00:03<00:00, 25.35it/s]
 92%|| 73/79 [00:03<00:00, 25.52it/s]
 96%|| 76/79 [00:03<00:00, 26.44it/s]
100%|| 79/79 [00:03<00:00, 26.67it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:00, 24.06it/s]
 73%|  | 58/79 [00:03<00:00, 24.17it/s]
 77%|  | 61/79 [00:03<00:00, 24.22it/s]
 81%|  | 64/79 [00:03<00:00, 24.49it/s]
 85%| | 67/79 [00:03<00:00, 24.65it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 25.24it/s]
 96%|| 76/79 [00:03<00:00, 26.17it/s]
100%|| 79/79 [00:03<00:00, 27.17it/s]
, 24.68it/s]
 70%|   | 55/79 [00:02<00:00, 24.34it/s]
 73%|  | 58/79 [00:03<00:00, 24.63it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 24.60it/s]
 85%| | 67/79 [00:03<00:00, 24.84it/s]
 89%| | 70/79 [00:03<00:00, 24.98it/s]
 92%|| 73/79 [00:03<00:00, 25.39it/s]
 96%|| 76/79 [00:03<00:00, 26.05it/s]
100%|| 79/79 [00:03<00:00, 26.92it/s]
, 23.85it/s]
 70%|   | 55/79 [00:02<00:00, 24.41it/s]
 73%|  | 58/79 [00:03<00:00, 24.46it/s]
 77%|  | 61/79 [00:03<00:00, 24.83it/s]
 81%|  | 64/79 [00:03<00:00, 25.04it/s]
 85%| | 67/79 [00:03<00:00, 25.03it/s]
 89%| | 70/79 [00:03<00:00, 24.60it/s]
 92%|| 73/79 [00:03<00:00, 25.37it/s]
 96%|| 76/79 [00:03<00:00, 26.03it/s]
100%|| 79/79 [00:03<00:00, 26.92it/s]
, 24.56it/s]
 70%|   | 55/79 [00:03<00:00, 24.46it/s]
 73%|  | 58/79 [00:03<00:00, 24.67it/s]
 77%|  | 61/79 [00:03<00:00, 25.14it/s]
 81%|  | 64/79 [00:03<00:00, 24.96it/s]
 85%| | 67/79 [00:03<00:00, 24.73it/s]
 89%| | 70/79 [00:03<00:00, 24.72it/s]
 92%|| 73/79 [00:03<00:00, 25.23it/s]
 96%|| 76/79 [00:03<00:00, 25.76it/s]
100%|| 79/79 [00:03<00:00, 26.84it/s]
, 24.04it/s]
 70%|   | 55/79 [00:03<00:00, 24.17it/s]
 73%|  | 58/79 [00:03<00:00, 24.52it/s]
 77%|  | 61/79 [00:03<00:00, 24.29it/s]
 81%|  | 64/79 [00:03<00:00, 24.75it/s]
 85%| | 67/79 [00:03<00:00, 25.08it/s]
 89%| | 70/79 [00:03<00:00, 25.14it/s]
 92%|| 73/79 [00:03<00:00, 25.53it/s]
 96%|| 76/79 [00:03<00:00, 26.12it/s]
100%|| 79/79 [00:03<00:00, 26.86it/s]
, 23.94it/s]
 70%|   | 55/79 [00:03<00:00, 24.27it/s]
 73%|  | 58/79 [00:03<00:00, 24.26it/s]
 77%|  | 61/79 [00:03<00:00, 24.36it/s]
 81%|  | 64/79 [00:03<00:00, 24.52it/s]
 85%| | 67/79 [00:03<00:00, 24.65it/s]
 89%| | 70/79 [00:03<00:00, 24.97it/s]
 92%|| 73/79 [00:03<00:00, 25.29it/s]
 96%|| 76/79 [00:03<00:00, 25.87it/s]
100%|| 79/79 [00:03<00:00, 26.89it/s]
, 23.32it/s]
 70%|   | 55/79 [00:03<00:01, 23.89it/s]
 73%|  | 58/79 [00:03<00:00, 24.07it/s]
 77%|  | 61/79 [00:03<00:00, 24.43it/s]
 81%|  | 64/79 [00:03<00:00, 24.69it/s]
 85%| | 67/79 [00:03<00:00, 24.70it/s]
 89%| | 70/79 [00:03<00:00, 24.73it/s]
 92%|| 73/79 [00:03<00:00, 25.28it/s]
 96%|| 76/79 [00:03<00:00, 26.10it/s]
100%|| 79/79 [00:03<00:00, 27.07it/s]
, 23.39it/s]
 70%|   | 55/79 [00:03<00:01, 23.73it/s]
 73%|  | 58/79 [00:03<00:00, 24.03it/s]
 77%|  | 61/79 [00:03<00:00, 23.85it/s]
 81%|  | 64/79 [00:03<00:00, 24.21it/s]
 85%| | 67/79 [00:03<00:00, 24.69it/s]
 89%| | 70/79 [00:03<00:00, 24.41it/s]
 92%|| 73/79 [00:03<00:00, 24.95it/s]
 96%|| 76/79 [00:03<00:00, 25.79it/s]
100%|| 79/79 [00:03<00:00, 26.76it/s]
95it/s]
 68%|   | 54/79 [00:03<00:01, 24.51it/s]
 72%|  | 57/79 [00:03<00:00, 24.74it/s]
 76%|  | 60/79 [00:03<00:00, 24.90it/s]
 80%|  | 63/79 [00:03<00:00, 24.78it/s]
 84%| | 66/79 [00:03<00:00, 25.00it/s]
 87%| | 69/79 [00:03<00:00, 25.05it/s]
 91%| | 72/79 [00:03<00:00, 25.20it/s]
 95%|| 75/79 [00:03<00:00, 25.61it/s]
 99%|| 78/79 [00:03<00:00, 26.50it/s]
100%|| 79/79 [00:04<00:00, 19.54it/s]
, 23.36it/s]
 70%|   | 55/79 [00:03<00:01, 23.82it/s]
 73%|  | 58/79 [00:03<00:00, 24.35it/s]
 77%|  | 61/79 [00:03<00:00, 24.32it/s]
 81%|  | 64/79 [00:03<00:00, 24.41it/s]
 85%| | 67/79 [00:03<00:00, 24.56it/s]
 89%| | 70/79 [00:03<00:00, 24.73it/s]
 92%|| 73/79 [00:03<00:00, 25.00it/s]
 96%|| 76/79 [00:03<00:00, 25.66it/s]
100%|| 79/79 [00:04<00:00, 26.56it/s]
, 23.09it/s]
 70%|   | 55/79 [00:03<00:01, 23.66it/s]
 73%|  | 58/79 [00:03<00:00, 24.01it/s]
 77%|  | 61/79 [00:03<00:00, 24.28it/s]
 81%|  | 64/79 [00:03<00:00, 24.54it/s]
 85%| | 67/79 [00:03<00:00, 24.64it/s]
 89%| | 70/79 [00:03<00:00, 24.70it/s]
 92%|| 73/79 [00:03<00:00, 24.80it/s]
 96%|| 76/79 [00:03<00:00, 25.67it/s]
100%|| 79/79 [00:04<00:00, 26.28it/s]
27it/s]
 68%|   | 54/79 [00:03<00:01, 23.54it/s]
 72%|  | 57/79 [00:03<00:00, 23.85it/s]
 76%|  | 60/79 [00:03<00:00, 24.31it/s]
 80%|  | 63/79 [00:03<00:00, 24.49it/s]
 84%| | 66/79 [00:03<00:00, 24.57it/s]
 87%| | 69/79 [00:03<00:00, 24.78it/s]
 91%| | 72/79 [00:03<00:00, 24.72it/s]
 95%|| 75/79 [00:03<00:00, 25.44it/s]
 99%|| 78/79 [00:04<00:00, 25.92it/s]
100%|| 79/79 [00:04<00:00, 19.01it/s]
, 23.04it/s]
 70%|   | 55/79 [00:03<00:01, 23.38it/s]
 73%|  | 58/79 [00:03<00:00, 23.49it/s]
 77%|  | 61/79 [00:03<00:00, 23.09it/s]
 81%|  | 64/79 [00:03<00:00, 23.20it/s]
 85%| | 67/79 [00:03<00:00, 23.47it/s]
 89%| | 70/79 [00:03<00:00, 23.67it/s]
 92%|| 73/79 [00:03<00:00, 23.98it/s]
 96%|| 76/79 [00:03<00:00, 24.83it/s]
100%|| 79/79 [00:04<00:00, 25.85it/s]
, 23.01it/s]
 70%|   | 55/79 [00:03<00:01, 23.71it/s]
 73%|  | 58/79 [00:03<00:00, 23.88it/s]
 77%|  | 61/79 [00:03<00:00, 24.14it/s]
 81%|  | 64/79 [00:03<00:00, 24.50it/s]
 85%| | 67/79 [00:03<00:00, 24.79it/s]
 89%| | 70/79 [00:03<00:00, 24.68it/s]
 92%|| 73/79 [00:03<00:00, 25.01it/s]
 96%|| 76/79 [00:04<00:00, 25.58it/s]
100%|| 79/79 [00:04<00:00, 26.33it/s]
, 22.89it/s]
 70%|   | 55/79 [00:03<00:01, 23.36it/s]
 73%|  | 58/79 [00:03<00:00, 23.48it/s]
 77%|  | 61/79 [00:03<00:00, 23.37it/s]
 81%|  | 64/79 [00:03<00:00, 23.60it/s]
 85%| | 67/79 [00:03<00:00, 23.62it/s]
 89%| | 70/79 [00:03<00:00, 23.70it/s]
 92%|| 73/79 [00:03<00:00, 24.07it/s]
 96%|| 76/79 [00:04<00:00, 24.89it/s]
100%|| 79/79 [00:04<00:00, 25.94it/s]
, 22.76it/s]
 70%|   | 55/79 [00:03<00:01, 23.07it/s]
 73%|  | 58/79 [00:03<00:00, 23.70it/s]
 77%|  | 61/79 [00:03<00:00, 23.73it/s]
 81%|  | 64/79 [00:03<00:00, 23.83it/s]
 85%| | 67/79 [00:03<00:00, 24.00it/s]
 89%| | 70/79 [00:03<00:00, 23.89it/s]
 92%|| 73/79 [00:03<00:00, 24.37it/s]
 96%|| 76/79 [00:04<00:00, 25.26it/s]
100%|| 79/79 [00:04<00:00, 26.13it/s]
2020-06-23 16:34:16,181 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.265921 (0.02730189208984375 s / img per device, on 32 devices)
2020-06-23 16:34:16,201 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:34:16,201 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:34:16,221 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592955265520, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 9, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592955265520, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 9}}
2020-06-23 16:34:25,960 maskrcnn_benchmark.trainer INFO: eta: 1:09:13  iter: 7340  loss: 0.7003 (0.7861)  loss_classifier: 0.2585 (0.2911)  loss_box_reg: 0.1063 (0.1259)  loss_mask: 0.2563 (0.3070)  loss_objectness: 0.0184 (0.0404)  loss_rpn_box_reg: 0.0113 (0.0217)  time: 0.1087 (0.1272)  data: 0.0016 (0.0194)  lr: 0.160000  max mem: 5193
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:34:28,150 maskrcnn_benchmark.trainer INFO: eta: 1:09:09  iter: 7360  loss: 0.7345 (0.7859)  loss_classifier: 0.2680 (0.2910)  loss_box_reg: 0.1060 (0.1259)  loss_mask: 0.2686 (0.3069)  loss_objectness: 0.0206 (0.0403)  loss_rpn_box_reg: 0.0120 (0.0217)  time: 0.1094 (0.1271)  data: 0.0015 (0.0194)  lr: 0.160000  max mem: 5193
2020-06-23 16:34:30,304 maskrcnn_benchmark.trainer INFO: eta: 1:09:04  iter: 7380  loss: 0.6270 (0.7855)  loss_classifier: 0.2434 (0.2909)  loss_box_reg: 0.1062 (0.1259)  loss_mask: 0.2594 (0.3068)  loss_objectness: 0.0185 (0.0403)  loss_rpn_box_reg: 0.0120 (0.0217)  time: 0.1078 (0.1271)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 5193
2020-06-23 16:34:32,495 maskrcnn_benchmark.trainer INFO: eta: 1:09:00  iter: 7400  loss: 0.7286 (0.7854)  loss_classifier: 0.2425 (0.2908)  loss_box_reg: 0.1262 (0.1258)  loss_mask: 0.2864 (0.3067)  loss_objectness: 0.0253 (0.0403)  loss_rpn_box_reg: 0.0171 (0.0217)  time: 0.1092 (0.1270)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 5193
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.81s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:34:34,650 maskrcnn_benchmark.trainer INFO: eta: 1:08:56  iter: 7420  loss: 0.6489 (0.7851)  loss_classifier: 0.2549 (0.2908)  loss_box_reg: 0.0964 (0.1258)  loss_mask: 0.2741 (0.3066)  loss_objectness: 0.0223 (0.0402)  loss_rpn_box_reg: 0.0079 (0.0217)  time: 0.1076 (0.1270)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 5193
DONE (t=1.68s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.29711
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.50512
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.31787
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.17430
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.32366
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.37913
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.26902
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43263
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.45504
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.28703
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.49337
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.56462
2020-06-23 16:34:36,842 maskrcnn_benchmark.trainer INFO: eta: 1:08:52  iter: 7440  loss: 0.6476 (0.7849)  loss_classifier: 0.2011 (0.2906)  loss_box_reg: 0.1065 (0.1258)  loss_mask: 0.2701 (0.3065)  loss_objectness: 0.0211 (0.0402)  loss_rpn_box_reg: 0.0094 (0.0217)  time: 0.1090 (0.1269)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 5193
2020-06-23 16:34:38,995 maskrcnn_benchmark.trainer INFO: eta: 1:08:48  iter: 7460  loss: 0.5835 (0.7844)  loss_classifier: 0.2187 (0.2905)  loss_box_reg: 0.0857 (0.1257)  loss_mask: 0.2469 (0.3064)  loss_objectness: 0.0205 (0.0402)  loss_rpn_box_reg: 0.0109 (0.0217)  time: 0.1077 (0.1269)  data: 0.0015 (0.0191)  lr: 0.160000  max mem: 5193
2020-06-23 16:34:41,160 maskrcnn_benchmark.trainer INFO: eta: 1:08:44  iter: 7480  loss: 0.5896 (0.7841)  loss_classifier: 0.1882 (0.2903)  loss_box_reg: 0.1093 (0.1256)  loss_mask: 0.2715 (0.3063)  loss_objectness: 0.0215 (0.0402)  loss_rpn_box_reg: 0.0081 (0.0217)  time: 0.1075 (0.1268)  data: 0.0015 (0.0191)  lr: 0.160000  max mem: 5193
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:34:43,333 maskrcnn_benchmark.trainer INFO: eta: 1:08:40  iter: 7500  loss: 0.6491 (0.7838)  loss_classifier: 0.1964 (0.2902)  loss_box_reg: 0.0951 (0.1256)  loss_mask: 0.2688 (0.3062)  loss_objectness: 0.0196 (0.0401)  loss_rpn_box_reg: 0.0095 (0.0217)  time: 0.1081 (0.1268)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5193
DONE (t=2.04s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:34:45,521 maskrcnn_benchmark.trainer INFO: eta: 1:08:35  iter: 7520  loss: 0.7101 (0.7836)  loss_classifier: 0.2449 (0.2901)  loss_box_reg: 0.1211 (0.1256)  loss_mask: 0.2604 (0.3061)  loss_objectness: 0.0282 (0.0401)  loss_rpn_box_reg: 0.0159 (0.0217)  time: 0.1089 (0.1267)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5193
DONE (t=2.71s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.28115
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.47822
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.29598
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.12903
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.30662
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.41370
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.26173
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.40807
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.42706
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24522
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.46925
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.55653
2020-06-23 16:34:47,542 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.29710709899905136, segm mAP: 0.28114723794127544
:::MLLOG {"namespace": "", "time_ms": 1592955287542, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.29710709899905136, "SEGM": 0.28114723794127544}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 8}}
:::MLLOG {"namespace": "", "time_ms": 1592955287542, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 8}}
2020-06-23 16:34:47,867 maskrcnn_benchmark.trainer INFO: eta: 1:08:32  iter: 7540  loss: 0.6374 (0.7832)  loss_classifier: 0.2058 (0.2899)  loss_box_reg: 0.0974 (0.1255)  loss_mask: 0.2483 (0.3060)  loss_objectness: 0.0203 (0.0401)  loss_rpn_box_reg: 0.0098 (0.0217)  time: 0.1085 (0.1267)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5193
2020-06-23 16:34:50,015 maskrcnn_benchmark.trainer INFO: eta: 1:08:28  iter: 7560  loss: 0.6019 (0.7828)  loss_classifier: 0.2137 (0.2897)  loss_box_reg: 0.1006 (0.1254)  loss_mask: 0.2578 (0.3059)  loss_objectness: 0.0158 (0.0401)  loss_rpn_box_reg: 0.0127 (0.0217)  time: 0.1070 (0.1266)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5193
2020-06-23 16:34:52,195 maskrcnn_benchmark.trainer INFO: eta: 1:08:24  iter: 7580  loss: 0.7035 (0.7826)  loss_classifier: 0.2422 (0.2896)  loss_box_reg: 0.1141 (0.1254)  loss_mask: 0.2702 (0.3058)  loss_objectness: 0.0234 (0.0401)  loss_rpn_box_reg: 0.0099 (0.0217)  time: 0.1075 (0.1266)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5193
2020-06-23 16:34:54,399 maskrcnn_benchmark.trainer INFO: eta: 1:08:20  iter: 7600  loss: 0.6148 (0.7823)  loss_classifier: 0.2288 (0.2895)  loss_box_reg: 0.0847 (0.1254)  loss_mask: 0.2493 (0.3057)  loss_objectness: 0.0236 (0.0400)  loss_rpn_box_reg: 0.0163 (0.0217)  time: 0.1089 (0.1266)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5193
2020-06-23 16:34:56,592 maskrcnn_benchmark.trainer INFO: eta: 1:08:16  iter: 7620  loss: 0.6860 (0.7821)  loss_classifier: 0.2346 (0.2894)  loss_box_reg: 0.1094 (0.1253)  loss_mask: 0.2588 (0.3056)  loss_objectness: 0.0210 (0.0400)  loss_rpn_box_reg: 0.0094 (0.0217)  time: 0.1094 (0.1265)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5193
2020-06-23 16:34:58,773 maskrcnn_benchmark.trainer INFO: eta: 1:08:12  iter: 7640  loss: 0.6857 (0.7820)  loss_classifier: 0.2513 (0.2893)  loss_box_reg: 0.1154 (0.1254)  loss_mask: 0.3047 (0.3056)  loss_objectness: 0.0238 (0.0400)  loss_rpn_box_reg: 0.0126 (0.0217)  time: 0.1091 (0.1265)  data: 0.0016 (0.0187)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:00,941 maskrcnn_benchmark.trainer INFO: eta: 1:08:08  iter: 7660  loss: 0.6537 (0.7818)  loss_classifier: 0.2595 (0.2892)  loss_box_reg: 0.0990 (0.1253)  loss_mask: 0.2833 (0.3055)  loss_objectness: 0.0179 (0.0400)  loss_rpn_box_reg: 0.0087 (0.0217)  time: 0.1079 (0.1264)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:03,102 maskrcnn_benchmark.trainer INFO: eta: 1:08:04  iter: 7680  loss: 0.6823 (0.7815)  loss_classifier: 0.2340 (0.2891)  loss_box_reg: 0.1070 (0.1253)  loss_mask: 0.2790 (0.3055)  loss_objectness: 0.0191 (0.0400)  loss_rpn_box_reg: 0.0098 (0.0217)  time: 0.1078 (0.1264)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:05,285 maskrcnn_benchmark.trainer INFO: eta: 1:08:00  iter: 7700  loss: 0.6172 (0.7813)  loss_classifier: 0.2377 (0.2890)  loss_box_reg: 0.1028 (0.1253)  loss_mask: 0.2799 (0.3054)  loss_objectness: 0.0196 (0.0399)  loss_rpn_box_reg: 0.0100 (0.0217)  time: 0.1089 (0.1263)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:07,469 maskrcnn_benchmark.trainer INFO: eta: 1:07:56  iter: 7720  loss: 0.7242 (0.7813)  loss_classifier: 0.2884 (0.2890)  loss_box_reg: 0.1411 (0.1253)  loss_mask: 0.2714 (0.3054)  loss_objectness: 0.0195 (0.0399)  loss_rpn_box_reg: 0.0146 (0.0217)  time: 0.1086 (0.1263)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:09,656 maskrcnn_benchmark.trainer INFO: eta: 1:07:52  iter: 7740  loss: 0.5504 (0.7808)  loss_classifier: 0.2080 (0.2888)  loss_box_reg: 0.0888 (0.1252)  loss_mask: 0.2557 (0.3053)  loss_objectness: 0.0134 (0.0399)  loss_rpn_box_reg: 0.0079 (0.0216)  time: 0.1087 (0.1262)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:11,823 maskrcnn_benchmark.trainer INFO: eta: 1:07:48  iter: 7760  loss: 0.6629 (0.7804)  loss_classifier: 0.1977 (0.2886)  loss_box_reg: 0.0988 (0.1252)  loss_mask: 0.2663 (0.3052)  loss_objectness: 0.0183 (0.0398)  loss_rpn_box_reg: 0.0080 (0.0216)  time: 0.1079 (0.1262)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:14,027 maskrcnn_benchmark.trainer INFO: eta: 1:07:44  iter: 7780  loss: 0.6536 (0.7802)  loss_classifier: 0.2021 (0.2885)  loss_box_reg: 0.1025 (0.1251)  loss_mask: 0.2919 (0.3051)  loss_objectness: 0.0246 (0.0398)  loss_rpn_box_reg: 0.0087 (0.0216)  time: 0.1088 (0.1262)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:16,222 maskrcnn_benchmark.trainer INFO: eta: 1:07:40  iter: 7800  loss: 0.5743 (0.7797)  loss_classifier: 0.1941 (0.2883)  loss_box_reg: 0.0871 (0.1251)  loss_mask: 0.2472 (0.3050)  loss_objectness: 0.0161 (0.0397)  loss_rpn_box_reg: 0.0078 (0.0216)  time: 0.1095 (0.1261)  data: 0.0013 (0.0184)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:18,390 maskrcnn_benchmark.trainer INFO: eta: 1:07:36  iter: 7820  loss: 0.6519 (0.7795)  loss_classifier: 0.2236 (0.2882)  loss_box_reg: 0.1098 (0.1250)  loss_mask: 0.2730 (0.3049)  loss_objectness: 0.0167 (0.0397)  loss_rpn_box_reg: 0.0109 (0.0217)  time: 0.1083 (0.1261)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:20,567 maskrcnn_benchmark.trainer INFO: eta: 1:07:32  iter: 7840  loss: 0.5988 (0.7791)  loss_classifier: 0.2223 (0.2880)  loss_box_reg: 0.0915 (0.1250)  loss_mask: 0.2511 (0.3048)  loss_objectness: 0.0174 (0.0397)  loss_rpn_box_reg: 0.0128 (0.0216)  time: 0.1082 (0.1260)  data: 0.0013 (0.0183)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:22,742 maskrcnn_benchmark.trainer INFO: eta: 1:07:28  iter: 7860  loss: 0.6587 (0.7790)  loss_classifier: 0.2405 (0.2879)  loss_box_reg: 0.1141 (0.1250)  loss_mask: 0.2703 (0.3047)  loss_objectness: 0.0273 (0.0397)  loss_rpn_box_reg: 0.0170 (0.0216)  time: 0.1090 (0.1260)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:24,907 maskrcnn_benchmark.trainer INFO: eta: 1:07:24  iter: 7880  loss: 0.6172 (0.7786)  loss_classifier: 0.2003 (0.2877)  loss_box_reg: 0.1106 (0.1249)  loss_mask: 0.2680 (0.3046)  loss_objectness: 0.0167 (0.0396)  loss_rpn_box_reg: 0.0085 (0.0216)  time: 0.1082 (0.1259)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:27,083 maskrcnn_benchmark.trainer INFO: eta: 1:07:21  iter: 7900  loss: 0.5991 (0.7783)  loss_classifier: 0.2068 (0.2876)  loss_box_reg: 0.0984 (0.1249)  loss_mask: 0.2489 (0.3045)  loss_objectness: 0.0202 (0.0396)  loss_rpn_box_reg: 0.0077 (0.0216)  time: 0.1086 (0.1259)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:29,266 maskrcnn_benchmark.trainer INFO: eta: 1:07:17  iter: 7920  loss: 0.6106 (0.7779)  loss_classifier: 0.2309 (0.2875)  loss_box_reg: 0.0886 (0.1248)  loss_mask: 0.2559 (0.3044)  loss_objectness: 0.0143 (0.0396)  loss_rpn_box_reg: 0.0061 (0.0216)  time: 0.1087 (0.1258)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:31,417 maskrcnn_benchmark.trainer INFO: eta: 1:07:13  iter: 7940  loss: 0.6473 (0.7776)  loss_classifier: 0.2372 (0.2874)  loss_box_reg: 0.0936 (0.1247)  loss_mask: 0.2614 (0.3043)  loss_objectness: 0.0174 (0.0396)  loss_rpn_box_reg: 0.0080 (0.0216)  time: 0.1074 (0.1258)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:33,594 maskrcnn_benchmark.trainer INFO: eta: 1:07:09  iter: 7960  loss: 0.6421 (0.7772)  loss_classifier: 0.2223 (0.2872)  loss_box_reg: 0.0921 (0.1247)  loss_mask: 0.2688 (0.3043)  loss_objectness: 0.0201 (0.0395)  loss_rpn_box_reg: 0.0100 (0.0216)  time: 0.1081 (0.1258)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:35,766 maskrcnn_benchmark.trainer INFO: eta: 1:07:05  iter: 7980  loss: 0.7174 (0.7770)  loss_classifier: 0.2962 (0.2872)  loss_box_reg: 0.1273 (0.1247)  loss_mask: 0.2638 (0.3042)  loss_objectness: 0.0195 (0.0395)  loss_rpn_box_reg: 0.0081 (0.0215)  time: 0.1089 (0.1257)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:37,923 maskrcnn_benchmark.trainer INFO: eta: 1:07:01  iter: 8000  loss: 0.6388 (0.7769)  loss_classifier: 0.2587 (0.2871)  loss_box_reg: 0.1117 (0.1246)  loss_mask: 0.2600 (0.3041)  loss_objectness: 0.0230 (0.0395)  loss_rpn_box_reg: 0.0197 (0.0216)  time: 0.1078 (0.1257)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:40,101 maskrcnn_benchmark.trainer INFO: eta: 1:06:57  iter: 8020  loss: 0.7195 (0.7767)  loss_classifier: 0.2447 (0.2870)  loss_box_reg: 0.0998 (0.1246)  loss_mask: 0.2510 (0.3040)  loss_objectness: 0.0266 (0.0395)  loss_rpn_box_reg: 0.0114 (0.0216)  time: 0.1080 (0.1256)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:42,278 maskrcnn_benchmark.trainer INFO: eta: 1:06:53  iter: 8040  loss: 0.7112 (0.7766)  loss_classifier: 0.2468 (0.2869)  loss_box_reg: 0.1240 (0.1246)  loss_mask: 0.2738 (0.3039)  loss_objectness: 0.0239 (0.0395)  loss_rpn_box_reg: 0.0122 (0.0216)  time: 0.1084 (0.1256)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:44,478 maskrcnn_benchmark.trainer INFO: eta: 1:06:49  iter: 8060  loss: 0.6017 (0.7763)  loss_classifier: 0.1991 (0.2868)  loss_box_reg: 0.0933 (0.1245)  loss_mask: 0.2485 (0.3038)  loss_objectness: 0.0229 (0.0395)  loss_rpn_box_reg: 0.0122 (0.0216)  time: 0.1092 (0.1255)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:46,653 maskrcnn_benchmark.trainer INFO: eta: 1:06:46  iter: 8080  loss: 0.5690 (0.7760)  loss_classifier: 0.1998 (0.2867)  loss_box_reg: 0.0893 (0.1245)  loss_mask: 0.2509 (0.3037)  loss_objectness: 0.0141 (0.0395)  loss_rpn_box_reg: 0.0103 (0.0216)  time: 0.1078 (0.1255)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:48,833 maskrcnn_benchmark.trainer INFO: eta: 1:06:42  iter: 8100  loss: 0.6089 (0.7757)  loss_classifier: 0.1905 (0.2865)  loss_box_reg: 0.1034 (0.1245)  loss_mask: 0.2644 (0.3036)  loss_objectness: 0.0162 (0.0394)  loss_rpn_box_reg: 0.0086 (0.0216)  time: 0.1082 (0.1255)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:51,004 maskrcnn_benchmark.trainer INFO: eta: 1:06:38  iter: 8120  loss: 0.6121 (0.7752)  loss_classifier: 0.1942 (0.2864)  loss_box_reg: 0.0743 (0.1244)  loss_mask: 0.2528 (0.3035)  loss_objectness: 0.0247 (0.0394)  loss_rpn_box_reg: 0.0104 (0.0216)  time: 0.1085 (0.1254)  data: 0.0013 (0.0177)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:53,157 maskrcnn_benchmark.trainer INFO: eta: 1:06:34  iter: 8140  loss: 0.7453 (0.7751)  loss_classifier: 0.2524 (0.2863)  loss_box_reg: 0.1315 (0.1244)  loss_mask: 0.2768 (0.3035)  loss_objectness: 0.0199 (0.0394)  loss_rpn_box_reg: 0.0112 (0.0216)  time: 0.1074 (0.1254)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:55,323 maskrcnn_benchmark.trainer INFO: eta: 1:06:30  iter: 8160  loss: 0.6459 (0.7748)  loss_classifier: 0.2322 (0.2862)  loss_box_reg: 0.1062 (0.1243)  loss_mask: 0.2534 (0.3034)  loss_objectness: 0.0208 (0.0394)  loss_rpn_box_reg: 0.0143 (0.0216)  time: 0.1077 (0.1253)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:57,493 maskrcnn_benchmark.trainer INFO: eta: 1:06:26  iter: 8180  loss: 0.6971 (0.7746)  loss_classifier: 0.2282 (0.2861)  loss_box_reg: 0.1218 (0.1243)  loss_mask: 0.2665 (0.3033)  loss_objectness: 0.0216 (0.0394)  loss_rpn_box_reg: 0.0107 (0.0215)  time: 0.1083 (0.1253)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5193
2020-06-23 16:35:59,666 maskrcnn_benchmark.trainer INFO: eta: 1:06:23  iter: 8200  loss: 0.7034 (0.7744)  loss_classifier: 0.2200 (0.2860)  loss_box_reg: 0.1174 (0.1243)  loss_mask: 0.2765 (0.3032)  loss_objectness: 0.0221 (0.0393)  loss_rpn_box_reg: 0.0063 (0.0215)  time: 0.1076 (0.1253)  data: 0.0015 (0.0175)  lr: 0.160000  max mem: 5193
2020-06-23 16:36:01,835 maskrcnn_benchmark.trainer INFO: eta: 1:06:19  iter: 8220  loss: 0.6626 (0.7741)  loss_classifier: 0.2387 (0.2859)  loss_box_reg: 0.1187 (0.1242)  loss_mask: 0.2600 (0.3031)  loss_objectness: 0.0234 (0.0393)  loss_rpn_box_reg: 0.0079 (0.0215)  time: 0.1084 (0.1252)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5193
2020-06-23 16:36:03,991 maskrcnn_benchmark.trainer INFO: eta: 1:06:15  iter: 8240  loss: 0.5815 (0.7737)  loss_classifier: 0.2282 (0.2858)  loss_box_reg: 0.0864 (0.1242)  loss_mask: 0.2312 (0.3030)  loss_objectness: 0.0214 (0.0393)  loss_rpn_box_reg: 0.0071 (0.0215)  time: 0.1072 (0.1252)  data: 0.0015 (0.0175)  lr: 0.160000  max mem: 5193
:::MLLOG {"namespace": "", "time_ms": 1592955365386, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 9}}
:::MLLOG {"namespace": "", "time_ms": 1592955365387, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 9}}
:::MLLOG {"namespace": "", "time_ms": 1592955365387, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 9}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 16:36:05,625 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
Done (t=0.26s)
creating index...
creating index...
index created!
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.29s)
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 16:36:05,931 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:54,  1.44it/s]
  5%|         | 4/79 [00:00<00:37,  2.00it/s]
  9%|         | 7/79 [00:00<00:26,  2.76it/s]
 13%|        | 10/79 [00:01<00:18,  3.78it/s]
 16%|        | 13/79 [00:01<00:12,  5.08it/s]
 20%|        | 16/79 [00:01<00:09,  6.69it/s]
 24%|       | 19/79 [00:01<00:06,  8.59it/s]
 28%|       | 22/79 [00:01<00:05, 10.75it/s]
 32%|      | 25/79 [00:01<00:04, 13.01it/s]
 35%|      | 28/79 [00:01<00:03, 15.34it/s]
 39%|      | 31/79 [00:01<00:02, 17.28it/s]
 43%|     | 34/79 [00:01<00:02, 19.32it/s]
 47%|     | 37/79 [00:02<00:02, 20.70it/s]
 51%|     | 40/79 [00:02<00:01, 21.98it/s]
 54%|    | 43/79 [00:02<00:01, 22.72it/s]
 58%|    | 46/79 [00:02<00:01, 23.76it/s]
 62%|   | 49/79 [00:02<00:01, 23.86it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  4%|         | 3/79 [00:00<00:45,  1.66it/s]
  8%|         | 6/79 [00:01<00:31,  2.30it/s]
 11%|        | 9/79 [00:01<00:22,  3.17it/s]
 15%|        | 12/79 [00:01<00:15,  4.31it/s]
 19%|        | 15/79 [00:01<00:11,  5.75it/s]
 23%|       | 18/79 [00:01<00:08,  7.51it/s]
 27%|       | 21/79 [00:01<00:06,  9.55it/s]
 30%|       | 24/79 [00:01<00:04, 11.78it/s]
 34%|      | 27/79 [00:01<00:03, 14.18it/s]
 38%|      | 30/79 [00:01<00:02, 16.48it/s]
 42%|     | 33/79 [00:02<00:02, 18.34it/s]
 46%|     | 36/79 [00:02<00:02, 20.23it/s]
 49%|     | 39/79 [00:02<00:01, 21.63it/s]
 53%|    | 42/79 [00:02<00:01, 22.81it/s]
 57%|    | 45/79 [00:02<00:01, 23.67it/s]
 61%|    | 48/79 [00:02<00:01, 24.48it/s]
 65%|   | 51/79 [00:02<00:01, 25.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.36it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.56it/s]
 32%|      | 25/79 [00:01<00:04, 11.83it/s]
 35%|      | 28/79 [00:01<00:03, 14.15it/s]
 39%|      | 31/79 [00:02<00:02, 16.35it/s]
 43%|     | 34/79 [00:02<00:02, 18.34it/s]
 47%|     | 37/79 [00:02<00:02, 20.12it/s]
 51%|     | 40/79 [00:02<00:01, 21.54it/s]
 54%|    | 43/79 [00:02<00:01, 22.66it/s]
 58%|    | 46/79 [00:02<00:01, 23.54it/s]
 62%|   | 49/79 [00:02<00:01, 24.29it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:05,  9.54it/s]
 32%|      | 25/79 [00:01<00:04, 11.76it/s]
 35%|      | 28/79 [00:01<00:03, 14.08it/s]
 39%|      | 31/79 [00:02<00:02, 16.44it/s]
 43%|     | 34/79 [00:02<00:02, 18.46it/s]
 47%|     | 37/79 [00:02<00:02, 20.33it/s]
 51%|     | 40/79 [00:02<00:01, 21.60it/s]
 54%|    | 43/79 [00:02<00:01, 22.73it/s]
 58%|    | 46/79 [00:02<00:01, 23.37it/s]
 62%|   | 49/79 [00:02<00:01, 23.99it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.48it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.16it/s]
 32%|      | 25/79 [00:01<00:04, 11.39it/s]
 35%|      | 28/79 [00:01<00:03, 13.76it/s]
 39%|      | 31/79 [00:02<00:02, 16.04it/s]
 43%|     | 34/79 [00:02<00:02, 18.19it/s]
 47%|     | 37/79 [00:02<00:02, 20.09it/s]
 51%|     | 40/79 [00:02<00:01, 21.32it/s]
 54%|    | 43/79 [00:02<00:01, 22.70it/s]
 58%|    | 46/79 [00:02<00:01, 23.90it/s]
 62%|   | 49/79 [00:02<00:01, 24.48it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.16it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.23it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.35it/s]
 32%|      | 25/79 [00:01<00:04, 11.52it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:02, 16.09it/s]
 43%|     | 34/79 [00:02<00:02, 18.08it/s]
 47%|     | 37/79 [00:02<00:02, 19.58it/s]
 51%|     | 40/79 [00:02<00:01, 21.09it/s]
 54%|    | 43/79 [00:02<00:01, 22.32it/s]
 58%|    | 46/79 [00:02<00:01, 23.17it/s]
 62%|   | 49/79 [00:02<00:01, 23.88it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.26it/s]
 28%|       | 22/79 [00:01<00:06,  9.27it/s]
 32%|      | 25/79 [00:01<00:04, 11.44it/s]
 35%|      | 28/79 [00:01<00:03, 13.81it/s]
 39%|      | 31/79 [00:02<00:02, 16.01it/s]
 43%|     | 34/79 [00:02<00:02, 18.01it/s]
 47%|     | 37/79 [00:02<00:02, 19.72it/s]
 51%|     | 40/79 [00:02<00:01, 21.32it/s]
 54%|    | 43/79 [00:02<00:01, 22.60it/s]
 58%|    | 46/79 [00:02<00:01, 23.19it/s]
 62%|   | 49/79 [00:02<00:01, 24.08it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.57it/s]
 28%|       | 22/79 [00:01<00:05,  9.55it/s]
 32%|      | 25/79 [00:01<00:04, 11.75it/s]
 35%|      | 28/79 [00:01<00:03, 14.01it/s]
 39%|      | 31/79 [00:02<00:02, 16.21it/s]
 43%|     | 34/79 [00:02<00:02, 18.11it/s]
 47%|     | 37/79 [00:02<00:02, 19.72it/s]
 51%|     | 40/79 [00:02<00:01, 21.17it/s]
 54%|    | 43/79 [00:02<00:01, 22.13it/s]
 58%|    | 46/79 [00:02<00:01, 22.69it/s]
 62%|   | 49/79 [00:02<00:01, 23.38it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.33it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.97it/s]
 32%|      | 25/79 [00:01<00:04, 11.15it/s]
 35%|      | 28/79 [00:01<00:03, 13.49it/s]
 39%|      | 31/79 [00:02<00:03, 15.78it/s]
 43%|     | 34/79 [00:02<00:02, 17.77it/s]
 47%|     | 37/79 [00:02<00:02, 19.63it/s]
 51%|     | 40/79 [00:02<00:01, 21.02it/s]
 54%|    | 43/79 [00:02<00:01, 22.27it/s]
 58%|    | 46/79 [00:02<00:01, 23.12it/s]
 62%|   | 49/79 [00:02<00:01, 23.95it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:11,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.61it/s]
 35%|      | 28/79 [00:01<00:03, 13.89it/s]
 39%|      | 31/79 [00:02<00:02, 16.03it/s]
 43%|     | 34/79 [00:02<00:02, 18.01it/s]
 47%|     | 37/79 [00:02<00:02, 19.72it/s]
 51%|     | 40/79 [00:02<00:01, 21.09it/s]
 54%|    | 43/79 [00:02<00:01, 22.05it/s]
 58%|    | 46/79 [00:02<00:01, 22.84it/s]
 62%|   | 49/79 [00:02<00:01, 23.39it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.17it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.25it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.43it/s]
 35%|      | 28/79 [00:01<00:03, 13.69it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.76it/s]
 47%|     | 37/79 [00:02<00:02, 19.45it/s]
 51%|     | 40/79 [00:02<00:01, 20.63it/s]
 54%|    | 43/79 [00:02<00:01, 21.54it/s]
 58%|    | 46/79 [00:02<00:01, 22.58it/s]
 62%|   | 49/79 [00:02<00:01, 23.47it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.42it/s]
 35%|      | 28/79 [00:01<00:03, 13.70it/s]
 39%|      | 31/79 [00:02<00:03, 15.91it/s]
 43%|     | 34/79 [00:02<00:02, 17.97it/s]
 47%|     | 37/79 [00:02<00:02, 19.50it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 22.03it/s]
 58%|    | 46/79 [00:02<00:01, 22.60it/s]
 62%|   | 49/79 [00:02<00:01, 23.42it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  4%|         | 3/79 [00:00<00:46,  1.64it/s]
  8%|         | 6/79 [00:01<00:32,  2.27it/s]
 11%|        | 9/79 [00:01<00:22,  3.12it/s]
 15%|        | 12/79 [00:01<00:15,  4.23it/s]
 19%|        | 15/79 [00:01<00:11,  5.63it/s]
 23%|       | 18/79 [00:01<00:08,  7.34it/s]
 27%|       | 21/79 [00:01<00:06,  9.28it/s]
 30%|       | 24/79 [00:01<00:04, 11.34it/s]
 34%|      | 27/79 [00:01<00:03, 13.51it/s]
 38%|      | 30/79 [00:02<00:03, 15.64it/s]
 42%|     | 33/79 [00:02<00:02, 17.62it/s]
 46%|     | 36/79 [00:02<00:02, 19.30it/s]
 49%|     | 39/79 [00:02<00:01, 20.77it/s]
 53%|    | 42/79 [00:02<00:01, 21.95it/s]
 57%|    | 45/79 [00:02<00:01, 22.89it/s]
 61%|    | 48/79 [00:02<00:01, 23.56it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  4%|         | 3/79 [00:00<00:48,  1.58it/s]
  8%|         | 6/79 [00:01<00:33,  2.20it/s]
 11%|        | 9/79 [00:01<00:23,  3.03it/s]
 15%|        | 12/79 [00:01<00:16,  4.11it/s]
 19%|        | 15/79 [00:01<00:11,  5.48it/s]
 23%|       | 18/79 [00:01<00:08,  7.13it/s]
 27%|       | 21/79 [00:01<00:06,  9.09it/s]
 30%|       | 24/79 [00:01<00:04, 11.26it/s]
 34%|      | 27/79 [00:01<00:03, 13.42it/s]
 38%|      | 30/79 [00:02<00:03, 15.59it/s]
 42%|     | 33/79 [00:02<00:02, 17.56it/s]
 46%|     | 36/79 [00:02<00:02, 19.31it/s]
 49%|     | 39/79 [00:02<00:01, 20.48it/s]
 53%|    | 42/79 [00:02<00:01, 21.75it/s]
 57%|    | 45/79 [00:02<00:01, 22.75it/s]
 61%|    | 48/79 [00:02<00:01, 23.32it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  4%|         | 3/79 [00:00<00:45,  1.67it/s]
  8%|         | 6/79 [00:01<00:31,  2.32it/s]
 11%|        | 9/79 [00:01<00:22,  3.18it/s]
 15%|        | 12/79 [00:01<00:15,  4.30it/s]
 19%|        | 15/79 [00:01<00:11,  5.70it/s]
 23%|       | 18/79 [00:01<00:08,  7.40it/s]
 27%|       | 21/79 [00:01<00:06,  9.35it/s]
 30%|       | 24/79 [00:01<00:04, 11.45it/s]
 34%|      | 27/79 [00:01<00:03, 13.58it/s]
 38%|      | 30/79 [00:02<00:03, 15.74it/s]
 42%|     | 33/79 [00:02<00:02, 17.68it/s]
 46%|     | 36/79 [00:02<00:02, 19.37it/s]
 49%|     | 39/79 [00:02<00:01, 20.52it/s]
 53%|    | 42/79 [00:02<00:01, 21.72it/s]
 57%|    | 45/79 [00:02<00:01, 22.44it/s]
 61%|    | 48/79 [00:02<00:01, 22.86it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.09it/s]
 28%|       | 22/79 [00:01<00:06,  9.02it/s]
 32%|      | 25/79 [00:01<00:04, 11.22it/s]
 35%|      | 28/79 [00:01<00:03, 13.48it/s]
 39%|      | 31/79 [00:02<00:03, 15.68it/s]
 43%|     | 34/79 [00:02<00:02, 17.71it/s]
 47%|     | 37/79 [00:02<00:02, 19.59it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 22.20it/s]
 58%|    | 46/79 [00:02<00:01, 23.05it/s]
 62%|   | 49/79 [00:02<00:01, 23.57it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.34it/s]
 28%|       | 22/79 [00:01<00:06,  9.33it/s]
 32%|      | 25/79 [00:01<00:04, 11.53it/s]
 35%|      | 28/79 [00:01<00:03, 13.68it/s]
 39%|      | 31/79 [00:02<00:03, 15.95it/s]
 43%|     | 34/79 [00:02<00:02, 17.86it/s]
 47%|     | 37/79 [00:02<00:02, 19.72it/s]
 51%|     | 40/79 [00:02<00:01, 20.80it/s]
 54%|    | 43/79 [00:02<00:01, 21.96it/s]
 58%|    | 46/79 [00:02<00:01, 22.88it/s]
 62%|   | 49/79 [00:02<00:01, 23.53it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.05it/s]
 28%|       | 22/79 [00:01<00:06,  9.00it/s]
 32%|      | 25/79 [00:01<00:04, 11.14it/s]
 35%|      | 28/79 [00:01<00:03, 13.41it/s]
 39%|      | 31/79 [00:02<00:03, 15.55it/s]
 43%|     | 34/79 [00:02<00:02, 17.52it/s]
 47%|     | 37/79 [00:02<00:02, 19.33it/s]
 51%|     | 40/79 [00:02<00:01, 20.46it/s]
 54%|    | 43/79 [00:02<00:01, 21.74it/s]
 58%|    | 46/79 [00:02<00:01, 22.31it/s]
 62%|   | 49/79 [00:02<00:01, 23.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.23it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.30it/s]
 35%|      | 28/79 [00:01<00:03, 13.47it/s]
 39%|      | 31/79 [00:02<00:03, 15.58it/s]
 43%|     | 34/79 [00:02<00:02, 17.39it/s]
 47%|     | 37/79 [00:02<00:02, 19.08it/s]
 51%|     | 40/79 [00:02<00:01, 20.63it/s]
 54%|    | 43/79 [00:02<00:01, 21.69it/s]
 58%|    | 46/79 [00:02<00:01, 22.65it/s]
 62%|   | 49/79 [00:02<00:01, 23.59it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.57it/s]
 24%|       | 19/79 [00:01<00:08,  7.25it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.36it/s]
 35%|      | 28/79 [00:01<00:03, 13.55it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.70it/s]
 47%|     | 37/79 [00:02<00:02, 19.49it/s]
 51%|     | 40/79 [00:02<00:01, 21.04it/s]
 54%|    | 43/79 [00:02<00:01, 21.79it/s]
 58%|    | 46/79 [00:02<00:01, 22.79it/s]
 62%|   | 49/79 [00:02<00:01, 23.49it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  4%|         | 3/79 [00:01<00:49,  1.54it/s]
  8%|         | 6/79 [00:01<00:34,  2.15it/s]
 11%|        | 9/79 [00:01<00:23,  2.96it/s]
 15%|        | 12/79 [00:01<00:16,  4.01it/s]
 19%|        | 15/79 [00:01<00:11,  5.37it/s]
 23%|       | 18/79 [00:01<00:08,  7.02it/s]
 27%|       | 21/79 [00:01<00:06,  8.95it/s]
 30%|       | 24/79 [00:01<00:04, 11.05it/s]
 34%|      | 27/79 [00:01<00:03, 13.31it/s]
 38%|      | 30/79 [00:02<00:03, 15.47it/s]
 42%|     | 33/79 [00:02<00:02, 17.40it/s]
 46%|     | 36/79 [00:02<00:02, 19.05it/s]
 49%|     | 39/79 [00:02<00:01, 20.57it/s]
 53%|    | 42/79 [00:02<00:01, 21.75it/s]
 57%|    | 45/79 [00:02<00:01, 22.65it/s]
 61%|    | 48/79 [00:02<00:01, 23.35it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  4%|         | 3/79 [00:00<00:48,  1.57it/s]
  8%|         | 6/79 [00:01<00:33,  2.18it/s]
 11%|        | 9/79 [00:01<00:23,  3.01it/s]
 15%|        | 12/79 [00:01<00:16,  4.08it/s]
 19%|        | 15/79 [00:01<00:11,  5.43it/s]
 23%|       | 18/79 [00:01<00:08,  7.12it/s]
 27%|       | 21/79 [00:01<00:06,  8.98it/s]
 30%|       | 24/79 [00:01<00:04, 11.04it/s]
 34%|      | 27/79 [00:01<00:03, 13.21it/s]
 38%|      | 30/79 [00:02<00:03, 15.40it/s]
 42%|     | 33/79 [00:02<00:02, 17.46it/s]
 46%|     | 36/79 [00:02<00:02, 19.23it/s]
 49%|     | 39/79 [00:02<00:01, 20.54it/s]
 53%|    | 42/79 [00:02<00:01, 21.61it/s]
 57%|    | 45/79 [00:02<00:01, 22.38it/s]
 61%|    | 48/79 [00:02<00:01, 22.83it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:35,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.17it/s]
 24%|       | 19/79 [00:01<00:08,  6.80it/s]
 28%|       | 22/79 [00:01<00:06,  8.70it/s]
 32%|      | 25/79 [00:01<00:04, 10.88it/s]
 35%|      | 28/79 [00:02<00:03, 13.19it/s]
 39%|      | 31/79 [00:02<00:03, 15.52it/s]
 43%|     | 34/79 [00:02<00:02, 17.60it/s]
 47%|     | 37/79 [00:02<00:02, 19.58it/s]
 51%|     | 40/79 [00:02<00:01, 21.10it/s]
 54%|    | 43/79 [00:02<00:01, 22.42it/s]
 58%|    | 46/79 [00:02<00:01, 23.33it/s]
 62%|   | 49/79 [00:02<00:01, 23.95it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.85it/s]
 20%|        | 16/79 [00:01<00:12,  5.17it/s]
 24%|       | 19/79 [00:01<00:08,  6.79it/s]
 28%|       | 22/79 [00:01<00:06,  8.73it/s]
 32%|      | 25/79 [00:01<00:04, 10.91it/s]
 35%|      | 28/79 [00:02<00:03, 13.21it/s]
 39%|      | 31/79 [00:02<00:03, 15.38it/s]
 43%|     | 34/79 [00:02<00:02, 17.53it/s]
 47%|     | 37/79 [00:02<00:02, 19.33it/s]
 51%|     | 40/79 [00:02<00:01, 20.90it/s]
 54%|    | 43/79 [00:02<00:01, 22.14it/s]
 58%|    | 46/79 [00:02<00:01, 22.91it/s]
 62%|   | 49/79 [00:02<00:01, 23.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  3.99it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  6.99it/s]
 28%|       | 22/79 [00:01<00:06,  8.88it/s]
 32%|      | 25/79 [00:01<00:04, 11.01it/s]
 35%|      | 28/79 [00:02<00:03, 13.25it/s]
 39%|      | 31/79 [00:02<00:03, 15.48it/s]
 43%|     | 34/79 [00:02<00:02, 17.54it/s]
 47%|     | 37/79 [00:02<00:02, 19.20it/s]
 51%|     | 40/79 [00:02<00:01, 20.67it/s]
 54%|    | 43/79 [00:02<00:01, 22.05it/s]
 58%|    | 46/79 [00:02<00:01, 22.71it/s]
 62%|   | 49/79 [00:02<00:01, 22.82it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.33it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.36it/s]
 35%|      | 28/79 [00:01<00:03, 13.57it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.46it/s]
 47%|     | 37/79 [00:02<00:02, 19.19it/s]
 51%|     | 40/79 [00:02<00:01, 20.20it/s]
 54%|    | 43/79 [00:02<00:01, 21.37it/s]
 58%|    | 46/79 [00:02<00:01, 22.23it/s]
 62%|   | 49/79 [00:02<00:01, 23.26it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.08it/s]
 28%|       | 22/79 [00:01<00:06,  9.02it/s]
 32%|      | 25/79 [00:01<00:04, 11.12it/s]
 35%|      | 28/79 [00:01<00:03, 13.34it/s]
 39%|      | 31/79 [00:02<00:03, 15.42it/s]
 43%|     | 34/79 [00:02<00:02, 17.31it/s]
 47%|     | 37/79 [00:02<00:02, 18.91it/s]
 51%|     | 40/79 [00:02<00:01, 20.24it/s]
 54%|    | 43/79 [00:02<00:01, 21.59it/s]
 58%|    | 46/79 [00:02<00:01, 22.04it/s]
 62%|   | 49/79 [00:02<00:01, 22.76it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.93it/s]
 20%|        | 16/79 [00:01<00:11,  5.26it/s]
 24%|       | 19/79 [00:01<00:08,  6.87it/s]
 28%|       | 22/79 [00:01<00:06,  8.75it/s]
 32%|      | 25/79 [00:01<00:04, 10.85it/s]
 35%|      | 28/79 [00:02<00:03, 13.02it/s]
 39%|      | 31/79 [00:02<00:03, 15.17it/s]
 43%|     | 34/79 [00:02<00:02, 17.08it/s]
 47%|     | 37/79 [00:02<00:02, 18.91it/s]
 51%|     | 40/79 [00:02<00:01, 20.33it/s]
 54%|    | 43/79 [00:02<00:01, 21.51it/s]
 58%|    | 46/79 [00:02<00:01, 22.07it/s]
 62%|   | 49/79 [00:02<00:01, 22.86it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  4%|         | 3/79 [00:01<00:48,  1.56it/s]
  8%|         | 6/79 [00:01<00:33,  2.16it/s]
 11%|        | 9/79 [00:01<00:23,  2.97it/s]
 15%|        | 12/79 [00:01<00:16,  4.03it/s]
 19%|        | 15/79 [00:01<00:11,  5.38it/s]
 23%|       | 18/79 [00:01<00:08,  7.01it/s]
 27%|       | 21/79 [00:01<00:06,  8.91it/s]
 30%|       | 24/79 [00:01<00:04, 11.01it/s]
 34%|      | 27/79 [00:02<00:03, 13.20it/s]
 38%|      | 30/79 [00:02<00:03, 15.23it/s]
 42%|     | 33/79 [00:02<00:02, 17.13it/s]
 46%|     | 36/79 [00:02<00:02, 18.78it/s]
 49%|     | 39/79 [00:02<00:01, 20.19it/s]
 53%|    | 42/79 [00:02<00:01, 21.22it/s]
 57%|    | 45/79 [00:02<00:01, 22.17it/s]
 61%|    | 48/79 [00:02<00:01, 22.81it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.23it/s]
 28%|       | 22/79 [00:01<00:06,  9.14it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.52it/s]
 39%|      | 31/79 [00:02<00:03, 15.42it/s]
 43%|     | 34/79 [00:02<00:02, 17.24it/s]
 47%|     | 37/79 [00:02<00:02, 18.83it/s]
 51%|     | 40/79 [00:02<00:01, 20.14it/s]
 54%|    | 43/79 [00:02<00:01, 21.09it/s]
 58%|    | 46/79 [00:02<00:01, 21.97it/s]
 62%|   | 49/79 [00:02<00:01, 22.31it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.84it/s]
 28%|       | 22/79 [00:01<00:06,  8.72it/s]
 32%|      | 25/79 [00:01<00:04, 10.86it/s]
 35%|      | 28/79 [00:02<00:03, 13.01it/s]
 39%|      | 31/79 [00:02<00:03, 15.20it/s]
 43%|     | 34/79 [00:02<00:02, 17.17it/s]
 47%|     | 37/79 [00:02<00:02, 18.96it/s]
 51%|     | 40/79 [00:02<00:01, 20.22it/s]
 54%|    | 43/79 [00:02<00:01, 21.17it/s]
 58%|    | 46/79 [00:02<00:01, 21.96it/s]
 62%|   | 49/79 [00:02<00:01, 22.54it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:51,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.82it/s]
 16%|        | 13/79 [00:01<00:17,  3.84it/s]
 20%|        | 16/79 [00:01<00:12,  5.16it/s]
 24%|       | 19/79 [00:01<00:08,  6.74it/s]
 28%|       | 22/79 [00:01<00:06,  8.57it/s]
 32%|      | 25/79 [00:01<00:05, 10.67it/s]
 35%|      | 28/79 [00:02<00:03, 12.82it/s]
 39%|      | 31/79 [00:02<00:03, 14.99it/s]
 43%|     | 34/79 [00:02<00:02, 16.98it/s]
 47%|     | 37/79 [00:02<00:02, 18.60it/s]
 51%|     | 40/79 [00:02<00:01, 20.05it/s]
 54%|    | 43/79 [00:02<00:01, 21.05it/s]
 58%|    | 46/79 [00:02<00:01, 21.97it/s]
 62%|   | 49/79 [00:02<00:01, 22.67it/s]
 66%|   | 52/79 [00:03<00:01, 24.42it/s]
 70%|   | 55/79 [00:02<00:00, 24.53it/s]
 73%|  | 58/79 [00:02<00:00, 25.20it/s]
 77%|  | 61/79 [00:03<00:00, 25.22it/s]
 81%|  | 64/79 [00:03<00:00, 25.47it/s]
 85%| | 67/79 [00:03<00:00, 25.25it/s]
 89%| | 70/79 [00:03<00:00, 25.34it/s]
 92%|| 73/79 [00:03<00:00, 25.58it/s]
 96%|| 76/79 [00:03<00:00, 26.23it/s]
100%|| 79/79 [00:03<00:00, 27.02it/s]
, 24.32it/s]
 70%|   | 55/79 [00:02<00:00, 24.81it/s]
 73%|  | 58/79 [00:03<00:00, 25.03it/s]
 77%|  | 61/79 [00:03<00:00, 25.11it/s]
 81%|  | 64/79 [00:03<00:00, 25.18it/s]
 85%| | 67/79 [00:03<00:00, 25.20it/s]
 89%| | 70/79 [00:03<00:00, 25.28it/s]
 92%|| 73/79 [00:03<00:00, 25.82it/s]
 96%|| 76/79 [00:03<00:00, 26.51it/s]
100%|| 79/79 [00:03<00:00, 27.44it/s]
, 24.89it/s]
 70%|   | 55/79 [00:02<00:00, 25.29it/s]
 73%|  | 58/79 [00:03<00:00, 25.59it/s]
 77%|  | 61/79 [00:03<00:00, 25.81it/s]
 81%|  | 64/79 [00:03<00:00, 25.78it/s]
 85%| | 67/79 [00:03<00:00, 25.90it/s]
 89%| | 70/79 [00:03<00:00, 25.56it/s]
 92%|| 73/79 [00:03<00:00, 25.88it/s]
 96%|| 76/79 [00:03<00:00, 26.25it/s]
100%|| 79/79 [00:03<00:00, 27.12it/s]
01it/s]
 68%|   | 54/79 [00:02<00:00, 25.03it/s]
 72%|  | 57/79 [00:03<00:00, 25.25it/s]
 76%|  | 60/79 [00:03<00:00, 25.54it/s]
 80%|  | 63/79 [00:03<00:00, 25.54it/s]
 84%| | 66/79 [00:03<00:00, 25.56it/s]
 87%| | 69/79 [00:03<00:00, 25.70it/s]
 91%| | 72/79 [00:03<00:00, 25.48it/s]
 95%|| 75/79 [00:03<00:00, 26.10it/s]
 99%|| 78/79 [00:03<00:00, 26.49it/s]
100%|| 79/79 [00:03<00:00, 20.07it/s]
, 24.92it/s]
 70%|   | 55/79 [00:02<00:00, 25.23it/s]
 73%|  | 58/79 [00:03<00:00, 25.54it/s]
 77%|  | 61/79 [00:03<00:00, 25.39it/s]
 81%|  | 64/79 [00:03<00:00, 25.08it/s]
 85%| | 67/79 [00:03<00:00, 25.32it/s]
 89%| | 70/79 [00:03<00:00, 25.37it/s]
 92%|| 73/79 [00:03<00:00, 25.70it/s]
 96%|| 76/79 [00:03<00:00, 26.25it/s]
100%|| 79/79 [00:03<00:00, 27.05it/s]
, 23.98it/s]
 70%|   | 55/79 [00:02<00:00, 24.38it/s]
 73%|  | 58/79 [00:03<00:00, 24.57it/s]
 77%|  | 61/79 [00:03<00:00, 24.94it/s]
 81%|  | 64/79 [00:03<00:00, 24.93it/s]
 85%| | 67/79 [00:03<00:00, 25.12it/s]
 89%| | 70/79 [00:03<00:00, 25.13it/s]
 92%|| 73/79 [00:03<00:00, 25.60it/s]
 96%|| 76/79 [00:03<00:00, 26.31it/s]
100%|| 79/79 [00:03<00:00, 27.21it/s]
, 24.30it/s]
 70%|   | 55/79 [00:02<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 24.99it/s]
 77%|  | 61/79 [00:03<00:00, 25.01it/s]
 81%|  | 64/79 [00:03<00:00, 25.02it/s]
 85%| | 67/79 [00:03<00:00, 24.84it/s]
 89%| | 70/79 [00:03<00:00, 24.90it/s]
 92%|| 73/79 [00:03<00:00, 25.10it/s]
 96%|| 76/79 [00:03<00:00, 25.82it/s]
100%|| 79/79 [00:03<00:00, 26.67it/s]
, 24.40it/s]
 70%|   | 55/79 [00:02<00:00, 24.44it/s]
 73%|  | 58/79 [00:03<00:00, 24.83it/s]
 77%|  | 61/79 [00:03<00:00, 24.89it/s]
 81%|  | 64/79 [00:03<00:00, 25.06it/s]
 85%| | 67/79 [00:03<00:00, 25.19it/s]
 89%| | 70/79 [00:03<00:00, 25.26it/s]
 92%|| 73/79 [00:03<00:00, 25.72it/s]
 96%|| 76/79 [00:03<00:00, 26.41it/s]
100%|| 79/79 [00:03<00:00, 27.17it/s]
, 24.58it/s]
 70%|   | 55/79 [00:03<00:00, 24.90it/s]
 73%|  | 58/79 [00:03<00:00, 25.25it/s]
 77%|  | 61/79 [00:03<00:00, 25.23it/s]
 81%|  | 64/79 [00:03<00:00, 25.33it/s]
 85%| | 67/79 [00:03<00:00, 25.43it/s]
 89%| | 70/79 [00:03<00:00, 25.67it/s]
 92%|| 73/79 [00:03<00:00, 25.65it/s]
 96%|| 76/79 [00:03<00:00, 26.75it/s]
100%|| 79/79 [00:03<00:00, 27.08it/s]
, 24.17it/s]
 70%|   | 55/79 [00:03<00:00, 24.87it/s]
 73%|  | 58/79 [00:03<00:00, 25.05it/s]
 77%|  | 61/79 [00:03<00:00, 25.39it/s]
 81%|  | 64/79 [00:03<00:00, 25.60it/s]
 85%| | 67/79 [00:03<00:00, 25.55it/s]
 89%| | 70/79 [00:03<00:00, 25.51it/s]
 92%|| 73/79 [00:03<00:00, 25.55it/s]
 96%|| 76/79 [00:03<00:00, 26.20it/s]
100%|| 79/79 [00:03<00:00, 26.98it/s]
, 23.55it/s]
 70%|   | 55/79 [00:03<00:01, 23.64it/s]
 73%|  | 58/79 [00:03<00:00, 24.11it/s]
 77%|  | 61/79 [00:03<00:00, 24.37it/s]
 81%|  | 64/79 [00:03<00:00, 24.54it/s]
 85%| | 67/79 [00:03<00:00, 24.74it/s]
 89%| | 70/79 [00:03<00:00, 24.86it/s]
 92%|| 73/79 [00:03<00:00, 25.18it/s]
 96%|| 76/79 [00:03<00:00, 25.88it/s]
100%|| 79/79 [00:03<00:00, 26.80it/s]
, 23.75it/s]
 70%|   | 55/79 [00:03<00:00, 24.07it/s]
 73%|  | 58/79 [00:03<00:00, 24.48it/s]
 77%|  | 61/79 [00:03<00:00, 24.79it/s]
 81%|  | 64/79 [00:03<00:00, 24.90it/s]
 85%| | 67/79 [00:03<00:00, 25.10it/s]
 89%| | 70/79 [00:03<00:00, 25.43it/s]
 92%|| 73/79 [00:03<00:00, 25.66it/s]
 96%|| 76/79 [00:03<00:00, 26.43it/s]
100%|| 79/79 [00:03<00:00, 27.26it/s]
, 23.58it/s]
 70%|   | 55/79 [00:03<00:00, 24.37it/s]
 73%|  | 58/79 [00:03<00:00, 24.47it/s]
 77%|  | 61/79 [00:03<00:00, 24.78it/s]
 81%|  | 64/79 [00:03<00:00, 24.87it/s]
 85%| | 67/79 [00:03<00:00, 25.00it/s]
 89%| | 70/79 [00:03<00:00, 24.48it/s]
 92%|| 73/79 [00:03<00:00, 25.06it/s]
 96%|| 76/79 [00:03<00:00, 25.81it/s]
100%|| 79/79 [00:03<00:00, 26.69it/s]
, 24.31it/s]
 70%|   | 55/79 [00:03<00:00, 24.46it/s]
 73%|  | 58/79 [00:03<00:00, 24.60it/s]
 77%|  | 61/79 [00:03<00:00, 24.99it/s]
 81%|  | 64/79 [00:03<00:00, 25.27it/s]
 85%| | 67/79 [00:03<00:00, 25.25it/s]
 89%| | 70/79 [00:03<00:00, 25.19it/s]
 92%|| 73/79 [00:03<00:00, 25.51it/s]
 96%|| 76/79 [00:03<00:00, 26.48it/s]
100%|| 79/79 [00:03<00:00, 26.65it/s]
, 23.66it/s]
 70%|   | 55/79 [00:03<00:00, 24.09it/s]
 73%|  | 58/79 [00:03<00:00, 24.41it/s]
 77%|  | 61/79 [00:03<00:00, 24.67it/s]
 81%|  | 64/79 [00:03<00:00, 24.97it/s]
 85%| | 67/79 [00:03<00:00, 25.07it/s]
 89%| | 70/79 [00:03<00:00, 25.01it/s]
 92%|| 73/79 [00:03<00:00, 24.99it/s]
 96%|| 76/79 [00:03<00:00, 25.73it/s]
100%|| 79/79 [00:03<00:00, 26.29it/s]
92it/s]
 68%|   | 54/79 [00:03<00:01, 24.52it/s]
 72%|  | 57/79 [00:03<00:00, 24.87it/s]
 76%|  | 60/79 [00:03<00:00, 25.08it/s]
 80%|  | 63/79 [00:03<00:00, 25.05it/s]
 84%| | 66/79 [00:03<00:00, 25.28it/s]
 87%| | 69/79 [00:03<00:00, 25.36it/s]
 91%| | 72/79 [00:03<00:00, 25.44it/s]
 95%|| 75/79 [00:03<00:00, 26.13it/s]
 99%|| 78/79 [00:03<00:00, 27.14it/s]
100%|| 79/79 [00:04<00:00, 19.47it/s]
, 23.81it/s]
 70%|   | 55/79 [00:03<00:00, 24.25it/s]
 73%|  | 58/79 [00:03<00:00, 24.36it/s]
 77%|  | 61/79 [00:03<00:00, 24.88it/s]
 81%|  | 64/79 [00:03<00:00, 24.73it/s]
 85%| | 67/79 [00:03<00:00, 25.02it/s]
 89%| | 70/79 [00:03<00:00, 24.84it/s]
 92%|| 73/79 [00:03<00:00, 25.22it/s]
 96%|| 76/79 [00:03<00:00, 25.74it/s]
100%|| 79/79 [00:03<00:00, 26.57it/s]
63it/s]
 68%|   | 54/79 [00:03<00:01, 23.85it/s]
 72%|  | 57/79 [00:03<00:00, 24.22it/s]
 76%|  | 60/79 [00:03<00:00, 24.56it/s]
 80%|  | 63/79 [00:03<00:00, 24.77it/s]
 84%| | 66/79 [00:03<00:00, 24.68it/s]
 87%| | 69/79 [00:03<00:00, 24.77it/s]
 91%| | 72/79 [00:03<00:00, 25.17it/s]
 95%|| 75/79 [00:03<00:00, 25.64it/s]
 99%|| 78/79 [00:03<00:00, 26.27it/s]
100%|| 79/79 [00:04<00:00, 19.37it/s]
, 24.00it/s]
 70%|   | 55/79 [00:03<00:00, 24.34it/s]
 73%|  | 58/79 [00:03<00:00, 24.44it/s]
 77%|  | 61/79 [00:03<00:00, 24.72it/s]
 81%|  | 64/79 [00:03<00:00, 24.69it/s]
 85%| | 67/79 [00:03<00:00, 24.70it/s]
 89%| | 70/79 [00:03<00:00, 24.76it/s]
 92%|| 73/79 [00:03<00:00, 25.29it/s]
 96%|| 76/79 [00:03<00:00, 25.81it/s]
100%|| 79/79 [00:03<00:00, 26.72it/s]
53it/s]
 68%|   | 54/79 [00:03<00:01, 24.01it/s]
 72%|  | 57/79 [00:03<00:00, 24.24it/s]
 76%|  | 60/79 [00:03<00:00, 24.06it/s]
 80%|  | 63/79 [00:03<00:00, 24.19it/s]
 84%| | 66/79 [00:03<00:00, 24.18it/s]
 87%| | 69/79 [00:03<00:00, 24.35it/s]
 91%| | 72/79 [00:03<00:00, 24.39it/s]
 95%|| 75/79 [00:03<00:00, 25.32it/s]
 99%|| 78/79 [00:03<00:00, 26.00it/s]
100%|| 79/79 [00:04<00:00, 19.42it/s]
, 23.50it/s]
 70%|   | 55/79 [00:03<00:01, 23.93it/s]
 73%|  | 58/79 [00:03<00:00, 24.26it/s]
 77%|  | 61/79 [00:03<00:00, 24.33it/s]
 81%|  | 64/79 [00:03<00:00, 24.69it/s]
 85%| | 67/79 [00:03<00:00, 24.92it/s]
 89%| | 70/79 [00:03<00:00, 24.94it/s]
 92%|| 73/79 [00:03<00:00, 25.44it/s]
 96%|| 76/79 [00:03<00:00, 26.07it/s]
100%|| 79/79 [00:04<00:00, 26.86it/s]
, 23.95it/s]
 70%|   | 55/79 [00:03<00:00, 24.01it/s]
 73%|  | 58/79 [00:03<00:00, 24.05it/s]
 77%|  | 61/79 [00:03<00:00, 24.23it/s]
 81%|  | 64/79 [00:03<00:00, 24.48it/s]
 85%| | 67/79 [00:03<00:00, 24.75it/s]
 89%| | 70/79 [00:03<00:00, 24.88it/s]
 92%|| 73/79 [00:03<00:00, 25.26it/s]
 96%|| 76/79 [00:03<00:00, 25.80it/s]
100%|| 79/79 [00:04<00:00, 26.84it/s]
, 23.35it/s]
 70%|   | 55/79 [00:03<00:01, 23.54it/s]
 73%|  | 58/79 [00:03<00:00, 23.67it/s]
 77%|  | 61/79 [00:03<00:00, 23.46it/s]
 81%|  | 64/79 [00:03<00:00, 23.53it/s]
 85%| | 67/79 [00:03<00:00, 24.14it/s]
 89%| | 70/79 [00:03<00:00, 24.17it/s]
 92%|| 73/79 [00:03<00:00, 24.63it/s]
 96%|| 76/79 [00:03<00:00, 25.40it/s]
100%|| 79/79 [00:04<00:00, 26.19it/s]
30it/s]
 68%|   | 54/79 [00:03<00:01, 23.89it/s]
 72%|  | 57/79 [00:03<00:00, 24.02it/s]
 76%|  | 60/79 [00:03<00:00, 24.07it/s]
 80%|  | 63/79 [00:03<00:00, 24.06it/s]
 84%| | 66/79 [00:03<00:00, 24.29it/s]
 87%| | 69/79 [00:03<00:00, 24.32it/s]
 91%| | 72/79 [00:03<00:00, 24.57it/s]
 95%|| 75/79 [00:03<00:00, 25.45it/s]
 99%|| 78/79 [00:04<00:00, 26.07it/s]
100%|| 79/79 [00:04<00:00, 19.13it/s]
, 23.48it/s]
 70%|   | 55/79 [00:03<00:01, 23.78it/s]
 73%|  | 58/79 [00:03<00:00, 24.05it/s]
 77%|  | 61/79 [00:03<00:00, 24.03it/s]
 81%|  | 64/79 [00:03<00:00, 23.97it/s]
 85%| | 67/79 [00:03<00:00, 24.00it/s]
 89%| | 70/79 [00:03<00:00, 24.25it/s]
 92%|| 73/79 [00:03<00:00, 24.44it/s]
 96%|| 76/79 [00:03<00:00, 25.19it/s]
100%|| 79/79 [00:04<00:00, 26.11it/s]
30it/s]
 68%|   | 54/79 [00:03<00:01, 23.55it/s]
 72%|  | 57/79 [00:03<00:00, 23.91it/s]
 76%|  | 60/79 [00:03<00:00, 24.34it/s]
 80%|  | 63/79 [00:03<00:00, 24.01it/s]
 84%| | 66/79 [00:03<00:00, 24.25it/s]
 87%| | 69/79 [00:03<00:00, 24.36it/s]
 91%| | 72/79 [00:03<00:00, 24.42it/s]
 95%|| 75/79 [00:03<00:00, 25.19it/s]
 99%|| 78/79 [00:04<00:00, 25.69it/s]
100%|| 79/79 [00:04<00:00, 19.13it/s]
, 23.23it/s]
 70%|   | 55/79 [00:03<00:01, 23.62it/s]
 73%|  | 58/79 [00:03<00:00, 23.87it/s]
 77%|  | 61/79 [00:03<00:00, 23.91it/s]
 81%|  | 64/79 [00:03<00:00, 23.97it/s]
 85%| | 67/79 [00:03<00:00, 24.22it/s]
 89%| | 70/79 [00:03<00:00, 24.24it/s]
 92%|| 73/79 [00:03<00:00, 24.75it/s]
 96%|| 76/79 [00:03<00:00, 25.34it/s]
100%|| 79/79 [00:04<00:00, 26.23it/s]
, 23.24it/s]
 70%|   | 55/79 [00:03<00:01, 23.58it/s]
 73%|  | 58/79 [00:03<00:00, 23.71it/s]
 77%|  | 61/79 [00:03<00:00, 24.04it/s]
 81%|  | 64/79 [00:03<00:00, 24.15it/s]
 85%| | 67/79 [00:03<00:00, 24.52it/s]
 89%| | 70/79 [00:03<00:00, 24.79it/s]
 92%|| 73/79 [00:03<00:00, 25.39it/s]
 96%|| 76/79 [00:03<00:00, 26.06it/s]
100%|| 79/79 [00:04<00:00, 27.01it/s]
, 22.73it/s]
 70%|   | 55/79 [00:03<00:01, 22.99it/s]
 73%|  | 58/79 [00:03<00:00, 23.51it/s]
 77%|  | 61/79 [00:03<00:00, 23.76it/s]
 81%|  | 64/79 [00:03<00:00, 24.04it/s]
 85%| | 67/79 [00:03<00:00, 24.09it/s]
 89%| | 70/79 [00:03<00:00, 24.15it/s]
 92%|| 73/79 [00:03<00:00, 24.61it/s]
 96%|| 76/79 [00:03<00:00, 25.37it/s]
100%|| 79/79 [00:04<00:00, 26.16it/s]
48it/s]
 68%|   | 54/79 [00:03<00:01, 23.72it/s]
 72%|  | 57/79 [00:03<00:00, 23.92it/s]
 76%|  | 60/79 [00:03<00:00, 24.33it/s]
 80%|  | 63/79 [00:03<00:00, 24.44it/s]
 84%| | 66/79 [00:03<00:00, 24.53it/s]
 87%| | 69/79 [00:03<00:00, 24.50it/s]
 91%| | 72/79 [00:03<00:00, 24.21it/s]
 95%|| 75/79 [00:03<00:00, 25.03it/s]
 99%|| 78/79 [00:04<00:00, 25.62it/s]
100%|| 79/79 [00:04<00:00, 19.02it/s]
, 23.00it/s]
 70%|   | 55/79 [00:03<00:01, 23.18it/s]
 73%|  | 58/79 [00:03<00:00, 23.59it/s]
 77%|  | 61/79 [00:03<00:00, 23.57it/s]
 81%|  | 64/79 [00:03<00:00, 23.71it/s]
 85%| | 67/79 [00:03<00:00, 23.73it/s]
 89%| | 70/79 [00:03<00:00, 23.80it/s]
 92%|| 73/79 [00:03<00:00, 24.19it/s]
 96%|| 76/79 [00:04<00:00, 25.01it/s]
100%|| 79/79 [00:04<00:00, 25.96it/s]
, 22.93it/s]
 70%|   | 55/79 [00:03<00:01, 23.41it/s]
 73%|  | 58/79 [00:03<00:00, 23.51it/s]
 77%|  | 61/79 [00:03<00:00, 23.94it/s]
 81%|  | 64/79 [00:03<00:00, 24.27it/s]
 85%| | 67/79 [00:03<00:00, 24.38it/s]
 89%| | 70/79 [00:03<00:00, 24.39it/s]
 92%|| 73/79 [00:03<00:00, 24.73it/s]
 96%|| 76/79 [00:04<00:00, 25.28it/s]
100%|| 79/79 [00:04<00:00, 26.01it/s]
2020-06-23 16:36:10,147 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.216287 (0.026984234619140623 s / img per device, on 32 devices)
2020-06-23 16:36:10,169 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:36:10,169 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:36:10,190 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592955381408, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 10, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592955381408, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 10}}
2020-06-23 16:36:22,165 maskrcnn_benchmark.trainer INFO: eta: 1:07:13  iter: 8260  loss: 0.6354 (0.7734)  loss_classifier: 0.2396 (0.2857)  loss_box_reg: 0.0937 (0.1241)  loss_mask: 0.2686 (0.3029)  loss_objectness: 0.0234 (0.0393)  loss_rpn_box_reg: 0.0062 (0.0215)  time: 0.1088 (0.1271)  data: 0.0014 (0.0194)  lr: 0.160000  max mem: 5193
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:36:24,352 maskrcnn_benchmark.trainer INFO: eta: 1:07:09  iter: 8280  loss: 0.6251 (0.7731)  loss_classifier: 0.2070 (0.2856)  loss_box_reg: 0.0971 (0.1241)  loss_mask: 0.2570 (0.3028)  loss_objectness: 0.0250 (0.0392)  loss_rpn_box_reg: 0.0142 (0.0215)  time: 0.1085 (0.1270)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 5193
2020-06-23 16:36:26,533 maskrcnn_benchmark.trainer INFO: eta: 1:07:05  iter: 8300  loss: 0.7154 (0.7730)  loss_classifier: 0.2259 (0.2855)  loss_box_reg: 0.1221 (0.1241)  loss_mask: 0.2732 (0.3027)  loss_objectness: 0.0138 (0.0392)  loss_rpn_box_reg: 0.0059 (0.0215)  time: 0.1081 (0.1270)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 5193
2020-06-23 16:36:28,692 maskrcnn_benchmark.trainer INFO: eta: 1:07:01  iter: 8320  loss: 0.7012 (0.7728)  loss_classifier: 0.2529 (0.2854)  loss_box_reg: 0.1180 (0.1240)  loss_mask: 0.2581 (0.3026)  loss_objectness: 0.0267 (0.0392)  loss_rpn_box_reg: 0.0098 (0.0215)  time: 0.1076 (0.1269)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 5193
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 16:36:30,874 maskrcnn_benchmark.trainer INFO: eta: 1:06:57  iter: 8340  loss: 0.7248 (0.7726)  loss_classifier: 0.2679 (0.2854)  loss_box_reg: 0.1065 (0.1240)  loss_mask: 0.2622 (0.3026)  loss_objectness: 0.0280 (0.0392)  loss_rpn_box_reg: 0.0103 (0.0215)  time: 0.1092 (0.1269)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 5193
DONE (t=1.00s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:36:33,037 maskrcnn_benchmark.trainer INFO: eta: 1:06:53  iter: 8360  loss: 0.5709 (0.7722)  loss_classifier: 0.1957 (0.2852)  loss_box_reg: 0.0966 (0.1239)  loss_mask: 0.2573 (0.3025)  loss_objectness: 0.0149 (0.0392)  loss_rpn_box_reg: 0.0095 (0.0214)  time: 0.1075 (0.1269)  data: 0.0015 (0.0191)  lr: 0.160000  max mem: 5193
DONE (t=1.89s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.27490
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.46983
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.28757
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.16436
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.30459
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.34958
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25224
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.41386
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.43814
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.26537
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47853
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.54758
2020-06-23 16:36:35,204 maskrcnn_benchmark.trainer INFO: eta: 1:06:49  iter: 8380  loss: 0.5880 (0.7718)  loss_classifier: 0.1742 (0.2850)  loss_box_reg: 0.0903 (0.1239)  loss_mask: 0.2618 (0.3024)  loss_objectness: 0.0166 (0.0391)  loss_rpn_box_reg: 0.0090 (0.0214)  time: 0.1082 (0.1268)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5193
2020-06-23 16:36:37,379 maskrcnn_benchmark.trainer INFO: eta: 1:06:45  iter: 8400  loss: 0.5958 (0.7714)  loss_classifier: 0.2142 (0.2848)  loss_box_reg: 0.0986 (0.1238)  loss_mask: 0.2644 (0.3023)  loss_objectness: 0.0212 (0.0391)  loss_rpn_box_reg: 0.0065 (0.0214)  time: 0.1084 (0.1268)  data: 0.0015 (0.0191)  lr: 0.160000  max mem: 5193
2020-06-23 16:36:39,551 maskrcnn_benchmark.trainer INFO: eta: 1:06:41  iter: 8420  loss: 0.6262 (0.7712)  loss_classifier: 0.1932 (0.2847)  loss_box_reg: 0.0934 (0.1238)  loss_mask: 0.2855 (0.3022)  loss_objectness: 0.0168 (0.0391)  loss_rpn_box_reg: 0.0118 (0.0214)  time: 0.1089 (0.1267)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5193
2020-06-23 16:36:41,720 maskrcnn_benchmark.trainer INFO: eta: 1:06:37  iter: 8440  loss: 0.6825 (0.7709)  loss_classifier: 0.2528 (0.2846)  loss_box_reg: 0.0998 (0.1237)  loss_mask: 0.2674 (0.3021)  loss_objectness: 0.0207 (0.0391)  loss_rpn_box_reg: 0.0149 (0.0214)  time: 0.1075 (0.1267)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5193
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:36:43,896 maskrcnn_benchmark.trainer INFO: eta: 1:06:34  iter: 8460  loss: 0.7501 (0.7707)  loss_classifier: 0.2667 (0.2845)  loss_box_reg: 0.1081 (0.1237)  loss_mask: 0.2432 (0.3020)  loss_objectness: 0.0285 (0.0391)  loss_rpn_box_reg: 0.0194 (0.0214)  time: 0.1086 (0.1266)  data: 0.0016 (0.0189)  lr: 0.160000  max mem: 5193
DONE (t=2.59s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:36:46,066 maskrcnn_benchmark.trainer INFO: eta: 1:06:30  iter: 8480  loss: 0.6099 (0.7705)  loss_classifier: 0.2164 (0.2843)  loss_box_reg: 0.0996 (0.1237)  loss_mask: 0.2719 (0.3020)  loss_objectness: 0.0162 (0.0391)  loss_rpn_box_reg: 0.0100 (0.0214)  time: 0.1081 (0.1266)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5193
DONE (t=3.12s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.26218
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.44392
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.27383
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11716
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.28500
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.38715
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.24659
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.39259
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.41308
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.23214
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.45222
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.54001
2020-06-23 16:36:48,215 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.2749037747598405, segm mAP: 0.262177179627343
:::MLLOG {"namespace": "", "time_ms": 1592955408216, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.2749037747598405, "SEGM": 0.262177179627343}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 9}}
:::MLLOG {"namespace": "", "time_ms": 1592955408216, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 9}}
2020-06-23 16:36:48,436 maskrcnn_benchmark.trainer INFO: eta: 1:06:27  iter: 8500  loss: 0.6203 (0.7702)  loss_classifier: 0.2003 (0.2842)  loss_box_reg: 0.0909 (0.1236)  loss_mask: 0.2514 (0.3019)  loss_objectness: 0.0193 (0.0391)  loss_rpn_box_reg: 0.0096 (0.0214)  time: 0.1077 (0.1266)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5193
2020-06-23 16:36:50,595 maskrcnn_benchmark.trainer INFO: eta: 1:06:23  iter: 8520  loss: 0.6622 (0.7700)  loss_classifier: 0.2796 (0.2841)  loss_box_reg: 0.0986 (0.1236)  loss_mask: 0.2883 (0.3018)  loss_objectness: 0.0210 (0.0391)  loss_rpn_box_reg: 0.0078 (0.0214)  time: 0.1077 (0.1265)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5193

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0


Grad overflow on iteration  8522
Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0


Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0
Grad overflow on iteration  8522

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8522
Using dynamic loss scale of  65536.0
2020-06-23 16:36:52,762 maskrcnn_benchmark.trainer INFO: eta: 1:06:19  iter: 8540  loss: 0.6339 (0.7698)  loss_classifier: 0.2255 (0.2840)  loss_box_reg: 0.1008 (0.1235)  loss_mask: 0.2724 (0.3017)  loss_objectness: 0.0189 (0.0391)  loss_rpn_box_reg: 0.0122 (0.0214)  time: 0.1085 (0.1265)  data: 0.0013 (0.0188)  lr: 0.160000  max mem: 5193
2020-06-23 16:36:54,955 maskrcnn_benchmark.trainer INFO: eta: 1:06:15  iter: 8560  loss: 0.6329 (0.7695)  loss_classifier: 0.2549 (0.2839)  loss_box_reg: 0.1035 (0.1235)  loss_mask: 0.2541 (0.3016)  loss_objectness: 0.0243 (0.0390)  loss_rpn_box_reg: 0.0094 (0.0215)  time: 0.1090 (0.1264)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5193
2020-06-23 16:36:57,129 maskrcnn_benchmark.trainer INFO: eta: 1:06:11  iter: 8580  loss: 0.6523 (0.7692)  loss_classifier: 0.2209 (0.2838)  loss_box_reg: 0.1029 (0.1234)  loss_mask: 0.2767 (0.3016)  loss_objectness: 0.0224 (0.0390)  loss_rpn_box_reg: 0.0109 (0.0214)  time: 0.1076 (0.1264)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5193
2020-06-23 16:36:59,299 maskrcnn_benchmark.trainer INFO: eta: 1:06:07  iter: 8600  loss: 0.6866 (0.7690)  loss_classifier: 0.2097 (0.2836)  loss_box_reg: 0.0960 (0.1234)  loss_mask: 0.2782 (0.3015)  loss_objectness: 0.0189 (0.0390)  loss_rpn_box_reg: 0.0080 (0.0214)  time: 0.1079 (0.1264)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5193
2020-06-23 16:37:01,468 maskrcnn_benchmark.trainer INFO: eta: 1:06:04  iter: 8620  loss: 0.6307 (0.7687)  loss_classifier: 0.1985 (0.2835)  loss_box_reg: 0.0950 (0.1234)  loss_mask: 0.2503 (0.3014)  loss_objectness: 0.0166 (0.0390)  loss_rpn_box_reg: 0.0072 (0.0214)  time: 0.1081 (0.1263)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5193
2020-06-23 16:37:03,625 maskrcnn_benchmark.trainer INFO: eta: 1:06:00  iter: 8640  loss: 0.6617 (0.7685)  loss_classifier: 0.2498 (0.2835)  loss_box_reg: 0.1134 (0.1234)  loss_mask: 0.2732 (0.3013)  loss_objectness: 0.0165 (0.0389)  loss_rpn_box_reg: 0.0136 (0.0214)  time: 0.1073 (0.1263)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5193
2020-06-23 16:37:05,790 maskrcnn_benchmark.trainer INFO: eta: 1:05:56  iter: 8660  loss: 0.6988 (0.7683)  loss_classifier: 0.2676 (0.2834)  loss_box_reg: 0.1056 (0.1233)  loss_mask: 0.2593 (0.3013)  loss_objectness: 0.0257 (0.0389)  loss_rpn_box_reg: 0.0111 (0.0214)  time: 0.1080 (0.1262)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5193
2020-06-23 16:37:07,974 maskrcnn_benchmark.trainer INFO: eta: 1:05:52  iter: 8680  loss: 0.6004 (0.7680)  loss_classifier: 0.1943 (0.2833)  loss_box_reg: 0.0818 (0.1233)  loss_mask: 0.2422 (0.3012)  loss_objectness: 0.0193 (0.0389)  loss_rpn_box_reg: 0.0091 (0.0214)  time: 0.1091 (0.1262)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5193
2020-06-23 16:37:10,158 maskrcnn_benchmark.trainer INFO: eta: 1:05:48  iter: 8700  loss: 0.6664 (0.7677)  loss_classifier: 0.2371 (0.2832)  loss_box_reg: 0.1132 (0.1232)  loss_mask: 0.2657 (0.3011)  loss_objectness: 0.0143 (0.0388)  loss_rpn_box_reg: 0.0106 (0.0214)  time: 0.1080 (0.1262)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5193
2020-06-23 16:37:12,312 maskrcnn_benchmark.trainer INFO: eta: 1:05:44  iter: 8720  loss: 0.5957 (0.7675)  loss_classifier: 0.2044 (0.2830)  loss_box_reg: 0.0945 (0.1232)  loss_mask: 0.3019 (0.3010)  loss_objectness: 0.0177 (0.0388)  loss_rpn_box_reg: 0.0086 (0.0214)  time: 0.1077 (0.1261)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5193
2020-06-23 16:37:14,470 maskrcnn_benchmark.trainer INFO: eta: 1:05:41  iter: 8740  loss: 0.7309 (0.7674)  loss_classifier: 0.2558 (0.2830)  loss_box_reg: 0.1223 (0.1232)  loss_mask: 0.2706 (0.3010)  loss_objectness: 0.0283 (0.0388)  loss_rpn_box_reg: 0.0176 (0.0214)  time: 0.1075 (0.1261)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5193
2020-06-23 16:37:16,650 maskrcnn_benchmark.trainer INFO: eta: 1:05:37  iter: 8760  loss: 0.6108 (0.7672)  loss_classifier: 0.2299 (0.2830)  loss_box_reg: 0.0972 (0.1232)  loss_mask: 0.2568 (0.3009)  loss_objectness: 0.0254 (0.0388)  loss_rpn_box_reg: 0.0105 (0.0214)  time: 0.1077 (0.1260)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5193
2020-06-23 16:37:18,829 maskrcnn_benchmark.trainer INFO: eta: 1:05:33  iter: 8780  loss: 0.6749 (0.7670)  loss_classifier: 0.2301 (0.2829)  loss_box_reg: 0.0998 (0.1232)  loss_mask: 0.2691 (0.3008)  loss_objectness: 0.0165 (0.0388)  loss_rpn_box_reg: 0.0059 (0.0214)  time: 0.1086 (0.1260)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5193
2020-06-23 16:37:21,008 maskrcnn_benchmark.trainer INFO: eta: 1:05:29  iter: 8800  loss: 0.6811 (0.7670)  loss_classifier: 0.2336 (0.2829)  loss_box_reg: 0.1062 (0.1231)  loss_mask: 0.2722 (0.3008)  loss_objectness: 0.0317 (0.0388)  loss_rpn_box_reg: 0.0112 (0.0214)  time: 0.1086 (0.1260)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5193
2020-06-23 16:37:23,174 maskrcnn_benchmark.trainer INFO: eta: 1:05:26  iter: 8820  loss: 0.5915 (0.7667)  loss_classifier: 0.2150 (0.2828)  loss_box_reg: 0.0927 (0.1231)  loss_mask: 0.2395 (0.3007)  loss_objectness: 0.0195 (0.0387)  loss_rpn_box_reg: 0.0079 (0.0213)  time: 0.1084 (0.1259)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5193
2020-06-23 16:37:25,348 maskrcnn_benchmark.trainer INFO: eta: 1:05:22  iter: 8840  loss: 0.6573 (0.7665)  loss_classifier: 0.2281 (0.2827)  loss_box_reg: 0.1030 (0.1231)  loss_mask: 0.2564 (0.3006)  loss_objectness: 0.0191 (0.0387)  loss_rpn_box_reg: 0.0086 (0.0213)  time: 0.1091 (0.1259)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5193
2020-06-23 16:37:27,519 maskrcnn_benchmark.trainer INFO: eta: 1:05:18  iter: 8860  loss: 0.6580 (0.7662)  loss_classifier: 0.2314 (0.2826)  loss_box_reg: 0.1098 (0.1231)  loss_mask: 0.2872 (0.3005)  loss_objectness: 0.0212 (0.0387)  loss_rpn_box_reg: 0.0119 (0.0213)  time: 0.1083 (0.1258)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5193
2020-06-23 16:37:29,681 maskrcnn_benchmark.trainer INFO: eta: 1:05:14  iter: 8880  loss: 0.6458 (0.7660)  loss_classifier: 0.2149 (0.2825)  loss_box_reg: 0.1105 (0.1230)  loss_mask: 0.2608 (0.3005)  loss_objectness: 0.0222 (0.0387)  loss_rpn_box_reg: 0.0087 (0.0213)  time: 0.1077 (0.1258)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5193

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885

Grad overflow on iteration  8885

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0


Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0
Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0

Grad overflow on iteration  8885
Using dynamic loss scale of  32768.0
2020-06-23 16:37:31,850 maskrcnn_benchmark.trainer INFO: eta: 1:05:11  iter: 8900  loss: 0.6718 (0.7658)  loss_classifier: 0.2260 (0.2824)  loss_box_reg: 0.1125 (0.1230)  loss_mask: 0.2692 (0.3005)  loss_objectness: 0.0225 (0.0386)  loss_rpn_box_reg: 0.0092 (0.0213)  time: 0.1080 (0.1258)  data: 0.0015 (0.0181)  lr: 0.160000  max mem: 5193
2020-06-23 16:37:34,022 maskrcnn_benchmark.trainer INFO: eta: 1:05:07  iter: 8920  loss: 0.6676 (0.7656)  loss_classifier: 0.2570 (0.2823)  loss_box_reg: 0.1157 (0.1230)  loss_mask: 0.2658 (0.3004)  loss_objectness: 0.0179 (0.0386)  loss_rpn_box_reg: 0.0117 (0.0213)  time: 0.1084 (0.1257)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5193
2020-06-23 16:37:36,186 maskrcnn_benchmark.trainer INFO: eta: 1:05:03  iter: 8940  loss: 0.6097 (0.7653)  loss_classifier: 0.2218 (0.2823)  loss_box_reg: 0.0851 (0.1229)  loss_mask: 0.2421 (0.3002)  loss_objectness: 0.0213 (0.0386)  loss_rpn_box_reg: 0.0094 (0.0213)  time: 0.1082 (0.1257)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5193
2020-06-23 16:37:38,347 maskrcnn_benchmark.trainer INFO: eta: 1:05:00  iter: 8960  loss: 0.7431 (0.7651)  loss_classifier: 0.2789 (0.2822)  loss_box_reg: 0.1047 (0.1229)  loss_mask: 0.2583 (0.3002)  loss_objectness: 0.0292 (0.0386)  loss_rpn_box_reg: 0.0136 (0.0213)  time: 0.1077 (0.1256)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5193
2020-06-23 16:37:40,511 maskrcnn_benchmark.trainer INFO: eta: 1:04:56  iter: 8980  loss: 0.6868 (0.7649)  loss_classifier: 0.2485 (0.2821)  loss_box_reg: 0.1036 (0.1229)  loss_mask: 0.2677 (0.3001)  loss_objectness: 0.0207 (0.0386)  loss_rpn_box_reg: 0.0078 (0.0212)  time: 0.1074 (0.1256)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5193
2020-06-23 16:37:42,677 maskrcnn_benchmark.trainer INFO: eta: 1:04:52  iter: 9000  loss: 0.5478 (0.7645)  loss_classifier: 0.1622 (0.2819)  loss_box_reg: 0.0846 (0.1228)  loss_mask: 0.2443 (0.3000)  loss_objectness: 0.0144 (0.0385)  loss_rpn_box_reg: 0.0098 (0.0212)  time: 0.1068 (0.1256)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5193
2020-06-23 16:37:44,864 maskrcnn_benchmark.trainer INFO: eta: 1:04:48  iter: 9020  loss: 0.6476 (0.7642)  loss_classifier: 0.1939 (0.2818)  loss_box_reg: 0.0932 (0.1228)  loss_mask: 0.2798 (0.3000)  loss_objectness: 0.0178 (0.0385)  loss_rpn_box_reg: 0.0105 (0.0212)  time: 0.1095 (0.1255)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5193
2020-06-23 16:37:47,032 maskrcnn_benchmark.trainer INFO: eta: 1:04:45  iter: 9040  loss: 0.6501 (0.7639)  loss_classifier: 0.1993 (0.2816)  loss_box_reg: 0.0999 (0.1227)  loss_mask: 0.2759 (0.2999)  loss_objectness: 0.0200 (0.0385)  loss_rpn_box_reg: 0.0070 (0.0212)  time: 0.1081 (0.1255)  data: 0.0014 (0.0178)  lr: 0.016000  max mem: 5193
2020-06-23 16:37:49,201 maskrcnn_benchmark.trainer INFO: eta: 1:04:41  iter: 9060  loss: 0.6473 (0.7637)  loss_classifier: 0.2322 (0.2815)  loss_box_reg: 0.1148 (0.1227)  loss_mask: 0.2520 (0.2998)  loss_objectness: 0.0190 (0.0385)  loss_rpn_box_reg: 0.0092 (0.0212)  time: 0.1083 (0.1255)  data: 0.0014 (0.0178)  lr: 0.016000  max mem: 5193
2020-06-23 16:37:51,369 maskrcnn_benchmark.trainer INFO: eta: 1:04:37  iter: 9080  loss: 0.6413 (0.7634)  loss_classifier: 0.2134 (0.2814)  loss_box_reg: 0.0913 (0.1227)  loss_mask: 0.2742 (0.2997)  loss_objectness: 0.0339 (0.0385)  loss_rpn_box_reg: 0.0166 (0.0212)  time: 0.1080 (0.1254)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5193
2020-06-23 16:37:53,530 maskrcnn_benchmark.trainer INFO: eta: 1:04:34  iter: 9100  loss: 0.6065 (0.7632)  loss_classifier: 0.2198 (0.2813)  loss_box_reg: 0.0952 (0.1226)  loss_mask: 0.2642 (0.2996)  loss_objectness: 0.0210 (0.0384)  loss_rpn_box_reg: 0.0089 (0.0212)  time: 0.1077 (0.1254)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5193
2020-06-23 16:37:55,706 maskrcnn_benchmark.trainer INFO: eta: 1:04:30  iter: 9120  loss: 0.6272 (0.7629)  loss_classifier: 0.2210 (0.2811)  loss_box_reg: 0.1097 (0.1226)  loss_mask: 0.2613 (0.2996)  loss_objectness: 0.0223 (0.0384)  loss_rpn_box_reg: 0.0072 (0.0212)  time: 0.1085 (0.1253)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5193
2020-06-23 16:37:57,871 maskrcnn_benchmark.trainer INFO: eta: 1:04:26  iter: 9140  loss: 0.4921 (0.7625)  loss_classifier: 0.1659 (0.2809)  loss_box_reg: 0.0872 (0.1225)  loss_mask: 0.2431 (0.2995)  loss_objectness: 0.0138 (0.0384)  loss_rpn_box_reg: 0.0063 (0.0212)  time: 0.1087 (0.1253)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5193
2020-06-23 16:38:00,035 maskrcnn_benchmark.trainer INFO: eta: 1:04:23  iter: 9160  loss: 0.6149 (0.7622)  loss_classifier: 0.2160 (0.2808)  loss_box_reg: 0.0933 (0.1225)  loss_mask: 0.2624 (0.2994)  loss_objectness: 0.0132 (0.0383)  loss_rpn_box_reg: 0.0056 (0.0212)  time: 0.1080 (0.1253)  data: 0.0015 (0.0176)  lr: 0.016000  max mem: 5193
:::MLLOG {"namespace": "", "time_ms": 1592955481111, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 10}}
:::MLLOG {"namespace": "", "time_ms": 1592955481112, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 10}}
:::MLLOG {"namespace": "", "time_ms": 1592955481112, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 10}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 16:38:01,343 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
Done (t=0.29s)
creating index...
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
2020-06-23 16:38:01,646 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
Done (t=0.26s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:19,  1.02s/it]
  5%|         | 4/79 [00:01<00:54,  1.38it/s]
  9%|         | 7/79 [00:01<00:37,  1.92it/s]
 13%|        | 10/79 [00:01<00:25,  2.66it/s]
 16%|        | 13/79 [00:01<00:18,  3.63it/s]
 20%|        | 16/79 [00:01<00:12,  4.89it/s]
 24%|       | 19/79 [00:01<00:09,  6.47it/s]
 28%|       | 22/79 [00:01<00:06,  8.35it/s]
 32%|      | 25/79 [00:01<00:05, 10.50it/s]
 35%|      | 28/79 [00:02<00:03, 12.81it/s]
 39%|      | 31/79 [00:02<00:03, 15.16it/s]
 43%|     | 34/79 [00:02<00:02, 17.33it/s]
 47%|     | 37/79 [00:02<00:02, 19.31it/s]
 51%|     | 40/79 [00:02<00:01, 20.94it/s]
 54%|    | 43/79 [00:02<00:01, 22.26it/s]
 58%|    | 46/79 [00:02<00:01, 23.25it/s]
 62%|   | 49/79 [00:02<00:01, 24.08it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:26,  1.11s/it]
  4%|         | 3/79 [00:01<01:00,  1.26it/s]
  8%|         | 6/79 [00:01<00:41,  1.76it/s]
 11%|        | 9/79 [00:01<00:28,  2.45it/s]
 15%|        | 12/79 [00:01<00:19,  3.36it/s]
 19%|        | 15/79 [00:01<00:14,  4.55it/s]
 23%|       | 18/79 [00:01<00:10,  6.06it/s]
 27%|       | 21/79 [00:01<00:07,  7.87it/s]
 30%|       | 24/79 [00:02<00:05,  9.92it/s]
 34%|      | 27/79 [00:02<00:04, 12.11it/s]
 38%|      | 30/79 [00:02<00:03, 14.43it/s]
 42%|     | 33/79 [00:02<00:02, 16.60it/s]
 46%|     | 36/79 [00:02<00:02, 18.62it/s]
 49%|     | 39/79 [00:02<00:01, 20.43it/s]
 53%|    | 42/79 [00:02<00:01, 21.92it/s]
 57%|    | 45/79 [00:02<00:01, 23.10it/s]
 61%|    | 48/79 [00:02<00:01, 24.08it/s]
 65%|   | 51/79 [00:03<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:25,  1.10s/it]
  4%|         | 3/79 [00:01<00:59,  1.27it/s]
  8%|         | 6/79 [00:01<00:41,  1.78it/s]
 11%|        | 9/79 [00:01<00:28,  2.47it/s]
 15%|        | 12/79 [00:01<00:19,  3.39it/s]
 19%|        | 15/79 [00:01<00:13,  4.59it/s]
 23%|       | 18/79 [00:01<00:09,  6.12it/s]
 27%|       | 21/79 [00:01<00:07,  7.91it/s]
 30%|       | 24/79 [00:02<00:05, 10.02it/s]
 34%|      | 27/79 [00:02<00:04, 12.33it/s]
 38%|      | 30/79 [00:02<00:03, 14.62it/s]
 42%|     | 33/79 [00:02<00:02, 16.86it/s]
 46%|     | 36/79 [00:02<00:02, 18.92it/s]
 49%|     | 39/79 [00:02<00:01, 20.56it/s]
 53%|    | 42/79 [00:02<00:01, 21.94it/s]
 57%|    | 45/79 [00:02<00:01, 22.92it/s]
 61%|    | 48/79 [00:02<00:01, 23.80it/s]
 65%|   | 51/79 [00:03<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  4%|         | 3/79 [00:01<00:52,  1.45it/s]
  8%|         | 6/79 [00:01<00:36,  2.02it/s]
 11%|        | 9/79 [00:01<00:25,  2.79it/s]
 15%|        | 12/79 [00:01<00:17,  3.81it/s]
 19%|        | 15/79 [00:01<00:12,  5.10it/s]
 23%|       | 18/79 [00:01<00:09,  6.72it/s]
 27%|       | 21/79 [00:01<00:06,  8.62it/s]
 30%|       | 24/79 [00:02<00:05, 10.72it/s]
 34%|      | 27/79 [00:02<00:04, 12.98it/s]
 38%|      | 30/79 [00:02<00:03, 15.20it/s]
 42%|     | 33/79 [00:02<00:02, 17.31it/s]
 46%|     | 36/79 [00:02<00:02, 19.15it/s]
 49%|     | 39/79 [00:02<00:01, 20.71it/s]
 53%|    | 42/79 [00:02<00:01, 21.92it/s]
 57%|    | 45/79 [00:02<00:01, 23.04it/s]
 61%|    | 48/79 [00:02<00:01, 24.07it/s]
 65%|   | 51/79 [00:03<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:25,  1.09s/it]
  5%|         | 4/79 [00:01<00:58,  1.29it/s]
  9%|         | 7/79 [00:01<00:40,  1.80it/s]
 13%|        | 10/79 [00:01<00:27,  2.50it/s]
 16%|        | 13/79 [00:01<00:19,  3.42it/s]
 20%|        | 16/79 [00:01<00:13,  4.63it/s]
 24%|       | 19/79 [00:01<00:09,  6.16it/s]
 28%|       | 22/79 [00:01<00:07,  7.96it/s]
 32%|      | 25/79 [00:02<00:05, 10.09it/s]
 35%|      | 28/79 [00:02<00:04, 12.37it/s]
 39%|      | 31/79 [00:02<00:03, 14.69it/s]
 43%|     | 34/79 [00:02<00:02, 16.89it/s]
 47%|     | 37/79 [00:02<00:02, 18.99it/s]
 51%|     | 40/79 [00:02<00:01, 20.59it/s]
 54%|    | 43/79 [00:02<00:01, 21.91it/s]
 58%|    | 46/79 [00:02<00:01, 23.10it/s]
 62%|   | 49/79 [00:02<00:01, 23.98it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:31,  1.17s/it]
  5%|         | 4/79 [00:01<01:02,  1.20it/s]
  9%|         | 7/79 [00:01<00:42,  1.68it/s]
 13%|        | 10/79 [00:01<00:29,  2.34it/s]
 16%|        | 13/79 [00:01<00:20,  3.22it/s]
 20%|        | 16/79 [00:01<00:14,  4.37it/s]
 24%|       | 19/79 [00:01<00:10,  5.82it/s]
 28%|       | 22/79 [00:01<00:07,  7.58it/s]
 32%|      | 25/79 [00:02<00:05,  9.63it/s]
 35%|      | 28/79 [00:02<00:04, 11.89it/s]
 39%|      | 31/79 [00:02<00:03, 14.31it/s]
 43%|     | 34/79 [00:02<00:02, 16.39it/s]
 47%|     | 37/79 [00:02<00:02, 18.52it/s]
 51%|     | 40/79 [00:02<00:01, 20.26it/s]
 54%|    | 43/79 [00:02<00:01, 21.88it/s]
 58%|    | 46/79 [00:02<00:01, 22.94it/s]
 62%|   | 49/79 [00:03<00:01, 23.82it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:25,  1.09s/it]
  4%|         | 3/79 [00:01<01:00,  1.26it/s]
  8%|         | 6/79 [00:01<00:41,  1.77it/s]
 11%|        | 9/79 [00:01<00:28,  2.44it/s]
 15%|        | 12/79 [00:01<00:19,  3.35it/s]
 19%|        | 15/79 [00:01<00:14,  4.53it/s]
 23%|       | 18/79 [00:01<00:10,  6.02it/s]
 27%|       | 21/79 [00:02<00:07,  7.81it/s]
 30%|       | 24/79 [00:02<00:05,  9.91it/s]
 34%|      | 27/79 [00:02<00:04, 12.12it/s]
 38%|      | 30/79 [00:02<00:03, 14.46it/s]
 42%|     | 33/79 [00:02<00:02, 16.72it/s]
 46%|     | 36/79 [00:02<00:02, 18.82it/s]
 49%|     | 39/79 [00:02<00:01, 20.46it/s]
 53%|    | 42/79 [00:02<00:01, 22.00it/s]
 57%|    | 45/79 [00:02<00:01, 23.24it/s]
 61%|    | 48/79 [00:03<00:01, 24.19it/s]
 65%|   | 51/79 [00:03<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:28,  1.13s/it]
  5%|         | 4/79 [00:01<01:00,  1.24it/s]
  9%|         | 7/79 [00:01<00:41,  1.73it/s]
 13%|        | 10/79 [00:01<00:28,  2.40it/s]
 16%|        | 13/79 [00:01<00:20,  3.30it/s]
 20%|        | 16/79 [00:01<00:14,  4.46it/s]
 24%|       | 19/79 [00:01<00:10,  5.94it/s]
 28%|       | 22/79 [00:01<00:07,  7.67it/s]
 32%|      | 25/79 [00:02<00:05,  9.69it/s]
 35%|      | 28/79 [00:02<00:04, 11.87it/s]
 39%|      | 31/79 [00:02<00:03, 14.15it/s]
 43%|     | 34/79 [00:02<00:02, 16.38it/s]
 47%|     | 37/79 [00:02<00:02, 18.19it/s]
 51%|     | 40/79 [00:02<00:01, 19.98it/s]
 54%|    | 43/79 [00:02<00:01, 21.42it/s]
 58%|    | 46/79 [00:02<00:01, 22.33it/s]
 62%|   | 49/79 [00:03<00:01, 23.02it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:34,  1.22s/it]
  5%|         | 4/79 [00:01<01:04,  1.16it/s]
  9%|         | 7/79 [00:01<00:44,  1.62it/s]
 13%|        | 10/79 [00:01<00:30,  2.26it/s]
 16%|        | 13/79 [00:01<00:21,  3.11it/s]
 20%|        | 16/79 [00:01<00:14,  4.21it/s]
 24%|       | 19/79 [00:01<00:10,  5.63it/s]
 28%|       | 22/79 [00:02<00:07,  7.37it/s]
 32%|      | 25/79 [00:02<00:05,  9.36it/s]
 35%|      | 28/79 [00:02<00:04, 11.59it/s]
 39%|      | 31/79 [00:02<00:03, 13.89it/s]
 43%|     | 34/79 [00:02<00:02, 16.08it/s]
 47%|     | 37/79 [00:02<00:02, 18.11it/s]
 51%|     | 40/79 [00:02<00:01, 20.07it/s]
 54%|    | 43/79 [00:02<00:01, 21.61it/s]
 58%|    | 46/79 [00:02<00:01, 22.50it/s]
 62%|   | 49/79 [00:03<00:01, 23.54it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:34,  1.21s/it]
  3%|         | 2/79 [00:01<01:08,  1.12it/s]
  6%|         | 5/79 [00:01<00:46,  1.58it/s]
 10%|         | 8/79 [00:01<00:32,  2.19it/s]
 14%|        | 11/79 [00:01<00:22,  3.02it/s]
 18%|        | 14/79 [00:01<00:15,  4.11it/s]
 22%|       | 17/79 [00:01<00:11,  5.50it/s]
 25%|       | 20/79 [00:02<00:08,  7.22it/s]
 29%|       | 23/79 [00:02<00:06,  9.25it/s]
 33%|      | 26/79 [00:02<00:04, 11.52it/s]
 37%|      | 29/79 [00:02<00:03, 13.87it/s]
 41%|      | 32/79 [00:02<00:02, 16.16it/s]
 44%|     | 35/79 [00:02<00:02, 18.35it/s]
 48%|     | 38/79 [00:02<00:02, 20.19it/s]
 52%|    | 41/79 [00:02<00:01, 21.62it/s]
 56%|    | 44/79 [00:02<00:01, 22.93it/s]
 59%|    | 47/79 [00:03<00:01, 24.08it/s]
 63%|   | 50/79 [00:03<00:01, 24.65it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:25,  1.10s/it]
  4%|         | 3/79 [00:01<01:01,  1.24it/s]
  8%|         | 6/79 [00:01<00:42,  1.73it/s]
 11%|        | 9/79 [00:01<00:29,  2.41it/s]
 15%|        | 12/79 [00:01<00:20,  3.30it/s]
 19%|        | 15/79 [00:01<00:14,  4.48it/s]
 23%|       | 18/79 [00:01<00:10,  5.95it/s]
 27%|       | 21/79 [00:02<00:07,  7.73it/s]
 30%|       | 24/79 [00:02<00:05,  9.80it/s]
 34%|      | 27/79 [00:02<00:04, 12.10it/s]
 38%|      | 30/79 [00:02<00:03, 14.36it/s]
 42%|     | 33/79 [00:02<00:02, 16.58it/s]
 46%|     | 36/79 [00:02<00:02, 18.62it/s]
 49%|     | 39/79 [00:02<00:01, 20.24it/s]
 53%|    | 42/79 [00:02<00:01, 21.64it/s]
 57%|    | 45/79 [00:02<00:01, 22.72it/s]
 61%|    | 48/79 [00:03<00:01, 23.74it/s]
 65%|   | 51/79 [00:03<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:26,  1.10s/it]
  3%|         | 2/79 [00:01<01:04,  1.19it/s]
  6%|         | 5/79 [00:01<00:44,  1.66it/s]
 10%|         | 8/79 [00:01<00:30,  2.31it/s]
 14%|        | 11/79 [00:01<00:21,  3.18it/s]
 18%|        | 14/79 [00:01<00:15,  4.32it/s]
 22%|       | 17/79 [00:01<00:10,  5.75it/s]
 25%|       | 20/79 [00:02<00:07,  7.51it/s]
 29%|       | 23/79 [00:02<00:05,  9.53it/s]
 33%|      | 26/79 [00:02<00:04, 11.82it/s]
 37%|      | 29/79 [00:02<00:03, 14.06it/s]
 41%|      | 32/79 [00:02<00:02, 16.30it/s]
 44%|     | 35/79 [00:02<00:02, 18.32it/s]
 48%|     | 38/79 [00:02<00:02, 19.97it/s]
 52%|    | 41/79 [00:02<00:01, 21.55it/s]
 56%|    | 44/79 [00:02<00:01, 22.50it/s]
 59%|    | 47/79 [00:03<00:01, 23.43it/s]
 63%|   | 50/79 [00:03<00:01, 24.00it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:20,  1.04s/it]
  4%|         | 3/79 [00:01<00:58,  1.30it/s]
  8%|         | 6/79 [00:01<00:40,  1.82it/s]
 11%|        | 9/79 [00:01<00:27,  2.51it/s]
 15%|        | 12/79 [00:01<00:19,  3.44it/s]
 19%|        | 15/79 [00:01<00:13,  4.65it/s]
 23%|       | 18/79 [00:01<00:09,  6.16it/s]
 27%|       | 21/79 [00:02<00:07,  7.99it/s]
 30%|       | 24/79 [00:02<00:05, 10.03it/s]
 34%|      | 27/79 [00:02<00:04, 12.28it/s]
 38%|      | 30/79 [00:02<00:03, 14.58it/s]
 42%|     | 33/79 [00:02<00:02, 16.60it/s]
 46%|     | 36/79 [00:02<00:02, 18.60it/s]
 49%|     | 39/79 [00:02<00:01, 20.13it/s]
 53%|    | 42/79 [00:02<00:01, 21.27it/s]
 57%|    | 45/79 [00:02<00:01, 22.33it/s]
 61%|    | 48/79 [00:03<00:01, 23.01it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:40,  1.29s/it]
  5%|         | 4/79 [00:01<01:08,  1.10it/s]
  9%|         | 7/79 [00:01<00:46,  1.54it/s]
 13%|        | 10/79 [00:01<00:32,  2.14it/s]
 16%|        | 13/79 [00:01<00:22,  2.96it/s]
 20%|        | 16/79 [00:01<00:15,  4.03it/s]
 24%|       | 19/79 [00:01<00:11,  5.40it/s]
 28%|       | 22/79 [00:02<00:08,  7.09it/s]
 32%|      | 25/79 [00:02<00:05,  9.07it/s]
 35%|      | 28/79 [00:02<00:04, 11.30it/s]
 39%|      | 31/79 [00:02<00:03, 13.62it/s]
 43%|     | 34/79 [00:02<00:02, 15.89it/s]
 47%|     | 37/79 [00:02<00:02, 17.99it/s]
 51%|     | 40/79 [00:02<00:01, 19.97it/s]
 54%|    | 43/79 [00:02<00:01, 21.59it/s]
 58%|    | 46/79 [00:03<00:01, 22.70it/s]
 62%|   | 49/79 [00:03<00:01, 23.84it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:35,  1.23s/it]
  5%|         | 4/79 [00:01<01:05,  1.15it/s]
  9%|         | 7/79 [00:01<00:44,  1.61it/s]
 13%|        | 10/79 [00:01<00:30,  2.24it/s]
 16%|        | 13/79 [00:01<00:21,  3.08it/s]
 20%|        | 16/79 [00:01<00:15,  4.19it/s]
 24%|       | 19/79 [00:01<00:10,  5.58it/s]
 28%|       | 22/79 [00:02<00:07,  7.28it/s]
 32%|      | 25/79 [00:02<00:05,  9.29it/s]
 35%|      | 28/79 [00:02<00:04, 11.46it/s]
 39%|      | 31/79 [00:02<00:03, 13.75it/s]
 43%|     | 34/79 [00:02<00:02, 16.02it/s]
 47%|     | 37/79 [00:02<00:02, 18.15it/s]
 51%|     | 40/79 [00:02<00:01, 19.79it/s]
 54%|    | 43/79 [00:02<00:01, 21.17it/s]
 58%|    | 46/79 [00:02<00:01, 22.37it/s]
 62%|   | 49/79 [00:03<00:01, 23.29it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:32,  1.19s/it]
  4%|         | 3/79 [00:01<01:05,  1.16it/s]
  8%|         | 6/79 [00:01<00:44,  1.63it/s]
 11%|        | 9/79 [00:01<00:30,  2.26it/s]
 15%|        | 12/79 [00:01<00:21,  3.11it/s]
 19%|        | 15/79 [00:01<00:15,  4.23it/s]
 23%|       | 18/79 [00:01<00:10,  5.63it/s]
 27%|       | 21/79 [00:02<00:07,  7.37it/s]
 30%|       | 24/79 [00:02<00:05,  9.37it/s]
 34%|      | 27/79 [00:02<00:04, 11.64it/s]
 38%|      | 30/79 [00:02<00:03, 13.99it/s]
 42%|     | 33/79 [00:02<00:02, 16.22it/s]
 46%|     | 36/79 [00:02<00:02, 18.36it/s]
 49%|     | 39/79 [00:02<00:01, 20.13it/s]
 53%|    | 42/79 [00:02<00:01, 21.55it/s]
 57%|    | 45/79 [00:03<00:01, 22.36it/s]
 61%|    | 48/79 [00:03<00:01, 23.24it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:41,  1.31s/it]
  5%|         | 4/79 [00:01<01:09,  1.08it/s]
  9%|         | 7/79 [00:01<00:47,  1.52it/s]
 13%|        | 10/79 [00:01<00:32,  2.11it/s]
 16%|        | 13/79 [00:01<00:22,  2.92it/s]
 20%|        | 16/79 [00:01<00:15,  3.97it/s]
 24%|       | 19/79 [00:02<00:11,  5.33it/s]
 28%|       | 22/79 [00:02<00:08,  7.01it/s]
 32%|      | 25/79 [00:02<00:06,  8.99it/s]
 35%|      | 28/79 [00:02<00:04, 11.17it/s]
 39%|      | 31/79 [00:02<00:03, 13.55it/s]
 43%|     | 34/79 [00:02<00:02, 15.82it/s]
 47%|     | 37/79 [00:02<00:02, 17.99it/s]
 51%|     | 40/79 [00:02<00:01, 19.72it/s]
 54%|    | 43/79 [00:02<00:01, 21.24it/s]
 58%|    | 46/79 [00:03<00:01, 22.58it/s]
 62%|   | 49/79 [00:03<00:01, 23.68it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:34,  1.21s/it]
  4%|         | 3/79 [00:01<01:05,  1.16it/s]
  8%|         | 6/79 [00:01<00:45,  1.62it/s]
 11%|        | 9/79 [00:01<00:31,  2.25it/s]
 15%|        | 12/79 [00:01<00:21,  3.10it/s]
 19%|        | 15/79 [00:01<00:15,  4.20it/s]
 23%|       | 18/79 [00:01<00:10,  5.60it/s]
 27%|       | 21/79 [00:02<00:07,  7.27it/s]
 30%|       | 24/79 [00:02<00:05,  9.25it/s]
 34%|      | 27/79 [00:02<00:04, 11.43it/s]
 38%|      | 30/79 [00:02<00:03, 13.68it/s]
 42%|     | 33/79 [00:02<00:02, 15.87it/s]
 46%|     | 36/79 [00:02<00:02, 17.87it/s]
 49%|     | 39/79 [00:02<00:02, 19.45it/s]
 53%|    | 42/79 [00:02<00:01, 20.73it/s]
 57%|    | 45/79 [00:03<00:01, 21.75it/s]
 61%|    | 48/79 [00:03<00:01, 22.48it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:29,  1.14s/it]
  3%|         | 2/79 [00:01<01:06,  1.17it/s]
  6%|         | 5/79 [00:01<00:45,  1.63it/s]
 10%|         | 8/79 [00:01<00:31,  2.27it/s]
 14%|        | 11/79 [00:01<00:21,  3.12it/s]
 18%|        | 14/79 [00:01<00:15,  4.24it/s]
 22%|       | 17/79 [00:01<00:10,  5.64it/s]
 25%|       | 20/79 [00:02<00:08,  7.36it/s]
 29%|       | 23/79 [00:02<00:05,  9.34it/s]
 33%|      | 26/79 [00:02<00:04, 11.57it/s]
 37%|      | 29/79 [00:02<00:03, 13.90it/s]
 41%|      | 32/79 [00:02<00:02, 15.95it/s]
 44%|     | 35/79 [00:02<00:02, 18.00it/s]
 48%|     | 38/79 [00:02<00:02, 19.56it/s]
 52%|    | 41/79 [00:02<00:01, 21.09it/s]
 56%|    | 44/79 [00:02<00:01, 22.05it/s]
 59%|    | 47/79 [00:03<00:01, 22.72it/s]
 63%|   | 50/79 [00:03<00:01, 23.55it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:35,  1.22s/it]
  5%|         | 4/79 [00:01<01:05,  1.15it/s]
  9%|         | 7/79 [00:01<00:44,  1.61it/s]
 13%|        | 10/79 [00:01<00:30,  2.24it/s]
 16%|        | 13/79 [00:01<00:21,  3.09it/s]
 20%|        | 16/79 [00:01<00:15,  4.19it/s]
 24%|       | 19/79 [00:01<00:10,  5.58it/s]
 28%|       | 22/79 [00:02<00:07,  7.29it/s]
 32%|      | 25/79 [00:02<00:05,  9.28it/s]
 35%|      | 28/79 [00:02<00:04, 11.44it/s]
 39%|      | 31/79 [00:02<00:03, 13.67it/s]
 43%|     | 34/79 [00:02<00:02, 15.80it/s]
 47%|     | 37/79 [00:02<00:02, 17.86it/s]
 51%|     | 40/79 [00:02<00:02, 19.49it/s]
 54%|    | 43/79 [00:02<00:01, 20.55it/s]
 58%|    | 46/79 [00:03<00:01, 21.69it/s]
 62%|   | 49/79 [00:03<00:01, 22.72it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:34,  1.21s/it]
  4%|         | 3/79 [00:01<01:05,  1.15it/s]
  6%|         | 5/79 [00:01<00:46,  1.60it/s]
 10%|         | 8/79 [00:01<00:32,  2.22it/s]
 14%|        | 11/79 [00:01<00:22,  3.05it/s]
 18%|        | 14/79 [00:01<00:15,  4.14it/s]
 22%|       | 17/79 [00:01<00:11,  5.53it/s]
 25%|       | 20/79 [00:02<00:08,  7.23it/s]
 29%|       | 23/79 [00:02<00:06,  9.14it/s]
 33%|      | 26/79 [00:02<00:04, 11.24it/s]
 37%|      | 29/79 [00:02<00:03, 13.54it/s]
 41%|      | 32/79 [00:02<00:03, 15.57it/s]
 44%|     | 35/79 [00:02<00:02, 17.49it/s]
 48%|     | 38/79 [00:02<00:02, 19.01it/s]
 52%|    | 41/79 [00:02<00:01, 20.63it/s]
 56%|    | 44/79 [00:03<00:01, 21.30it/s]
 59%|    | 47/79 [00:03<00:01, 22.33it/s]
 63%|   | 50/79 [00:03<00:01, 23.04it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  3%|         | 2/79 [00:01<01:02,  1.24it/s]
  6%|         | 5/79 [00:01<00:42,  1.73it/s]
 10%|         | 8/79 [00:01<00:29,  2.40it/s]
 14%|        | 11/79 [00:01<00:20,  3.29it/s]
 18%|        | 14/79 [00:01<00:14,  4.46it/s]
 22%|       | 17/79 [00:01<00:10,  5.92it/s]
 25%|       | 20/79 [00:02<00:07,  7.67it/s]
 29%|       | 23/79 [00:02<00:05,  9.67it/s]
 33%|      | 26/79 [00:02<00:04, 11.83it/s]
 37%|      | 29/79 [00:02<00:03, 14.02it/s]
 41%|      | 32/79 [00:02<00:02, 16.12it/s]
 44%|     | 35/79 [00:02<00:02, 18.09it/s]
 48%|     | 38/79 [00:02<00:02, 19.79it/s]
 52%|    | 41/79 [00:02<00:01, 21.17it/s]
 56%|    | 44/79 [00:03<00:01, 22.16it/s]
 59%|    | 47/79 [00:03<00:01, 23.01it/s]
 63%|   | 50/79 [00:03<00:01, 23.61it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:41,  1.31s/it]
  5%|         | 4/79 [00:01<01:09,  1.08it/s]
  9%|         | 7/79 [00:01<00:47,  1.51it/s]
 13%|        | 10/79 [00:01<00:32,  2.11it/s]
 16%|        | 13/79 [00:01<00:22,  2.91it/s]
 20%|        | 16/79 [00:01<00:15,  3.97it/s]
 24%|       | 19/79 [00:02<00:11,  5.31it/s]
 28%|       | 22/79 [00:02<00:08,  6.97it/s]
 32%|      | 25/79 [00:02<00:06,  8.89it/s]
 35%|      | 28/79 [00:02<00:04, 11.09it/s]
 39%|      | 31/79 [00:02<00:03, 13.38it/s]
 43%|     | 34/79 [00:02<00:02, 15.67it/s]
 47%|     | 37/79 [00:02<00:02, 17.64it/s]
 51%|     | 40/79 [00:02<00:01, 19.53it/s]
 54%|    | 43/79 [00:02<00:01, 21.05it/s]
 58%|    | 46/79 [00:03<00:01, 22.27it/s]
 62%|   | 49/79 [00:03<00:01, 23.27it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:40,  1.29s/it]
  5%|         | 4/79 [00:01<01:08,  1.09it/s]
  9%|         | 7/79 [00:01<00:47,  1.53it/s]
 13%|        | 10/79 [00:01<00:32,  2.13it/s]
 16%|        | 13/79 [00:01<00:22,  2.94it/s]
 20%|        | 16/79 [00:01<00:15,  4.00it/s]
 24%|       | 19/79 [00:02<00:11,  5.34it/s]
 28%|       | 22/79 [00:02<00:08,  7.02it/s]
 32%|      | 25/79 [00:02<00:06,  8.95it/s]
 35%|      | 28/79 [00:02<00:04, 11.17it/s]
 39%|      | 31/79 [00:02<00:03, 13.46it/s]
 43%|     | 34/79 [00:02<00:02, 15.73it/s]
 47%|     | 37/79 [00:02<00:02, 17.66it/s]
 51%|     | 40/79 [00:02<00:02, 19.34it/s]
 54%|    | 43/79 [00:02<00:01, 20.87it/s]
 58%|    | 46/79 [00:03<00:01, 22.05it/s]
 62%|   | 49/79 [00:03<00:01, 23.19it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:42,  1.31s/it]
  5%|         | 4/79 [00:01<01:10,  1.07it/s]
  9%|         | 7/79 [00:01<00:47,  1.50it/s]
 13%|        | 10/79 [00:01<00:32,  2.09it/s]
 16%|        | 13/79 [00:01<00:22,  2.89it/s]
 20%|        | 16/79 [00:01<00:15,  3.95it/s]
 24%|       | 19/79 [00:02<00:11,  5.29it/s]
 28%|       | 22/79 [00:02<00:08,  6.92it/s]
 32%|      | 25/79 [00:02<00:06,  8.87it/s]
 35%|      | 28/79 [00:02<00:04, 11.03it/s]
 39%|      | 31/79 [00:02<00:03, 13.11it/s]
 43%|     | 34/79 [00:02<00:02, 15.31it/s]
 47%|     | 37/79 [00:02<00:02, 17.28it/s]
 51%|     | 40/79 [00:02<00:02, 19.04it/s]
 54%|    | 43/79 [00:02<00:01, 20.26it/s]
 58%|    | 46/79 [00:03<00:01, 21.59it/s]
 62%|   | 49/79 [00:03<00:01, 22.51it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:33,  1.20s/it]
  5%|         | 4/79 [00:01<01:04,  1.17it/s]
  9%|         | 7/79 [00:01<00:44,  1.63it/s]
 13%|        | 10/79 [00:01<00:30,  2.27it/s]
 16%|        | 13/79 [00:01<00:21,  3.12it/s]
 20%|        | 16/79 [00:01<00:14,  4.22it/s]
 24%|       | 19/79 [00:02<00:10,  5.61it/s]
 28%|       | 22/79 [00:02<00:07,  7.31it/s]
 32%|      | 25/79 [00:02<00:05,  9.27it/s]
 35%|      | 28/79 [00:02<00:04, 11.42it/s]
 39%|      | 31/79 [00:02<00:03, 13.66it/s]
 43%|     | 34/79 [00:02<00:02, 15.66it/s]
 47%|     | 37/79 [00:02<00:02, 17.55it/s]
 51%|     | 40/79 [00:02<00:02, 19.18it/s]
 54%|    | 43/79 [00:02<00:01, 20.62it/s]
 58%|    | 46/79 [00:03<00:01, 21.58it/s]
 62%|   | 49/79 [00:03<00:01, 22.55it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:39,  1.27s/it]
  3%|         | 2/79 [00:01<01:11,  1.07it/s]
  6%|         | 5/79 [00:01<00:49,  1.51it/s]
 10%|         | 8/79 [00:01<00:33,  2.10it/s]
 14%|        | 11/79 [00:01<00:23,  2.89it/s]
 18%|        | 14/79 [00:01<00:16,  3.93it/s]
 22%|       | 17/79 [00:02<00:11,  5.24it/s]
 25%|       | 20/79 [00:02<00:08,  6.86it/s]
 29%|       | 23/79 [00:02<00:06,  8.75it/s]
 33%|      | 26/79 [00:02<00:04, 10.87it/s]
 37%|      | 29/79 [00:02<00:03, 13.01it/s]
 41%|      | 32/79 [00:02<00:03, 15.18it/s]
 44%|     | 35/79 [00:02<00:02, 17.19it/s]
 48%|     | 38/79 [00:02<00:02, 18.76it/s]
 52%|    | 41/79 [00:03<00:01, 20.20it/s]
 56%|    | 44/79 [00:03<00:01, 21.19it/s]
 59%|    | 47/79 [00:03<00:01, 22.18it/s]
 63%|   | 50/79 [00:03<00:01, 22.71it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:41,  1.30s/it]
  5%|         | 4/79 [00:01<01:09,  1.09it/s]
  9%|         | 7/79 [00:01<00:47,  1.52it/s]
 13%|        | 10/79 [00:01<00:32,  2.12it/s]
 16%|        | 13/79 [00:01<00:22,  2.92it/s]
 20%|        | 16/79 [00:01<00:15,  3.98it/s]
 24%|       | 19/79 [00:02<00:11,  5.33it/s]
 28%|       | 22/79 [00:02<00:08,  6.98it/s]
 32%|      | 25/79 [00:02<00:06,  8.90it/s]
 35%|      | 28/79 [00:02<00:04, 11.05it/s]
 39%|      | 31/79 [00:02<00:03, 13.24it/s]
 43%|     | 34/79 [00:02<00:02, 15.35it/s]
 47%|     | 37/79 [00:02<00:02, 17.35it/s]
 51%|     | 40/79 [00:02<00:02, 18.88it/s]
 54%|    | 43/79 [00:02<00:01, 20.46it/s]
 58%|    | 46/79 [00:03<00:01, 21.03it/s]
 62%|   | 49/79 [00:03<00:01, 21.86it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:55,  1.48s/it]
  5%|         | 4/79 [00:01<01:18,  1.05s/it]
  9%|         | 7/79 [00:01<00:53,  1.34it/s]
 13%|        | 10/79 [00:01<00:36,  1.87it/s]
 16%|        | 13/79 [00:01<00:25,  2.59it/s]
 20%|        | 16/79 [00:02<00:17,  3.55it/s]
 24%|       | 19/79 [00:02<00:12,  4.78it/s]
 28%|       | 22/79 [00:02<00:08,  6.34it/s]
 32%|      | 25/79 [00:02<00:06,  8.21it/s]
 35%|      | 28/79 [00:02<00:04, 10.34it/s]
 39%|      | 31/79 [00:02<00:03, 12.64it/s]
 43%|     | 34/79 [00:02<00:03, 14.88it/s]
 47%|     | 37/79 [00:02<00:02, 17.06it/s]
 51%|     | 40/79 [00:02<00:02, 18.97it/s]
 54%|    | 43/79 [00:03<00:01, 20.68it/s]
 58%|    | 46/79 [00:03<00:01, 21.84it/s]
 62%|   | 49/79 [00:03<00:01, 22.85it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:56,  1.49s/it]
  5%|         | 4/79 [00:01<01:19,  1.06s/it]
  9%|         | 7/79 [00:01<00:54,  1.33it/s]
 13%|        | 10/79 [00:01<00:37,  1.86it/s]
 16%|        | 13/79 [00:01<00:25,  2.57it/s]
 20%|        | 16/79 [00:02<00:17,  3.51it/s]
 24%|       | 19/79 [00:02<00:12,  4.74it/s]
 28%|       | 22/79 [00:02<00:09,  6.25it/s]
 32%|      | 25/79 [00:02<00:06,  8.07it/s]
 35%|      | 28/79 [00:02<00:05, 10.11it/s]
 39%|      | 31/79 [00:02<00:03, 12.36it/s]
 43%|     | 34/79 [00:02<00:03, 14.54it/s]
 47%|     | 37/79 [00:02<00:02, 16.69it/s]
 51%|     | 40/79 [00:03<00:02, 18.56it/s]
 54%|    | 43/79 [00:03<00:01, 20.07it/s]
 58%|    | 46/79 [00:03<00:01, 21.14it/s]
 62%|   | 49/79 [00:03<00:01, 21.86it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:04,  1.60s/it]
  5%|         | 4/79 [00:01<01:25,  1.13s/it]
  9%|         | 7/79 [00:01<00:58,  1.24it/s]
 13%|        | 10/79 [00:01<00:39,  1.74it/s]
 16%|        | 13/79 [00:02<00:27,  2.41it/s]
 20%|        | 16/79 [00:02<00:19,  3.30it/s]
 24%|       | 19/79 [00:02<00:13,  4.47it/s]
 28%|       | 22/79 [00:02<00:09,  5.93it/s]
 32%|      | 25/79 [00:02<00:07,  7.70it/s]
 35%|      | 28/79 [00:02<00:05,  9.70it/s]
 39%|      | 31/79 [00:02<00:04, 11.88it/s]
 43%|     | 34/79 [00:02<00:03, 14.07it/s]
 47%|     | 37/79 [00:03<00:02, 16.17it/s]
 51%|     | 40/79 [00:03<00:02, 18.05it/s]
 54%|    | 43/79 [00:03<00:01, 19.72it/s]
 58%|    | 46/79 [00:03<00:01, 21.16it/s]
 62%|   | 49/79 [00:03<00:01, 22.13it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:22,  1.06s/it]
  4%|         | 3/79 [00:01<01:03,  1.20it/s]
  8%|         | 6/79 [00:01<00:43,  1.67it/s]
 11%|        | 9/79 [00:01<00:30,  2.32it/s]
 15%|        | 12/79 [00:02<00:20,  3.19it/s]
 19%|        | 15/79 [00:02<00:14,  4.33it/s]
 23%|       | 18/79 [00:02<00:10,  5.76it/s]
 27%|       | 21/79 [00:02<00:07,  7.50it/s]
 30%|       | 24/79 [00:02<00:05,  9.50it/s]
 34%|      | 27/79 [00:02<00:04, 11.68it/s]
 38%|      | 30/79 [00:02<00:03, 13.86it/s]
 42%|     | 33/79 [00:02<00:02, 15.74it/s]
 46%|     | 36/79 [00:03<00:02, 17.57it/s]
 49%|     | 39/79 [00:03<00:02, 19.19it/s]
 53%|    | 42/79 [00:03<00:01, 20.49it/s]
 57%|    | 45/79 [00:03<00:01, 21.66it/s]
 61%|    | 48/79 [00:03<00:01, 22.57it/s]
 65%|   | 51/79 [00:03<00:01, 22., 24.45it/s]
 70%|   | 55/79 [00:03<00:00, 24.80it/s]
 73%|  | 58/79 [00:03<00:00, 25.18it/s]
 77%|  | 61/79 [00:03<00:00, 25.66it/s]
 81%|  | 64/79 [00:03<00:00, 25.57it/s]
 85%| | 67/79 [00:03<00:00, 25.45it/s]
 89%| | 70/79 [00:03<00:00, 25.63it/s]
 92%|| 73/79 [00:03<00:00, 25.64it/s]
 96%|| 76/79 [00:03<00:00, 26.40it/s]
100%|| 79/79 [00:04<00:00, 27.28it/s]
60it/s]
 68%|   | 54/79 [00:03<00:00, 25.32it/s]
 72%|  | 57/79 [00:03<00:00, 25.54it/s]
 76%|  | 60/79 [00:03<00:00, 25.78it/s]
 80%|  | 63/79 [00:03<00:00, 25.87it/s]
 84%| | 66/79 [00:03<00:00, 26.07it/s]
 87%| | 69/79 [00:03<00:00, 26.15it/s]
 91%| | 72/79 [00:03<00:00, 26.32it/s]
 95%|| 75/79 [00:03<00:00, 26.89it/s]
 99%|| 78/79 [00:04<00:00, 27.72it/s]
100%|| 79/79 [00:04<00:00, 18.99it/s]
43it/s]
 68%|   | 54/79 [00:03<00:00, 25.25it/s]
 72%|  | 57/79 [00:03<00:00, 25.42it/s]
 76%|  | 60/79 [00:03<00:00, 25.47it/s]
 80%|  | 63/79 [00:03<00:00, 25.50it/s]
 84%| | 66/79 [00:03<00:00, 25.45it/s]
 87%| | 69/79 [00:03<00:00, 25.20it/s]
 91%| | 72/79 [00:03<00:00, 25.54it/s]
 95%|| 75/79 [00:03<00:00, 26.39it/s]
 99%|| 78/79 [00:04<00:00, 26.75it/s]
100%|| 79/79 [00:04<00:00, 18.96it/s]
, 24.75it/s]
 70%|   | 55/79 [00:03<00:00, 25.32it/s]
 73%|  | 58/79 [00:03<00:00, 25.60it/s]
 77%|  | 61/79 [00:03<00:00, 25.77it/s]
 81%|  | 64/79 [00:03<00:00, 25.85it/s]
 85%| | 67/79 [00:03<00:00, 25.92it/s]
 89%| | 70/79 [00:03<00:00, 25.36it/s]
 92%|| 73/79 [00:03<00:00, 25.70it/s]
 96%|| 76/79 [00:03<00:00, 26.13it/s]
100%|| 79/79 [00:04<00:00, 27.12it/s]
41it/s]
 68%|   | 54/79 [00:03<00:01, 24.67it/s]
 72%|  | 57/79 [00:03<00:00, 25.15it/s]
 76%|  | 60/79 [00:03<00:00, 25.24it/s]
 80%|  | 63/79 [00:03<00:00, 24.85it/s]
 84%| | 66/79 [00:03<00:00, 25.14it/s]
 87%| | 69/79 [00:03<00:00, 25.39it/s]
 91%| | 72/79 [00:03<00:00, 25.38it/s]
 95%|| 75/79 [00:04<00:00, 26.21it/s]
 99%|| 78/79 [00:04<00:00, 26.75it/s]
100%|| 79/79 [00:04<00:00, 18.78it/s]
, 24.41it/s]
 70%|   | 55/79 [00:03<00:00, 24.80it/s]
 73%|  | 58/79 [00:03<00:00, 25.06it/s]
 77%|  | 61/79 [00:03<00:00, 25.43it/s]
 81%|  | 64/79 [00:03<00:00, 25.48it/s]
 85%| | 67/79 [00:03<00:00, 25.94it/s]
 89%| | 70/79 [00:03<00:00, 26.07it/s]
 92%|| 73/79 [00:03<00:00, 26.40it/s]
 96%|| 76/79 [00:04<00:00, 26.98it/s]
100%|| 79/79 [00:04<00:00, 27.75it/s]
48it/s]
 68%|   | 54/79 [00:03<00:01, 24.90it/s]
 72%|  | 57/79 [00:03<00:00, 25.26it/s]
 76%|  | 60/79 [00:03<00:00, 25.67it/s]
 80%|  | 63/79 [00:03<00:00, 25.57it/s]
 84%| | 66/79 [00:03<00:00, 25.61it/s]
 87%| | 69/79 [00:03<00:00, 25.46it/s]
 91%| | 72/79 [00:03<00:00, 25.97it/s]
 95%|| 75/79 [00:04<00:00, 26.48it/s]
 99%|| 78/79 [00:04<00:00, 27.01it/s]
100%|| 79/79 [00:04<00:00, 18.54it/s]
, 24.39it/s]
 70%|   | 55/79 [00:03<00:00, 25.06it/s]
 73%|  | 58/79 [00:03<00:00, 25.06it/s]
 77%|  | 61/79 [00:03<00:00, 25.30it/s]
 81%|  | 64/79 [00:03<00:00, 25.44it/s]
 85%| | 67/79 [00:03<00:00, 25.59it/s]
 89%| | 70/79 [00:03<00:00, 25.46it/s]
 92%|| 73/79 [00:04<00:00, 25.77it/s]
 96%|| 76/79 [00:04<00:00, 26.49it/s]
100%|| 79/79 [00:04<00:00, 27.28it/s]
, 23.89it/s]
 70%|   | 55/79 [00:03<00:00, 24.11it/s]
 73%|  | 58/79 [00:03<00:00, 24.27it/s]
 77%|  | 61/79 [00:03<00:00, 24.41it/s]
 81%|  | 64/79 [00:03<00:00, 23.96it/s]
 85%| | 67/79 [00:03<00:00, 24.21it/s]
 89%| | 70/79 [00:03<00:00, 24.27it/s]
 92%|| 73/79 [00:04<00:00, 24.88it/s]
 96%|| 76/79 [00:04<00:00, 25.79it/s]
100%|| 79/79 [00:04<00:00, 26.80it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 25.32it/s]
 71%|   | 56/79 [00:03<00:00, 25.54it/s]
 75%|  | 59/79 [00:03<00:00, 25.80it/s]
 78%|  | 62/79 [00:03<00:00, 26.15it/s]
 82%| | 65/79 [00:03<00:00, 26.20it/s]
 86%| | 68/79 [00:03<00:00, 26.46it/s]
 90%| | 71/79 [00:03<00:00, 26.45it/s]
 94%|| 74/79 [00:04<00:00, 26.95it/s]
 97%|| 77/79 [00:04<00:00, 27.32it/s]
100%|| 79/79 [00:04<00:00, 18.40it/s]
, 24.45it/s]
 70%|   | 55/79 [00:03<00:00, 25.05it/s]
 73%|  | 58/79 [00:03<00:00, 25.61it/s]
 77%|  | 61/79 [00:03<00:00, 25.62it/s]
 81%|  | 64/79 [00:03<00:00, 25.54it/s]
 85%| | 67/79 [00:03<00:00, 25.89it/s]
 89%| | 70/79 [00:03<00:00, 25.84it/s]
 92%|| 73/79 [00:04<00:00, 26.12it/s]
 96%|| 76/79 [00:04<00:00, 26.61it/s]
100%|| 79/79 [00:04<00:00, 27.29it/s]
47it/s]
 68%|   | 54/79 [00:03<00:00, 25.05it/s]
 72%|  | 57/79 [00:03<00:00, 24.92it/s]
 76%|  | 60/79 [00:03<00:00, 25.17it/s]
 80%|  | 63/79 [00:03<00:00, 25.05it/s]
 84%| | 66/79 [00:03<00:00, 24.79it/s]
 87%| | 69/79 [00:03<00:00, 24.93it/s]
 91%| | 72/79 [00:04<00:00, 24.85it/s]
 95%|| 75/79 [00:04<00:00, 25.75it/s]
 99%|| 78/79 [00:04<00:00, 26.31it/s]
100%|| 79/79 [00:04<00:00, 18.15it/s]
, 23.99it/s]
 70%|   | 55/79 [00:03<00:00, 24.88it/s]
 73%|  | 58/79 [00:03<00:00, 25.16it/s]
 77%|  | 61/79 [00:03<00:00, 25.73it/s]
 81%|  | 64/79 [00:03<00:00, 25.73it/s]
 85%| | 67/79 [00:03<00:00, 25.86it/s]
 89%| | 70/79 [00:03<00:00, 25.59it/s]
 92%|| 73/79 [00:04<00:00, 26.12it/s]
 96%|| 76/79 [00:04<00:00, 26.66it/s]
100%|| 79/79 [00:04<00:00, 27.45it/s]
, 23.55it/s]
 70%|   | 55/79 [00:03<00:01, 23.89it/s]
 73%|  | 58/79 [00:03<00:00, 24.32it/s]
 77%|  | 61/79 [00:03<00:00, 24.82it/s]
 81%|  | 64/79 [00:03<00:00, 25.05it/s]
 85%| | 67/79 [00:03<00:00, 25.27it/s]
 89%| | 70/79 [00:03<00:00, 25.27it/s]
 92%|| 73/79 [00:04<00:00, 25.54it/s]
 96%|| 76/79 [00:04<00:00, 26.61it/s]
100%|| 79/79 [00:04<00:00, 26.85it/s]
51it/s]
 68%|   | 54/79 [00:03<00:01, 23.87it/s]
 72%|  | 57/79 [00:03<00:00, 24.14it/s]
 76%|  | 60/79 [00:03<00:00, 24.22it/s]
 80%|  | 63/79 [00:03<00:00, 24.65it/s]
 84%| | 66/79 [00:03<00:00, 24.72it/s]
 87%| | 69/79 [00:03<00:00, 25.04it/s]
 91%| | 72/79 [00:04<00:00, 25.07it/s]
 95%|| 75/79 [00:04<00:00, 26.02it/s]
 99%|| 78/79 [00:04<00:00, 26.75it/s]
100%|| 79/79 [00:04<00:00, 18.04it/s]
, 23.50it/s]
 70%|   | 55/79 [00:03<00:01, 23.88it/s]
 73%|  | 58/79 [00:03<00:00, 24.35it/s]
 77%|  | 61/79 [00:03<00:00, 24.68it/s]
 81%|  | 64/79 [00:03<00:00, 24.83it/s]
 85%| | 67/79 [00:03<00:00, 24.92it/s]
 89%| | 70/79 [00:03<00:00, 25.09it/s]
 92%|| 73/79 [00:04<00:00, 25.57it/s]
 96%|| 76/79 [00:04<00:00, 26.72it/s]
100%|| 79/79 [00:04<00:00, 27.15it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 24.29it/s]
 71%|   | 56/79 [00:03<00:00, 24.83it/s]
 75%|  | 59/79 [00:03<00:00, 24.88it/s]
 78%|  | 62/79 [00:03<00:00, 24.99it/s]
 82%| | 65/79 [00:03<00:00, 25.21it/s]
 86%| | 68/79 [00:03<00:00, 25.18it/s]
 90%| | 71/79 [00:04<00:00, 25.20it/s]
 94%|| 74/79 [00:04<00:00, 25.98it/s]
 97%|| 77/79 [00:04<00:00, 26.60it/s]
100%|| 79/79 [00:04<00:00, 18.09it/s]
, 24.15it/s]
 70%|   | 55/79 [00:03<00:00, 24.40it/s]
 73%|  | 58/79 [00:03<00:00, 25.17it/s]
 77%|  | 61/79 [00:03<00:00, 25.51it/s]
 81%|  | 64/79 [00:03<00:00, 25.88it/s]
 85%| | 67/79 [00:03<00:00, 26.02it/s]
 89%| | 70/79 [00:03<00:00, 26.48it/s]
 92%|| 73/79 [00:04<00:00, 26.49it/s]
 96%|| 76/79 [00:04<00:00, 27.08it/s]
100%|| 79/79 [00:04<00:00, 27.82it/s]
86it/s]
 68%|   | 54/79 [00:03<00:01, 24.43it/s]
 72%|  | 57/79 [00:03<00:00, 24.66it/s]
 76%|  | 60/79 [00:03<00:00, 24.68it/s]
 80%|  | 63/79 [00:03<00:00, 25.06it/s]
 84%| | 66/79 [00:03<00:00, 24.99it/s]
 87%| | 69/79 [00:03<00:00, 24.86it/s]
 91%| | 72/79 [00:04<00:00, 25.26it/s]
 95%|| 75/79 [00:04<00:00, 26.18it/s]
 99%|| 78/79 [00:04<00:00, 26.85it/s]
100%|| 79/79 [00:04<00:00, 17.97it/s]
15it/s]
 68%|   | 54/79 [00:03<00:01, 23.50it/s]
 72%|  | 57/79 [00:03<00:00, 23.98it/s]
 76%|  | 60/79 [00:03<00:00, 23.99it/s]
 80%|  | 63/79 [00:03<00:00, 24.26it/s]
 84%| | 66/79 [00:03<00:00, 24.24it/s]
 87%| | 69/79 [00:03<00:00, 24.36it/s]
 91%| | 72/79 [00:04<00:00, 24.56it/s]
 95%|| 75/79 [00:04<00:00, 25.45it/s]
 99%|| 78/79 [00:04<00:00, 26.02it/s]
100%|| 79/79 [00:04<00:00, 17.84it/s]
, 23.95it/s]
 70%|   | 55/79 [00:03<00:00, 24.49it/s]
 73%|  | 58/79 [00:03<00:00, 24.72it/s]
 77%|  | 61/79 [00:03<00:00, 24.98it/s]
 81%|  | 64/79 [00:03<00:00, 25.10it/s]
 85%| | 67/79 [00:03<00:00, 25.27it/s]
 89%| | 70/79 [00:04<00:00, 25.40it/s]
 92%|| 73/79 [00:04<00:00, 25.74it/s]
 96%|| 76/79 [00:04<00:00, 26.24it/s]
100%|| 79/79 [00:04<00:00, 27.17it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 24.05it/s]
 71%|   | 56/79 [00:03<00:00, 24.52it/s]
 75%|  | 59/79 [00:03<00:00, 24.73it/s]
 78%|  | 62/79 [00:03<00:00, 25.04it/s]
 82%| | 65/79 [00:03<00:00, 25.20it/s]
 86%| | 68/79 [00:03<00:00, 25.27it/s]
 90%| | 71/79 [00:04<00:00, 25.11it/s]
 94%|| 74/79 [00:04<00:00, 25.93it/s]
 97%|| 77/79 [00:04<00:00, 26.58it/s]
100%|| 79/79 [00:04<00:00, 17.91it/s]
, 23.06it/s]
 70%|   | 55/79 [00:03<00:01, 23.57it/s]
 73%|  | 58/79 [00:03<00:00, 23.77it/s]
 77%|  | 61/79 [00:03<00:00, 24.33it/s]
 81%|  | 64/79 [00:03<00:00, 24.57it/s]
 85%| | 67/79 [00:03<00:00, 24.60it/s]
 89%| | 70/79 [00:04<00:00, 24.84it/s]
 92%|| 73/79 [00:04<00:00, 25.38it/s]
 96%|| 76/79 [00:04<00:00, 26.19it/s]
100%|| 79/79 [00:04<00:00, 27.18it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 24.04it/s]
 71%|   | 56/79 [00:03<00:00, 24.35it/s]
 75%|  | 59/79 [00:03<00:00, 24.66it/s]
 78%|  | 62/79 [00:03<00:00, 25.03it/s]
 82%| | 65/79 [00:03<00:00, 25.04it/s]
 86%| | 68/79 [00:03<00:00, 25.38it/s]
 90%| | 71/79 [00:04<00:00, 25.12it/s]
 94%|| 74/79 [00:04<00:00, 25.46it/s]
 97%|| 77/79 [00:04<00:00, 26.04it/s]
100%|| 79/79 [00:04<00:00, 17.67it/s]
, 23.06it/s]
 70%|   | 55/79 [00:03<00:01, 23.55it/s]
 73%|  | 58/79 [00:03<00:00, 23.75it/s]
 77%|  | 61/79 [00:03<00:00, 23.82it/s]
 81%|  | 64/79 [00:03<00:00, 24.05it/s]
 85%| | 67/79 [00:03<00:00, 24.11it/s]
 89%| | 70/79 [00:04<00:00, 24.32it/s]
 92%|| 73/79 [00:04<00:00, 24.81it/s]
 96%|| 76/79 [00:04<00:00, 25.53it/s]
100%|| 79/79 [00:04<00:00, 26.40it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 23.58it/s]
 71%|   | 56/79 [00:03<00:00, 23.69it/s]
 75%|  | 59/79 [00:03<00:00, 23.90it/s]
 78%|  | 62/79 [00:03<00:00, 24.18it/s]
 82%| | 65/79 [00:03<00:00, 24.28it/s]
 86%| | 68/79 [00:04<00:00, 24.42it/s]
 90%| | 71/79 [00:04<00:00, 24.16it/s]
 94%|| 74/79 [00:04<00:00, 24.97it/s]
 97%|| 77/79 [00:04<00:00, 25.60it/s]
100%|| 79/79 [00:04<00:00, 17.51it/s]
, 22.58it/s]
 70%|   | 55/79 [00:03<00:01, 23.16it/s]
 73%|  | 58/79 [00:03<00:00, 23.45it/s]
 77%|  | 61/79 [00:03<00:00, 23.81it/s]
 81%|  | 64/79 [00:03<00:00, 24.15it/s]
 85%| | 67/79 [00:03<00:00, 24.38it/s]
 89%| | 70/79 [00:04<00:00, 24.45it/s]
 92%|| 73/79 [00:04<00:00, 24.76it/s]
 96%|| 76/79 [00:04<00:00, 25.65it/s]
100%|| 79/79 [00:04<00:00, 26.33it/s]
, 23.59it/s]
 70%|   | 55/79 [00:03<00:01, 23.97it/s]
 73%|  | 58/79 [00:03<00:00, 24.61it/s]
 77%|  | 61/79 [00:03<00:00, 25.01it/s]
 81%|  | 64/79 [00:03<00:00, 25.21it/s]
 85%| | 67/79 [00:04<00:00, 25.58it/s]
 89%| | 70/79 [00:04<00:00, 25.47it/s]
 92%|| 73/79 [00:04<00:00, 25.92it/s]
 96%|| 76/79 [00:04<00:00, 26.58it/s]
100%|| 79/79 [00:04<00:00, 27.50it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 22.79it/s]
 71%|   | 56/79 [00:03<00:00, 23.48it/s]
 75%|  | 59/79 [00:03<00:00, 23.71it/s]
 78%|  | 62/79 [00:03<00:00, 23.90it/s]
 82%| | 65/79 [00:03<00:00, 24.12it/s]
 86%| | 68/79 [00:04<00:00, 24.15it/s]
 90%| | 71/79 [00:04<00:00, 24.27it/s]
 94%|| 74/79 [00:04<00:00, 24.74it/s]
 97%|| 77/79 [00:04<00:00, 25.70it/s]
100%|| 79/79 [00:04<00:00, 17.16it/s]
, 22.60it/s]
 70%|   | 55/79 [00:03<00:01, 23.05it/s]
 73%|  | 58/79 [00:03<00:00, 23.35it/s]
 77%|  | 61/79 [00:03<00:00, 23.58it/s]
 81%|  | 64/79 [00:04<00:00, 23.66it/s]
 85%| | 67/79 [00:04<00:00, 23.82it/s]
 89%| | 70/79 [00:04<00:00, 23.94it/s]
 92%|| 73/79 [00:04<00:00, 24.52it/s]
 96%|| 76/79 [00:04<00:00, 25.37it/s]
100%|| 79/79 [00:04<00:00, 26.31it/s]
, 23.08it/s]
 70%|   | 55/79 [00:03<00:01, 23.65it/s]
 73%|  | 58/79 [00:03<00:00, 24.19it/s]
 77%|  | 61/79 [00:04<00:00, 24.58it/s]
 81%|  | 64/79 [00:04<00:00, 24.77it/s]
 85%| | 67/79 [00:04<00:00, 25.11it/s]
 89%| | 70/79 [00:04<00:00, 25.13it/s]
 92%|| 73/79 [00:04<00:00, 25.00it/s]
 96%|| 76/79 [00:04<00:00, 25.70it/s]
100%|| 79/79 [00:04<00:00, 26.51it/s]
65it/s]
 68%|   | 54/79 [00:03<00:01, 23.16it/s]
 72%|  | 57/79 [00:03<00:00, 23.88it/s]
 76%|  | 60/79 [00:04<00:00, 24.30it/s]
 80%|  | 63/79 [00:04<00:00, 24.39it/s]
 84%| | 66/79 [00:04<00:00, 24.56it/s]
 87%| | 69/79 [00:04<00:00, 24.74it/s]
 91%| | 72/79 [00:04<00:00, 24.94it/s]
 95%|| 75/79 [00:04<00:00, 25.61it/s]
 99%|| 78/79 [00:04<00:00, 26.14it/s]
100%|| 79/79 [00:04<00:00, 16.41it/s]
2020-06-23 16:38:06,478 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.831643 (0.03092251739501953 s / img per device, on 32 devices)
2020-06-23 16:38:06,498 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:38:06,498 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:38:06,517 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592955493737, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 11, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592955493738, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 11}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:38:14,824 maskrcnn_benchmark.trainer INFO: eta: 1:05:02  iter: 9180  loss: 0.5538 (0.7617)  loss_classifier: 0.1956 (0.2806)  loss_box_reg: 0.0935 (0.1224)  loss_mask: 0.2500 (0.2993)  loss_objectness: 0.0143 (0.0383)  loss_rpn_box_reg: 0.0073 (0.0211)  time: 0.1077 (0.1266)  data: 0.0015 (0.0189)  lr: 0.016000  max mem: 5193
2020-06-23 16:38:17,010 maskrcnn_benchmark.trainer INFO: eta: 1:04:58  iter: 9200  loss: 0.5262 (0.7612)  loss_classifier: 0.1817 (0.2803)  loss_box_reg: 0.0855 (0.1224)  loss_mask: 0.2311 (0.2991)  loss_objectness: 0.0091 (0.0382)  loss_rpn_box_reg: 0.0062 (0.0211)  time: 0.1090 (0.1266)  data: 0.0015 (0.0189)  lr: 0.016000  max mem: 5193
2020-06-23 16:38:19,191 maskrcnn_benchmark.trainer INFO: eta: 1:04:54  iter: 9220  loss: 0.6035 (0.7608)  loss_classifier: 0.1918 (0.2802)  loss_box_reg: 0.0972 (0.1223)  loss_mask: 0.2738 (0.2991)  loss_objectness: 0.0160 (0.0382)  loss_rpn_box_reg: 0.0076 (0.0211)  time: 0.1087 (0.1265)  data: 0.0015 (0.0189)  lr: 0.016000  max mem: 5193
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.62s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:38:21,394 maskrcnn_benchmark.trainer INFO: eta: 1:04:51  iter: 9240  loss: 0.5805 (0.7604)  loss_classifier: 0.1893 (0.2800)  loss_box_reg: 0.0971 (0.1223)  loss_mask: 0.2493 (0.2990)  loss_objectness: 0.0150 (0.0381)  loss_rpn_box_reg: 0.0062 (0.0211)  time: 0.1100 (0.1265)  data: 0.0015 (0.0188)  lr: 0.016000  max mem: 5193
DONE (t=1.47s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35113
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.56096
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.38116
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19571
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.38115
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.45321
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29796
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.47378
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.49740
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.30224
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.53751
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62253
2020-06-23 16:38:23,570 maskrcnn_benchmark.trainer INFO: eta: 1:04:47  iter: 9260  loss: 0.4736 (0.7599)  loss_classifier: 0.1430 (0.2797)  loss_box_reg: 0.0583 (0.1222)  loss_mask: 0.2237 (0.2988)  loss_objectness: 0.0121 (0.0381)  loss_rpn_box_reg: 0.0054 (0.0211)  time: 0.1086 (0.1265)  data: 0.0015 (0.0188)  lr: 0.016000  max mem: 5193
2020-06-23 16:38:25,727 maskrcnn_benchmark.trainer INFO: eta: 1:04:43  iter: 9280  loss: 0.6088 (0.7596)  loss_classifier: 0.2109 (0.2796)  loss_box_reg: 0.1034 (0.1221)  loss_mask: 0.2738 (0.2987)  loss_objectness: 0.0156 (0.0381)  loss_rpn_box_reg: 0.0095 (0.0211)  time: 0.1068 (0.1264)  data: 0.0016 (0.0188)  lr: 0.016000  max mem: 5193
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:38:27,903 maskrcnn_benchmark.trainer INFO: eta: 1:04:39  iter: 9300  loss: 0.5700 (0.7592)  loss_classifier: 0.1977 (0.2794)  loss_box_reg: 0.0873 (0.1221)  loss_mask: 0.2523 (0.2986)  loss_objectness: 0.0133 (0.0380)  loss_rpn_box_reg: 0.0078 (0.0211)  time: 0.1088 (0.1264)  data: 0.0015 (0.0187)  lr: 0.016000  max mem: 5193
DONE (t=1.62s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:38:30,084 maskrcnn_benchmark.trainer INFO: eta: 1:04:36  iter: 9320  loss: 0.5744 (0.7588)  loss_classifier: 0.2012 (0.2792)  loss_box_reg: 0.0926 (0.1220)  loss_mask: 0.2447 (0.2985)  loss_objectness: 0.0166 (0.0380)  loss_rpn_box_reg: 0.0041 (0.0210)  time: 0.1086 (0.1263)  data: 0.0014 (0.0187)  lr: 0.016000  max mem: 5193
DONE (t=2.39s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32245
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53034
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34074
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.14105
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.34762
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47775
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28213
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43753
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.45772
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.25422
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.49824
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60448
2020-06-23 16:38:31,425 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3511302916150737, segm mAP: 0.3224500343473394
:::MLLOG {"namespace": "", "time_ms": 1592955511425, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.3511302916150737, "SEGM": 0.3224500343473394}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 10}}
:::MLLOG {"namespace": "", "time_ms": 1592955511425, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 10}}
2020-06-23 16:38:32,407 maskrcnn_benchmark.trainer INFO: eta: 1:04:33  iter: 9340  loss: 0.5414 (0.7584)  loss_classifier: 0.1549 (0.2790)  loss_box_reg: 0.0909 (0.1220)  loss_mask: 0.2447 (0.2984)  loss_objectness: 0.0112 (0.0380)  loss_rpn_box_reg: 0.0058 (0.0210)  time: 0.1079 (0.1263)  data: 0.0016 (0.0186)  lr: 0.016000  max mem: 5193
2020-06-23 16:38:34,583 maskrcnn_benchmark.trainer INFO: eta: 1:04:29  iter: 9360  loss: 0.5420 (0.7580)  loss_classifier: 0.1858 (0.2789)  loss_box_reg: 0.0923 (0.1219)  loss_mask: 0.2496 (0.2983)  loss_objectness: 0.0135 (0.0379)  loss_rpn_box_reg: 0.0062 (0.0210)  time: 0.1091 (0.1263)  data: 0.0014 (0.0186)  lr: 0.016000  max mem: 5193
2020-06-23 16:38:36,760 maskrcnn_benchmark.trainer INFO: eta: 1:04:25  iter: 9380  loss: 0.5939 (0.7577)  loss_classifier: 0.2011 (0.2787)  loss_box_reg: 0.0893 (0.1219)  loss_mask: 0.2533 (0.2982)  loss_objectness: 0.0176 (0.0379)  loss_rpn_box_reg: 0.0110 (0.0210)  time: 0.1086 (0.1262)  data: 0.0015 (0.0186)  lr: 0.016000  max mem: 5193
2020-06-23 16:38:38,929 maskrcnn_benchmark.trainer INFO: eta: 1:04:21  iter: 9400  loss: 0.5993 (0.7574)  loss_classifier: 0.1748 (0.2786)  loss_box_reg: 0.0970 (0.1218)  loss_mask: 0.2561 (0.2981)  loss_objectness: 0.0159 (0.0379)  loss_rpn_box_reg: 0.0100 (0.0210)  time: 0.1082 (0.1262)  data: 0.0015 (0.0185)  lr: 0.016000  max mem: 5193
2020-06-23 16:38:41,092 maskrcnn_benchmark.trainer INFO: eta: 1:04:18  iter: 9420  loss: 0.5742 (0.7570)  loss_classifier: 0.1932 (0.2784)  loss_box_reg: 0.1026 (0.1218)  loss_mask: 0.2527 (0.2980)  loss_objectness: 0.0174 (0.0379)  loss_rpn_box_reg: 0.0101 (0.0210)  time: 0.1076 (0.1262)  data: 0.0014 (0.0185)  lr: 0.016000  max mem: 5193
2020-06-23 16:38:43,272 maskrcnn_benchmark.trainer INFO: eta: 1:04:14  iter: 9440  loss: 0.5526 (0.7567)  loss_classifier: 0.2053 (0.2783)  loss_box_reg: 0.0778 (0.1217)  loss_mask: 0.2338 (0.2979)  loss_objectness: 0.0120 (0.0378)  loss_rpn_box_reg: 0.0089 (0.0209)  time: 0.1088 (0.1261)  data: 0.0014 (0.0185)  lr: 0.016000  max mem: 5193
2020-06-23 16:38:45,435 maskrcnn_benchmark.trainer INFO: eta: 1:04:10  iter: 9460  loss: 0.5700 (0.7563)  loss_classifier: 0.1645 (0.2781)  loss_box_reg: 0.1014 (0.1217)  loss_mask: 0.2623 (0.2978)  loss_objectness: 0.0148 (0.0378)  loss_rpn_box_reg: 0.0100 (0.0209)  time: 0.1080 (0.1261)  data: 0.0014 (0.0184)  lr: 0.016000  max mem: 5193
2020-06-23 16:38:47,609 maskrcnn_benchmark.trainer INFO: eta: 1:04:07  iter: 9480  loss: 0.5496 (0.7558)  loss_classifier: 0.1729 (0.2779)  loss_box_reg: 0.0839 (0.1216)  loss_mask: 0.2317 (0.2977)  loss_objectness: 0.0166 (0.0377)  loss_rpn_box_reg: 0.0063 (0.0209)  time: 0.1077 (0.1261)  data: 0.0014 (0.0184)  lr: 0.016000  max mem: 5193
2020-06-23 16:38:49,767 maskrcnn_benchmark.trainer INFO: eta: 1:04:03  iter: 9500  loss: 0.5773 (0.7555)  loss_classifier: 0.1765 (0.2777)  loss_box_reg: 0.0928 (0.1216)  loss_mask: 0.2561 (0.2976)  loss_objectness: 0.0189 (0.0377)  loss_rpn_box_reg: 0.0077 (0.0209)  time: 0.1073 (0.1260)  data: 0.0014 (0.0184)  lr: 0.016000  max mem: 5193
2020-06-23 16:38:51,952 maskrcnn_benchmark.trainer INFO: eta: 1:04:00  iter: 9520  loss: 0.5972 (0.7553)  loss_classifier: 0.1924 (0.2776)  loss_box_reg: 0.0967 (0.1216)  loss_mask: 0.2616 (0.2975)  loss_objectness: 0.0170 (0.0377)  loss_rpn_box_reg: 0.0062 (0.0209)  time: 0.1091 (0.1260)  data: 0.0014 (0.0183)  lr: 0.016000  max mem: 5193
2020-06-23 16:38:54,113 maskrcnn_benchmark.trainer INFO: eta: 1:03:56  iter: 9540  loss: 0.6654 (0.7550)  loss_classifier: 0.2321 (0.2775)  loss_box_reg: 0.1051 (0.1215)  loss_mask: 0.2610 (0.2974)  loss_objectness: 0.0152 (0.0377)  loss_rpn_box_reg: 0.0072 (0.0209)  time: 0.1076 (0.1259)  data: 0.0014 (0.0183)  lr: 0.016000  max mem: 5193
2020-06-23 16:38:56,289 maskrcnn_benchmark.trainer INFO: eta: 1:03:52  iter: 9560  loss: 0.5249 (0.7545)  loss_classifier: 0.1669 (0.2772)  loss_box_reg: 0.0755 (0.1215)  loss_mask: 0.2273 (0.2973)  loss_objectness: 0.0123 (0.0376)  loss_rpn_box_reg: 0.0049 (0.0209)  time: 0.1080 (0.1259)  data: 0.0013 (0.0183)  lr: 0.016000  max mem: 5193
2020-06-23 16:38:58,445 maskrcnn_benchmark.trainer INFO: eta: 1:03:49  iter: 9580  loss: 0.5373 (0.7541)  loss_classifier: 0.1673 (0.2771)  loss_box_reg: 0.0812 (0.1214)  loss_mask: 0.2412 (0.2972)  loss_objectness: 0.0176 (0.0376)  loss_rpn_box_reg: 0.0076 (0.0209)  time: 0.1079 (0.1259)  data: 0.0013 (0.0182)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:00,603 maskrcnn_benchmark.trainer INFO: eta: 1:03:45  iter: 9600  loss: 0.4479 (0.7536)  loss_classifier: 0.1406 (0.2768)  loss_box_reg: 0.0603 (0.1213)  loss_mask: 0.2259 (0.2970)  loss_objectness: 0.0081 (0.0375)  loss_rpn_box_reg: 0.0077 (0.0209)  time: 0.1068 (0.1258)  data: 0.0014 (0.0182)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:02,768 maskrcnn_benchmark.trainer INFO: eta: 1:03:41  iter: 9620  loss: 0.5916 (0.7532)  loss_classifier: 0.1912 (0.2767)  loss_box_reg: 0.1038 (0.1213)  loss_mask: 0.2508 (0.2969)  loss_objectness: 0.0158 (0.0375)  loss_rpn_box_reg: 0.0093 (0.0208)  time: 0.1081 (0.1258)  data: 0.0014 (0.0181)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:04,920 maskrcnn_benchmark.trainer INFO: eta: 1:03:38  iter: 9640  loss: 0.4894 (0.7527)  loss_classifier: 0.1588 (0.2764)  loss_box_reg: 0.0650 (0.1212)  loss_mask: 0.2246 (0.2968)  loss_objectness: 0.0117 (0.0375)  loss_rpn_box_reg: 0.0047 (0.0208)  time: 0.1074 (0.1258)  data: 0.0013 (0.0181)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:07,092 maskrcnn_benchmark.trainer INFO: eta: 1:03:34  iter: 9660  loss: 0.5595 (0.7523)  loss_classifier: 0.1768 (0.2762)  loss_box_reg: 0.0848 (0.1211)  loss_mask: 0.2392 (0.2967)  loss_objectness: 0.0167 (0.0374)  loss_rpn_box_reg: 0.0067 (0.0208)  time: 0.1084 (0.1257)  data: 0.0013 (0.0181)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:09,270 maskrcnn_benchmark.trainer INFO: eta: 1:03:31  iter: 9680  loss: 0.5276 (0.7520)  loss_classifier: 0.1663 (0.2761)  loss_box_reg: 0.0912 (0.1211)  loss_mask: 0.2503 (0.2966)  loss_objectness: 0.0176 (0.0374)  loss_rpn_box_reg: 0.0065 (0.0208)  time: 0.1087 (0.1257)  data: 0.0016 (0.0180)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:11,436 maskrcnn_benchmark.trainer INFO: eta: 1:03:27  iter: 9700  loss: 0.4804 (0.7515)  loss_classifier: 0.1634 (0.2759)  loss_box_reg: 0.0750 (0.1210)  loss_mask: 0.2427 (0.2965)  loss_objectness: 0.0111 (0.0374)  loss_rpn_box_reg: 0.0060 (0.0208)  time: 0.1073 (0.1257)  data: 0.0013 (0.0180)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:13,602 maskrcnn_benchmark.trainer INFO: eta: 1:03:23  iter: 9720  loss: 0.5025 (0.7511)  loss_classifier: 0.1607 (0.2757)  loss_box_reg: 0.0765 (0.1209)  loss_mask: 0.2239 (0.2964)  loss_objectness: 0.0107 (0.0373)  loss_rpn_box_reg: 0.0048 (0.0208)  time: 0.1081 (0.1256)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:15,777 maskrcnn_benchmark.trainer INFO: eta: 1:03:20  iter: 9740  loss: 0.6268 (0.7508)  loss_classifier: 0.1856 (0.2755)  loss_box_reg: 0.0946 (0.1209)  loss_mask: 0.2298 (0.2963)  loss_objectness: 0.0214 (0.0373)  loss_rpn_box_reg: 0.0097 (0.0208)  time: 0.1083 (0.1256)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:17,941 maskrcnn_benchmark.trainer INFO: eta: 1:03:16  iter: 9760  loss: 0.6025 (0.7505)  loss_classifier: 0.2016 (0.2754)  loss_box_reg: 0.1006 (0.1209)  loss_mask: 0.2755 (0.2962)  loss_objectness: 0.0153 (0.0373)  loss_rpn_box_reg: 0.0072 (0.0208)  time: 0.1082 (0.1256)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:20,112 maskrcnn_benchmark.trainer INFO: eta: 1:03:13  iter: 9780  loss: 0.5804 (0.7502)  loss_classifier: 0.1983 (0.2752)  loss_box_reg: 0.0931 (0.1208)  loss_mask: 0.2505 (0.2961)  loss_objectness: 0.0221 (0.0373)  loss_rpn_box_reg: 0.0072 (0.0208)  time: 0.1080 (0.1255)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:22,315 maskrcnn_benchmark.trainer INFO: eta: 1:03:09  iter: 9800  loss: 0.5397 (0.7498)  loss_classifier: 0.1835 (0.2751)  loss_box_reg: 0.0814 (0.1207)  loss_mask: 0.2631 (0.2960)  loss_objectness: 0.0125 (0.0372)  loss_rpn_box_reg: 0.0072 (0.0208)  time: 0.1097 (0.1255)  data: 0.0014 (0.0178)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:24,479 maskrcnn_benchmark.trainer INFO: eta: 1:03:06  iter: 9820  loss: 0.4995 (0.7494)  loss_classifier: 0.1518 (0.2749)  loss_box_reg: 0.0851 (0.1207)  loss_mask: 0.2517 (0.2959)  loss_objectness: 0.0102 (0.0372)  loss_rpn_box_reg: 0.0064 (0.0207)  time: 0.1079 (0.1254)  data: 0.0013 (0.0178)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:26,658 maskrcnn_benchmark.trainer INFO: eta: 1:03:02  iter: 9840  loss: 0.6695 (0.7492)  loss_classifier: 0.2254 (0.2748)  loss_box_reg: 0.1314 (0.1207)  loss_mask: 0.2772 (0.2959)  loss_objectness: 0.0198 (0.0371)  loss_rpn_box_reg: 0.0116 (0.0207)  time: 0.1095 (0.1254)  data: 0.0014 (0.0178)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:28,815 maskrcnn_benchmark.trainer INFO: eta: 1:02:58  iter: 9860  loss: 0.6224 (0.7489)  loss_classifier: 0.2092 (0.2746)  loss_box_reg: 0.0984 (0.1206)  loss_mask: 0.2585 (0.2958)  loss_objectness: 0.0157 (0.0371)  loss_rpn_box_reg: 0.0131 (0.0207)  time: 0.1079 (0.1254)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:30,974 maskrcnn_benchmark.trainer INFO: eta: 1:02:55  iter: 9880  loss: 0.5356 (0.7487)  loss_classifier: 0.2059 (0.2745)  loss_box_reg: 0.0897 (0.1206)  loss_mask: 0.2499 (0.2957)  loss_objectness: 0.0135 (0.0371)  loss_rpn_box_reg: 0.0089 (0.0207)  time: 0.1080 (0.1253)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:33,138 maskrcnn_benchmark.trainer INFO: eta: 1:02:51  iter: 9900  loss: 0.6387 (0.7485)  loss_classifier: 0.2101 (0.2744)  loss_box_reg: 0.1130 (0.1206)  loss_mask: 0.2673 (0.2957)  loss_objectness: 0.0200 (0.0371)  loss_rpn_box_reg: 0.0127 (0.0207)  time: 0.1081 (0.1253)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:35,300 maskrcnn_benchmark.trainer INFO: eta: 1:02:48  iter: 9920  loss: 0.5373 (0.7482)  loss_classifier: 0.1851 (0.2743)  loss_box_reg: 0.0883 (0.1206)  loss_mask: 0.2396 (0.2956)  loss_objectness: 0.0126 (0.0370)  loss_rpn_box_reg: 0.0130 (0.0207)  time: 0.1082 (0.1253)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:37,459 maskrcnn_benchmark.trainer INFO: eta: 1:02:44  iter: 9940  loss: 0.5252 (0.7478)  loss_classifier: 0.1847 (0.2741)  loss_box_reg: 0.0784 (0.1205)  loss_mask: 0.2330 (0.2954)  loss_objectness: 0.0186 (0.0370)  loss_rpn_box_reg: 0.0042 (0.0207)  time: 0.1076 (0.1252)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:39,631 maskrcnn_benchmark.trainer INFO: eta: 1:02:41  iter: 9960  loss: 0.5127 (0.7473)  loss_classifier: 0.1889 (0.2739)  loss_box_reg: 0.0812 (0.1204)  loss_mask: 0.2125 (0.2953)  loss_objectness: 0.0137 (0.0370)  loss_rpn_box_reg: 0.0055 (0.0207)  time: 0.1082 (0.1252)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:41,808 maskrcnn_benchmark.trainer INFO: eta: 1:02:37  iter: 9980  loss: 0.5536 (0.7470)  loss_classifier: 0.1825 (0.2737)  loss_box_reg: 0.0873 (0.1204)  loss_mask: 0.2538 (0.2952)  loss_objectness: 0.0127 (0.0369)  loss_rpn_box_reg: 0.0062 (0.0207)  time: 0.1089 (0.1252)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:43,983 maskrcnn_benchmark.trainer INFO: eta: 1:02:34  iter: 10000  loss: 0.6026 (0.7467)  loss_classifier: 0.2073 (0.2736)  loss_box_reg: 0.0917 (0.1204)  loss_mask: 0.2674 (0.2952)  loss_objectness: 0.0156 (0.0369)  loss_rpn_box_reg: 0.0074 (0.0207)  time: 0.1082 (0.1251)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:46,158 maskrcnn_benchmark.trainer INFO: eta: 1:02:30  iter: 10020  loss: 0.5002 (0.7464)  loss_classifier: 0.1717 (0.2735)  loss_box_reg: 0.0831 (0.1203)  loss_mask: 0.2398 (0.2951)  loss_objectness: 0.0126 (0.0369)  loss_rpn_box_reg: 0.0053 (0.0206)  time: 0.1080 (0.1251)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:48,328 maskrcnn_benchmark.trainer INFO: eta: 1:02:27  iter: 10040  loss: 0.5295 (0.7460)  loss_classifier: 0.1839 (0.2733)  loss_box_reg: 0.0851 (0.1203)  loss_mask: 0.2237 (0.2950)  loss_objectness: 0.0186 (0.0369)  loss_rpn_box_reg: 0.0116 (0.0206)  time: 0.1078 (0.1251)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:50,494 maskrcnn_benchmark.trainer INFO: eta: 1:02:23  iter: 10060  loss: 0.5801 (0.7457)  loss_classifier: 0.1755 (0.2731)  loss_box_reg: 0.0864 (0.1202)  loss_mask: 0.2566 (0.2949)  loss_objectness: 0.0205 (0.0369)  loss_rpn_box_reg: 0.0133 (0.0206)  time: 0.1083 (0.1250)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5193
2020-06-23 16:39:52,666 maskrcnn_benchmark.trainer INFO: eta: 1:02:20  iter: 10080  loss: 0.5358 (0.7453)  loss_classifier: 0.1866 (0.2730)  loss_box_reg: 0.0910 (0.1201)  loss_mask: 0.2350 (0.2948)  loss_objectness: 0.0102 (0.0368)  loss_rpn_box_reg: 0.0060 (0.0206)  time: 0.1091 (0.1250)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5193
:::MLLOG {"namespace": "", "time_ms": 1592955593423, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1592955593424, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1592955593424, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 11}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
2020-06-23 16:39:53,663 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
2020-06-23 16:39:53,968 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.71it/s]
 24%|       | 19/79 [00:01<00:08,  7.42it/s]
 28%|       | 22/79 [00:01<00:06,  9.46it/s]
 32%|      | 25/79 [00:01<00:04, 11.66it/s]
 35%|      | 28/79 [00:01<00:03, 14.05it/s]
 39%|      | 31/79 [00:02<00:02, 16.35it/s]
 43%|     | 34/79 [00:02<00:02, 18.48it/s]
 47%|     | 37/79 [00:02<00:02, 20.16it/s]
 51%|     | 40/79 [00:02<00:01, 21.67it/s]
 54%|    | 43/79 [00:02<00:01, 22.79it/s]
 58%|    | 46/79 [00:02<00:01, 23.68it/s]
 62%|   | 49/79 [00:02<00:01, 24.53it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.78it/s]
 24%|       | 19/79 [00:01<00:07,  7.53it/s]
 28%|       | 22/79 [00:01<00:05,  9.59it/s]
 32%|      | 25/79 [00:01<00:04, 11.87it/s]
 35%|      | 28/79 [00:01<00:03, 14.21it/s]
 39%|      | 31/79 [00:01<00:02, 16.53it/s]
 43%|     | 34/79 [00:02<00:02, 18.64it/s]
 47%|     | 37/79 [00:02<00:02, 20.42it/s]
 51%|     | 40/79 [00:02<00:01, 21.89it/s]
 54%|    | 43/79 [00:02<00:01, 23.04it/s]
 58%|    | 46/79 [00:02<00:01, 23.95it/s]
 62%|   | 49/79 [00:02<00:01, 24.50it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.76it/s]
  9%|         | 7/79 [00:01<00:29,  2.44it/s]
 13%|        | 10/79 [00:01<00:20,  3.35it/s]
 16%|        | 13/79 [00:01<00:14,  4.53it/s]
 20%|        | 16/79 [00:01<00:10,  6.02it/s]
 24%|       | 19/79 [00:01<00:07,  7.80it/s]
 28%|       | 22/79 [00:01<00:05,  9.86it/s]
 32%|      | 25/79 [00:01<00:04, 12.13it/s]
 35%|      | 28/79 [00:01<00:03, 14.41it/s]
 39%|      | 31/79 [00:01<00:02, 16.58it/s]
 43%|     | 34/79 [00:02<00:02, 18.56it/s]
 47%|     | 37/79 [00:02<00:02, 20.28it/s]
 51%|     | 40/79 [00:02<00:01, 21.65it/s]
 54%|    | 43/79 [00:02<00:01, 22.73it/s]
 58%|    | 46/79 [00:02<00:01, 23.58it/s]
 62%|   | 49/79 [00:02<00:01, 24.33it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:43,  1.74it/s]
  9%|         | 7/79 [00:01<00:29,  2.42it/s]
 13%|        | 10/79 [00:01<00:20,  3.32it/s]
 16%|        | 13/79 [00:01<00:14,  4.49it/s]
 20%|        | 16/79 [00:01<00:10,  5.98it/s]
 24%|       | 19/79 [00:01<00:07,  7.77it/s]
 28%|       | 22/79 [00:01<00:05,  9.76it/s]
 32%|      | 25/79 [00:01<00:04, 12.05it/s]
 35%|      | 28/79 [00:01<00:03, 14.35it/s]
 39%|      | 31/79 [00:01<00:02, 16.56it/s]
 43%|     | 34/79 [00:02<00:02, 18.55it/s]
 47%|     | 37/79 [00:02<00:02, 20.32it/s]
 51%|     | 40/79 [00:02<00:01, 21.81it/s]
 54%|    | 43/79 [00:02<00:01, 22.69it/s]
 58%|    | 46/79 [00:02<00:01, 23.45it/s]
 62%|   | 49/79 [00:02<00:01, 24.20it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.45it/s]
 20%|        | 16/79 [00:01<00:10,  5.92it/s]
 24%|       | 19/79 [00:01<00:07,  7.71it/s]
 28%|       | 22/79 [00:01<00:05,  9.75it/s]
 32%|      | 25/79 [00:01<00:04, 12.00it/s]
 35%|      | 28/79 [00:01<00:03, 14.34it/s]
 39%|      | 31/79 [00:01<00:02, 16.67it/s]
 43%|     | 34/79 [00:02<00:02, 18.49it/s]
 47%|     | 37/79 [00:02<00:02, 20.26it/s]
 51%|     | 40/79 [00:02<00:01, 21.52it/s]
 54%|    | 43/79 [00:02<00:01, 22.81it/s]
 58%|    | 46/79 [00:02<00:01, 23.21it/s]
 62%|   | 49/79 [00:02<00:01, 24.02it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  4%|         | 3/79 [00:00<00:43,  1.74it/s]
  8%|         | 6/79 [00:01<00:30,  2.41it/s]
 11%|        | 9/79 [00:01<00:21,  3.31it/s]
 15%|        | 12/79 [00:01<00:14,  4.48it/s]
 19%|        | 15/79 [00:01<00:10,  5.94it/s]
 23%|       | 18/79 [00:01<00:07,  7.74it/s]
 27%|       | 21/79 [00:01<00:05,  9.75it/s]
 30%|       | 24/79 [00:01<00:04, 11.93it/s]
 34%|      | 27/79 [00:01<00:03, 14.04it/s]
 38%|      | 30/79 [00:01<00:03, 16.21it/s]
 42%|     | 33/79 [00:02<00:02, 18.07it/s]
 46%|     | 36/79 [00:02<00:02, 19.77it/s]
 49%|     | 39/79 [00:02<00:01, 21.25it/s]
 53%|    | 42/79 [00:02<00:01, 22.22it/s]
 57%|    | 45/79 [00:02<00:01, 23.18it/s]
 61%|    | 48/79 [00:02<00:01, 24.00it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.77it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:05,  9.59it/s]
 32%|      | 25/79 [00:01<00:04, 11.82it/s]
 35%|      | 28/79 [00:01<00:03, 14.21it/s]
 39%|      | 31/79 [00:02<00:02, 16.57it/s]
 43%|     | 34/79 [00:02<00:02, 18.56it/s]
 47%|     | 37/79 [00:02<00:02, 20.41it/s]
 51%|     | 40/79 [00:02<00:01, 21.78it/s]
 54%|    | 43/79 [00:02<00:01, 22.92it/s]
 58%|    | 46/79 [00:02<00:01, 23.60it/s]
 62%|   | 49/79 [00:02<00:01, 24.39it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.27it/s]
  5%|         | 4/79 [00:00<00:42,  1.76it/s]
  9%|         | 7/79 [00:01<00:29,  2.45it/s]
 13%|        | 10/79 [00:01<00:20,  3.35it/s]
 16%|        | 13/79 [00:01<00:14,  4.53it/s]
 20%|        | 16/79 [00:01<00:10,  6.00it/s]
 24%|       | 19/79 [00:01<00:07,  7.78it/s]
 28%|       | 22/79 [00:01<00:05,  9.88it/s]
 32%|      | 25/79 [00:01<00:04, 12.16it/s]
 35%|      | 28/79 [00:01<00:03, 14.34it/s]
 39%|      | 31/79 [00:01<00:02, 16.62it/s]
 43%|     | 34/79 [00:02<00:02, 18.61it/s]
 47%|     | 37/79 [00:02<00:02, 20.39it/s]
 51%|     | 40/79 [00:02<00:01, 21.63it/s]
 54%|    | 43/79 [00:02<00:01, 22.59it/s]
 58%|    | 46/79 [00:02<00:01, 23.46it/s]
 62%|   | 49/79 [00:02<00:01, 24.01it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.70it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:05,  9.50it/s]
 32%|      | 25/79 [00:01<00:04, 11.77it/s]
 35%|      | 28/79 [00:01<00:03, 14.13it/s]
 39%|      | 31/79 [00:02<00:02, 16.37it/s]
 43%|     | 34/79 [00:02<00:02, 18.49it/s]
 47%|     | 37/79 [00:02<00:02, 20.26it/s]
 51%|     | 40/79 [00:02<00:01, 21.70it/s]
 54%|    | 43/79 [00:02<00:01, 23.07it/s]
 58%|    | 46/79 [00:02<00:01, 23.86it/s]
 62%|   | 49/79 [00:02<00:01, 24.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  4%|         | 3/79 [00:00<00:48,  1.57it/s]
  8%|         | 6/79 [00:01<00:33,  2.18it/s]
 11%|        | 9/79 [00:01<00:23,  3.01it/s]
 15%|        | 12/79 [00:01<00:16,  4.10it/s]
 19%|        | 15/79 [00:01<00:11,  5.47it/s]
 23%|       | 18/79 [00:01<00:08,  7.19it/s]
 27%|       | 21/79 [00:01<00:06,  9.18it/s]
 30%|       | 24/79 [00:01<00:04, 11.39it/s]
 34%|      | 27/79 [00:01<00:03, 13.72it/s]
 38%|      | 30/79 [00:02<00:03, 16.04it/s]
 42%|     | 33/79 [00:02<00:02, 18.17it/s]
 46%|     | 36/79 [00:02<00:02, 20.04it/s]
 49%|     | 39/79 [00:02<00:01, 21.44it/s]
 53%|    | 42/79 [00:02<00:01, 22.71it/s]
 57%|    | 45/79 [00:02<00:01, 23.77it/s]
 61%|    | 48/79 [00:02<00:01, 24.59it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:14,  4.40it/s]
 20%|        | 16/79 [00:01<00:10,  5.86it/s]
 24%|       | 19/79 [00:01<00:07,  7.62it/s]
 28%|       | 22/79 [00:01<00:05,  9.67it/s]
 32%|      | 25/79 [00:01<00:04, 11.92it/s]
 35%|      | 28/79 [00:01<00:03, 14.25it/s]
 39%|      | 31/79 [00:02<00:02, 16.45it/s]
 43%|     | 34/79 [00:02<00:02, 18.43it/s]
 47%|     | 37/79 [00:02<00:02, 20.24it/s]
 51%|     | 40/79 [00:02<00:01, 21.63it/s]
 54%|    | 43/79 [00:02<00:01, 22.84it/s]
 58%|    | 46/79 [00:02<00:01, 23.58it/s]
 62%|   | 49/79 [00:02<00:01, 24.24it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.78it/s]
 24%|       | 19/79 [00:01<00:07,  7.54it/s]
 28%|       | 22/79 [00:01<00:05,  9.55it/s]
 32%|      | 25/79 [00:01<00:04, 11.78it/s]
 35%|      | 28/79 [00:01<00:03, 14.09it/s]
 39%|      | 31/79 [00:02<00:02, 16.38it/s]
 43%|     | 34/79 [00:02<00:02, 18.64it/s]
 47%|     | 37/79 [00:02<00:02, 20.28it/s]
 51%|     | 40/79 [00:02<00:01, 21.68it/s]
 54%|    | 43/79 [00:02<00:01, 22.84it/s]
 58%|    | 46/79 [00:02<00:01, 23.91it/s]
 62%|   | 49/79 [00:02<00:01, 24.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.13it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.24it/s]
 32%|      | 25/79 [00:01<00:04, 11.46it/s]
 35%|      | 28/79 [00:01<00:03, 13.81it/s]
 39%|      | 31/79 [00:02<00:02, 16.11it/s]
 43%|     | 34/79 [00:02<00:02, 18.13it/s]
 47%|     | 37/79 [00:02<00:02, 19.97it/s]
 51%|     | 40/79 [00:02<00:01, 21.36it/s]
 54%|    | 43/79 [00:02<00:01, 22.56it/s]
 58%|    | 46/79 [00:02<00:01, 23.45it/s]
 62%|   | 49/79 [00:02<00:01, 24.13it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.23it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.41it/s]
 32%|      | 25/79 [00:01<00:04, 11.65it/s]
 35%|      | 28/79 [00:01<00:03, 14.02it/s]
 39%|      | 31/79 [00:02<00:02, 16.30it/s]
 43%|     | 34/79 [00:02<00:02, 18.33it/s]
 47%|     | 37/79 [00:02<00:02, 20.07it/s]
 51%|     | 40/79 [00:02<00:01, 21.70it/s]
 54%|    | 43/79 [00:02<00:01, 22.95it/s]
 58%|    | 46/79 [00:02<00:01, 23.69it/s]
 62%|   | 49/79 [00:02<00:01, 24.57it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.29it/s]
 16%|        | 13/79 [00:01<00:14,  4.44it/s]
 20%|        | 16/79 [00:01<00:10,  5.89it/s]
 24%|       | 19/79 [00:01<00:07,  7.66it/s]
 28%|       | 22/79 [00:01<00:05,  9.72it/s]
 32%|      | 25/79 [00:01<00:04, 11.85it/s]
 35%|      | 28/79 [00:01<00:03, 14.09it/s]
 39%|      | 31/79 [00:02<00:02, 16.27it/s]
 43%|     | 34/79 [00:02<00:02, 18.35it/s]
 47%|     | 37/79 [00:02<00:02, 19.74it/s]
 51%|     | 40/79 [00:02<00:01, 21.21it/s]
 54%|    | 43/79 [00:02<00:01, 22.11it/s]
 58%|    | 46/79 [00:02<00:01, 22.90it/s]
 62%|   | 49/79 [00:02<00:01, 23.69it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:01<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.23it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.38it/s]
 32%|      | 25/79 [00:01<00:04, 11.58it/s]
 35%|      | 28/79 [00:01<00:03, 13.85it/s]
 39%|      | 31/79 [00:02<00:02, 16.06it/s]
 43%|     | 34/79 [00:02<00:02, 18.04it/s]
 47%|     | 37/79 [00:02<00:02, 19.72it/s]
 51%|     | 40/79 [00:02<00:01, 21.15it/s]
 54%|    | 43/79 [00:02<00:01, 22.09it/s]
 58%|    | 46/79 [00:02<00:01, 23.02it/s]
 62%|   | 49/79 [00:02<00:01, 23.66it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.48it/s]
 28%|       | 22/79 [00:01<00:06,  9.49it/s]
 32%|      | 25/79 [00:01<00:04, 11.65it/s]
 35%|      | 28/79 [00:01<00:03, 13.92it/s]
 39%|      | 31/79 [00:02<00:02, 16.14it/s]
 43%|     | 34/79 [00:02<00:02, 18.07it/s]
 47%|     | 37/79 [00:02<00:02, 19.52it/s]
 51%|     | 40/79 [00:02<00:01, 20.94it/s]
 54%|    | 43/79 [00:02<00:01, 22.16it/s]
 58%|    | 46/79 [00:02<00:01, 22.89it/s]
 62%|   | 49/79 [00:02<00:01, 23.53it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.71it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.46it/s]
 32%|      | 25/79 [00:01<00:04, 11.65it/s]
 35%|      | 28/79 [00:01<00:03, 13.97it/s]
 39%|      | 31/79 [00:02<00:02, 16.18it/s]
 43%|     | 34/79 [00:02<00:02, 18.09it/s]
 47%|     | 37/79 [00:02<00:02, 19.79it/s]
 51%|     | 40/79 [00:02<00:01, 21.25it/s]
 54%|    | 43/79 [00:02<00:01, 22.45it/s]
 58%|    | 46/79 [00:02<00:01, 23.12it/s]
 62%|   | 49/79 [00:02<00:01, 23.51it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.32it/s]
 32%|      | 25/79 [00:01<00:04, 11.52it/s]
 35%|      | 28/79 [00:01<00:03, 13.76it/s]
 39%|      | 31/79 [00:02<00:02, 16.10it/s]
 43%|     | 34/79 [00:02<00:02, 18.09it/s]
 47%|     | 37/79 [00:02<00:02, 19.82it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 22.30it/s]
 58%|    | 46/79 [00:02<00:01, 22.93it/s]
 62%|   | 49/79 [00:02<00:01, 23.58it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  4%|         | 3/79 [00:00<00:47,  1.61it/s]
  8%|         | 6/79 [00:01<00:32,  2.24it/s]
 11%|        | 9/79 [00:01<00:22,  3.09it/s]
 15%|        | 12/79 [00:01<00:16,  4.18it/s]
 19%|        | 15/79 [00:01<00:11,  5.58it/s]
 23%|       | 18/79 [00:01<00:08,  7.30it/s]
 27%|       | 21/79 [00:01<00:06,  9.27it/s]
 30%|       | 24/79 [00:01<00:04, 11.35it/s]
 34%|      | 27/79 [00:01<00:03, 13.62it/s]
 38%|      | 30/79 [00:02<00:03, 15.68it/s]
 42%|     | 33/79 [00:02<00:02, 17.60it/s]
 46%|     | 36/79 [00:02<00:02, 19.16it/s]
 49%|     | 39/79 [00:02<00:01, 20.56it/s]
 53%|    | 42/79 [00:02<00:01, 21.81it/s]
 57%|    | 45/79 [00:02<00:01, 22.64it/s]
 61%|    | 48/79 [00:02<00:01, 23.31it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  4%|         | 3/79 [00:01<00:49,  1.54it/s]
  8%|         | 6/79 [00:01<00:33,  2.15it/s]
 11%|        | 9/79 [00:01<00:23,  2.96it/s]
 15%|        | 12/79 [00:01<00:16,  4.03it/s]
 19%|        | 15/79 [00:01<00:11,  5.40it/s]
 23%|       | 18/79 [00:01<00:08,  7.08it/s]
 27%|       | 21/79 [00:01<00:06,  9.05it/s]
 30%|       | 24/79 [00:01<00:04, 11.24it/s]
 34%|      | 27/79 [00:01<00:03, 13.52it/s]
 38%|      | 30/79 [00:02<00:03, 15.77it/s]
 42%|     | 33/79 [00:02<00:02, 17.88it/s]
 46%|     | 36/79 [00:02<00:02, 19.64it/s]
 49%|     | 39/79 [00:02<00:01, 20.97it/s]
 53%|    | 42/79 [00:02<00:01, 22.07it/s]
 57%|    | 45/79 [00:02<00:01, 23.03it/s]
 61%|    | 48/79 [00:02<00:01, 23.54it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.18it/s]
 32%|      | 25/79 [00:01<00:04, 11.38it/s]
 35%|      | 28/79 [00:01<00:03, 13.63it/s]
 39%|      | 31/79 [00:02<00:03, 15.84it/s]
 43%|     | 34/79 [00:02<00:02, 17.89it/s]
 47%|     | 37/79 [00:02<00:02, 19.82it/s]
 51%|     | 40/79 [00:02<00:01, 21.17it/s]
 54%|    | 43/79 [00:02<00:01, 22.28it/s]
 58%|    | 46/79 [00:02<00:01, 23.02it/s]
 62%|   | 49/79 [00:02<00:01, 23.66it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.39it/s]
 24%|       | 19/79 [00:01<00:08,  7.07it/s]
 28%|       | 22/79 [00:01<00:06,  9.01it/s]
 32%|      | 25/79 [00:01<00:04, 11.20it/s]
 35%|      | 28/79 [00:01<00:03, 13.46it/s]
 39%|      | 31/79 [00:02<00:03, 15.77it/s]
 43%|     | 34/79 [00:02<00:02, 17.89it/s]
 47%|     | 37/79 [00:02<00:02, 19.62it/s]
 51%|     | 40/79 [00:02<00:01, 20.83it/s]
 54%|    | 43/79 [00:02<00:01, 21.99it/s]
 58%|    | 46/79 [00:02<00:01, 22.84it/s]
 62%|   | 49/79 [00:02<00:01, 23.23it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.08it/s]
 28%|       | 22/79 [00:01<00:06,  8.96it/s]
 32%|      | 25/79 [00:01<00:04, 11.08it/s]
 35%|      | 28/79 [00:02<00:03, 13.24it/s]
 39%|      | 31/79 [00:02<00:03, 15.44it/s]
 43%|     | 34/79 [00:02<00:02, 17.53it/s]
 47%|     | 37/79 [00:02<00:02, 19.16it/s]
 51%|     | 40/79 [00:02<00:01, 20.65it/s]
 54%|    | 43/79 [00:02<00:01, 21.82it/s]
 58%|    | 46/79 [00:02<00:01, 22.63it/s]
 62%|   | 49/79 [00:02<00:01, 23.16it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.34it/s]
 32%|      | 25/79 [00:01<00:04, 11.50it/s]
 35%|      | 28/79 [00:01<00:03, 13.73it/s]
 39%|      | 31/79 [00:02<00:03, 15.92it/s]
 43%|     | 34/79 [00:02<00:02, 17.77it/s]
 47%|     | 37/79 [00:02<00:02, 19.50it/s]
 51%|     | 40/79 [00:02<00:01, 20.71it/s]
 54%|    | 43/79 [00:02<00:01, 21.82it/s]
 58%|    | 46/79 [00:02<00:01, 22.70it/s]
 62%|   | 49/79 [00:02<00:01, 23.54it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.36it/s]
 24%|       | 19/79 [00:01<00:08,  7.02it/s]
 28%|       | 22/79 [00:01<00:06,  8.94it/s]
 32%|      | 25/79 [00:01<00:04, 11.12it/s]
 35%|      | 28/79 [00:01<00:03, 13.36it/s]
 39%|      | 31/79 [00:02<00:03, 15.55it/s]
 43%|     | 34/79 [00:02<00:02, 17.63it/s]
 47%|     | 37/79 [00:02<00:02, 19.47it/s]
 51%|     | 40/79 [00:02<00:01, 20.89it/s]
 54%|    | 43/79 [00:02<00:01, 22.07it/s]
 58%|    | 46/79 [00:02<00:01, 23.11it/s]
 62%|   | 49/79 [00:02<00:01, 23.83it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:11,  5.25it/s]
 24%|       | 19/79 [00:01<00:08,  6.89it/s]
 28%|       | 22/79 [00:01<00:06,  8.82it/s]
 32%|      | 25/79 [00:01<00:04, 11.03it/s]
 35%|      | 28/79 [00:02<00:03, 13.17it/s]
 39%|      | 31/79 [00:02<00:03, 15.30it/s]
 43%|     | 34/79 [00:02<00:02, 17.27it/s]
 47%|     | 37/79 [00:02<00:02, 19.10it/s]
 51%|     | 40/79 [00:02<00:01, 20.32it/s]
 54%|    | 43/79 [00:02<00:01, 21.54it/s]
 58%|    | 46/79 [00:02<00:01, 22.16it/s]
 62%|   | 49/79 [00:02<00:01, 22.75it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  7.01it/s]
 28%|       | 22/79 [00:01<00:06,  8.94it/s]
 32%|      | 25/79 [00:01<00:04, 11.02it/s]
 35%|      | 28/79 [00:02<00:03, 13.21it/s]
 39%|      | 31/79 [00:02<00:03, 15.48it/s]
 43%|     | 34/79 [00:02<00:02, 17.22it/s]
 47%|     | 37/79 [00:02<00:02, 18.99it/s]
 51%|     | 40/79 [00:02<00:01, 20.53it/s]
 54%|    | 43/79 [00:02<00:01, 21.59it/s]
 58%|    | 46/79 [00:02<00:01, 22.19it/s]
 62%|   | 49/79 [00:02<00:01, 22.65it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.32it/s]
 24%|       | 19/79 [00:01<00:08,  6.97it/s]
 28%|       | 22/79 [00:01<00:06,  8.87it/s]
 32%|      | 25/79 [00:01<00:04, 11.01it/s]
 35%|      | 28/79 [00:02<00:03, 13.22it/s]
 39%|      | 31/79 [00:02<00:03, 15.34it/s]
 43%|     | 34/79 [00:02<00:02, 17.23it/s]
 47%|     | 37/79 [00:02<00:02, 18.76it/s]
 51%|     | 40/79 [00:02<00:01, 20.09it/s]
 54%|    | 43/79 [00:02<00:01, 21.17it/s]
 58%|    | 46/79 [00:02<00:01, 22.02it/s]
 62%|   | 49/79 [00:02<00:01, 22.64it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  5%|         | 4/79 [00:01<00:53,  1.41it/s]
  9%|         | 7/79 [00:01<00:36,  1.97it/s]
 13%|        | 10/79 [00:01<00:25,  2.72it/s]
 16%|        | 13/79 [00:01<00:17,  3.72it/s]
 20%|        | 16/79 [00:01<00:12,  4.98it/s]
 24%|       | 19/79 [00:01<00:09,  6.57it/s]
 28%|       | 22/79 [00:01<00:06,  8.43it/s]
 32%|      | 25/79 [00:01<00:05, 10.56it/s]
 35%|      | 28/79 [00:02<00:03, 12.77it/s]
 39%|      | 31/79 [00:02<00:03, 15.06it/s]
 43%|     | 34/79 [00:02<00:02, 17.17it/s]
 47%|     | 37/79 [00:02<00:02, 18.90it/s]
 51%|     | 40/79 [00:02<00:01, 20.35it/s]
 54%|    | 43/79 [00:02<00:01, 21.44it/s]
 58%|    | 46/79 [00:02<00:01, 22.25it/s]
 62%|   | 49/79 [00:02<00:01, 23.01it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:12,  5.24it/s]
 24%|       | 19/79 [00:01<00:08,  6.88it/s]
 28%|       | 22/79 [00:01<00:06,  8.77it/s]
 32%|      | 25/79 [00:01<00:04, 10.86it/s]
 35%|      | 28/79 [00:02<00:03, 13.05it/s]
 39%|      | 31/79 [00:02<00:03, 15.17it/s]
 43%|     | 34/79 [00:02<00:02, 17.11it/s]
 47%|     | 37/79 [00:02<00:02, 18.72it/s]
 51%|     | 40/79 [00:02<00:01, 20.09it/s]
 54%|    | 43/79 [00:02<00:01, 21.17it/s]
 58%|    | 46/79 [00:02<00:01, 22.15it/s]
 62%|   | 49/79 [00:02<00:01, 22.60it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.87it/s]
 20%|        | 16/79 [00:01<00:12,  5.18it/s]
 24%|       | 19/79 [00:01<00:08,  6.79it/s]
 28%|       | 22/79 [00:01<00:06,  8.69it/s]
 32%|      | 25/79 [00:01<00:05, 10.71it/s]
 35%|      | 28/79 [00:02<00:03, 12.93it/s]
 39%|      | 31/79 [00:02<00:03, 15.12it/s]
 43%|     | 34/79 [00:02<00:02, 17.17it/s]
 47%|     | 37/79 [00:02<00:02, 18.61it/s]
 51%|     | 40/79 [00:02<00:01, 19.97it/s]
 54%|    | 43/79 [00:02<00:01, 21.15it/s]
 58%|    | 46/79 [00:02<00:01, 22.00it/s]
 62%|   | 49/79 [00:02<00:01, 22.64it/s]
 66%|   | 52/79 [00:03<00:01, 25.19it/s]
 70%|   | 55/79 [00:02<00:00, 25.66it/s]
 73%|  | 58/79 [00:02<00:00, 25.97it/s]
 77%|  | 61/79 [00:03<00:00, 26.10it/s]
 81%|  | 64/79 [00:03<00:00, 26.34it/s]
 85%| | 67/79 [00:03<00:00, 26.05it/s]
 89%| | 70/79 [00:03<00:00, 26.08it/s]
 92%|| 73/79 [00:03<00:00, 26.43it/s]
 96%|| 76/79 [00:03<00:00, 27.01it/s]
100%|| 79/79 [00:03<00:00, 27.79it/s]
, 24.45it/s]
 70%|   | 55/79 [00:02<00:00, 24.97it/s]
 73%|  | 58/79 [00:03<00:00, 25.20it/s]
 77%|  | 61/79 [00:03<00:00, 25.44it/s]
 81%|  | 64/79 [00:03<00:00, 25.46it/s]
 85%| | 67/79 [00:03<00:00, 25.78it/s]
 89%| | 70/79 [00:03<00:00, 25.82it/s]
 92%|| 73/79 [00:03<00:00, 26.07it/s]
 96%|| 76/79 [00:03<00:00, 26.66it/s]
100%|| 79/79 [00:03<00:00, 27.52it/s]
, 25.13it/s]
 70%|   | 55/79 [00:02<00:00, 25.41it/s]
 73%|  | 58/79 [00:03<00:00, 25.48it/s]
 77%|  | 61/79 [00:03<00:00, 25.29it/s]
 81%|  | 64/79 [00:03<00:00, 25.52it/s]
 85%| | 67/79 [00:03<00:00, 25.54it/s]
 89%| | 70/79 [00:03<00:00, 25.62it/s]
 92%|| 73/79 [00:03<00:00, 25.96it/s]
 96%|| 76/79 [00:03<00:00, 26.41it/s]
100%|| 79/79 [00:03<00:00, 27.31it/s]
, 24.82it/s]
 70%|   | 55/79 [00:02<00:00, 25.12it/s]
 73%|  | 58/79 [00:03<00:00, 25.28it/s]
 77%|  | 61/79 [00:03<00:00, 25.59it/s]
 81%|  | 64/79 [00:03<00:00, 25.63it/s]
 85%| | 67/79 [00:03<00:00, 25.57it/s]
 89%| | 70/79 [00:03<00:00, 25.15it/s]
 92%|| 73/79 [00:03<00:00, 25.75it/s]
 96%|| 76/79 [00:03<00:00, 26.21it/s]
100%|| 79/79 [00:03<00:00, 27.21it/s]
, 24.68it/s]
 70%|   | 55/79 [00:02<00:00, 24.87it/s]
 73%|  | 58/79 [00:03<00:00, 25.05it/s]
 77%|  | 61/79 [00:03<00:00, 25.06it/s]
 81%|  | 64/79 [00:03<00:00, 25.01it/s]
 85%| | 67/79 [00:03<00:00, 24.99it/s]
 89%| | 70/79 [00:03<00:00, 25.44it/s]
 92%|| 73/79 [00:03<00:00, 25.48it/s]
 96%|| 76/79 [00:03<00:00, 26.29it/s]
100%|| 79/79 [00:03<00:00, 27.07it/s]
, 24.31it/s]
 70%|   | 55/79 [00:02<00:00, 24.89it/s]
 73%|  | 58/79 [00:03<00:00, 25.09it/s]
 77%|  | 61/79 [00:03<00:00, 25.46it/s]
 81%|  | 64/79 [00:03<00:00, 25.47it/s]
 85%| | 67/79 [00:03<00:00, 25.45it/s]
 89%| | 70/79 [00:03<00:00, 25.22it/s]
 92%|| 73/79 [00:03<00:00, 25.91it/s]
 96%|| 76/79 [00:03<00:00, 26.55it/s]
100%|| 79/79 [00:03<00:00, 27.42it/s]
, 24.82it/s]
 70%|   | 55/79 [00:02<00:00, 25.37it/s]
 73%|  | 58/79 [00:03<00:00, 25.35it/s]
 77%|  | 61/79 [00:03<00:00, 25.37it/s]
 81%|  | 64/79 [00:03<00:00, 25.52it/s]
 85%| | 67/79 [00:03<00:00, 25.70it/s]
 89%| | 70/79 [00:03<00:00, 25.64it/s]
 92%|| 73/79 [00:03<00:00, 26.16it/s]
 96%|| 76/79 [00:03<00:00, 26.84it/s]
100%|| 79/79 [00:03<00:00, 20.24it/s]
, 24.68it/s]
 70%|   | 55/79 [00:02<00:00, 25.13it/s]
 73%|  | 58/79 [00:03<00:00, 25.24it/s]
 77%|  | 61/79 [00:03<00:00, 25.60it/s]
 81%|  | 64/79 [00:03<00:00, 25.78it/s]
 85%| | 67/79 [00:03<00:00, 26.00it/s]
 89%| | 70/79 [00:03<00:00, 25.97it/s]
 92%|| 73/79 [00:03<00:00, 26.04it/s]
 96%|| 76/79 [00:03<00:00, 26.92it/s]
100%|| 79/79 [00:03<00:00, 27.06it/s]
, 24.74it/s]
 70%|   | 55/79 [00:02<00:00, 24.98it/s]
 73%|  | 58/79 [00:03<00:00, 25.04it/s]
 77%|  | 61/79 [00:03<00:00, 25.22it/s]
 81%|  | 64/79 [00:03<00:00, 25.25it/s]
 85%| | 67/79 [00:03<00:00, 25.47it/s]
 89%| | 70/79 [00:03<00:00, 25.28it/s]
 92%|| 73/79 [00:03<00:00, 25.89it/s]
 96%|| 76/79 [00:03<00:00, 26.29it/s]
100%|| 79/79 [00:03<00:00, 27.30it/s]
, 24.94it/s]
 70%|   | 55/79 [00:02<00:00, 25.40it/s]
 73%|  | 58/79 [00:03<00:00, 25.82it/s]
 77%|  | 61/79 [00:03<00:00, 25.96it/s]
 81%|  | 64/79 [00:03<00:00, 25.42it/s]
 85%| | 67/79 [00:03<00:00, 25.63it/s]
 89%| | 70/79 [00:03<00:00, 25.59it/s]
 92%|| 73/79 [00:03<00:00, 25.96it/s]
 96%|| 76/79 [00:03<00:00, 26.48it/s]
100%|| 79/79 [00:03<00:00, 27.17it/s]
, 24.88it/s]
 70%|   | 55/79 [00:02<00:00, 25.19it/s]
 73%|  | 58/79 [00:03<00:00, 25.42it/s]
 77%|  | 61/79 [00:03<00:00, 25.73it/s]
 81%|  | 64/79 [00:03<00:00, 25.89it/s]
 85%| | 67/79 [00:03<00:00, 25.98it/s]
 89%| | 70/79 [00:03<00:00, 26.07it/s]
 92%|| 73/79 [00:03<00:00, 26.45it/s]
 96%|| 76/79 [00:03<00:00, 26.95it/s]
100%|| 79/79 [00:03<00:00, 27.72it/s]
23it/s]
 68%|   | 54/79 [00:02<00:01, 24.88it/s]
 72%|  | 57/79 [00:03<00:00, 24.98it/s]
 76%|  | 60/79 [00:03<00:00, 25.17it/s]
 80%|  | 63/79 [00:03<00:00, 24.91it/s]
 84%| | 66/79 [00:03<00:00, 25.25it/s]
 87%| | 69/79 [00:03<00:00, 25.44it/s]
 91%| | 72/79 [00:03<00:00, 25.70it/s]
 95%|| 75/79 [00:03<00:00, 26.42it/s]
 99%|| 78/79 [00:03<00:00, 27.35it/s]
100%|| 79/79 [00:03<00:00, 20.13it/s]
, 24.53it/s]
 70%|   | 55/79 [00:02<00:00, 24.78it/s]
 73%|  | 58/79 [00:03<00:00, 24.93it/s]
 77%|  | 61/79 [00:03<00:00, 25.10it/s]
 81%|  | 64/79 [00:03<00:00, 25.17it/s]
 85%| | 67/79 [00:03<00:00, 25.37it/s]
 89%| | 70/79 [00:03<00:00, 25.31it/s]
 92%|| 73/79 [00:03<00:00, 25.79it/s]
 96%|| 76/79 [00:03<00:00, 26.44it/s]
100%|| 79/79 [00:03<00:00, 27.26it/s]
94it/s]
 68%|   | 54/79 [00:02<00:00, 25.02it/s]
 72%|  | 57/79 [00:03<00:00, 25.37it/s]
 76%|  | 60/79 [00:03<00:00, 25.35it/s]
 80%|  | 63/79 [00:03<00:00, 25.25it/s]
 84%| | 66/79 [00:03<00:00, 25.51it/s]
 87%| | 69/79 [00:03<00:00, 25.60it/s]
 91%| | 72/79 [00:03<00:00, 25.66it/s]
 95%|| 75/79 [00:03<00:00, 26.37it/s]
 99%|| 78/79 [00:03<00:00, 26.88it/s]
100%|| 79/79 [00:03<00:00, 19.96it/s]
, 24.24it/s]
 70%|   | 55/79 [00:02<00:00, 24.84it/s]
 73%|  | 58/79 [00:03<00:00, 25.18it/s]
 77%|  | 61/79 [00:03<00:00, 25.38it/s]
 81%|  | 64/79 [00:03<00:00, 25.28it/s]
 85%| | 67/79 [00:03<00:00, 25.43it/s]
 89%| | 70/79 [00:03<00:00, 25.85it/s]
 92%|| 73/79 [00:03<00:00, 25.67it/s]
 96%|| 76/79 [00:03<00:00, 26.37it/s]
100%|| 79/79 [00:03<00:00, 27.10it/s]
, 24.26it/s]
 70%|   | 55/79 [00:03<00:00, 24.72it/s]
 73%|  | 58/79 [00:03<00:00, 25.04it/s]
 77%|  | 61/79 [00:03<00:00, 25.01it/s]
 81%|  | 64/79 [00:03<00:00, 25.16it/s]
 85%| | 67/79 [00:03<00:00, 25.37it/s]
 89%| | 70/79 [00:03<00:00, 25.55it/s]
 92%|| 73/79 [00:03<00:00, 25.94it/s]
 96%|| 76/79 [00:03<00:00, 26.77it/s]
100%|| 79/79 [00:03<00:00, 27.66it/s]
, 23.83it/s]
 70%|   | 55/79 [00:02<00:00, 24.17it/s]
 73%|  | 58/79 [00:03<00:00, 24.48it/s]
 77%|  | 61/79 [00:03<00:00, 24.57it/s]
 81%|  | 64/79 [00:03<00:00, 24.68it/s]
 85%| | 67/79 [00:03<00:00, 25.13it/s]
 89%| | 70/79 [00:03<00:00, 24.97it/s]
 92%|| 73/79 [00:03<00:00, 25.35it/s]
 96%|| 76/79 [00:03<00:00, 26.20it/s]
100%|| 79/79 [00:03<00:00, 19.87it/s]
, 24.01it/s]
 70%|   | 55/79 [00:02<00:00, 24.73it/s]
 73%|  | 58/79 [00:03<00:00, 24.62it/s]
 77%|  | 61/79 [00:03<00:00, 24.44it/s]
 81%|  | 64/79 [00:03<00:00, 24.65it/s]
 85%| | 67/79 [00:03<00:00, 25.04it/s]
 89%| | 70/79 [00:03<00:00, 25.01it/s]
 92%|| 73/79 [00:03<00:00, 25.38it/s]
 96%|| 76/79 [00:03<00:00, 26.06it/s]
100%|| 79/79 [00:03<00:00, 26.85it/s]
, 24.09it/s]
 70%|   | 55/79 [00:03<00:00, 24.36it/s]
 73%|  | 58/79 [00:03<00:00, 24.78it/s]
 77%|  | 61/79 [00:03<00:00, 25.26it/s]
 81%|  | 64/79 [00:03<00:00, 25.25it/s]
 85%| | 67/79 [00:03<00:00, 25.46it/s]
 89%| | 70/79 [00:03<00:00, 25.74it/s]
 92%|| 73/79 [00:03<00:00, 25.91it/s]
 96%|| 76/79 [00:03<00:00, 26.55it/s]
100%|| 79/79 [00:03<00:00, 27.38it/s]
, 23.69it/s]
 70%|   | 55/79 [00:03<00:01, 23.80it/s]
 73%|  | 58/79 [00:03<00:00, 24.11it/s]
 77%|  | 61/79 [00:03<00:00, 23.91it/s]
 81%|  | 64/79 [00:03<00:00, 24.17it/s]
 85%| | 67/79 [00:03<00:00, 24.61it/s]
 89%| | 70/79 [00:03<00:00, 24.72it/s]
 92%|| 73/79 [00:03<00:00, 25.36it/s]
 96%|| 76/79 [00:03<00:00, 26.19it/s]
100%|| 79/79 [00:03<00:00, 27.09it/s]
24it/s]
 68%|   | 54/79 [00:03<00:01, 24.46it/s]
 72%|  | 57/79 [00:03<00:00, 24.92it/s]
 76%|  | 60/79 [00:03<00:00, 25.12it/s]
 80%|  | 63/79 [00:03<00:00, 25.13it/s]
 84%| | 66/79 [00:03<00:00, 25.23it/s]
 87%| | 69/79 [00:03<00:00, 25.47it/s]
 91%| | 72/79 [00:03<00:00, 25.66it/s]
 95%|| 75/79 [00:03<00:00, 26.40it/s]
 99%|| 78/79 [00:03<00:00, 27.33it/s]
100%|| 79/79 [00:04<00:00, 19.64it/s]
58it/s]
 68%|   | 54/79 [00:03<00:01, 24.24it/s]
 72%|  | 57/79 [00:03<00:00, 24.37it/s]
 76%|  | 60/79 [00:03<00:00, 24.45it/s]
 80%|  | 63/79 [00:03<00:00, 24.54it/s]
 84%| | 66/79 [00:03<00:00, 24.85it/s]
 87%| | 69/79 [00:03<00:00, 24.90it/s]
 91%| | 72/79 [00:03<00:00, 25.14it/s]
 95%|| 75/79 [00:03<00:00, 26.00it/s]
 99%|| 78/79 [00:03<00:00, 26.67it/s]
100%|| 79/79 [00:04<00:00, 19.53it/s]
, 23.88it/s]
 70%|   | 55/79 [00:03<00:00, 24.31it/s]
 73%|  | 58/79 [00:03<00:00, 24.96it/s]
 77%|  | 61/79 [00:03<00:00, 24.56it/s]
 81%|  | 64/79 [00:03<00:00, 24.84it/s]
 85%| | 67/79 [00:03<00:00, 25.03it/s]
 89%| | 70/79 [00:03<00:00, 24.92it/s]
 92%|| 73/79 [00:03<00:00, 25.26it/s]
 96%|| 76/79 [00:03<00:00, 26.08it/s]
100%|| 79/79 [00:03<00:00, 27.02it/s]
, 23.70it/s]
 70%|   | 55/79 [00:03<00:00, 24.04it/s]
 73%|  | 58/79 [00:03<00:00, 24.38it/s]
 77%|  | 61/79 [00:03<00:00, 24.38it/s]
 81%|  | 64/79 [00:03<00:00, 24.64it/s]
 85%| | 67/79 [00:03<00:00, 24.93it/s]
 89%| | 70/79 [00:03<00:00, 24.92it/s]
 92%|| 73/79 [00:03<00:00, 25.49it/s]
 96%|| 76/79 [00:03<00:00, 26.25it/s]
100%|| 79/79 [00:04<00:00, 27.16it/s]
, 23.74it/s]
 70%|   | 55/79 [00:03<00:00, 24.17it/s]
 73%|  | 58/79 [00:03<00:00, 24.43it/s]
 77%|  | 61/79 [00:03<00:00, 24.50it/s]
 81%|  | 64/79 [00:03<00:00, 24.75it/s]
 85%| | 67/79 [00:03<00:00, 24.76it/s]
 89%| | 70/79 [00:03<00:00, 24.95it/s]
 92%|| 73/79 [00:03<00:00, 25.17it/s]
 96%|| 76/79 [00:03<00:00, 25.81it/s]
100%|| 79/79 [00:03<00:00, 26.60it/s]
, 24.12it/s]
 70%|   | 55/79 [00:03<00:00, 24.66it/s]
 73%|  | 58/79 [00:03<00:00, 24.92it/s]
 77%|  | 61/79 [00:03<00:00, 25.12it/s]
 81%|  | 64/79 [00:03<00:00, 25.20it/s]
 85%| | 67/79 [00:03<00:00, 25.46it/s]
 89%| | 70/79 [00:03<00:00, 25.28it/s]
 92%|| 73/79 [00:03<00:00, 25.61it/s]
 96%|| 76/79 [00:03<00:00, 26.19it/s]
100%|| 79/79 [00:03<00:00, 26.91it/s]
, 23.45it/s]
 70%|   | 55/79 [00:03<00:00, 24.19it/s]
 73%|  | 58/79 [00:03<00:00, 24.47it/s]
 77%|  | 61/79 [00:03<00:00, 24.77it/s]
 81%|  | 64/79 [00:03<00:00, 25.06it/s]
 85%| | 67/79 [00:03<00:00, 25.24it/s]
 89%| | 70/79 [00:03<00:00, 25.27it/s]
 92%|| 73/79 [00:03<00:00, 25.51it/s]
 96%|| 76/79 [00:03<00:00, 26.23it/s]
100%|| 79/79 [00:04<00:00, 26.77it/s]
, 23.29it/s]
 70%|   | 55/79 [00:03<00:01, 23.91it/s]
 73%|  | 58/79 [00:03<00:00, 24.11it/s]
 77%|  | 61/79 [00:03<00:00, 24.47it/s]
 81%|  | 64/79 [00:03<00:00, 24.69it/s]
 85%| | 67/79 [00:03<00:00, 24.89it/s]
 89%| | 70/79 [00:03<00:00, 24.92it/s]
 92%|| 73/79 [00:03<00:00, 25.08it/s]
 96%|| 76/79 [00:03<00:00, 25.66it/s]
100%|| 79/79 [00:04<00:00, 26.39it/s]
, 23.27it/s]
 70%|   | 55/79 [00:03<00:01, 23.55it/s]
 73%|  | 58/79 [00:03<00:00, 23.88it/s]
 77%|  | 61/79 [00:03<00:00, 23.55it/s]
 81%|  | 64/79 [00:03<00:00, 23.82it/s]
 85%| | 67/79 [00:03<00:00, 24.21it/s]
 89%| | 70/79 [00:03<00:00, 24.29it/s]
 92%|| 73/79 [00:03<00:00, 24.88it/s]
 96%|| 76/79 [00:03<00:00, 25.57it/s]
100%|| 79/79 [00:04<00:00, 26.52it/s]
, 22.55it/s]
 70%|   | 55/79 [00:03<00:01, 23.19it/s]
 73%|  | 58/79 [00:03<00:00, 23.61it/s]
 77%|  | 61/79 [00:03<00:00, 23.76it/s]
 81%|  | 64/79 [00:03<00:00, 23.77it/s]
 85%| | 67/79 [00:03<00:00, 24.12it/s]
 89%| | 70/79 [00:03<00:00, 24.23it/s]
 92%|| 73/79 [00:03<00:00, 24.63it/s]
 96%|| 76/79 [00:03<00:00, 25.44it/s]
100%|| 79/79 [00:04<00:00, 26.34it/s]
, 23.24it/s]
 70%|   | 55/79 [00:03<00:01, 23.59it/s]
 73%|  | 58/79 [00:03<00:00, 24.07it/s]
 77%|  | 61/79 [00:03<00:00, 24.34it/s]
 81%|  | 64/79 [00:03<00:00, 24.36it/s]
 85%| | 67/79 [00:03<00:00, 24.62it/s]
 89%| | 70/79 [00:03<00:00, 24.62it/s]
 92%|| 73/79 [00:03<00:00, 24.66it/s]
 96%|| 76/79 [00:03<00:00, 25.42it/s]
100%|| 79/79 [00:04<00:00, 26.30it/s]
, 23.01it/s]
 70%|   | 55/79 [00:03<00:01, 23.29it/s]
 73%|  | 58/79 [00:03<00:00, 23.59it/s]
 77%|  | 61/79 [00:03<00:00, 23.97it/s]
 81%|  | 64/79 [00:03<00:00, 23.80it/s]
 85%| | 67/79 [00:03<00:00, 23.85it/s]
 89%| | 70/79 [00:03<00:00, 23.90it/s]
 92%|| 73/79 [00:03<00:00, 24.43it/s]
 96%|| 76/79 [00:04<00:00, 25.16it/s]
100%|| 79/79 [00:04<00:00, 26.16it/s]
2020-06-23 16:39:58,190 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.220812 (0.02701319580078125 s / img per device, on 32 devices)
2020-06-23 16:39:58,209 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:39:58,209 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:39:58,228 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592955605188, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 12, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592955605189, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 12}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:40:06,622 maskrcnn_benchmark.trainer INFO: eta: 1:02:51  iter: 10100  loss: 0.5059 (0.7450)  loss_classifier: 0.1654 (0.2728)  loss_box_reg: 0.0763 (0.1201)  loss_mask: 0.2414 (0.2947)  loss_objectness: 0.0082 (0.0368)  loss_rpn_box_reg: 0.0067 (0.0206)  time: 0.1096 (0.1261)  data: 0.0015 (0.0185)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:08,796 maskrcnn_benchmark.trainer INFO: eta: 1:02:48  iter: 10120  loss: 0.5604 (0.7447)  loss_classifier: 0.1809 (0.2727)  loss_box_reg: 0.0942 (0.1200)  loss_mask: 0.2334 (0.2946)  loss_objectness: 0.0242 (0.0368)  loss_rpn_box_reg: 0.0066 (0.0206)  time: 0.1081 (0.1261)  data: 0.0016 (0.0185)  lr: 0.016000  max mem: 5193
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 16:40:10,968 maskrcnn_benchmark.trainer INFO: eta: 1:02:44  iter: 10140  loss: 0.4900 (0.7442)  loss_classifier: 0.1549 (0.2725)  loss_box_reg: 0.0761 (0.1200)  loss_mask: 0.2295 (0.2945)  loss_objectness: 0.0136 (0.0367)  loss_rpn_box_reg: 0.0092 (0.0206)  time: 0.1080 (0.1261)  data: 0.0015 (0.0185)  lr: 0.016000  max mem: 5193
DONE (t=0.59s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.46s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36607
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.58030
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.39579
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21005
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.39673
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47194
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30633
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.48497
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.50966
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.32213
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.54706
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.64428
2020-06-23 16:40:13,149 maskrcnn_benchmark.trainer INFO: eta: 1:02:41  iter: 10160  loss: 0.5517 (0.7440)  loss_classifier: 0.1952 (0.2723)  loss_box_reg: 0.0930 (0.1199)  loss_mask: 0.2440 (0.2944)  loss_objectness: 0.0290 (0.0367)  loss_rpn_box_reg: 0.0145 (0.0206)  time: 0.1084 (0.1260)  data: 0.0015 (0.0184)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:15,311 maskrcnn_benchmark.trainer INFO: eta: 1:02:37  iter: 10180  loss: 0.5080 (0.7437)  loss_classifier: 0.1742 (0.2722)  loss_box_reg: 0.0733 (0.1199)  loss_mask: 0.2451 (0.2943)  loss_objectness: 0.0139 (0.0367)  loss_rpn_box_reg: 0.0054 (0.0206)  time: 0.1078 (0.1260)  data: 0.0015 (0.0184)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:17,504 maskrcnn_benchmark.trainer INFO: eta: 1:02:34  iter: 10200  loss: 0.5636 (0.7433)  loss_classifier: 0.1849 (0.2720)  loss_box_reg: 0.0824 (0.1199)  loss_mask: 0.2356 (0.2942)  loss_objectness: 0.0188 (0.0367)  loss_rpn_box_reg: 0.0070 (0.0206)  time: 0.1092 (0.1260)  data: 0.0015 (0.0184)  lr: 0.016000  max mem: 5193
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
DONE (t=1.56s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:40:19,674 maskrcnn_benchmark.trainer INFO: eta: 1:02:30  iter: 10220  loss: 0.5346 (0.7430)  loss_classifier: 0.1698 (0.2718)  loss_box_reg: 0.0829 (0.1198)  loss_mask: 0.2432 (0.2941)  loss_objectness: 0.0157 (0.0367)  loss_rpn_box_reg: 0.0056 (0.0206)  time: 0.1086 (0.1259)  data: 0.0015 (0.0183)  lr: 0.016000  max mem: 5193
DONE (t=2.35s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.33332
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.54580
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.35461
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15105
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.35774
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49147
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28758
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.44503
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.46516
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.26988
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50371
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.61308
2020-06-23 16:40:21,833 maskrcnn_benchmark.trainer INFO: eta: 1:02:26  iter: 10240  loss: 0.5225 (0.7426)  loss_classifier: 0.1760 (0.2717)  loss_box_reg: 0.0911 (0.1197)  loss_mask: 0.2500 (0.2940)  loss_objectness: 0.0113 (0.0366)  loss_rpn_box_reg: 0.0069 (0.0205)  time: 0.1074 (0.1259)  data: 0.0015 (0.0183)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:22,081 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3660746099814546, segm mAP: 0.3333218118763742
:::MLLOG {"namespace": "", "time_ms": 1592955622081, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.3660746099814546, "SEGM": 0.3333218118763742}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1592955622082, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 11}}
2020-06-23 16:40:24,140 maskrcnn_benchmark.trainer INFO: eta: 1:02:23  iter: 10260  loss: 0.5118 (0.7422)  loss_classifier: 0.1621 (0.2715)  loss_box_reg: 0.0727 (0.1197)  loss_mask: 0.2458 (0.2939)  loss_objectness: 0.0109 (0.0366)  loss_rpn_box_reg: 0.0051 (0.0205)  time: 0.1080 (0.1259)  data: 0.0015 (0.0183)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:26,321 maskrcnn_benchmark.trainer INFO: eta: 1:02:20  iter: 10280  loss: 0.5974 (0.7419)  loss_classifier: 0.1907 (0.2713)  loss_box_reg: 0.0770 (0.1196)  loss_mask: 0.2254 (0.2938)  loss_objectness: 0.0137 (0.0366)  loss_rpn_box_reg: 0.0063 (0.0205)  time: 0.1083 (0.1259)  data: 0.0015 (0.0182)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:28,486 maskrcnn_benchmark.trainer INFO: eta: 1:02:16  iter: 10300  loss: 0.6414 (0.7417)  loss_classifier: 0.2375 (0.2712)  loss_box_reg: 0.0955 (0.1196)  loss_mask: 0.2577 (0.2938)  loss_objectness: 0.0150 (0.0365)  loss_rpn_box_reg: 0.0091 (0.0205)  time: 0.1078 (0.1258)  data: 0.0014 (0.0182)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:30,666 maskrcnn_benchmark.trainer INFO: eta: 1:02:13  iter: 10320  loss: 0.5654 (0.7413)  loss_classifier: 0.1665 (0.2711)  loss_box_reg: 0.0943 (0.1195)  loss_mask: 0.2342 (0.2937)  loss_objectness: 0.0142 (0.0365)  loss_rpn_box_reg: 0.0063 (0.0205)  time: 0.1091 (0.1258)  data: 0.0014 (0.0182)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:32,834 maskrcnn_benchmark.trainer INFO: eta: 1:02:09  iter: 10340  loss: 0.5462 (0.7409)  loss_classifier: 0.1760 (0.2709)  loss_box_reg: 0.0921 (0.1195)  loss_mask: 0.2407 (0.2936)  loss_objectness: 0.0143 (0.0365)  loss_rpn_box_reg: 0.0054 (0.0205)  time: 0.1083 (0.1258)  data: 0.0014 (0.0181)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:35,009 maskrcnn_benchmark.trainer INFO: eta: 1:02:06  iter: 10360  loss: 0.5195 (0.7406)  loss_classifier: 0.1625 (0.2707)  loss_box_reg: 0.1020 (0.1194)  loss_mask: 0.2377 (0.2935)  loss_objectness: 0.0125 (0.0364)  loss_rpn_box_reg: 0.0070 (0.0205)  time: 0.1087 (0.1257)  data: 0.0014 (0.0181)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:37,201 maskrcnn_benchmark.trainer INFO: eta: 1:02:02  iter: 10380  loss: 0.5346 (0.7402)  loss_classifier: 0.1815 (0.2706)  loss_box_reg: 0.1004 (0.1194)  loss_mask: 0.2253 (0.2934)  loss_objectness: 0.0141 (0.0364)  loss_rpn_box_reg: 0.0078 (0.0205)  time: 0.1087 (0.1257)  data: 0.0014 (0.0181)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:39,351 maskrcnn_benchmark.trainer INFO: eta: 1:01:59  iter: 10400  loss: 0.5103 (0.7399)  loss_classifier: 0.1585 (0.2704)  loss_box_reg: 0.0794 (0.1193)  loss_mask: 0.2409 (0.2933)  loss_objectness: 0.0138 (0.0364)  loss_rpn_box_reg: 0.0090 (0.0205)  time: 0.1075 (0.1257)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:41,510 maskrcnn_benchmark.trainer INFO: eta: 1:01:55  iter: 10420  loss: 0.5319 (0.7395)  loss_classifier: 0.1835 (0.2702)  loss_box_reg: 0.0860 (0.1193)  loss_mask: 0.2483 (0.2932)  loss_objectness: 0.0140 (0.0363)  loss_rpn_box_reg: 0.0087 (0.0205)  time: 0.1068 (0.1256)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:43,655 maskrcnn_benchmark.trainer INFO: eta: 1:01:52  iter: 10440  loss: 0.5761 (0.7393)  loss_classifier: 0.1956 (0.2701)  loss_box_reg: 0.0970 (0.1193)  loss_mask: 0.2644 (0.2931)  loss_objectness: 0.0171 (0.0363)  loss_rpn_box_reg: 0.0145 (0.0205)  time: 0.1068 (0.1256)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:45,815 maskrcnn_benchmark.trainer INFO: eta: 1:01:48  iter: 10460  loss: 0.5463 (0.7389)  loss_classifier: 0.1727 (0.2700)  loss_box_reg: 0.0890 (0.1192)  loss_mask: 0.2358 (0.2930)  loss_objectness: 0.0111 (0.0363)  loss_rpn_box_reg: 0.0066 (0.0204)  time: 0.1075 (0.1255)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:47,978 maskrcnn_benchmark.trainer INFO: eta: 1:01:45  iter: 10480  loss: 0.5778 (0.7386)  loss_classifier: 0.1977 (0.2698)  loss_box_reg: 0.0983 (0.1192)  loss_mask: 0.2644 (0.2930)  loss_objectness: 0.0146 (0.0362)  loss_rpn_box_reg: 0.0042 (0.0204)  time: 0.1080 (0.1255)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:50,143 maskrcnn_benchmark.trainer INFO: eta: 1:01:41  iter: 10500  loss: 0.5289 (0.7383)  loss_classifier: 0.1616 (0.2696)  loss_box_reg: 0.0871 (0.1191)  loss_mask: 0.2407 (0.2929)  loss_objectness: 0.0173 (0.0362)  loss_rpn_box_reg: 0.0086 (0.0204)  time: 0.1086 (0.1255)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:52,292 maskrcnn_benchmark.trainer INFO: eta: 1:01:38  iter: 10520  loss: 0.6051 (0.7379)  loss_classifier: 0.1969 (0.2695)  loss_box_reg: 0.0968 (0.1191)  loss_mask: 0.2421 (0.2928)  loss_objectness: 0.0116 (0.0362)  loss_rpn_box_reg: 0.0103 (0.0204)  time: 0.1073 (0.1254)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:54,463 maskrcnn_benchmark.trainer INFO: eta: 1:01:34  iter: 10540  loss: 0.4959 (0.7375)  loss_classifier: 0.1482 (0.2693)  loss_box_reg: 0.0819 (0.1190)  loss_mask: 0.2122 (0.2927)  loss_objectness: 0.0096 (0.0362)  loss_rpn_box_reg: 0.0071 (0.0204)  time: 0.1077 (0.1254)  data: 0.0014 (0.0178)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:56,635 maskrcnn_benchmark.trainer INFO: eta: 1:01:31  iter: 10560  loss: 0.5612 (0.7372)  loss_classifier: 0.1864 (0.2691)  loss_box_reg: 0.0913 (0.1190)  loss_mask: 0.2381 (0.2926)  loss_objectness: 0.0155 (0.0361)  loss_rpn_box_reg: 0.0100 (0.0204)  time: 0.1082 (0.1254)  data: 0.0015 (0.0178)  lr: 0.016000  max mem: 5193
2020-06-23 16:40:58,803 maskrcnn_benchmark.trainer INFO: eta: 1:01:27  iter: 10580  loss: 0.5361 (0.7369)  loss_classifier: 0.1777 (0.2690)  loss_box_reg: 0.0964 (0.1190)  loss_mask: 0.2398 (0.2925)  loss_objectness: 0.0183 (0.0361)  loss_rpn_box_reg: 0.0080 (0.0204)  time: 0.1083 (0.1254)  data: 0.0016 (0.0178)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:00,980 maskrcnn_benchmark.trainer INFO: eta: 1:01:24  iter: 10600  loss: 0.5273 (0.7365)  loss_classifier: 0.1760 (0.2688)  loss_box_reg: 0.0803 (0.1189)  loss_mask: 0.2410 (0.2924)  loss_objectness: 0.0123 (0.0361)  loss_rpn_box_reg: 0.0050 (0.0204)  time: 0.1084 (0.1253)  data: 0.0015 (0.0177)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:03,153 maskrcnn_benchmark.trainer INFO: eta: 1:01:21  iter: 10620  loss: 0.4845 (0.7361)  loss_classifier: 0.1492 (0.2686)  loss_box_reg: 0.0716 (0.1188)  loss_mask: 0.2454 (0.2923)  loss_objectness: 0.0118 (0.0360)  loss_rpn_box_reg: 0.0059 (0.0203)  time: 0.1087 (0.1253)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:05,318 maskrcnn_benchmark.trainer INFO: eta: 1:01:17  iter: 10640  loss: 0.4976 (0.7357)  loss_classifier: 0.1486 (0.2684)  loss_box_reg: 0.0841 (0.1188)  loss_mask: 0.2403 (0.2922)  loss_objectness: 0.0125 (0.0360)  loss_rpn_box_reg: 0.0074 (0.0203)  time: 0.1076 (0.1253)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:07,481 maskrcnn_benchmark.trainer INFO: eta: 1:01:14  iter: 10660  loss: 0.4644 (0.7353)  loss_classifier: 0.1688 (0.2682)  loss_box_reg: 0.0777 (0.1187)  loss_mask: 0.2321 (0.2921)  loss_objectness: 0.0101 (0.0360)  loss_rpn_box_reg: 0.0037 (0.0203)  time: 0.1074 (0.1252)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:09,658 maskrcnn_benchmark.trainer INFO: eta: 1:01:10  iter: 10680  loss: 0.5804 (0.7351)  loss_classifier: 0.1984 (0.2681)  loss_box_reg: 0.0967 (0.1187)  loss_mask: 0.2598 (0.2921)  loss_objectness: 0.0137 (0.0360)  loss_rpn_box_reg: 0.0103 (0.0203)  time: 0.1084 (0.1252)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:11,831 maskrcnn_benchmark.trainer INFO: eta: 1:01:07  iter: 10700  loss: 0.5847 (0.7348)  loss_classifier: 0.1722 (0.2679)  loss_box_reg: 0.0938 (0.1186)  loss_mask: 0.2492 (0.2920)  loss_objectness: 0.0177 (0.0359)  loss_rpn_box_reg: 0.0101 (0.0203)  time: 0.1087 (0.1252)  data: 0.0015 (0.0176)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:14,004 maskrcnn_benchmark.trainer INFO: eta: 1:01:03  iter: 10720  loss: 0.6177 (0.7346)  loss_classifier: 0.2258 (0.2679)  loss_box_reg: 0.1077 (0.1186)  loss_mask: 0.2628 (0.2919)  loss_objectness: 0.0210 (0.0359)  loss_rpn_box_reg: 0.0106 (0.0203)  time: 0.1085 (0.1251)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:16,179 maskrcnn_benchmark.trainer INFO: eta: 1:01:00  iter: 10740  loss: 0.5154 (0.7342)  loss_classifier: 0.1443 (0.2677)  loss_box_reg: 0.0700 (0.1185)  loss_mask: 0.2288 (0.2918)  loss_objectness: 0.0097 (0.0359)  loss_rpn_box_reg: 0.0065 (0.0203)  time: 0.1080 (0.1251)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:18,349 maskrcnn_benchmark.trainer INFO: eta: 1:00:57  iter: 10760  loss: 0.5297 (0.7339)  loss_classifier: 0.1893 (0.2675)  loss_box_reg: 0.0741 (0.1185)  loss_mask: 0.2416 (0.2917)  loss_objectness: 0.0168 (0.0359)  loss_rpn_box_reg: 0.0054 (0.0203)  time: 0.1078 (0.1251)  data: 0.0015 (0.0175)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:20,538 maskrcnn_benchmark.trainer INFO: eta: 1:00:53  iter: 10780  loss: 0.5503 (0.7336)  loss_classifier: 0.1476 (0.2673)  loss_box_reg: 0.0782 (0.1184)  loss_mask: 0.2331 (0.2916)  loss_objectness: 0.0121 (0.0358)  loss_rpn_box_reg: 0.0087 (0.0203)  time: 0.1090 (0.1250)  data: 0.0015 (0.0175)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:22,722 maskrcnn_benchmark.trainer INFO: eta: 1:00:50  iter: 10800  loss: 0.6186 (0.7334)  loss_classifier: 0.2002 (0.2672)  loss_box_reg: 0.1085 (0.1184)  loss_mask: 0.2617 (0.2916)  loss_objectness: 0.0221 (0.0358)  loss_rpn_box_reg: 0.0061 (0.0203)  time: 0.1087 (0.1250)  data: 0.0016 (0.0174)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:24,900 maskrcnn_benchmark.trainer INFO: eta: 1:00:47  iter: 10820  loss: 0.4785 (0.7330)  loss_classifier: 0.1470 (0.2670)  loss_box_reg: 0.0585 (0.1183)  loss_mask: 0.2362 (0.2915)  loss_objectness: 0.0155 (0.0358)  loss_rpn_box_reg: 0.0109 (0.0203)  time: 0.1085 (0.1250)  data: 0.0013 (0.0174)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:27,071 maskrcnn_benchmark.trainer INFO: eta: 1:00:43  iter: 10840  loss: 0.4828 (0.7326)  loss_classifier: 0.1690 (0.2669)  loss_box_reg: 0.0707 (0.1183)  loss_mask: 0.2125 (0.2913)  loss_objectness: 0.0195 (0.0358)  loss_rpn_box_reg: 0.0102 (0.0203)  time: 0.1089 (0.1250)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:29,244 maskrcnn_benchmark.trainer INFO: eta: 1:00:40  iter: 10860  loss: 0.5353 (0.7324)  loss_classifier: 0.1728 (0.2667)  loss_box_reg: 0.0843 (0.1183)  loss_mask: 0.2560 (0.2913)  loss_objectness: 0.0151 (0.0358)  loss_rpn_box_reg: 0.0067 (0.0203)  time: 0.1084 (0.1249)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:31,404 maskrcnn_benchmark.trainer INFO: eta: 1:00:36  iter: 10880  loss: 0.5031 (0.7320)  loss_classifier: 0.1562 (0.2666)  loss_box_reg: 0.0786 (0.1182)  loss_mask: 0.2421 (0.2912)  loss_objectness: 0.0164 (0.0357)  loss_rpn_box_reg: 0.0062 (0.0203)  time: 0.1078 (0.1249)  data: 0.0013 (0.0173)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:33,573 maskrcnn_benchmark.trainer INFO: eta: 1:00:33  iter: 10900  loss: 0.5961 (0.7318)  loss_classifier: 0.1852 (0.2665)  loss_box_reg: 0.1023 (0.1182)  loss_mask: 0.2339 (0.2911)  loss_objectness: 0.0203 (0.0357)  loss_rpn_box_reg: 0.0120 (0.0203)  time: 0.1085 (0.1249)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:35,739 maskrcnn_benchmark.trainer INFO: eta: 1:00:30  iter: 10920  loss: 0.5167 (0.7315)  loss_classifier: 0.1676 (0.2663)  loss_box_reg: 0.0869 (0.1181)  loss_mask: 0.2446 (0.2910)  loss_objectness: 0.0107 (0.0357)  loss_rpn_box_reg: 0.0045 (0.0203)  time: 0.1083 (0.1248)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:37,906 maskrcnn_benchmark.trainer INFO: eta: 1:00:26  iter: 10940  loss: 0.5589 (0.7312)  loss_classifier: 0.1568 (0.2662)  loss_box_reg: 0.1047 (0.1181)  loss_mask: 0.2613 (0.2910)  loss_objectness: 0.0114 (0.0357)  loss_rpn_box_reg: 0.0064 (0.0203)  time: 0.1074 (0.1248)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:40,071 maskrcnn_benchmark.trainer INFO: eta: 1:00:23  iter: 10960  loss: 0.5635 (0.7308)  loss_classifier: 0.1636 (0.2660)  loss_box_reg: 0.0824 (0.1180)  loss_mask: 0.2339 (0.2909)  loss_objectness: 0.0127 (0.0356)  loss_rpn_box_reg: 0.0034 (0.0203)  time: 0.1080 (0.1248)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5193
2020-06-23 16:41:42,234 maskrcnn_benchmark.trainer INFO: eta: 1:00:20  iter: 10980  loss: 0.5663 (0.7305)  loss_classifier: 0.1909 (0.2659)  loss_box_reg: 0.0887 (0.1180)  loss_mask: 0.2575 (0.2908)  loss_objectness: 0.0176 (0.0356)  loss_rpn_box_reg: 0.0086 (0.0202)  time: 0.1079 (0.1247)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5193

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0


Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0
Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0


Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0
Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0

Grad overflow on iteration  10993
Using dynamic loss scale of  65536.0
2020-06-23 16:41:44,411 maskrcnn_benchmark.trainer INFO: eta: 1:00:16  iter: 11000  loss: 0.5456 (0.7303)  loss_classifier: 0.1788 (0.2657)  loss_box_reg: 0.0855 (0.1180)  loss_mask: 0.2464 (0.2907)  loss_objectness: 0.0196 (0.0356)  loss_rpn_box_reg: 0.0092 (0.0202)  time: 0.1085 (0.1247)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5193
:::MLLOG {"namespace": "", "time_ms": 1592955704833, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 12}}
:::MLLOG {"namespace": "", "time_ms": 1592955704833, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 12}}
:::MLLOG {"namespace": "", "time_ms": 1592955704833, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 12}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 16:41:45,072 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
Done (t=0.27s)
creating index...
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 16:41:45,379 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:29,  1.15s/it]
  4%|         | 3/79 [00:01<01:02,  1.22it/s]
  8%|         | 6/79 [00:01<00:42,  1.71it/s]
 11%|        | 9/79 [00:01<00:29,  2.37it/s]
 15%|        | 12/79 [00:01<00:20,  3.26it/s]
 19%|        | 15/79 [00:01<00:14,  4.42it/s]
 23%|       | 18/79 [00:01<00:10,  5.88it/s]
 27%|       | 21/79 [00:01<00:07,  7.68it/s]
 30%|       | 24/79 [00:02<00:05,  9.77it/s]
 34%|      | 27/79 [00:02<00:04, 12.02it/s]
 38%|      | 30/79 [00:02<00:03, 14.44it/s]
 42%|     | 33/79 [00:02<00:02, 16.69it/s]
 46%|     | 36/79 [00:02<00:02, 18.77it/s]
 49%|     | 39/79 [00:02<00:01, 20.55it/s]
 53%|    | 42/79 [00:02<00:01, 21.89it/s]
 57%|    | 45/79 [00:02<00:01, 23.00it/s]
 61%|    | 48/79 [00:02<00:01, 23.93it/s]
 65%|   | 51/79 [00:03<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:29,  1.15s/it]
  4%|         | 3/79 [00:01<01:02,  1.21it/s]
  8%|         | 6/79 [00:01<00:42,  1.70it/s]
 11%|        | 9/79 [00:01<00:29,  2.36it/s]
 15%|        | 12/79 [00:01<00:20,  3.25it/s]
 19%|        | 15/79 [00:01<00:14,  4.40it/s]
 23%|       | 18/79 [00:01<00:10,  5.85it/s]
 27%|       | 21/79 [00:01<00:07,  7.63it/s]
 30%|       | 24/79 [00:02<00:05,  9.69it/s]
 34%|      | 27/79 [00:02<00:04, 11.94it/s]
 38%|      | 30/79 [00:02<00:03, 14.28it/s]
 42%|     | 33/79 [00:02<00:02, 16.45it/s]
 46%|     | 36/79 [00:02<00:02, 18.59it/s]
 49%|     | 39/79 [00:02<00:01, 20.28it/s]
 53%|    | 42/79 [00:02<00:01, 21.65it/s]
 57%|    | 45/79 [00:02<00:01, 22.76it/s]
 61%|    | 48/79 [00:03<00:01, 23.53it/s]
 65%|   | 51/79 [00:03<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:28,  1.14s/it]
  3%|         | 2/79 [00:01<01:04,  1.19it/s]
  6%|         | 5/79 [00:01<00:44,  1.66it/s]
 10%|         | 8/79 [00:01<00:30,  2.31it/s]
 14%|        | 11/79 [00:01<00:21,  3.17it/s]
 18%|        | 14/79 [00:01<00:15,  4.31it/s]
 22%|       | 17/79 [00:01<00:10,  5.74it/s]
 25%|       | 20/79 [00:01<00:07,  7.50it/s]
 29%|       | 23/79 [00:02<00:05,  9.54it/s]
 33%|      | 26/79 [00:02<00:04, 11.74it/s]
 37%|      | 29/79 [00:02<00:03, 14.18it/s]
 41%|      | 32/79 [00:02<00:02, 16.39it/s]
 44%|     | 35/79 [00:02<00:02, 18.47it/s]
 48%|     | 38/79 [00:02<00:02, 19.99it/s]
 52%|    | 41/79 [00:02<00:01, 21.46it/s]
 56%|    | 44/79 [00:02<00:01, 22.49it/s]
 59%|    | 47/79 [00:03<00:01, 23.46it/s]
 63%|   | 50/79 [00:03<00:01, 24.10it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:32,  1.18s/it]
  4%|         | 3/79 [00:01<01:04,  1.19it/s]
  8%|         | 6/79 [00:01<00:44,  1.66it/s]
 11%|        | 9/79 [00:01<00:30,  2.31it/s]
 15%|        | 12/79 [00:01<00:21,  3.18it/s]
 19%|        | 15/79 [00:01<00:14,  4.31it/s]
 23%|       | 18/79 [00:01<00:10,  5.74it/s]
 27%|       | 21/79 [00:01<00:07,  7.48it/s]
 30%|       | 24/79 [00:02<00:05,  9.52it/s]
 34%|      | 27/79 [00:02<00:04, 11.72it/s]
 38%|      | 30/79 [00:02<00:03, 14.01it/s]
 42%|     | 33/79 [00:02<00:02, 16.16it/s]
 46%|     | 36/79 [00:02<00:02, 18.12it/s]
 49%|     | 39/79 [00:02<00:02, 19.78it/s]
 53%|    | 42/79 [00:02<00:01, 21.11it/s]
 57%|    | 45/79 [00:02<00:01, 21.96it/s]
 61%|    | 48/79 [00:03<00:01, 22.88it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:29,  1.14s/it]
  3%|         | 2/79 [00:01<01:04,  1.19it/s]
  6%|         | 5/79 [00:01<00:44,  1.67it/s]
 10%|         | 8/79 [00:01<00:30,  2.31it/s]
 14%|        | 11/79 [00:01<00:21,  3.18it/s]
 18%|        | 14/79 [00:01<00:15,  4.30it/s]
 22%|       | 17/79 [00:01<00:10,  5.70it/s]
 25%|       | 20/79 [00:02<00:07,  7.42it/s]
 29%|       | 23/79 [00:02<00:05,  9.40it/s]
 33%|      | 26/79 [00:02<00:04, 11.57it/s]
 37%|      | 29/79 [00:02<00:03, 13.82it/s]
 41%|      | 32/79 [00:02<00:02, 15.97it/s]
 44%|     | 35/79 [00:02<00:02, 17.98it/s]
 48%|     | 38/79 [00:02<00:02, 19.62it/s]
 52%|    | 41/79 [00:02<00:01, 21.10it/s]
 56%|    | 44/79 [00:02<00:01, 22.00it/s]
 59%|    | 47/79 [00:03<00:01, 23.03it/s]
 63%|   | 50/79 [00:03<00:01, 23.66it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:35,  1.22s/it]
  5%|         | 4/79 [00:01<01:04,  1.16it/s]
  9%|         | 7/79 [00:01<00:44,  1.62it/s]
 13%|        | 10/79 [00:01<00:30,  2.25it/s]
 16%|        | 13/79 [00:01<00:21,  3.11it/s]
 20%|        | 16/79 [00:01<00:14,  4.23it/s]
 24%|       | 19/79 [00:01<00:10,  5.63it/s]
 28%|       | 22/79 [00:02<00:07,  7.37it/s]
 32%|      | 25/79 [00:02<00:05,  9.36it/s]
 35%|      | 28/79 [00:02<00:04, 11.51it/s]
 39%|      | 31/79 [00:02<00:03, 13.84it/s]
 43%|     | 34/79 [00:02<00:02, 15.96it/s]
 47%|     | 37/79 [00:02<00:02, 18.05it/s]
 51%|     | 40/79 [00:02<00:01, 19.76it/s]
 54%|    | 43/79 [00:02<00:01, 21.40it/s]
 58%|    | 46/79 [00:02<00:01, 22.51it/s]
 62%|   | 49/79 [00:03<00:01, 23.26it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:34,  1.21s/it]
  5%|         | 4/79 [00:01<01:04,  1.16it/s]
  9%|         | 7/79 [00:01<00:44,  1.63it/s]
 13%|        | 10/79 [00:01<00:30,  2.26it/s]
 16%|        | 13/79 [00:01<00:21,  3.12it/s]
 20%|        | 16/79 [00:01<00:14,  4.23it/s]
 24%|       | 19/79 [00:01<00:10,  5.64it/s]
 28%|       | 22/79 [00:02<00:07,  7.36it/s]
 32%|      | 25/79 [00:02<00:05,  9.39it/s]
 35%|      | 28/79 [00:02<00:04, 11.60it/s]
 39%|      | 31/79 [00:02<00:03, 13.87it/s]
 43%|     | 34/79 [00:02<00:02, 16.09it/s]
 47%|     | 37/79 [00:02<00:02, 18.13it/s]
 51%|     | 40/79 [00:02<00:01, 19.83it/s]
 54%|    | 43/79 [00:02<00:01, 21.27it/s]
 58%|    | 46/79 [00:02<00:01, 22.45it/s]
 62%|   | 49/79 [00:03<00:01, 23.57it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:35,  1.22s/it]
  4%|         | 3/79 [00:01<01:06,  1.15it/s]
  8%|         | 6/79 [00:01<00:45,  1.61it/s]
 11%|        | 9/79 [00:01<00:31,  2.23it/s]
 15%|        | 12/79 [00:01<00:21,  3.07it/s]
 19%|        | 15/79 [00:01<00:15,  4.17it/s]
 23%|       | 18/79 [00:01<00:10,  5.56it/s]
 27%|       | 21/79 [00:02<00:07,  7.26it/s]
 30%|       | 24/79 [00:02<00:05,  9.24it/s]
 34%|      | 27/79 [00:02<00:04, 11.42it/s]
 38%|      | 30/79 [00:02<00:03, 13.66it/s]
 42%|     | 33/79 [00:02<00:02, 15.89it/s]
 46%|     | 36/79 [00:02<00:02, 18.00it/s]
 49%|     | 39/79 [00:02<00:02, 19.65it/s]
 53%|    | 42/79 [00:02<00:01, 21.29it/s]
 57%|    | 45/79 [00:02<00:01, 22.62it/s]
 61%|    | 48/79 [00:03<00:01, 23.33it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:36,  1.23s/it]
  5%|         | 4/79 [00:01<01:05,  1.14it/s]
  9%|         | 7/79 [00:01<00:45,  1.60it/s]
 13%|        | 10/79 [00:01<00:31,  2.22it/s]
 16%|        | 13/79 [00:01<00:21,  3.07it/s]
 20%|        | 16/79 [00:01<00:15,  4.16it/s]
 24%|       | 19/79 [00:01<00:10,  5.58it/s]
 28%|       | 22/79 [00:02<00:07,  7.29it/s]
 32%|      | 25/79 [00:02<00:05,  9.33it/s]
 35%|      | 28/79 [00:02<00:04, 11.54it/s]
 39%|      | 31/79 [00:02<00:03, 13.88it/s]
 43%|     | 34/79 [00:02<00:02, 16.18it/s]
 47%|     | 37/79 [00:02<00:02, 18.40it/s]
 51%|     | 40/79 [00:02<00:01, 19.94it/s]
 54%|    | 43/79 [00:02<00:01, 21.51it/s]
 58%|    | 46/79 [00:02<00:01, 22.58it/s]
 62%|   | 49/79 [00:03<00:01, 23.34it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:32,  1.19s/it]
  3%|         | 2/79 [00:01<01:06,  1.16it/s]
  6%|         | 5/79 [00:01<00:45,  1.62it/s]
 10%|         | 8/79 [00:01<00:31,  2.25it/s]
 14%|        | 11/79 [00:01<00:21,  3.10it/s]
 18%|        | 14/79 [00:01<00:15,  4.19it/s]
 22%|       | 17/79 [00:01<00:11,  5.59it/s]
 25%|       | 20/79 [00:02<00:08,  7.28it/s]
 29%|       | 23/79 [00:02<00:06,  9.28it/s]
 33%|      | 26/79 [00:02<00:04, 11.23it/s]
 37%|      | 29/79 [00:02<00:03, 13.43it/s]
 41%|      | 32/79 [00:02<00:03, 15.57it/s]
 44%|     | 35/79 [00:02<00:02, 17.56it/s]
 48%|     | 38/79 [00:02<00:02, 19.38it/s]
 52%|    | 41/79 [00:02<00:01, 20.70it/s]
 56%|    | 44/79 [00:03<00:01, 21.78it/s]
 59%|    | 47/79 [00:03<00:01, 22.96it/s]
 63%|   | 50/79 [00:03<00:01, 23.58it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:38,  1.26s/it]
  5%|         | 4/79 [00:01<01:06,  1.12it/s]
  9%|         | 7/79 [00:01<00:45,  1.57it/s]
 13%|        | 10/79 [00:01<00:31,  2.19it/s]
 16%|        | 13/79 [00:01<00:21,  3.01it/s]
 20%|        | 16/79 [00:01<00:15,  4.10it/s]
 24%|       | 19/79 [00:01<00:10,  5.49it/s]
 28%|       | 22/79 [00:02<00:07,  7.19it/s]
 32%|      | 25/79 [00:02<00:05,  9.17it/s]
 35%|      | 28/79 [00:02<00:04, 11.43it/s]
 39%|      | 31/79 [00:02<00:03, 13.82it/s]
 43%|     | 34/79 [00:02<00:02, 16.06it/s]
 47%|     | 37/79 [00:02<00:02, 18.22it/s]
 51%|     | 40/79 [00:02<00:01, 19.90it/s]
 54%|    | 43/79 [00:02<00:01, 21.48it/s]
 58%|    | 46/79 [00:03<00:01, 22.23it/s]
 62%|   | 49/79 [00:03<00:01, 23.27it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:37,  1.25s/it]
  5%|         | 4/79 [00:01<01:06,  1.12it/s]
  9%|         | 7/79 [00:01<00:45,  1.58it/s]
 13%|        | 10/79 [00:01<00:31,  2.19it/s]
 16%|        | 13/79 [00:01<00:21,  3.02it/s]
 20%|        | 16/79 [00:01<00:15,  4.11it/s]
 24%|       | 19/79 [00:01<00:10,  5.49it/s]
 28%|       | 22/79 [00:02<00:07,  7.18it/s]
 32%|      | 25/79 [00:02<00:05,  9.18it/s]
 35%|      | 28/79 [00:02<00:04, 11.43it/s]
 39%|      | 31/79 [00:02<00:03, 13.79it/s]
 43%|     | 34/79 [00:02<00:02, 15.97it/s]
 47%|     | 37/79 [00:02<00:02, 18.16it/s]
 51%|     | 40/79 [00:02<00:01, 19.86it/s]
 54%|    | 43/79 [00:02<00:01, 21.33it/s]
 58%|    | 46/79 [00:03<00:01, 22.49it/s]
 62%|   | 49/79 [00:03<00:01, 23.54it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:38,  1.27s/it]
  5%|         | 4/79 [00:01<01:07,  1.11it/s]
  9%|         | 7/79 [00:01<00:46,  1.56it/s]
 13%|        | 10/79 [00:01<00:31,  2.17it/s]
 16%|        | 13/79 [00:01<00:22,  3.00it/s]
 20%|        | 16/79 [00:01<00:15,  4.08it/s]
 24%|       | 19/79 [00:01<00:10,  5.46it/s]
 28%|       | 22/79 [00:02<00:07,  7.18it/s]
 32%|      | 25/79 [00:02<00:05,  9.13it/s]
 35%|      | 28/79 [00:02<00:04, 11.38it/s]
 39%|      | 31/79 [00:02<00:03, 13.65it/s]
 43%|     | 34/79 [00:02<00:02, 15.95it/s]
 47%|     | 37/79 [00:02<00:02, 18.08it/s]
 51%|     | 40/79 [00:02<00:01, 19.70it/s]
 54%|    | 43/79 [00:02<00:01, 21.19it/s]
 58%|    | 46/79 [00:03<00:01, 22.47it/s]
 62%|   | 49/79 [00:03<00:01, 23.47it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:38,  1.26s/it]
  4%|         | 3/79 [00:01<01:08,  1.11it/s]
  8%|         | 6/79 [00:01<00:46,  1.56it/s]
 11%|        | 9/79 [00:01<00:32,  2.17it/s]
 15%|        | 12/79 [00:01<00:22,  2.99it/s]
 19%|        | 15/79 [00:01<00:15,  4.06it/s]
 23%|       | 18/79 [00:01<00:11,  5.43it/s]
 27%|       | 21/79 [00:02<00:08,  7.12it/s]
 30%|       | 24/79 [00:02<00:06,  9.09it/s]
 34%|      | 27/79 [00:02<00:04, 11.23it/s]
 38%|      | 30/79 [00:02<00:03, 13.55it/s]
 42%|     | 33/79 [00:02<00:02, 15.79it/s]
 46%|     | 36/79 [00:02<00:02, 17.78it/s]
 49%|     | 39/79 [00:02<00:02, 19.48it/s]
 53%|    | 42/79 [00:02<00:01, 20.81it/s]
 57%|    | 45/79 [00:03<00:01, 22.09it/s]
 61%|    | 48/79 [00:03<00:01, 22.83it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:38,  1.26s/it]
  5%|         | 4/79 [00:01<01:06,  1.12it/s]
  9%|         | 7/79 [00:01<00:45,  1.57it/s]
 13%|        | 10/79 [00:01<00:31,  2.18it/s]
 16%|        | 13/79 [00:01<00:21,  3.01it/s]
 20%|        | 16/79 [00:01<00:15,  4.10it/s]
 24%|       | 19/79 [00:01<00:10,  5.49it/s]
 28%|       | 22/79 [00:02<00:07,  7.16it/s]
 32%|      | 25/79 [00:02<00:05,  9.14it/s]
 35%|      | 28/79 [00:02<00:04, 11.37it/s]
 39%|      | 31/79 [00:02<00:03, 13.70it/s]
 43%|     | 34/79 [00:02<00:02, 15.94it/s]
 47%|     | 37/79 [00:02<00:02, 18.13it/s]
 51%|     | 40/79 [00:02<00:01, 19.77it/s]
 54%|    | 43/79 [00:02<00:01, 21.28it/s]
 58%|    | 46/79 [00:03<00:01, 22.25it/s]
 62%|   | 49/79 [00:03<00:01, 23.10it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:35,  1.22s/it]
  4%|         | 3/79 [00:01<01:06,  1.15it/s]
  8%|         | 6/79 [00:01<00:45,  1.61it/s]
 11%|        | 9/79 [00:01<00:31,  2.24it/s]
 15%|        | 12/79 [00:01<00:21,  3.07it/s]
 19%|        | 15/79 [00:01<00:15,  4.17it/s]
 23%|       | 18/79 [00:01<00:10,  5.58it/s]
 27%|       | 21/79 [00:02<00:07,  7.28it/s]
 30%|       | 24/79 [00:02<00:05,  9.23it/s]
 34%|      | 27/79 [00:02<00:04, 11.41it/s]
 38%|      | 30/79 [00:02<00:03, 13.68it/s]
 42%|     | 33/79 [00:02<00:02, 15.69it/s]
 46%|     | 36/79 [00:02<00:02, 17.57it/s]
 49%|     | 39/79 [00:02<00:02, 19.28it/s]
 53%|    | 42/79 [00:02<00:01, 20.84it/s]
 57%|    | 45/79 [00:03<00:01, 22.03it/s]
 61%|    | 48/79 [00:03<00:01, 22.84it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:31,  1.18s/it]
  5%|         | 4/79 [00:01<01:02,  1.19it/s]
  9%|         | 7/79 [00:01<00:43,  1.67it/s]
 13%|        | 10/79 [00:01<00:29,  2.32it/s]
 16%|        | 13/79 [00:01<00:20,  3.19it/s]
 20%|        | 16/79 [00:01<00:14,  4.33it/s]
 24%|       | 19/79 [00:01<00:10,  5.75it/s]
 28%|       | 22/79 [00:02<00:07,  7.51it/s]
 32%|      | 25/79 [00:02<00:05,  9.48it/s]
 35%|      | 28/79 [00:02<00:04, 11.67it/s]
 39%|      | 31/79 [00:02<00:03, 13.86it/s]
 43%|     | 34/79 [00:02<00:02, 16.00it/s]
 47%|     | 37/79 [00:02<00:02, 17.97it/s]
 51%|     | 40/79 [00:02<00:01, 19.78it/s]
 54%|    | 43/79 [00:02<00:01, 20.99it/s]
 58%|    | 46/79 [00:02<00:01, 22.19it/s]
 62%|   | 49/79 [00:03<00:01, 23.13it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:35,  1.22s/it]
  5%|         | 4/79 [00:01<01:05,  1.15it/s]
  9%|         | 7/79 [00:01<00:44,  1.61it/s]
 13%|        | 10/79 [00:01<00:30,  2.24it/s]
 16%|        | 13/79 [00:01<00:21,  3.08it/s]
 20%|        | 16/79 [00:01<00:15,  4.18it/s]
 24%|       | 19/79 [00:01<00:10,  5.58it/s]
 28%|       | 22/79 [00:02<00:07,  7.30it/s]
 32%|      | 25/79 [00:02<00:05,  9.26it/s]
 35%|      | 28/79 [00:02<00:04, 11.47it/s]
 39%|      | 31/79 [00:02<00:03, 13.73it/s]
 43%|     | 34/79 [00:02<00:02, 15.95it/s]
 47%|     | 37/79 [00:02<00:02, 17.97it/s]
 51%|     | 40/79 [00:02<00:01, 19.88it/s]
 54%|    | 43/79 [00:02<00:01, 21.19it/s]
 58%|    | 46/79 [00:03<00:01, 22.13it/s]
 62%|   | 49/79 [00:03<00:01, 23.19it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:41,  1.30s/it]
  5%|         | 4/79 [00:01<01:09,  1.08it/s]
  9%|         | 7/79 [00:01<00:47,  1.52it/s]
 13%|        | 10/79 [00:01<00:32,  2.12it/s]
 16%|        | 13/79 [00:01<00:22,  2.93it/s]
 20%|        | 16/79 [00:01<00:15,  4.00it/s]
 24%|       | 19/79 [00:01<00:11,  5.37it/s]
 28%|       | 22/79 [00:02<00:08,  7.03it/s]
 32%|      | 25/79 [00:02<00:05,  9.01it/s]
 35%|      | 28/79 [00:02<00:04, 11.22it/s]
 39%|      | 31/79 [00:02<00:03, 13.54it/s]
 43%|     | 34/79 [00:02<00:02, 15.84it/s]
 47%|     | 37/79 [00:02<00:02, 17.91it/s]
 51%|     | 40/79 [00:02<00:01, 19.82it/s]
 54%|    | 43/79 [00:02<00:01, 21.32it/s]
 58%|    | 46/79 [00:03<00:01, 22.24it/s]
 62%|   | 49/79 [00:03<00:01, 23.41it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:32,  1.18s/it]
  3%|         | 2/79 [00:01<01:06,  1.16it/s]
  6%|         | 5/79 [00:01<00:45,  1.62it/s]
 10%|         | 8/79 [00:01<00:31,  2.25it/s]
 14%|        | 11/79 [00:01<00:21,  3.10it/s]
 18%|        | 14/79 [00:01<00:15,  4.21it/s]
 22%|       | 17/79 [00:01<00:11,  5.60it/s]
 25%|       | 20/79 [00:02<00:08,  7.31it/s]
 29%|       | 23/79 [00:02<00:06,  9.29it/s]
 33%|      | 26/79 [00:02<00:04, 11.47it/s]
 37%|      | 29/79 [00:02<00:03, 13.69it/s]
 41%|      | 32/79 [00:02<00:02, 15.75it/s]
 44%|     | 35/79 [00:02<00:02, 17.70it/s]
 48%|     | 38/79 [00:02<00:02, 19.14it/s]
 52%|    | 41/79 [00:02<00:01, 20.39it/s]
 56%|    | 44/79 [00:03<00:01, 21.56it/s]
 59%|    | 47/79 [00:03<00:01, 22.29it/s]
 63%|   | 50/79 [00:03<00:01, 22.74it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:36,  1.24s/it]
  5%|         | 4/79 [00:01<01:05,  1.14it/s]
  9%|         | 7/79 [00:01<00:45,  1.59it/s]
 13%|        | 10/79 [00:01<00:31,  2.21it/s]
 16%|        | 13/79 [00:01<00:21,  3.05it/s]
 20%|        | 16/79 [00:01<00:15,  4.15it/s]
 24%|       | 19/79 [00:01<00:10,  5.54it/s]
 28%|       | 22/79 [00:02<00:07,  7.23it/s]
 32%|      | 25/79 [00:02<00:05,  9.19it/s]
 35%|      | 28/79 [00:02<00:04, 11.42it/s]
 39%|      | 31/79 [00:02<00:03, 13.64it/s]
 43%|     | 34/79 [00:02<00:02, 15.80it/s]
 47%|     | 37/79 [00:02<00:02, 17.68it/s]
 51%|     | 40/79 [00:02<00:02, 19.47it/s]
 54%|    | 43/79 [00:02<00:01, 21.09it/s]
 58%|    | 46/79 [00:03<00:01, 22.10it/s]
 62%|   | 49/79 [00:03<00:01, 22.64it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:39,  1.28s/it]
  5%|         | 4/79 [00:01<01:08,  1.10it/s]
  9%|         | 7/79 [00:01<00:46,  1.55it/s]
 13%|        | 10/79 [00:01<00:32,  2.15it/s]
 16%|        | 13/79 [00:01<00:22,  2.97it/s]
 20%|        | 16/79 [00:01<00:15,  4.04it/s]
 24%|       | 19/79 [00:01<00:11,  5.41it/s]
 28%|       | 22/79 [00:02<00:08,  7.06it/s]
 32%|      | 25/79 [00:02<00:05,  9.07it/s]
 35%|      | 28/79 [00:02<00:04, 11.27it/s]
 39%|      | 31/79 [00:02<00:03, 13.54it/s]
 43%|     | 34/79 [00:02<00:02, 15.81it/s]
 47%|     | 37/79 [00:02<00:02, 17.97it/s]
 51%|     | 40/79 [00:02<00:01, 19.73it/s]
 54%|    | 43/79 [00:02<00:01, 21.12it/s]
 58%|    | 46/79 [00:03<00:01, 22.34it/s]
 62%|   | 49/79 [00:03<00:01, 23.30it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:39,  1.28s/it]
  5%|         | 4/79 [00:01<01:07,  1.10it/s]
  9%|         | 7/79 [00:01<00:46,  1.55it/s]
 13%|        | 10/79 [00:01<00:31,  2.16it/s]
 16%|        | 13/79 [00:01<00:22,  2.97it/s]
 20%|        | 16/79 [00:01<00:15,  4.05it/s]
 24%|       | 19/79 [00:01<00:11,  5.42it/s]
 28%|       | 22/79 [00:02<00:08,  7.09it/s]
 32%|      | 25/79 [00:02<00:05,  9.06it/s]
 35%|      | 28/79 [00:02<00:04, 11.26it/s]
 39%|      | 31/79 [00:02<00:03, 13.49it/s]
 43%|     | 34/79 [00:02<00:02, 15.75it/s]
 47%|     | 37/79 [00:02<00:02, 17.90it/s]
 51%|     | 40/79 [00:02<00:01, 19.68it/s]
 54%|    | 43/79 [00:02<00:01, 21.09it/s]
 58%|    | 46/79 [00:03<00:01, 22.25it/s]
 62%|   | 49/79 [00:03<00:01, 22.99it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:29,  1.14s/it]
  4%|         | 3/79 [00:01<01:02,  1.21it/s]
  8%|         | 6/79 [00:01<00:43,  1.69it/s]
 11%|        | 9/79 [00:01<00:29,  2.35it/s]
 15%|        | 12/79 [00:01<00:20,  3.23it/s]
 19%|        | 15/79 [00:01<00:14,  4.38it/s]
 23%|       | 18/79 [00:01<00:10,  5.81it/s]
 27%|       | 21/79 [00:02<00:07,  7.55it/s]
 30%|       | 24/79 [00:02<00:05,  9.55it/s]
 34%|      | 27/79 [00:02<00:04, 11.70it/s]
 38%|      | 30/79 [00:02<00:03, 13.90it/s]
 42%|     | 33/79 [00:02<00:02, 16.03it/s]
 46%|     | 36/79 [00:02<00:02, 18.04it/s]
 49%|     | 39/79 [00:02<00:02, 19.48it/s]
 53%|    | 42/79 [00:02<00:01, 20.98it/s]
 57%|    | 45/79 [00:02<00:01, 22.03it/s]
 61%|    | 48/79 [00:03<00:01, 22.92it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:38,  1.27s/it]
  4%|         | 3/79 [00:01<01:08,  1.11it/s]
  8%|         | 6/79 [00:01<00:46,  1.56it/s]
 11%|        | 9/79 [00:01<00:32,  2.16it/s]
 15%|        | 12/79 [00:01<00:22,  2.98it/s]
 19%|        | 15/79 [00:01<00:15,  4.05it/s]
 23%|       | 18/79 [00:01<00:11,  5.42it/s]
 27%|       | 21/79 [00:02<00:08,  7.09it/s]
 30%|       | 24/79 [00:02<00:06,  8.98it/s]
 34%|      | 27/79 [00:02<00:04, 11.12it/s]
 38%|      | 30/79 [00:02<00:03, 13.35it/s]
 42%|     | 33/79 [00:02<00:02, 15.67it/s]
 46%|     | 36/79 [00:02<00:02, 17.73it/s]
 49%|     | 39/79 [00:02<00:02, 19.42it/s]
 53%|    | 42/79 [00:02<00:01, 20.73it/s]
 57%|    | 45/79 [00:03<00:01, 21.81it/s]
 61%|    | 48/79 [00:03<00:01, 22.50it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:35,  1.22s/it]
  5%|         | 4/79 [00:01<01:05,  1.15it/s]
  9%|         | 7/79 [00:01<00:44,  1.61it/s]
 13%|        | 10/79 [00:01<00:30,  2.24it/s]
 16%|        | 13/79 [00:01<00:21,  3.09it/s]
 20%|        | 16/79 [00:01<00:15,  4.19it/s]
 24%|       | 19/79 [00:01<00:10,  5.60it/s]
 28%|       | 22/79 [00:02<00:07,  7.34it/s]
 32%|      | 25/79 [00:02<00:05,  9.30it/s]
 35%|      | 28/79 [00:02<00:04, 11.46it/s]
 39%|      | 31/79 [00:02<00:03, 13.79it/s]
 43%|     | 34/79 [00:02<00:02, 15.99it/s]
 47%|     | 37/79 [00:02<00:02, 18.05it/s]
 51%|     | 40/79 [00:02<00:01, 19.68it/s]
 54%|    | 43/79 [00:02<00:01, 20.96it/s]
 58%|    | 46/79 [00:03<00:01, 21.89it/s]
 62%|   | 49/79 [00:03<00:01, 22.63it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:35,  1.22s/it]
  5%|         | 4/79 [00:01<01:05,  1.15it/s]
  9%|         | 7/79 [00:01<00:44,  1.61it/s]
 13%|        | 10/79 [00:01<00:30,  2.24it/s]
 16%|        | 13/79 [00:01<00:21,  3.08it/s]
 20%|        | 16/79 [00:01<00:15,  4.18it/s]
 24%|       | 19/79 [00:01<00:10,  5.58it/s]
 28%|       | 22/79 [00:02<00:07,  7.28it/s]
 32%|      | 25/79 [00:02<00:05,  9.26it/s]
 35%|      | 28/79 [00:02<00:04, 11.39it/s]
 39%|      | 31/79 [00:02<00:03, 13.60it/s]
 43%|     | 34/79 [00:02<00:02, 15.70it/s]
 47%|     | 37/79 [00:02<00:02, 17.59it/s]
 51%|     | 40/79 [00:02<00:02, 19.26it/s]
 54%|    | 43/79 [00:02<00:01, 20.74it/s]
 58%|    | 46/79 [00:03<00:01, 21.94it/s]
 62%|   | 49/79 [00:03<00:01, 22.68it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:40,  1.29s/it]
  5%|         | 4/79 [00:01<01:08,  1.09it/s]
  9%|         | 7/79 [00:01<00:47,  1.53it/s]
 13%|        | 10/79 [00:01<00:32,  2.13it/s]
 16%|        | 13/79 [00:01<00:22,  2.94it/s]
 20%|        | 16/79 [00:01<00:15,  4.00it/s]
 24%|       | 19/79 [00:02<00:11,  5.34it/s]
 28%|       | 22/79 [00:02<00:08,  7.01it/s]
 32%|      | 25/79 [00:02<00:06,  8.94it/s]
 35%|      | 28/79 [00:02<00:04, 11.06it/s]
 39%|      | 31/79 [00:02<00:03, 13.28it/s]
 43%|     | 34/79 [00:02<00:02, 15.44it/s]
 47%|     | 37/79 [00:02<00:02, 17.38it/s]
 51%|     | 40/79 [00:02<00:02, 19.09it/s]
 54%|    | 43/79 [00:02<00:01, 20.55it/s]
 58%|    | 46/79 [00:03<00:01, 21.74it/s]
 62%|   | 49/79 [00:03<00:01, 22.70it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:43,  1.32s/it]
  5%|         | 4/79 [00:01<01:10,  1.06it/s]
  9%|         | 7/79 [00:01<00:48,  1.49it/s]
 13%|        | 10/79 [00:01<00:33,  2.08it/s]
 16%|        | 13/79 [00:01<00:23,  2.86it/s]
 20%|        | 16/79 [00:01<00:16,  3.90it/s]
 24%|       | 19/79 [00:02<00:11,  5.23it/s]
 28%|       | 22/79 [00:02<00:08,  6.87it/s]
 32%|      | 25/79 [00:02<00:06,  8.76it/s]
 35%|      | 28/79 [00:02<00:04, 10.88it/s]
 39%|      | 31/79 [00:02<00:03, 13.12it/s]
 43%|     | 34/79 [00:02<00:02, 15.29it/s]
 47%|     | 37/79 [00:02<00:02, 17.26it/s]
 51%|     | 40/79 [00:02<00:02, 18.87it/s]
 54%|    | 43/79 [00:03<00:01, 20.28it/s]
 58%|    | 46/79 [00:03<00:01, 21.40it/s]
 62%|   | 49/79 [00:03<00:01, 22.26it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:37,  1.26s/it]
  5%|         | 4/79 [00:01<01:06,  1.12it/s]
  9%|         | 7/79 [00:01<00:45,  1.57it/s]
 13%|        | 10/79 [00:01<00:31,  2.18it/s]
 16%|        | 13/79 [00:01<00:21,  3.00it/s]
 20%|        | 16/79 [00:01<00:15,  4.07it/s]
 24%|       | 19/79 [00:02<00:11,  5.43it/s]
 28%|       | 22/79 [00:02<00:08,  7.09it/s]
 32%|      | 25/79 [00:02<00:05,  9.08it/s]
 35%|      | 28/79 [00:02<00:04, 11.15it/s]
 39%|      | 31/79 [00:02<00:03, 13.29it/s]
 43%|     | 34/79 [00:02<00:02, 15.37it/s]
 47%|     | 37/79 [00:02<00:02, 17.35it/s]
 51%|     | 40/79 [00:02<00:02, 19.08it/s]
 54%|    | 43/79 [00:02<00:01, 20.19it/s]
 58%|    | 46/79 [00:03<00:01, 20.87it/s]
 62%|   | 49/79 [00:03<00:01, 21.89it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:35,  1.22s/it]
  5%|         | 4/79 [00:01<01:05,  1.15it/s]
  9%|         | 7/79 [00:01<00:44,  1.61it/s]
 13%|        | 10/79 [00:01<00:30,  2.23it/s]
 16%|        | 13/79 [00:01<00:21,  3.07it/s]
 20%|        | 16/79 [00:01<00:15,  4.16it/s]
 24%|       | 19/79 [00:01<00:10,  5.54it/s]
 28%|       | 22/79 [00:02<00:07,  7.23it/s]
 32%|      | 25/79 [00:02<00:05,  9.14it/s]
 35%|      | 28/79 [00:02<00:04, 11.23it/s]
 39%|      | 31/79 [00:02<00:03, 13.36it/s]
 43%|     | 34/79 [00:02<00:02, 15.48it/s]
 47%|     | 37/79 [00:02<00:02, 17.06it/s]
 51%|     | 40/79 [00:02<00:02, 18.61it/s]
 54%|    | 43/79 [00:02<00:01, 19.92it/s]
 58%|    | 46/79 [00:03<00:01, 21.04it/s]
 62%|   | 49/79 [00:03<00:01, 21.89it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:42,  1.31s/it]
  5%|         | 4/79 [00:01<01:09,  1.08it/s]
  9%|         | 7/79 [00:01<00:47,  1.51it/s]
 13%|        | 10/79 [00:01<00:32,  2.10it/s]
 16%|        | 13/79 [00:01<00:22,  2.89it/s]
 20%|        | 16/79 [00:01<00:16,  3.92it/s]
 24%|       | 19/79 [00:02<00:11,  5.24it/s]
 28%|       | 22/79 [00:02<00:08,  6.85it/s]
 32%|      | 25/79 [00:02<00:06,  8.75it/s]
 35%|      | 28/79 [00:02<00:04, 10.79it/s]
 39%|      | 31/79 [00:02<00:03, 12.93it/s]
 43%|     | 34/79 [00:02<00:02, 15.09it/s]
 47%|     | 37/79 [00:02<00:02, 16.95it/s]
 51%|     | 40/79 [00:02<00:02, 18.64it/s]
 54%|    | 43/79 [00:03<00:01, 19.85it/s]
 58%|    | 46/79 [00:03<00:01, 21.01it/s]
 62%|   | 49/79 [00:03<00:01, 21.91it/s]
 66%|   | 52/79 [00:03<00:0123it/s]
 68%|   | 54/79 [00:03<00:01, 24.96it/s]
 72%|  | 57/79 [00:03<00:00, 25.37it/s]
 76%|  | 60/79 [00:03<00:00, 25.71it/s]
 80%|  | 63/79 [00:03<00:00, 26.02it/s]
 84%| | 66/79 [00:03<00:00, 26.04it/s]
 87%| | 69/79 [00:03<00:00, 25.99it/s]
 91%| | 72/79 [00:03<00:00, 26.26it/s]
 95%|| 75/79 [00:03<00:00, 26.81it/s]
 99%|| 78/79 [00:04<00:00, 27.55it/s]
100%|| 79/79 [00:04<00:00, 18.84it/s]
, 23.70it/s]
 70%|   | 55/79 [00:03<00:00, 24.23it/s]
 73%|  | 58/79 [00:03<00:00, 24.56it/s]
 77%|  | 61/79 [00:03<00:00, 25.02it/s]
 81%|  | 64/79 [00:03<00:00, 25.11it/s]
 85%| | 67/79 [00:03<00:00, 25.45it/s]
 89%| | 70/79 [00:03<00:00, 25.74it/s]
 92%|| 73/79 [00:04<00:00, 26.02it/s]
 96%|| 76/79 [00:04<00:00, 26.70it/s]
100%|| 79/79 [00:04<00:00, 27.54it/s]
05it/s]
 68%|   | 54/79 [00:03<00:01, 24.36it/s]
 72%|  | 57/79 [00:03<00:00, 24.72it/s]
 76%|  | 60/79 [00:03<00:00, 24.91it/s]
 80%|  | 63/79 [00:03<00:00, 25.27it/s]
 84%| | 66/79 [00:03<00:00, 25.42it/s]
 87%| | 69/79 [00:03<00:00, 25.39it/s]
 91%| | 72/79 [00:03<00:00, 25.58it/s]
 95%|| 75/79 [00:04<00:00, 26.29it/s]
 99%|| 78/79 [00:04<00:00, 26.89it/s]
100%|| 79/79 [00:04<00:00, 18.41it/s]
, 24.13it/s]
 70%|   | 55/79 [00:03<00:00, 24.73it/s]
 73%|  | 58/79 [00:03<00:00, 25.37it/s]
 77%|  | 61/79 [00:03<00:00, 25.40it/s]
 81%|  | 64/79 [00:03<00:00, 25.64it/s]
 85%| | 67/79 [00:03<00:00, 25.69it/s]
 89%| | 70/79 [00:03<00:00, 25.86it/s]
 92%|| 73/79 [00:04<00:00, 26.18it/s]
 96%|| 76/79 [00:04<00:00, 26.72it/s]
100%|| 79/79 [00:04<00:00, 27.51it/s]
, 24.17it/s]
 70%|   | 55/79 [00:03<00:00, 24.43it/s]
 73%|  | 58/79 [00:03<00:00, 24.91it/s]
 77%|  | 61/79 [00:03<00:00, 25.12it/s]
 81%|  | 64/79 [00:03<00:00, 25.11it/s]
 85%| | 67/79 [00:03<00:00, 25.13it/s]
 89%| | 70/79 [00:03<00:00, 25.56it/s]
 92%|| 73/79 [00:04<00:00, 25.46it/s]
 96%|| 76/79 [00:04<00:00, 26.26it/s]
100%|| 79/79 [00:04<00:00, 27.01it/s]
, 24.16it/s]
 70%|   | 55/79 [00:03<00:00, 24.43it/s]
 73%|  | 58/79 [00:03<00:00, 25.09it/s]
 77%|  | 61/79 [00:03<00:00, 25.12it/s]
 81%|  | 64/79 [00:03<00:00, 25.55it/s]
 85%| | 67/79 [00:03<00:00, 25.68it/s]
 89%| | 70/79 [00:03<00:00, 26.11it/s]
 92%|| 73/79 [00:04<00:00, 26.12it/s]
 96%|| 76/79 [00:04<00:00, 26.77it/s]
100%|| 79/79 [00:04<00:00, 27.56it/s]
, 24.15it/s]
 70%|   | 55/79 [00:03<00:00, 24.78it/s]
 73%|  | 58/79 [00:03<00:00, 25.05it/s]
 77%|  | 61/79 [00:03<00:00, 25.51it/s]
 81%|  | 64/79 [00:03<00:00, 25.50it/s]
 85%| | 67/79 [00:03<00:00, 25.89it/s]
 89%| | 70/79 [00:03<00:00, 25.52it/s]
 92%|| 73/79 [00:04<00:00, 26.00it/s]
 96%|| 76/79 [00:04<00:00, 26.61it/s]
100%|| 79/79 [00:04<00:00, 27.51it/s]
, 23.93it/s]
 70%|   | 55/79 [00:03<00:00, 24.65it/s]
 73%|  | 58/79 [00:03<00:00, 24.84it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 25.19it/s]
 85%| | 67/79 [00:03<00:00, 25.42it/s]
 89%| | 70/79 [00:03<00:00, 25.50it/s]
 92%|| 73/79 [00:04<00:00, 26.09it/s]
 96%|| 76/79 [00:04<00:00, 26.75it/s]
100%|| 79/79 [00:04<00:00, 18.20it/s]
49it/s]
 68%|   | 54/79 [00:03<00:01, 23.92it/s]
 72%|  | 57/79 [00:03<00:00, 24.38it/s]
 76%|  | 60/79 [00:03<00:00, 24.51it/s]
 80%|  | 63/79 [00:03<00:00, 24.53it/s]
 84%| | 66/79 [00:03<00:00, 24.58it/s]
 87%| | 69/79 [00:03<00:00, 24.51it/s]
 91%| | 72/79 [00:04<00:00, 24.67it/s]
 95%|| 75/79 [00:04<00:00, 25.61it/s]
 99%|| 78/79 [00:04<00:00, 26.43it/s]
100%|| 79/79 [00:04<00:00, 18.21it/s]
, 23.67it/s]
 70%|   | 55/79 [00:03<00:00, 24.02it/s]
 73%|  | 58/79 [00:03<00:00, 24.43it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 25.35it/s]
 85%| | 67/79 [00:03<00:00, 25.53it/s]
 89%| | 70/79 [00:03<00:00, 25.66it/s]
 92%|| 73/79 [00:04<00:00, 26.12it/s]
 96%|| 76/79 [00:04<00:00, 26.70it/s]
100%|| 79/79 [00:04<00:00, 27.57it/s]
, 23.99it/s]
 70%|   | 55/79 [00:03<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 25.02it/s]
 77%|  | 61/79 [00:03<00:00, 25.26it/s]
 81%|  | 64/79 [00:03<00:00, 25.34it/s]
 85%| | 67/79 [00:03<00:00, 25.50it/s]
 89%| | 70/79 [00:03<00:00, 25.18it/s]
 92%|| 73/79 [00:04<00:00, 25.62it/s]
 96%|| 76/79 [00:04<00:00, 26.06it/s]
100%|| 79/79 [00:04<00:00, 27.03it/s]
, 24.21it/s]
 70%|   | 55/79 [00:03<00:00, 24.69it/s]
 73%|  | 58/79 [00:03<00:00, 25.19it/s]
 77%|  | 61/79 [00:03<00:00, 25.22it/s]
 81%|  | 64/79 [00:03<00:00, 25.30it/s]
 85%| | 67/79 [00:03<00:00, 24.83it/s]
 89%| | 70/79 [00:03<00:00, 24.94it/s]
 92%|| 73/79 [00:04<00:00, 25.06it/s]
 97%|| 77/79 [00:04<00:00, 26.24it/s]
100%|| 79/79 [00:04<00:00, 18.17it/s]
, 23.88it/s]
 70%|   | 55/79 [00:03<00:00, 24.09it/s]
 73%|  | 58/79 [00:03<00:00, 24.59it/s]
 77%|  | 61/79 [00:03<00:00, 24.67it/s]
 81%|  | 64/79 [00:03<00:00, 24.95it/s]
 85%| | 67/79 [00:03<00:00, 25.11it/s]
 89%| | 70/79 [00:03<00:00, 25.15it/s]
 92%|| 73/79 [00:04<00:00, 25.54it/s]
 96%|| 76/79 [00:04<00:00, 26.11it/s]
100%|| 79/79 [00:04<00:00, 26.94it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 24.53it/s]
 71%|   | 56/79 [00:03<00:00, 25.01it/s]
 75%|  | 59/79 [00:03<00:00, 24.76it/s]
 78%|  | 62/79 [00:03<00:00, 24.84it/s]
 82%| | 65/79 [00:03<00:00, 24.91it/s]
 86%| | 68/79 [00:03<00:00, 24.86it/s]
 90%| | 71/79 [00:03<00:00, 24.76it/s]
 94%|| 74/79 [00:04<00:00, 25.61it/s]
 97%|| 77/79 [00:04<00:00, 26.19it/s]
100%|| 79/79 [00:04<00:00, 18.10it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:00, 24.22it/s]
 73%|  | 58/79 [00:03<00:00, 24.54it/s]
 77%|  | 61/79 [00:03<00:00, 24.81it/s]
 81%|  | 64/79 [00:03<00:00, 24.92it/s]
 85%| | 67/79 [00:03<00:00, 25.11it/s]
 89%| | 70/79 [00:03<00:00, 24.91it/s]
 92%|| 73/79 [00:04<00:00, 25.67it/s]
 96%|| 76/79 [00:04<00:00, 25.97it/s]
100%|| 79/79 [00:04<00:00, 26.74it/s]
89it/s]
 68%|   | 54/79 [00:03<00:01, 24.52it/s]
 72%|  | 57/79 [00:03<00:00, 24.72it/s]
 76%|  | 60/79 [00:03<00:00, 24.86it/s]
 80%|  | 63/79 [00:03<00:00, 24.71it/s]
 84%| | 66/79 [00:03<00:00, 24.99it/s]
 87%| | 69/79 [00:03<00:00, 24.85it/s]
 91%| | 72/79 [00:04<00:00, 25.29it/s]
 95%|| 75/79 [00:04<00:00, 25.95it/s]
 99%|| 78/79 [00:04<00:00, 26.58it/s]
100%|| 79/79 [00:04<00:00, 18.09it/s]
, 23.87it/s]
 70%|   | 55/79 [00:03<00:00, 24.19it/s]
 73%|  | 58/79 [00:03<00:00, 24.33it/s]
 77%|  | 61/79 [00:03<00:00, 24.77it/s]
 81%|  | 64/79 [00:03<00:00, 24.91it/s]
 85%| | 67/79 [00:03<00:00, 24.97it/s]
 89%| | 70/79 [00:03<00:00, 25.30it/s]
 92%|| 73/79 [00:04<00:00, 25.37it/s]
 96%|| 76/79 [00:04<00:00, 26.20it/s]
100%|| 79/79 [00:04<00:00, 27.03it/s]
, 23.80it/s]
 70%|   | 55/79 [00:03<00:00, 24.16it/s]
 73%|  | 58/79 [00:03<00:00, 24.36it/s]
 77%|  | 61/79 [00:03<00:00, 24.89it/s]
 81%|  | 64/79 [00:03<00:00, 25.11it/s]
 85%| | 67/79 [00:03<00:00, 25.29it/s]
 89%| | 70/79 [00:03<00:00, 25.26it/s]
 92%|| 73/79 [00:04<00:00, 25.52it/s]
 96%|| 76/79 [00:04<00:00, 26.54it/s]
100%|| 79/79 [00:04<00:00, 26.81it/s]
, 22.89it/s]
 70%|   | 55/79 [00:03<00:01, 23.84it/s]
 73%|  | 58/79 [00:03<00:00, 24.65it/s]
 77%|  | 61/79 [00:03<00:00, 25.04it/s]
 81%|  | 64/79 [00:03<00:00, 25.39it/s]
 85%| | 67/79 [00:03<00:00, 25.68it/s]
 89%| | 70/79 [00:04<00:00, 25.79it/s]
 92%|| 73/79 [00:04<00:00, 26.15it/s]
 96%|| 76/79 [00:04<00:00, 26.75it/s]
100%|| 79/79 [00:04<00:00, 27.52it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 23.64it/s]
 71%|   | 56/79 [00:03<00:00, 24.15it/s]
 75%|  | 59/79 [00:03<00:00, 24.42it/s]
 78%|  | 62/79 [00:03<00:00, 24.11it/s]
 82%| | 65/79 [00:03<00:00, 24.31it/s]
 86%| | 68/79 [00:03<00:00, 24.54it/s]
 90%| | 71/79 [00:04<00:00, 24.52it/s]
 94%|| 74/79 [00:04<00:00, 25.31it/s]
 97%|| 77/79 [00:04<00:00, 26.07it/s]
100%|| 79/79 [00:04<00:00, 17.92it/s]
20it/s]
 68%|   | 54/79 [00:03<00:01, 23.62it/s]
 72%|  | 57/79 [00:03<00:00, 23.99it/s]
 76%|  | 60/79 [00:03<00:00, 24.04it/s]
 80%|  | 63/79 [00:03<00:00, 24.23it/s]
 84%| | 66/79 [00:03<00:00, 24.37it/s]
 87%| | 69/79 [00:03<00:00, 24.63it/s]
 91%| | 72/79 [00:04<00:00, 24.60it/s]
 95%|| 75/79 [00:04<00:00, 25.49it/s]
 99%|| 78/79 [00:04<00:00, 26.48it/s]
100%|| 79/79 [00:04<00:00, 17.85it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 24.13it/s]
 71%|   | 56/79 [00:03<00:00, 24.41it/s]
 75%|  | 59/79 [00:03<00:00, 24.80it/s]
 78%|  | 62/79 [00:03<00:00, 24.91it/s]
 82%| | 65/79 [00:03<00:00, 24.77it/s]
 86%| | 68/79 [00:03<00:00, 24.94it/s]
 90%| | 71/79 [00:04<00:00, 25.24it/s]
 94%|| 74/79 [00:04<00:00, 25.83it/s]
 97%|| 77/79 [00:04<00:00, 26.48it/s]
100%|| 79/79 [00:04<00:00, 17.86it/s]
11it/s]
 68%|   | 54/79 [00:03<00:01, 23.93it/s]
 72%|  | 57/79 [00:03<00:00, 24.17it/s]
 76%|  | 60/79 [00:03<00:00, 24.39it/s]
 80%|  | 63/79 [00:03<00:00, 24.51it/s]
 84%| | 66/79 [00:03<00:00, 24.79it/s]
 87%| | 69/79 [00:03<00:00, 24.88it/s]
 91%| | 72/79 [00:04<00:00, 25.00it/s]
 95%|| 75/79 [00:04<00:00, 25.91it/s]
 99%|| 78/79 [00:04<00:00, 26.60it/s]
100%|| 79/79 [00:04<00:00, 17.90it/s]
52it/s]
 68%|   | 54/79 [00:03<00:01, 23.81it/s]
 72%|  | 57/79 [00:03<00:00, 24.33it/s]
 76%|  | 60/79 [00:03<00:00, 24.25it/s]
 80%|  | 63/79 [00:03<00:00, 24.80it/s]
 84%| | 66/79 [00:03<00:00, 24.72it/s]
 87%| | 69/79 [00:03<00:00, 24.72it/s]
 91%| | 72/79 [00:04<00:00, 24.85it/s]
 95%|| 75/79 [00:04<00:00, 25.51it/s]
 99%|| 78/79 [00:04<00:00, 25.99it/s]
100%|| 79/79 [00:04<00:00, 18.03it/s]
, 23.38it/s]
 70%|   | 55/79 [00:03<00:01, 23.79it/s]
 73%|  | 58/79 [00:03<00:00, 24.32it/s]
 77%|  | 61/79 [00:03<00:00, 23.86it/s]
 81%|  | 64/79 [00:03<00:00, 24.08it/s]
 85%| | 67/79 [00:03<00:00, 24.44it/s]
 89%| | 70/79 [00:03<00:00, 24.47it/s]
 92%|| 73/79 [00:04<00:00, 25.01it/s]
 96%|| 76/79 [00:04<00:00, 25.63it/s]
100%|| 79/79 [00:04<00:00, 26.53it/s]
, 23.44it/s]
 70%|   | 55/79 [00:03<00:00, 24.18it/s]
 73%|  | 58/79 [00:03<00:00, 24.31it/s]
 77%|  | 61/79 [00:03<00:00, 24.69it/s]
 81%|  | 64/79 [00:03<00:00, 24.80it/s]
 85%| | 67/79 [00:03<00:00, 25.08it/s]
 89%| | 70/79 [00:03<00:00, 24.98it/s]
 92%|| 73/79 [00:04<00:00, 25.04it/s]
 96%|| 76/79 [00:04<00:00, 25.65it/s]
100%|| 79/79 [00:04<00:00, 26.40it/s]
02it/s]
 68%|   | 54/79 [00:03<00:01, 23.32it/s]
 72%|  | 57/79 [00:03<00:00, 23.57it/s]
 76%|  | 60/79 [00:03<00:00, 23.84it/s]
 80%|  | 63/79 [00:03<00:00, 24.26it/s]
 84%| | 66/79 [00:03<00:00, 24.47it/s]
 87%| | 69/79 [00:04<00:00, 24.57it/s]
 91%| | 72/79 [00:04<00:00, 24.68it/s]
 95%|| 75/79 [00:04<00:00, 25.60it/s]
 99%|| 78/79 [00:04<00:00, 26.27it/s]
100%|| 79/79 [00:04<00:00, 17.72it/s]
, 22.96it/s]
 70%|   | 55/79 [00:03<00:01, 23.72it/s]
 73%|  | 58/79 [00:03<00:00, 24.19it/s]
 77%|  | 61/79 [00:03<00:00, 24.25it/s]
 81%|  | 64/79 [00:03<00:00, 24.45it/s]
 85%| | 67/79 [00:03<00:00, 24.88it/s]
 89%| | 70/79 [00:04<00:00, 25.04it/s]
 92%|| 73/79 [00:04<00:00, 25.31it/s]
 96%|| 76/79 [00:04<00:00, 26.29it/s]
100%|| 79/79 [00:04<00:00, 27.29it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 23.17it/s]
 71%|   | 56/79 [00:03<00:00, 23.59it/s]
 75%|  | 59/79 [00:03<00:00, 23.97it/s]
 78%|  | 62/79 [00:03<00:00, 24.33it/s]
 82%| | 65/79 [00:03<00:00, 24.49it/s]
 86%| | 68/79 [00:03<00:00, 24.59it/s]
 90%| | 71/79 [00:04<00:00, 24.78it/s]
 94%|| 74/79 [00:04<00:00, 25.23it/s]
 97%|| 77/79 [00:04<00:00, 25.87it/s]
100%|| 79/79 [00:04<00:00, 17.73it/s]
, 22.50it/s]
 70%|   | 55/79 [00:03<00:01, 23.12it/s]
 73%|  | 58/79 [00:03<00:00, 23.49it/s]
 77%|  | 61/79 [00:03<00:00, 23.91it/s]
 81%|  | 64/79 [00:03<00:00, 24.38it/s]
 85%| | 67/79 [00:03<00:00, 24.50it/s]
 89%| | 70/79 [00:04<00:00, 24.62it/s]
 92%|| 73/79 [00:04<00:00, 25.00it/s]
 96%|| 76/79 [00:04<00:00, 25.82it/s]
100%|| 79/79 [00:04<00:00, 26.45it/s]
, 22.24it/s]
 70%|   | 55/79 [00:03<00:01, 22.78it/s]
 73%|  | 58/79 [00:03<00:00, 23.22it/s]
 77%|  | 61/79 [00:03<00:00, 23.54it/s]
 81%|  | 64/79 [00:03<00:00, 23.33it/s]
 85%| | 67/79 [00:03<00:00, 23.65it/s]
 89%| | 70/79 [00:04<00:00, 23.91it/s]
 92%|| 73/79 [00:04<00:00, 24.43it/s]
 96%|| 76/79 [00:04<00:00, 25.17it/s]
100%|| 79/79 [00:04<00:00, 26.12it/s]
, 22.41it/s]
 70%|   | 55/79 [00:03<00:01, 23.00it/s]
 73%|  | 58/79 [00:03<00:00, 23.37it/s]
 77%|  | 61/79 [00:03<00:00, 23.78it/s]
 81%|  | 64/79 [00:03<00:00, 24.10it/s]
 85%| | 67/79 [00:04<00:00, 24.31it/s]
 89%| | 70/79 [00:04<00:00, 24.34it/s]
 92%|| 73/79 [00:04<00:00, 24.68it/s]
 96%|| 76/79 [00:04<00:00, 25.33it/s]
100%|| 79/79 [00:04<00:00, 26.12it/s]
2020-06-23 16:41:49,950 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.570729 (0.029252668762207033 s / img per device, on 32 devices)
2020-06-23 16:41:49,969 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:41:49,970 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:41:49,988 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592955717577, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 13, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592955717577, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 13}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:41:59,318 maskrcnn_benchmark.trainer INFO: eta: 1:00:46  iter: 11020  loss: 0.4708 (0.7298)  loss_classifier: 0.1412 (0.2656)  loss_box_reg: 0.0654 (0.1179)  loss_mask: 0.2337 (0.2906)  loss_objectness: 0.0111 (0.0355)  loss_rpn_box_reg: 0.0062 (0.0202)  time: 0.1081 (0.1258)  data: 0.0014 (0.0183)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:01,474 maskrcnn_benchmark.trainer INFO: eta: 1:00:43  iter: 11040  loss: 0.5741 (0.7295)  loss_classifier: 0.1624 (0.2654)  loss_box_reg: 0.0724 (0.1178)  loss_mask: 0.2465 (0.2905)  loss_objectness: 0.0150 (0.0355)  loss_rpn_box_reg: 0.0044 (0.0202)  time: 0.1081 (0.1258)  data: 0.0016 (0.0182)  lr: 0.016000  max mem: 5193
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 16:42:03,647 maskrcnn_benchmark.trainer INFO: eta: 1:00:39  iter: 11060  loss: 0.5308 (0.7292)  loss_classifier: 0.1741 (0.2653)  loss_box_reg: 0.0940 (0.1178)  loss_mask: 0.2341 (0.2904)  loss_objectness: 0.0173 (0.0355)  loss_rpn_box_reg: 0.0062 (0.0202)  time: 0.1083 (0.1258)  data: 0.0016 (0.0182)  lr: 0.016000  max mem: 5193
DONE (t=0.64s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.49s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36901
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.58485
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.40103
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21247
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.39856
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48084
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30877
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.48882
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51426
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.32219
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.54958
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.65222
2020-06-23 16:42:05,825 maskrcnn_benchmark.trainer INFO: eta: 1:00:36  iter: 11080  loss: 0.5628 (0.7289)  loss_classifier: 0.2068 (0.2651)  loss_box_reg: 0.0913 (0.1177)  loss_mask: 0.2423 (0.2904)  loss_objectness: 0.0105 (0.0355)  loss_rpn_box_reg: 0.0068 (0.0202)  time: 0.1085 (0.1257)  data: 0.0015 (0.0182)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:08,006 maskrcnn_benchmark.trainer INFO: eta: 1:00:33  iter: 11100  loss: 0.5008 (0.7285)  loss_classifier: 0.1454 (0.2649)  loss_box_reg: 0.0803 (0.1177)  loss_mask: 0.2196 (0.2902)  loss_objectness: 0.0139 (0.0354)  loss_rpn_box_reg: 0.0066 (0.0202)  time: 0.1088 (0.1257)  data: 0.0015 (0.0181)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:10,186 maskrcnn_benchmark.trainer INFO: eta: 1:00:29  iter: 11120  loss: 0.5850 (0.7282)  loss_classifier: 0.1825 (0.2648)  loss_box_reg: 0.1003 (0.1177)  loss_mask: 0.2412 (0.2902)  loss_objectness: 0.0149 (0.0354)  loss_rpn_box_reg: 0.0080 (0.0202)  time: 0.1087 (0.1257)  data: 0.0015 (0.0181)  lr: 0.016000  max mem: 5193
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:42:12,338 maskrcnn_benchmark.trainer INFO: eta: 1:00:26  iter: 11140  loss: 0.5657 (0.7279)  loss_classifier: 0.1555 (0.2647)  loss_box_reg: 0.0846 (0.1176)  loss_mask: 0.2470 (0.2901)  loss_objectness: 0.0142 (0.0354)  loss_rpn_box_reg: 0.0096 (0.0202)  time: 0.1074 (0.1257)  data: 0.0015 (0.0181)  lr: 0.016000  max mem: 5193
DONE (t=1.69s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:42:14,517 maskrcnn_benchmark.trainer INFO: eta: 1:00:22  iter: 11160  loss: 0.6206 (0.7277)  loss_classifier: 0.2002 (0.2645)  loss_box_reg: 0.1080 (0.1176)  loss_mask: 0.2465 (0.2900)  loss_objectness: 0.0166 (0.0354)  loss_rpn_box_reg: 0.0099 (0.0202)  time: 0.1092 (0.1256)  data: 0.0015 (0.0181)  lr: 0.016000  max mem: 5193
DONE (t=2.43s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.33712
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.55318
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.35760
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15122
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36273
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49809
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29234
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.45016
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.47099
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.26870
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50753
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62563
2020-06-23 16:42:15,537 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3690112509126872, segm mAP: 0.33711536455801033
:::MLLOG {"namespace": "", "time_ms": 1592955735537, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.3690112509126872, "SEGM": 0.33711536455801033}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 12}}
:::MLLOG {"namespace": "", "time_ms": 1592955735537, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 12}}
2020-06-23 16:42:16,831 maskrcnn_benchmark.trainer INFO: eta: 1:00:19  iter: 11180  loss: 0.5803 (0.7274)  loss_classifier: 0.1817 (0.2644)  loss_box_reg: 0.0781 (0.1175)  loss_mask: 0.2469 (0.2900)  loss_objectness: 0.0129 (0.0353)  loss_rpn_box_reg: 0.0119 (0.0202)  time: 0.1085 (0.1256)  data: 0.0015 (0.0180)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:18,990 maskrcnn_benchmark.trainer INFO: eta: 1:00:16  iter: 11200  loss: 0.5414 (0.7271)  loss_classifier: 0.1488 (0.2642)  loss_box_reg: 0.0741 (0.1175)  loss_mask: 0.2367 (0.2899)  loss_objectness: 0.0192 (0.0353)  loss_rpn_box_reg: 0.0113 (0.0202)  time: 0.1076 (0.1256)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:21,144 maskrcnn_benchmark.trainer INFO: eta: 1:00:13  iter: 11220  loss: 0.5208 (0.7268)  loss_classifier: 0.1315 (0.2640)  loss_box_reg: 0.0657 (0.1174)  loss_mask: 0.2381 (0.2898)  loss_objectness: 0.0123 (0.0353)  loss_rpn_box_reg: 0.0102 (0.0202)  time: 0.1076 (0.1255)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:23,316 maskrcnn_benchmark.trainer INFO: eta: 1:00:09  iter: 11240  loss: 0.5968 (0.7266)  loss_classifier: 0.1961 (0.2639)  loss_box_reg: 0.1143 (0.1174)  loss_mask: 0.2601 (0.2898)  loss_objectness: 0.0176 (0.0353)  loss_rpn_box_reg: 0.0133 (0.0202)  time: 0.1078 (0.1255)  data: 0.0015 (0.0179)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:25,494 maskrcnn_benchmark.trainer INFO: eta: 1:00:06  iter: 11260  loss: 0.5673 (0.7263)  loss_classifier: 0.1670 (0.2638)  loss_box_reg: 0.0790 (0.1174)  loss_mask: 0.2266 (0.2897)  loss_objectness: 0.0128 (0.0353)  loss_rpn_box_reg: 0.0071 (0.0202)  time: 0.1086 (0.1255)  data: 0.0015 (0.0179)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:27,651 maskrcnn_benchmark.trainer INFO: eta: 1:00:02  iter: 11280  loss: 0.5468 (0.7260)  loss_classifier: 0.1957 (0.2637)  loss_box_reg: 0.0831 (0.1173)  loss_mask: 0.2528 (0.2896)  loss_objectness: 0.0125 (0.0352)  loss_rpn_box_reg: 0.0086 (0.0202)  time: 0.1077 (0.1255)  data: 0.0015 (0.0179)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:29,819 maskrcnn_benchmark.trainer INFO: eta: 0:59:59  iter: 11300  loss: 0.5255 (0.7258)  loss_classifier: 0.1403 (0.2635)  loss_box_reg: 0.0811 (0.1173)  loss_mask: 0.2504 (0.2895)  loss_objectness: 0.0084 (0.0352)  loss_rpn_box_reg: 0.0122 (0.0202)  time: 0.1078 (0.1254)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:31,973 maskrcnn_benchmark.trainer INFO: eta: 0:59:56  iter: 11320  loss: 0.6138 (0.7255)  loss_classifier: 0.1928 (0.2634)  loss_box_reg: 0.0969 (0.1173)  loss_mask: 0.2541 (0.2895)  loss_objectness: 0.0206 (0.0352)  loss_rpn_box_reg: 0.0082 (0.0202)  time: 0.1073 (0.1254)  data: 0.0015 (0.0178)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:34,158 maskrcnn_benchmark.trainer INFO: eta: 0:59:52  iter: 11340  loss: 0.4809 (0.7252)  loss_classifier: 0.1618 (0.2632)  loss_box_reg: 0.0666 (0.1172)  loss_mask: 0.2455 (0.2894)  loss_objectness: 0.0105 (0.0352)  loss_rpn_box_reg: 0.0076 (0.0202)  time: 0.1090 (0.1254)  data: 0.0014 (0.0178)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:36,329 maskrcnn_benchmark.trainer INFO: eta: 0:59:49  iter: 11360  loss: 0.5339 (0.7248)  loss_classifier: 0.1711 (0.2631)  loss_box_reg: 0.0947 (0.1172)  loss_mask: 0.2422 (0.2893)  loss_objectness: 0.0102 (0.0351)  loss_rpn_box_reg: 0.0056 (0.0202)  time: 0.1082 (0.1253)  data: 0.0015 (0.0178)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:38,508 maskrcnn_benchmark.trainer INFO: eta: 0:59:46  iter: 11380  loss: 0.5817 (0.7246)  loss_classifier: 0.1648 (0.2629)  loss_box_reg: 0.0965 (0.1171)  loss_mask: 0.2621 (0.2893)  loss_objectness: 0.0165 (0.0351)  loss_rpn_box_reg: 0.0069 (0.0202)  time: 0.1086 (0.1253)  data: 0.0015 (0.0177)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:40,675 maskrcnn_benchmark.trainer INFO: eta: 0:59:42  iter: 11400  loss: 0.5511 (0.7243)  loss_classifier: 0.1787 (0.2628)  loss_box_reg: 0.0880 (0.1171)  loss_mask: 0.2566 (0.2892)  loss_objectness: 0.0191 (0.0351)  loss_rpn_box_reg: 0.0086 (0.0202)  time: 0.1080 (0.1253)  data: 0.0015 (0.0177)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:42,841 maskrcnn_benchmark.trainer INFO: eta: 0:59:39  iter: 11420  loss: 0.5447 (0.7241)  loss_classifier: 0.1537 (0.2627)  loss_box_reg: 0.0834 (0.1170)  loss_mask: 0.2414 (0.2891)  loss_objectness: 0.0136 (0.0351)  loss_rpn_box_reg: 0.0074 (0.0202)  time: 0.1080 (0.1252)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:45,002 maskrcnn_benchmark.trainer INFO: eta: 0:59:36  iter: 11440  loss: 0.5649 (0.7239)  loss_classifier: 0.1876 (0.2625)  loss_box_reg: 0.0945 (0.1170)  loss_mask: 0.2521 (0.2891)  loss_objectness: 0.0184 (0.0351)  loss_rpn_box_reg: 0.0068 (0.0202)  time: 0.1070 (0.1252)  data: 0.0015 (0.0177)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:47,180 maskrcnn_benchmark.trainer INFO: eta: 0:59:32  iter: 11460  loss: 0.5452 (0.7236)  loss_classifier: 0.1710 (0.2624)  loss_box_reg: 0.0850 (0.1170)  loss_mask: 0.2452 (0.2890)  loss_objectness: 0.0096 (0.0350)  loss_rpn_box_reg: 0.0073 (0.0202)  time: 0.1085 (0.1252)  data: 0.0015 (0.0176)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:49,341 maskrcnn_benchmark.trainer INFO: eta: 0:59:29  iter: 11480  loss: 0.5182 (0.7233)  loss_classifier: 0.1589 (0.2623)  loss_box_reg: 0.0831 (0.1169)  loss_mask: 0.2316 (0.2889)  loss_objectness: 0.0150 (0.0350)  loss_rpn_box_reg: 0.0091 (0.0202)  time: 0.1079 (0.1252)  data: 0.0015 (0.0176)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:51,512 maskrcnn_benchmark.trainer INFO: eta: 0:59:26  iter: 11500  loss: 0.5956 (0.7231)  loss_classifier: 0.1782 (0.2621)  loss_box_reg: 0.0988 (0.1169)  loss_mask: 0.2597 (0.2889)  loss_objectness: 0.0174 (0.0350)  loss_rpn_box_reg: 0.0062 (0.0201)  time: 0.1084 (0.1251)  data: 0.0015 (0.0176)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:53,678 maskrcnn_benchmark.trainer INFO: eta: 0:59:22  iter: 11520  loss: 0.4997 (0.7227)  loss_classifier: 0.1557 (0.2620)  loss_box_reg: 0.0818 (0.1169)  loss_mask: 0.2433 (0.2888)  loss_objectness: 0.0132 (0.0350)  loss_rpn_box_reg: 0.0083 (0.0201)  time: 0.1072 (0.1251)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:55,860 maskrcnn_benchmark.trainer INFO: eta: 0:59:19  iter: 11540  loss: 0.4531 (0.7224)  loss_classifier: 0.1508 (0.2618)  loss_box_reg: 0.0711 (0.1168)  loss_mask: 0.2186 (0.2887)  loss_objectness: 0.0154 (0.0349)  loss_rpn_box_reg: 0.0074 (0.0201)  time: 0.1089 (0.1251)  data: 0.0015 (0.0175)  lr: 0.016000  max mem: 5193
2020-06-23 16:42:58,027 maskrcnn_benchmark.trainer INFO: eta: 0:59:16  iter: 11560  loss: 0.5687 (0.7221)  loss_classifier: 0.1595 (0.2617)  loss_box_reg: 0.0848 (0.1168)  loss_mask: 0.2541 (0.2886)  loss_objectness: 0.0124 (0.0349)  loss_rpn_box_reg: 0.0055 (0.0201)  time: 0.1087 (0.1250)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5193
2020-06-23 16:43:00,186 maskrcnn_benchmark.trainer INFO: eta: 0:59:12  iter: 11580  loss: 0.5447 (0.7218)  loss_classifier: 0.1646 (0.2615)  loss_box_reg: 0.0927 (0.1167)  loss_mask: 0.2151 (0.2885)  loss_objectness: 0.0124 (0.0349)  loss_rpn_box_reg: 0.0074 (0.0201)  time: 0.1080 (0.1250)  data: 0.0015 (0.0175)  lr: 0.016000  max mem: 5193
2020-06-23 16:43:02,363 maskrcnn_benchmark.trainer INFO: eta: 0:59:09  iter: 11600  loss: 0.5163 (0.7215)  loss_classifier: 0.1530 (0.2614)  loss_box_reg: 0.0729 (0.1167)  loss_mask: 0.2415 (0.2884)  loss_objectness: 0.0117 (0.0349)  loss_rpn_box_reg: 0.0051 (0.0201)  time: 0.1082 (0.1250)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5193
2020-06-23 16:43:04,519 maskrcnn_benchmark.trainer INFO: eta: 0:59:06  iter: 11620  loss: 0.4478 (0.7211)  loss_classifier: 0.1366 (0.2612)  loss_box_reg: 0.0638 (0.1166)  loss_mask: 0.2285 (0.2883)  loss_objectness: 0.0105 (0.0349)  loss_rpn_box_reg: 0.0057 (0.0201)  time: 0.1070 (0.1250)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5193
2020-06-23 16:43:06,699 maskrcnn_benchmark.trainer INFO: eta: 0:59:02  iter: 11640  loss: 0.5000 (0.7207)  loss_classifier: 0.1703 (0.2611)  loss_box_reg: 0.0816 (0.1165)  loss_mask: 0.2323 (0.2882)  loss_objectness: 0.0129 (0.0348)  loss_rpn_box_reg: 0.0089 (0.0201)  time: 0.1084 (0.1249)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5193
2020-06-23 16:43:08,884 maskrcnn_benchmark.trainer INFO: eta: 0:58:59  iter: 11660  loss: 0.5284 (0.7204)  loss_classifier: 0.1711 (0.2609)  loss_box_reg: 0.0875 (0.1165)  loss_mask: 0.2463 (0.2881)  loss_objectness: 0.0097 (0.0348)  loss_rpn_box_reg: 0.0067 (0.0201)  time: 0.1091 (0.1249)  data: 0.0015 (0.0173)  lr: 0.016000  max mem: 5193
2020-06-23 16:43:11,063 maskrcnn_benchmark.trainer INFO: eta: 0:58:56  iter: 11680  loss: 0.6216 (0.7202)  loss_classifier: 0.1844 (0.2608)  loss_box_reg: 0.0959 (0.1164)  loss_mask: 0.2464 (0.2880)  loss_objectness: 0.0159 (0.0348)  loss_rpn_box_reg: 0.0066 (0.0201)  time: 0.1091 (0.1249)  data: 0.0015 (0.0173)  lr: 0.016000  max mem: 5193
2020-06-23 16:43:13,224 maskrcnn_benchmark.trainer INFO: eta: 0:58:53  iter: 11700  loss: 0.5227 (0.7199)  loss_classifier: 0.1638 (0.2607)  loss_box_reg: 0.0859 (0.1164)  loss_mask: 0.2280 (0.2879)  loss_objectness: 0.0122 (0.0348)  loss_rpn_box_reg: 0.0084 (0.0201)  time: 0.1087 (0.1248)  data: 0.0015 (0.0173)  lr: 0.016000  max mem: 5193
2020-06-23 16:43:15,402 maskrcnn_benchmark.trainer INFO: eta: 0:58:49  iter: 11720  loss: 0.5607 (0.7196)  loss_classifier: 0.1761 (0.2605)  loss_box_reg: 0.0951 (0.1163)  loss_mask: 0.2348 (0.2879)  loss_objectness: 0.0165 (0.0347)  loss_rpn_box_reg: 0.0093 (0.0201)  time: 0.1089 (0.1248)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5193
2020-06-23 16:43:17,575 maskrcnn_benchmark.trainer INFO: eta: 0:58:46  iter: 11740  loss: 0.6345 (0.7194)  loss_classifier: 0.1926 (0.2604)  loss_box_reg: 0.0998 (0.1163)  loss_mask: 0.2395 (0.2878)  loss_objectness: 0.0179 (0.0348)  loss_rpn_box_reg: 0.0091 (0.0201)  time: 0.1085 (0.1248)  data: 0.0015 (0.0172)  lr: 0.016000  max mem: 5193
2020-06-23 16:43:19,748 maskrcnn_benchmark.trainer INFO: eta: 0:58:43  iter: 11760  loss: 0.4620 (0.7190)  loss_classifier: 0.1228 (0.2602)  loss_box_reg: 0.0612 (0.1163)  loss_mask: 0.2358 (0.2877)  loss_objectness: 0.0089 (0.0347)  loss_rpn_box_reg: 0.0069 (0.0201)  time: 0.1080 (0.1248)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5193
2020-06-23 16:43:21,917 maskrcnn_benchmark.trainer INFO: eta: 0:58:39  iter: 11780  loss: 0.5062 (0.7187)  loss_classifier: 0.1644 (0.2601)  loss_box_reg: 0.0903 (0.1162)  loss_mask: 0.2516 (0.2876)  loss_objectness: 0.0113 (0.0347)  loss_rpn_box_reg: 0.0083 (0.0201)  time: 0.1088 (0.1247)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5193
2020-06-23 16:43:24,082 maskrcnn_benchmark.trainer INFO: eta: 0:58:36  iter: 11800  loss: 0.5148 (0.7184)  loss_classifier: 0.1642 (0.2600)  loss_box_reg: 0.0798 (0.1162)  loss_mask: 0.2474 (0.2876)  loss_objectness: 0.0112 (0.0347)  loss_rpn_box_reg: 0.0113 (0.0201)  time: 0.1078 (0.1247)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5193
2020-06-23 16:43:26,269 maskrcnn_benchmark.trainer INFO: eta: 0:58:33  iter: 11820  loss: 0.5724 (0.7182)  loss_classifier: 0.1967 (0.2599)  loss_box_reg: 0.1095 (0.1161)  loss_mask: 0.2529 (0.2875)  loss_objectness: 0.0185 (0.0347)  loss_rpn_box_reg: 0.0099 (0.0201)  time: 0.1089 (0.1247)  data: 0.0015 (0.0171)  lr: 0.016000  max mem: 5193
2020-06-23 16:43:28,437 maskrcnn_benchmark.trainer INFO: eta: 0:58:30  iter: 11840  loss: 0.5402 (0.7180)  loss_classifier: 0.1579 (0.2598)  loss_box_reg: 0.1001 (0.1161)  loss_mask: 0.2477 (0.2875)  loss_objectness: 0.0180 (0.0346)  loss_rpn_box_reg: 0.0103 (0.0201)  time: 0.1081 (0.1247)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5193
2020-06-23 16:43:30,617 maskrcnn_benchmark.trainer INFO: eta: 0:58:26  iter: 11860  loss: 0.5073 (0.7178)  loss_classifier: 0.1787 (0.2596)  loss_box_reg: 0.0891 (0.1161)  loss_mask: 0.2466 (0.2874)  loss_objectness: 0.0136 (0.0346)  loss_rpn_box_reg: 0.0063 (0.0201)  time: 0.1090 (0.1246)  data: 0.0015 (0.0171)  lr: 0.016000  max mem: 5193
2020-06-23 16:43:32,796 maskrcnn_benchmark.trainer INFO: eta: 0:58:23  iter: 11880  loss: 0.5744 (0.7176)  loss_classifier: 0.1584 (0.2595)  loss_box_reg: 0.0936 (0.1161)  loss_mask: 0.2609 (0.2873)  loss_objectness: 0.0124 (0.0346)  loss_rpn_box_reg: 0.0071 (0.0200)  time: 0.1088 (0.1246)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5193
2020-06-23 16:43:34,976 maskrcnn_benchmark.trainer INFO: eta: 0:58:20  iter: 11900  loss: 0.5314 (0.7174)  loss_classifier: 0.1757 (0.2594)  loss_box_reg: 0.0933 (0.1160)  loss_mask: 0.2499 (0.2873)  loss_objectness: 0.0143 (0.0346)  loss_rpn_box_reg: 0.0069 (0.0200)  time: 0.1080 (0.1246)  data: 0.0014 (0.0170)  lr: 0.016000  max mem: 5193
2020-06-23 16:43:37,135 maskrcnn_benchmark.trainer INFO: eta: 0:58:17  iter: 11920  loss: 0.5329 (0.7171)  loss_classifier: 0.1604 (0.2593)  loss_box_reg: 0.0869 (0.1160)  loss_mask: 0.2596 (0.2873)  loss_objectness: 0.0097 (0.0345)  loss_rpn_box_reg: 0.0064 (0.0200)  time: 0.1075 (0.1245)  data: 0.0015 (0.0170)  lr: 0.016000  max mem: 5193
:::MLLOG {"namespace": "", "time_ms": 1592955817232, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 13}}
:::MLLOG {"namespace": "", "time_ms": 1592955817232, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 13}}
:::MLLOG {"namespace": "", "time_ms": 1592955817232, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 13}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 16:43:37,458 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.26s)
Done (t=0.27s)
creating index...
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
index created!
creating index...
index created!
index created!
index created!
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 16:43:37,768 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:59,  1.31it/s]
  5%|         | 4/79 [00:00<00:40,  1.83it/s]
  9%|         | 7/79 [00:01<00:28,  2.53it/s]
 13%|        | 10/79 [00:01<00:19,  3.47it/s]
 16%|        | 13/79 [00:01<00:14,  4.70it/s]
 20%|        | 16/79 [00:01<00:10,  6.25it/s]
 24%|       | 19/79 [00:01<00:07,  8.07it/s]
 28%|       | 22/79 [00:01<00:05, 10.17it/s]
 32%|      | 25/79 [00:01<00:04, 12.46it/s]
 35%|      | 28/79 [00:01<00:03, 14.84it/s]
 39%|      | 31/79 [00:01<00:02, 17.04it/s]
 43%|     | 34/79 [00:02<00:02, 18.99it/s]
 47%|     | 37/79 [00:02<00:02, 20.59it/s]
 51%|     | 40/79 [00:02<00:01, 21.87it/s]
 54%|    | 43/79 [00:02<00:01, 22.78it/s]
 58%|    | 46/79 [00:02<00:01, 23.76it/s]
 62%|   | 49/79 [00:02<00:01, 24.51it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.76it/s]
  9%|         | 7/79 [00:01<00:29,  2.44it/s]
 13%|        | 10/79 [00:01<00:20,  3.35it/s]
 16%|        | 13/79 [00:01<00:14,  4.52it/s]
 20%|        | 16/79 [00:01<00:10,  6.01it/s]
 24%|       | 19/79 [00:01<00:07,  7.82it/s]
 28%|       | 22/79 [00:01<00:05,  9.90it/s]
 32%|      | 25/79 [00:01<00:04, 12.16it/s]
 35%|      | 28/79 [00:01<00:03, 14.54it/s]
 39%|      | 31/79 [00:01<00:02, 16.83it/s]
 43%|     | 34/79 [00:02<00:02, 18.79it/s]
 47%|     | 37/79 [00:02<00:02, 20.63it/s]
 51%|     | 40/79 [00:02<00:01, 22.01it/s]
 54%|    | 43/79 [00:02<00:01, 23.14it/s]
 58%|    | 46/79 [00:02<00:01, 23.87it/s]
 62%|   | 49/79 [00:02<00:01, 24.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.28it/s]
  5%|         | 4/79 [00:00<00:41,  1.79it/s]
  9%|         | 7/79 [00:01<00:28,  2.49it/s]
 13%|        | 10/79 [00:01<00:20,  3.41it/s]
 16%|        | 13/79 [00:01<00:14,  4.62it/s]
 20%|        | 16/79 [00:01<00:10,  6.12it/s]
 24%|       | 19/79 [00:01<00:07,  7.94it/s]
 28%|       | 22/79 [00:01<00:05, 10.05it/s]
 32%|      | 25/79 [00:01<00:04, 12.30it/s]
 35%|      | 28/79 [00:01<00:03, 14.67it/s]
 39%|      | 31/79 [00:01<00:02, 16.94it/s]
 43%|     | 34/79 [00:02<00:02, 18.97it/s]
 47%|     | 37/79 [00:02<00:02, 20.75it/s]
 51%|     | 40/79 [00:02<00:01, 21.96it/s]
 54%|    | 43/79 [00:02<00:01, 22.90it/s]
 58%|    | 46/79 [00:02<00:01, 23.71it/s]
 62%|   | 49/79 [00:02<00:01, 24.33it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:57,  1.36it/s]
  5%|         | 4/79 [00:00<00:39,  1.89it/s]
  9%|         | 7/79 [00:00<00:27,  2.61it/s]
 13%|        | 10/79 [00:01<00:19,  3.57it/s]
 16%|        | 13/79 [00:01<00:13,  4.82it/s]
 20%|        | 16/79 [00:01<00:09,  6.37it/s]
 24%|       | 19/79 [00:01<00:07,  8.25it/s]
 28%|       | 22/79 [00:01<00:05, 10.37it/s]
 32%|      | 25/79 [00:01<00:04, 12.66it/s]
 35%|      | 28/79 [00:01<00:03, 14.94it/s]
 39%|      | 31/79 [00:01<00:02, 17.16it/s]
 43%|     | 34/79 [00:02<00:02, 18.97it/s]
 47%|     | 37/79 [00:02<00:02, 20.49it/s]
 51%|     | 40/79 [00:02<00:01, 21.91it/s]
 54%|    | 43/79 [00:02<00:01, 22.93it/s]
 58%|    | 46/79 [00:02<00:01, 23.45it/s]
 62%|   | 49/79 [00:02<00:01, 24.15it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.83it/s]
 24%|       | 19/79 [00:01<00:07,  7.59it/s]
 28%|       | 22/79 [00:01<00:05,  9.64it/s]
 32%|      | 25/79 [00:01<00:04, 11.95it/s]
 35%|      | 28/79 [00:01<00:03, 14.34it/s]
 39%|      | 31/79 [00:01<00:02, 16.59it/s]
 43%|     | 34/79 [00:02<00:02, 18.72it/s]
 47%|     | 37/79 [00:02<00:02, 20.42it/s]
 51%|     | 40/79 [00:02<00:01, 21.90it/s]
 54%|    | 43/79 [00:02<00:01, 23.13it/s]
 58%|    | 46/79 [00:02<00:01, 23.96it/s]
 62%|   | 49/79 [00:02<00:01, 24.82it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  4%|         | 3/79 [00:00<00:43,  1.73it/s]
  8%|         | 6/79 [00:01<00:30,  2.40it/s]
 11%|        | 9/79 [00:01<00:21,  3.30it/s]
 15%|        | 12/79 [00:01<00:14,  4.47it/s]
 19%|        | 15/79 [00:01<00:10,  5.92it/s]
 23%|       | 18/79 [00:01<00:07,  7.70it/s]
 27%|       | 21/79 [00:01<00:05,  9.78it/s]
 30%|       | 24/79 [00:01<00:04, 11.89it/s]
 34%|      | 27/79 [00:01<00:03, 14.16it/s]
 38%|      | 30/79 [00:01<00:02, 16.36it/s]
 42%|     | 33/79 [00:02<00:02, 18.42it/s]
 46%|     | 36/79 [00:02<00:02, 20.15it/s]
 49%|     | 39/79 [00:02<00:01, 21.53it/s]
 53%|    | 42/79 [00:02<00:01, 22.40it/s]
 57%|    | 45/79 [00:02<00:01, 23.41it/s]
 61%|    | 48/79 [00:02<00:01, 24.06it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.43it/s]
 20%|        | 16/79 [00:01<00:10,  5.90it/s]
 24%|       | 19/79 [00:01<00:07,  7.69it/s]
 28%|       | 22/79 [00:01<00:05,  9.76it/s]
 32%|      | 25/79 [00:01<00:04, 12.01it/s]
 35%|      | 28/79 [00:01<00:03, 14.32it/s]
 39%|      | 31/79 [00:01<00:02, 16.55it/s]
 43%|     | 34/79 [00:02<00:02, 18.58it/s]
 47%|     | 37/79 [00:02<00:02, 20.33it/s]
 51%|     | 40/79 [00:02<00:01, 21.81it/s]
 54%|    | 43/79 [00:02<00:01, 22.80it/s]
 58%|    | 46/79 [00:02<00:01, 23.56it/s]
 62%|   | 49/79 [00:02<00:01, 24.22it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.42it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.65it/s]
 28%|       | 22/79 [00:01<00:05,  9.68it/s]
 32%|      | 25/79 [00:01<00:04, 11.91it/s]
 35%|      | 28/79 [00:01<00:03, 14.26it/s]
 39%|      | 31/79 [00:01<00:02, 16.57it/s]
 43%|     | 34/79 [00:02<00:02, 18.61it/s]
 47%|     | 37/79 [00:02<00:02, 20.37it/s]
 51%|     | 40/79 [00:02<00:01, 21.56it/s]
 54%|    | 43/79 [00:02<00:01, 22.91it/s]
 58%|    | 46/79 [00:02<00:01, 23.72it/s]
 62%|   | 49/79 [00:02<00:01, 24.32it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:05,  9.54it/s]
 32%|      | 25/79 [00:01<00:04, 11.78it/s]
 35%|      | 28/79 [00:01<00:03, 14.12it/s]
 39%|      | 31/79 [00:02<00:02, 16.34it/s]
 43%|     | 34/79 [00:02<00:02, 18.47it/s]
 47%|     | 37/79 [00:02<00:02, 20.19it/s]
 51%|     | 40/79 [00:02<00:01, 21.58it/s]
 54%|    | 43/79 [00:02<00:01, 22.83it/s]
 58%|    | 46/79 [00:02<00:01, 23.72it/s]
 62%|   | 49/79 [00:02<00:01, 24.15it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.20it/s]
 28%|       | 22/79 [00:01<00:06,  9.21it/s]
 32%|      | 25/79 [00:01<00:04, 11.40it/s]
 35%|      | 28/79 [00:01<00:03, 13.76it/s]
 39%|      | 31/79 [00:02<00:02, 16.09it/s]
 43%|     | 34/79 [00:02<00:02, 18.28it/s]
 47%|     | 37/79 [00:02<00:02, 19.95it/s]
 51%|     | 40/79 [00:02<00:01, 21.60it/s]
 54%|    | 43/79 [00:02<00:01, 22.86it/s]
 58%|    | 46/79 [00:02<00:01, 23.82it/s]
 62%|   | 49/79 [00:02<00:01, 24.73it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:07,  7.51it/s]
 28%|       | 22/79 [00:01<00:06,  9.48it/s]
 32%|      | 25/79 [00:01<00:04, 11.72it/s]
 35%|      | 28/79 [00:01<00:03, 14.04it/s]
 39%|      | 31/79 [00:02<00:02, 16.37it/s]
 43%|     | 34/79 [00:02<00:02, 18.37it/s]
 47%|     | 37/79 [00:02<00:02, 20.13it/s]
 51%|     | 40/79 [00:02<00:01, 21.49it/s]
 54%|    | 43/79 [00:02<00:01, 22.64it/s]
 58%|    | 46/79 [00:02<00:01, 23.46it/s]
 62%|   | 49/79 [00:02<00:01, 23.93it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  4%|         | 3/79 [00:00<00:45,  1.68it/s]
  8%|         | 6/79 [00:01<00:31,  2.33it/s]
 11%|        | 9/79 [00:01<00:21,  3.20it/s]
 15%|        | 12/79 [00:01<00:15,  4.34it/s]
 19%|        | 15/79 [00:01<00:11,  5.79it/s]
 23%|       | 18/79 [00:01<00:08,  7.50it/s]
 27%|       | 21/79 [00:01<00:06,  9.50it/s]
 30%|       | 24/79 [00:01<00:04, 11.66it/s]
 34%|      | 27/79 [00:01<00:03, 13.91it/s]
 38%|      | 30/79 [00:01<00:03, 16.08it/s]
 42%|     | 33/79 [00:02<00:02, 18.14it/s]
 46%|     | 36/79 [00:02<00:02, 19.78it/s]
 49%|     | 39/79 [00:02<00:01, 21.27it/s]
 53%|    | 42/79 [00:02<00:01, 22.26it/s]
 57%|    | 45/79 [00:02<00:01, 23.13it/s]
 61%|    | 48/79 [00:02<00:01, 23.44it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.10it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.74it/s]
 39%|      | 31/79 [00:02<00:02, 16.14it/s]
 43%|     | 34/79 [00:02<00:02, 18.28it/s]
 47%|     | 37/79 [00:02<00:02, 20.30it/s]
 51%|     | 40/79 [00:02<00:01, 21.72it/s]
 54%|    | 43/79 [00:02<00:01, 22.96it/s]
 58%|    | 46/79 [00:02<00:01, 23.58it/s]
 62%|   | 49/79 [00:02<00:01, 24.35it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.52it/s]
 35%|      | 28/79 [00:01<00:03, 13.78it/s]
 39%|      | 31/79 [00:02<00:02, 16.18it/s]
 43%|     | 34/79 [00:02<00:02, 18.25it/s]
 47%|     | 37/79 [00:02<00:02, 19.86it/s]
 51%|     | 40/79 [00:02<00:01, 21.49it/s]
 54%|    | 43/79 [00:02<00:01, 22.58it/s]
 58%|    | 46/79 [00:02<00:01, 23.46it/s]
 62%|   | 49/79 [00:02<00:01, 23.98it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.45it/s]
 24%|       | 19/79 [00:01<00:08,  7.12it/s]
 28%|       | 22/79 [00:01<00:06,  9.13it/s]
 32%|      | 25/79 [00:01<00:04, 11.36it/s]
 35%|      | 28/79 [00:01<00:03, 13.70it/s]
 39%|      | 31/79 [00:02<00:03, 15.95it/s]
 43%|     | 34/79 [00:02<00:02, 18.12it/s]
 47%|     | 37/79 [00:02<00:02, 19.99it/s]
 51%|     | 40/79 [00:02<00:01, 21.44it/s]
 54%|    | 43/79 [00:02<00:01, 22.71it/s]
 58%|    | 46/79 [00:02<00:01, 23.63it/s]
 62%|   | 49/79 [00:02<00:01, 24.17it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:10,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.48it/s]
 28%|       | 22/79 [00:01<00:06,  9.48it/s]
 32%|      | 25/79 [00:01<00:04, 11.76it/s]
 35%|      | 28/79 [00:01<00:03, 13.90it/s]
 39%|      | 31/79 [00:02<00:02, 16.15it/s]
 43%|     | 34/79 [00:02<00:02, 18.18it/s]
 47%|     | 37/79 [00:02<00:02, 19.76it/s]
 51%|     | 40/79 [00:02<00:01, 20.95it/s]
 54%|    | 43/79 [00:02<00:01, 22.22it/s]
 58%|    | 46/79 [00:02<00:01, 22.99it/s]
 62%|   | 49/79 [00:02<00:01, 23.53it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  4%|         | 3/79 [00:00<00:45,  1.68it/s]
  8%|         | 6/79 [00:01<00:31,  2.33it/s]
 11%|        | 9/79 [00:01<00:21,  3.19it/s]
 15%|        | 12/79 [00:01<00:15,  4.32it/s]
 19%|        | 15/79 [00:01<00:11,  5.75it/s]
 23%|       | 18/79 [00:01<00:08,  7.47it/s]
 27%|       | 21/79 [00:01<00:06,  9.44it/s]
 30%|       | 24/79 [00:01<00:04, 11.60it/s]
 34%|      | 27/79 [00:01<00:03, 13.91it/s]
 38%|      | 30/79 [00:02<00:03, 16.02it/s]
 42%|     | 33/79 [00:02<00:02, 17.92it/s]
 46%|     | 36/79 [00:02<00:02, 19.53it/s]
 49%|     | 39/79 [00:02<00:01, 20.93it/s]
 53%|    | 42/79 [00:02<00:01, 22.12it/s]
 57%|    | 45/79 [00:02<00:01, 22.97it/s]
 61%|    | 48/79 [00:02<00:01, 23.60it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.74it/s]
 39%|      | 31/79 [00:02<00:03, 15.95it/s]
 43%|     | 34/79 [00:02<00:02, 17.92it/s]
 47%|     | 37/79 [00:02<00:02, 19.87it/s]
 51%|     | 40/79 [00:02<00:01, 21.40it/s]
 54%|    | 43/79 [00:02<00:01, 22.56it/s]
 58%|    | 46/79 [00:02<00:01, 23.31it/s]
 62%|   | 49/79 [00:02<00:01, 24.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.33it/s]
 32%|      | 25/79 [00:01<00:04, 11.53it/s]
 35%|      | 28/79 [00:01<00:03, 13.56it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.80it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.98it/s]
 54%|    | 43/79 [00:02<00:01, 22.37it/s]
 58%|    | 46/79 [00:02<00:01, 23.06it/s]
 62%|   | 49/79 [00:02<00:01, 23.78it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.45it/s]
 32%|      | 25/79 [00:01<00:04, 11.59it/s]
 35%|      | 28/79 [00:01<00:03, 13.86it/s]
 39%|      | 31/79 [00:02<00:02, 16.08it/s]
 43%|     | 34/79 [00:02<00:02, 18.10it/s]
 47%|     | 37/79 [00:02<00:02, 19.62it/s]
 51%|     | 40/79 [00:02<00:01, 20.98it/s]
 54%|    | 43/79 [00:02<00:01, 22.33it/s]
 58%|    | 46/79 [00:02<00:01, 23.03it/s]
 62%|   | 49/79 [00:02<00:01, 23.70it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.45it/s]
 24%|       | 19/79 [00:01<00:08,  7.13it/s]
 28%|       | 22/79 [00:01<00:06,  9.12it/s]
 32%|      | 25/79 [00:01<00:04, 11.30it/s]
 35%|      | 28/79 [00:01<00:03, 13.60it/s]
 39%|      | 31/79 [00:02<00:03, 15.78it/s]
 43%|     | 34/79 [00:02<00:02, 17.87it/s]
 47%|     | 37/79 [00:02<00:02, 19.70it/s]
 51%|     | 40/79 [00:02<00:01, 21.24it/s]
 54%|    | 43/79 [00:02<00:01, 22.27it/s]
 58%|    | 46/79 [00:02<00:01, 23.20it/s]
 62%|   | 49/79 [00:02<00:01, 24.18it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  9.02it/s]
 32%|      | 25/79 [00:01<00:04, 11.15it/s]
 35%|      | 28/79 [00:01<00:03, 13.39it/s]
 39%|      | 31/79 [00:02<00:03, 15.67it/s]
 43%|     | 34/79 [00:02<00:02, 17.77it/s]
 47%|     | 37/79 [00:02<00:02, 19.63it/s]
 51%|     | 40/79 [00:02<00:01, 20.83it/s]
 54%|    | 43/79 [00:02<00:01, 22.17it/s]
 58%|    | 46/79 [00:02<00:01, 23.01it/s]
 62%|   | 49/79 [00:02<00:01, 23.55it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.20it/s]
 28%|       | 22/79 [00:01<00:06,  9.17it/s]
 32%|      | 25/79 [00:01<00:04, 11.33it/s]
 35%|      | 28/79 [00:01<00:03, 13.53it/s]
 39%|      | 31/79 [00:02<00:03, 15.74it/s]
 43%|     | 34/79 [00:02<00:02, 17.74it/s]
 47%|     | 37/79 [00:02<00:02, 19.26it/s]
 51%|     | 40/79 [00:02<00:01, 20.47it/s]
 54%|    | 43/79 [00:02<00:01, 21.79it/s]
 58%|    | 46/79 [00:02<00:01, 22.72it/s]
 62%|   | 49/79 [00:02<00:01, 23.40it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  7.05it/s]
 28%|       | 22/79 [00:01<00:06,  9.02it/s]
 32%|      | 25/79 [00:01<00:04, 11.12it/s]
 35%|      | 28/79 [00:01<00:03, 13.36it/s]
 39%|      | 31/79 [00:02<00:03, 15.66it/s]
 43%|     | 34/79 [00:02<00:02, 17.63it/s]
 47%|     | 37/79 [00:02<00:02, 19.33it/s]
 51%|     | 40/79 [00:02<00:01, 20.62it/s]
 54%|    | 43/79 [00:02<00:01, 21.95it/s]
 58%|    | 46/79 [00:02<00:01, 22.89it/s]
 62%|   | 49/79 [00:02<00:01, 23.43it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  4%|         | 3/79 [00:01<00:50,  1.49it/s]
  8%|         | 6/79 [00:01<00:35,  2.08it/s]
 11%|        | 9/79 [00:01<00:24,  2.87it/s]
 15%|        | 12/79 [00:01<00:17,  3.91it/s]
 19%|        | 15/79 [00:01<00:12,  5.23it/s]
 23%|       | 18/79 [00:01<00:08,  6.86it/s]
 27%|       | 21/79 [00:01<00:06,  8.78it/s]
 30%|       | 24/79 [00:01<00:05, 10.85it/s]
 34%|      | 27/79 [00:01<00:03, 13.07it/s]
 38%|      | 30/79 [00:02<00:03, 15.26it/s]
 42%|     | 33/79 [00:02<00:02, 17.31it/s]
 46%|     | 36/79 [00:02<00:02, 19.09it/s]
 49%|     | 39/79 [00:02<00:01, 20.58it/s]
 53%|    | 42/79 [00:02<00:01, 21.68it/s]
 57%|    | 45/79 [00:02<00:01, 22.60it/s]
 61%|    | 48/79 [00:02<00:01, 23.35it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.82it/s]
 16%|        | 13/79 [00:01<00:17,  3.85it/s]
 20%|        | 16/79 [00:01<00:12,  5.15it/s]
 24%|       | 19/79 [00:01<00:08,  6.79it/s]
 28%|       | 22/79 [00:01<00:06,  8.69it/s]
 32%|      | 25/79 [00:01<00:04, 10.83it/s]
 35%|      | 28/79 [00:02<00:03, 13.06it/s]
 39%|      | 31/79 [00:02<00:03, 15.39it/s]
 43%|     | 34/79 [00:02<00:02, 17.47it/s]
 47%|     | 37/79 [00:02<00:02, 19.42it/s]
 51%|     | 40/79 [00:02<00:01, 20.93it/s]
 54%|    | 43/79 [00:02<00:01, 21.87it/s]
 58%|    | 46/79 [00:02<00:01, 22.62it/s]
 62%|   | 49/79 [00:02<00:01, 23.28it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:16,  3.88it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.83it/s]
 28%|       | 22/79 [00:01<00:06,  8.73it/s]
 32%|      | 25/79 [00:01<00:04, 10.87it/s]
 35%|      | 28/79 [00:02<00:03, 13.08it/s]
 39%|      | 31/79 [00:02<00:03, 15.31it/s]
 43%|     | 34/79 [00:02<00:02, 17.29it/s]
 47%|     | 37/79 [00:02<00:02, 19.01it/s]
 51%|     | 40/79 [00:02<00:01, 20.56it/s]
 54%|    | 43/79 [00:02<00:01, 21.41it/s]
 58%|    | 46/79 [00:02<00:01, 22.47it/s]
 62%|   | 49/79 [00:02<00:01, 23.30it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  4%|         | 3/79 [00:01<00:51,  1.46it/s]
  8%|         | 6/79 [00:01<00:35,  2.04it/s]
 11%|        | 9/79 [00:01<00:24,  2.81it/s]
 15%|        | 12/79 [00:01<00:17,  3.83it/s]
 19%|        | 15/79 [00:01<00:12,  5.13it/s]
 23%|       | 18/79 [00:01<00:09,  6.74it/s]
 27%|       | 21/79 [00:01<00:06,  8.58it/s]
 30%|       | 24/79 [00:01<00:05, 10.66it/s]
 34%|      | 27/79 [00:02<00:04, 12.87it/s]
 38%|      | 30/79 [00:02<00:03, 14.94it/s]
 42%|     | 33/79 [00:02<00:02, 16.88it/s]
 46%|     | 36/79 [00:02<00:02, 18.59it/s]
 49%|     | 39/79 [00:02<00:02, 19.83it/s]
 53%|    | 42/79 [00:02<00:01, 21.03it/s]
 57%|    | 45/79 [00:02<00:01, 22.14it/s]
 61%|    | 48/79 [00:02<00:01, 22.79it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  4%|         | 3/79 [00:01<00:51,  1.46it/s]
  8%|         | 6/79 [00:01<00:35,  2.03it/s]
 11%|        | 9/79 [00:01<00:24,  2.81it/s]
 15%|        | 12/79 [00:01<00:17,  3.83it/s]
 19%|        | 15/79 [00:01<00:12,  5.13it/s]
 23%|       | 18/79 [00:01<00:09,  6.74it/s]
 27%|       | 21/79 [00:01<00:06,  8.62it/s]
 30%|       | 24/79 [00:01<00:05, 10.71it/s]
 34%|      | 27/79 [00:02<00:04, 12.90it/s]
 38%|      | 30/79 [00:02<00:03, 15.08it/s]
 42%|     | 33/79 [00:02<00:02, 16.88it/s]
 46%|     | 36/79 [00:02<00:02, 18.51it/s]
 49%|     | 39/79 [00:02<00:02, 19.96it/s]
 53%|    | 42/79 [00:02<00:01, 20.98it/s]
 57%|    | 45/79 [00:02<00:01, 22.03it/s]
 61%|    | 48/79 [00:02<00:01, 22.50it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:20,  1.03s/it]
  5%|         | 4/79 [00:01<00:54,  1.37it/s]
  9%|         | 7/79 [00:01<00:37,  1.91it/s]
 13%|        | 10/79 [00:01<00:26,  2.64it/s]
 16%|        | 13/79 [00:01<00:18,  3.61it/s]
 20%|        | 16/79 [00:01<00:12,  4.85it/s]
 24%|       | 19/79 [00:01<00:09,  6.42it/s]
 28%|       | 22/79 [00:01<00:06,  8.26it/s]
 32%|      | 25/79 [00:01<00:05, 10.39it/s]
 35%|      | 28/79 [00:02<00:04, 12.58it/s]
 39%|      | 31/79 [00:02<00:03, 14.88it/s]
 43%|     | 34/79 [00:02<00:02, 17.01it/s]
 47%|     | 37/79 [00:02<00:02, 18.76it/s]
 51%|     | 40/79 [00:02<00:01, 20.35it/s]
 54%|    | 43/79 [00:02<00:01, 21.44it/s]
 58%|    | 46/79 [00:02<00:01, 22.44it/s]
 62%|   | 49/79 [00:02<00:01, 23.18it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:12,  5.23it/s]
 24%|       | 19/79 [00:01<00:08,  6.85it/s]
 28%|       | 22/79 [00:01<00:06,  8.68it/s]
 32%|      | 25/79 [00:01<00:05, 10.73it/s]
 35%|      | 28/79 [00:02<00:03, 12.87it/s]
 39%|      | 31/79 [00:02<00:03, 15.08it/s]
 43%|     | 34/79 [00:02<00:02, 16.98it/s]
 47%|     | 37/79 [00:02<00:02, 18.36it/s]
 51%|     | 40/79 [00:02<00:01, 19.83it/s]
 54%|    | 43/79 [00:02<00:01, 20.98it/s]
 58%|    | 46/79 [00:02<00:01, 21.76it/s]
 62%|   | 49/79 [00:02<00:01, 22.44it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.43it/s]
  9%|         | 7/79 [00:01<00:36,  1.99it/s]
 13%|        | 10/79 [00:01<00:25,  2.75it/s]
 16%|        | 13/79 [00:01<00:17,  3.75it/s]
 20%|        | 16/79 [00:01<00:12,  5.03it/s]
 24%|       | 19/79 [00:01<00:09,  6.60it/s]
 28%|       | 22/79 [00:01<00:06,  8.49it/s]
 32%|      | 25/79 [00:01<00:05, 10.53it/s]
 35%|      | 28/79 [00:02<00:04, 12.70it/s]
 39%|      | 31/79 [00:02<00:03, 14.82it/s]
 43%|     | 34/79 [00:02<00:02, 16.77it/s]
 47%|     | 37/79 [00:02<00:02, 18.56it/s]
 51%|     | 40/79 [00:02<00:01, 19.75it/s]
 54%|    | 43/79 [00:02<00:01, 21.13it/s]
 58%|    | 46/79 [00:02<00:01, 21.75it/s]
 62%|   | 49/79 [00:02<00:01, 22.33it/s]
 66%|   | 52/79 [00:03<00:01, 24.95it/s]
 70%|   | 55/79 [00:02<00:00, 25.33it/s]
 73%|  | 58/79 [00:02<00:00, 25.65it/s]
 77%|  | 61/79 [00:03<00:00, 25.73it/s]
 81%|  | 64/79 [00:03<00:00, 26.08it/s]
 85%| | 67/79 [00:03<00:00, 26.06it/s]
 89%| | 70/79 [00:03<00:00, 26.39it/s]
 92%|| 73/79 [00:03<00:00, 26.50it/s]
 96%|| 76/79 [00:03<00:00, 27.19it/s]
100%|| 79/79 [00:03<00:00, 20.85it/s]
, 24.70it/s]
 70%|   | 55/79 [00:02<00:00, 25.02it/s]
 73%|  | 58/79 [00:03<00:00, 25.18it/s]
 77%|  | 61/79 [00:03<00:00, 25.44it/s]
 81%|  | 64/79 [00:03<00:00, 25.22it/s]
 85%| | 67/79 [00:03<00:00, 25.63it/s]
 89%| | 70/79 [00:03<00:00, 25.47it/s]
 92%|| 73/79 [00:03<00:00, 25.98it/s]
 96%|| 76/79 [00:03<00:00, 26.66it/s]
100%|| 79/79 [00:03<00:00, 27.41it/s]
, 24.62it/s]
 70%|   | 55/79 [00:02<00:00, 25.13it/s]
 73%|  | 58/79 [00:02<00:00, 25.26it/s]
 77%|  | 61/79 [00:03<00:00, 25.61it/s]
 81%|  | 64/79 [00:03<00:00, 25.66it/s]
 85%| | 67/79 [00:03<00:00, 25.75it/s]
 89%| | 70/79 [00:03<00:00, 25.42it/s]
 92%|| 73/79 [00:03<00:00, 25.97it/s]
 96%|| 76/79 [00:03<00:00, 26.59it/s]
100%|| 79/79 [00:03<00:00, 27.45it/s]
, 24.59it/s]
 70%|   | 55/79 [00:02<00:00, 24.77it/s]
 73%|  | 58/79 [00:02<00:00, 24.84it/s]
 77%|  | 61/79 [00:03<00:00, 25.03it/s]
 81%|  | 64/79 [00:03<00:00, 25.04it/s]
 85%| | 67/79 [00:03<00:00, 24.99it/s]
 89%| | 70/79 [00:03<00:00, 24.95it/s]
 92%|| 73/79 [00:03<00:00, 25.47it/s]
 96%|| 76/79 [00:03<00:00, 26.22it/s]
100%|| 79/79 [00:03<00:00, 20.39it/s]
, 25.31it/s]
 70%|   | 55/79 [00:02<00:00, 25.44it/s]
 73%|  | 58/79 [00:03<00:00, 25.75it/s]
 77%|  | 61/79 [00:03<00:00, 25.88it/s]
 81%|  | 64/79 [00:03<00:00, 25.89it/s]
 85%| | 67/79 [00:03<00:00, 25.87it/s]
 89%| | 70/79 [00:03<00:00, 26.23it/s]
 92%|| 73/79 [00:03<00:00, 25.99it/s]
 96%|| 76/79 [00:03<00:00, 26.69it/s]
100%|| 79/79 [00:03<00:00, 27.39it/s]
, 24.84it/s]
 70%|   | 55/79 [00:02<00:00, 25.27it/s]
 73%|  | 58/79 [00:03<00:00, 25.61it/s]
 77%|  | 61/79 [00:03<00:00, 25.83it/s]
 81%|  | 64/79 [00:03<00:00, 25.93it/s]
 85%| | 67/79 [00:03<00:00, 26.00it/s]
 89%| | 70/79 [00:03<00:00, 25.98it/s]
 92%|| 73/79 [00:03<00:00, 26.27it/s]
 96%|| 76/79 [00:03<00:00, 26.88it/s]
100%|| 79/79 [00:03<00:00, 27.69it/s]
, 24.70it/s]
 70%|   | 55/79 [00:02<00:00, 25.09it/s]
 73%|  | 58/79 [00:03<00:00, 25.26it/s]
 77%|  | 61/79 [00:03<00:00, 25.20it/s]
 81%|  | 64/79 [00:03<00:00, 25.17it/s]
 85%| | 67/79 [00:03<00:00, 25.43it/s]
 89%| | 70/79 [00:03<00:00, 25.34it/s]
 92%|| 73/79 [00:03<00:00, 25.80it/s]
 96%|| 76/79 [00:03<00:00, 26.44it/s]
100%|| 79/79 [00:03<00:00, 27.33it/s]
, 24.86it/s]
 70%|   | 55/79 [00:02<00:00, 25.13it/s]
 73%|  | 58/79 [00:03<00:00, 25.34it/s]
 77%|  | 61/79 [00:03<00:00, 25.70it/s]
 81%|  | 64/79 [00:03<00:00, 25.77it/s]
 85%| | 67/79 [00:03<00:00, 25.91it/s]
 89%| | 70/79 [00:03<00:00, 26.03it/s]
 92%|| 73/79 [00:03<00:00, 26.31it/s]
 96%|| 76/79 [00:03<00:00, 26.87it/s]
100%|| 79/79 [00:03<00:00, 27.71it/s]
55it/s]
 68%|   | 54/79 [00:02<00:01, 24.97it/s]
 72%|  | 57/79 [00:03<00:00, 25.42it/s]
 76%|  | 60/79 [00:03<00:00, 25.45it/s]
 80%|  | 63/79 [00:03<00:00, 25.47it/s]
 84%| | 66/79 [00:03<00:00, 25.43it/s]
 87%| | 69/79 [00:03<00:00, 25.26it/s]
 91%| | 72/79 [00:03<00:00, 25.26it/s]
 95%|| 75/79 [00:03<00:00, 25.91it/s]
 99%|| 78/79 [00:03<00:00, 26.49it/s]
100%|| 79/79 [00:03<00:00, 20.19it/s]
, 24.68it/s]
 70%|   | 55/79 [00:02<00:00, 24.99it/s]
 73%|  | 58/79 [00:03<00:00, 25.21it/s]
 77%|  | 61/79 [00:03<00:00, 25.56it/s]
 81%|  | 64/79 [00:03<00:00, 25.95it/s]
 85%| | 67/79 [00:03<00:00, 26.25it/s]
 89%| | 70/79 [00:03<00:00, 26.09it/s]
 92%|| 73/79 [00:03<00:00, 26.43it/s]
 96%|| 76/79 [00:03<00:00, 26.90it/s]
100%|| 79/79 [00:03<00:00, 27.65it/s]
, 25.17it/s]
 70%|   | 55/79 [00:02<00:00, 25.59it/s]
 73%|  | 58/79 [00:03<00:00, 25.59it/s]
 77%|  | 61/79 [00:03<00:00, 25.66it/s]
 81%|  | 64/79 [00:03<00:00, 25.77it/s]
 85%| | 67/79 [00:03<00:00, 25.95it/s]
 89%| | 70/79 [00:03<00:00, 26.15it/s]
 92%|| 73/79 [00:03<00:00, 26.33it/s]
 96%|| 76/79 [00:03<00:00, 26.77it/s]
100%|| 79/79 [00:03<00:00, 27.61it/s]
, 24.75it/s]
 70%|   | 55/79 [00:02<00:00, 25.42it/s]
 73%|  | 58/79 [00:03<00:00, 25.44it/s]
 77%|  | 61/79 [00:03<00:00, 25.49it/s]
 81%|  | 64/79 [00:03<00:00, 25.82it/s]
 85%| | 67/79 [00:03<00:00, 25.65it/s]
 89%| | 70/79 [00:03<00:00, 25.51it/s]
 92%|| 73/79 [00:03<00:00, 26.08it/s]
 96%|| 76/79 [00:03<00:00, 26.77it/s]
100%|| 79/79 [00:03<00:00, 20.11it/s]
, 24.51it/s]
 70%|   | 55/79 [00:02<00:00, 25.13it/s]
 73%|  | 58/79 [00:03<00:00, 24.95it/s]
 77%|  | 61/79 [00:03<00:00, 24.84it/s]
 81%|  | 64/79 [00:03<00:00, 25.21it/s]
 85%| | 67/79 [00:03<00:00, 25.33it/s]
 89%| | 70/79 [00:03<00:00, 25.64it/s]
 92%|| 73/79 [00:03<00:00, 25.69it/s]
 96%|| 76/79 [00:03<00:00, 26.34it/s]
100%|| 79/79 [00:03<00:00, 27.10it/s]
, 24.54it/s]
 70%|   | 55/79 [00:02<00:00, 24.66it/s]
 73%|  | 58/79 [00:03<00:00, 24.85it/s]
 77%|  | 61/79 [00:03<00:00, 25.21it/s]
 81%|  | 64/79 [00:03<00:00, 25.33it/s]
 85%| | 67/79 [00:03<00:00, 25.65it/s]
 89%| | 70/79 [00:03<00:00, 25.69it/s]
 92%|| 73/79 [00:03<00:00, 26.19it/s]
 96%|| 76/79 [00:03<00:00, 26.81it/s]
100%|| 79/79 [00:03<00:00, 27.61it/s]
, 24.43it/s]
 70%|   | 55/79 [00:02<00:00, 24.69it/s]
 73%|  | 58/79 [00:03<00:00, 25.16it/s]
 77%|  | 61/79 [00:03<00:00, 25.38it/s]
 81%|  | 64/79 [00:03<00:00, 25.48it/s]
 85%| | 67/79 [00:03<00:00, 25.64it/s]
 89%| | 70/79 [00:03<00:00, 25.55it/s]
 92%|| 73/79 [00:03<00:00, 25.89it/s]
 96%|| 76/79 [00:03<00:00, 26.57it/s]
100%|| 79/79 [00:03<00:00, 27.48it/s]
, 24.49it/s]
 70%|   | 55/79 [00:02<00:00, 25.17it/s]
 73%|  | 58/79 [00:03<00:00, 25.16it/s]
 77%|  | 61/79 [00:03<00:00, 25.18it/s]
 81%|  | 64/79 [00:03<00:00, 25.35it/s]
 85%| | 67/79 [00:03<00:00, 25.71it/s]
 89%| | 70/79 [00:03<00:00, 25.56it/s]
 92%|| 73/79 [00:03<00:00, 26.10it/s]
 96%|| 76/79 [00:03<00:00, 26.71it/s]
100%|| 79/79 [00:03<00:00, 27.57it/s]
, 24.00it/s]
 70%|   | 55/79 [00:02<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 24.64it/s]
 77%|  | 61/79 [00:03<00:00, 24.60it/s]
 81%|  | 64/79 [00:03<00:00, 24.70it/s]
 85%| | 67/79 [00:03<00:00, 24.66it/s]
 89%| | 70/79 [00:03<00:00, 24.69it/s]
 92%|| 73/79 [00:03<00:00, 25.29it/s]
 96%|| 76/79 [00:03<00:00, 26.12it/s]
100%|| 79/79 [00:03<00:00, 27.02it/s]
, 24.34it/s]
 70%|   | 55/79 [00:02<00:00, 25.01it/s]
 73%|  | 58/79 [00:03<00:00, 25.18it/s]
 77%|  | 61/79 [00:03<00:00, 25.38it/s]
 81%|  | 64/79 [00:03<00:00, 25.48it/s]
 85%| | 67/79 [00:03<00:00, 25.48it/s]
 89%| | 70/79 [00:03<00:00, 25.60it/s]
 92%|| 73/79 [00:03<00:00, 25.64it/s]
 96%|| 76/79 [00:03<00:00, 26.41it/s]
100%|| 79/79 [00:03<00:00, 27.21it/s]
, 24.42it/s]
 70%|   | 55/79 [00:03<00:00, 24.73it/s]
 73%|  | 58/79 [00:03<00:00, 25.29it/s]
 77%|  | 61/79 [00:03<00:00, 25.70it/s]
 81%|  | 64/79 [00:03<00:00, 24.92it/s]
 85%| | 67/79 [00:03<00:00, 25.17it/s]
 89%| | 70/79 [00:03<00:00, 25.60it/s]
 92%|| 73/79 [00:03<00:00, 25.45it/s]
 96%|| 76/79 [00:03<00:00, 26.09it/s]
100%|| 79/79 [00:03<00:00, 26.91it/s]
93it/s]
 68%|   | 54/79 [00:02<00:01, 24.45it/s]
 72%|  | 57/79 [00:03<00:00, 24.61it/s]
 76%|  | 60/79 [00:03<00:00, 24.72it/s]
 80%|  | 63/79 [00:03<00:00, 24.84it/s]
 84%| | 66/79 [00:03<00:00, 25.11it/s]
 87%| | 69/79 [00:03<00:00, 25.02it/s]
 91%| | 72/79 [00:03<00:00, 25.18it/s]
 95%|| 75/79 [00:03<00:00, 26.03it/s]
 99%|| 78/79 [00:03<00:00, 26.63it/s]
100%|| 79/79 [00:04<00:00, 19.74it/s]
95it/s]
 68%|   | 54/79 [00:02<00:01, 24.31it/s]
 72%|  | 57/79 [00:03<00:00, 24.52it/s]
 76%|  | 60/79 [00:03<00:00, 24.63it/s]
 80%|  | 63/79 [00:03<00:00, 24.95it/s]
 84%| | 66/79 [00:03<00:00, 24.69it/s]
 87%| | 69/79 [00:03<00:00, 25.09it/s]
 91%| | 72/79 [00:03<00:00, 24.73it/s]
 95%|| 75/79 [00:03<00:00, 26.00it/s]
 99%|| 78/79 [00:03<00:00, 26.40it/s]
100%|| 79/79 [00:04<00:00, 19.74it/s]
, 23.85it/s]
 70%|   | 55/79 [00:03<00:00, 24.11it/s]
 73%|  | 58/79 [00:03<00:00, 24.83it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 25.31it/s]
 85%| | 67/79 [00:03<00:00, 25.51it/s]
 89%| | 70/79 [00:03<00:00, 25.90it/s]
 92%|| 73/79 [00:03<00:00, 26.09it/s]
 96%|| 76/79 [00:03<00:00, 26.79it/s]
100%|| 79/79 [00:03<00:00, 27.55it/s]
, 24.06it/s]
 70%|   | 55/79 [00:03<00:00, 24.64it/s]
 73%|  | 58/79 [00:03<00:00, 24.98it/s]
 77%|  | 61/79 [00:03<00:00, 24.93it/s]
 81%|  | 64/79 [00:03<00:00, 24.94it/s]
 85%| | 67/79 [00:03<00:00, 25.14it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 25.58it/s]
 96%|| 76/79 [00:03<00:00, 26.17it/s]
100%|| 79/79 [00:03<00:00, 27.19it/s]
, 23.98it/s]
 70%|   | 55/79 [00:03<00:00, 24.50it/s]
 73%|  | 58/79 [00:03<00:00, 24.72it/s]
 77%|  | 61/79 [00:03<00:00, 24.69it/s]
 81%|  | 64/79 [00:03<00:00, 24.75it/s]
 85%| | 67/79 [00:03<00:00, 25.01it/s]
 89%| | 70/79 [00:03<00:00, 25.24it/s]
 92%|| 73/79 [00:03<00:00, 25.41it/s]
 97%|| 77/79 [00:03<00:00, 26.52it/s]
100%|| 79/79 [00:04<00:00, 19.48it/s]
76it/s]
 68%|   | 54/79 [00:03<00:01, 24.23it/s]
 72%|  | 57/79 [00:03<00:00, 24.57it/s]
 76%|  | 60/79 [00:03<00:00, 24.74it/s]
 80%|  | 63/79 [00:03<00:00, 24.68it/s]
 84%| | 66/79 [00:03<00:00, 24.84it/s]
 87%| | 69/79 [00:03<00:00, 24.90it/s]
 91%| | 72/79 [00:03<00:00, 25.15it/s]
 95%|| 75/79 [00:03<00:00, 25.69it/s]
 99%|| 78/79 [00:04<00:00, 26.58it/s]
100%|| 79/79 [00:04<00:00, 19.23it/s]
, 23.90it/s]
 70%|   | 55/79 [00:03<00:00, 24.07it/s]
 73%|  | 58/79 [00:03<00:00, 24.23it/s]
 77%|  | 61/79 [00:03<00:00, 24.12it/s]
 81%|  | 64/79 [00:03<00:00, 24.35it/s]
 85%| | 67/79 [00:03<00:00, 24.72it/s]
 89%| | 70/79 [00:03<00:00, 24.79it/s]
 92%|| 73/79 [00:03<00:00, 25.24it/s]
 96%|| 76/79 [00:03<00:00, 25.87it/s]
100%|| 79/79 [00:04<00:00, 26.74it/s]
, 23.82it/s]
 70%|   | 55/79 [00:03<00:00, 24.19it/s]
 73%|  | 58/79 [00:03<00:00, 24.47it/s]
 77%|  | 61/79 [00:03<00:00, 24.78it/s]
 81%|  | 64/79 [00:03<00:00, 24.66it/s]
 85%| | 67/79 [00:03<00:00, 24.80it/s]
 89%| | 70/79 [00:03<00:00, 24.95it/s]
 92%|| 73/79 [00:03<00:00, 25.28it/s]
 96%|| 76/79 [00:03<00:00, 25.83it/s]
100%|| 79/79 [00:04<00:00, 26.64it/s]
, 23.61it/s]
 70%|   | 55/79 [00:03<00:00, 24.16it/s]
 73%|  | 58/79 [00:03<00:00, 24.34it/s]
 77%|  | 61/79 [00:03<00:00, 24.64it/s]
 81%|  | 64/79 [00:03<00:00, 24.94it/s]
 85%| | 67/79 [00:03<00:00, 25.17it/s]
 89%| | 70/79 [00:03<00:00, 24.94it/s]
 92%|| 73/79 [00:03<00:00, 25.20it/s]
 96%|| 76/79 [00:03<00:00, 25.77it/s]
100%|| 79/79 [00:04<00:00, 26.50it/s]
42it/s]
 68%|   | 54/79 [00:03<00:01, 23.79it/s]
 72%|  | 57/79 [00:03<00:00, 24.07it/s]
 76%|  | 60/79 [00:03<00:00, 24.33it/s]
 80%|  | 63/79 [00:03<00:00, 24.61it/s]
 84%| | 66/79 [00:03<00:00, 24.79it/s]
 87%| | 69/79 [00:03<00:00, 24.85it/s]
 91%| | 72/79 [00:03<00:00, 24.90it/s]
 95%|| 75/79 [00:03<00:00, 25.59it/s]
 99%|| 78/79 [00:04<00:00, 26.05it/s]
100%|| 79/79 [00:04<00:00, 18.86it/s]
02it/s]
 68%|   | 54/79 [00:03<00:01, 23.32it/s]
 72%|  | 57/79 [00:03<00:00, 23.90it/s]
 76%|  | 60/79 [00:03<00:00, 24.10it/s]
 80%|  | 63/79 [00:03<00:00, 24.11it/s]
 84%| | 66/79 [00:03<00:00, 24.30it/s]
 87%| | 69/79 [00:03<00:00, 24.45it/s]
 91%| | 72/79 [00:03<00:00, 24.51it/s]
 95%|| 75/79 [00:03<00:00, 25.31it/s]
 99%|| 78/79 [00:04<00:00, 25.89it/s]
100%|| 79/79 [00:04<00:00, 18.83it/s]
, 22.89it/s]
 70%|   | 55/79 [00:03<00:01, 23.50it/s]
 73%|  | 58/79 [00:03<00:00, 23.68it/s]
 77%|  | 61/79 [00:03<00:00, 23.89it/s]
 81%|  | 64/79 [00:03<00:00, 24.11it/s]
 85%| | 67/79 [00:03<00:00, 24.29it/s]
 89%| | 70/79 [00:03<00:00, 24.49it/s]
 92%|| 73/79 [00:03<00:00, 24.76it/s]
 96%|| 76/79 [00:04<00:00, 25.62it/s]
100%|| 79/79 [00:04<00:00, 26.37it/s]
, 22.89it/s]
 70%|   | 55/79 [00:03<00:01, 23.43it/s]
 73%|  | 58/79 [00:03<00:00, 23.56it/s]
 77%|  | 61/79 [00:03<00:00, 23.39it/s]
 81%|  | 64/79 [00:03<00:00, 23.36it/s]
 85%| | 67/79 [00:03<00:00, 23.67it/s]
 89%| | 70/79 [00:03<00:00, 23.74it/s]
 92%|| 73/79 [00:03<00:00, 24.24it/s]
 96%|| 76/79 [00:04<00:00, 25.10it/s]
100%|| 79/79 [00:04<00:00, 26.13it/s]
2020-06-23 16:43:42,003 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.234581 (0.027101318359375 s / img per device, on 32 devices)
2020-06-23 16:43:42,021 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:43:42,021 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:43:42,040 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592955828558, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 14, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592955828559, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 14}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:43:50,640 maskrcnn_benchmark.trainer INFO: eta: 0:58:40  iter: 11940  loss: 0.4447 (0.7168)  loss_classifier: 0.1260 (0.2591)  loss_box_reg: 0.0620 (0.1159)  loss_mask: 0.2418 (0.2872)  loss_objectness: 0.0144 (0.0345)  loss_rpn_box_reg: 0.0047 (0.0200)  time: 0.1095 (0.1255)  data: 0.0015 (0.0179)  lr: 0.016000  max mem: 5193
2020-06-23 16:43:52,808 maskrcnn_benchmark.trainer INFO: eta: 0:58:37  iter: 11960  loss: 0.4208 (0.7163)  loss_classifier: 0.1121 (0.2589)  loss_box_reg: 0.0514 (0.1159)  loss_mask: 0.2282 (0.2871)  loss_objectness: 0.0087 (0.0345)  loss_rpn_box_reg: 0.0035 (0.0200)  time: 0.1083 (0.1254)  data: 0.0015 (0.0179)  lr: 0.016000  max mem: 5193
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.55s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:43:54,971 maskrcnn_benchmark.trainer INFO: eta: 0:58:33  iter: 11980  loss: 0.5863 (0.7160)  loss_classifier: 0.1726 (0.2588)  loss_box_reg: 0.0813 (0.1158)  loss_mask: 0.2369 (0.2870)  loss_objectness: 0.0218 (0.0345)  loss_rpn_box_reg: 0.0077 (0.0200)  time: 0.1078 (0.1254)  data: 0.0015 (0.0179)  lr: 0.016000  max mem: 5193
DONE (t=1.39s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37152
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.58743
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.40257
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21511
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.40186
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48385
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30975
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.48692
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51109
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.32294
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.54423
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.64631
2020-06-23 16:43:57,145 maskrcnn_benchmark.trainer INFO: eta: 0:58:30  iter: 12000  loss: 0.4705 (0.7157)  loss_classifier: 0.1662 (0.2586)  loss_box_reg: 0.0697 (0.1158)  loss_mask: 0.2391 (0.2869)  loss_objectness: 0.0096 (0.0344)  loss_rpn_box_reg: 0.0055 (0.0200)  time: 0.1080 (0.1254)  data: 0.0015 (0.0178)  lr: 0.001600  max mem: 5193
2020-06-23 16:43:59,331 maskrcnn_benchmark.trainer INFO: eta: 0:58:27  iter: 12020  loss: 0.4361 (0.7153)  loss_classifier: 0.1372 (0.2584)  loss_box_reg: 0.0618 (0.1157)  loss_mask: 0.2225 (0.2868)  loss_objectness: 0.0111 (0.0344)  loss_rpn_box_reg: 0.0061 (0.0200)  time: 0.1085 (0.1254)  data: 0.0014 (0.0178)  lr: 0.001600  max mem: 5193
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:44:01,499 maskrcnn_benchmark.trainer INFO: eta: 0:58:24  iter: 12040  loss: 0.5893 (0.7151)  loss_classifier: 0.1807 (0.2583)  loss_box_reg: 0.1090 (0.1157)  loss_mask: 0.2751 (0.2868)  loss_objectness: 0.0094 (0.0344)  loss_rpn_box_reg: 0.0059 (0.0199)  time: 0.1091 (0.1253)  data: 0.0015 (0.0178)  lr: 0.001600  max mem: 5193
DONE (t=1.47s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:44:03,678 maskrcnn_benchmark.trainer INFO: eta: 0:58:20  iter: 12060  loss: 0.5165 (0.7149)  loss_classifier: 0.1755 (0.2582)  loss_box_reg: 0.1027 (0.1157)  loss_mask: 0.2297 (0.2867)  loss_objectness: 0.0140 (0.0344)  loss_rpn_box_reg: 0.0071 (0.0199)  time: 0.1083 (0.1253)  data: 0.0015 (0.0178)  lr: 0.001600  max mem: 5193
DONE (t=2.25s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.33918
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.55536
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.35878
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15347
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36443
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.50129
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29247
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.44900
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.46904
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27093
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50396
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62607
2020-06-23 16:44:04,247 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3715243527680708, segm mAP: 0.3391819848046099
:::MLLOG {"namespace": "", "time_ms": 1592955844247, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.3715243527680708, "SEGM": 0.3391819848046099}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 13}}
:::MLLOG {"namespace": "", "time_ms": 1592955844247, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 13}}
2020-06-23 16:44:05,995 maskrcnn_benchmark.trainer INFO: eta: 0:58:17  iter: 12080  loss: 0.5177 (0.7146)  loss_classifier: 0.1616 (0.2581)  loss_box_reg: 0.0846 (0.1156)  loss_mask: 0.2650 (0.2866)  loss_objectness: 0.0111 (0.0343)  loss_rpn_box_reg: 0.0054 (0.0199)  time: 0.1086 (0.1253)  data: 0.0015 (0.0177)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:08,167 maskrcnn_benchmark.trainer INFO: eta: 0:58:14  iter: 12100  loss: 0.5631 (0.7143)  loss_classifier: 0.1728 (0.2580)  loss_box_reg: 0.0952 (0.1156)  loss_mask: 0.2411 (0.2866)  loss_objectness: 0.0148 (0.0343)  loss_rpn_box_reg: 0.0071 (0.0199)  time: 0.1083 (0.1253)  data: 0.0014 (0.0177)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:10,359 maskrcnn_benchmark.trainer INFO: eta: 0:58:11  iter: 12120  loss: 0.4713 (0.7140)  loss_classifier: 0.1757 (0.2578)  loss_box_reg: 0.0760 (0.1155)  loss_mask: 0.2220 (0.2865)  loss_objectness: 0.0067 (0.0343)  loss_rpn_box_reg: 0.0047 (0.0199)  time: 0.1097 (0.1252)  data: 0.0014 (0.0177)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:12,548 maskrcnn_benchmark.trainer INFO: eta: 0:58:08  iter: 12140  loss: 0.5543 (0.7138)  loss_classifier: 0.1900 (0.2577)  loss_box_reg: 0.0884 (0.1155)  loss_mask: 0.2430 (0.2864)  loss_objectness: 0.0215 (0.0343)  loss_rpn_box_reg: 0.0121 (0.0199)  time: 0.1089 (0.1252)  data: 0.0015 (0.0177)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:14,729 maskrcnn_benchmark.trainer INFO: eta: 0:58:04  iter: 12160  loss: 0.5525 (0.7136)  loss_classifier: 0.1894 (0.2576)  loss_box_reg: 0.0826 (0.1155)  loss_mask: 0.2471 (0.2864)  loss_objectness: 0.0162 (0.0342)  loss_rpn_box_reg: 0.0111 (0.0199)  time: 0.1092 (0.1252)  data: 0.0015 (0.0176)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:16,950 maskrcnn_benchmark.trainer INFO: eta: 0:58:01  iter: 12180  loss: 0.5826 (0.7134)  loss_classifier: 0.1827 (0.2575)  loss_box_reg: 0.0998 (0.1155)  loss_mask: 0.2343 (0.2863)  loss_objectness: 0.0110 (0.0342)  loss_rpn_box_reg: 0.0065 (0.0199)  time: 0.1107 (0.1252)  data: 0.0015 (0.0176)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:19,142 maskrcnn_benchmark.trainer INFO: eta: 0:57:58  iter: 12200  loss: 0.5473 (0.7132)  loss_classifier: 0.1783 (0.2574)  loss_box_reg: 0.0836 (0.1154)  loss_mask: 0.2675 (0.2862)  loss_objectness: 0.0105 (0.0342)  loss_rpn_box_reg: 0.0099 (0.0199)  time: 0.1090 (0.1251)  data: 0.0015 (0.0176)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:21,321 maskrcnn_benchmark.trainer INFO: eta: 0:57:55  iter: 12220  loss: 0.5620 (0.7129)  loss_classifier: 0.1924 (0.2573)  loss_box_reg: 0.0895 (0.1154)  loss_mask: 0.2428 (0.2862)  loss_objectness: 0.0157 (0.0342)  loss_rpn_box_reg: 0.0053 (0.0199)  time: 0.1084 (0.1251)  data: 0.0015 (0.0175)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:23,493 maskrcnn_benchmark.trainer INFO: eta: 0:57:52  iter: 12240  loss: 0.5462 (0.7127)  loss_classifier: 0.1893 (0.2572)  loss_box_reg: 0.0876 (0.1154)  loss_mask: 0.2588 (0.2861)  loss_objectness: 0.0107 (0.0341)  loss_rpn_box_reg: 0.0050 (0.0198)  time: 0.1079 (0.1251)  data: 0.0015 (0.0175)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:25,651 maskrcnn_benchmark.trainer INFO: eta: 0:57:48  iter: 12260  loss: 0.5871 (0.7125)  loss_classifier: 0.1971 (0.2571)  loss_box_reg: 0.0928 (0.1153)  loss_mask: 0.2425 (0.2861)  loss_objectness: 0.0108 (0.0341)  loss_rpn_box_reg: 0.0049 (0.0198)  time: 0.1078 (0.1250)  data: 0.0015 (0.0175)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:27,831 maskrcnn_benchmark.trainer INFO: eta: 0:57:45  iter: 12280  loss: 0.5444 (0.7122)  loss_classifier: 0.1627 (0.2570)  loss_box_reg: 0.0862 (0.1153)  loss_mask: 0.2281 (0.2860)  loss_objectness: 0.0128 (0.0341)  loss_rpn_box_reg: 0.0102 (0.0198)  time: 0.1085 (0.1250)  data: 0.0014 (0.0175)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:30,016 maskrcnn_benchmark.trainer INFO: eta: 0:57:42  iter: 12300  loss: 0.5384 (0.7119)  loss_classifier: 0.1734 (0.2569)  loss_box_reg: 0.0883 (0.1153)  loss_mask: 0.2240 (0.2859)  loss_objectness: 0.0121 (0.0341)  loss_rpn_box_reg: 0.0062 (0.0198)  time: 0.1093 (0.1250)  data: 0.0015 (0.0174)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:32,191 maskrcnn_benchmark.trainer INFO: eta: 0:57:39  iter: 12320  loss: 0.4681 (0.7116)  loss_classifier: 0.1433 (0.2567)  loss_box_reg: 0.0761 (0.1152)  loss_mask: 0.2389 (0.2858)  loss_objectness: 0.0090 (0.0340)  loss_rpn_box_reg: 0.0061 (0.0198)  time: 0.1081 (0.1250)  data: 0.0015 (0.0174)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:34,368 maskrcnn_benchmark.trainer INFO: eta: 0:57:35  iter: 12340  loss: 0.5120 (0.7113)  loss_classifier: 0.1407 (0.2565)  loss_box_reg: 0.0737 (0.1152)  loss_mask: 0.2331 (0.2857)  loss_objectness: 0.0119 (0.0340)  loss_rpn_box_reg: 0.0094 (0.0198)  time: 0.1086 (0.1249)  data: 0.0015 (0.0174)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:36,548 maskrcnn_benchmark.trainer INFO: eta: 0:57:32  iter: 12360  loss: 0.5467 (0.7111)  loss_classifier: 0.1722 (0.2564)  loss_box_reg: 0.0930 (0.1151)  loss_mask: 0.2468 (0.2857)  loss_objectness: 0.0126 (0.0340)  loss_rpn_box_reg: 0.0071 (0.0198)  time: 0.1081 (0.1249)  data: 0.0015 (0.0174)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:38,747 maskrcnn_benchmark.trainer INFO: eta: 0:57:29  iter: 12380  loss: 0.6021 (0.7108)  loss_classifier: 0.1804 (0.2563)  loss_box_reg: 0.0916 (0.1151)  loss_mask: 0.2492 (0.2856)  loss_objectness: 0.0131 (0.0340)  loss_rpn_box_reg: 0.0063 (0.0198)  time: 0.1093 (0.1249)  data: 0.0014 (0.0173)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:40,935 maskrcnn_benchmark.trainer INFO: eta: 0:57:26  iter: 12400  loss: 0.5370 (0.7106)  loss_classifier: 0.1813 (0.2562)  loss_box_reg: 0.0917 (0.1151)  loss_mask: 0.2389 (0.2856)  loss_objectness: 0.0140 (0.0340)  loss_rpn_box_reg: 0.0086 (0.0198)  time: 0.1086 (0.1249)  data: 0.0015 (0.0173)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:43,130 maskrcnn_benchmark.trainer INFO: eta: 0:57:23  iter: 12420  loss: 0.5284 (0.7103)  loss_classifier: 0.1835 (0.2561)  loss_box_reg: 0.0954 (0.1150)  loss_mask: 0.2177 (0.2855)  loss_objectness: 0.0168 (0.0339)  loss_rpn_box_reg: 0.0118 (0.0198)  time: 0.1090 (0.1248)  data: 0.0015 (0.0173)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:45,331 maskrcnn_benchmark.trainer INFO: eta: 0:57:20  iter: 12440  loss: 0.6190 (0.7101)  loss_classifier: 0.1944 (0.2560)  loss_box_reg: 0.1040 (0.1150)  loss_mask: 0.2536 (0.2854)  loss_objectness: 0.0163 (0.0339)  loss_rpn_box_reg: 0.0097 (0.0198)  time: 0.1087 (0.1248)  data: 0.0015 (0.0173)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:47,532 maskrcnn_benchmark.trainer INFO: eta: 0:57:16  iter: 12460  loss: 0.5719 (0.7100)  loss_classifier: 0.1887 (0.2559)  loss_box_reg: 0.1053 (0.1150)  loss_mask: 0.2628 (0.2854)  loss_objectness: 0.0165 (0.0339)  loss_rpn_box_reg: 0.0069 (0.0198)  time: 0.1100 (0.1248)  data: 0.0015 (0.0172)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:49,716 maskrcnn_benchmark.trainer INFO: eta: 0:57:13  iter: 12480  loss: 0.5143 (0.7097)  loss_classifier: 0.1566 (0.2557)  loss_box_reg: 0.0768 (0.1149)  loss_mask: 0.2421 (0.2853)  loss_objectness: 0.0111 (0.0339)  loss_rpn_box_reg: 0.0050 (0.0198)  time: 0.1088 (0.1248)  data: 0.0014 (0.0172)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:51,917 maskrcnn_benchmark.trainer INFO: eta: 0:57:10  iter: 12500  loss: 0.5341 (0.7095)  loss_classifier: 0.1707 (0.2556)  loss_box_reg: 0.0880 (0.1149)  loss_mask: 0.2488 (0.2853)  loss_objectness: 0.0124 (0.0339)  loss_rpn_box_reg: 0.0061 (0.0198)  time: 0.1095 (0.1247)  data: 0.0016 (0.0172)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:54,102 maskrcnn_benchmark.trainer INFO: eta: 0:57:07  iter: 12520  loss: 0.5291 (0.7092)  loss_classifier: 0.1554 (0.2555)  loss_box_reg: 0.0776 (0.1149)  loss_mask: 0.2317 (0.2852)  loss_objectness: 0.0144 (0.0339)  loss_rpn_box_reg: 0.0122 (0.0198)  time: 0.1092 (0.1247)  data: 0.0014 (0.0172)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:56,301 maskrcnn_benchmark.trainer INFO: eta: 0:57:04  iter: 12540  loss: 0.5851 (0.7090)  loss_classifier: 0.1916 (0.2554)  loss_box_reg: 0.1038 (0.1149)  loss_mask: 0.2570 (0.2851)  loss_objectness: 0.0206 (0.0338)  loss_rpn_box_reg: 0.0086 (0.0198)  time: 0.1093 (0.1247)  data: 0.0014 (0.0171)  lr: 0.001600  max mem: 5193
2020-06-23 16:44:58,495 maskrcnn_benchmark.trainer INFO: eta: 0:57:01  iter: 12560  loss: 0.5773 (0.7088)  loss_classifier: 0.1823 (0.2553)  loss_box_reg: 0.0874 (0.1148)  loss_mask: 0.2267 (0.2851)  loss_objectness: 0.0139 (0.0338)  loss_rpn_box_reg: 0.0065 (0.0198)  time: 0.1091 (0.1247)  data: 0.0014 (0.0171)  lr: 0.001600  max mem: 5193
2020-06-23 16:45:00,684 maskrcnn_benchmark.trainer INFO: eta: 0:56:57  iter: 12580  loss: 0.5670 (0.7085)  loss_classifier: 0.1532 (0.2551)  loss_box_reg: 0.0909 (0.1148)  loss_mask: 0.2572 (0.2850)  loss_objectness: 0.0162 (0.0338)  loss_rpn_box_reg: 0.0106 (0.0198)  time: 0.1097 (0.1247)  data: 0.0014 (0.0171)  lr: 0.001600  max mem: 5193
2020-06-23 16:45:02,873 maskrcnn_benchmark.trainer INFO: eta: 0:56:54  iter: 12600  loss: 0.5215 (0.7082)  loss_classifier: 0.1485 (0.2550)  loss_box_reg: 0.0694 (0.1147)  loss_mask: 0.2643 (0.2850)  loss_objectness: 0.0106 (0.0338)  loss_rpn_box_reg: 0.0054 (0.0198)  time: 0.1085 (0.1246)  data: 0.0014 (0.0171)  lr: 0.001600  max mem: 5193
2020-06-23 16:45:05,046 maskrcnn_benchmark.trainer INFO: eta: 0:56:51  iter: 12620  loss: 0.5183 (0.7079)  loss_classifier: 0.1552 (0.2548)  loss_box_reg: 0.0942 (0.1147)  loss_mask: 0.2346 (0.2849)  loss_objectness: 0.0083 (0.0337)  loss_rpn_box_reg: 0.0050 (0.0197)  time: 0.1082 (0.1246)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5193
2020-06-23 16:45:07,264 maskrcnn_benchmark.trainer INFO: eta: 0:56:48  iter: 12640  loss: 0.5599 (0.7077)  loss_classifier: 0.1602 (0.2547)  loss_box_reg: 0.0989 (0.1147)  loss_mask: 0.2575 (0.2848)  loss_objectness: 0.0121 (0.0337)  loss_rpn_box_reg: 0.0119 (0.0197)  time: 0.1100 (0.1246)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5193
2020-06-23 16:45:09,454 maskrcnn_benchmark.trainer INFO: eta: 0:56:45  iter: 12660  loss: 0.5916 (0.7075)  loss_classifier: 0.2050 (0.2546)  loss_box_reg: 0.1198 (0.1146)  loss_mask: 0.2606 (0.2848)  loss_objectness: 0.0216 (0.0337)  loss_rpn_box_reg: 0.0105 (0.0197)  time: 0.1089 (0.1246)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5193
2020-06-23 16:45:11,637 maskrcnn_benchmark.trainer INFO: eta: 0:56:42  iter: 12680  loss: 0.4642 (0.7071)  loss_classifier: 0.1286 (0.2545)  loss_box_reg: 0.0698 (0.1146)  loss_mask: 0.2191 (0.2847)  loss_objectness: 0.0083 (0.0337)  loss_rpn_box_reg: 0.0035 (0.0197)  time: 0.1089 (0.1245)  data: 0.0013 (0.0170)  lr: 0.001600  max mem: 5193
2020-06-23 16:45:13,821 maskrcnn_benchmark.trainer INFO: eta: 0:56:39  iter: 12700  loss: 0.5551 (0.7069)  loss_classifier: 0.2001 (0.2543)  loss_box_reg: 0.0986 (0.1145)  loss_mask: 0.2455 (0.2846)  loss_objectness: 0.0111 (0.0336)  loss_rpn_box_reg: 0.0145 (0.0197)  time: 0.1094 (0.1245)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5193
2020-06-23 16:45:16,003 maskrcnn_benchmark.trainer INFO: eta: 0:56:35  iter: 12720  loss: 0.4997 (0.7066)  loss_classifier: 0.1442 (0.2542)  loss_box_reg: 0.0672 (0.1145)  loss_mask: 0.2240 (0.2845)  loss_objectness: 0.0149 (0.0336)  loss_rpn_box_reg: 0.0067 (0.0197)  time: 0.1085 (0.1245)  data: 0.0013 (0.0169)  lr: 0.001600  max mem: 5193
2020-06-23 16:45:18,194 maskrcnn_benchmark.trainer INFO: eta: 0:56:32  iter: 12740  loss: 0.5283 (0.7064)  loss_classifier: 0.1539 (0.2541)  loss_box_reg: 0.0917 (0.1145)  loss_mask: 0.2412 (0.2845)  loss_objectness: 0.0138 (0.0336)  loss_rpn_box_reg: 0.0058 (0.0197)  time: 0.1100 (0.1245)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5193
2020-06-23 16:45:20,371 maskrcnn_benchmark.trainer INFO: eta: 0:56:29  iter: 12760  loss: 0.4749 (0.7061)  loss_classifier: 0.1720 (0.2540)  loss_box_reg: 0.0821 (0.1144)  loss_mask: 0.2399 (0.2844)  loss_objectness: 0.0109 (0.0336)  loss_rpn_box_reg: 0.0047 (0.0197)  time: 0.1087 (0.1244)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5193
2020-06-23 16:45:22,547 maskrcnn_benchmark.trainer INFO: eta: 0:56:26  iter: 12780  loss: 0.6059 (0.7059)  loss_classifier: 0.2101 (0.2539)  loss_box_reg: 0.0938 (0.1144)  loss_mask: 0.2421 (0.2843)  loss_objectness: 0.0176 (0.0336)  loss_rpn_box_reg: 0.0096 (0.0197)  time: 0.1081 (0.1244)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5193
2020-06-23 16:45:24,725 maskrcnn_benchmark.trainer INFO: eta: 0:56:23  iter: 12800  loss: 0.4889 (0.7057)  loss_classifier: 0.1566 (0.2538)  loss_box_reg: 0.0857 (0.1144)  loss_mask: 0.2289 (0.2843)  loss_objectness: 0.0100 (0.0336)  loss_rpn_box_reg: 0.0080 (0.0196)  time: 0.1083 (0.1244)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5193
2020-06-23 16:45:26,894 maskrcnn_benchmark.trainer INFO: eta: 0:56:20  iter: 12820  loss: 0.5756 (0.7055)  loss_classifier: 0.2090 (0.2537)  loss_box_reg: 0.0877 (0.1144)  loss_mask: 0.2485 (0.2842)  loss_objectness: 0.0153 (0.0336)  loss_rpn_box_reg: 0.0070 (0.0197)  time: 0.1082 (0.1244)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5193

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0


Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0
Grad overflow on iteration  12837

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12837
Using dynamic loss scale of  65536.0
:::MLLOG {"namespace": "", "time_ms": 1592955928843, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 14}}
:::MLLOG {"namespace": "", "time_ms": 1592955928843, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 14}}
:::MLLOG {"namespace": "", "time_ms": 1592955928843, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 14}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 16:45:29,085 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
index created!
index created!
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
2020-06-23 16:45:29,394 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:56,  1.37it/s]
  5%|         | 4/79 [00:00<00:39,  1.90it/s]
  9%|         | 7/79 [00:00<00:27,  2.64it/s]
 13%|        | 10/79 [00:01<00:19,  3.61it/s]
 16%|        | 13/79 [00:01<00:13,  4.87it/s]
 20%|        | 16/79 [00:01<00:09,  6.43it/s]
 24%|       | 19/79 [00:01<00:07,  8.29it/s]
 28%|       | 22/79 [00:01<00:05, 10.37it/s]
 32%|      | 25/79 [00:01<00:04, 12.66it/s]
 35%|      | 28/79 [00:01<00:03, 14.92it/s]
 39%|      | 31/79 [00:01<00:02, 17.10it/s]
 43%|     | 34/79 [00:02<00:02, 19.03it/s]
 47%|     | 37/79 [00:02<00:02, 20.73it/s]
 51%|     | 40/79 [00:02<00:01, 22.08it/s]
 54%|    | 43/79 [00:02<00:01, 23.18it/s]
 58%|    | 46/79 [00:02<00:01, 23.90it/s]
 62%|   | 49/79 [00:02<00:01, 24.21it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.30it/s]
  5%|         | 4/79 [00:00<00:41,  1.82it/s]
  9%|         | 7/79 [00:01<00:28,  2.52it/s]
 13%|        | 10/79 [00:01<00:19,  3.46it/s]
 16%|        | 13/79 [00:01<00:14,  4.67it/s]
 20%|        | 16/79 [00:01<00:10,  6.20it/s]
 24%|       | 19/79 [00:01<00:07,  8.04it/s]
 28%|       | 22/79 [00:01<00:05, 10.19it/s]
 32%|      | 25/79 [00:01<00:04, 12.50it/s]
 35%|      | 28/79 [00:01<00:03, 14.84it/s]
 39%|      | 31/79 [00:01<00:02, 17.21it/s]
 43%|     | 34/79 [00:02<00:02, 19.24it/s]
 47%|     | 37/79 [00:02<00:02, 20.97it/s]
 51%|     | 40/79 [00:02<00:01, 22.29it/s]
 54%|    | 43/79 [00:02<00:01, 23.29it/s]
 58%|    | 46/79 [00:02<00:01, 24.12it/s]
 62%|   | 49/79 [00:02<00:01, 24.64it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.70it/s]
 24%|       | 19/79 [00:01<00:08,  7.43it/s]
 28%|       | 22/79 [00:01<00:06,  9.49it/s]
 32%|      | 25/79 [00:01<00:04, 11.71it/s]
 35%|      | 28/79 [00:01<00:03, 14.07it/s]
 39%|      | 31/79 [00:02<00:02, 16.36it/s]
 43%|     | 34/79 [00:02<00:02, 18.51it/s]
 47%|     | 37/79 [00:02<00:02, 20.16it/s]
 51%|     | 40/79 [00:02<00:01, 21.73it/s]
 54%|    | 43/79 [00:02<00:01, 22.92it/s]
 58%|    | 46/79 [00:02<00:01, 23.91it/s]
 62%|   | 49/79 [00:02<00:01, 24.81it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.27it/s]
  5%|         | 4/79 [00:00<00:42,  1.77it/s]
  9%|         | 7/79 [00:01<00:29,  2.45it/s]
 13%|        | 10/79 [00:01<00:20,  3.37it/s]
 16%|        | 13/79 [00:01<00:14,  4.54it/s]
 20%|        | 16/79 [00:01<00:10,  6.05it/s]
 24%|       | 19/79 [00:01<00:07,  7.86it/s]
 28%|       | 22/79 [00:01<00:05,  9.87it/s]
 32%|      | 25/79 [00:01<00:04, 12.12it/s]
 35%|      | 28/79 [00:01<00:03, 14.47it/s]
 39%|      | 31/79 [00:01<00:02, 16.59it/s]
 43%|     | 34/79 [00:02<00:02, 18.55it/s]
 47%|     | 37/79 [00:02<00:02, 20.32it/s]
 51%|     | 40/79 [00:02<00:01, 21.65it/s]
 54%|    | 43/79 [00:02<00:01, 22.47it/s]
 58%|    | 46/79 [00:02<00:01, 23.22it/s]
 62%|   | 49/79 [00:02<00:01, 23.70it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.36it/s]
 20%|        | 16/79 [00:01<00:10,  5.82it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.63it/s]
 32%|      | 25/79 [00:01<00:04, 11.90it/s]
 35%|      | 28/79 [00:01<00:03, 14.23it/s]
 39%|      | 31/79 [00:01<00:02, 16.48it/s]
 43%|     | 34/79 [00:02<00:02, 18.52it/s]
 47%|     | 37/79 [00:02<00:02, 20.28it/s]
 51%|     | 40/79 [00:02<00:01, 21.71it/s]
 54%|    | 43/79 [00:02<00:01, 22.88it/s]
 58%|    | 46/79 [00:02<00:01, 23.73it/s]
 62%|   | 49/79 [00:02<00:01, 24.56it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.28it/s]
  5%|         | 4/79 [00:00<00:42,  1.78it/s]
  9%|         | 7/79 [00:01<00:29,  2.47it/s]
 13%|        | 10/79 [00:01<00:20,  3.39it/s]
 16%|        | 13/79 [00:01<00:14,  4.58it/s]
 20%|        | 16/79 [00:01<00:10,  6.08it/s]
 24%|       | 19/79 [00:01<00:07,  7.89it/s]
 28%|       | 22/79 [00:01<00:05,  9.91it/s]
 32%|      | 25/79 [00:01<00:04, 12.13it/s]
 35%|      | 28/79 [00:01<00:03, 14.43it/s]
 39%|      | 31/79 [00:01<00:02, 16.51it/s]
 43%|     | 34/79 [00:02<00:02, 18.44it/s]
 47%|     | 37/79 [00:02<00:02, 20.13it/s]
 51%|     | 40/79 [00:02<00:01, 21.62it/s]
 54%|    | 43/79 [00:02<00:01, 22.59it/s]
 58%|    | 46/79 [00:02<00:01, 23.53it/s]
 62%|   | 49/79 [00:02<00:01, 24.12it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.64it/s]
 28%|       | 22/79 [00:01<00:05,  9.73it/s]
 32%|      | 25/79 [00:01<00:04, 11.95it/s]
 35%|      | 28/79 [00:01<00:03, 14.33it/s]
 39%|      | 31/79 [00:01<00:02, 16.66it/s]
 43%|     | 34/79 [00:02<00:02, 18.68it/s]
 47%|     | 37/79 [00:02<00:02, 20.52it/s]
 51%|     | 40/79 [00:02<00:01, 21.82it/s]
 54%|    | 43/79 [00:02<00:01, 22.93it/s]
 58%|    | 46/79 [00:02<00:01, 23.51it/s]
 62%|   | 49/79 [00:02<00:01, 24.27it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.69it/s]
 24%|       | 19/79 [00:01<00:08,  7.42it/s]
 28%|       | 22/79 [00:01<00:06,  9.45it/s]
 32%|      | 25/79 [00:01<00:04, 11.65it/s]
 35%|      | 28/79 [00:01<00:03, 14.00it/s]
 39%|      | 31/79 [00:02<00:02, 16.21it/s]
 43%|     | 34/79 [00:02<00:02, 18.25it/s]
 47%|     | 37/79 [00:02<00:02, 19.93it/s]
 51%|     | 40/79 [00:02<00:01, 21.51it/s]
 54%|    | 43/79 [00:02<00:01, 22.79it/s]
 58%|    | 46/79 [00:02<00:01, 23.39it/s]
 62%|   | 49/79 [00:02<00:01, 24.16it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.36it/s]
 20%|        | 16/79 [00:01<00:10,  5.82it/s]
 24%|       | 19/79 [00:01<00:07,  7.57it/s]
 28%|       | 22/79 [00:01<00:05,  9.61it/s]
 32%|      | 25/79 [00:01<00:04, 11.85it/s]
 35%|      | 28/79 [00:01<00:03, 14.15it/s]
 39%|      | 31/79 [00:02<00:02, 16.30it/s]
 43%|     | 34/79 [00:02<00:02, 18.30it/s]
 47%|     | 37/79 [00:02<00:02, 19.98it/s]
 51%|     | 40/79 [00:02<00:01, 21.39it/s]
 54%|    | 43/79 [00:02<00:01, 22.43it/s]
 58%|    | 46/79 [00:02<00:01, 23.24it/s]
 62%|   | 49/79 [00:02<00:01, 23.98it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.43it/s]
 13%|        | 10/79 [00:01<00:20,  3.34it/s]
 16%|        | 13/79 [00:01<00:14,  4.52it/s]
 20%|        | 16/79 [00:01<00:10,  6.01it/s]
 24%|       | 19/79 [00:01<00:07,  7.81it/s]
 28%|       | 22/79 [00:01<00:05,  9.87it/s]
 32%|      | 25/79 [00:01<00:04, 12.09it/s]
 35%|      | 28/79 [00:01<00:03, 14.42it/s]
 39%|      | 31/79 [00:01<00:02, 16.54it/s]
 43%|     | 34/79 [00:02<00:02, 18.54it/s]
 47%|     | 37/79 [00:02<00:02, 20.31it/s]
 51%|     | 40/79 [00:02<00:01, 21.49it/s]
 54%|    | 43/79 [00:02<00:01, 22.69it/s]
 58%|    | 46/79 [00:02<00:01, 23.17it/s]
 62%|   | 49/79 [00:02<00:01, 23.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.44it/s]
 20%|        | 16/79 [00:01<00:10,  5.91it/s]
 24%|       | 19/79 [00:01<00:07,  7.66it/s]
 28%|       | 22/79 [00:01<00:05,  9.71it/s]
 32%|      | 25/79 [00:01<00:04, 11.91it/s]
 35%|      | 28/79 [00:01<00:03, 14.22it/s]
 39%|      | 31/79 [00:01<00:02, 16.47it/s]
 43%|     | 34/79 [00:02<00:02, 18.38it/s]
 47%|     | 37/79 [00:02<00:02, 19.97it/s]
 51%|     | 40/79 [00:02<00:01, 21.48it/s]
 54%|    | 43/79 [00:02<00:01, 22.69it/s]
 58%|    | 46/79 [00:02<00:01, 23.26it/s]
 62%|   | 49/79 [00:02<00:01, 23.98it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.40it/s]
 32%|      | 25/79 [00:01<00:04, 11.63it/s]
 35%|      | 28/79 [00:01<00:03, 13.93it/s]
 39%|      | 31/79 [00:02<00:02, 16.24it/s]
 43%|     | 34/79 [00:02<00:02, 18.19it/s]
 47%|     | 37/79 [00:02<00:02, 20.09it/s]
 51%|     | 40/79 [00:02<00:01, 21.57it/s]
 54%|    | 43/79 [00:02<00:01, 22.75it/s]
 58%|    | 46/79 [00:02<00:01, 23.49it/s]
 62%|   | 49/79 [00:02<00:01, 24.12it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  4%|         | 3/79 [00:00<00:46,  1.65it/s]
  8%|         | 6/79 [00:01<00:31,  2.28it/s]
 11%|        | 9/79 [00:01<00:22,  3.13it/s]
 15%|        | 12/79 [00:01<00:15,  4.24it/s]
 19%|        | 15/79 [00:01<00:11,  5.67it/s]
 23%|       | 18/79 [00:01<00:08,  7.40it/s]
 27%|       | 21/79 [00:01<00:06,  9.40it/s]
 30%|       | 24/79 [00:01<00:04, 11.62it/s]
 34%|      | 27/79 [00:01<00:03, 13.97it/s]
 38%|      | 30/79 [00:02<00:03, 16.16it/s]
 42%|     | 33/79 [00:02<00:02, 18.15it/s]
 46%|     | 36/79 [00:02<00:02, 19.80it/s]
 49%|     | 39/79 [00:02<00:01, 21.28it/s]
 53%|    | 42/79 [00:02<00:01, 22.54it/s]
 57%|    | 45/79 [00:02<00:01, 23.32it/s]
 61%|    | 48/79 [00:02<00:01, 23.88it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.45it/s]
 24%|       | 19/79 [00:01<00:08,  7.13it/s]
 28%|       | 22/79 [00:01<00:06,  9.13it/s]
 32%|      | 25/79 [00:01<00:04, 11.34it/s]
 35%|      | 28/79 [00:01<00:03, 13.72it/s]
 39%|      | 31/79 [00:02<00:03, 15.88it/s]
 43%|     | 34/79 [00:02<00:02, 18.03it/s]
 47%|     | 37/79 [00:02<00:02, 19.77it/s]
 51%|     | 40/79 [00:02<00:01, 21.17it/s]
 54%|    | 43/79 [00:02<00:01, 22.50it/s]
 58%|    | 46/79 [00:02<00:01, 23.31it/s]
 62%|   | 49/79 [00:02<00:01, 23.92it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.27it/s]
  4%|         | 3/79 [00:00<00:43,  1.76it/s]
  8%|         | 6/79 [00:01<00:30,  2.43it/s]
 11%|        | 9/79 [00:01<00:20,  3.33it/s]
 15%|        | 12/79 [00:01<00:14,  4.50it/s]
 19%|        | 15/79 [00:01<00:10,  5.95it/s]
 23%|       | 18/79 [00:01<00:07,  7.69it/s]
 27%|       | 21/79 [00:01<00:05,  9.70it/s]
 30%|       | 24/79 [00:01<00:04, 11.85it/s]
 34%|      | 27/79 [00:01<00:03, 13.94it/s]
 38%|      | 30/79 [00:02<00:03, 16.08it/s]
 42%|     | 33/79 [00:02<00:02, 17.95it/s]
 46%|     | 36/79 [00:02<00:02, 19.42it/s]
 49%|     | 39/79 [00:02<00:01, 20.46it/s]
 53%|    | 42/79 [00:02<00:01, 21.61it/s]
 57%|    | 45/79 [00:02<00:01, 22.32it/s]
 61%|    | 48/79 [00:02<00:01, 23.13it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.45it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.70it/s]
 35%|      | 28/79 [00:01<00:03, 13.96it/s]
 39%|      | 31/79 [00:02<00:02, 16.17it/s]
 43%|     | 34/79 [00:02<00:02, 18.28it/s]
 47%|     | 37/79 [00:02<00:02, 20.24it/s]
 51%|     | 40/79 [00:02<00:01, 21.43it/s]
 54%|    | 43/79 [00:02<00:01, 22.54it/s]
 58%|    | 46/79 [00:02<00:01, 23.32it/s]
 62%|   | 49/79 [00:02<00:01, 24.06it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.53it/s]
 28%|       | 22/79 [00:01<00:05,  9.54it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 13.88it/s]
 39%|      | 31/79 [00:02<00:02, 16.16it/s]
 43%|     | 34/79 [00:02<00:02, 18.17it/s]
 47%|     | 37/79 [00:02<00:02, 19.66it/s]
 51%|     | 40/79 [00:02<00:01, 21.14it/s]
 54%|    | 43/79 [00:02<00:01, 22.45it/s]
 58%|    | 46/79 [00:02<00:01, 23.48it/s]
 62%|   | 49/79 [00:02<00:01, 24.12it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.48it/s]
 28%|       | 22/79 [00:01<00:06,  9.50it/s]
 32%|      | 25/79 [00:01<00:04, 11.66it/s]
 35%|      | 28/79 [00:01<00:03, 13.91it/s]
 39%|      | 31/79 [00:02<00:02, 16.12it/s]
 43%|     | 34/79 [00:02<00:02, 18.01it/s]
 47%|     | 37/79 [00:02<00:02, 19.64it/s]
 51%|     | 40/79 [00:02<00:01, 20.97it/s]
 54%|    | 43/79 [00:02<00:01, 22.14it/s]
 58%|    | 46/79 [00:02<00:01, 22.98it/s]
 62%|   | 49/79 [00:02<00:01, 23.30it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.37it/s]
 32%|      | 25/79 [00:01<00:04, 11.55it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:03, 15.82it/s]
 43%|     | 34/79 [00:02<00:02, 17.91it/s]
 47%|     | 37/79 [00:02<00:02, 19.57it/s]
 51%|     | 40/79 [00:02<00:01, 20.98it/s]
 54%|    | 43/79 [00:02<00:01, 21.89it/s]
 58%|    | 46/79 [00:02<00:01, 23.02it/s]
 62%|   | 49/79 [00:02<00:01, 23.69it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.32it/s]
 32%|      | 25/79 [00:01<00:04, 11.50it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:03, 15.94it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.71it/s]
 51%|     | 40/79 [00:02<00:01, 21.04it/s]
 54%|    | 43/79 [00:02<00:01, 22.20it/s]
 58%|    | 46/79 [00:02<00:01, 23.03it/s]
 62%|   | 49/79 [00:02<00:01, 23.74it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.40it/s]
 32%|      | 25/79 [00:01<00:04, 11.60it/s]
 35%|      | 28/79 [00:01<00:03, 13.59it/s]
 39%|      | 31/79 [00:02<00:03, 15.82it/s]
 43%|     | 34/79 [00:02<00:02, 17.81it/s]
 47%|     | 37/79 [00:02<00:02, 19.59it/s]
 51%|     | 40/79 [00:02<00:01, 21.04it/s]
 54%|    | 43/79 [00:02<00:01, 22.51it/s]
 58%|    | 46/79 [00:02<00:01, 23.25it/s]
 62%|   | 49/79 [00:02<00:01, 23.82it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.31it/s]
 32%|      | 25/79 [00:01<00:04, 11.48it/s]
 35%|      | 28/79 [00:01<00:03, 13.70it/s]
 39%|      | 31/79 [00:02<00:03, 15.85it/s]
 43%|     | 34/79 [00:02<00:02, 17.90it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 21.04it/s]
 54%|    | 43/79 [00:02<00:01, 22.11it/s]
 58%|    | 46/79 [00:02<00:01, 23.17it/s]
 62%|   | 49/79 [00:02<00:01, 23.48it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.27it/s]
 32%|      | 25/79 [00:01<00:04, 11.43it/s]
 35%|      | 28/79 [00:01<00:03, 13.66it/s]
 39%|      | 31/79 [00:02<00:03, 15.89it/s]
 43%|     | 34/79 [00:02<00:02, 17.83it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.88it/s]
 54%|    | 43/79 [00:02<00:01, 21.95it/s]
 58%|    | 46/79 [00:02<00:01, 22.60it/s]
 62%|   | 49/79 [00:02<00:01, 23.32it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  3.99it/s]
 20%|        | 16/79 [00:01<00:11,  5.33it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.96it/s]
 32%|      | 25/79 [00:01<00:04, 11.14it/s]
 35%|      | 28/79 [00:01<00:03, 13.42it/s]
 39%|      | 31/79 [00:02<00:03, 15.74it/s]
 43%|     | 34/79 [00:02<00:02, 17.81it/s]
 47%|     | 37/79 [00:02<00:02, 19.66it/s]
 51%|     | 40/79 [00:02<00:01, 21.27it/s]
 54%|    | 43/79 [00:02<00:01, 22.30it/s]
 58%|    | 46/79 [00:02<00:01, 23.15it/s]
 62%|   | 49/79 [00:02<00:01, 23.80it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.09it/s]
 28%|       | 22/79 [00:01<00:06,  9.07it/s]
 32%|      | 25/79 [00:01<00:04, 11.23it/s]
 35%|      | 28/79 [00:01<00:03, 13.54it/s]
 39%|      | 31/79 [00:02<00:03, 15.67it/s]
 43%|     | 34/79 [00:02<00:02, 17.77it/s]
 47%|     | 37/79 [00:02<00:02, 19.43it/s]
 51%|     | 40/79 [00:02<00:01, 20.95it/s]
 54%|    | 43/79 [00:02<00:01, 22.01it/s]
 58%|    | 46/79 [00:02<00:01, 22.75it/s]
 62%|   | 49/79 [00:02<00:01, 23.67it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:15,  4.13it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.18it/s]
 32%|      | 25/79 [00:01<00:04, 11.30it/s]
 35%|      | 28/79 [00:01<00:03, 13.52it/s]
 39%|      | 31/79 [00:02<00:03, 15.72it/s]
 43%|     | 34/79 [00:02<00:02, 17.78it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.84it/s]
 54%|    | 43/79 [00:02<00:01, 21.73it/s]
 58%|    | 46/79 [00:02<00:01, 22.65it/s]
 62%|   | 49/79 [00:02<00:01, 23.19it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.05it/s]
 28%|       | 22/79 [00:01<00:06,  8.99it/s]
 32%|      | 25/79 [00:01<00:04, 11.17it/s]
 35%|      | 28/79 [00:01<00:03, 13.35it/s]
 39%|      | 31/79 [00:02<00:03, 15.51it/s]
 43%|     | 34/79 [00:02<00:02, 17.47it/s]
 47%|     | 37/79 [00:02<00:02, 19.28it/s]
 51%|     | 40/79 [00:02<00:01, 20.67it/s]
 54%|    | 43/79 [00:02<00:01, 21.62it/s]
 58%|    | 46/79 [00:02<00:01, 22.35it/s]
 62%|   | 49/79 [00:02<00:01, 22.88it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.13it/s]
 28%|       | 22/79 [00:01<00:06,  9.09it/s]
 32%|      | 25/79 [00:01<00:04, 11.23it/s]
 35%|      | 28/79 [00:01<00:03, 13.51it/s]
 39%|      | 31/79 [00:02<00:03, 15.68it/s]
 43%|     | 34/79 [00:02<00:02, 17.76it/s]
 47%|     | 37/79 [00:02<00:02, 19.20it/s]
 51%|     | 40/79 [00:02<00:01, 20.70it/s]
 54%|    | 43/79 [00:02<00:01, 21.69it/s]
 58%|    | 46/79 [00:02<00:01, 22.61it/s]
 62%|   | 49/79 [00:02<00:01, 23.26it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:35,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.87it/s]
 20%|        | 16/79 [00:01<00:12,  5.19it/s]
 24%|       | 19/79 [00:01<00:08,  6.80it/s]
 28%|       | 22/79 [00:01<00:06,  8.71it/s]
 32%|      | 25/79 [00:01<00:04, 10.86it/s]
 35%|      | 28/79 [00:02<00:03, 13.15it/s]
 39%|      | 31/79 [00:02<00:03, 15.28it/s]
 43%|     | 34/79 [00:02<00:02, 17.38it/s]
 47%|     | 37/79 [00:02<00:02, 19.15it/s]
 51%|     | 40/79 [00:02<00:01, 20.79it/s]
 54%|    | 43/79 [00:02<00:01, 21.98it/s]
 58%|    | 46/79 [00:02<00:01, 22.84it/s]
 62%|   | 49/79 [00:02<00:01, 23.59it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  4%|         | 3/79 [00:00<00:47,  1.59it/s]
  8%|         | 6/79 [00:01<00:33,  2.21it/s]
 11%|        | 9/79 [00:01<00:23,  3.03it/s]
 15%|        | 12/79 [00:01<00:16,  4.11it/s]
 19%|        | 15/79 [00:01<00:11,  5.48it/s]
 23%|       | 18/79 [00:01<00:08,  7.16it/s]
 27%|       | 21/79 [00:01<00:06,  9.13it/s]
 30%|       | 24/79 [00:01<00:04, 11.17it/s]
 34%|      | 27/79 [00:01<00:03, 13.36it/s]
 38%|      | 30/79 [00:02<00:03, 15.44it/s]
 42%|     | 33/79 [00:02<00:02, 17.41it/s]
 46%|     | 36/79 [00:02<00:02, 18.83it/s]
 49%|     | 39/79 [00:02<00:01, 20.14it/s]
 53%|    | 42/79 [00:02<00:01, 21.15it/s]
 57%|    | 45/79 [00:02<00:01, 22.17it/s]
 61%|    | 48/79 [00:02<00:01, 22.62it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.08it/s]
  4%|         | 3/79 [00:01<00:50,  1.51it/s]
  8%|         | 6/79 [00:01<00:34,  2.10it/s]
 11%|        | 9/79 [00:01<00:24,  2.90it/s]
 15%|        | 12/79 [00:01<00:17,  3.93it/s]
 19%|        | 15/79 [00:01<00:12,  5.26it/s]
 23%|       | 18/79 [00:01<00:08,  6.89it/s]
 27%|       | 21/79 [00:01<00:06,  8.78it/s]
 30%|       | 24/79 [00:01<00:05, 10.86it/s]
 34%|      | 27/79 [00:02<00:03, 13.06it/s]
 38%|      | 30/79 [00:02<00:03, 15.06it/s]
 42%|     | 33/79 [00:02<00:02, 16.94it/s]
 46%|     | 36/79 [00:02<00:02, 18.44it/s]
 49%|     | 39/79 [00:02<00:02, 19.80it/s]
 53%|    | 42/79 [00:02<00:01, 20.71it/s]
 57%|    | 45/79 [00:02<00:01, 21.70it/s]
 61%|    | 48/79 [00:02<00:01, 21.99it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.43it/s]
  9%|         | 7/79 [00:01<00:36,  2.00it/s]
 13%|        | 10/79 [00:01<00:25,  2.76it/s]
 16%|        | 13/79 [00:01<00:17,  3.76it/s]
 20%|        | 16/79 [00:01<00:12,  5.04it/s]
 24%|       | 19/79 [00:01<00:09,  6.64it/s]
 28%|       | 22/79 [00:01<00:06,  8.50it/s]
 32%|      | 25/79 [00:01<00:05, 10.61it/s]
 35%|      | 28/79 [00:02<00:03, 12.76it/s]
 39%|      | 31/79 [00:02<00:03, 15.02it/s]
 43%|     | 34/79 [00:02<00:02, 17.15it/s]
 47%|     | 37/79 [00:02<00:02, 18.83it/s]
 51%|     | 40/79 [00:02<00:01, 20.23it/s]
 54%|    | 43/79 [00:02<00:01, 21.41it/s]
 58%|    | 46/79 [00:02<00:01, 22.29it/s]
 62%|   | 49/79 [00:02<00:01, 22.87it/s]
 66%|   | 52/79 [00:03<00:01, 25.06it/s]
 70%|   | 55/79 [00:02<00:00, 25.13it/s]
 73%|  | 58/79 [00:02<00:00, 25.22it/s]
 77%|  | 61/79 [00:03<00:00, 25.56it/s]
 81%|  | 64/79 [00:03<00:00, 25.63it/s]
 85%| | 67/79 [00:03<00:00, 25.46it/s]
 89%| | 70/79 [00:03<00:00, 25.06it/s]
 92%|| 73/79 [00:03<00:00, 25.81it/s]
 96%|| 76/79 [00:03<00:00, 26.46it/s]
100%|| 79/79 [00:03<00:00, 27.29it/s]
, 25.04it/s]
 70%|   | 55/79 [00:02<00:00, 24.85it/s]
 73%|  | 58/79 [00:02<00:00, 24.76it/s]
 77%|  | 61/79 [00:03<00:00, 25.07it/s]
 81%|  | 64/79 [00:03<00:00, 25.16it/s]
 85%| | 67/79 [00:03<00:00, 25.10it/s]
 89%| | 70/79 [00:03<00:00, 24.97it/s]
 92%|| 73/79 [00:03<00:00, 25.44it/s]
 96%|| 76/79 [00:03<00:00, 26.63it/s]
100%|| 79/79 [00:03<00:00, 26.97it/s]
, 24.16it/s]
 70%|   | 55/79 [00:02<00:00, 24.73it/s]
 73%|  | 58/79 [00:03<00:00, 24.78it/s]
 77%|  | 61/79 [00:03<00:00, 25.17it/s]
 81%|  | 64/79 [00:03<00:00, 25.15it/s]
 85%| | 67/79 [00:03<00:00, 25.25it/s]
 89%| | 70/79 [00:03<00:00, 25.24it/s]
 92%|| 73/79 [00:03<00:00, 25.75it/s]
 96%|| 76/79 [00:03<00:00, 26.43it/s]
100%|| 79/79 [00:03<00:00, 20.36it/s]
, 25.16it/s]
 70%|   | 55/79 [00:02<00:00, 25.34it/s]
 73%|  | 58/79 [00:03<00:00, 25.61it/s]
 77%|  | 61/79 [00:03<00:00, 25.64it/s]
 81%|  | 64/79 [00:03<00:00, 25.75it/s]
 85%| | 67/79 [00:03<00:00, 25.75it/s]
 89%| | 70/79 [00:03<00:00, 25.99it/s]
 92%|| 73/79 [00:03<00:00, 25.87it/s]
 96%|| 76/79 [00:03<00:00, 26.58it/s]
100%|| 79/79 [00:03<00:00, 27.29it/s]
, 24.34it/s]
 70%|   | 55/79 [00:02<00:00, 24.74it/s]
 73%|  | 58/79 [00:03<00:00, 25.03it/s]
 77%|  | 61/79 [00:03<00:00, 25.14it/s]
 81%|  | 64/79 [00:03<00:00, 25.27it/s]
 85%| | 67/79 [00:03<00:00, 25.38it/s]
 89%| | 70/79 [00:03<00:00, 25.73it/s]
 92%|| 73/79 [00:03<00:00, 25.87it/s]
 96%|| 76/79 [00:03<00:00, 26.71it/s]
100%|| 79/79 [00:03<00:00, 27.57it/s]
, 25.27it/s]
 70%|   | 55/79 [00:02<00:00, 25.44it/s]
 73%|  | 58/79 [00:03<00:00, 25.89it/s]
 77%|  | 61/79 [00:03<00:00, 25.46it/s]
 81%|  | 64/79 [00:03<00:00, 25.33it/s]
 85%| | 67/79 [00:03<00:00, 25.37it/s]
 89%| | 70/79 [00:03<00:00, 25.53it/s]
 92%|| 73/79 [00:03<00:00, 25.78it/s]
 96%|| 76/79 [00:03<00:00, 26.36it/s]
100%|| 79/79 [00:03<00:00, 27.29it/s]
, 24.62it/s]
 70%|   | 55/79 [00:02<00:00, 25.31it/s]
 73%|  | 58/79 [00:03<00:00, 25.34it/s]
 77%|  | 61/79 [00:03<00:00, 25.34it/s]
 81%|  | 64/79 [00:03<00:00, 25.46it/s]
 85%| | 67/79 [00:03<00:00, 25.43it/s]
 89%| | 70/79 [00:03<00:00, 25.63it/s]
 92%|| 73/79 [00:03<00:00, 26.13it/s]
 96%|| 76/79 [00:03<00:00, 26.79it/s]
100%|| 79/79 [00:03<00:00, 20.22it/s]
, 24.42it/s]
 70%|   | 55/79 [00:02<00:00, 24.89it/s]
 73%|  | 58/79 [00:03<00:00, 25.15it/s]
 77%|  | 61/79 [00:03<00:00, 25.22it/s]
 81%|  | 64/79 [00:03<00:00, 25.30it/s]
 85%| | 67/79 [00:03<00:00, 25.47it/s]
 89%| | 70/79 [00:03<00:00, 25.47it/s]
 92%|| 73/79 [00:03<00:00, 25.98it/s]
 96%|| 76/79 [00:03<00:00, 26.68it/s]
100%|| 79/79 [00:03<00:00, 27.52it/s]
, 24.62it/s]
 70%|   | 55/79 [00:02<00:00, 25.13it/s]
 73%|  | 58/79 [00:03<00:00, 25.57it/s]
 77%|  | 61/79 [00:03<00:00, 25.46it/s]
 81%|  | 64/79 [00:03<00:00, 25.26it/s]
 85%| | 67/79 [00:03<00:00, 25.61it/s]
 89%| | 70/79 [00:03<00:00, 25.82it/s]
 92%|| 73/79 [00:03<00:00, 25.75it/s]
 96%|| 76/79 [00:03<00:00, 26.32it/s]
100%|| 79/79 [00:03<00:00, 27.07it/s]
, 24.53it/s]
 70%|   | 55/79 [00:02<00:00, 24.71it/s]
 73%|  | 58/79 [00:03<00:00, 25.05it/s]
 77%|  | 61/79 [00:03<00:00, 25.15it/s]
 81%|  | 64/79 [00:03<00:00, 25.52it/s]
 85%| | 67/79 [00:03<00:00, 25.86it/s]
 89%| | 70/79 [00:03<00:00, 25.73it/s]
 92%|| 73/79 [00:03<00:00, 26.12it/s]
 96%|| 76/79 [00:03<00:00, 26.84it/s]
100%|| 79/79 [00:03<00:00, 27.64it/s]
, 24.71it/s]
 70%|   | 55/79 [00:02<00:00, 25.15it/s]
 73%|  | 58/79 [00:03<00:00, 25.34it/s]
 77%|  | 61/79 [00:03<00:00, 25.81it/s]
 81%|  | 64/79 [00:03<00:00, 25.98it/s]
 85%| | 67/79 [00:03<00:00, 26.07it/s]
 89%| | 70/79 [00:03<00:00, 26.17it/s]
 92%|| 73/79 [00:03<00:00, 26.45it/s]
 96%|| 76/79 [00:03<00:00, 26.95it/s]
100%|| 79/79 [00:03<00:00, 27.75it/s]
, 24.55it/s]
 70%|   | 55/79 [00:02<00:00, 24.80it/s]
 73%|  | 58/79 [00:03<00:00, 25.02it/s]
 77%|  | 61/79 [00:03<00:00, 25.40it/s]
 81%|  | 64/79 [00:03<00:00, 25.46it/s]
 85%| | 67/79 [00:03<00:00, 25.92it/s]
 89%| | 70/79 [00:03<00:00, 26.06it/s]
 92%|| 73/79 [00:03<00:00, 26.29it/s]
 96%|| 76/79 [00:03<00:00, 26.83it/s]
100%|| 79/79 [00:03<00:00, 27.55it/s]
, 24.84it/s]
 70%|   | 55/79 [00:02<00:00, 25.03it/s]
 73%|  | 58/79 [00:03<00:00, 25.03it/s]
 77%|  | 61/79 [00:03<00:00, 25.04it/s]
 81%|  | 64/79 [00:03<00:00, 25.10it/s]
 85%| | 67/79 [00:03<00:00, 25.00it/s]
 89%| | 70/79 [00:03<00:00, 24.65it/s]
 92%|| 73/79 [00:03<00:00, 25.24it/s]
 96%|| 76/79 [00:03<00:00, 25.85it/s]
100%|| 79/79 [00:03<00:00, 26.91it/s]
, 24.36it/s]
 70%|   | 55/79 [00:02<00:00, 24.64it/s]
 73%|  | 58/79 [00:03<00:00, 24.87it/s]
 77%|  | 61/79 [00:03<00:00, 25.14it/s]
 81%|  | 64/79 [00:03<00:00, 24.73it/s]
 85%| | 67/79 [00:03<00:00, 24.95it/s]
 89%| | 70/79 [00:03<00:00, 25.10it/s]
 92%|| 73/79 [00:03<00:00, 25.42it/s]
 96%|| 76/79 [00:03<00:00, 26.12it/s]
100%|| 79/79 [00:03<00:00, 27.05it/s]
, 24.29it/s]
 70%|   | 55/79 [00:02<00:00, 24.50it/s]
 73%|  | 58/79 [00:03<00:00, 24.89it/s]
 77%|  | 61/79 [00:03<00:00, 24.85it/s]
 81%|  | 64/79 [00:03<00:00, 24.84it/s]
 85%| | 67/79 [00:03<00:00, 24.88it/s]
 89%| | 70/79 [00:03<00:00, 24.89it/s]
 92%|| 73/79 [00:03<00:00, 25.25it/s]
 96%|| 76/79 [00:03<00:00, 26.07it/s]
100%|| 79/79 [00:03<00:00, 27.01it/s]
, 24.31it/s]
 70%|   | 55/79 [00:02<00:00, 25.07it/s]
 73%|  | 58/79 [00:03<00:00, 25.22it/s]
 77%|  | 61/79 [00:03<00:00, 25.23it/s]
 81%|  | 64/79 [00:03<00:00, 25.29it/s]
 85%| | 67/79 [00:03<00:00, 25.67it/s]
 89%| | 70/79 [00:03<00:00, 25.48it/s]
 92%|| 73/79 [00:03<00:00, 25.74it/s]
 96%|| 76/79 [00:03<00:00, 26.41it/s]
100%|| 79/79 [00:03<00:00, 27.37it/s]
51it/s]
 68%|   | 54/79 [00:02<00:01, 24.84it/s]
 72%|  | 57/79 [00:03<00:00, 24.90it/s]
 76%|  | 60/79 [00:03<00:00, 25.06it/s]
 80%|  | 63/79 [00:03<00:00, 25.13it/s]
 84%| | 66/79 [00:03<00:00, 25.30it/s]
 87%| | 69/79 [00:03<00:00, 25.14it/s]
 91%| | 72/79 [00:03<00:00, 25.40it/s]
 95%|| 75/79 [00:03<00:00, 26.11it/s]
 99%|| 78/79 [00:03<00:00, 26.73it/s]
100%|| 79/79 [00:03<00:00, 19.80it/s]
, 24.06it/s]
 70%|   | 55/79 [00:03<00:00, 24.39it/s]
 73%|  | 58/79 [00:03<00:00, 24.50it/s]
 77%|  | 61/79 [00:03<00:00, 24.82it/s]
 81%|  | 64/79 [00:03<00:00, 24.89it/s]
 85%| | 67/79 [00:03<00:00, 25.01it/s]
 89%| | 70/79 [00:03<00:00, 25.16it/s]
 92%|| 73/79 [00:03<00:00, 25.58it/s]
 96%|| 76/79 [00:03<00:00, 26.37it/s]
100%|| 79/79 [00:03<00:00, 27.28it/s]
, 23.61it/s]
 70%|   | 55/79 [00:03<00:00, 24.07it/s]
 73%|  | 58/79 [00:03<00:00, 24.37it/s]
 77%|  | 61/79 [00:03<00:00, 24.39it/s]
 81%|  | 64/79 [00:03<00:00, 24.38it/s]
 85%| | 67/79 [00:03<00:00, 24.85it/s]
 89%| | 70/79 [00:03<00:00, 24.68it/s]
 92%|| 73/79 [00:03<00:00, 25.20it/s]
 96%|| 76/79 [00:03<00:00, 26.06it/s]
100%|| 79/79 [00:03<00:00, 27.11it/s]
, 23.58it/s]
 70%|   | 55/79 [00:03<00:01, 23.80it/s]
 73%|  | 58/79 [00:03<00:00, 23.98it/s]
 77%|  | 61/79 [00:03<00:00, 24.16it/s]
 81%|  | 64/79 [00:03<00:00, 24.50it/s]
 85%| | 67/79 [00:03<00:00, 24.66it/s]
 89%| | 70/79 [00:03<00:00, 24.64it/s]
 92%|| 73/79 [00:03<00:00, 25.35it/s]
 96%|| 76/79 [00:03<00:00, 26.13it/s]
100%|| 79/79 [00:03<00:00, 27.03it/s]
, 24.13it/s]
 70%|   | 55/79 [00:03<00:00, 24.50it/s]
 73%|  | 58/79 [00:03<00:00, 24.86it/s]
 77%|  | 61/79 [00:03<00:00, 25.02it/s]
 81%|  | 64/79 [00:03<00:00, 25.14it/s]
 85%| | 67/79 [00:03<00:00, 25.33it/s]
 89%| | 70/79 [00:03<00:00, 25.49it/s]
 92%|| 73/79 [00:03<00:00, 25.79it/s]
 96%|| 76/79 [00:03<00:00, 26.47it/s]
100%|| 79/79 [00:03<00:00, 27.19it/s]
, 24.25it/s]
 70%|   | 55/79 [00:03<00:00, 24.52it/s]
 73%|  | 58/79 [00:03<00:00, 24.91it/s]
 77%|  | 61/79 [00:03<00:00, 25.34it/s]
 81%|  | 64/79 [00:03<00:00, 25.07it/s]
 85%| | 67/79 [00:03<00:00, 25.05it/s]
 89%| | 70/79 [00:03<00:00, 25.34it/s]
 92%|| 73/79 [00:03<00:00, 25.49it/s]
 96%|| 76/79 [00:03<00:00, 26.29it/s]
100%|| 79/79 [00:03<00:00, 27.08it/s]
, 24.22it/s]
 70%|   | 55/79 [00:03<00:00, 24.44it/s]
 73%|  | 58/79 [00:03<00:00, 24.75it/s]
 77%|  | 61/79 [00:03<00:00, 24.75it/s]
 81%|  | 64/79 [00:03<00:00, 24.92it/s]
 85%| | 67/79 [00:03<00:00, 25.01it/s]
 89%| | 70/79 [00:03<00:00, 25.43it/s]
 92%|| 73/79 [00:03<00:00, 25.59it/s]
 97%|| 77/79 [00:03<00:00, 26.64it/s]
100%|| 79/79 [00:04<00:00, 19.68it/s]
, 23.89it/s]
 70%|   | 55/79 [00:03<00:00, 24.32it/s]
 73%|  | 58/79 [00:03<00:00, 24.28it/s]
 77%|  | 61/79 [00:03<00:00, 24.22it/s]
 81%|  | 64/79 [00:03<00:00, 24.43it/s]
 85%| | 67/79 [00:03<00:00, 24.67it/s]
 89%| | 70/79 [00:03<00:00, 24.85it/s]
 92%|| 73/79 [00:03<00:00, 25.31it/s]
 96%|| 76/79 [00:03<00:00, 26.03it/s]
100%|| 79/79 [00:03<00:00, 26.84it/s]
56it/s]
 68%|   | 54/79 [00:02<00:01, 23.74it/s]
 72%|  | 57/79 [00:03<00:00, 24.12it/s]
 76%|  | 60/79 [00:03<00:00, 24.20it/s]
 80%|  | 63/79 [00:03<00:00, 23.94it/s]
 84%| | 66/79 [00:03<00:00, 24.03it/s]
 87%| | 69/79 [00:03<00:00, 24.31it/s]
 91%| | 72/79 [00:03<00:00, 24.39it/s]
 95%|| 75/79 [00:03<00:00, 25.21it/s]
 99%|| 78/79 [00:03<00:00, 25.82it/s]
100%|| 79/79 [00:04<00:00, 19.48it/s]
, 23.64it/s]
 70%|   | 55/79 [00:03<00:00, 24.09it/s]
 73%|  | 58/79 [00:03<00:00, 24.50it/s]
 77%|  | 61/79 [00:03<00:00, 24.52it/s]
 81%|  | 64/79 [00:03<00:00, 24.87it/s]
 85%| | 67/79 [00:03<00:00, 24.99it/s]
 89%| | 70/79 [00:03<00:00, 25.13it/s]
 92%|| 73/79 [00:03<00:00, 25.27it/s]
 96%|| 76/79 [00:03<00:00, 25.99it/s]
100%|| 79/79 [00:03<00:00, 26.68it/s]
, 23.75it/s]
 70%|   | 55/79 [00:03<00:00, 24.12it/s]
 73%|  | 58/79 [00:03<00:00, 24.49it/s]
 77%|  | 61/79 [00:03<00:00, 24.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.64it/s]
 85%| | 67/79 [00:03<00:00, 24.90it/s]
 89%| | 70/79 [00:03<00:00, 24.97it/s]
 92%|| 73/79 [00:03<00:00, 25.45it/s]
 96%|| 76/79 [00:03<00:00, 26.00it/s]
100%|| 79/79 [00:03<00:00, 26.75it/s]
, 23.77it/s]
 70%|   | 55/79 [00:03<00:01, 23.97it/s]
 73%|  | 58/79 [00:03<00:00, 24.38it/s]
 77%|  | 61/79 [00:03<00:00, 23.84it/s]
 81%|  | 64/79 [00:03<00:00, 23.93it/s]
 85%| | 67/79 [00:03<00:00, 24.24it/s]
 89%| | 70/79 [00:03<00:00, 24.48it/s]
 92%|| 73/79 [00:03<00:00, 24.71it/s]
 96%|| 76/79 [00:03<00:00, 25.43it/s]
100%|| 79/79 [00:03<00:00, 26.41it/s]
, 23.98it/s]
 70%|   | 55/79 [00:03<00:00, 24.17it/s]
 73%|  | 58/79 [00:03<00:00, 24.52it/s]
 77%|  | 61/79 [00:03<00:00, 24.89it/s]
 81%|  | 64/79 [00:03<00:00, 24.78it/s]
 85%| | 67/79 [00:03<00:00, 24.79it/s]
 89%| | 70/79 [00:03<00:00, 24.67it/s]
 92%|| 73/79 [00:03<00:00, 25.15it/s]
 96%|| 76/79 [00:03<00:00, 25.87it/s]
100%|| 79/79 [00:04<00:00, 26.64it/s]
07it/s]
 68%|   | 54/79 [00:03<00:01, 23.51it/s]
 72%|  | 57/79 [00:03<00:00, 23.92it/s]
 76%|  | 60/79 [00:03<00:00, 24.48it/s]
 80%|  | 63/79 [00:03<00:00, 24.45it/s]
 84%| | 66/79 [00:03<00:00, 24.72it/s]
 87%| | 69/79 [00:03<00:00, 25.10it/s]
 91%| | 72/79 [00:03<00:00, 25.03it/s]
 95%|| 75/79 [00:03<00:00, 25.69it/s]
 99%|| 78/79 [00:04<00:00, 26.13it/s]
100%|| 79/79 [00:04<00:00, 19.06it/s]
, 23.26it/s]
 70%|   | 55/79 [00:03<00:01, 23.85it/s]
 73%|  | 58/79 [00:03<00:00, 24.20it/s]
 77%|  | 61/79 [00:03<00:00, 24.43it/s]
 81%|  | 64/79 [00:03<00:00, 24.64it/s]
 85%| | 67/79 [00:03<00:00, 24.82it/s]
 89%| | 70/79 [00:03<00:00, 24.81it/s]
 92%|| 73/79 [00:03<00:00, 24.93it/s]
 96%|| 76/79 [00:03<00:00, 25.59it/s]
100%|| 79/79 [00:04<00:00, 26.29it/s]
27it/s]
 68%|   | 54/79 [00:03<00:01, 22.63it/s]
 72%|  | 57/79 [00:03<00:00, 23.20it/s]
 76%|  | 60/79 [00:03<00:00, 23.24it/s]
 80%|  | 63/79 [00:03<00:00, 23.20it/s]
 84%| | 66/79 [00:03<00:00, 23.33it/s]
 87%| | 69/79 [00:03<00:00, 23.55it/s]
 91%| | 72/79 [00:03<00:00, 23.52it/s]
 95%|| 75/79 [00:04<00:00, 24.51it/s]
 99%|| 78/79 [00:04<00:00, 25.28it/s]
100%|| 79/79 [00:04<00:00, 18.63it/s]
2020-06-23 16:45:33,602 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.207573 (0.026928466796875 s / img per device, on 32 devices)
2020-06-23 16:45:33,620 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:45:33,620 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:45:33,639 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592955940070, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 15, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592955940071, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 15}}
2020-06-23 16:45:40,315 maskrcnn_benchmark.trainer INFO: eta: 0:56:40  iter: 12840  loss: 0.5763 (0.7053)  loss_classifier: 0.1866 (0.2536)  loss_box_reg: 0.0961 (0.1143)  loss_mask: 0.2589 (0.2841)  loss_objectness: 0.0130 (0.0336)  loss_rpn_box_reg: 0.0077 (0.0196)  time: 0.1083 (0.1252)  data: 0.0014 (0.0176)  lr: 0.001600  max mem: 5193
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:45:42,516 maskrcnn_benchmark.trainer INFO: eta: 0:56:37  iter: 12860  loss: 0.4485 (0.7050)  loss_classifier: 0.1337 (0.2535)  loss_box_reg: 0.0762 (0.1143)  loss_mask: 0.2229 (0.2841)  loss_objectness: 0.0069 (0.0335)  loss_rpn_box_reg: 0.0050 (0.0196)  time: 0.1098 (0.1252)  data: 0.0015 (0.0176)  lr: 0.001600  max mem: 5193
2020-06-23 16:45:44,693 maskrcnn_benchmark.trainer INFO: eta: 0:56:34  iter: 12880  loss: 0.5523 (0.7048)  loss_classifier: 0.1683 (0.2534)  loss_box_reg: 0.0942 (0.1143)  loss_mask: 0.2375 (0.2840)  loss_objectness: 0.0135 (0.0335)  loss_rpn_box_reg: 0.0068 (0.0196)  time: 0.1082 (0.1252)  data: 0.0015 (0.0176)  lr: 0.001600  max mem: 5193
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.54s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 16:45:46,860 maskrcnn_benchmark.trainer INFO: eta: 0:56:31  iter: 12900  loss: 0.4714 (0.7044)  loss_classifier: 0.1422 (0.2532)  loss_box_reg: 0.0700 (0.1142)  loss_mask: 0.2148 (0.2839)  loss_objectness: 0.0112 (0.0335)  loss_rpn_box_reg: 0.0035 (0.0196)  time: 0.1080 (0.1251)  data: 0.0014 (0.0176)  lr: 0.001600  max mem: 5193
DONE (t=1.37s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37635
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.59320
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.40912
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21979
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.40533
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49355
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.31169
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.49098
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51498
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.32701
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.54742
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.65158
2020-06-23 16:45:49,050 maskrcnn_benchmark.trainer INFO: eta: 0:56:28  iter: 12920  loss: 0.4931 (0.7041)  loss_classifier: 0.1448 (0.2531)  loss_box_reg: 0.0743 (0.1142)  loss_mask: 0.2418 (0.2838)  loss_objectness: 0.0093 (0.0334)  loss_rpn_box_reg: 0.0065 (0.0196)  time: 0.1086 (0.1251)  data: 0.0015 (0.0175)  lr: 0.001600  max mem: 5193
2020-06-23 16:45:51,207 maskrcnn_benchmark.trainer INFO: eta: 0:56:24  iter: 12940  loss: 0.5040 (0.7038)  loss_classifier: 0.1590 (0.2529)  loss_box_reg: 0.0743 (0.1141)  loss_mask: 0.2385 (0.2838)  loss_objectness: 0.0099 (0.0334)  loss_rpn_box_reg: 0.0050 (0.0196)  time: 0.1080 (0.1251)  data: 0.0014 (0.0175)  lr: 0.001600  max mem: 5193
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
DONE (t=1.40s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:45:53,382 maskrcnn_benchmark.trainer INFO: eta: 0:56:21  iter: 12960  loss: 0.5417 (0.7036)  loss_classifier: 0.1483 (0.2528)  loss_box_reg: 0.0851 (0.1141)  loss_mask: 0.2398 (0.2837)  loss_objectness: 0.0115 (0.0334)  loss_rpn_box_reg: 0.0062 (0.0196)  time: 0.1080 (0.1251)  data: 0.0016 (0.0175)  lr: 0.001600  max mem: 5193
DONE (t=2.22s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.34210
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.55915
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.36129
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15631
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36714
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.51054
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29332
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.45040
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.47024
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27404
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50458
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62468
2020-06-23 16:45:55,463 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3763531331362034, segm mAP: 0.3421032287731935
:::MLLOG {"namespace": "", "time_ms": 1592955955463, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.3763531331362034, "SEGM": 0.3421032287731935}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 14}}
:::MLLOG {"namespace": "", "time_ms": 1592955955463, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 14}}
2020-06-23 16:45:55,685 maskrcnn_benchmark.trainer INFO: eta: 0:56:18  iter: 12980  loss: 0.5651 (0.7034)  loss_classifier: 0.1918 (0.2527)  loss_box_reg: 0.0930 (0.1141)  loss_mask: 0.2436 (0.2837)  loss_objectness: 0.0117 (0.0334)  loss_rpn_box_reg: 0.0066 (0.0196)  time: 0.1081 (0.1250)  data: 0.0015 (0.0175)  lr: 0.001600  max mem: 5193
2020-06-23 16:45:57,864 maskrcnn_benchmark.trainer INFO: eta: 0:56:15  iter: 13000  loss: 0.5524 (0.7031)  loss_classifier: 0.1686 (0.2526)  loss_box_reg: 0.0852 (0.1140)  loss_mask: 0.2473 (0.2836)  loss_objectness: 0.0107 (0.0333)  loss_rpn_box_reg: 0.0097 (0.0195)  time: 0.1077 (0.1250)  data: 0.0014 (0.0174)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:00,046 maskrcnn_benchmark.trainer INFO: eta: 0:56:12  iter: 13020  loss: 0.5155 (0.7029)  loss_classifier: 0.1543 (0.2525)  loss_box_reg: 0.0940 (0.1140)  loss_mask: 0.2428 (0.2835)  loss_objectness: 0.0102 (0.0333)  loss_rpn_box_reg: 0.0050 (0.0195)  time: 0.1085 (0.1250)  data: 0.0014 (0.0174)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:02,215 maskrcnn_benchmark.trainer INFO: eta: 0:56:09  iter: 13040  loss: 0.5239 (0.7026)  loss_classifier: 0.1610 (0.2524)  loss_box_reg: 0.0799 (0.1140)  loss_mask: 0.2473 (0.2835)  loss_objectness: 0.0119 (0.0333)  loss_rpn_box_reg: 0.0070 (0.0195)  time: 0.1080 (0.1250)  data: 0.0014 (0.0174)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:04,383 maskrcnn_benchmark.trainer INFO: eta: 0:56:06  iter: 13060  loss: 0.5855 (0.7024)  loss_classifier: 0.1783 (0.2523)  loss_box_reg: 0.0965 (0.1139)  loss_mask: 0.2494 (0.2834)  loss_objectness: 0.0192 (0.0333)  loss_rpn_box_reg: 0.0089 (0.0195)  time: 0.1077 (0.1249)  data: 0.0014 (0.0174)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:06,552 maskrcnn_benchmark.trainer INFO: eta: 0:56:02  iter: 13080  loss: 0.5186 (0.7022)  loss_classifier: 0.1713 (0.2521)  loss_box_reg: 0.0841 (0.1139)  loss_mask: 0.2539 (0.2834)  loss_objectness: 0.0145 (0.0333)  loss_rpn_box_reg: 0.0089 (0.0195)  time: 0.1081 (0.1249)  data: 0.0014 (0.0173)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:08,710 maskrcnn_benchmark.trainer INFO: eta: 0:55:59  iter: 13100  loss: 0.5587 (0.7020)  loss_classifier: 0.1896 (0.2520)  loss_box_reg: 0.0981 (0.1139)  loss_mask: 0.2517 (0.2833)  loss_objectness: 0.0141 (0.0332)  loss_rpn_box_reg: 0.0065 (0.0195)  time: 0.1076 (0.1249)  data: 0.0014 (0.0173)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:10,878 maskrcnn_benchmark.trainer INFO: eta: 0:55:56  iter: 13120  loss: 0.4664 (0.7016)  loss_classifier: 0.1436 (0.2519)  loss_box_reg: 0.0709 (0.1138)  loss_mask: 0.2145 (0.2832)  loss_objectness: 0.0098 (0.0332)  loss_rpn_box_reg: 0.0063 (0.0195)  time: 0.1084 (0.1249)  data: 0.0014 (0.0173)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:13,076 maskrcnn_benchmark.trainer INFO: eta: 0:55:53  iter: 13140  loss: 0.4890 (0.7014)  loss_classifier: 0.1539 (0.2518)  loss_box_reg: 0.0799 (0.1138)  loss_mask: 0.2304 (0.2831)  loss_objectness: 0.0105 (0.0332)  loss_rpn_box_reg: 0.0060 (0.0195)  time: 0.1093 (0.1248)  data: 0.0014 (0.0173)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:15,243 maskrcnn_benchmark.trainer INFO: eta: 0:55:50  iter: 13160  loss: 0.5389 (0.7011)  loss_classifier: 0.1723 (0.2516)  loss_box_reg: 0.0834 (0.1137)  loss_mask: 0.2427 (0.2831)  loss_objectness: 0.0126 (0.0332)  loss_rpn_box_reg: 0.0062 (0.0195)  time: 0.1083 (0.1248)  data: 0.0014 (0.0173)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:17,439 maskrcnn_benchmark.trainer INFO: eta: 0:55:47  iter: 13180  loss: 0.5359 (0.7009)  loss_classifier: 0.1654 (0.2515)  loss_box_reg: 0.0742 (0.1137)  loss_mask: 0.2473 (0.2830)  loss_objectness: 0.0126 (0.0332)  loss_rpn_box_reg: 0.0078 (0.0195)  time: 0.1093 (0.1248)  data: 0.0014 (0.0172)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:19,604 maskrcnn_benchmark.trainer INFO: eta: 0:55:43  iter: 13200  loss: 0.4959 (0.7006)  loss_classifier: 0.1403 (0.2514)  loss_box_reg: 0.0836 (0.1136)  loss_mask: 0.2274 (0.2829)  loss_objectness: 0.0105 (0.0331)  loss_rpn_box_reg: 0.0063 (0.0195)  time: 0.1079 (0.1248)  data: 0.0014 (0.0172)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:21,772 maskrcnn_benchmark.trainer INFO: eta: 0:55:40  iter: 13220  loss: 0.4993 (0.7003)  loss_classifier: 0.1561 (0.2513)  loss_box_reg: 0.0819 (0.1136)  loss_mask: 0.2329 (0.2828)  loss_objectness: 0.0137 (0.0331)  loss_rpn_box_reg: 0.0045 (0.0195)  time: 0.1075 (0.1248)  data: 0.0014 (0.0172)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:23,961 maskrcnn_benchmark.trainer INFO: eta: 0:55:37  iter: 13240  loss: 0.5156 (0.7000)  loss_classifier: 0.1473 (0.2511)  loss_box_reg: 0.0767 (0.1135)  loss_mask: 0.2223 (0.2828)  loss_objectness: 0.0120 (0.0331)  loss_rpn_box_reg: 0.0080 (0.0195)  time: 0.1089 (0.1247)  data: 0.0014 (0.0172)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:26,126 maskrcnn_benchmark.trainer INFO: eta: 0:55:34  iter: 13260  loss: 0.4648 (0.6998)  loss_classifier: 0.1546 (0.2510)  loss_box_reg: 0.0799 (0.1135)  loss_mask: 0.2402 (0.2827)  loss_objectness: 0.0118 (0.0331)  loss_rpn_box_reg: 0.0076 (0.0194)  time: 0.1078 (0.1247)  data: 0.0014 (0.0171)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:28,302 maskrcnn_benchmark.trainer INFO: eta: 0:55:31  iter: 13280  loss: 0.5134 (0.6995)  loss_classifier: 0.1498 (0.2509)  loss_box_reg: 0.0710 (0.1135)  loss_mask: 0.2397 (0.2827)  loss_objectness: 0.0136 (0.0331)  loss_rpn_box_reg: 0.0087 (0.0194)  time: 0.1089 (0.1247)  data: 0.0014 (0.0171)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:30,455 maskrcnn_benchmark.trainer INFO: eta: 0:55:28  iter: 13300  loss: 0.5447 (0.6993)  loss_classifier: 0.1748 (0.2508)  loss_box_reg: 0.0926 (0.1134)  loss_mask: 0.2461 (0.2826)  loss_objectness: 0.0163 (0.0330)  loss_rpn_box_reg: 0.0081 (0.0194)  time: 0.1074 (0.1247)  data: 0.0014 (0.0171)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:32,640 maskrcnn_benchmark.trainer INFO: eta: 0:55:25  iter: 13320  loss: 0.4821 (0.6990)  loss_classifier: 0.1512 (0.2506)  loss_box_reg: 0.0770 (0.1134)  loss_mask: 0.2354 (0.2825)  loss_objectness: 0.0087 (0.0330)  loss_rpn_box_reg: 0.0090 (0.0194)  time: 0.1086 (0.1246)  data: 0.0014 (0.0171)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:34,821 maskrcnn_benchmark.trainer INFO: eta: 0:55:22  iter: 13340  loss: 0.5502 (0.6987)  loss_classifier: 0.1639 (0.2505)  loss_box_reg: 0.0849 (0.1133)  loss_mask: 0.2240 (0.2825)  loss_objectness: 0.0135 (0.0330)  loss_rpn_box_reg: 0.0065 (0.0194)  time: 0.1082 (0.1246)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:36,993 maskrcnn_benchmark.trainer INFO: eta: 0:55:18  iter: 13360  loss: 0.5534 (0.6985)  loss_classifier: 0.1846 (0.2504)  loss_box_reg: 0.0858 (0.1133)  loss_mask: 0.2471 (0.2824)  loss_objectness: 0.0140 (0.0330)  loss_rpn_box_reg: 0.0073 (0.0194)  time: 0.1081 (0.1246)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:39,167 maskrcnn_benchmark.trainer INFO: eta: 0:55:15  iter: 13380  loss: 0.4188 (0.6982)  loss_classifier: 0.1129 (0.2503)  loss_box_reg: 0.0647 (0.1133)  loss_mask: 0.2239 (0.2823)  loss_objectness: 0.0069 (0.0330)  loss_rpn_box_reg: 0.0073 (0.0194)  time: 0.1086 (0.1246)  data: 0.0013 (0.0170)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:41,332 maskrcnn_benchmark.trainer INFO: eta: 0:55:12  iter: 13400  loss: 0.4535 (0.6979)  loss_classifier: 0.1369 (0.2501)  loss_box_reg: 0.0668 (0.1132)  loss_mask: 0.2397 (0.2823)  loss_objectness: 0.0079 (0.0329)  loss_rpn_box_reg: 0.0092 (0.0194)  time: 0.1077 (0.1245)  data: 0.0013 (0.0170)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:43,516 maskrcnn_benchmark.trainer INFO: eta: 0:55:09  iter: 13420  loss: 0.4389 (0.6976)  loss_classifier: 0.1595 (0.2500)  loss_box_reg: 0.0723 (0.1131)  loss_mask: 0.2261 (0.2822)  loss_objectness: 0.0076 (0.0329)  loss_rpn_box_reg: 0.0054 (0.0194)  time: 0.1089 (0.1245)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:45,697 maskrcnn_benchmark.trainer INFO: eta: 0:55:06  iter: 13440  loss: 0.5517 (0.6974)  loss_classifier: 0.1665 (0.2499)  loss_box_reg: 0.0969 (0.1131)  loss_mask: 0.2408 (0.2821)  loss_objectness: 0.0109 (0.0329)  loss_rpn_box_reg: 0.0026 (0.0194)  time: 0.1089 (0.1245)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:47,884 maskrcnn_benchmark.trainer INFO: eta: 0:55:03  iter: 13460  loss: 0.4803 (0.6970)  loss_classifier: 0.1526 (0.2497)  loss_box_reg: 0.0633 (0.1131)  loss_mask: 0.2349 (0.2821)  loss_objectness: 0.0108 (0.0328)  loss_rpn_box_reg: 0.0051 (0.0193)  time: 0.1091 (0.1245)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:50,053 maskrcnn_benchmark.trainer INFO: eta: 0:55:00  iter: 13480  loss: 0.5527 (0.6969)  loss_classifier: 0.1863 (0.2496)  loss_box_reg: 0.1019 (0.1130)  loss_mask: 0.2337 (0.2820)  loss_objectness: 0.0151 (0.0328)  loss_rpn_box_reg: 0.0090 (0.0193)  time: 0.1078 (0.1244)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:52,241 maskrcnn_benchmark.trainer INFO: eta: 0:54:57  iter: 13500  loss: 0.4912 (0.6966)  loss_classifier: 0.1322 (0.2495)  loss_box_reg: 0.0755 (0.1130)  loss_mask: 0.2373 (0.2819)  loss_objectness: 0.0057 (0.0328)  loss_rpn_box_reg: 0.0071 (0.0193)  time: 0.1092 (0.1244)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:54,418 maskrcnn_benchmark.trainer INFO: eta: 0:54:54  iter: 13520  loss: 0.5137 (0.6963)  loss_classifier: 0.1680 (0.2494)  loss_box_reg: 0.0756 (0.1130)  loss_mask: 0.2235 (0.2819)  loss_objectness: 0.0118 (0.0328)  loss_rpn_box_reg: 0.0058 (0.0193)  time: 0.1084 (0.1244)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:56,597 maskrcnn_benchmark.trainer INFO: eta: 0:54:50  iter: 13540  loss: 0.5929 (0.6961)  loss_classifier: 0.1772 (0.2493)  loss_box_reg: 0.0882 (0.1129)  loss_mask: 0.2477 (0.2818)  loss_objectness: 0.0110 (0.0327)  loss_rpn_box_reg: 0.0089 (0.0193)  time: 0.1088 (0.1244)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5193
2020-06-23 16:46:58,767 maskrcnn_benchmark.trainer INFO: eta: 0:54:47  iter: 13560  loss: 0.5783 (0.6960)  loss_classifier: 0.1993 (0.2493)  loss_box_reg: 0.1043 (0.1129)  loss_mask: 0.2493 (0.2818)  loss_objectness: 0.0124 (0.0327)  loss_rpn_box_reg: 0.0124 (0.0193)  time: 0.1084 (0.1244)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5193
2020-06-23 16:47:00,965 maskrcnn_benchmark.trainer INFO: eta: 0:54:44  iter: 13580  loss: 0.5810 (0.6958)  loss_classifier: 0.1881 (0.2492)  loss_box_reg: 0.1043 (0.1129)  loss_mask: 0.2491 (0.2817)  loss_objectness: 0.0176 (0.0327)  loss_rpn_box_reg: 0.0128 (0.0193)  time: 0.1084 (0.1243)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5193
2020-06-23 16:47:03,125 maskrcnn_benchmark.trainer INFO: eta: 0:54:41  iter: 13600  loss: 0.6460 (0.6957)  loss_classifier: 0.2094 (0.2491)  loss_box_reg: 0.1035 (0.1129)  loss_mask: 0.2399 (0.2817)  loss_objectness: 0.0160 (0.0327)  loss_rpn_box_reg: 0.0059 (0.0193)  time: 0.1075 (0.1243)  data: 0.0014 (0.0167)  lr: 0.001600  max mem: 5193
2020-06-23 16:47:05,281 maskrcnn_benchmark.trainer INFO: eta: 0:54:38  iter: 13620  loss: 0.5237 (0.6954)  loss_classifier: 0.1733 (0.2490)  loss_box_reg: 0.0852 (0.1129)  loss_mask: 0.2402 (0.2816)  loss_objectness: 0.0145 (0.0327)  loss_rpn_box_reg: 0.0105 (0.0193)  time: 0.1073 (0.1243)  data: 0.0014 (0.0167)  lr: 0.001600  max mem: 5193
2020-06-23 16:47:07,437 maskrcnn_benchmark.trainer INFO: eta: 0:54:35  iter: 13640  loss: 0.4576 (0.6951)  loss_classifier: 0.1357 (0.2489)  loss_box_reg: 0.0670 (0.1128)  loss_mask: 0.2090 (0.2816)  loss_objectness: 0.0073 (0.0326)  loss_rpn_box_reg: 0.0062 (0.0193)  time: 0.1072 (0.1243)  data: 0.0014 (0.0167)  lr: 0.001600  max mem: 5193
2020-06-23 16:47:09,601 maskrcnn_benchmark.trainer INFO: eta: 0:54:32  iter: 13660  loss: 0.5473 (0.6949)  loss_classifier: 0.1645 (0.2488)  loss_box_reg: 0.0918 (0.1128)  loss_mask: 0.2309 (0.2815)  loss_objectness: 0.0114 (0.0326)  loss_rpn_box_reg: 0.0076 (0.0193)  time: 0.1078 (0.1242)  data: 0.0014 (0.0167)  lr: 0.001600  max mem: 5193
2020-06-23 16:47:11,764 maskrcnn_benchmark.trainer INFO: eta: 0:54:29  iter: 13680  loss: 0.5353 (0.6947)  loss_classifier: 0.1398 (0.2486)  loss_box_reg: 0.0909 (0.1127)  loss_mask: 0.2343 (0.2814)  loss_objectness: 0.0179 (0.0326)  loss_rpn_box_reg: 0.0077 (0.0193)  time: 0.1073 (0.1242)  data: 0.0014 (0.0167)  lr: 0.001600  max mem: 5193
2020-06-23 16:47:13,933 maskrcnn_benchmark.trainer INFO: eta: 0:54:26  iter: 13700  loss: 0.5728 (0.6944)  loss_classifier: 0.1946 (0.2485)  loss_box_reg: 0.0911 (0.1127)  loss_mask: 0.2418 (0.2814)  loss_objectness: 0.0137 (0.0326)  loss_rpn_box_reg: 0.0070 (0.0193)  time: 0.1078 (0.1242)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5193
2020-06-23 16:47:16,087 maskrcnn_benchmark.trainer INFO: eta: 0:54:23  iter: 13720  loss: 0.4820 (0.6942)  loss_classifier: 0.1507 (0.2484)  loss_box_reg: 0.0728 (0.1127)  loss_mask: 0.2324 (0.2813)  loss_objectness: 0.0135 (0.0326)  loss_rpn_box_reg: 0.0081 (0.0193)  time: 0.1076 (0.1242)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5193
2020-06-23 16:47:18,261 maskrcnn_benchmark.trainer INFO: eta: 0:54:19  iter: 13740  loss: 0.5957 (0.6941)  loss_classifier: 0.2045 (0.2484)  loss_box_reg: 0.0991 (0.1127)  loss_mask: 0.2426 (0.2813)  loss_objectness: 0.0218 (0.0325)  loss_rpn_box_reg: 0.0187 (0.0193)  time: 0.1083 (0.1241)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5193
:::MLLOG {"namespace": "", "time_ms": 1592956039888, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 15}}
:::MLLOG {"namespace": "", "time_ms": 1592956039888, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 15}}
:::MLLOG {"namespace": "", "time_ms": 1592956039888, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 15}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 16:47:20,093 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
index created!
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
index created!
creating index...
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
2020-06-23 16:47:20,403 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:16,  2.51s/it]
  3%|         | 2/79 [00:02<02:18,  1.80s/it]
  6%|         | 5/79 [00:02<01:33,  1.27s/it]
 10%|         | 8/79 [00:02<01:03,  1.11it/s]
 14%|        | 11/79 [00:02<00:43,  1.56it/s]
 18%|        | 14/79 [00:03<00:29,  2.17it/s]
 22%|       | 17/79 [00:03<00:20,  3.00it/s]
 25%|       | 20/79 [00:03<00:14,  4.08it/s]
 29%|       | 23/79 [00:03<00:10,  5.46it/s]
 33%|      | 26/79 [00:03<00:07,  7.18it/s]
 37%|      | 29/79 [00:03<00:05,  9.19it/s]
 41%|      | 32/79 [00:03<00:04, 11.41it/s]
 44%|     | 35/79 [00:03<00:03, 13.74it/s]
 48%|     | 38/79 [00:04<00:02, 16.00it/s]
 52%|    | 41/79 [00:04<00:02, 18.12it/s]
 56%|    | 44/79 [00:04<00:01, 19.88it/s]
 59%|    | 47/79 [00:04<00:01, 21.55it/s]
 63%|   | 50/79 [00:04<00:01, 22.87it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:16,  2.52s/it]
  4%|         | 3/79 [00:02<02:15,  1.78s/it]
  8%|         | 6/79 [00:02<01:31,  1.26s/it]
 11%|        | 9/79 [00:02<01:02,  1.12it/s]
 15%|        | 12/79 [00:02<00:42,  1.57it/s]
 19%|        | 15/79 [00:03<00:29,  2.19it/s]
 23%|       | 18/79 [00:03<00:20,  3.01it/s]
 27%|       | 21/79 [00:03<00:14,  4.09it/s]
 30%|       | 24/79 [00:03<00:10,  5.48it/s]
 34%|      | 27/79 [00:03<00:07,  7.15it/s]
 38%|      | 30/79 [00:03<00:05,  9.11it/s]
 42%|     | 33/79 [00:03<00:04, 11.30it/s]
 46%|     | 36/79 [00:03<00:03, 13.56it/s]
 49%|     | 39/79 [00:04<00:02, 15.83it/s]
 53%|    | 42/79 [00:04<00:02, 17.84it/s]
 57%|    | 45/79 [00:04<00:01, 19.62it/s]
 61%|    | 48/79 [00:04<00:01, 21.19it/s]
 65%|   | 51/79 [00:04<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:20,  2.58s/it]
  5%|         | 4/79 [00:02<02:16,  1.82s/it]
  9%|         | 7/79 [00:02<01:32,  1.28s/it]
 13%|        | 10/79 [00:02<01:02,  1.10it/s]
 16%|        | 13/79 [00:03<00:42,  1.54it/s]
 20%|        | 16/79 [00:03<00:29,  2.15it/s]
 24%|       | 19/79 [00:03<00:20,  2.97it/s]
 28%|       | 22/79 [00:03<00:14,  4.04it/s]
 32%|      | 25/79 [00:03<00:09,  5.41it/s]
 35%|      | 28/79 [00:03<00:07,  7.12it/s]
 39%|      | 31/79 [00:03<00:05,  9.12it/s]
 43%|     | 34/79 [00:03<00:03, 11.34it/s]
 47%|     | 37/79 [00:03<00:03, 13.70it/s]
 51%|     | 40/79 [00:04<00:02, 15.97it/s]
 54%|    | 43/79 [00:04<00:02, 17.98it/s]
 58%|    | 46/79 [00:04<00:01, 19.86it/s]
 62%|   | 49/79 [00:04<00:01, 21.34it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:17,  2.53s/it]
  3%|         | 2/79 [00:02<02:19,  1.82s/it]
  6%|         | 5/79 [00:02<01:35,  1.28s/it]
 10%|         | 8/79 [00:02<01:04,  1.10it/s]
 14%|        | 11/79 [00:03<00:44,  1.54it/s]
 18%|        | 14/79 [00:03<00:30,  2.15it/s]
 22%|       | 17/79 [00:03<00:20,  2.96it/s]
 25%|       | 20/79 [00:03<00:14,  4.03it/s]
 29%|       | 23/79 [00:03<00:10,  5.39it/s]
 33%|      | 26/79 [00:03<00:07,  7.07it/s]
 37%|      | 29/79 [00:03<00:05,  9.04it/s]
 41%|      | 32/79 [00:03<00:04, 11.26it/s]
 44%|     | 35/79 [00:03<00:03, 13.57it/s]
 48%|     | 38/79 [00:04<00:02, 15.82it/s]
 52%|    | 41/79 [00:04<00:02, 17.88it/s]
 56%|    | 44/79 [00:04<00:01, 19.70it/s]
 59%|    | 47/79 [00:04<00:01, 21.06it/s]
 63%|   | 50/79 [00:04<00:01, 22.23it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:18,  2.55s/it]
  5%|         | 4/79 [00:02<02:14,  1.80s/it]
  9%|         | 7/79 [00:02<01:31,  1.27s/it]
 13%|        | 10/79 [00:02<01:02,  1.11it/s]
 16%|        | 13/79 [00:03<00:42,  1.56it/s]
 20%|        | 16/79 [00:03<00:29,  2.17it/s]
 24%|       | 19/79 [00:03<00:20,  2.99it/s]
 28%|       | 22/79 [00:03<00:14,  4.07it/s]
 32%|      | 25/79 [00:03<00:09,  5.45it/s]
 35%|      | 28/79 [00:03<00:07,  7.14it/s]
 39%|      | 31/79 [00:03<00:05,  9.15it/s]
 43%|     | 34/79 [00:03<00:03, 11.32it/s]
 47%|     | 37/79 [00:03<00:03, 13.68it/s]
 51%|     | 40/79 [00:04<00:02, 16.00it/s]
 54%|    | 43/79 [00:04<00:01, 18.15it/s]
 58%|    | 46/79 [00:04<00:01, 19.94it/s]
 62%|   | 49/79 [00:04<00:01, 21.44it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:12,  2.47s/it]
  3%|         | 2/79 [00:02<02:17,  1.78s/it]
  6%|         | 5/79 [00:02<01:33,  1.26s/it]
 10%|         | 8/79 [00:02<01:03,  1.12it/s]
 14%|        | 11/79 [00:03<00:43,  1.57it/s]
 18%|        | 14/79 [00:03<00:29,  2.18it/s]
 22%|       | 17/79 [00:03<00:20,  3.01it/s]
 25%|       | 20/79 [00:03<00:14,  4.09it/s]
 29%|       | 23/79 [00:03<00:10,  5.46it/s]
 33%|      | 26/79 [00:03<00:07,  7.09it/s]
 37%|      | 29/79 [00:03<00:05,  9.06it/s]
 41%|      | 32/79 [00:03<00:04, 11.23it/s]
 44%|     | 35/79 [00:03<00:03, 13.51it/s]
 48%|     | 38/79 [00:04<00:02, 15.82it/s]
 52%|    | 41/79 [00:04<00:02, 17.82it/s]
 56%|    | 44/79 [00:04<00:01, 19.55it/s]
 59%|    | 47/79 [00:04<00:01, 21.20it/s]
 63%|   | 50/79 [00:04<00:01, 22.27it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:24,  2.62s/it]
  4%|         | 3/79 [00:02<02:20,  1.85s/it]
  8%|         | 6/79 [00:02<01:35,  1.31s/it]
 11%|        | 9/79 [00:02<01:04,  1.08it/s]
 15%|        | 12/79 [00:03<00:44,  1.51it/s]
 19%|        | 15/79 [00:03<00:30,  2.11it/s]
 23%|       | 18/79 [00:03<00:20,  2.91it/s]
 27%|       | 21/79 [00:03<00:14,  3.97it/s]
 30%|       | 24/79 [00:03<00:10,  5.32it/s]
 34%|      | 27/79 [00:03<00:07,  7.00it/s]
 38%|      | 30/79 [00:03<00:05,  8.97it/s]
 42%|     | 33/79 [00:03<00:04, 11.19it/s]
 46%|     | 36/79 [00:04<00:03, 13.49it/s]
 49%|     | 39/79 [00:04<00:02, 15.78it/s]
 53%|    | 42/79 [00:04<00:02, 17.93it/s]
 57%|    | 45/79 [00:04<00:01, 19.82it/s]
 61%|    | 48/79 [00:04<00:01, 21.30it/s]
 65%|   | 51/79 [00:04<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:17,  2.53s/it]
  3%|         | 2/79 [00:02<02:19,  1.81s/it]
  6%|         | 5/79 [00:02<01:34,  1.28s/it]
 10%|         | 8/79 [00:02<01:04,  1.10it/s]
 14%|        | 11/79 [00:03<00:44,  1.54it/s]
 18%|        | 14/79 [00:03<00:30,  2.15it/s]
 22%|       | 17/79 [00:03<00:20,  2.96it/s]
 25%|       | 20/79 [00:03<00:14,  4.03it/s]
 29%|       | 23/79 [00:03<00:10,  5.38it/s]
 33%|      | 26/79 [00:03<00:07,  7.02it/s]
 37%|      | 29/79 [00:03<00:05,  8.95it/s]
 41%|      | 32/79 [00:03<00:04, 11.06it/s]
 44%|     | 35/79 [00:04<00:03, 13.25it/s]
 48%|     | 38/79 [00:04<00:02, 15.23it/s]
 52%|    | 41/79 [00:04<00:02, 17.20it/s]
 56%|    | 44/79 [00:04<00:01, 18.85it/s]
 59%|    | 47/79 [00:04<00:01, 20.21it/s]
 63%|   | 50/79 [00:04<00:01, 21.40it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:07,  2.40s/it]
  3%|         | 2/79 [00:02<02:15,  1.75s/it]
  6%|         | 5/79 [00:02<01:31,  1.24s/it]
 10%|         | 8/79 [00:02<01:02,  1.13it/s]
 14%|        | 11/79 [00:03<00:42,  1.59it/s]
 18%|        | 14/79 [00:03<00:29,  2.21it/s]
 22%|       | 17/79 [00:03<00:20,  3.04it/s]
 25%|       | 20/79 [00:03<00:14,  4.13it/s]
 29%|       | 23/79 [00:03<00:10,  5.51it/s]
 33%|      | 26/79 [00:03<00:07,  7.18it/s]
 37%|      | 29/79 [00:03<00:05,  9.16it/s]
 41%|      | 32/79 [00:03<00:04, 11.30it/s]
 44%|     | 35/79 [00:03<00:03, 13.56it/s]
 48%|     | 38/79 [00:04<00:02, 15.63it/s]
 52%|    | 41/79 [00:04<00:02, 17.66it/s]
 56%|    | 44/79 [00:04<00:01, 19.42it/s]
 59%|    | 47/79 [00:04<00:01, 20.85it/s]
 63%|   | 50/79 [00:04<00:01, 21.94it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:26,  2.65s/it]
  5%|         | 4/79 [00:02<02:20,  1.87s/it]
  9%|         | 7/79 [00:02<01:34,  1.32s/it]
 13%|        | 10/79 [00:03<01:04,  1.07it/s]
 16%|        | 13/79 [00:03<00:43,  1.50it/s]
 20%|        | 16/79 [00:03<00:30,  2.09it/s]
 24%|       | 19/79 [00:03<00:20,  2.89it/s]
 28%|       | 22/79 [00:03<00:14,  3.95it/s]
 32%|      | 25/79 [00:03<00:10,  5.30it/s]
 35%|      | 28/79 [00:03<00:07,  6.97it/s]
 39%|      | 31/79 [00:03<00:05,  8.93it/s]
 43%|     | 34/79 [00:03<00:04, 11.15it/s]
 47%|     | 37/79 [00:04<00:03, 13.48it/s]
 51%|     | 40/79 [00:04<00:02, 15.75it/s]
 54%|    | 43/79 [00:04<00:01, 18.05it/s]
 58%|    | 46/79 [00:04<00:01, 19.92it/s]
 62%|   | 49/79 [00:04<00:01, 21.31it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:14,  2.50s/it]
  3%|         | 2/79 [00:02<02:18,  1.79s/it]
  6%|         | 5/79 [00:02<01:33,  1.27s/it]
 10%|         | 8/79 [00:02<01:03,  1.11it/s]
 14%|        | 11/79 [00:03<00:43,  1.56it/s]
 18%|        | 14/79 [00:03<00:29,  2.17it/s]
 22%|       | 17/79 [00:03<00:20,  2.99it/s]
 25%|       | 20/79 [00:03<00:14,  4.06it/s]
 29%|       | 23/79 [00:03<00:10,  5.42it/s]
 33%|      | 26/79 [00:03<00:07,  7.08it/s]
 37%|      | 29/79 [00:03<00:05,  9.02it/s]
 41%|      | 32/79 [00:03<00:04, 11.16it/s]
 44%|     | 35/79 [00:03<00:03, 13.36it/s]
 48%|     | 38/79 [00:04<00:02, 15.48it/s]
 52%|    | 41/79 [00:04<00:02, 17.35it/s]
 56%|    | 44/79 [00:04<00:01, 19.09it/s]
 59%|    | 47/79 [00:04<00:01, 20.45it/s]
 63%|   | 50/79 [00:04<00:01, 21.72it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:18,  2.55s/it]
  4%|         | 3/79 [00:02<02:16,  1.80s/it]
  8%|         | 6/79 [00:02<01:32,  1.27s/it]
 11%|        | 9/79 [00:02<01:03,  1.11it/s]
 15%|        | 12/79 [00:03<00:43,  1.56it/s]
 19%|        | 15/79 [00:03<00:29,  2.17it/s]
 23%|       | 18/79 [00:03<00:20,  2.98it/s]
 27%|       | 21/79 [00:03<00:14,  4.05it/s]
 30%|       | 24/79 [00:03<00:10,  5.41it/s]
 34%|      | 27/79 [00:03<00:07,  7.06it/s]
 38%|      | 30/79 [00:03<00:05,  8.97it/s]
 42%|     | 33/79 [00:03<00:04, 11.11it/s]
 46%|     | 36/79 [00:03<00:03, 13.30it/s]
 49%|     | 39/79 [00:04<00:02, 15.36it/s]
 53%|    | 42/79 [00:04<00:02, 17.41it/s]
 57%|    | 45/79 [00:04<00:01, 19.16it/s]
 61%|    | 48/79 [00:04<00:01, 20.65it/s]
 65%|   | 51/79 [00:04<00:01, 21.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:27,  2.66s/it]
  4%|         | 3/79 [00:02<02:22,  1.88s/it]
  8%|         | 6/79 [00:02<01:36,  1.33s/it]
 11%|        | 9/79 [00:03<01:05,  1.06it/s]
 15%|        | 12/79 [00:03<00:44,  1.49it/s]
 19%|        | 15/79 [00:03<00:30,  2.08it/s]
 23%|       | 18/79 [00:03<00:21,  2.87it/s]
 27%|       | 21/79 [00:03<00:14,  3.92it/s]
 30%|       | 24/79 [00:03<00:10,  5.26it/s]
 34%|      | 27/79 [00:03<00:07,  6.91it/s]
 38%|      | 30/79 [00:03<00:05,  8.88it/s]
 42%|     | 33/79 [00:03<00:04, 11.02it/s]
 46%|     | 36/79 [00:04<00:03, 13.35it/s]
 49%|     | 39/79 [00:04<00:02, 15.64it/s]
 53%|    | 42/79 [00:04<00:02, 17.79it/s]
 57%|    | 45/79 [00:04<00:01, 19.53it/s]
 61%|    | 48/79 [00:04<00:01, 20.88it/s]
 65%|   | 51/79 [00:04<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:05,  2.38s/it]
  3%|         | 2/79 [00:02<02:15,  1.77s/it]
  6%|         | 5/79 [00:02<01:32,  1.25s/it]
 10%|         | 8/79 [00:02<01:02,  1.13it/s]
 14%|        | 11/79 [00:03<00:42,  1.58it/s]
 18%|        | 14/79 [00:03<00:29,  2.20it/s]
 22%|       | 17/79 [00:03<00:20,  3.02it/s]
 25%|       | 20/79 [00:03<00:14,  4.11it/s]
 29%|       | 23/79 [00:03<00:10,  5.48it/s]
 33%|      | 26/79 [00:03<00:07,  7.16it/s]
 37%|      | 29/79 [00:03<00:05,  9.10it/s]
 41%|      | 32/79 [00:03<00:04, 11.27it/s]
 44%|     | 35/79 [00:04<00:03, 13.50it/s]
 48%|     | 38/79 [00:04<00:02, 15.51it/s]
 52%|    | 41/79 [00:04<00:02, 17.34it/s]
 56%|    | 44/79 [00:04<00:01, 19.11it/s]
 59%|    | 47/79 [00:04<00:01, 20.36it/s]
 63%|   | 50/79 [00:04<00:01, 21.50it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:21,  2.58s/it]
  3%|         | 2/79 [00:02<02:23,  1.86s/it]
  6%|         | 5/79 [00:02<01:37,  1.32s/it]
 10%|         | 8/79 [00:03<01:06,  1.07it/s]
 14%|        | 11/79 [00:03<00:45,  1.50it/s]
 18%|        | 14/79 [00:03<00:31,  2.10it/s]
 22%|       | 17/79 [00:03<00:21,  2.89it/s]
 25%|       | 20/79 [00:03<00:14,  3.94it/s]
 29%|       | 23/79 [00:03<00:10,  5.28it/s]
 33%|      | 26/79 [00:03<00:07,  6.93it/s]
 37%|      | 29/79 [00:03<00:05,  8.88it/s]
 41%|      | 32/79 [00:03<00:04, 11.04it/s]
 44%|     | 35/79 [00:04<00:03, 13.32it/s]
 48%|     | 38/79 [00:04<00:02, 15.65it/s]
 52%|    | 41/79 [00:04<00:02, 17.53it/s]
 56%|    | 44/79 [00:04<00:01, 19.45it/s]
 59%|    | 47/79 [00:04<00:01, 20.88it/s]
 63%|   | 50/79 [00:04<00:01, 22.09it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:29,  2.68s/it]
  5%|         | 4/79 [00:02<02:21,  1.89s/it]
  9%|         | 7/79 [00:02<01:36,  1.33s/it]
 13%|        | 10/79 [00:03<01:05,  1.06it/s]
 16%|        | 13/79 [00:03<00:44,  1.48it/s]
 20%|        | 16/79 [00:03<00:30,  2.07it/s]
 24%|       | 19/79 [00:03<00:20,  2.86it/s]
 28%|       | 22/79 [00:03<00:14,  3.90it/s]
 32%|      | 25/79 [00:03<00:10,  5.24it/s]
 35%|      | 28/79 [00:03<00:07,  6.90it/s]
 39%|      | 31/79 [00:03<00:05,  8.87it/s]
 43%|     | 34/79 [00:03<00:04, 11.05it/s]
 47%|     | 37/79 [00:04<00:03, 13.38it/s]
 51%|     | 40/79 [00:04<00:02, 15.63it/s]
 54%|    | 43/79 [00:04<00:02, 17.81it/s]
 58%|    | 46/79 [00:04<00:01, 19.58it/s]
 62%|   | 49/79 [00:04<00:01, 21.12it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:33,  2.74s/it]
  5%|         | 4/79 [00:02<02:24,  1.93s/it]
  9%|         | 7/79 [00:02<01:38,  1.36s/it]
 13%|        | 10/79 [00:03<01:06,  1.04it/s]
 16%|        | 13/79 [00:03<00:45,  1.45it/s]
 20%|        | 16/79 [00:03<00:31,  2.03it/s]
 24%|       | 19/79 [00:03<00:21,  2.81it/s]
 28%|       | 22/79 [00:03<00:14,  3.84it/s]
 32%|      | 25/79 [00:03<00:10,  5.16it/s]
 35%|      | 28/79 [00:03<00:07,  6.80it/s]
 39%|      | 31/79 [00:03<00:05,  8.75it/s]
 43%|     | 34/79 [00:03<00:04, 10.94it/s]
 47%|     | 37/79 [00:04<00:03, 13.24it/s]
 51%|     | 40/79 [00:04<00:02, 15.62it/s]
 54%|    | 43/79 [00:04<00:02, 17.79it/s]
 58%|    | 46/79 [00:04<00:01, 19.60it/s]
 62%|   | 49/79 [00:04<00:01, 21.34it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:20,  2.58s/it]
  5%|         | 4/79 [00:02<02:16,  1.82s/it]
  9%|         | 7/79 [00:02<01:32,  1.28s/it]
 13%|        | 10/79 [00:02<01:02,  1.10it/s]
 16%|        | 13/79 [00:03<00:42,  1.54it/s]
 20%|        | 16/79 [00:03<00:29,  2.14it/s]
 24%|       | 19/79 [00:03<00:20,  2.95it/s]
 28%|       | 22/79 [00:03<00:14,  4.00it/s]
 32%|      | 25/79 [00:03<00:10,  5.34it/s]
 35%|      | 28/79 [00:03<00:07,  6.98it/s]
 39%|      | 31/79 [00:03<00:05,  8.90it/s]
 43%|     | 34/79 [00:03<00:04, 10.99it/s]
 47%|     | 37/79 [00:04<00:03, 13.17it/s]
 51%|     | 40/79 [00:04<00:02, 15.30it/s]
 54%|    | 43/79 [00:04<00:02, 17.31it/s]
 58%|    | 46/79 [00:04<00:01, 18.82it/s]
 62%|   | 49/79 [00:04<00:01, 20.38it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:25,  2.63s/it]
  5%|         | 4/79 [00:02<02:19,  1.86s/it]
  9%|         | 7/79 [00:02<01:34,  1.31s/it]
 13%|        | 10/79 [00:03<01:04,  1.08it/s]
 16%|        | 13/79 [00:03<00:43,  1.51it/s]
 20%|        | 16/79 [00:03<00:29,  2.10it/s]
 24%|       | 19/79 [00:03<00:20,  2.90it/s]
 28%|       | 22/79 [00:03<00:14,  3.94it/s]
 32%|      | 25/79 [00:03<00:10,  5.27it/s]
 35%|      | 28/79 [00:03<00:07,  6.91it/s]
 39%|      | 31/79 [00:03<00:05,  8.83it/s]
 43%|     | 34/79 [00:03<00:04, 10.96it/s]
 47%|     | 37/79 [00:04<00:03, 13.27it/s]
 51%|     | 40/79 [00:04<00:02, 15.48it/s]
 54%|    | 43/79 [00:04<00:02, 17.37it/s]
 58%|    | 46/79 [00:04<00:01, 19.33it/s]
 62%|   | 49/79 [00:04<00:01, 20.88it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:20,  2.57s/it]
  4%|         | 3/79 [00:02<02:17,  1.81s/it]
  8%|         | 6/79 [00:02<01:33,  1.28s/it]
 11%|        | 9/79 [00:02<01:03,  1.10it/s]
 15%|        | 12/79 [00:03<00:43,  1.54it/s]
 19%|        | 15/79 [00:03<00:29,  2.15it/s]
 23%|       | 18/79 [00:03<00:20,  2.96it/s]
 27%|       | 21/79 [00:03<00:14,  4.03it/s]
 30%|       | 24/79 [00:03<00:10,  5.38it/s]
 34%|      | 27/79 [00:03<00:07,  7.03it/s]
 38%|      | 30/79 [00:03<00:05,  8.93it/s]
 42%|     | 33/79 [00:03<00:04, 10.97it/s]
 46%|     | 36/79 [00:04<00:03, 13.10it/s]
 49%|     | 39/79 [00:04<00:02, 15.21it/s]
 53%|    | 42/79 [00:04<00:02, 17.06it/s]
 57%|    | 45/79 [00:04<00:01, 18.74it/s]
 61%|    | 48/79 [00:04<00:01, 20.19it/s]
 65%|   | 51/79 [00:04<00:01, 20.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:27,  2.66s/it]
  5%|         | 4/79 [00:02<02:20,  1.87s/it]
  9%|         | 7/79 [00:02<01:35,  1.32s/it]
 13%|        | 10/79 [00:03<01:04,  1.06it/s]
 16%|        | 13/79 [00:03<00:44,  1.49it/s]
 20%|        | 16/79 [00:03<00:30,  2.08it/s]
 24%|       | 19/79 [00:03<00:20,  2.87it/s]
 28%|       | 22/79 [00:03<00:14,  3.92it/s]
 32%|      | 25/79 [00:03<00:10,  5.26it/s]
 35%|      | 28/79 [00:03<00:07,  6.92it/s]
 39%|      | 31/79 [00:03<00:05,  8.90it/s]
 43%|     | 34/79 [00:03<00:04, 11.06it/s]
 47%|     | 37/79 [00:04<00:03, 13.38it/s]
 51%|     | 40/79 [00:04<00:02, 15.56it/s]
 54%|    | 43/79 [00:04<00:02, 17.67it/s]
 58%|    | 46/79 [00:04<00:01, 19.23it/s]
 62%|   | 49/79 [00:04<00:01, 20.81it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:26,  2.65s/it]
  5%|         | 4/79 [00:02<02:20,  1.87s/it]
  9%|         | 7/79 [00:02<01:34,  1.32s/it]
 13%|        | 10/79 [00:03<01:04,  1.07it/s]
 16%|        | 13/79 [00:03<00:43,  1.50it/s]
 20%|        | 16/79 [00:03<00:30,  2.09it/s]
 24%|       | 19/79 [00:03<00:20,  2.88it/s]
 28%|       | 22/79 [00:03<00:14,  3.93it/s]
 32%|      | 25/79 [00:03<00:10,  5.25it/s]
 35%|      | 28/79 [00:03<00:07,  6.88it/s]
 39%|      | 31/79 [00:03<00:05,  8.82it/s]
 43%|     | 34/79 [00:03<00:04, 10.94it/s]
 47%|     | 37/79 [00:04<00:03, 13.09it/s]
 51%|     | 40/79 [00:04<00:02, 15.33it/s]
 54%|    | 43/79 [00:04<00:02, 17.50it/s]
 58%|    | 46/79 [00:04<00:01, 19.06it/s]
 62%|   | 49/79 [00:04<00:01, 20.27it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:26,  2.65s/it]
  5%|         | 4/79 [00:02<02:20,  1.87s/it]
  9%|         | 7/79 [00:02<01:34,  1.32s/it]
 13%|        | 10/79 [00:03<01:04,  1.07it/s]
 16%|        | 13/79 [00:03<00:43,  1.50it/s]
 20%|        | 16/79 [00:03<00:30,  2.09it/s]
 24%|       | 19/79 [00:03<00:20,  2.89it/s]
 28%|       | 22/79 [00:03<00:14,  3.93it/s]
 32%|      | 25/79 [00:03<00:10,  5.25it/s]
 35%|      | 28/79 [00:03<00:07,  6.90it/s]
 39%|      | 31/79 [00:03<00:05,  8.76it/s]
 43%|     | 34/79 [00:03<00:04, 10.93it/s]
 47%|     | 37/79 [00:04<00:03, 13.11it/s]
 51%|     | 40/79 [00:04<00:02, 15.23it/s]
 54%|    | 43/79 [00:04<00:02, 17.20it/s]
 58%|    | 46/79 [00:04<00:01, 19.12it/s]
 62%|   | 49/79 [00:04<00:01, 20.50it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:25,  2.64s/it]
  5%|         | 4/79 [00:02<02:19,  1.86s/it]
  9%|         | 7/79 [00:02<01:34,  1.31s/it]
 13%|        | 10/79 [00:03<01:04,  1.07it/s]
 16%|        | 13/79 [00:03<00:43,  1.51it/s]
 20%|        | 16/79 [00:03<00:30,  2.10it/s]
 24%|       | 19/79 [00:03<00:20,  2.89it/s]
 28%|       | 22/79 [00:03<00:14,  3.94it/s]
 32%|      | 25/79 [00:03<00:10,  5.27it/s]
 35%|      | 28/79 [00:03<00:07,  6.93it/s]
 39%|      | 31/79 [00:03<00:05,  8.83it/s]
 43%|     | 34/79 [00:03<00:04, 10.95it/s]
 47%|     | 37/79 [00:04<00:03, 13.24it/s]
 51%|     | 40/79 [00:04<00:02, 15.44it/s]
 54%|    | 43/79 [00:04<00:02, 17.40it/s]
 58%|    | 46/79 [00:04<00:01, 18.97it/s]
 62%|   | 49/79 [00:04<00:01, 20.65it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:26,  2.65s/it]
  5%|         | 4/79 [00:02<02:19,  1.87s/it]
  9%|         | 7/79 [00:02<01:34,  1.32s/it]
 13%|        | 10/79 [00:03<01:04,  1.07it/s]
 16%|        | 13/79 [00:03<00:43,  1.50it/s]
 20%|        | 16/79 [00:03<00:30,  2.09it/s]
 24%|       | 19/79 [00:03<00:20,  2.89it/s]
 28%|       | 22/79 [00:03<00:14,  3.94it/s]
 32%|      | 25/79 [00:03<00:10,  5.28it/s]
 35%|      | 28/79 [00:03<00:07,  6.91it/s]
 39%|      | 31/79 [00:03<00:05,  8.80it/s]
 43%|     | 34/79 [00:03<00:04, 10.91it/s]
 47%|     | 37/79 [00:04<00:03, 13.10it/s]
 51%|     | 40/79 [00:04<00:02, 15.14it/s]
 54%|    | 43/79 [00:04<00:02, 17.19it/s]
 58%|    | 46/79 [00:04<00:01, 18.70it/s]
 62%|   | 49/79 [00:04<00:01, 20.06it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:24,  2.63s/it]
  5%|         | 4/79 [00:02<02:18,  1.85s/it]
  9%|         | 7/79 [00:02<01:34,  1.31s/it]
 13%|        | 10/79 [00:03<01:04,  1.08it/s]
 16%|        | 13/79 [00:03<00:43,  1.51it/s]
 20%|        | 16/79 [00:03<00:29,  2.10it/s]
 24%|       | 19/79 [00:03<00:20,  2.90it/s]
 28%|       | 22/79 [00:03<00:14,  3.94it/s]
 32%|      | 25/79 [00:03<00:10,  5.26it/s]
 35%|      | 28/79 [00:03<00:07,  6.88it/s]
 39%|      | 31/79 [00:03<00:05,  8.78it/s]
 43%|     | 34/79 [00:03<00:04, 10.87it/s]
 47%|     | 37/79 [00:04<00:03, 13.00it/s]
 51%|     | 40/79 [00:04<00:02, 15.09it/s]
 54%|    | 43/79 [00:04<00:02, 16.96it/s]
 58%|    | 46/79 [00:04<00:01, 18.62it/s]
 62%|   | 49/79 [00:04<00:01, 20.03it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:19,  2.56s/it]
  5%|         | 4/79 [00:02<02:15,  1.80s/it]
  9%|         | 7/79 [00:02<01:31,  1.28s/it]
 13%|        | 10/79 [00:02<01:02,  1.10it/s]
 16%|        | 13/79 [00:03<00:42,  1.55it/s]
 20%|        | 16/79 [00:03<00:29,  2.15it/s]
 24%|       | 19/79 [00:03<00:20,  2.96it/s]
 28%|       | 22/79 [00:03<00:14,  4.03it/s]
 32%|      | 25/79 [00:03<00:10,  5.36it/s]
 35%|      | 28/79 [00:03<00:07,  6.99it/s]
 39%|      | 31/79 [00:03<00:05,  8.89it/s]
 43%|     | 34/79 [00:03<00:04, 10.96it/s]
 47%|     | 37/79 [00:04<00:03, 13.07it/s]
 51%|     | 40/79 [00:04<00:02, 15.10it/s]
 54%|    | 43/79 [00:04<00:02, 17.03it/s]
 58%|    | 46/79 [00:04<00:01, 18.72it/s]
 62%|   | 49/79 [00:04<00:01, 20.11it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:29,  2.69s/it]
  5%|         | 4/79 [00:02<02:22,  1.90s/it]
  9%|         | 7/79 [00:02<01:36,  1.34s/it]
 13%|        | 10/79 [00:03<01:05,  1.05it/s]
 16%|        | 13/79 [00:03<00:44,  1.48it/s]
 20%|        | 16/79 [00:03<00:30,  2.06it/s]
 24%|       | 19/79 [00:03<00:21,  2.84it/s]
 28%|       | 22/79 [00:03<00:14,  3.88it/s]
 32%|      | 25/79 [00:03<00:10,  5.20it/s]
 35%|      | 28/79 [00:03<00:07,  6.81it/s]
 39%|      | 31/79 [00:03<00:05,  8.72it/s]
 43%|     | 34/79 [00:04<00:04, 10.82it/s]
 47%|     | 37/79 [00:04<00:03, 12.99it/s]
 51%|     | 40/79 [00:04<00:02, 15.21it/s]
 54%|    | 43/79 [00:04<00:02, 17.28it/s]
 58%|    | 46/79 [00:04<00:01, 18.76it/s]
 62%|   | 49/79 [00:04<00:01, 20.22it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:31,  2.71s/it]
  5%|         | 4/79 [00:02<02:23,  1.91s/it]
  9%|         | 7/79 [00:02<01:37,  1.35s/it]
 13%|        | 10/79 [00:03<01:06,  1.05it/s]
 16%|        | 13/79 [00:03<00:44,  1.47it/s]
 20%|        | 16/79 [00:03<00:30,  2.05it/s]
 24%|       | 19/79 [00:03<00:21,  2.82it/s]
 28%|       | 22/79 [00:03<00:14,  3.85it/s]
 32%|      | 25/79 [00:03<00:10,  5.16it/s]
 35%|      | 28/79 [00:03<00:07,  6.79it/s]
 39%|      | 31/79 [00:03<00:05,  8.71it/s]
 43%|     | 34/79 [00:04<00:04, 10.84it/s]
 47%|     | 37/79 [00:04<00:03, 13.09it/s]
 51%|     | 40/79 [00:04<00:02, 15.31it/s]
 54%|    | 43/79 [00:04<00:02, 17.34it/s]
 58%|    | 46/79 [00:04<00:01, 19.11it/s]
 62%|   | 49/79 [00:04<00:01, 20.69it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:25,  2.63s/it]
  5%|         | 4/79 [00:02<02:19,  1.86s/it]
  9%|         | 7/79 [00:02<01:34,  1.31s/it]
 13%|        | 10/79 [00:03<01:04,  1.07it/s]
 16%|        | 13/79 [00:03<00:43,  1.51it/s]
 20%|        | 16/79 [00:03<00:30,  2.10it/s]
 24%|       | 19/79 [00:03<00:20,  2.89it/s]
 28%|       | 22/79 [00:03<00:14,  3.93it/s]
 32%|      | 25/79 [00:03<00:10,  5.27it/s]
 35%|      | 28/79 [00:03<00:07,  6.88it/s]
 39%|      | 31/79 [00:03<00:05,  8.76it/s]
 43%|     | 34/79 [00:03<00:04, 10.87it/s]
 47%|     | 37/79 [00:04<00:03, 12.92it/s]
 51%|     | 40/79 [00:04<00:02, 15.13it/s]
 54%|    | 43/79 [00:04<00:02, 16.97it/s]
 58%|    | 46/79 [00:04<00:01, 18.67it/s]
 62%|   | 49/79 [00:04<00:01, 20.11it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:29,  2.68s/it]
  5%|         | 4/79 [00:02<02:21,  1.89s/it]
  9%|         | 7/79 [00:02<01:36,  1.34s/it]
 13%|        | 10/79 [00:03<01:05,  1.06it/s]
 16%|        | 13/79 [00:03<00:44,  1.48it/s]
 20%|        | 16/79 [00:03<00:30,  2.06it/s]
 24%|       | 19/79 [00:03<00:21,  2.84it/s]
 28%|       | 22/79 [00:03<00:14,  3.86it/s]
 32%|      | 25/79 [00:03<00:10,  5.18it/s]
 35%|      | 28/79 [00:03<00:07,  6.78it/s]
 39%|      | 31/79 [00:03<00:05,  8.69it/s]
 43%|     | 34/79 [00:04<00:04, 10.83it/s]
 47%|     | 37/79 [00:04<00:03, 13.01it/s]
 51%|     | 40/79 [00:04<00:02, 15.14it/s]
 54%|    | 43/79 [00:04<00:02, 17.01it/s]
 58%|    | 46/79 [00:04<00:01, 18.74it/s]
 62%|   | 49/79 [00:04<00:01, 20.21it/s]
 66%|   | 52/79 [00:04<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<03:25,  2.63s/it]
  5%|         | 4/79 [00:02<02:19,  1.85s/it]
  9%|         | 7/79 [00:02<01:34,  1.31s/it]
 13%|        | 10/79 [00:03<01:04,  1.07it/s]
 16%|        | 13/79 [00:03<00:43,  1.51it/s]
 20%|        | 16/79 [00:03<00:30,  2.09it/s]
 24%|       | 19/79 [00:03<00:20,  2.89it/s]
 28%|       | 22/79 [00:03<00:14,  3.93it/s]
 32%|      | 25/79 [00:03<00:10,  5.23it/s]
 35%|      | 28/79 [00:03<00:07,  6.82it/s]
 39%|      | 31/79 [00:03<00:05,  8.71it/s]
 43%|     | 34/79 [00:04<00:04, 10.78it/s]
 47%|     | 37/79 [00:04<00:03, 12.96it/s]
 51%|     | 40/79 [00:04<00:02, 14.97it/s]
 54%|    | 43/79 [00:04<00:02, 16.71it/s]
 58%|    | 46/79 [00:04<00:01, 18.26it/s]
 62%|   | 49/79 [00:04<00:01, 19.54it/s]
 66%|   | 52/79 [00:04<00:01, 22.63it/s]
 70%|   | 55/79 [00:04<00:01, 23.54it/s]
 73%|  | 58/79 [00:04<00:00, 24.18it/s]
 77%|  | 61/79 [00:04<00:00, 24.93it/s]
 81%|  | 64/79 [00:04<00:00, 25.27it/s]
 85%| | 67/79 [00:05<00:00, 25.42it/s]
 89%| | 70/79 [00:05<00:00, 25.21it/s]
 92%|| 73/79 [00:05<00:00, 25.95it/s]
 96%|| 76/79 [00:05<00:00, 26.55it/s]
100%|| 79/79 [00:05<00:00, 27.41it/s]
, 22.66it/s]
 70%|   | 55/79 [00:04<00:01, 23.45it/s]
 73%|  | 58/79 [00:04<00:00, 24.09it/s]
 77%|  | 61/79 [00:04<00:00, 24.78it/s]
 81%|  | 64/79 [00:04<00:00, 25.13it/s]
 85%| | 67/79 [00:05<00:00, 25.68it/s]
 89%| | 70/79 [00:05<00:00, 25.89it/s]
 92%|| 73/79 [00:05<00:00, 26.20it/s]
 96%|| 76/79 [00:05<00:00, 26.82it/s]
100%|| 79/79 [00:05<00:00, 27.61it/s]
/s]
 67%|   | 53/79 [00:04<00:01, 23.83it/s]
 71%|   | 56/79 [00:04<00:00, 24.41it/s]
 75%|  | 59/79 [00:04<00:00, 25.02it/s]
 78%|  | 62/79 [00:04<00:00, 24.97it/s]
 82%| | 65/79 [00:05<00:00, 25.14it/s]
 86%| | 68/79 [00:05<00:00, 25.45it/s]
 90%| | 71/79 [00:05<00:00, 25.45it/s]
 94%|| 74/79 [00:05<00:00, 25.98it/s]
 97%|| 77/79 [00:05<00:00, 26.59it/s]
100%|| 79/79 [00:05<00:00, 14.03it/s]
28it/s]
 68%|   | 54/79 [00:04<00:01, 23.41it/s]
 72%|  | 57/79 [00:04<00:00, 23.90it/s]
 76%|  | 60/79 [00:04<00:00, 24.54it/s]
 80%|  | 63/79 [00:04<00:00, 24.82it/s]
 84%| | 66/79 [00:05<00:00, 25.16it/s]
 87%| | 69/79 [00:05<00:00, 25.36it/s]
 91%| | 72/79 [00:05<00:00, 25.31it/s]
 95%|| 75/79 [00:05<00:00, 25.79it/s]
 99%|| 78/79 [00:05<00:00, 26.63it/s]
100%|| 79/79 [00:05<00:00, 13.94it/s]
, 22.75it/s]
 70%|   | 55/79 [00:04<00:01, 23.73it/s]
 73%|  | 58/79 [00:04<00:00, 24.44it/s]
 77%|  | 61/79 [00:04<00:00, 25.11it/s]
 81%|  | 64/79 [00:05<00:00, 25.54it/s]
 85%| | 67/79 [00:05<00:00, 25.81it/s]
 89%| | 70/79 [00:05<00:00, 26.02it/s]
 92%|| 73/79 [00:05<00:00, 26.35it/s]
 96%|| 76/79 [00:05<00:00, 26.87it/s]
100%|| 79/79 [00:05<00:00, 27.69it/s]
65it/s]
 68%|   | 54/79 [00:04<00:01, 23.37it/s]
 72%|  | 57/79 [00:04<00:00, 24.10it/s]
 76%|  | 60/79 [00:04<00:00, 24.67it/s]
 80%|  | 63/79 [00:05<00:00, 25.08it/s]
 84%| | 66/79 [00:05<00:00, 25.24it/s]
 87%| | 69/79 [00:05<00:00, 25.81it/s]
 91%| | 72/79 [00:05<00:00, 25.64it/s]
 95%|| 75/79 [00:05<00:00, 26.72it/s]
 99%|| 78/79 [00:05<00:00, 26.92it/s]
100%|| 79/79 [00:05<00:00, 13.83it/s]
/s]
 67%|   | 53/79 [00:04<00:01, 23.14it/s]
 71%|   | 56/79 [00:04<00:00, 23.77it/s]
 75%|  | 59/79 [00:04<00:00, 24.49it/s]
 78%|  | 62/79 [00:05<00:00, 24.60it/s]
 82%| | 65/79 [00:05<00:00, 24.99it/s]
 86%| | 68/79 [00:05<00:00, 25.15it/s]
 90%| | 71/79 [00:05<00:00, 25.30it/s]
 94%|| 74/79 [00:05<00:00, 25.84it/s]
 97%|| 77/79 [00:05<00:00, 26.36it/s]
100%|| 79/79 [00:05<00:00, 13.84it/s]
/s]
 67%|   | 53/79 [00:04<00:01, 23.26it/s]
 71%|   | 56/79 [00:04<00:00, 23.95it/s]
 75%|  | 59/79 [00:04<00:00, 24.60it/s]
 78%|  | 62/79 [00:05<00:00, 24.78it/s]
 82%| | 65/79 [00:05<00:00, 24.93it/s]
 86%| | 68/79 [00:05<00:00, 25.21it/s]
 90%| | 71/79 [00:05<00:00, 25.45it/s]
 94%|| 74/79 [00:05<00:00, 26.11it/s]
 97%|| 77/79 [00:05<00:00, 26.70it/s]
100%|| 79/79 [00:05<00:00, 13.82it/s]
, 22.55it/s]
 70%|   | 55/79 [00:04<00:01, 23.70it/s]
 73%|  | 58/79 [00:04<00:00, 24.51it/s]
 77%|  | 61/79 [00:05<00:00, 24.87it/s]
 81%|  | 64/79 [00:05<00:00, 25.03it/s]
 85%| | 67/79 [00:05<00:00, 25.54it/s]
 89%| | 70/79 [00:05<00:00, 25.58it/s]
 92%|| 73/79 [00:05<00:00, 26.04it/s]
 96%|| 76/79 [00:05<00:00, 26.59it/s]
100%|| 79/79 [00:05<00:00, 27.30it/s]
, 22.30it/s]
 70%|   | 55/79 [00:04<00:01, 23.35it/s]
 73%|  | 58/79 [00:04<00:00, 24.06it/s]
 77%|  | 61/79 [00:05<00:00, 24.54it/s]
 81%|  | 64/79 [00:05<00:00, 24.89it/s]
 85%| | 67/79 [00:05<00:00, 25.31it/s]
 89%| | 70/79 [00:05<00:00, 25.44it/s]
 92%|| 73/79 [00:05<00:00, 25.96it/s]
 96%|| 76/79 [00:05<00:00, 26.61it/s]
100%|| 79/79 [00:05<00:00, 27.38it/s]
/s]
 67%|   | 53/79 [00:04<00:01, 22.30it/s]
 71%|   | 56/79 [00:04<00:00, 23.49it/s]
 75%|  | 59/79 [00:04<00:00, 24.41it/s]
 78%|  | 62/79 [00:05<00:00, 25.04it/s]
 82%| | 65/79 [00:05<00:00, 25.57it/s]
 86%| | 68/79 [00:05<00:00, 25.70it/s]
 90%| | 71/79 [00:05<00:00, 25.96it/s]
 94%|| 74/79 [00:05<00:00, 26.45it/s]
 97%|| 77/79 [00:05<00:00, 27.35it/s]
100%|| 79/79 [00:05<00:00, 13.80it/s]
06it/s]
 68%|   | 54/79 [00:04<00:01, 22.91it/s]
 72%|  | 57/79 [00:04<00:00, 23.40it/s]
 76%|  | 60/79 [00:04<00:00, 23.97it/s]
 80%|  | 63/79 [00:05<00:00, 24.58it/s]
 84%| | 66/79 [00:05<00:00, 24.84it/s]
 87%| | 69/79 [00:05<00:00, 24.82it/s]
 91%| | 72/79 [00:05<00:00, 25.23it/s]
 95%|| 75/79 [00:05<00:00, 26.08it/s]
 99%|| 78/79 [00:05<00:00, 26.79it/s]
100%|| 79/79 [00:05<00:00, 13.69it/s]
81it/s]
 68%|   | 54/79 [00:04<00:01, 22.63it/s]
 72%|  | 57/79 [00:04<00:00, 23.24it/s]
 76%|  | 60/79 [00:04<00:00, 23.61it/s]
 80%|  | 63/79 [00:05<00:00, 23.90it/s]
 84%| | 66/79 [00:05<00:00, 23.97it/s]
 87%| | 69/79 [00:05<00:00, 24.13it/s]
 91%| | 72/79 [00:05<00:00, 24.46it/s]
 95%|| 75/79 [00:05<00:00, 25.40it/s]
 99%|| 78/79 [00:05<00:00, 26.13it/s]
100%|| 79/79 [00:05<00:00, 13.71it/s]
/s]
 67%|   | 53/79 [00:04<00:01, 22.23it/s]
 71%|   | 56/79 [00:04<00:00, 23.12it/s]
 75%|  | 59/79 [00:04<00:00, 23.54it/s]
 78%|  | 62/79 [00:05<00:00, 23.67it/s]
 82%| | 65/79 [00:05<00:00, 23.99it/s]
 86%| | 68/79 [00:05<00:00, 24.40it/s]
 90%| | 71/79 [00:05<00:00, 24.47it/s]
 94%|| 74/79 [00:05<00:00, 25.50it/s]
 97%|| 77/79 [00:05<00:00, 26.30it/s]
100%|| 79/79 [00:05<00:00, 13.60it/s]
/s]
 67%|   | 53/79 [00:04<00:01, 22.63it/s]
 71%|   | 56/79 [00:04<00:00, 23.27it/s]
 75%|  | 59/79 [00:04<00:00, 23.80it/s]
 78%|  | 62/79 [00:05<00:00, 23.98it/s]
 82%| | 65/79 [00:05<00:00, 24.23it/s]
 86%| | 68/79 [00:05<00:00, 24.19it/s]
 90%| | 71/79 [00:05<00:00, 24.36it/s]
 94%|| 74/79 [00:05<00:00, 25.27it/s]
 97%|| 77/79 [00:05<00:00, 26.04it/s]
100%|| 79/79 [00:05<00:00, 13.67it/s]
, 22.19it/s]
 70%|   | 55/79 [00:04<00:01, 22.98it/s]
 73%|  | 58/79 [00:04<00:00, 23.68it/s]
 77%|  | 61/79 [00:05<00:00, 24.39it/s]
 81%|  | 64/79 [00:05<00:00, 24.45it/s]
 85%| | 67/79 [00:05<00:00, 24.54it/s]
 89%| | 70/79 [00:05<00:00, 24.49it/s]
 92%|| 73/79 [00:05<00:00, 25.18it/s]
 96%|| 76/79 [00:05<00:00, 25.81it/s]
100%|| 79/79 [00:05<00:00, 26.91it/s]
, 21.98it/s]
 70%|   | 55/79 [00:04<00:01, 23.01it/s]
 73%|  | 58/79 [00:04<00:00, 23.61it/s]
 77%|  | 61/79 [00:05<00:00, 24.05it/s]
 81%|  | 64/79 [00:05<00:00, 24.47it/s]
 85%| | 67/79 [00:05<00:00, 24.49it/s]
 89%| | 70/79 [00:05<00:00, 24.73it/s]
 92%|| 73/79 [00:05<00:00, 25.21it/s]
 96%|| 76/79 [00:05<00:00, 26.12it/s]
100%|| 79/79 [00:05<00:00, 13.67it/s]
, 21.82it/s]
 70%|   | 55/79 [00:04<00:01, 22.78it/s]
 73%|  | 58/79 [00:04<00:00, 23.44it/s]
 77%|  | 61/79 [00:05<00:00, 24.13it/s]
 81%|  | 64/79 [00:05<00:00, 24.41it/s]
 85%| | 67/79 [00:05<00:00, 24.56it/s]
 89%| | 70/79 [00:05<00:00, 24.59it/s]
 92%|| 73/79 [00:05<00:00, 25.21it/s]
 96%|| 76/79 [00:05<00:00, 26.10it/s]
100%|| 79/79 [00:05<00:00, 27.00it/s]
, 21.51it/s]
 70%|   | 55/79 [00:04<00:01, 22.55it/s]
 73%|  | 58/79 [00:04<00:00, 23.15it/s]
 77%|  | 61/79 [00:05<00:00, 23.81it/s]
 81%|  | 64/79 [00:05<00:00, 24.01it/s]
 85%| | 67/79 [00:05<00:00, 24.22it/s]
 89%| | 70/79 [00:05<00:00, 24.64it/s]
 92%|| 73/79 [00:05<00:00, 25.13it/s]
 96%|| 76/79 [00:05<00:00, 26.04it/s]
100%|| 79/79 [00:05<00:00, 27.05it/s]
, 21.62it/s]
 70%|   | 55/79 [00:04<00:01, 22.52it/s]
 73%|  | 58/79 [00:04<00:00, 23.18it/s]
 77%|  | 61/79 [00:05<00:00, 23.79it/s]
 81%|  | 64/79 [00:05<00:00, 24.27it/s]
 85%| | 67/79 [00:05<00:00, 24.66it/s]
 89%| | 70/79 [00:05<00:00, 24.89it/s]
 92%|| 73/79 [00:05<00:00, 24.61it/s]
 96%|| 76/79 [00:05<00:00, 25.59it/s]
100%|| 79/79 [00:05<00:00, 26.64it/s]
, 21.34it/s]
 70%|   | 55/79 [00:04<00:01, 22.21it/s]
 73%|  | 58/79 [00:04<00:00, 22.91it/s]
 77%|  | 61/79 [00:05<00:00, 22.93it/s]
 81%|  | 64/79 [00:05<00:00, 23.53it/s]
 85%| | 67/79 [00:05<00:00, 23.77it/s]
 89%| | 70/79 [00:05<00:00, 23.90it/s]
 92%|| 73/79 [00:05<00:00, 24.36it/s]
 96%|| 76/79 [00:05<00:00, 25.18it/s]
100%|| 79/79 [00:05<00:00, 26.16it/s]
, 21.01it/s]
 70%|   | 55/79 [00:04<00:01, 21.88it/s]
 73%|  | 58/79 [00:04<00:00, 22.56it/s]
 77%|  | 61/79 [00:05<00:00, 23.18it/s]
 81%|  | 64/79 [00:05<00:00, 23.59it/s]
 85%| | 67/79 [00:05<00:00, 24.12it/s]
 89%| | 70/79 [00:05<00:00, 24.59it/s]
 92%|| 73/79 [00:05<00:00, 25.09it/s]
 96%|| 76/79 [00:05<00:00, 26.12it/s]
100%|| 79/79 [00:05<00:00, 27.16it/s]
, 21.38it/s]
 70%|   | 55/79 [00:04<00:01, 22.49it/s]
 73%|  | 58/79 [00:04<00:00, 23.23it/s]
 77%|  | 61/79 [00:05<00:00, 23.70it/s]
 81%|  | 64/79 [00:05<00:00, 24.30it/s]
 85%| | 67/79 [00:05<00:00, 24.62it/s]
 89%| | 70/79 [00:05<00:00, 24.90it/s]
 92%|| 73/79 [00:05<00:00, 24.97it/s]
 96%|| 76/79 [00:05<00:00, 25.78it/s]
100%|| 79/79 [00:05<00:00, 26.45it/s]
/s]
 67%|   | 53/79 [00:04<00:01, 23.00it/s]
 71%|   | 56/79 [00:04<00:00, 23.68it/s]
 75%|  | 59/79 [00:05<00:00, 24.25it/s]
 78%|  | 62/79 [00:05<00:00, 24.65it/s]
 82%| | 65/79 [00:05<00:00, 24.46it/s]
 86%| | 68/79 [00:05<00:00, 24.61it/s]
 90%| | 71/79 [00:05<00:00, 24.65it/s]
 94%|| 74/79 [00:05<00:00, 25.54it/s]
 97%|| 77/79 [00:05<00:00, 26.22it/s]
100%|| 79/79 [00:05<00:00, 13.53it/s]
, 21.60it/s]
 70%|   | 55/79 [00:04<00:01, 22.75it/s]
 73%|  | 58/79 [00:04<00:00, 23.33it/s]
 77%|  | 61/79 [00:05<00:00, 23.82it/s]
 81%|  | 64/79 [00:05<00:00, 24.19it/s]
 85%| | 67/79 [00:05<00:00, 24.49it/s]
 89%| | 70/79 [00:05<00:00, 24.41it/s]
 92%|| 73/79 [00:05<00:00, 25.15it/s]
 96%|| 76/79 [00:05<00:00, 26.07it/s]
100%|| 79/79 [00:05<00:00, 27.08it/s]
/s]
 67%|   | 53/79 [00:04<00:01, 22.36it/s]
 71%|   | 56/79 [00:04<00:00, 23.24it/s]
 75%|  | 59/79 [00:05<00:00, 23.46it/s]
 78%|  | 62/79 [00:05<00:00, 23.57it/s]
 82%| | 65/79 [00:05<00:00, 23.69it/s]
 86%| | 68/79 [00:05<00:00, 24.11it/s]
 90%| | 71/79 [00:05<00:00, 24.21it/s]
 94%|| 74/79 [00:05<00:00, 25.20it/s]
 97%|| 77/79 [00:05<00:00, 26.04it/s]
100%|| 79/79 [00:05<00:00, 13.49it/s]
74it/s]
 68%|   | 54/79 [00:04<00:01, 21.52it/s]
 72%|  | 57/79 [00:04<00:00, 22.48it/s]
 76%|  | 60/79 [00:05<00:00, 23.10it/s]
 80%|  | 63/79 [00:05<00:00, 23.34it/s]
 84%| | 66/79 [00:05<00:00, 23.65it/s]
 87%| | 69/79 [00:05<00:00, 24.03it/s]
 91%| | 72/79 [00:05<00:00, 24.28it/s]
 95%|| 75/79 [00:05<00:00, 25.08it/s]
 99%|| 78/79 [00:05<00:00, 25.69it/s]
100%|| 79/79 [00:05<00:00, 13.58it/s]
, 21.90it/s]
 70%|   | 55/79 [00:04<00:01, 22.65it/s]
 73%|  | 58/79 [00:04<00:00, 23.55it/s]
 77%|  | 61/79 [00:05<00:00, 24.07it/s]
 81%|  | 64/79 [00:05<00:00, 24.76it/s]
 85%| | 67/79 [00:05<00:00, 24.70it/s]
 89%| | 70/79 [00:05<00:00, 24.93it/s]
 92%|| 73/79 [00:05<00:00, 25.65it/s]
 96%|| 76/79 [00:05<00:00, 26.42it/s]
100%|| 79/79 [00:05<00:00, 27.30it/s]
, 21.16it/s]
 70%|   | 55/79 [00:04<00:01, 21.99it/s]
 73%|  | 58/79 [00:04<00:00, 22.77it/s]
 77%|  | 61/79 [00:05<00:00, 23.39it/s]
 81%|  | 64/79 [00:05<00:00, 23.62it/s]
 85%| | 67/79 [00:05<00:00, 23.85it/s]
 89%| | 70/79 [00:05<00:00, 24.16it/s]
 92%|| 73/79 [00:05<00:00, 24.48it/s]
 96%|| 76/79 [00:05<00:00, 25.29it/s]
100%|| 79/79 [00:05<00:00, 26.18it/s]
, 21.40it/s]
 70%|   | 55/79 [00:04<00:01, 22.13it/s]
 73%|  | 58/79 [00:04<00:00, 22.76it/s]
 77%|  | 61/79 [00:05<00:00, 23.34it/s]
 81%|  | 64/79 [00:05<00:00, 23.75it/s]
 85%| | 67/79 [00:05<00:00, 23.96it/s]
 89%| | 70/79 [00:05<00:00, 24.04it/s]
 92%|| 73/79 [00:05<00:00, 24.81it/s]
 96%|| 76/79 [00:05<00:00, 25.50it/s]
100%|| 79/79 [00:05<00:00, 26.37it/s]
, 21.09it/s]
 70%|   | 55/79 [00:04<00:01, 22.10it/s]
 73%|  | 58/79 [00:05<00:00, 22.84it/s]
 77%|  | 61/79 [00:05<00:00, 23.47it/s]
 81%|  | 64/79 [00:05<00:00, 23.92it/s]
 85%| | 67/79 [00:05<00:00, 24.24it/s]
 89%| | 70/79 [00:05<00:00, 24.32it/s]
 92%|| 73/79 [00:05<00:00, 24.53it/s]
 96%|| 76/79 [00:05<00:00, 25.26it/s]
100%|| 79/79 [00:05<00:00, 26.09it/s]
, 20.79it/s]
 70%|   | 55/79 [00:04<00:01, 21.35it/s]
 73%|  | 58/79 [00:05<00:00, 21.81it/s]
 77%|  | 61/79 [00:05<00:00, 22.46it/s]
 81%|  | 64/79 [00:05<00:00, 22.80it/s]
 85%| | 67/79 [00:05<00:00, 23.43it/s]
 89%| | 70/79 [00:05<00:00, 23.83it/s]
 92%|| 73/79 [00:05<00:00, 24.37it/s]
 96%|| 76/79 [00:05<00:00, 25.21it/s]
100%|| 79/79 [00:05<00:00, 26.25it/s]
2020-06-23 16:47:26,341 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:05.937066 (0.03799722290039063 s / img per device, on 32 devices)
2020-06-23 16:47:26,359 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 16:47:26,359 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 16:47:26,378 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592956052777, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 16, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592956052778, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 16}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 16:47:33,341 maskrcnn_benchmark.trainer INFO: eta: 0:54:41  iter: 13760  loss: 0.5174 (0.6940)  loss_classifier: 0.1581 (0.2483)  loss_box_reg: 0.0949 (0.1126)  loss_mask: 0.2480 (0.2812)  loss_objectness: 0.0145 (0.0325)  loss_rpn_box_reg: 0.0091 (0.0193)  time: 0.1091 (0.1251)  data: 0.0015 (0.0175)  lr: 0.001600  max mem: 5193
2020-06-23 16:47:35,525 maskrcnn_benchmark.trainer INFO: eta: 0:54:38  iter: 13780  loss: 0.5926 (0.6938)  loss_classifier: 0.1675 (0.2482)  loss_box_reg: 0.1015 (0.1126)  loss_mask: 0.2579 (0.2812)  loss_objectness: 0.0167 (0.0325)  loss_rpn_box_reg: 0.0069 (0.0193)  time: 0.1096 (0.1250)  data: 0.0015 (0.0175)  lr: 0.001600  max mem: 5193
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 16:47:37,710 maskrcnn_benchmark.trainer INFO: eta: 0:54:35  iter: 13800  loss: 0.5140 (0.6935)  loss_classifier: 0.1740 (0.2481)  loss_box_reg: 0.0741 (0.1126)  loss_mask: 0.2373 (0.2812)  loss_objectness: 0.0103 (0.0325)  loss_rpn_box_reg: 0.0065 (0.0192)  time: 0.1090 (0.1250)  data: 0.0015 (0.0175)  lr: 0.001600  max mem: 5193
DONE (t=0.54s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.37s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37813
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.59467
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.41050
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21928
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.40767
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49158
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.31299
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.49212
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51584
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.32815
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.54838
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.64872
2020-06-23 16:47:39,876 maskrcnn_benchmark.trainer INFO: eta: 0:54:32  iter: 13820  loss: 0.4973 (0.6933)  loss_classifier: 0.1645 (0.2480)  loss_box_reg: 0.0721 (0.1125)  loss_mask: 0.2208 (0.2811)  loss_objectness: 0.0091 (0.0325)  loss_rpn_box_reg: 0.0044 (0.0192)  time: 0.1080 (0.1250)  data: 0.0016 (0.0174)  lr: 0.001600  max mem: 5193
2020-06-23 16:47:42,064 maskrcnn_benchmark.trainer INFO: eta: 0:54:29  iter: 13840  loss: 0.5005 (0.6931)  loss_classifier: 0.1580 (0.2479)  loss_box_reg: 0.0821 (0.1125)  loss_mask: 0.2425 (0.2810)  loss_objectness: 0.0209 (0.0325)  loss_rpn_box_reg: 0.0089 (0.0192)  time: 0.1096 (0.1250)  data: 0.0016 (0.0174)  lr: 0.001600  max mem: 5193
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 16:47:44,231 maskrcnn_benchmark.trainer INFO: eta: 0:54:25  iter: 13860  loss: 0.4814 (0.6928)  loss_classifier: 0.1566 (0.2477)  loss_box_reg: 0.0730 (0.1125)  loss_mask: 0.2247 (0.2809)  loss_objectness: 0.0110 (0.0325)  loss_rpn_box_reg: 0.0108 (0.0192)  time: 0.1078 (0.1249)  data: 0.0015 (0.0174)  lr: 0.001600  max mem: 5193
DONE (t=1.38s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 16:47:46,395 maskrcnn_benchmark.trainer INFO: eta: 0:54:22  iter: 13880  loss: 0.5807 (0.6927)  loss_classifier: 0.1819 (0.2476)  loss_box_reg: 0.0865 (0.1124)  loss_mask: 0.2631 (0.2809)  loss_objectness: 0.0208 (0.0324)  loss_rpn_box_reg: 0.0080 (0.0192)  time: 0.1075 (0.1249)  data: 0.0016 (0.0174)  lr: 0.001600  max mem: 5193
DONE (t=2.21s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.34304
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.56106
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.36478
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15575
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36822
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.50991
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29380
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.45123
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.47076
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27332
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50426
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62446
2020-06-23 16:47:48,058 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3781331618349081, segm mAP: 0.34303770725264393
:::MLLOG {"namespace": "", "time_ms": 1592956068058, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.3781331618349081, "SEGM": 0.34303770725264393}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 15}}
:::MLLOG {"namespace": "", "time_ms": 1592956068058, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 15}}
2020-06-23 16:47:48,058 maskrcnn_benchmark.trainer INFO: Target mAP reached, exiting...
&&&& MLPERF METRIC THROUGHPUT=1024.6018 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.6364 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.5771 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.6876 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.8706 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.4720 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.5446 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.5109 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.4270 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.5162 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.5808 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.6309 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.5570 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.4243 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.5865 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.5066 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.7801 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.6088 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.8018 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.3656 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.4482 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.5573 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.5474 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.5018 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.5599 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.6019 iterations / s
2020-06-23 16:47:48,208 maskrcnn_benchmark.trainer INFO: Total training time: 0:28:55.648466 (0.0434 s / it)
&&&& MLPERF METRIC THROUGHPUT=1024.7984 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.6472 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.8308 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.5987 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.7192 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1024.6982 iterations / s
&&&& MLPERF METRIC TIME= 1774.0426654815674
&&&& MLPERF METRIC TIME= 1773.9215562343597
&&&& MLPERF METRIC TIME= 1774.0209996700287
&&&& MLPERF METRIC TIME= 1773.98069190979
&&&& MLPERF METRIC TIME= 1773.924766778946
&&&& MLPERF METRIC TIME= 1774.0737962722778
&&&& MLPERF METRIC TIME= 1773.8452343940735
&&&& MLPERF METRIC TIME= 1774.0104200839996
&&&& MLPERF METRIC TIME= 1773.8708183765411
&&&& MLPERF METRIC TIME= 1773.9273743629456
&&&& MLPERF METRIC TIME= 1773.8918459415436
&&&& MLPERF METRIC TIME= 1774.2370760440826
&&&& MLPERF METRIC TIME= 1774.213425397873
&&&& MLPERF METRIC TIME= 1773.9323816299438
&&&& MLPERF METRIC TIME= 1773.8550162315369
&&&& MLPERF METRIC TIME= 1774.19721865654
&&&& MLPERF METRIC TIME= 1773.897121667862
&&&& MLPERF METRIC TIME= 1773.8609297275543
&&&& MLPERF METRIC TIME= 1773.942479133606
&&&& MLPERF METRIC TIME= 1773.953111410141
&&&& MLPERF METRIC TIME= 1773.9032216072083
&&&& MLPERF METRIC TIME= 1773.9129374027252
&&&& MLPERF METRIC TIME= 1773.9119658470154
&&&& MLPERF METRIC TIME= 1774.115992307663
&&&& MLPERF METRIC TIME= 1773.7908058166504
&&&& MLPERF METRIC TIME= 1773.9366536140442
&&&& MLPERF METRIC TIME= 1773.8452575206757
&&&& MLPERF METRIC TIME= 1773.7934799194336
&&&& MLPERF METRIC TIME= 1773.8299882411957
&&&& MLPERF METRIC TIME= 1773.814032793045
&&&& MLPERF METRIC TIME= 1773.8167505264282
:::MLLOG {"namespace": "", "time_ms": 1592956070713, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 360, "status": "success"}}
&&&& MLPERF METRIC TIME= 1774.483107328415
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ ret_code=0
+ set +x
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
ENDING TIMING RUN AT 2020-06-23 04:47:54 PM
RESULT,OBJECT_DETECTION,,1780,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:54 PM
RESULT,OBJECT_DETECTION,,1780,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:54 PM
RESULT,OBJECT_DETECTION,,1780,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:54 PM
RESULT,OBJECT_DETECTION,,1780,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:55 PM
RESULT,OBJECT_DETECTION,,1781,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:56 PM
RESULT,OBJECT_DETECTION,,1782,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:56 PM
RESULT,OBJECT_DETECTION,,1782,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:56 PM
RESULT,OBJECT_DETECTION,,1782,nvidia,2020-06-23 04:18:14 PM
ENDING TIMING RUN AT 2020-06-23 04:47:56 PM
RESULT,OBJECT_DETECTION,,1782,nvidia,2020-06-23 04:18:14 PM
