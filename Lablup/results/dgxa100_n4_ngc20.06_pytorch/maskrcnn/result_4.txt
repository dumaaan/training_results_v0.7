+ echo 'Beginning trial 1 of 5'
Beginning trial 1 of 5
+ srun --ntasks=4 --container-name=object_detection python -c '
from mlperf_logging.mllog import constants
from maskrcnn_benchmark.utils.mlperf_logger import mlperf_submission_log
mlperf_submission_log(constants.MASKRCNN)'
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
:::MLLOG {"namespace": "", "time_ms": 1592950917994, "event_type": "POINT_IN_TIME", "key": "submission_benchmark", "value": "maskrcnn", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 73}}
:::MLLOG {"namespace": "", "time_ms": 1592950918032, "event_type": "POINT_IN_TIME", "key": "submission_org", "value": "NVIDIA", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 78}}
:::MLLOG {"namespace": "", "time_ms": 1592950918032, "event_type": "POINT_IN_TIME", "key": "submission_division", "value": "closed", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 82}}
:::MLLOG {"namespace": "", "time_ms": 1592950918033, "event_type": "POINT_IN_TIME", "key": "submission_status", "value": "onprem", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 86}}
:::MLLOG {"namespace": "", "time_ms": 1592950918033, "event_type": "POINT_IN_TIME", "key": "submission_platform", "value": "4xNVIDIA DGX A100", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 90}}
+ '[' 1 -eq 1 ']'
+ srun --ntasks=4 bash -c 'echo -n '\''Clearing cache on '\'' && hostname && sync && sudo /sbin/sysctl vm.drop_caches=3'
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
Clearing cache on luna-0211
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
Clearing cache on luna-0212
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
Clearing cache on luna-0210
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
Clearing cache on luna-0209
vm.drop_caches = 3
vm.drop_caches = 3
vm.drop_caches = 3
vm.drop_caches = 3
+ srun --ntasks=4 --container-name=object_detection python -c '
from mlperf_logging.mllog import constants
from maskrcnn_benchmark.utils.mlperf_logger import log_event
log_event(key=constants.CACHE_CLEAR, value=True, stack_offset=1)'
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
:::MLLOG {"namespace": "", "time_ms": 1592950923301, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
:::MLLOG {"namespace": "", "time_ms": 1592950923313, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
:::MLLOG {"namespace": "", "time_ms": 1592950923315, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
:::MLLOG {"namespace": "", "time_ms": 1592950923570, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
+ srun --mpi=none --ntasks=32 --ntasks-per-node=8 --container-name=object_detection --container-mounts=/raid/datasets/coco/coco-2017:/data,/lustre/fsw/mlperf-ci/14126174/results:/results ./run_and_time.sh
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 6 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
++ ls /data
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
+ echo 'running benchmark'
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 4 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
++ ls /data
+ '[' -n 0 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
++ ls /data
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
+ echo coco2017
coco2017
+ declare -a CMD
++ ls /data
+ '[' -n 3 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 5 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
coco2017
+ echo coco2017
+ declare -a CMD
+ echo coco2017
coco2017
+ declare -a CMD
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ '[' -n 7 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
++ ls /data
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 1 ']'
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ '[' -n 7 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
++ ls /data
+ '[' -n 5 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
++ ls /data
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ echo 'running benchmark'
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 6 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 2 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
coco2017
+ echo coco2017
+ declare -a CMD
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ '[' -n 4 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
++ ls /data
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 3 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 0 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 7 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
+ ln -sTf /data/coco2017 /coco
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
++ ls /data
++ ls /data
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 4 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 5 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 2 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ echo coco2017
+ ln -sTf /data/coco2017 /coco
coco2017
+ declare -a CMD
+ '[' -n 0 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
++ ls /data
++ ls /data
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 1 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
++ ls /data
+ echo coco2017
+ declare -a CMD
+ '[' -n 3 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 6 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 7 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
+ echo 'running benchmark'
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 0 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
+ echo 'running benchmark'
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ '[' -n 2 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 1 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 2 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ '[' -n 1 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 03:22:05 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
++ ls /data
++ ls /data
coco2017
+ echo coco2017
++ ls /data
+ declare -a CMD
coco2017
+ echo coco2017
coco2017
+ echo coco2017
+ declare -a CMD
+ declare -a CMD
+ '[' -n 3 ']'
+ '[' 32 -gt 4 ']'
+ '[' -n 5 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ '[' -n 4 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 6 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
:::MLLOG {"namespace": "", "time_ms": 1592950927218, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927245, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927233, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927270, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927299, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927300, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927308, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927320, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927318, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927310, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927374, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927412, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927420, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927420, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927420, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927420, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927424, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927456, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927484, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927492, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927491, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927494, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927530, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927536, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927535, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927544, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927546, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927558, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927571, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927584, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927587, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950927587, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592950936120, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1052387904, "metadata": {"file": "tools/train_mlperf.py", "lineno": 318}}
2020-06-23 15:22:16,128 maskrcnn_benchmark INFO: Using 32 GPUs
2020-06-23 15:22:16,128 maskrcnn_benchmark INFO: Namespace(config_file='configs/e2e_mask_rcnn_R_50_FPN_1x.yaml', distributed=True, local_rank=0, opts=['DTYPE', 'float16', 'PATHS_CATALOG', 'maskrcnn_benchmark/config/paths_catalog_dbcluster.py', 'MODEL.WEIGHT', '/coco/models/R-50.pkl', 'DISABLE_REDUCED_LOGGING', 'True', 'SOLVER.BASE_LR', '0.16', 'SOLVER.MAX_ITER', '40000', 'SOLVER.WARMUP_FACTOR', '0.000256', 'SOLVER.WARMUP_ITERS', '625', 'SOLVER.WARMUP_METHOD', 'mlperf_linear', 'SOLVER.STEPS', '(9000,12000)', 'SOLVER.IMS_PER_BATCH', '128', 'TEST.IMS_PER_BATCH', '64', 'MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN', '4000', 'NHWC', 'True'], seed=1052387904)
2020-06-23 15:22:16,128 maskrcnn_benchmark INFO: Worker 0: Setting seed 443891839
2020-06-23 15:22:16,128 maskrcnn_benchmark INFO: Collecting env info (might take some time)
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
2020-06-23 15:22:26,659 maskrcnn_benchmark INFO:
PyTorch version: 1.6.0a0+9907a3e
Is debug build: No
CUDA used to build PyTorch: 11.0

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.14.0

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration:
GPU 0: A100-SXM4-40GB
GPU 1: A100-SXM4-40GB
GPU 2: A100-SXM4-40GB
GPU 3: A100-SXM4-40GB
GPU 4: A100-SXM4-40GB
GPU 5: A100-SXM4-40GB
GPU 6: A100-SXM4-40GB
GPU 7: A100-SXM4-40GB

Nvidia driver version: 450.36.06
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_adv_infer.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_adv_train.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_cnn_infer.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_cnn_train.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_ops_infer.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_ops_train.so.8.0.1

Versions of relevant libraries:
[pip] msgpack-numpy==0.4.3.2
[pip] numpy==1.17.4
[pip] pytorch-transformers==1.1.0
[pip] torch==1.6.0a0+9907a3e
[pip] torchtext==0.6.0
[pip] torchvision==0.7.0a0
[conda] magma-cuda110             2.5.2                         5    local
[conda] mkl                       2019.1                      144
[conda] mkl-include               2019.1                      144
[conda] msgpack-numpy             0.4.3.2                  py36_0
[conda] nomkl                     3.0                           0
[conda] numpy                     1.17.4           py36hd5be1e1_0
[conda] numpy-base                1.17.4           py36h2f8d375_0
[conda] pytorch-transformers      1.1.0                    pypi_0    pypi
[conda] torch                     1.6.0a0+9907a3e          pypi_0    pypi
[conda] torchtext                 0.6.0                    pypi_0    pypi
[conda] torchvision               0.7.0a0                  pypi_0    pypi
        Pillow (7.1.1)
2020-06-23 15:22:26,659 maskrcnn_benchmark INFO: Loaded configuration file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml
2020-06-23 15:22:26,660 maskrcnn_benchmark INFO:
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "catalog://ImageNetPretrained/MSRA/R-50"
  BACKBONE:
    CONV_BODY: "R-50-FPN"
    OUT_CHANNELS: 256
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
  ROI_MASK_HEAD:
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    FEATURE_EXTRACTOR: "MaskRCNNFPNFeatureExtractor"
    PREDICTOR: "MaskRCNNC4Predictor"
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  MASK_ON: True
DATASETS:
  TRAIN: ("coco_2017_train",)
  TEST: ("coco_2017_val",)
DATALOADER:
  SIZE_DIVISIBILITY: 32
SOLVER:
  BASE_LR: 0.02
  WEIGHT_DECAY: 0.0001
  STEPS: (60000, 80000)
  MAX_ITER: 90000

2020-06-23 15:22:26,660 maskrcnn_benchmark INFO: Running with config:
AMP_VERBOSE: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 4
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('coco_2017_val',)
  TRAIN: ('coco_2017_train',)
DISABLE_REDUCED_LOGGING: True
DTYPE: float16
INPUT:
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (800,)
  PIXEL_MEAN: [102.9801, 115.9465, 122.7717]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MLPERF:
  MIN_BBOX_MAP: 0.377
  MIN_SEGM_MAP: 0.339
MODEL:
  BACKBONE:
    CONV_BODY: R-50-FPN
    FREEZE_CONV_BODY_AT: 2
    OUT_CHANNELS: 256
    USE_GN: False
  CLS_AGNOSTIC_BBOX_REG: False
  DEVICE: cuda
  FPN:
    USE_GN: False
    USE_RELU: False
  GROUP_NORM:
    DIM_PER_GP: -1
    EPSILON: 1e-05
    NUM_GROUPS: 32
  KEYPOINT_ON: False
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    NUM_GROUPS: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 64
  RETINANET:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDES: (8, 16, 32, 64, 128)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BBOX_REG_BETA: 0.11
    BBOX_REG_WEIGHT: 4.0
    BG_IOU_THRESHOLD: 0.4
    FG_IOU_THRESHOLD: 0.5
    INFERENCE_TH: 0.05
    LOSS_ALPHA: 0.25
    LOSS_GAMMA: 2.0
    NMS_TH: 0.4
    NUM_CLASSES: 81
    NUM_CONVS: 4
    OCTAVE: 2.0
    PRE_NMS_TOP_N: 1000
    PRIOR_PROB: 0.01
    SCALES_PER_OCTAVE: 3
    STRADDLE_THRESH: 0
    USE_C5: True
  RETINANET_ON: False
  ROI_BOX_HEAD:
    CONV_HEAD_DIM: 256
    DILATION: 1
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 81
    NUM_STACKED_CONVS: 4
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
    USE_GN: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_KEYPOINT_HEAD:
    CONV_LAYERS: (512, 512, 512, 512, 512, 512, 512, 512)
    FEATURE_EXTRACTOR: KeypointRCNNFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_SCALES: (0.0625,)
    PREDICTOR: KeypointRCNNPredictor
    RESOLUTION: 14
    SHARE_BOX_FEATURE_EXTRACTOR: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    DILATION: 1
    FEATURE_EXTRACTOR: MaskRCNNFPNFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
    USE_GN: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 4000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 2000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: /coco/models/R-50.pkl
NHWC: True
OUTPUT_DIR: .
PATHS_CATALOG: maskrcnn_benchmark/config/paths_catalog_dbcluster.py
PER_EPOCH_EVAL: True
SAVE_CHECKPOINTS: False
SOLVER:
  BASE_LR: 0.16
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 2500
  GAMMA: 0.1
  IMS_PER_BATCH: 128
  MAX_ITER: 40000
  MOMENTUM: 0.9
  STEPS: (9000, 12000)
  WARMUP_FACTOR: 0.000256
  WARMUP_ITERS: 625
  WARMUP_METHOD: mlperf_linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  DETECTIONS_PER_IMG: 100
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 64
:::MLLOG {"namespace": "", "time_ms": 1592950946662, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 128, "metadata": {"file": "tools/train_mlperf.py", "lineno": 156}}
:::MLLOG {"namespace": "", "time_ms": 1592950946662, "event_type": "POINT_IN_TIME", "key": "num_image_candidates", "value": 4000, "metadata": {"file": "tools/train_mlperf.py", "lineno": 157}}
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
:::MLLOG {"namespace": "", "time_ms": 1592950952077, "event_type": "POINT_IN_TIME", "key": "opt_name", "value": "sgd_with_momentum", "metadata": {"file": "tools/train_mlperf.py", "lineno": 171}}
:::MLLOG {"namespace": "", "time_ms": 1592950952078, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.16, "metadata": {"file": "tools/train_mlperf.py", "lineno": 172}}
:::MLLOG {"namespace": "", "time_ms": 1592950952078, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 625, "metadata": {"file": "tools/train_mlperf.py", "lineno": 173}}
:::MLLOG {"namespace": "", "time_ms": 1592950952078, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0.000256, "metadata": {"file": "tools/train_mlperf.py", "lineno": 174}}
:::MLLOG {"namespace": "", "time_ms": 1592950952078, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_factor", "value": 0.1, "metadata": {"file": "tools/train_mlperf.py", "lineno": 175}}
:::MLLOG {"namespace": "", "time_ms": 1592950952078, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [9000, 12000], "metadata": {"file": "tools/train_mlperf.py", "lineno": 176}}
:::MLLOG {"namespace": "", "time_ms": 1592950952078, "event_type": "POINT_IN_TIME", "key": "min_image_size", "value": 800, "metadata": {"file": "tools/train_mlperf.py", "lineno": 177}}
:::MLLOG {"namespace": "", "time_ms": 1592950952078, "event_type": "POINT_IN_TIME", "key": "max_image_size", "value": 1333, "metadata": {"file": "tools/train_mlperf.py", "lineno": 178}}
2020-06-23 15:22:32,087 maskrcnn_benchmark.utils.checkpoint INFO: Loading checkpoint from /coco/models/R-50.pkl
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
2020-06-23 15:22:32,138 maskrcnn_benchmark.utils.c2_model_loading INFO: Remapping C2 weights
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: conv1_b              mapped name: conv1.bias
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: conv1_w              mapped name: conv1.weight
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: fc1000_b             mapped name: fc1000.bias
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: fc1000_w             mapped name: fc1000.weight
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_b     mapped name: layer1.0.downsample.0.bias
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_bn_b  mapped name: layer1.0.downsample.1.bias
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_bn_s  mapped name: layer1.0.downsample.1.weight
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_w     mapped name: layer1.0.downsample.0.weight
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_b    mapped name: layer1.0.conv1.bias
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_bn_b mapped name: layer1.0.bn1.bias
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_bn_s mapped name: layer1.0.bn1.weight
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_w    mapped name: layer1.0.conv1.weight
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_b    mapped name: layer1.0.conv2.bias
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_bn_b mapped name: layer1.0.bn2.bias
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_bn_s mapped name: layer1.0.bn2.weight
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_w    mapped name: layer1.0.conv2.weight
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_b    mapped name: layer1.0.conv3.bias
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_bn_b mapped name: layer1.0.bn3.bias
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_bn_s mapped name: layer1.0.bn3.weight
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_w    mapped name: layer1.0.conv3.weight
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_b    mapped name: layer1.1.conv1.bias
2020-06-23 15:22:32,139 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_bn_b mapped name: layer1.1.bn1.bias
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_bn_s mapped name: layer1.1.bn1.weight
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_w    mapped name: layer1.1.conv1.weight
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_b    mapped name: layer1.1.conv2.bias
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_bn_b mapped name: layer1.1.bn2.bias
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_bn_s mapped name: layer1.1.bn2.weight
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_w    mapped name: layer1.1.conv2.weight
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_b    mapped name: layer1.1.conv3.bias
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_bn_b mapped name: layer1.1.bn3.bias
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_bn_s mapped name: layer1.1.bn3.weight
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_w    mapped name: layer1.1.conv3.weight
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_b    mapped name: layer1.2.conv1.bias
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_bn_b mapped name: layer1.2.bn1.bias
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_bn_s mapped name: layer1.2.bn1.weight
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_w    mapped name: layer1.2.conv1.weight
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_b    mapped name: layer1.2.conv2.bias
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_bn_b mapped name: layer1.2.bn2.bias
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_bn_s mapped name: layer1.2.bn2.weight
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_w    mapped name: layer1.2.conv2.weight
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_b    mapped name: layer1.2.conv3.bias
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_bn_b mapped name: layer1.2.bn3.bias
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_bn_s mapped name: layer1.2.bn3.weight
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_w    mapped name: layer1.2.conv3.weight
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_b     mapped name: layer2.0.downsample.0.bias
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_bn_b  mapped name: layer2.0.downsample.1.bias
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_bn_s  mapped name: layer2.0.downsample.1.weight
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_w     mapped name: layer2.0.downsample.0.weight
2020-06-23 15:22:32,140 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_b    mapped name: layer2.0.conv1.bias
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_bn_b mapped name: layer2.0.bn1.bias
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_bn_s mapped name: layer2.0.bn1.weight
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_w    mapped name: layer2.0.conv1.weight
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_b    mapped name: layer2.0.conv2.bias
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_bn_b mapped name: layer2.0.bn2.bias
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_bn_s mapped name: layer2.0.bn2.weight
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_w    mapped name: layer2.0.conv2.weight
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_b    mapped name: layer2.0.conv3.bias
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_bn_b mapped name: layer2.0.bn3.bias
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_bn_s mapped name: layer2.0.bn3.weight
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_w    mapped name: layer2.0.conv3.weight
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_b    mapped name: layer2.1.conv1.bias
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_bn_b mapped name: layer2.1.bn1.bias
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_bn_s mapped name: layer2.1.bn1.weight
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_w    mapped name: layer2.1.conv1.weight
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_b    mapped name: layer2.1.conv2.bias
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_bn_b mapped name: layer2.1.bn2.bias
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_bn_s mapped name: layer2.1.bn2.weight
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_w    mapped name: layer2.1.conv2.weight
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_b    mapped name: layer2.1.conv3.bias
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_bn_b mapped name: layer2.1.bn3.bias
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_bn_s mapped name: layer2.1.bn3.weight
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_w    mapped name: layer2.1.conv3.weight
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_b    mapped name: layer2.2.conv1.bias
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_bn_b mapped name: layer2.2.bn1.bias
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_bn_s mapped name: layer2.2.bn1.weight
2020-06-23 15:22:32,141 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_w    mapped name: layer2.2.conv1.weight
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_b    mapped name: layer2.2.conv2.bias
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_bn_b mapped name: layer2.2.bn2.bias
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_bn_s mapped name: layer2.2.bn2.weight
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_w    mapped name: layer2.2.conv2.weight
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_b    mapped name: layer2.2.conv3.bias
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_bn_b mapped name: layer2.2.bn3.bias
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_bn_s mapped name: layer2.2.bn3.weight
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_w    mapped name: layer2.2.conv3.weight
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_b    mapped name: layer2.3.conv1.bias
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_bn_b mapped name: layer2.3.bn1.bias
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_bn_s mapped name: layer2.3.bn1.weight
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_w    mapped name: layer2.3.conv1.weight
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_b    mapped name: layer2.3.conv2.bias
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_bn_b mapped name: layer2.3.bn2.bias
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_bn_s mapped name: layer2.3.bn2.weight
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_w    mapped name: layer2.3.conv2.weight
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_b    mapped name: layer2.3.conv3.bias
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_bn_b mapped name: layer2.3.bn3.bias
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_bn_s mapped name: layer2.3.bn3.weight
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_w    mapped name: layer2.3.conv3.weight
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_b     mapped name: layer3.0.downsample.0.bias
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_bn_b  mapped name: layer3.0.downsample.1.bias
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_bn_s  mapped name: layer3.0.downsample.1.weight
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_w     mapped name: layer3.0.downsample.0.weight
2020-06-23 15:22:32,142 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_b    mapped name: layer3.0.conv1.bias
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_bn_b mapped name: layer3.0.bn1.bias
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_bn_s mapped name: layer3.0.bn1.weight
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_w    mapped name: layer3.0.conv1.weight
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_b    mapped name: layer3.0.conv2.bias
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_bn_b mapped name: layer3.0.bn2.bias
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_bn_s mapped name: layer3.0.bn2.weight
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_w    mapped name: layer3.0.conv2.weight
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_b    mapped name: layer3.0.conv3.bias
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_bn_b mapped name: layer3.0.bn3.bias
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_bn_s mapped name: layer3.0.bn3.weight
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_w    mapped name: layer3.0.conv3.weight
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_b    mapped name: layer3.1.conv1.bias
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_bn_b mapped name: layer3.1.bn1.bias
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_bn_s mapped name: layer3.1.bn1.weight
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_w    mapped name: layer3.1.conv1.weight
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_b    mapped name: layer3.1.conv2.bias
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_bn_b mapped name: layer3.1.bn2.bias
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_bn_s mapped name: layer3.1.bn2.weight
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_w    mapped name: layer3.1.conv2.weight
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_b    mapped name: layer3.1.conv3.bias
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_bn_b mapped name: layer3.1.bn3.bias
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_bn_s mapped name: layer3.1.bn3.weight
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_w    mapped name: layer3.1.conv3.weight
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_b    mapped name: layer3.2.conv1.bias
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_bn_b mapped name: layer3.2.bn1.bias
2020-06-23 15:22:32,143 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_bn_s mapped name: layer3.2.bn1.weight
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_w    mapped name: layer3.2.conv1.weight
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_b    mapped name: layer3.2.conv2.bias
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_bn_b mapped name: layer3.2.bn2.bias
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_bn_s mapped name: layer3.2.bn2.weight
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_w    mapped name: layer3.2.conv2.weight
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_b    mapped name: layer3.2.conv3.bias
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_bn_b mapped name: layer3.2.bn3.bias
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_bn_s mapped name: layer3.2.bn3.weight
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_w    mapped name: layer3.2.conv3.weight
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_b    mapped name: layer3.3.conv1.bias
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_bn_b mapped name: layer3.3.bn1.bias
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_bn_s mapped name: layer3.3.bn1.weight
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_w    mapped name: layer3.3.conv1.weight
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_b    mapped name: layer3.3.conv2.bias
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_bn_b mapped name: layer3.3.bn2.bias
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_bn_s mapped name: layer3.3.bn2.weight
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_w    mapped name: layer3.3.conv2.weight
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_b    mapped name: layer3.3.conv3.bias
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_bn_b mapped name: layer3.3.bn3.bias
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_bn_s mapped name: layer3.3.bn3.weight
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_w    mapped name: layer3.3.conv3.weight
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_b    mapped name: layer3.4.conv1.bias
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_bn_b mapped name: layer3.4.bn1.bias
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_bn_s mapped name: layer3.4.bn1.weight
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_w    mapped name: layer3.4.conv1.weight
2020-06-23 15:22:32,144 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_b    mapped name: layer3.4.conv2.bias
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_bn_b mapped name: layer3.4.bn2.bias
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_bn_s mapped name: layer3.4.bn2.weight
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_w    mapped name: layer3.4.conv2.weight
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_b    mapped name: layer3.4.conv3.bias
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_bn_b mapped name: layer3.4.bn3.bias
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_bn_s mapped name: layer3.4.bn3.weight
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_w    mapped name: layer3.4.conv3.weight
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_b    mapped name: layer3.5.conv1.bias
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_bn_b mapped name: layer3.5.bn1.bias
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_bn_s mapped name: layer3.5.bn1.weight
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_w    mapped name: layer3.5.conv1.weight
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_b    mapped name: layer3.5.conv2.bias
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_bn_b mapped name: layer3.5.bn2.bias
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_bn_s mapped name: layer3.5.bn2.weight
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_w    mapped name: layer3.5.conv2.weight
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_b    mapped name: layer3.5.conv3.bias
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_bn_b mapped name: layer3.5.bn3.bias
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_bn_s mapped name: layer3.5.bn3.weight
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_w    mapped name: layer3.5.conv3.weight
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_b     mapped name: layer4.0.downsample.0.bias
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_bn_b  mapped name: layer4.0.downsample.1.bias
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_bn_s  mapped name: layer4.0.downsample.1.weight
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_w     mapped name: layer4.0.downsample.0.weight
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_b    mapped name: layer4.0.conv1.bias
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_bn_b mapped name: layer4.0.bn1.bias
2020-06-23 15:22:32,145 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_bn_s mapped name: layer4.0.bn1.weight
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_w    mapped name: layer4.0.conv1.weight
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_b    mapped name: layer4.0.conv2.bias
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_bn_b mapped name: layer4.0.bn2.bias
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_bn_s mapped name: layer4.0.bn2.weight
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_w    mapped name: layer4.0.conv2.weight
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_b    mapped name: layer4.0.conv3.bias
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_bn_b mapped name: layer4.0.bn3.bias
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_bn_s mapped name: layer4.0.bn3.weight
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_w    mapped name: layer4.0.conv3.weight
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_b    mapped name: layer4.1.conv1.bias
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_bn_b mapped name: layer4.1.bn1.bias
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_bn_s mapped name: layer4.1.bn1.weight
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_w    mapped name: layer4.1.conv1.weight
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_b    mapped name: layer4.1.conv2.bias
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_bn_b mapped name: layer4.1.bn2.bias
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_bn_s mapped name: layer4.1.bn2.weight
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_w    mapped name: layer4.1.conv2.weight
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_b    mapped name: layer4.1.conv3.bias
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_bn_b mapped name: layer4.1.bn3.bias
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_bn_s mapped name: layer4.1.bn3.weight
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_w    mapped name: layer4.1.conv3.weight
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_b    mapped name: layer4.2.conv1.bias
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_bn_b mapped name: layer4.2.bn1.bias
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_bn_s mapped name: layer4.2.bn1.weight
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_w    mapped name: layer4.2.conv1.weight
2020-06-23 15:22:32,146 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_b    mapped name: layer4.2.conv2.bias
2020-06-23 15:22:32,147 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_bn_b mapped name: layer4.2.bn2.bias
2020-06-23 15:22:32,147 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_bn_s mapped name: layer4.2.bn2.weight
2020-06-23 15:22:32,147 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_w    mapped name: layer4.2.conv2.weight
2020-06-23 15:22:32,147 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_b    mapped name: layer4.2.conv3.bias
2020-06-23 15:22:32,147 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_bn_b mapped name: layer4.2.bn3.bias
2020-06-23 15:22:32,147 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_bn_s mapped name: layer4.2.bn3.weight
2020-06-23 15:22:32,147 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_w    mapped name: layer4.2.conv3.weight
2020-06-23 15:22:32,147 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res_conv1_bn_b       mapped name: bn1.bias
2020-06-23 15:22:32,147 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res_conv1_bn_s       mapped name: bn1.weight
2020-06-23 15:22:32,160 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn1.bias                   loaded from layer1.0.bn1.bias            of shape (64,)
2020-06-23 15:22:32,160 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn1.weight                 loaded from layer1.0.bn1.weight          of shape (64,)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn2.bias                   loaded from layer1.0.bn2.bias            of shape (64,)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn2.weight                 loaded from layer1.0.bn2.weight          of shape (64,)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn3.bias                   loaded from layer1.0.bn3.bias            of shape (256,)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn3.weight                 loaded from layer1.0.bn3.weight          of shape (256,)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.conv1.weight               loaded from layer1.0.conv1.weight        of shape (64, 64, 1, 1)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.conv2.weight               loaded from layer1.0.conv2.weight        of shape (64, 64, 3, 3)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.conv3.weight               loaded from layer1.0.conv3.weight        of shape (256, 64, 1, 1)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.downsample.0.weight        loaded from layer1.0.downsample.0.weight of shape (256, 64, 1, 1)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.downsample.1.bias          loaded from layer1.0.downsample.1.bias   of shape (256,)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.downsample.1.weight        loaded from layer1.0.downsample.1.weight of shape (256,)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn1.bias                   loaded from layer1.1.bn1.bias            of shape (64,)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn1.weight                 loaded from layer1.1.bn1.weight          of shape (64,)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn2.bias                   loaded from layer1.1.bn2.bias            of shape (64,)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn2.weight                 loaded from layer1.1.bn2.weight          of shape (64,)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn3.bias                   loaded from layer1.1.bn3.bias            of shape (256,)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn3.weight                 loaded from layer1.1.bn3.weight          of shape (256,)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.conv1.weight               loaded from layer1.1.conv1.weight        of shape (64, 256, 1, 1)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.conv2.weight               loaded from layer1.1.conv2.weight        of shape (64, 64, 3, 3)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.conv3.weight               loaded from layer1.1.conv3.weight        of shape (256, 64, 1, 1)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn1.bias                   loaded from layer1.2.bn1.bias            of shape (64,)
2020-06-23 15:22:32,161 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn1.weight                 loaded from layer1.2.bn1.weight          of shape (64,)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn2.bias                   loaded from layer1.2.bn2.bias            of shape (64,)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn2.weight                 loaded from layer1.2.bn2.weight          of shape (64,)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn3.bias                   loaded from layer1.2.bn3.bias            of shape (256,)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn3.weight                 loaded from layer1.2.bn3.weight          of shape (256,)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.conv1.weight               loaded from layer1.2.conv1.weight        of shape (64, 256, 1, 1)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.conv2.weight               loaded from layer1.2.conv2.weight        of shape (64, 64, 3, 3)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.conv3.weight               loaded from layer1.2.conv3.weight        of shape (256, 64, 1, 1)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn1.bias                   loaded from layer2.0.bn1.bias            of shape (128,)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn1.weight                 loaded from layer2.0.bn1.weight          of shape (128,)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn2.bias                   loaded from layer2.0.bn2.bias            of shape (128,)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn2.weight                 loaded from layer2.0.bn2.weight          of shape (128,)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn3.bias                   loaded from layer2.0.bn3.bias            of shape (512,)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn3.weight                 loaded from layer2.0.bn3.weight          of shape (512,)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.conv1.weight               loaded from layer2.0.conv1.weight        of shape (128, 256, 1, 1)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.conv2.weight               loaded from layer2.0.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.conv3.weight               loaded from layer2.0.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.downsample.0.weight        loaded from layer2.0.downsample.0.weight of shape (512, 256, 1, 1)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.downsample.1.bias          loaded from layer2.0.downsample.1.bias   of shape (512,)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.downsample.1.weight        loaded from layer2.0.downsample.1.weight of shape (512,)
2020-06-23 15:22:32,162 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn1.bias                   loaded from layer2.1.bn1.bias            of shape (128,)
2020-06-23 15:22:32,163 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn1.weight                 loaded from layer2.1.bn1.weight          of shape (128,)
2020-06-23 15:22:32,163 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn2.bias                   loaded from layer2.1.bn2.bias            of shape (128,)
2020-06-23 15:22:32,163 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn2.weight                 loaded from layer2.1.bn2.weight          of shape (128,)
2020-06-23 15:22:32,163 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn3.bias                   loaded from layer2.1.bn3.bias            of shape (512,)
2020-06-23 15:22:32,163 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn3.weight                 loaded from layer2.1.bn3.weight          of shape (512,)
2020-06-23 15:22:32,163 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.conv1.weight               loaded from layer2.1.conv1.weight        of shape (128, 512, 1, 1)
2020-06-23 15:22:32,163 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.conv2.weight               loaded from layer2.1.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 15:22:32,163 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.conv3.weight               loaded from layer2.1.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 15:22:32,163 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn1.bias                   loaded from layer2.2.bn1.bias            of shape (128,)
2020-06-23 15:22:32,163 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn1.weight                 loaded from layer2.2.bn1.weight          of shape (128,)
2020-06-23 15:22:32,163 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn2.bias                   loaded from layer2.2.bn2.bias            of shape (128,)
2020-06-23 15:22:32,163 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn2.weight                 loaded from layer2.2.bn2.weight          of shape (128,)
2020-06-23 15:22:32,163 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn3.bias                   loaded from layer2.2.bn3.bias            of shape (512,)
2020-06-23 15:22:32,163 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn3.weight                 loaded from layer2.2.bn3.weight          of shape (512,)
2020-06-23 15:22:32,163 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.conv1.weight               loaded from layer2.2.conv1.weight        of shape (128, 512, 1, 1)
2020-06-23 15:22:32,163 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.conv2.weight               loaded from layer2.2.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 15:22:32,163 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.conv3.weight               loaded from layer2.2.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 15:22:32,163 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn1.bias                   loaded from layer2.3.bn1.bias            of shape (128,)
2020-06-23 15:22:32,164 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn1.weight                 loaded from layer2.3.bn1.weight          of shape (128,)
2020-06-23 15:22:32,164 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn2.bias                   loaded from layer2.3.bn2.bias            of shape (128,)
2020-06-23 15:22:32,164 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn2.weight                 loaded from layer2.3.bn2.weight          of shape (128,)
2020-06-23 15:22:32,164 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn3.bias                   loaded from layer2.3.bn3.bias            of shape (512,)
2020-06-23 15:22:32,164 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn3.weight                 loaded from layer2.3.bn3.weight          of shape (512,)
2020-06-23 15:22:32,164 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.conv1.weight               loaded from layer2.3.conv1.weight        of shape (128, 512, 1, 1)
2020-06-23 15:22:32,164 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.conv2.weight               loaded from layer2.3.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 15:22:32,164 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.conv3.weight               loaded from layer2.3.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 15:22:32,164 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn1.bias                   loaded from layer3.0.bn1.bias            of shape (256,)
2020-06-23 15:22:32,164 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn1.weight                 loaded from layer3.0.bn1.weight          of shape (256,)
2020-06-23 15:22:32,164 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn2.bias                   loaded from layer3.0.bn2.bias            of shape (256,)
2020-06-23 15:22:32,164 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn2.weight                 loaded from layer3.0.bn2.weight          of shape (256,)
2020-06-23 15:22:32,164 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn3.bias                   loaded from layer3.0.bn3.bias            of shape (1024,)
2020-06-23 15:22:32,164 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn3.weight                 loaded from layer3.0.bn3.weight          of shape (1024,)
2020-06-23 15:22:32,164 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.conv1.weight               loaded from layer3.0.conv1.weight        of shape (256, 512, 1, 1)
2020-06-23 15:22:32,165 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.conv2.weight               loaded from layer3.0.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 15:22:32,165 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.conv3.weight               loaded from layer3.0.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 15:22:32,165 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.downsample.0.weight        loaded from layer3.0.downsample.0.weight of shape (1024, 512, 1, 1)
2020-06-23 15:22:32,165 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.downsample.1.bias          loaded from layer3.0.downsample.1.bias   of shape (1024,)
2020-06-23 15:22:32,165 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.downsample.1.weight        loaded from layer3.0.downsample.1.weight of shape (1024,)
2020-06-23 15:22:32,165 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn1.bias                   loaded from layer3.1.bn1.bias            of shape (256,)
2020-06-23 15:22:32,165 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn1.weight                 loaded from layer3.1.bn1.weight          of shape (256,)
2020-06-23 15:22:32,165 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn2.bias                   loaded from layer3.1.bn2.bias            of shape (256,)
2020-06-23 15:22:32,165 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn2.weight                 loaded from layer3.1.bn2.weight          of shape (256,)
2020-06-23 15:22:32,165 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn3.bias                   loaded from layer3.1.bn3.bias            of shape (1024,)
2020-06-23 15:22:32,165 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn3.weight                 loaded from layer3.1.bn3.weight          of shape (1024,)
2020-06-23 15:22:32,165 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.conv1.weight               loaded from layer3.1.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 15:22:32,166 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.conv2.weight               loaded from layer3.1.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 15:22:32,166 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.conv3.weight               loaded from layer3.1.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 15:22:32,166 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn1.bias                   loaded from layer3.2.bn1.bias            of shape (256,)
2020-06-23 15:22:32,166 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn1.weight                 loaded from layer3.2.bn1.weight          of shape (256,)
2020-06-23 15:22:32,166 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn2.bias                   loaded from layer3.2.bn2.bias            of shape (256,)
2020-06-23 15:22:32,166 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn2.weight                 loaded from layer3.2.bn2.weight          of shape (256,)
2020-06-23 15:22:32,166 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn3.bias                   loaded from layer3.2.bn3.bias            of shape (1024,)
2020-06-23 15:22:32,166 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn3.weight                 loaded from layer3.2.bn3.weight          of shape (1024,)
2020-06-23 15:22:32,166 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.conv1.weight               loaded from layer3.2.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 15:22:32,166 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.conv2.weight               loaded from layer3.2.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 15:22:32,167 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.conv3.weight               loaded from layer3.2.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 15:22:32,167 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn1.bias                   loaded from layer3.3.bn1.bias            of shape (256,)
2020-06-23 15:22:32,167 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn1.weight                 loaded from layer3.3.bn1.weight          of shape (256,)
2020-06-23 15:22:32,167 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn2.bias                   loaded from layer3.3.bn2.bias            of shape (256,)
2020-06-23 15:22:32,167 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn2.weight                 loaded from layer3.3.bn2.weight          of shape (256,)
2020-06-23 15:22:32,167 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn3.bias                   loaded from layer3.3.bn3.bias            of shape (1024,)
2020-06-23 15:22:32,167 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn3.weight                 loaded from layer3.3.bn3.weight          of shape (1024,)
2020-06-23 15:22:32,167 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.conv1.weight               loaded from layer3.3.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 15:22:32,167 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.conv2.weight               loaded from layer3.3.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 15:22:32,167 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.conv3.weight               loaded from layer3.3.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 15:22:32,167 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn1.bias                   loaded from layer3.4.bn1.bias            of shape (256,)
2020-06-23 15:22:32,167 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn1.weight                 loaded from layer3.4.bn1.weight          of shape (256,)
2020-06-23 15:22:32,167 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn2.bias                   loaded from layer3.4.bn2.bias            of shape (256,)
2020-06-23 15:22:32,167 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn2.weight                 loaded from layer3.4.bn2.weight          of shape (256,)
2020-06-23 15:22:32,168 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn3.bias                   loaded from layer3.4.bn3.bias            of shape (1024,)
2020-06-23 15:22:32,168 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn3.weight                 loaded from layer3.4.bn3.weight          of shape (1024,)
2020-06-23 15:22:32,168 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.conv1.weight               loaded from layer3.4.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 15:22:32,168 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.conv2.weight               loaded from layer3.4.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 15:22:32,168 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.conv3.weight               loaded from layer3.4.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 15:22:32,168 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn1.bias                   loaded from layer3.5.bn1.bias            of shape (256,)
2020-06-23 15:22:32,168 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn1.weight                 loaded from layer3.5.bn1.weight          of shape (256,)
2020-06-23 15:22:32,168 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn2.bias                   loaded from layer3.5.bn2.bias            of shape (256,)
2020-06-23 15:22:32,168 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn2.weight                 loaded from layer3.5.bn2.weight          of shape (256,)
2020-06-23 15:22:32,168 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn3.bias                   loaded from layer3.5.bn3.bias            of shape (1024,)
2020-06-23 15:22:32,168 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn3.weight                 loaded from layer3.5.bn3.weight          of shape (1024,)
2020-06-23 15:22:32,168 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.conv1.weight               loaded from layer3.5.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 15:22:32,169 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.conv2.weight               loaded from layer3.5.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 15:22:32,169 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.conv3.weight               loaded from layer3.5.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 15:22:32,169 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn1.bias                   loaded from layer4.0.bn1.bias            of shape (512,)
2020-06-23 15:22:32,169 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn1.weight                 loaded from layer4.0.bn1.weight          of shape (512,)
2020-06-23 15:22:32,169 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn2.bias                   loaded from layer4.0.bn2.bias            of shape (512,)
2020-06-23 15:22:32,169 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn2.weight                 loaded from layer4.0.bn2.weight          of shape (512,)
2020-06-23 15:22:32,169 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn3.bias                   loaded from layer4.0.bn3.bias            of shape (2048,)
2020-06-23 15:22:32,169 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn3.weight                 loaded from layer4.0.bn3.weight          of shape (2048,)
2020-06-23 15:22:32,169 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.conv1.weight               loaded from layer4.0.conv1.weight        of shape (512, 1024, 1, 1)
2020-06-23 15:22:32,171 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.conv2.weight               loaded from layer4.0.conv2.weight        of shape (512, 512, 3, 3)
2020-06-23 15:22:32,171 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.conv3.weight               loaded from layer4.0.conv3.weight        of shape (2048, 512, 1, 1)
2020-06-23 15:22:32,171 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.downsample.0.weight        loaded from layer4.0.downsample.0.weight of shape (2048, 1024, 1, 1)
2020-06-23 15:22:32,171 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.downsample.1.bias          loaded from layer4.0.downsample.1.bias   of shape (2048,)
2020-06-23 15:22:32,171 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.downsample.1.weight        loaded from layer4.0.downsample.1.weight of shape (2048,)
2020-06-23 15:22:32,171 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn1.bias                   loaded from layer4.1.bn1.bias            of shape (512,)
2020-06-23 15:22:32,172 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn1.weight                 loaded from layer4.1.bn1.weight          of shape (512,)
2020-06-23 15:22:32,172 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn2.bias                   loaded from layer4.1.bn2.bias            of shape (512,)
2020-06-23 15:22:32,172 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn2.weight                 loaded from layer4.1.bn2.weight          of shape (512,)
2020-06-23 15:22:32,172 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn3.bias                   loaded from layer4.1.bn3.bias            of shape (2048,)
2020-06-23 15:22:32,172 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn3.weight                 loaded from layer4.1.bn3.weight          of shape (2048,)
2020-06-23 15:22:32,172 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.conv1.weight               loaded from layer4.1.conv1.weight        of shape (512, 2048, 1, 1)
2020-06-23 15:22:32,175 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.conv2.weight               loaded from layer4.1.conv2.weight        of shape (512, 512, 3, 3)
2020-06-23 15:22:32,175 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.conv3.weight               loaded from layer4.1.conv3.weight        of shape (2048, 512, 1, 1)
2020-06-23 15:22:32,175 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn1.bias                   loaded from layer4.2.bn1.bias            of shape (512,)
2020-06-23 15:22:32,175 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn1.weight                 loaded from layer4.2.bn1.weight          of shape (512,)
2020-06-23 15:22:32,175 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn2.bias                   loaded from layer4.2.bn2.bias            of shape (512,)
2020-06-23 15:22:32,175 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn2.weight                 loaded from layer4.2.bn2.weight          of shape (512,)
2020-06-23 15:22:32,175 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn3.bias                   loaded from layer4.2.bn3.bias            of shape (2048,)
2020-06-23 15:22:32,175 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn3.weight                 loaded from layer4.2.bn3.weight          of shape (2048,)
2020-06-23 15:22:32,175 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.conv1.weight               loaded from layer4.2.conv1.weight        of shape (512, 2048, 1, 1)
2020-06-23 15:22:32,179 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.conv2.weight               loaded from layer4.2.conv2.weight        of shape (512, 512, 3, 3)
2020-06-23 15:22:32,179 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.conv3.weight               loaded from layer4.2.conv3.weight        of shape (2048, 512, 1, 1)
2020-06-23 15:22:32,179 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.stem.bn1.bias                       loaded from bn1.bias                     of shape (64,)
2020-06-23 15:22:32,179 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.stem.bn1.weight                     loaded from bn1.weight                   of shape (64,)
2020-06-23 15:22:32,179 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.stem.conv1.weight                   loaded from conv1.weight                 of shape (64, 3, 7, 7)
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
:::MLLOG {"namespace": "", "time_ms": 1592950954640, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 205}}
:::MLLOG {"namespace": "", "time_ms": 1592950954752, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 207}}
2020-06-23 15:22:34,753 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
Done (t=7.01s)
creating index...
Done (t=7.01s)
creating index...
Done (t=7.04s)
creating index...
Done (t=7.05s)
creating index...
Done (t=7.08s)
creating index...
Done (t=7.10s)
creating index...
Done (t=7.10s)
creating index...
Done (t=7.11s)
creating index...
Done (t=7.11s)
creating index...
Done (t=7.12s)
creating index...
Done (t=7.15s)
creating index...
Done (t=7.15s)
creating index...
Done (t=7.17s)
creating index...
Done (t=7.17s)
creating index...
Done (t=7.18s)
creating index...
Done (t=7.18s)
creating index...
Done (t=7.16s)
creating index...
Done (t=7.17s)
creating index...
Done (t=7.19s)
creating index...
Done (t=7.20s)
creating index...
Done (t=7.19s)
creating index...
Done (t=7.21s)
creating index...
Done (t=7.23s)
creating index...
Done (t=7.22s)
creating index...
Done (t=7.24s)
creating index...
Done (t=7.25s)
creating index...
Done (t=7.27s)
creating index...
Done (t=7.30s)
creating index...
Done (t=7.34s)
creating index...
Done (t=7.40s)
creating index...
Done (t=7.49s)
creating index...
index created!
index created!
index created!
index created!
Done (t=7.61s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
:::MLLOG {"namespace": "", "time_ms": 1592950964154, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 40000, "metadata": {"file": "tools/train_mlperf.py", "lineno": 217}}
2020-06-23 15:22:44,154 maskrcnn_benchmark.trainer INFO: Start training
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
:::MLLOG {"namespace": "", "time_ms": 1592950965618, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 130, "first_epoch_num": 1, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592950965619, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 131, "epoch_num": 1}}
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)



Grad overflow on iteration  0
Using dynamic loss scale of  65536


Grad overflow on iteration  0
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536


Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  1


Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1

Using dynamic loss scale of  32768.0

Using dynamic loss scale of  32768.0


Grad overflow on iteration  1

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0


Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0


Grad overflow on iteration  1
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0


Grad overflow on iteration  1

Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1


Grad overflow on iteration  1

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  2

Grad overflow on iteration  2

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0


Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Grad overflow on iteration  2

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0



Grad overflow on iteration  2

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Grad overflow on iteration  2
Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Grad overflow on iteration  2
Using dynamic loss scale of  16384.0


Grad overflow on iteration  3
Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0

Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Grad overflow on iteration  3



Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0



Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Grad overflow on iteration  3
Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0


Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0


Grad overflow on iteration  3
Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0


Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Grad overflow on iteration  4

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0


Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0


Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5


Using dynamic loss scale of  2048.0
Grad overflow on iteration  5

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0
Grad overflow on iteration  5
Using dynamic loss scale of  2048.0


Grad overflow on iteration  5
Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  6

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0


Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Grad overflow on iteration  6

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0


Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0


Grad overflow on iteration  7

Grad overflow on iteration  7
Using dynamic loss scale of  512.0


Grad overflow on iteration  7

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0
Using dynamic loss scale of  512.0
Grad overflow on iteration  7
Using dynamic loss scale of  512.0
Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0

Grad overflow on iteration  7
Using dynamic loss scale of  512.0
2020-06-23 15:22:51,909 maskrcnn_benchmark.trainer INFO: eta: 4:18:18  iter: 20  loss: 2.8841 (4.2337)  loss_classifier: 1.0466 (2.3985)  loss_box_reg: 0.0098 (0.0203)  loss_mask: 1.1034 (1.2593)  loss_objectness: 0.5945 (0.5089)  loss_rpn_box_reg: 0.0206 (0.0467)  time: 0.1065 (0.3877)  data: 0.0014 (0.0746)  lr: 0.005120  max mem: 4287
2020-06-23 15:22:53,998 maskrcnn_benchmark.trainer INFO: eta: 2:43:52  iter: 40  loss: 1.3152 (2.8309)  loss_classifier: 0.3871 (1.4101)  loss_box_reg: 0.0755 (0.0537)  loss_mask: 0.6897 (0.9762)  loss_objectness: 0.1404 (0.3464)  loss_rpn_box_reg: 0.0173 (0.0445)  time: 0.1042 (0.2461)  data: 0.0014 (0.0380)  lr: 0.010240  max mem: 4304
2020-06-23 15:22:56,089 maskrcnn_benchmark.trainer INFO: eta: 2:12:23  iter: 60  loss: 1.0938 (2.3083)  loss_classifier: 0.2472 (1.0544)  loss_box_reg: 0.0807 (0.0681)  loss_mask: 0.6822 (0.8775)  loss_objectness: 0.0793 (0.2723)  loss_rpn_box_reg: 0.0083 (0.0360)  time: 0.1041 (0.1989)  data: 0.0014 (0.0258)  lr: 0.015360  max mem: 4304
2020-06-23 15:22:58,141 maskrcnn_benchmark.trainer INFO: eta: 1:56:18  iter: 80  loss: 1.1968 (2.0504)  loss_classifier: 0.3279 (0.8786)  loss_box_reg: 0.0719 (0.0720)  loss_mask: 0.6517 (0.8221)  loss_objectness: 0.1192 (0.2418)  loss_rpn_box_reg: 0.0198 (0.0358)  time: 0.1023 (0.1748)  data: 0.0015 (0.0197)  lr: 0.020480  max mem: 4304
2020-06-23 15:23:00,201 maskrcnn_benchmark.trainer INFO: eta: 1:46:41  iter: 100  loss: 1.1868 (1.8846)  loss_classifier: 0.2869 (0.7695)  loss_box_reg: 0.0948 (0.0771)  loss_mask: 0.6513 (0.7879)  loss_objectness: 0.0798 (0.2142)  loss_rpn_box_reg: 0.0191 (0.0360)  time: 0.1030 (0.1604)  data: 0.0014 (0.0161)  lr: 0.025600  max mem: 4424
2020-06-23 15:23:02,276 maskrcnn_benchmark.trainer INFO: eta: 1:40:21  iter: 120  loss: 1.3339 (1.7980)  loss_classifier: 0.4717 (0.7211)  loss_box_reg: 0.1755 (0.0942)  loss_mask: 0.5972 (0.7565)  loss_objectness: 0.0818 (0.1924)  loss_rpn_box_reg: 0.0182 (0.0338)  time: 0.1032 (0.1510)  data: 0.0014 (0.0136)  lr: 0.030720  max mem: 4567
2020-06-23 15:23:04,397 maskrcnn_benchmark.trainer INFO: eta: 1:36:02  iter: 140  loss: 1.4148 (1.7516)  loss_classifier: 0.5420 (0.6976)  loss_box_reg: 0.2127 (0.1118)  loss_mask: 0.5745 (0.7318)  loss_objectness: 0.0531 (0.1764)  loss_rpn_box_reg: 0.0145 (0.0340)  time: 0.1049 (0.1446)  data: 0.0015 (0.0119)  lr: 0.035840  max mem: 4587
2020-06-23 15:23:06,508 maskrcnn_benchmark.trainer INFO: eta: 1:32:45  iter: 160  loss: 1.3839 (1.7048)  loss_classifier: 0.5184 (0.6755)  loss_box_reg: 0.1956 (0.1231)  loss_mask: 0.5544 (0.7086)  loss_objectness: 0.0620 (0.1641)  loss_rpn_box_reg: 0.0203 (0.0335)  time: 0.1057 (0.1397)  data: 0.0014 (0.0106)  lr: 0.040960  max mem: 4639
2020-06-23 15:23:08,649 maskrcnn_benchmark.trainer INFO: eta: 1:30:18  iter: 180  loss: 1.3244 (1.6580)  loss_classifier: 0.4883 (0.6528)  loss_box_reg: 0.2009 (0.1304)  loss_mask: 0.5055 (0.6873)  loss_objectness: 0.0489 (0.1536)  loss_rpn_box_reg: 0.0201 (0.0339)  time: 0.1064 (0.1361)  data: 0.0014 (0.0096)  lr: 0.046080  max mem: 4639
2020-06-23 15:23:10,767 maskrcnn_benchmark.trainer INFO: eta: 1:28:15  iter: 200  loss: 1.3050 (1.6268)  loss_classifier: 0.5377 (0.6428)  loss_box_reg: 0.2120 (0.1395)  loss_mask: 0.4684 (0.6673)  loss_objectness: 0.0550 (0.1448)  loss_rpn_box_reg: 0.0166 (0.0323)  time: 0.1050 (0.1331)  data: 0.0015 (0.0088)  lr: 0.051200  max mem: 4680
2020-06-23 15:23:12,870 maskrcnn_benchmark.trainer INFO: eta: 1:26:32  iter: 220  loss: 1.3987 (1.6093)  loss_classifier: 0.5486 (0.6375)  loss_box_reg: 0.2025 (0.1475)  loss_mask: 0.5220 (0.6550)  loss_objectness: 0.0569 (0.1373)  loss_rpn_box_reg: 0.0170 (0.0320)  time: 0.1045 (0.1305)  data: 0.0014 (0.0081)  lr: 0.056320  max mem: 4680
2020-06-23 15:23:14,983 maskrcnn_benchmark.trainer INFO: eta: 1:25:07  iter: 240  loss: 1.4256 (1.5857)  loss_classifier: 0.5216 (0.6304)  loss_box_reg: 0.2060 (0.1521)  loss_mask: 0.4676 (0.6408)  loss_objectness: 0.0610 (0.1311)  loss_rpn_box_reg: 0.0165 (0.0313)  time: 0.1054 (0.1284)  data: 0.0015 (0.0076)  lr: 0.061440  max mem: 4680
2020-06-23 15:23:17,108 maskrcnn_benchmark.trainer INFO: eta: 1:23:56  iter: 260  loss: 1.2322 (1.5579)  loss_classifier: 0.5322 (0.6213)  loss_box_reg: 0.2032 (0.1554)  loss_mask: 0.4379 (0.6255)  loss_objectness: 0.0374 (0.1254)  loss_rpn_box_reg: 0.0098 (0.0303)  time: 0.1059 (0.1267)  data: 0.0015 (0.0071)  lr: 0.066560  max mem: 4680
2020-06-23 15:23:19,230 maskrcnn_benchmark.trainer INFO: eta: 1:22:55  iter: 280  loss: 1.2309 (1.5368)  loss_classifier: 0.5007 (0.6155)  loss_box_reg: 0.1891 (0.1590)  loss_mask: 0.4466 (0.6126)  loss_objectness: 0.0507 (0.1205)  loss_rpn_box_reg: 0.0097 (0.0292)  time: 0.1062 (0.1253)  data: 0.0015 (0.0067)  lr: 0.071680  max mem: 4680
2020-06-23 15:23:21,348 maskrcnn_benchmark.trainer INFO: eta: 1:22:01  iter: 300  loss: 1.1451 (1.5123)  loss_classifier: 0.4775 (0.6067)  loss_box_reg: 0.1636 (0.1607)  loss_mask: 0.4243 (0.6003)  loss_objectness: 0.0384 (0.1156)  loss_rpn_box_reg: 0.0110 (0.0290)  time: 0.1052 (0.1240)  data: 0.0014 (0.0064)  lr: 0.076800  max mem: 4972
2020-06-23 15:23:23,487 maskrcnn_benchmark.trainer INFO: eta: 1:21:17  iter: 320  loss: 1.2857 (1.4948)  loss_classifier: 0.5171 (0.6005)  loss_box_reg: 0.1862 (0.1620)  loss_mask: 0.4297 (0.5898)  loss_objectness: 0.0541 (0.1132)  loss_rpn_box_reg: 0.0175 (0.0293)  time: 0.1057 (0.1229)  data: 0.0015 (0.0061)  lr: 0.081920  max mem: 4972
2020-06-23 15:23:25,631 maskrcnn_benchmark.trainer INFO: eta: 1:20:37  iter: 340  loss: 1.1998 (1.4762)  loss_classifier: 0.4823 (0.5936)  loss_box_reg: 0.1643 (0.1630)  loss_mask: 0.4024 (0.5793)  loss_objectness: 0.0416 (0.1108)  loss_rpn_box_reg: 0.0174 (0.0295)  time: 0.1060 (0.1220)  data: 0.0014 (0.0058)  lr: 0.087040  max mem: 4972
2020-06-23 15:23:27,758 maskrcnn_benchmark.trainer INFO: eta: 1:20:01  iter: 360  loss: 1.1103 (1.4576)  loss_classifier: 0.4152 (0.5856)  loss_box_reg: 0.1736 (0.1639)  loss_mask: 0.3939 (0.5697)  loss_objectness: 0.0521 (0.1085)  loss_rpn_box_reg: 0.0152 (0.0299)  time: 0.1057 (0.1211)  data: 0.0015 (0.0056)  lr: 0.092160  max mem: 4972
2020-06-23 15:23:29,875 maskrcnn_benchmark.trainer INFO: eta: 1:19:26  iter: 380  loss: 1.0772 (1.4360)  loss_classifier: 0.4056 (0.5764)  loss_box_reg: 0.1752 (0.1644)  loss_mask: 0.3640 (0.5598)  loss_objectness: 0.0390 (0.1058)  loss_rpn_box_reg: 0.0178 (0.0296)  time: 0.1058 (0.1203)  data: 0.0015 (0.0053)  lr: 0.097280  max mem: 4972
2020-06-23 15:23:32,003 maskrcnn_benchmark.trainer INFO: eta: 1:18:56  iter: 400  loss: 1.0467 (1.4180)  loss_classifier: 0.4004 (0.5692)  loss_box_reg: 0.1576 (0.1646)  loss_mask: 0.3825 (0.5509)  loss_objectness: 0.0532 (0.1034)  loss_rpn_box_reg: 0.0123 (0.0298)  time: 0.1057 (0.1196)  data: 0.0015 (0.0051)  lr: 0.102400  max mem: 4972
2020-06-23 15:23:34,156 maskrcnn_benchmark.trainer INFO: eta: 1:18:31  iter: 420  loss: 1.0517 (1.4003)  loss_classifier: 0.4196 (0.5616)  loss_box_reg: 0.1539 (0.1648)  loss_mask: 0.3803 (0.5431)  loss_objectness: 0.0347 (0.1012)  loss_rpn_box_reg: 0.0149 (0.0296)  time: 0.1063 (0.1190)  data: 0.0014 (0.0050)  lr: 0.107520  max mem: 4972
2020-06-23 15:23:36,304 maskrcnn_benchmark.trainer INFO: eta: 1:18:08  iter: 440  loss: 1.0026 (1.3837)  loss_classifier: 0.3722 (0.5554)  loss_box_reg: 0.1789 (0.1646)  loss_mask: 0.3644 (0.5359)  loss_objectness: 0.0436 (0.0987)  loss_rpn_box_reg: 0.0125 (0.0291)  time: 0.1076 (0.1185)  data: 0.0014 (0.0048)  lr: 0.112640  max mem: 4972
2020-06-23 15:23:38,426 maskrcnn_benchmark.trainer INFO: eta: 1:17:44  iter: 460  loss: 0.9661 (1.3677)  loss_classifier: 0.3561 (0.5492)  loss_box_reg: 0.1220 (0.1638)  loss_mask: 0.3541 (0.5292)  loss_objectness: 0.0332 (0.0967)  loss_rpn_box_reg: 0.0120 (0.0288)  time: 0.1058 (0.1180)  data: 0.0014 (0.0047)  lr: 0.117760  max mem: 4972
2020-06-23 15:23:40,569 maskrcnn_benchmark.trainer INFO: eta: 1:17:24  iter: 480  loss: 0.9533 (1.3526)  loss_classifier: 0.3316 (0.5425)  loss_box_reg: 0.1477 (0.1637)  loss_mask: 0.3643 (0.5229)  loss_objectness: 0.0430 (0.0951)  loss_rpn_box_reg: 0.0116 (0.0284)  time: 0.1063 (0.1175)  data: 0.0015 (0.0045)  lr: 0.122880  max mem: 4972
2020-06-23 15:23:42,700 maskrcnn_benchmark.trainer INFO: eta: 1:17:04  iter: 500  loss: 0.9598 (1.3382)  loss_classifier: 0.3688 (0.5358)  loss_box_reg: 0.1563 (0.1634)  loss_mask: 0.3824 (0.5177)  loss_objectness: 0.0358 (0.0932)  loss_rpn_box_reg: 0.0158 (0.0282)  time: 0.1061 (0.1171)  data: 0.0014 (0.0044)  lr: 0.128000  max mem: 4972
2020-06-23 15:23:44,822 maskrcnn_benchmark.trainer INFO: eta: 1:16:45  iter: 520  loss: 1.1147 (1.3299)  loss_classifier: 0.4355 (0.5324)  loss_box_reg: 0.2152 (0.1649)  loss_mask: 0.3788 (0.5130)  loss_objectness: 0.0442 (0.0916)  loss_rpn_box_reg: 0.0133 (0.0280)  time: 0.1065 (0.1167)  data: 0.0015 (0.0043)  lr: 0.133120  max mem: 4972
2020-06-23 15:23:46,960 maskrcnn_benchmark.trainer INFO: eta: 1:16:29  iter: 540  loss: 0.8777 (1.3159)  loss_classifier: 0.3834 (0.5259)  loss_box_reg: 0.1429 (0.1644)  loss_mask: 0.3516 (0.5072)  loss_objectness: 0.0392 (0.0906)  loss_rpn_box_reg: 0.0139 (0.0278)  time: 0.1072 (0.1163)  data: 0.0014 (0.0042)  lr: 0.138240  max mem: 4972
2020-06-23 15:23:49,094 maskrcnn_benchmark.trainer INFO: eta: 1:16:13  iter: 560  loss: 0.9078 (1.3028)  loss_classifier: 0.3338 (0.5200)  loss_box_reg: 0.1287 (0.1637)  loss_mask: 0.3461 (0.5019)  loss_objectness: 0.0285 (0.0893)  loss_rpn_box_reg: 0.0090 (0.0278)  time: 0.1064 (0.1160)  data: 0.0014 (0.0041)  lr: 0.143360  max mem: 4972
2020-06-23 15:23:51,228 maskrcnn_benchmark.trainer INFO: eta: 1:15:58  iter: 580  loss: 1.1028 (1.2944)  loss_classifier: 0.4215 (0.5164)  loss_box_reg: 0.1929 (0.1644)  loss_mask: 0.3827 (0.4978)  loss_objectness: 0.0442 (0.0880)  loss_rpn_box_reg: 0.0188 (0.0278)  time: 0.1065 (0.1156)  data: 0.0015 (0.0040)  lr: 0.148480  max mem: 4972
2020-06-23 15:23:53,375 maskrcnn_benchmark.trainer INFO: eta: 1:15:45  iter: 600  loss: 0.9187 (1.2832)  loss_classifier: 0.3585 (0.5115)  loss_box_reg: 0.1466 (0.1642)  loss_mask: 0.3706 (0.4937)  loss_objectness: 0.0228 (0.0865)  loss_rpn_box_reg: 0.0119 (0.0275)  time: 0.1071 (0.1154)  data: 0.0015 (0.0039)  lr: 0.153600  max mem: 4972
2020-06-23 15:23:55,537 maskrcnn_benchmark.trainer INFO: eta: 1:15:33  iter: 620  loss: 0.9670 (1.2722)  loss_classifier: 0.3378 (0.5065)  loss_box_reg: 0.1640 (0.1641)  loss_mask: 0.3553 (0.4892)  loss_objectness: 0.0349 (0.0852)  loss_rpn_box_reg: 0.0155 (0.0272)  time: 0.1075 (0.1151)  data: 0.0015 (0.0038)  lr: 0.158720  max mem: 4972
2020-06-23 15:23:57,678 maskrcnn_benchmark.trainer INFO: eta: 1:15:21  iter: 640  loss: 0.8933 (1.2621)  loss_classifier: 0.3655 (0.5030)  loss_box_reg: 0.1490 (0.1641)  loss_mask: 0.3314 (0.4844)  loss_objectness: 0.0320 (0.0837)  loss_rpn_box_reg: 0.0115 (0.0269)  time: 0.1065 (0.1149)  data: 0.0015 (0.0038)  lr: 0.160000  max mem: 4972
2020-06-23 15:23:59,837 maskrcnn_benchmark.trainer INFO: eta: 1:15:11  iter: 660  loss: 0.9434 (1.2514)  loss_classifier: 0.3443 (0.4984)  loss_box_reg: 0.1480 (0.1634)  loss_mask: 0.3415 (0.4801)  loss_objectness: 0.0344 (0.0827)  loss_rpn_box_reg: 0.0170 (0.0269)  time: 0.1078 (0.1147)  data: 0.0014 (0.0037)  lr: 0.160000  max mem: 4972
2020-06-23 15:24:01,971 maskrcnn_benchmark.trainer INFO: eta: 1:14:59  iter: 680  loss: 0.9524 (1.2430)  loss_classifier: 0.3433 (0.4946)  loss_box_reg: 0.1569 (0.1634)  loss_mask: 0.3407 (0.4761)  loss_objectness: 0.0413 (0.0818)  loss_rpn_box_reg: 0.0212 (0.0271)  time: 0.1063 (0.1144)  data: 0.0015 (0.0036)  lr: 0.160000  max mem: 4972
2020-06-23 15:24:04,106 maskrcnn_benchmark.trainer INFO: eta: 1:14:48  iter: 700  loss: 0.9324 (1.2349)  loss_classifier: 0.3176 (0.4903)  loss_box_reg: 0.1586 (0.1633)  loss_mask: 0.3728 (0.4729)  loss_objectness: 0.0391 (0.0813)  loss_rpn_box_reg: 0.0126 (0.0270)  time: 0.1062 (0.1142)  data: 0.0015 (0.0036)  lr: 0.160000  max mem: 4972
2020-06-23 15:24:06,257 maskrcnn_benchmark.trainer INFO: eta: 1:14:39  iter: 720  loss: 0.9396 (1.2281)  loss_classifier: 0.3600 (0.4877)  loss_box_reg: 0.1580 (0.1633)  loss_mask: 0.3518 (0.4699)  loss_objectness: 0.0338 (0.0803)  loss_rpn_box_reg: 0.0134 (0.0269)  time: 0.1076 (0.1140)  data: 0.0015 (0.0035)  lr: 0.160000  max mem: 4972
2020-06-23 15:24:08,390 maskrcnn_benchmark.trainer INFO: eta: 1:14:28  iter: 740  loss: 0.9891 (1.2195)  loss_classifier: 0.3685 (0.4840)  loss_box_reg: 0.1470 (0.1629)  loss_mask: 0.3585 (0.4669)  loss_objectness: 0.0331 (0.0792)  loss_rpn_box_reg: 0.0133 (0.0266)  time: 0.1065 (0.1138)  data: 0.0015 (0.0035)  lr: 0.160000  max mem: 4972
2020-06-23 15:24:10,510 maskrcnn_benchmark.trainer INFO: eta: 1:14:18  iter: 760  loss: 0.8536 (1.2113)  loss_classifier: 0.3089 (0.4801)  loss_box_reg: 0.1457 (0.1625)  loss_mask: 0.3538 (0.4641)  loss_objectness: 0.0359 (0.0782)  loss_rpn_box_reg: 0.0137 (0.0263)  time: 0.1058 (0.1136)  data: 0.0015 (0.0034)  lr: 0.160000  max mem: 4972
2020-06-23 15:24:12,641 maskrcnn_benchmark.trainer INFO: eta: 1:14:09  iter: 780  loss: 0.9582 (1.2055)  loss_classifier: 0.3531 (0.4780)  loss_box_reg: 0.1610 (0.1625)  loss_mask: 0.3517 (0.4612)  loss_objectness: 0.0370 (0.0775)  loss_rpn_box_reg: 0.0164 (0.0263)  time: 0.1066 (0.1134)  data: 0.0015 (0.0034)  lr: 0.160000  max mem: 4972
2020-06-23 15:24:14,772 maskrcnn_benchmark.trainer INFO: eta: 1:14:00  iter: 800  loss: 0.8973 (1.1995)  loss_classifier: 0.3081 (0.4753)  loss_box_reg: 0.1486 (0.1625)  loss_mask: 0.3497 (0.4582)  loss_objectness: 0.0458 (0.0771)  loss_rpn_box_reg: 0.0168 (0.0264)  time: 0.1065 (0.1133)  data: 0.0016 (0.0033)  lr: 0.160000  max mem: 4972
2020-06-23 15:24:16,920 maskrcnn_benchmark.trainer INFO: eta: 1:13:52  iter: 820  loss: 0.7867 (1.1913)  loss_classifier: 0.2919 (0.4714)  loss_box_reg: 0.1266 (0.1619)  loss_mask: 0.3301 (0.4554)  loss_objectness: 0.0377 (0.0763)  loss_rpn_box_reg: 0.0131 (0.0263)  time: 0.1059 (0.1131)  data: 0.0015 (0.0033)  lr: 0.160000  max mem: 4972
2020-06-23 15:24:19,074 maskrcnn_benchmark.trainer INFO: eta: 1:13:44  iter: 840  loss: 0.8738 (1.1838)  loss_classifier: 0.3353 (0.4681)  loss_box_reg: 0.1485 (0.1616)  loss_mask: 0.3476 (0.4526)  loss_objectness: 0.0320 (0.0754)  loss_rpn_box_reg: 0.0099 (0.0261)  time: 0.1078 (0.1130)  data: 0.0014 (0.0032)  lr: 0.160000  max mem: 4972
2020-06-23 15:24:21,217 maskrcnn_benchmark.trainer INFO: eta: 1:13:37  iter: 860  loss: 0.8203 (1.1754)  loss_classifier: 0.3112 (0.4645)  loss_box_reg: 0.1226 (0.1610)  loss_mask: 0.3100 (0.4494)  loss_objectness: 0.0314 (0.0746)  loss_rpn_box_reg: 0.0140 (0.0259)  time: 0.1073 (0.1129)  data: 0.0014 (0.0032)  lr: 0.160000  max mem: 4972
2020-06-23 15:24:23,360 maskrcnn_benchmark.trainer INFO: eta: 1:13:30  iter: 880  loss: 0.8871 (1.1693)  loss_classifier: 0.3486 (0.4618)  loss_box_reg: 0.1460 (0.1608)  loss_mask: 0.3394 (0.4470)  loss_objectness: 0.0371 (0.0739)  loss_rpn_box_reg: 0.0077 (0.0257)  time: 0.1068 (0.1127)  data: 0.0015 (0.0032)  lr: 0.160000  max mem: 4972
2020-06-23 15:24:25,508 maskrcnn_benchmark.trainer INFO: eta: 1:13:23  iter: 900  loss: 0.8212 (1.1616)  loss_classifier: 0.2890 (0.4580)  loss_box_reg: 0.1202 (0.1602)  loss_mask: 0.3320 (0.4445)  loss_objectness: 0.0301 (0.0733)  loss_rpn_box_reg: 0.0128 (0.0256)  time: 0.1071 (0.1126)  data: 0.0014 (0.0031)  lr: 0.160000  max mem: 4972
:::MLLOG {"namespace": "", "time_ms": 1592951070079, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592951070079, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592951070079, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 1}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 15:24:30,247 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.31s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.29s)
Done (t=0.30s)
creating index...
creating index...
Done (t=0.30s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
Done (t=0.30s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
index created!
Done (t=0.30s)
creating index...
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
:::MLLOG {"namespace": "", "time_ms": 1592951070568, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 1, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/engine/tester.py", "lineno": 35}}
2020-06-23 15:24:30,568 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.14it/s]
 28%|       | 22/79 [00:01<00:06,  9.04it/s]
 32%|      | 25/79 [00:01<00:04, 11.11it/s]
 35%|      | 28/79 [00:01<00:03, 13.37it/s]
 39%|      | 31/79 [00:02<00:03, 15.38it/s]
 43%|     | 34/79 [00:02<00:02, 17.27it/s]
 47%|     | 37/79 [00:02<00:02, 19.03it/s]
 51%|     | 40/79 [00:02<00:01, 20.28it/s]
 54%|    | 43/79 [00:02<00:01, 21.29it/s]
 58%|    | 46/79 [00:02<00:01, 21.92it/s]
 62%|   | 49/79 [00:02<00:01, 22.83it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  4%|         | 3/79 [00:00<00:48,  1.57it/s]
  8%|         | 6/79 [00:01<00:33,  2.18it/s]
 11%|        | 9/79 [00:01<00:23,  3.00it/s]
 15%|        | 12/79 [00:01<00:16,  4.07it/s]
 19%|        | 15/79 [00:01<00:11,  5.41it/s]
 23%|       | 18/79 [00:01<00:08,  7.04it/s]
 27%|       | 21/79 [00:01<00:06,  8.96it/s]
 30%|       | 24/79 [00:01<00:04, 11.08it/s]
 34%|      | 27/79 [00:01<00:03, 13.20it/s]
 38%|      | 30/79 [00:02<00:03, 15.38it/s]
 42%|     | 33/79 [00:02<00:02, 17.12it/s]
 46%|     | 36/79 [00:02<00:02, 18.82it/s]
 49%|     | 39/79 [00:02<00:01, 20.13it/s]
 53%|    | 42/79 [00:02<00:01, 21.35it/s]
 57%|    | 45/79 [00:02<00:01, 22.48it/s]
 61%|    | 48/79 [00:02<00:01, 23.06it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.93it/s]
 20%|        | 16/79 [00:01<00:11,  5.26it/s]
 24%|       | 19/79 [00:01<00:08,  6.87it/s]
 28%|       | 22/79 [00:01<00:06,  8.80it/s]
 32%|      | 25/79 [00:01<00:04, 10.90it/s]
 35%|      | 28/79 [00:02<00:03, 13.17it/s]
 39%|      | 31/79 [00:02<00:03, 15.53it/s]
 43%|     | 34/79 [00:02<00:02, 17.48it/s]
 47%|     | 37/79 [00:02<00:02, 19.36it/s]
 51%|     | 40/79 [00:02<00:01, 20.70it/s]
 54%|    | 43/79 [00:02<00:01, 21.66it/s]
 58%|    | 46/79 [00:02<00:01, 22.62it/s]
 62%|   | 49/79 [00:02<00:01, 23.37it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  3.99it/s]
 20%|        | 16/79 [00:01<00:11,  5.33it/s]
 24%|       | 19/79 [00:01<00:08,  6.98it/s]
 28%|       | 22/79 [00:01<00:06,  8.83it/s]
 32%|      | 25/79 [00:01<00:04, 10.93it/s]
 35%|      | 28/79 [00:02<00:03, 13.10it/s]
 39%|      | 31/79 [00:02<00:03, 15.22it/s]
 43%|     | 34/79 [00:02<00:02, 17.18it/s]
 47%|     | 37/79 [00:02<00:02, 18.89it/s]
 51%|     | 40/79 [00:02<00:01, 20.34it/s]
 54%|    | 43/79 [00:02<00:01, 21.58it/s]
 58%|    | 46/79 [00:02<00:01, 22.44it/s]
 62%|   | 49/79 [00:02<00:01, 23.17it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.25it/s]
 24%|       | 19/79 [00:01<00:08,  6.85it/s]
 28%|       | 22/79 [00:01<00:06,  8.77it/s]
 32%|      | 25/79 [00:01<00:04, 10.92it/s]
 35%|      | 28/79 [00:02<00:03, 13.15it/s]
 39%|      | 31/79 [00:02<00:03, 15.39it/s]
 43%|     | 34/79 [00:02<00:02, 17.22it/s]
 47%|     | 37/79 [00:02<00:02, 19.14it/s]
 51%|     | 40/79 [00:02<00:01, 20.44it/s]
 54%|    | 43/79 [00:02<00:01, 21.87it/s]
 58%|    | 46/79 [00:02<00:01, 22.57it/s]
 62%|   | 49/79 [00:02<00:01, 23.12it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.30it/s]
 24%|       | 19/79 [00:01<00:08,  6.95it/s]
 28%|       | 22/79 [00:01<00:06,  8.83it/s]
 32%|      | 25/79 [00:01<00:04, 10.96it/s]
 35%|      | 28/79 [00:02<00:03, 13.21it/s]
 39%|      | 31/79 [00:02<00:03, 15.43it/s]
 43%|     | 34/79 [00:02<00:02, 17.33it/s]
 47%|     | 37/79 [00:02<00:02, 18.89it/s]
 51%|     | 40/79 [00:02<00:01, 20.29it/s]
 54%|    | 43/79 [00:02<00:01, 21.59it/s]
 58%|    | 46/79 [00:02<00:01, 22.49it/s]
 62%|   | 49/79 [00:02<00:01, 23.22it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.83it/s]
 28%|       | 22/79 [00:01<00:06,  8.77it/s]
 32%|      | 25/79 [00:01<00:04, 10.84it/s]
 35%|      | 28/79 [00:02<00:03, 13.01it/s]
 39%|      | 31/79 [00:02<00:03, 15.23it/s]
 43%|     | 34/79 [00:02<00:02, 17.18it/s]
 47%|     | 37/79 [00:02<00:02, 19.04it/s]
 51%|     | 40/79 [00:02<00:01, 20.39it/s]
 54%|    | 43/79 [00:02<00:01, 21.26it/s]
 58%|    | 46/79 [00:02<00:01, 22.22it/s]
 62%|   | 49/79 [00:02<00:01, 22.81it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.93it/s]
 28%|       | 22/79 [00:01<00:06,  8.84it/s]
 32%|      | 25/79 [00:01<00:04, 10.95it/s]
 35%|      | 28/79 [00:02<00:03, 13.13it/s]
 39%|      | 31/79 [00:02<00:03, 15.25it/s]
 43%|     | 34/79 [00:02<00:02, 17.10it/s]
 47%|     | 37/79 [00:02<00:02, 18.91it/s]
 51%|     | 40/79 [00:02<00:01, 20.22it/s]
 54%|    | 43/79 [00:02<00:01, 21.20it/s]
 58%|    | 46/79 [00:02<00:01, 22.18it/s]
 62%|   | 49/79 [00:02<00:01, 22.89it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.43it/s]
  9%|         | 7/79 [00:01<00:36,  1.99it/s]
 13%|        | 10/79 [00:01<00:25,  2.75it/s]
 16%|        | 13/79 [00:01<00:17,  3.76it/s]
 20%|        | 16/79 [00:01<00:12,  5.05it/s]
 24%|       | 19/79 [00:01<00:09,  6.65it/s]
 28%|       | 22/79 [00:01<00:06,  8.53it/s]
 32%|      | 25/79 [00:01<00:05, 10.64it/s]
 35%|      | 28/79 [00:02<00:03, 12.90it/s]
 39%|      | 31/79 [00:02<00:03, 15.19it/s]
 43%|     | 34/79 [00:02<00:02, 17.35it/s]
 47%|     | 37/79 [00:02<00:02, 19.10it/s]
 51%|     | 40/79 [00:02<00:01, 20.58it/s]
 54%|    | 43/79 [00:02<00:01, 21.81it/s]
 58%|    | 46/79 [00:02<00:01, 22.77it/s]
 62%|   | 49/79 [00:02<00:01, 23.28it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.23it/s]
 24%|       | 19/79 [00:01<00:08,  6.85it/s]
 28%|       | 22/79 [00:01<00:06,  8.71it/s]
 32%|      | 25/79 [00:01<00:04, 10.85it/s]
 35%|      | 28/79 [00:02<00:03, 12.99it/s]
 39%|      | 31/79 [00:02<00:03, 15.15it/s]
 43%|     | 34/79 [00:02<00:02, 17.24it/s]
 47%|     | 37/79 [00:02<00:02, 19.10it/s]
 51%|     | 40/79 [00:02<00:01, 20.09it/s]
 54%|    | 43/79 [00:02<00:01, 21.52it/s]
 58%|    | 46/79 [00:02<00:01, 22.43it/s]
 62%|   | 49/79 [00:02<00:01, 23.12it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.02it/s]
 13%|        | 10/79 [00:01<00:24,  2.79it/s]
 16%|        | 13/79 [00:01<00:17,  3.81it/s]
 20%|        | 16/79 [00:01<00:12,  5.11it/s]
 24%|       | 19/79 [00:01<00:08,  6.71it/s]
 28%|       | 22/79 [00:01<00:06,  8.63it/s]
 32%|      | 25/79 [00:01<00:05, 10.71it/s]
 35%|      | 28/79 [00:02<00:03, 12.93it/s]
 39%|      | 31/79 [00:02<00:03, 15.16it/s]
 43%|     | 34/79 [00:02<00:02, 17.02it/s]
 47%|     | 37/79 [00:02<00:02, 18.85it/s]
 51%|     | 40/79 [00:02<00:01, 20.08it/s]
 54%|    | 43/79 [00:02<00:01, 21.35it/s]
 58%|    | 46/79 [00:02<00:01, 22.02it/s]
 62%|   | 49/79 [00:02<00:01, 22.81it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.23it/s]
 24%|       | 19/79 [00:01<00:08,  6.86it/s]
 28%|       | 22/79 [00:01<00:06,  8.76it/s]
 32%|      | 25/79 [00:01<00:04, 10.84it/s]
 35%|      | 28/79 [00:02<00:03, 13.02it/s]
 39%|      | 31/79 [00:02<00:03, 15.18it/s]
 43%|     | 34/79 [00:02<00:02, 17.13it/s]
 47%|     | 37/79 [00:02<00:02, 18.81it/s]
 51%|     | 40/79 [00:02<00:01, 20.12it/s]
 54%|    | 43/79 [00:02<00:01, 21.39it/s]
 58%|    | 46/79 [00:02<00:01, 22.15it/s]
 62%|   | 49/79 [00:02<00:01, 22.83it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:51,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.82it/s]
 16%|        | 13/79 [00:01<00:17,  3.85it/s]
 20%|        | 16/79 [00:01<00:12,  5.15it/s]
 24%|       | 19/79 [00:01<00:08,  6.73it/s]
 28%|       | 22/79 [00:01<00:06,  8.63it/s]
 32%|      | 25/79 [00:01<00:05, 10.71it/s]
 35%|      | 28/79 [00:02<00:03, 12.86it/s]
 39%|      | 31/79 [00:02<00:03, 15.06it/s]
 43%|     | 34/79 [00:02<00:02, 17.00it/s]
 47%|     | 37/79 [00:02<00:02, 18.65it/s]
 51%|     | 40/79 [00:02<00:01, 20.20it/s]
 54%|    | 43/79 [00:02<00:01, 21.57it/s]
 58%|    | 46/79 [00:02<00:01, 22.21it/s]
 62%|   | 49/79 [00:02<00:01, 23.16it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.84it/s]
 28%|       | 22/79 [00:01<00:06,  8.72it/s]
 32%|      | 25/79 [00:01<00:04, 10.85it/s]
 35%|      | 28/79 [00:02<00:03, 13.07it/s]
 39%|      | 31/79 [00:02<00:03, 15.26it/s]
 43%|     | 34/79 [00:02<00:02, 17.37it/s]
 47%|     | 37/79 [00:02<00:02, 19.10it/s]
 51%|     | 40/79 [00:02<00:01, 20.56it/s]
 54%|    | 43/79 [00:02<00:01, 21.62it/s]
 58%|    | 46/79 [00:02<00:01, 22.30it/s]
 62%|   | 49/79 [00:02<00:01, 22.36it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.97it/s]
 20%|        | 16/79 [00:01<00:11,  5.31it/s]
 24%|       | 19/79 [00:01<00:08,  6.95it/s]
 28%|       | 22/79 [00:01<00:06,  8.85it/s]
 32%|      | 25/79 [00:01<00:04, 11.01it/s]
 35%|      | 28/79 [00:02<00:03, 13.20it/s]
 39%|      | 31/79 [00:02<00:03, 15.36it/s]
 43%|     | 34/79 [00:02<00:02, 17.09it/s]
 47%|     | 37/79 [00:02<00:02, 18.62it/s]
 51%|     | 40/79 [00:02<00:01, 20.01it/s]
 54%|    | 43/79 [00:02<00:01, 21.10it/s]
 58%|    | 46/79 [00:02<00:01, 22.01it/s]
 62%|   | 49/79 [00:02<00:01, 22.61it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.27it/s]
 24%|       | 19/79 [00:01<00:08,  6.85it/s]
 28%|       | 22/79 [00:01<00:06,  8.74it/s]
 32%|      | 25/79 [00:01<00:05, 10.76it/s]
 35%|      | 28/79 [00:02<00:03, 12.99it/s]
 39%|      | 31/79 [00:02<00:03, 15.04it/s]
 43%|     | 34/79 [00:02<00:02, 17.02it/s]
 47%|     | 37/79 [00:02<00:02, 18.63it/s]
 51%|     | 40/79 [00:02<00:01, 20.15it/s]
 54%|    | 43/79 [00:02<00:01, 21.06it/s]
 58%|    | 46/79 [00:02<00:01, 21.90it/s]
 62%|   | 49/79 [00:02<00:01, 22.69it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:16,  3.89it/s]
 20%|        | 16/79 [00:01<00:12,  5.18it/s]
 24%|       | 19/79 [00:01<00:08,  6.77it/s]
 28%|       | 22/79 [00:01<00:06,  8.66it/s]
 32%|      | 25/79 [00:01<00:05, 10.77it/s]
 35%|      | 28/79 [00:02<00:03, 12.93it/s]
 39%|      | 31/79 [00:02<00:03, 15.11it/s]
 43%|     | 34/79 [00:02<00:02, 17.01it/s]
 47%|     | 37/79 [00:02<00:02, 18.96it/s]
 51%|     | 40/79 [00:02<00:01, 20.41it/s]
 54%|    | 43/79 [00:02<00:01, 21.56it/s]
 58%|    | 46/79 [00:02<00:01, 22.39it/s]
 62%|   | 49/79 [00:02<00:01, 23.09it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.30it/s]
 24%|       | 19/79 [00:01<00:08,  6.93it/s]
 28%|       | 22/79 [00:01<00:06,  8.85it/s]
 32%|      | 25/79 [00:01<00:05, 10.79it/s]
 35%|      | 28/79 [00:02<00:03, 12.85it/s]
 39%|      | 31/79 [00:02<00:03, 15.02it/s]
 43%|     | 34/79 [00:02<00:02, 16.79it/s]
 47%|     | 37/79 [00:02<00:02, 18.45it/s]
 51%|     | 40/79 [00:02<00:01, 19.79it/s]
 54%|    | 43/79 [00:02<00:01, 21.06it/s]
 58%|    | 46/79 [00:02<00:01, 22.08it/s]
 62%|   | 49/79 [00:02<00:01, 22.64it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.18it/s]
 24%|       | 19/79 [00:01<00:08,  6.76it/s]
 28%|       | 22/79 [00:01<00:06,  8.67it/s]
 32%|      | 25/79 [00:01<00:05, 10.76it/s]
 35%|      | 28/79 [00:02<00:03, 13.00it/s]
 39%|      | 31/79 [00:02<00:03, 15.19it/s]
 43%|     | 34/79 [00:02<00:02, 17.24it/s]
 47%|     | 37/79 [00:02<00:02, 19.00it/s]
 51%|     | 40/79 [00:02<00:01, 20.42it/s]
 54%|    | 43/79 [00:02<00:01, 21.43it/s]
 58%|    | 46/79 [00:02<00:01, 21.95it/s]
 62%|   | 49/79 [00:02<00:01, 22.66it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:17,  3.88it/s]
 20%|        | 16/79 [00:01<00:12,  5.19it/s]
 24%|       | 19/79 [00:01<00:08,  6.81it/s]
 28%|       | 22/79 [00:01<00:06,  8.67it/s]
 32%|      | 25/79 [00:01<00:05, 10.60it/s]
 35%|      | 28/79 [00:02<00:03, 12.84it/s]
 39%|      | 31/79 [00:02<00:03, 14.97it/s]
 43%|     | 34/79 [00:02<00:02, 16.84it/s]
 47%|     | 37/79 [00:02<00:02, 18.53it/s]
 51%|     | 40/79 [00:02<00:01, 19.97it/s]
 54%|    | 43/79 [00:02<00:01, 21.05it/s]
 58%|    | 46/79 [00:02<00:01, 22.09it/s]
 62%|   | 49/79 [00:02<00:01, 22.74it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:52,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.01it/s]
 13%|        | 10/79 [00:01<00:24,  2.77it/s]
 16%|        | 13/79 [00:01<00:17,  3.78it/s]
 20%|        | 16/79 [00:01<00:12,  5.05it/s]
 24%|       | 19/79 [00:01<00:09,  6.63it/s]
 28%|       | 22/79 [00:01<00:06,  8.50it/s]
 32%|      | 25/79 [00:01<00:05, 10.61it/s]
 35%|      | 28/79 [00:02<00:03, 12.81it/s]
 39%|      | 31/79 [00:02<00:03, 14.98it/s]
 43%|     | 34/79 [00:02<00:02, 17.01it/s]
 47%|     | 37/79 [00:02<00:02, 18.67it/s]
 51%|     | 40/79 [00:02<00:01, 20.01it/s]
 54%|    | 43/79 [00:02<00:01, 21.39it/s]
 58%|    | 46/79 [00:02<00:01, 22.41it/s]
 62%|   | 49/79 [00:02<00:01, 23.24it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.00it/s]
  5%|         | 4/79 [00:01<00:53,  1.41it/s]
  9%|         | 7/79 [00:01<00:36,  1.96it/s]
 13%|        | 10/79 [00:01<00:25,  2.72it/s]
 16%|        | 13/79 [00:01<00:17,  3.70it/s]
 20%|        | 16/79 [00:01<00:12,  4.97it/s]
 24%|       | 19/79 [00:01<00:09,  6.56it/s]
 28%|       | 22/79 [00:01<00:06,  8.39it/s]
 32%|      | 25/79 [00:01<00:05, 10.47it/s]
 35%|      | 28/79 [00:02<00:04, 12.68it/s]
 39%|      | 31/79 [00:02<00:03, 14.92it/s]
 43%|     | 34/79 [00:02<00:02, 16.93it/s]
 47%|     | 37/79 [00:02<00:02, 18.71it/s]
 51%|     | 40/79 [00:02<00:01, 19.95it/s]
 54%|    | 43/79 [00:02<00:01, 21.29it/s]
 58%|    | 46/79 [00:02<00:01, 22.28it/s]
 62%|   | 49/79 [00:02<00:01, 22.99it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:19,  1.02s/it]
  5%|         | 4/79 [00:01<00:54,  1.38it/s]
  9%|         | 7/79 [00:01<00:37,  1.93it/s]
 13%|        | 10/79 [00:01<00:25,  2.67it/s]
 16%|        | 13/79 [00:01<00:18,  3.64it/s]
 20%|        | 16/79 [00:01<00:12,  4.89it/s]
 24%|       | 19/79 [00:01<00:09,  6.47it/s]
 28%|       | 22/79 [00:01<00:06,  8.28it/s]
 32%|      | 25/79 [00:01<00:05, 10.35it/s]
 35%|      | 28/79 [00:02<00:04, 12.57it/s]
 39%|      | 31/79 [00:02<00:03, 14.83it/s]
 43%|     | 34/79 [00:02<00:02, 16.82it/s]
 47%|     | 37/79 [00:02<00:02, 18.55it/s]
 51%|     | 40/79 [00:02<00:01, 20.13it/s]
 54%|    | 43/79 [00:02<00:01, 21.18it/s]
 58%|    | 46/79 [00:02<00:01, 21.95it/s]
 62%|   | 49/79 [00:02<00:01, 22.55it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.79it/s]
 16%|        | 13/79 [00:01<00:17,  3.80it/s]
 20%|        | 16/79 [00:01<00:12,  5.10it/s]
 24%|       | 19/79 [00:01<00:08,  6.68it/s]
 28%|       | 22/79 [00:01<00:06,  8.54it/s]
 32%|      | 25/79 [00:01<00:05, 10.63it/s]
 35%|      | 28/79 [00:02<00:03, 12.82it/s]
 39%|      | 31/79 [00:02<00:03, 14.88it/s]
 43%|     | 34/79 [00:02<00:02, 16.81it/s]
 47%|     | 37/79 [00:02<00:02, 18.48it/s]
 51%|     | 40/79 [00:02<00:01, 19.79it/s]
 54%|    | 43/79 [00:02<00:01, 20.84it/s]
 58%|    | 46/79 [00:02<00:01, 21.72it/s]
 62%|   | 49/79 [00:02<00:01, 22.57it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.82it/s]
 16%|        | 13/79 [00:01<00:17,  3.83it/s]
 20%|        | 16/79 [00:01<00:12,  5.12it/s]
 24%|       | 19/79 [00:01<00:08,  6.70it/s]
 28%|       | 22/79 [00:01<00:06,  8.56it/s]
 32%|      | 25/79 [00:01<00:05, 10.63it/s]
 35%|      | 28/79 [00:02<00:04, 12.57it/s]
 39%|      | 31/79 [00:02<00:03, 14.69it/s]
 43%|     | 34/79 [00:02<00:02, 16.64it/s]
 47%|     | 37/79 [00:02<00:02, 18.35it/s]
 51%|     | 40/79 [00:02<00:01, 19.93it/s]
 54%|    | 43/79 [00:02<00:01, 21.14it/s]
 58%|    | 46/79 [00:02<00:01, 21.86it/s]
 62%|   | 49/79 [00:02<00:01, 22.70it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  4%|         | 3/79 [00:01<00:50,  1.49it/s]
  8%|         | 6/79 [00:01<00:35,  2.08it/s]
 11%|        | 9/79 [00:01<00:24,  2.86it/s]
 15%|        | 12/79 [00:01<00:17,  3.90it/s]
 19%|        | 15/79 [00:01<00:12,  5.20it/s]
 23%|       | 18/79 [00:01<00:08,  6.80it/s]
 27%|       | 21/79 [00:01<00:06,  8.68it/s]
 30%|       | 24/79 [00:01<00:05, 10.67it/s]
 34%|      | 27/79 [00:02<00:04, 12.84it/s]
 38%|      | 30/79 [00:02<00:03, 14.77it/s]
 42%|     | 33/79 [00:02<00:02, 16.59it/s]
 46%|     | 36/79 [00:02<00:02, 18.17it/s]
 49%|     | 39/79 [00:02<00:02, 19.15it/s]
 53%|    | 42/79 [00:02<00:01, 20.45it/s]
 57%|    | 45/79 [00:02<00:01, 20.92it/s]
 61%|    | 48/79 [00:02<00:01, 21.88it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  5%|         | 4/79 [00:01<00:52,  1.42it/s]
  9%|         | 7/79 [00:01<00:36,  1.98it/s]
 13%|        | 10/79 [00:01<00:25,  2.73it/s]
 16%|        | 13/79 [00:01<00:17,  3.73it/s]
 20%|        | 16/79 [00:01<00:12,  4.99it/s]
 24%|       | 19/79 [00:01<00:09,  6.56it/s]
 28%|       | 22/79 [00:01<00:06,  8.43it/s]
 32%|      | 25/79 [00:01<00:05, 10.50it/s]
 35%|      | 28/79 [00:02<00:04, 12.71it/s]
 39%|      | 31/79 [00:02<00:03, 14.75it/s]
 43%|     | 34/79 [00:02<00:02, 16.69it/s]
 47%|     | 37/79 [00:02<00:02, 18.35it/s]
 51%|     | 40/79 [00:02<00:01, 19.81it/s]
 54%|    | 43/79 [00:02<00:01, 20.97it/s]
 58%|    | 46/79 [00:02<00:01, 22.00it/s]
 62%|   | 49/79 [00:02<00:01, 22.90it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.02it/s]
 13%|        | 10/79 [00:01<00:24,  2.79it/s]
 16%|        | 13/79 [00:01<00:17,  3.79it/s]
 20%|        | 16/79 [00:01<00:12,  5.06it/s]
 24%|       | 19/79 [00:01<00:09,  6.62it/s]
 28%|       | 22/79 [00:01<00:06,  8.47it/s]
 32%|      | 25/79 [00:01<00:05, 10.51it/s]
 35%|      | 28/79 [00:02<00:04, 12.57it/s]
 39%|      | 31/79 [00:02<00:03, 14.67it/s]
 43%|     | 34/79 [00:02<00:02, 16.56it/s]
 47%|     | 37/79 [00:02<00:02, 18.08it/s]
 51%|     | 40/79 [00:02<00:01, 19.56it/s]
 54%|    | 43/79 [00:02<00:01, 20.68it/s]
 58%|    | 46/79 [00:02<00:01, 21.57it/s]
 62%|   | 49/79 [00:02<00:01, 22.40it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.02it/s]
 13%|        | 10/79 [00:01<00:24,  2.78it/s]
 16%|        | 13/79 [00:01<00:17,  3.78it/s]
 20%|        | 16/79 [00:01<00:12,  5.06it/s]
 24%|       | 19/79 [00:01<00:09,  6.63it/s]
 28%|       | 22/79 [00:01<00:06,  8.45it/s]
 32%|      | 25/79 [00:01<00:05, 10.52it/s]
 35%|      | 28/79 [00:02<00:04, 12.64it/s]
 39%|      | 31/79 [00:02<00:03, 14.84it/s]
 43%|     | 34/79 [00:02<00:02, 16.89it/s]
 47%|     | 37/79 [00:02<00:02, 18.43it/s]
 51%|     | 40/79 [00:02<00:01, 19.79it/s]
 54%|    | 43/79 [00:02<00:01, 20.79it/s]
 58%|    | 46/79 [00:02<00:01, 21.38it/s]
 62%|   | 49/79 [00:02<00:01, 22.26it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.43it/s]
  9%|         | 7/79 [00:01<00:36,  1.99it/s]
 13%|        | 10/79 [00:01<00:25,  2.74it/s]
 16%|        | 13/79 [00:01<00:17,  3.74it/s]
 20%|        | 16/79 [00:01<00:12,  5.00it/s]
 24%|       | 19/79 [00:01<00:09,  6.57it/s]
 28%|       | 22/79 [00:01<00:06,  8.37it/s]
 32%|      | 25/79 [00:01<00:05, 10.39it/s]
 35%|      | 28/79 [00:02<00:04, 12.57it/s]
 39%|      | 31/79 [00:02<00:03, 14.63it/s]
 43%|     | 34/79 [00:02<00:02, 16.49it/s]
 47%|     | 37/79 [00:02<00:02, 18.20it/s]
 51%|     | 40/79 [00:02<00:01, 19.77it/s]
 54%|    | 43/79 [00:02<00:01, 20.91it/s]
 58%|    | 46/79 [00:02<00:01, 21.55it/s]
 62%|   | 49/79 [00:02<00:01, 22.35it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:22,  1.06s/it]
  5%|         | 4/79 [00:01<00:56,  1.33it/s]
  9%|         | 7/79 [00:01<00:38,  1.85it/s]
 13%|        | 10/79 [00:01<00:26,  2.57it/s]
 16%|        | 13/79 [00:01<00:18,  3.52it/s]
 20%|        | 16/79 [00:01<00:13,  4.74it/s]
 24%|       | 19/79 [00:01<00:09,  6.26it/s]
 28%|       | 22/79 [00:01<00:07,  8.04it/s]
 32%|      | 25/79 [00:02<00:05, 10.13it/s]
 35%|      | 28/79 [00:02<00:04, 12.26it/s]
 39%|      | 31/79 [00:02<00:03, 14.54it/s]
 43%|     | 34/79 [00:02<00:02, 16.67it/s]
 47%|     | 37/79 [00:02<00:02, 18.42it/s]
 51%|     | 40/79 [00:02<00:01, 19.86it/s]
 54%|    | 43/79 [00:02<00:01, 21.42it/s]
 58%|    | 46/79 [00:02<00:01, 22.31it/s]
 62%|   | 49/79 [00:02<00:01, 22.79it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:22,  1.06s/it]
  5%|         | 4/79 [00:01<00:56,  1.33it/s]
  9%|         | 7/79 [00:01<00:38,  1.85it/s]
 13%|        | 10/79 [00:01<00:26,  2.56it/s]
 16%|        | 13/79 [00:01<00:18,  3.50it/s]
 20%|        | 16/79 [00:01<00:13,  4.70it/s]
 24%|       | 19/79 [00:01<00:09,  6.21it/s]
 28%|       | 22/79 [00:01<00:07,  8.03it/s]
 32%|      | 25/79 [00:02<00:05, 10.09it/s]
 35%|      | 28/79 [00:02<00:04, 12.22it/s]
 39%|      | 31/79 [00:02<00:03, 14.26it/s]
 43%|     | 34/79 [00:02<00:02, 16.41it/s]
 47%|     | 37/79 [00:02<00:02, 18.11it/s]
 51%|     | 40/79 [00:02<00:01, 19.82it/s]
 54%|    | 43/79 [00:02<00:01, 21.01it/s]
 58%|    | 46/79 [00:02<00:01, 22.06it/s]
 62%|   | 49/79 [00:03<00:01, 22.64it/s]
 66%|   | 52/79 [00:03<00:01, 23.76it/s]
 70%|   | 55/79 [00:03<00:00, 24.31it/s]
 73%|  | 58/79 [00:03<00:00, 24.43it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 25.13it/s]
 85%| | 67/79 [00:03<00:00, 25.09it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 25.21it/s]
 96%|| 76/79 [00:03<00:00, 25.75it/s]
100%|| 79/79 [00:04<00:00, 26.57it/s]
, 23.81it/s]
 70%|   | 55/79 [00:03<00:00, 24.09it/s]
 73%|  | 58/79 [00:03<00:00, 24.22it/s]
 77%|  | 61/79 [00:03<00:00, 24.39it/s]
 81%|  | 64/79 [00:03<00:00, 24.60it/s]
 85%| | 67/79 [00:03<00:00, 24.90it/s]
 89%| | 70/79 [00:03<00:00, 24.55it/s]
 92%|| 73/79 [00:03<00:00, 24.83it/s]
 96%|| 76/79 [00:03<00:00, 25.42it/s]
100%|| 79/79 [00:04<00:00, 26.26it/s]
, 23.78it/s]
 70%|   | 55/79 [00:03<00:00, 24.11it/s]
 73%|  | 58/79 [00:03<00:00, 24.45it/s]
 77%|  | 61/79 [00:03<00:00, 24.40it/s]
 81%|  | 64/79 [00:03<00:00, 24.62it/s]
 85%| | 67/79 [00:03<00:00, 24.75it/s]
 89%| | 70/79 [00:03<00:00, 24.81it/s]
 92%|| 73/79 [00:03<00:00, 24.87it/s]
 96%|| 76/79 [00:03<00:00, 25.28it/s]
100%|| 79/79 [00:04<00:00, 26.18it/s]
, 23.35it/s]
 70%|   | 55/79 [00:03<00:01, 23.78it/s]
 73%|  | 58/79 [00:03<00:00, 23.98it/s]
 77%|  | 61/79 [00:03<00:00, 24.23it/s]
 81%|  | 64/79 [00:03<00:00, 24.19it/s]
 85%| | 67/79 [00:03<00:00, 24.06it/s]
 89%| | 70/79 [00:03<00:00, 24.17it/s]
 92%|| 73/79 [00:03<00:00, 24.70it/s]
 96%|| 76/79 [00:03<00:00, 25.43it/s]
100%|| 79/79 [00:04<00:00, 26.32it/s]
, 23.39it/s]
 70%|   | 55/79 [00:03<00:01, 23.79it/s]
 73%|  | 58/79 [00:03<00:00, 24.00it/s]
 77%|  | 61/79 [00:03<00:00, 24.29it/s]
 81%|  | 64/79 [00:03<00:00, 24.34it/s]
 85%| | 67/79 [00:03<00:00, 24.44it/s]
 89%| | 70/79 [00:03<00:00, 24.47it/s]
 92%|| 73/79 [00:03<00:00, 24.81it/s]
 96%|| 76/79 [00:03<00:00, 25.43it/s]
100%|| 79/79 [00:04<00:00, 26.15it/s]
, 23.35it/s]
 70%|   | 55/79 [00:03<00:01, 23.65it/s]
 73%|  | 58/79 [00:03<00:00, 23.96it/s]
 77%|  | 61/79 [00:03<00:00, 24.29it/s]
 81%|  | 64/79 [00:03<00:00, 24.24it/s]
 85%| | 67/79 [00:03<00:00, 24.47it/s]
 89%| | 70/79 [00:03<00:00, 24.02it/s]
 92%|| 73/79 [00:03<00:00, 24.42it/s]
 96%|| 76/79 [00:03<00:00, 25.18it/s]
100%|| 79/79 [00:04<00:00, 26.19it/s]
, 23.34it/s]
 70%|   | 55/79 [00:03<00:01, 23.54it/s]
 73%|  | 58/79 [00:03<00:00, 23.74it/s]
 77%|  | 61/79 [00:03<00:00, 24.05it/s]
 81%|  | 64/79 [00:03<00:00, 24.01it/s]
 85%| | 67/79 [00:03<00:00, 24.37it/s]
 89%| | 70/79 [00:03<00:00, 24.64it/s]
 92%|| 73/79 [00:03<00:00, 24.94it/s]
 96%|| 76/79 [00:03<00:00, 25.61it/s]
100%|| 79/79 [00:04<00:00, 26.55it/s]
, 23.47it/s]
 70%|   | 55/79 [00:03<00:01, 23.82it/s]
 73%|  | 58/79 [00:03<00:00, 24.20it/s]
 77%|  | 61/79 [00:03<00:00, 24.08it/s]
 81%|  | 64/79 [00:03<00:00, 23.93it/s]
 85%| | 67/79 [00:03<00:00, 24.12it/s]
 89%| | 70/79 [00:03<00:00, 24.31it/s]
 92%|| 73/79 [00:03<00:00, 24.62it/s]
 96%|| 76/79 [00:04<00:00, 25.34it/s]
100%|| 79/79 [00:04<00:00, 26.36it/s]
, 23.54it/s]
 70%|   | 55/79 [00:03<00:01, 23.85it/s]
 73%|  | 58/79 [00:03<00:00, 24.25it/s]
 77%|  | 61/79 [00:03<00:00, 24.43it/s]
 81%|  | 64/79 [00:03<00:00, 24.68it/s]
 85%| | 67/79 [00:03<00:00, 24.62it/s]
 89%| | 70/79 [00:03<00:00, 24.65it/s]
 92%|| 73/79 [00:03<00:00, 25.08it/s]
 96%|| 76/79 [00:04<00:00, 25.73it/s]
100%|| 79/79 [00:04<00:00, 26.57it/s]
, 23.39it/s]
 70%|   | 55/79 [00:03<00:01, 23.53it/s]
 73%|  | 58/79 [00:03<00:00, 23.61it/s]
 77%|  | 61/79 [00:03<00:00, 23.91it/s]
 81%|  | 64/79 [00:03<00:00, 24.25it/s]
 85%| | 67/79 [00:03<00:00, 24.28it/s]
 89%| | 70/79 [00:03<00:00, 24.54it/s]
 92%|| 73/79 [00:03<00:00, 24.86it/s]
 96%|| 76/79 [00:04<00:00, 25.68it/s]
100%|| 79/79 [00:04<00:00, 26.54it/s]
, 23.07it/s]
 70%|   | 55/79 [00:03<00:01, 23.70it/s]
 73%|  | 58/79 [00:03<00:00, 24.06it/s]
 77%|  | 61/79 [00:03<00:00, 24.06it/s]
 81%|  | 64/79 [00:03<00:00, 23.75it/s]
 85%| | 67/79 [00:03<00:00, 24.02it/s]
 89%| | 70/79 [00:03<00:00, 23.85it/s]
 92%|| 73/79 [00:03<00:00, 24.43it/s]
 96%|| 76/79 [00:04<00:00, 25.18it/s]
100%|| 79/79 [00:04<00:00, 26.05it/s]
, 23.20it/s]
 70%|   | 55/79 [00:03<00:01, 23.50it/s]
 73%|  | 58/79 [00:03<00:00, 23.54it/s]
 77%|  | 61/79 [00:03<00:00, 23.77it/s]
 81%|  | 64/79 [00:03<00:00, 23.89it/s]
 85%| | 67/79 [00:03<00:00, 24.03it/s]
 89%| | 70/79 [00:03<00:00, 23.61it/s]
 92%|| 73/79 [00:03<00:00, 24.22it/s]
 96%|| 76/79 [00:04<00:00, 24.89it/s]
100%|| 79/79 [00:04<00:00, 26.03it/s]
, 23.11it/s]
 70%|   | 55/79 [00:03<00:01, 23.32it/s]
 73%|  | 58/79 [00:03<00:00, 23.77it/s]
 77%|  | 61/79 [00:03<00:00, 23.90it/s]
 81%|  | 64/79 [00:03<00:00, 24.06it/s]
 85%| | 67/79 [00:03<00:00, 23.73it/s]
 89%| | 70/79 [00:03<00:00, 23.73it/s]
 92%|| 73/79 [00:03<00:00, 24.15it/s]
 96%|| 76/79 [00:04<00:00, 24.79it/s]
100%|| 79/79 [00:04<00:00, 25.84it/s]
, 23.34it/s]
 70%|   | 55/79 [00:03<00:01, 23.77it/s]
 73%|  | 58/79 [00:03<00:00, 24.12it/s]
 77%|  | 61/79 [00:03<00:00, 24.27it/s]
 81%|  | 64/79 [00:03<00:00, 24.25it/s]
 85%| | 67/79 [00:03<00:00, 24.38it/s]
 89%| | 70/79 [00:03<00:00, 24.57it/s]
 92%|| 73/79 [00:03<00:00, 24.94it/s]
 96%|| 76/79 [00:04<00:00, 25.50it/s]
100%|| 79/79 [00:04<00:00, 26.50it/s]
, 23.50it/s]
 70%|   | 55/79 [00:03<00:01, 23.85it/s]
 73%|  | 58/79 [00:03<00:00, 24.08it/s]
 77%|  | 61/79 [00:03<00:00, 24.26it/s]
 81%|  | 64/79 [00:03<00:00, 24.79it/s]
 85%| | 67/79 [00:03<00:00, 24.93it/s]
 89%| | 70/79 [00:03<00:00, 24.75it/s]
 92%|| 73/79 [00:03<00:00, 24.74it/s]
 96%|| 76/79 [00:03<00:00, 25.52it/s]
100%|| 79/79 [00:04<00:00,  8.40it/s]
, 23.77it/s]
 70%|   | 55/79 [00:03<00:01, 23.73it/s]
 73%|  | 58/79 [00:03<00:00, 24.04it/s]
 77%|  | 61/79 [00:03<00:00, 24.17it/s]
 81%|  | 64/79 [00:03<00:00, 24.11it/s]
 85%| | 67/79 [00:03<00:00, 23.93it/s]
 89%| | 70/79 [00:03<00:00, 24.20it/s]
 92%|| 73/79 [00:03<00:00, 24.24it/s]
 96%|| 76/79 [00:03<00:00, 25.09it/s]
100%|| 79/79 [00:04<00:00,  8.41it/s]
, 23.85it/s]
 70%|   | 55/79 [00:03<00:00, 24.11it/s]
 73%|  | 58/79 [00:03<00:00, 24.23it/s]
 77%|  | 61/79 [00:03<00:00, 24.54it/s]
 81%|  | 64/79 [00:03<00:00, 24.77it/s]
 85%| | 67/79 [00:03<00:00, 24.90it/s]
 89%| | 70/79 [00:03<00:00, 24.91it/s]
 92%|| 73/79 [00:03<00:00, 25.11it/s]
 96%|| 76/79 [00:04<00:00,  8.36it/s]
100%|| 79/79 [00:04<00:00, 10.55it/s]
, 23.67it/s]
 70%|   | 55/79 [00:03<00:01, 23.66it/s]
 73%|  | 58/79 [00:03<00:00, 24.17it/s]
 77%|  | 61/79 [00:03<00:00, 24.18it/s]
 81%|  | 64/79 [00:03<00:00, 24.55it/s]
 85%| | 67/79 [00:03<00:00, 24.44it/s]
 89%| | 70/79 [00:03<00:00, 24.39it/s]
 92%|| 73/79 [00:03<00:00, 24.59it/s]
 96%|| 76/79 [00:03<00:00, 25.26it/s]
100%|| 79/79 [00:04<00:00,  8.39it/s]
, 23.39it/s]
 70%|   | 55/79 [00:03<00:01, 23.94it/s]
 73%|  | 58/79 [00:03<00:00, 24.16it/s]
 77%|  | 61/79 [00:03<00:00, 24.08it/s]
 81%|  | 64/79 [00:03<00:00, 24.45it/s]
 85%| | 67/79 [00:03<00:00, 24.08it/s]
 89%| | 70/79 [00:03<00:00, 24.30it/s]
 92%|| 73/79 [00:03<00:00, 24.56it/s]
 96%|| 76/79 [00:03<00:00, 25.20it/s]
100%|| 79/79 [00:04<00:00,  8.35it/s]
, 23.48it/s]
 70%|   | 55/79 [00:03<00:00, 24.03it/s]
 73%|  | 58/79 [00:03<00:00, 24.36it/s]
 77%|  | 61/79 [00:03<00:00, 24.60it/s]
 81%|  | 64/79 [00:03<00:00, 24.83it/s]
 85%| | 67/79 [00:03<00:00, 24.94it/s]
 89%| | 70/79 [00:03<00:00, 24.98it/s]
 92%|| 73/79 [00:03<00:00, 25.10it/s]
 96%|| 76/79 [00:03<00:00, 25.78it/s]
100%|| 79/79 [00:04<00:00,  8.36it/s]
, 23.48it/s]
 70%|   | 55/79 [00:03<00:01, 23.98it/s]
 73%|  | 58/79 [00:03<00:00, 24.44it/s]
 77%|  | 61/79 [00:03<00:00, 24.13it/s]
 81%|  | 64/79 [00:03<00:00, 24.25it/s]
 85%| | 67/79 [00:03<00:00, 24.32it/s]
 89%| | 70/79 [00:03<00:00, 24.52it/s]
 92%|| 73/79 [00:03<00:00, 24.56it/s]
 96%|| 76/79 [00:03<00:00, 25.27it/s]
100%|| 79/79 [00:04<00:00,  8.39it/s]
21it/s]
 68%|   | 54/79 [00:03<00:01, 23.43it/s]
 72%|  | 57/79 [00:03<00:00, 23.65it/s]
 76%|  | 60/79 [00:03<00:00, 23.71it/s]
 80%|  | 63/79 [00:03<00:00, 23.63it/s]
 84%| | 66/79 [00:03<00:00, 24.00it/s]
 87%| | 69/79 [00:03<00:00, 23.89it/s]
 91%| | 72/79 [00:03<00:00, 24.24it/s]
 95%|| 75/79 [00:03<00:00, 24.93it/s]
 99%|| 78/79 [00:04<00:00, 25.54it/s]
100%|| 79/79 [00:04<00:00, 15.93it/s]
, 22.82it/s]
 70%|   | 55/79 [00:03<00:01, 23.30it/s]
 73%|  | 58/79 [00:03<00:00, 23.62it/s]
 77%|  | 61/79 [00:03<00:00, 23.77it/s]
 81%|  | 64/79 [00:03<00:00, 23.92it/s]
 85%| | 67/79 [00:03<00:00, 24.30it/s]
 89%| | 70/79 [00:03<00:00, 24.20it/s]
 92%|| 73/79 [00:03<00:00, 24.60it/s]
 96%|| 76/79 [00:03<00:00, 25.37it/s]
100%|| 79/79 [00:04<00:00,  8.34it/s]
, 22.59it/s]
 70%|   | 55/79 [00:03<00:01, 22.85it/s]
 73%|  | 58/79 [00:03<00:00, 23.11it/s]
 77%|  | 61/79 [00:03<00:00, 23.45it/s]
 81%|  | 64/79 [00:03<00:00, 23.51it/s]
 85%| | 67/79 [00:03<00:00, 23.77it/s]
 89%| | 70/79 [00:03<00:00, 24.01it/s]
 92%|| 73/79 [00:03<00:00, 24.39it/s]
 96%|| 76/79 [00:03<00:00, 25.19it/s]
100%|| 79/79 [00:04<00:00,  8.43it/s]
, 23.09it/s]
 70%|   | 55/79 [00:03<00:01, 23.58it/s]
 73%|  | 58/79 [00:03<00:00, 23.78it/s]
 77%|  | 61/79 [00:03<00:00, 23.83it/s]
 81%|  | 64/79 [00:03<00:00, 24.03it/s]
 85%| | 67/79 [00:03<00:00, 24.03it/s]
 89%| | 70/79 [00:03<00:00, 24.06it/s]
 92%|| 73/79 [00:03<00:00, 24.63it/s]
 96%|| 76/79 [00:04<00:00, 25.34it/s]
100%|| 79/79 [00:04<00:00,  8.37it/s]
, 23.09it/s]
 70%|   | 55/79 [00:03<00:01, 23.57it/s]
 73%|  | 58/79 [00:03<00:00, 23.87it/s]
 77%|  | 61/79 [00:03<00:00, 24.12it/s]
 81%|  | 64/79 [00:03<00:00, 24.31it/s]
 85%| | 67/79 [00:03<00:00, 24.48it/s]
 89%| | 70/79 [00:03<00:00, 24.58it/s]
 92%|| 73/79 [00:03<00:00, 24.96it/s]
 96%|| 76/79 [00:04<00:00, 25.61it/s]
100%|| 79/79 [00:04<00:00,  8.44it/s]
, 23.05it/s]
 70%|   | 55/79 [00:03<00:01, 23.51it/s]
 73%|  | 58/79 [00:03<00:00, 23.85it/s]
 77%|  | 61/79 [00:03<00:00, 23.98it/s]
 81%|  | 64/79 [00:03<00:00, 24.19it/s]
 85%| | 67/79 [00:03<00:00, 24.33it/s]
 89%| | 70/79 [00:03<00:00, 24.25it/s]
 92%|| 73/79 [00:03<00:00, 24.49it/s]
 96%|| 76/79 [00:04<00:00, 25.29it/s]
100%|| 79/79 [00:04<00:00,  8.39it/s]
, 22.92it/s]
 70%|   | 55/79 [00:03<00:01, 22.81it/s]
 73%|  | 58/79 [00:03<00:00, 23.13it/s]
 77%|  | 61/79 [00:03<00:00, 23.21it/s]
 81%|  | 64/79 [00:03<00:00, 23.55it/s]
 85%| | 67/79 [00:03<00:00, 23.62it/s]
 89%| | 70/79 [00:03<00:00, 23.77it/s]
 92%|| 73/79 [00:03<00:00, 24.31it/s]
 96%|| 76/79 [00:04<00:00, 25.07it/s]
100%|| 79/79 [00:04<00:00,  8.33it/s]
, 23.17it/s]
 70%|   | 55/79 [00:03<00:01, 23.62it/s]
 73%|  | 58/79 [00:03<00:00, 24.23it/s]
 77%|  | 61/79 [00:03<00:00, 24.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.66it/s]
 85%| | 67/79 [00:03<00:00, 24.74it/s]
 89%| | 70/79 [00:03<00:00, 24.97it/s]
 92%|| 73/79 [00:03<00:00, 25.14it/s]
 96%|| 76/79 [00:04<00:00,  8.39it/s]
100%|| 79/79 [00:04<00:00, 10.58it/s]
, 22.69it/s]
 70%|   | 55/79 [00:03<00:01, 23.41it/s]
 73%|  | 58/79 [00:03<00:00, 23.69it/s]
 77%|  | 61/79 [00:03<00:00, 23.94it/s]
 81%|  | 64/79 [00:03<00:00, 24.30it/s]
 85%| | 67/79 [00:03<00:00, 24.74it/s]
 89%| | 70/79 [00:03<00:00, 24.25it/s]
 92%|| 73/79 [00:03<00:00, 24.73it/s]
 96%|| 76/79 [00:04<00:00, 25.26it/s]
100%|| 79/79 [00:04<00:00,  8.31it/s]
, 22.90it/s]
 70%|   | 55/79 [00:03<00:01, 23.23it/s]
 73%|  | 58/79 [00:03<00:00, 23.51it/s]
 77%|  | 61/79 [00:03<00:00, 23.86it/s]
 81%|  | 64/79 [00:03<00:00, 23.91it/s]
 85%| | 67/79 [00:03<00:00, 24.40it/s]
 89%| | 70/79 [00:03<00:00, 24.23it/s]
 92%|| 73/79 [00:03<00:00, 24.52it/s]
 96%|| 76/79 [00:04<00:00, 25.20it/s]
100%|| 79/79 [00:04<00:00,  8.42it/s]
40it/s]
 68%|   | 54/79 [00:03<00:01, 23.06it/s]
 72%|  | 57/79 [00:03<00:00, 23.41it/s]
 76%|  | 60/79 [00:03<00:00, 23.72it/s]
 80%|  | 63/79 [00:03<00:00, 23.74it/s]
 84%| | 66/79 [00:03<00:00, 23.70it/s]
 87%| | 69/79 [00:03<00:00, 23.70it/s]
 91%| | 72/79 [00:03<00:00, 23.79it/s]
 95%|| 75/79 [00:04<00:00, 24.76it/s]
 99%|| 78/79 [00:04<00:00, 25.30it/s]
100%|| 79/79 [00:05<00:00, 15.59it/s]
2020-06-23 15:24:35,650 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:05.081501 (0.032521604919433594 s / img per device, on 32 devices)
2020-06-23 15:24:35,672 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:24:35,672 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:24:35,693 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592951089110, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 2, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592951089111, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 2}}
2020-06-23 15:24:49,444 maskrcnn_benchmark.trainer INFO: eta: 1:28:41  iter: 920  loss: 0.7858 (1.1543)  loss_classifier: 0.3043 (0.4548)  loss_box_reg: 0.1331 (0.1595)  loss_mask: 0.3203 (0.4419)  loss_objectness: 0.0266 (0.0725)  loss_rpn_box_reg: 0.0084 (0.0256)  time: 0.1084 (0.1362)  data: 0.0014 (0.0238)  lr: 0.160000  max mem: 4972
Evaluating predictions
creating index...
2020-06-23 15:24:51,606 maskrcnn_benchmark.trainer INFO: eta: 1:28:15  iter: 940  loss: 0.7818 (1.1475)  loss_classifier: 0.2868 (0.4517)  loss_box_reg: 0.1339 (0.1590)  loss_mask: 0.3398 (0.4397)  loss_objectness: 0.0290 (0.0718)  loss_rpn_box_reg: 0.0139 (0.0254)  time: 0.1076 (0.1356)  data: 0.0015 (0.0233)  lr: 0.160000  max mem: 4972
2020-06-23 15:24:53,764 maskrcnn_benchmark.trainer INFO: eta: 1:27:50  iter: 960  loss: 0.7742 (1.1404)  loss_classifier: 0.3193 (0.4485)  loss_box_reg: 0.1175 (0.1584)  loss_mask: 0.3043 (0.4371)  loss_objectness: 0.0278 (0.0711)  loss_rpn_box_reg: 0.0101 (0.0253)  time: 0.1074 (0.1350)  data: 0.0015 (0.0229)  lr: 0.160000  max mem: 4972
2020-06-23 15:24:55,947 maskrcnn_benchmark.trainer INFO: eta: 1:27:27  iter: 980  loss: 0.8015 (1.1348)  loss_classifier: 0.2980 (0.4458)  loss_box_reg: 0.1201 (0.1581)  loss_mask: 0.3499 (0.4353)  loss_objectness: 0.0289 (0.0703)  loss_rpn_box_reg: 0.0089 (0.0252)  time: 0.1096 (0.1345)  data: 0.0015 (0.0224)  lr: 0.160000  max mem: 4972
2020-06-23 15:24:58,115 maskrcnn_benchmark.trainer INFO: eta: 1:27:04  iter: 1000  loss: 0.8088 (1.1285)  loss_classifier: 0.2872 (0.4428)  loss_box_reg: 0.1229 (0.1578)  loss_mask: 0.3338 (0.4333)  loss_objectness: 0.0268 (0.0696)  loss_rpn_box_reg: 0.0103 (0.0251)  time: 0.1077 (0.1340)  data: 0.0015 (0.0220)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:00,273 maskrcnn_benchmark.trainer INFO: eta: 1:26:41  iter: 1020  loss: 0.9023 (1.1243)  loss_classifier: 0.2921 (0.4408)  loss_box_reg: 0.1478 (0.1577)  loss_mask: 0.3355 (0.4315)  loss_objectness: 0.0432 (0.0692)  loss_rpn_box_reg: 0.0156 (0.0251)  time: 0.1079 (0.1334)  data: 0.0015 (0.0216)  lr: 0.160000  max mem: 4972
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=1.14s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 15:25:02,429 maskrcnn_benchmark.trainer INFO: eta: 1:26:19  iter: 1040  loss: 0.8939 (1.1194)  loss_classifier: 0.3049 (0.4386)  loss_box_reg: 0.1443 (0.1574)  loss_mask: 0.3344 (0.4296)  loss_objectness: 0.0321 (0.0687)  loss_rpn_box_reg: 0.0125 (0.0251)  time: 0.1075 (0.1330)  data: 0.0015 (0.0212)  lr: 0.160000  max mem: 4972
DONE (t=2.11s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.16503
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.33722
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.14086
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.07982
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.18823
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.21433
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.18192
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.30320
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32232
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15390
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.35323
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.41699
2020-06-23 15:25:04,584 maskrcnn_benchmark.trainer INFO: eta: 1:25:58  iter: 1060  loss: 0.7537 (1.1124)  loss_classifier: 0.2561 (0.4351)  loss_box_reg: 0.0993 (0.1565)  loss_mask: 0.3331 (0.4278)  loss_objectness: 0.0286 (0.0680)  loss_rpn_box_reg: 0.0089 (0.0250)  time: 0.1074 (0.1325)  data: 0.0014 (0.0208)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:06,731 maskrcnn_benchmark.trainer INFO: eta: 1:25:37  iter: 1080  loss: 0.9065 (1.1082)  loss_classifier: 0.3271 (0.4331)  loss_box_reg: 0.1464 (0.1564)  loss_mask: 0.3163 (0.4258)  loss_objectness: 0.0268 (0.0679)  loss_rpn_box_reg: 0.0158 (0.0251)  time: 0.1071 (0.1320)  data: 0.0015 (0.0205)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:08,886 maskrcnn_benchmark.trainer INFO: eta: 1:25:18  iter: 1100  loss: 0.7216 (1.1023)  loss_classifier: 0.2802 (0.4305)  loss_box_reg: 0.1136 (0.1558)  loss_mask: 0.3336 (0.4239)  loss_objectness: 0.0235 (0.0672)  loss_rpn_box_reg: 0.0079 (0.0249)  time: 0.1072 (0.1316)  data: 0.0015 (0.0201)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:11,039 maskrcnn_benchmark.trainer INFO: eta: 1:24:58  iter: 1120  loss: 0.8197 (1.0972)  loss_classifier: 0.2720 (0.4282)  loss_box_reg: 0.1348 (0.1554)  loss_mask: 0.3265 (0.4222)  loss_objectness: 0.0291 (0.0666)  loss_rpn_box_reg: 0.0167 (0.0249)  time: 0.1076 (0.1311)  data: 0.0015 (0.0198)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:13,182 maskrcnn_benchmark.trainer INFO: eta: 1:24:39  iter: 1140  loss: 0.7731 (1.0915)  loss_classifier: 0.2310 (0.4256)  loss_box_reg: 0.1146 (0.1549)  loss_mask: 0.3038 (0.4202)  loss_objectness: 0.0261 (0.0660)  loss_rpn_box_reg: 0.0141 (0.0248)  time: 0.1063 (0.1307)  data: 0.0015 (0.0195)  lr: 0.160000  max mem: 4972
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:25:15,332 maskrcnn_benchmark.trainer INFO: eta: 1:24:21  iter: 1160  loss: 0.8179 (1.0862)  loss_classifier: 0.3053 (0.4232)  loss_box_reg: 0.1204 (0.1543)  loss_mask: 0.3242 (0.4184)  loss_objectness: 0.0255 (0.0655)  loss_rpn_box_reg: 0.0114 (0.0247)  time: 0.1069 (0.1303)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 4972
DONE (t=3.20s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:25:17,498 maskrcnn_benchmark.trainer INFO: eta: 1:24:04  iter: 1180  loss: 0.7818 (1.0816)  loss_classifier: 0.2756 (0.4212)  loss_box_reg: 0.1303 (0.1540)  loss_mask: 0.3176 (0.4168)  loss_objectness: 0.0244 (0.0650)  loss_rpn_box_reg: 0.0105 (0.0246)  time: 0.1082 (0.1300)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:19,684 maskrcnn_benchmark.trainer INFO: eta: 1:23:48  iter: 1200  loss: 0.8416 (1.0780)  loss_classifier: 0.3200 (0.4195)  loss_box_reg: 0.1490 (0.1538)  loss_mask: 0.3222 (0.4153)  loss_objectness: 0.0255 (0.0648)  loss_rpn_box_reg: 0.0082 (0.0246)  time: 0.1089 (0.1296)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 4972
DONE (t=3.56s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.16793
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.31718
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.15788
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.06056
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.18808
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.25212
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.18762
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.30019
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.31725
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13656
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.35067
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.43146
2020-06-23 15:25:21,380 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.16502772350624223, segm mAP: 0.16792971828922143
:::MLLOG {"namespace": "", "time_ms": 1592951121380, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.16502772350624223, "SEGM": 0.16792971828922143}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592951121380, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 1}}
2020-06-23 15:25:22,125 maskrcnn_benchmark.trainer INFO: eta: 1:23:41  iter: 1220  loss: 0.6696 (1.0723)  loss_classifier: 0.2595 (0.4170)  loss_box_reg: 0.1123 (0.1533)  loss_mask: 0.2931 (0.4135)  loss_objectness: 0.0233 (0.0642)  loss_rpn_box_reg: 0.0062 (0.0244)  time: 0.1075 (0.1295)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:24,273 maskrcnn_benchmark.trainer INFO: eta: 1:23:24  iter: 1240  loss: 0.9058 (1.0692)  loss_classifier: 0.3233 (0.4158)  loss_box_reg: 0.1490 (0.1532)  loss_mask: 0.3277 (0.4120)  loss_objectness: 0.0222 (0.0639)  loss_rpn_box_reg: 0.0133 (0.0243)  time: 0.1070 (0.1291)  data: 0.0015 (0.0180)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:26,427 maskrcnn_benchmark.trainer INFO: eta: 1:23:09  iter: 1260  loss: 0.8185 (1.0656)  loss_classifier: 0.2962 (0.4143)  loss_box_reg: 0.1179 (0.1530)  loss_mask: 0.3228 (0.4104)  loss_objectness: 0.0318 (0.0636)  loss_rpn_box_reg: 0.0169 (0.0243)  time: 0.1074 (0.1288)  data: 0.0015 (0.0178)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:28,593 maskrcnn_benchmark.trainer INFO: eta: 1:22:54  iter: 1280  loss: 0.8111 (1.0617)  loss_classifier: 0.3043 (0.4128)  loss_box_reg: 0.1357 (0.1527)  loss_mask: 0.3073 (0.4089)  loss_objectness: 0.0274 (0.0632)  loss_rpn_box_reg: 0.0080 (0.0242)  time: 0.1084 (0.1285)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:30,729 maskrcnn_benchmark.trainer INFO: eta: 1:22:38  iter: 1300  loss: 0.7674 (1.0584)  loss_classifier: 0.3309 (0.4115)  loss_box_reg: 0.1466 (0.1525)  loss_mask: 0.3154 (0.4076)  loss_objectness: 0.0240 (0.0628)  loss_rpn_box_reg: 0.0073 (0.0241)  time: 0.1068 (0.1281)  data: 0.0015 (0.0173)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:32,890 maskrcnn_benchmark.trainer INFO: eta: 1:22:24  iter: 1320  loss: 0.8879 (1.0565)  loss_classifier: 0.3172 (0.4106)  loss_box_reg: 0.1518 (0.1526)  loss_mask: 0.3179 (0.4065)  loss_objectness: 0.0325 (0.0625)  loss_rpn_box_reg: 0.0166 (0.0242)  time: 0.1078 (0.1278)  data: 0.0015 (0.0170)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:35,042 maskrcnn_benchmark.trainer INFO: eta: 1:22:10  iter: 1340  loss: 0.7685 (1.0534)  loss_classifier: 0.3097 (0.4093)  loss_box_reg: 0.1250 (0.1523)  loss_mask: 0.3413 (0.4054)  loss_objectness: 0.0239 (0.0621)  loss_rpn_box_reg: 0.0079 (0.0243)  time: 0.1082 (0.1275)  data: 0.0015 (0.0168)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:37,220 maskrcnn_benchmark.trainer INFO: eta: 1:21:57  iter: 1360  loss: 0.8448 (1.0504)  loss_classifier: 0.3073 (0.4077)  loss_box_reg: 0.1320 (0.1521)  loss_mask: 0.3435 (0.4046)  loss_objectness: 0.0255 (0.0618)  loss_rpn_box_reg: 0.0121 (0.0242)  time: 0.1087 (0.1273)  data: 0.0015 (0.0166)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:39,370 maskrcnn_benchmark.trainer INFO: eta: 1:21:43  iter: 1380  loss: 0.8100 (1.0471)  loss_classifier: 0.2939 (0.4063)  loss_box_reg: 0.1485 (0.1519)  loss_mask: 0.3065 (0.4033)  loss_objectness: 0.0225 (0.0614)  loss_rpn_box_reg: 0.0095 (0.0242)  time: 0.1070 (0.1270)  data: 0.0015 (0.0164)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:41,524 maskrcnn_benchmark.trainer INFO: eta: 1:21:30  iter: 1400  loss: 0.7265 (1.0433)  loss_classifier: 0.2419 (0.4045)  loss_box_reg: 0.1084 (0.1514)  loss_mask: 0.3243 (0.4023)  loss_objectness: 0.0249 (0.0610)  loss_rpn_box_reg: 0.0099 (0.0241)  time: 0.1073 (0.1267)  data: 0.0014 (0.0161)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:43,673 maskrcnn_benchmark.trainer INFO: eta: 1:21:17  iter: 1420  loss: 0.7745 (1.0402)  loss_classifier: 0.2506 (0.4031)  loss_box_reg: 0.1489 (0.1513)  loss_mask: 0.3041 (0.4012)  loss_objectness: 0.0332 (0.0607)  loss_rpn_box_reg: 0.0104 (0.0240)  time: 0.1069 (0.1264)  data: 0.0015 (0.0159)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:45,835 maskrcnn_benchmark.trainer INFO: eta: 1:21:04  iter: 1440  loss: 0.8469 (1.0375)  loss_classifier: 0.3234 (0.4020)  loss_box_reg: 0.1460 (0.1513)  loss_mask: 0.3088 (0.4000)  loss_objectness: 0.0262 (0.0603)  loss_rpn_box_reg: 0.0128 (0.0240)  time: 0.1076 (0.1262)  data: 0.0014 (0.0157)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:48,014 maskrcnn_benchmark.trainer INFO: eta: 1:20:53  iter: 1460  loss: 0.8257 (1.0340)  loss_classifier: 0.3047 (0.4004)  loss_box_reg: 0.1355 (0.1511)  loss_mask: 0.2972 (0.3988)  loss_objectness: 0.0227 (0.0599)  loss_rpn_box_reg: 0.0119 (0.0239)  time: 0.1091 (0.1259)  data: 0.0015 (0.0155)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:50,162 maskrcnn_benchmark.trainer INFO: eta: 1:20:41  iter: 1480  loss: 0.8263 (1.0315)  loss_classifier: 0.3081 (0.3995)  loss_box_reg: 0.1386 (0.1509)  loss_mask: 0.3031 (0.3976)  loss_objectness: 0.0372 (0.0596)  loss_rpn_box_reg: 0.0167 (0.0239)  time: 0.1064 (0.1257)  data: 0.0015 (0.0154)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:52,334 maskrcnn_benchmark.trainer INFO: eta: 1:20:29  iter: 1500  loss: 0.8018 (1.0295)  loss_classifier: 0.3123 (0.3986)  loss_box_reg: 0.1412 (0.1509)  loss_mask: 0.3235 (0.3967)  loss_objectness: 0.0338 (0.0594)  loss_rpn_box_reg: 0.0172 (0.0239)  time: 0.1083 (0.1255)  data: 0.0015 (0.0152)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:54,472 maskrcnn_benchmark.trainer INFO: eta: 1:20:17  iter: 1520  loss: 0.8403 (1.0269)  loss_classifier: 0.2776 (0.3973)  loss_box_reg: 0.1309 (0.1507)  loss_mask: 0.3202 (0.3960)  loss_objectness: 0.0280 (0.0592)  loss_rpn_box_reg: 0.0099 (0.0238)  time: 0.1065 (0.1252)  data: 0.0015 (0.0150)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:56,607 maskrcnn_benchmark.trainer INFO: eta: 1:20:06  iter: 1540  loss: 0.6927 (1.0231)  loss_classifier: 0.2889 (0.3957)  loss_box_reg: 0.1214 (0.1504)  loss_mask: 0.2738 (0.3946)  loss_objectness: 0.0217 (0.0587)  loss_rpn_box_reg: 0.0074 (0.0237)  time: 0.1064 (0.1250)  data: 0.0014 (0.0148)  lr: 0.160000  max mem: 4972
2020-06-23 15:25:58,774 maskrcnn_benchmark.trainer INFO: eta: 1:19:55  iter: 1560  loss: 0.8377 (1.0207)  loss_classifier: 0.2774 (0.3946)  loss_box_reg: 0.1229 (0.1504)  loss_mask: 0.3157 (0.3935)  loss_objectness: 0.0333 (0.0585)  loss_rpn_box_reg: 0.0115 (0.0237)  time: 0.1087 (0.1248)  data: 0.0014 (0.0146)  lr: 0.160000  max mem: 4972
2020-06-23 15:26:00,966 maskrcnn_benchmark.trainer INFO: eta: 1:19:45  iter: 1580  loss: 0.8910 (1.0188)  loss_classifier: 0.3340 (0.3936)  loss_box_reg: 0.1564 (0.1504)  loss_mask: 0.3427 (0.3926)  loss_objectness: 0.0294 (0.0583)  loss_rpn_box_reg: 0.0161 (0.0238)  time: 0.1086 (0.1246)  data: 0.0015 (0.0145)  lr: 0.160000  max mem: 4972
2020-06-23 15:26:03,140 maskrcnn_benchmark.trainer INFO: eta: 1:19:35  iter: 1600  loss: 0.7806 (1.0158)  loss_classifier: 0.2475 (0.3921)  loss_box_reg: 0.1100 (0.1500)  loss_mask: 0.2893 (0.3916)  loss_objectness: 0.0305 (0.0583)  loss_rpn_box_reg: 0.0116 (0.0238)  time: 0.1084 (0.1244)  data: 0.0014 (0.0143)  lr: 0.160000  max mem: 4972
2020-06-23 15:26:05,304 maskrcnn_benchmark.trainer INFO: eta: 1:19:25  iter: 1620  loss: 0.7549 (1.0126)  loss_classifier: 0.2576 (0.3907)  loss_box_reg: 0.1312 (0.1497)  loss_mask: 0.3204 (0.3907)  loss_objectness: 0.0247 (0.0579)  loss_rpn_box_reg: 0.0079 (0.0237)  time: 0.1083 (0.1242)  data: 0.0015 (0.0142)  lr: 0.160000  max mem: 4972
2020-06-23 15:26:07,433 maskrcnn_benchmark.trainer INFO: eta: 1:19:14  iter: 1640  loss: 0.8299 (1.0107)  loss_classifier: 0.2969 (0.3898)  loss_box_reg: 0.1333 (0.1495)  loss_mask: 0.3150 (0.3899)  loss_objectness: 0.0378 (0.0579)  loss_rpn_box_reg: 0.0127 (0.0236)  time: 0.1062 (0.1239)  data: 0.0016 (0.0140)  lr: 0.160000  max mem: 4972
2020-06-23 15:26:09,605 maskrcnn_benchmark.trainer INFO: eta: 1:19:05  iter: 1660  loss: 0.8514 (1.0089)  loss_classifier: 0.3213 (0.3891)  loss_box_reg: 0.1422 (0.1495)  loss_mask: 0.3099 (0.3890)  loss_objectness: 0.0304 (0.0576)  loss_rpn_box_reg: 0.0187 (0.0237)  time: 0.1082 (0.1238)  data: 0.0015 (0.0139)  lr: 0.160000  max mem: 4972
2020-06-23 15:26:11,762 maskrcnn_benchmark.trainer INFO: eta: 1:18:55  iter: 1680  loss: 0.7695 (1.0058)  loss_classifier: 0.2782 (0.3877)  loss_box_reg: 0.1219 (0.1492)  loss_mask: 0.3083 (0.3880)  loss_objectness: 0.0232 (0.0573)  loss_rpn_box_reg: 0.0082 (0.0236)  time: 0.1071 (0.1236)  data: 0.0014 (0.0137)  lr: 0.160000  max mem: 4972
2020-06-23 15:26:13,938 maskrcnn_benchmark.trainer INFO: eta: 1:18:46  iter: 1700  loss: 0.8455 (1.0046)  loss_classifier: 0.3281 (0.3869)  loss_box_reg: 0.1441 (0.1492)  loss_mask: 0.3438 (0.3874)  loss_objectness: 0.0314 (0.0572)  loss_rpn_box_reg: 0.0144 (0.0238)  time: 0.1087 (0.1234)  data: 0.0015 (0.0136)  lr: 0.160000  max mem: 4972
2020-06-23 15:26:16,085 maskrcnn_benchmark.trainer INFO: eta: 1:18:36  iter: 1720  loss: 0.8288 (1.0018)  loss_classifier: 0.2715 (0.3857)  loss_box_reg: 0.1010 (0.1489)  loss_mask: 0.3141 (0.3866)  loss_objectness: 0.0265 (0.0569)  loss_rpn_box_reg: 0.0110 (0.0237)  time: 0.1068 (0.1232)  data: 0.0015 (0.0134)  lr: 0.160000  max mem: 4972
2020-06-23 15:26:18,255 maskrcnn_benchmark.trainer INFO: eta: 1:18:27  iter: 1740  loss: 0.7609 (0.9993)  loss_classifier: 0.2761 (0.3848)  loss_box_reg: 0.1185 (0.1486)  loss_mask: 0.2990 (0.3857)  loss_objectness: 0.0284 (0.0567)  loss_rpn_box_reg: 0.0104 (0.0236)  time: 0.1081 (0.1230)  data: 0.0014 (0.0133)  lr: 0.160000  max mem: 4972
2020-06-23 15:26:20,429 maskrcnn_benchmark.trainer INFO: eta: 1:18:19  iter: 1760  loss: 0.6947 (0.9967)  loss_classifier: 0.2295 (0.3834)  loss_box_reg: 0.1129 (0.1484)  loss_mask: 0.3097 (0.3850)  loss_objectness: 0.0252 (0.0563)  loss_rpn_box_reg: 0.0115 (0.0236)  time: 0.1086 (0.1229)  data: 0.0014 (0.0131)  lr: 0.160000  max mem: 4972
2020-06-23 15:26:22,599 maskrcnn_benchmark.trainer INFO: eta: 1:18:10  iter: 1780  loss: 0.7430 (0.9941)  loss_classifier: 0.2822 (0.3822)  loss_box_reg: 0.1127 (0.1481)  loss_mask: 0.3118 (0.3841)  loss_objectness: 0.0205 (0.0561)  loss_rpn_box_reg: 0.0078 (0.0235)  time: 0.1077 (0.1227)  data: 0.0014 (0.0130)  lr: 0.160000  max mem: 4972
2020-06-23 15:26:24,771 maskrcnn_benchmark.trainer INFO: eta: 1:18:01  iter: 1800  loss: 0.7221 (0.9911)  loss_classifier: 0.2291 (0.3808)  loss_box_reg: 0.1192 (0.1478)  loss_mask: 0.3083 (0.3832)  loss_objectness: 0.0242 (0.0558)  loss_rpn_box_reg: 0.0108 (0.0234)  time: 0.1090 (0.1226)  data: 0.0015 (0.0129)  lr: 0.160000  max mem: 4972
2020-06-23 15:26:26,940 maskrcnn_benchmark.trainer INFO: eta: 1:17:53  iter: 1820  loss: 0.7334 (0.9891)  loss_classifier: 0.2704 (0.3800)  loss_box_reg: 0.1181 (0.1476)  loss_mask: 0.3006 (0.3824)  loss_objectness: 0.0317 (0.0558)  loss_rpn_box_reg: 0.0137 (0.0234)  time: 0.1079 (0.1224)  data: 0.0015 (0.0128)  lr: 0.160000  max mem: 5020
:::MLLOG {"namespace": "", "time_ms": 1592951190133, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1592951190134, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1592951190134, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 2}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 15:26:30,363 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.30s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
2020-06-23 15:26:30,684 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:58,  1.33it/s]
  5%|         | 4/79 [00:00<00:40,  1.86it/s]
  9%|         | 7/79 [00:00<00:27,  2.58it/s]
 13%|        | 10/79 [00:01<00:19,  3.52it/s]
 16%|        | 13/79 [00:01<00:13,  4.75it/s]
 20%|        | 16/79 [00:01<00:10,  6.26it/s]
 24%|       | 19/79 [00:01<00:07,  8.10it/s]
 28%|       | 22/79 [00:01<00:05, 10.11it/s]
 32%|      | 25/79 [00:01<00:04, 12.31it/s]
 35%|      | 28/79 [00:01<00:03, 14.55it/s]
 39%|      | 31/79 [00:01<00:02, 16.77it/s]
 43%|     | 34/79 [00:02<00:02, 18.49it/s]
 47%|     | 37/79 [00:02<00:02, 20.10it/s]
 51%|     | 40/79 [00:02<00:01, 21.34it/s]
 54%|    | 43/79 [00:02<00:01, 22.17it/s]
 58%|    | 46/79 [00:02<00:01, 22.97it/s]
 62%|   | 49/79 [00:02<00:01, 23.50it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.83it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.65it/s]
 32%|      | 25/79 [00:01<00:04, 11.80it/s]
 35%|      | 28/79 [00:01<00:03, 14.11it/s]
 39%|      | 31/79 [00:02<00:02, 16.40it/s]
 43%|     | 34/79 [00:02<00:02, 18.36it/s]
 47%|     | 37/79 [00:02<00:02, 20.08it/s]
 51%|     | 40/79 [00:02<00:01, 21.32it/s]
 54%|    | 43/79 [00:02<00:01, 22.28it/s]
 58%|    | 46/79 [00:02<00:01, 23.09it/s]
 62%|   | 49/79 [00:02<00:01, 23.61it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  4%|         | 3/79 [00:00<00:45,  1.68it/s]
  8%|         | 6/79 [00:01<00:31,  2.34it/s]
 11%|        | 9/79 [00:01<00:21,  3.21it/s]
 15%|        | 12/79 [00:01<00:15,  4.34it/s]
 19%|        | 15/79 [00:01<00:11,  5.77it/s]
 23%|       | 18/79 [00:01<00:08,  7.49it/s]
 27%|       | 21/79 [00:01<00:06,  9.49it/s]
 30%|       | 24/79 [00:01<00:04, 11.69it/s]
 34%|      | 27/79 [00:01<00:03, 13.89it/s]
 38%|      | 30/79 [00:02<00:03, 16.04it/s]
 42%|     | 33/79 [00:02<00:02, 18.01it/s]
 46%|     | 36/79 [00:02<00:02, 19.79it/s]
 49%|     | 39/79 [00:02<00:01, 20.79it/s]
 53%|    | 42/79 [00:02<00:01, 21.82it/s]
 57%|    | 45/79 [00:02<00:01, 22.65it/s]
 61%|    | 48/79 [00:02<00:01, 23.06it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.85it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.59it/s]
 32%|      | 25/79 [00:01<00:04, 11.77it/s]
 35%|      | 28/79 [00:01<00:03, 14.00it/s]
 39%|      | 31/79 [00:02<00:02, 16.05it/s]
 43%|     | 34/79 [00:02<00:02, 18.09it/s]
 47%|     | 37/79 [00:02<00:02, 19.60it/s]
 51%|     | 40/79 [00:02<00:01, 20.92it/s]
 54%|    | 43/79 [00:02<00:01, 22.04it/s]
 58%|    | 46/79 [00:02<00:01, 22.85it/s]
 62%|   | 49/79 [00:02<00:01, 23.58it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.18it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.56it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.83it/s]
 47%|     | 37/79 [00:02<00:02, 19.65it/s]
 51%|     | 40/79 [00:02<00:01, 20.99it/s]
 54%|    | 43/79 [00:02<00:01, 22.07it/s]
 58%|    | 46/79 [00:02<00:01, 22.84it/s]
 62%|   | 49/79 [00:02<00:01, 23.19it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:11,  5.71it/s]
 24%|       | 19/79 [00:01<00:08,  7.43it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.61it/s]
 35%|      | 28/79 [00:01<00:03, 13.84it/s]
 39%|      | 31/79 [00:02<00:02, 16.09it/s]
 43%|     | 34/79 [00:02<00:02, 17.96it/s]
 47%|     | 37/79 [00:02<00:02, 19.58it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 22.17it/s]
 58%|    | 46/79 [00:02<00:01, 22.61it/s]
 62%|   | 49/79 [00:02<00:01, 23.44it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:00<00:46,  1.63it/s]
  8%|         | 6/79 [00:01<00:32,  2.26it/s]
 11%|        | 9/79 [00:01<00:22,  3.10it/s]
 15%|        | 12/79 [00:01<00:15,  4.21it/s]
 19%|        | 15/79 [00:01<00:11,  5.60it/s]
 23%|       | 18/79 [00:01<00:08,  7.24it/s]
 27%|       | 21/79 [00:01<00:06,  9.19it/s]
 30%|       | 24/79 [00:01<00:04, 11.31it/s]
 34%|      | 27/79 [00:01<00:03, 13.50it/s]
 38%|      | 30/79 [00:02<00:03, 15.63it/s]
 42%|     | 33/79 [00:02<00:02, 17.38it/s]
 46%|     | 36/79 [00:02<00:02, 19.05it/s]
 49%|     | 39/79 [00:02<00:01, 20.17it/s]
 53%|    | 42/79 [00:02<00:01, 21.43it/s]
 57%|    | 45/79 [00:02<00:01, 22.23it/s]
 61%|    | 48/79 [00:02<00:01, 22.86it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.18it/s]
 32%|      | 25/79 [00:01<00:04, 11.34it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.75it/s]
 43%|     | 34/79 [00:02<00:02, 17.83it/s]
 47%|     | 37/79 [00:02<00:02, 19.48it/s]
 51%|     | 40/79 [00:02<00:01, 20.87it/s]
 54%|    | 43/79 [00:02<00:01, 22.20it/s]
 58%|    | 46/79 [00:02<00:01, 23.03it/s]
 62%|   | 49/79 [00:02<00:01, 23.49it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:00<00:46,  1.63it/s]
  8%|         | 6/79 [00:01<00:32,  2.27it/s]
 11%|        | 9/79 [00:01<00:22,  3.12it/s]
 15%|        | 12/79 [00:01<00:15,  4.23it/s]
 19%|        | 15/79 [00:01<00:11,  5.62it/s]
 23%|       | 18/79 [00:01<00:08,  7.33it/s]
 27%|       | 21/79 [00:01<00:06,  9.25it/s]
 30%|       | 24/79 [00:01<00:04, 11.44it/s]
 34%|      | 27/79 [00:01<00:03, 13.72it/s]
 38%|      | 30/79 [00:02<00:03, 15.89it/s]
 42%|     | 33/79 [00:02<00:02, 17.73it/s]
 46%|     | 36/79 [00:02<00:02, 19.49it/s]
 49%|     | 39/79 [00:02<00:01, 20.76it/s]
 53%|    | 42/79 [00:02<00:01, 21.76it/s]
 57%|    | 45/79 [00:02<00:01, 22.65it/s]
 61%|    | 48/79 [00:02<00:01, 23.45it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:11,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.45it/s]
 28%|       | 22/79 [00:01<00:06,  9.40it/s]
 32%|      | 25/79 [00:01<00:04, 11.53it/s]
 35%|      | 28/79 [00:01<00:03, 13.74it/s]
 39%|      | 31/79 [00:02<00:03, 15.83it/s]
 43%|     | 34/79 [00:02<00:02, 17.80it/s]
 47%|     | 37/79 [00:02<00:02, 19.37it/s]
 51%|     | 40/79 [00:02<00:01, 20.67it/s]
 54%|    | 43/79 [00:02<00:01, 21.71it/s]
 58%|    | 46/79 [00:02<00:01, 22.75it/s]
 62%|   | 49/79 [00:02<00:01, 22.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.76it/s]
 24%|       | 19/79 [00:01<00:08,  7.46it/s]
 28%|       | 22/79 [00:01<00:06,  9.45it/s]
 32%|      | 25/79 [00:01<00:04, 11.55it/s]
 35%|      | 28/79 [00:01<00:03, 13.70it/s]
 39%|      | 31/79 [00:02<00:03, 15.61it/s]
 43%|     | 34/79 [00:02<00:02, 17.57it/s]
 47%|     | 37/79 [00:02<00:02, 19.05it/s]
 51%|     | 40/79 [00:02<00:01, 20.28it/s]
 54%|    | 43/79 [00:02<00:01, 21.14it/s]
 58%|    | 46/79 [00:02<00:01, 22.24it/s]
 62%|   | 49/79 [00:02<00:01, 22.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.51it/s]
 35%|      | 28/79 [00:01<00:03, 13.68it/s]
 39%|      | 31/79 [00:02<00:03, 15.95it/s]
 43%|     | 34/79 [00:02<00:02, 17.78it/s]
 47%|     | 37/79 [00:02<00:02, 19.40it/s]
 51%|     | 40/79 [00:02<00:01, 20.64it/s]
 54%|    | 43/79 [00:02<00:01, 21.85it/s]
 58%|    | 46/79 [00:02<00:01, 22.56it/s]
 62%|   | 49/79 [00:02<00:01, 23.08it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.27it/s]
 32%|      | 25/79 [00:01<00:04, 11.41it/s]
 35%|      | 28/79 [00:01<00:03, 13.58it/s]
 39%|      | 31/79 [00:02<00:03, 15.65it/s]
 43%|     | 34/79 [00:02<00:02, 17.55it/s]
 47%|     | 37/79 [00:02<00:02, 19.15it/s]
 51%|     | 40/79 [00:02<00:01, 20.56it/s]
 54%|    | 43/79 [00:02<00:01, 21.54it/s]
 58%|    | 46/79 [00:02<00:01, 22.35it/s]
 62%|   | 49/79 [00:02<00:01, 23.10it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.39it/s]
 35%|      | 28/79 [00:01<00:03, 13.58it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.42it/s]
 47%|     | 37/79 [00:02<00:02, 19.13it/s]
 51%|     | 40/79 [00:02<00:01, 20.46it/s]
 54%|    | 43/79 [00:02<00:01, 21.63it/s]
 58%|    | 46/79 [00:02<00:01, 22.11it/s]
 62%|   | 49/79 [00:02<00:01, 22.84it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.36it/s]
 28%|       | 22/79 [00:01<00:06,  9.31it/s]
 32%|      | 25/79 [00:01<00:04, 11.40it/s]
 35%|      | 28/79 [00:01<00:03, 13.54it/s]
 39%|      | 31/79 [00:02<00:03, 15.47it/s]
 43%|     | 34/79 [00:02<00:02, 17.31it/s]
 47%|     | 37/79 [00:02<00:02, 19.01it/s]
 51%|     | 40/79 [00:02<00:01, 20.40it/s]
 54%|    | 43/79 [00:02<00:01, 21.28it/s]
 58%|    | 46/79 [00:02<00:01, 21.85it/s]
 62%|   | 49/79 [00:02<00:01, 22.78it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:11,  5.70it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.35it/s]
 32%|      | 25/79 [00:01<00:04, 11.48it/s]
 35%|      | 28/79 [00:01<00:03, 13.63it/s]
 39%|      | 31/79 [00:02<00:03, 15.69it/s]
 43%|     | 34/79 [00:02<00:02, 17.53it/s]
 47%|     | 37/79 [00:02<00:02, 18.97it/s]
 51%|     | 40/79 [00:02<00:01, 20.35it/s]
 54%|    | 43/79 [00:02<00:01, 21.21it/s]
 58%|    | 46/79 [00:02<00:01, 21.90it/s]
 62%|   | 49/79 [00:02<00:01, 22.58it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.33it/s]
 28%|       | 22/79 [00:01<00:06,  9.31it/s]
 32%|      | 25/79 [00:01<00:04, 11.43it/s]
 35%|      | 28/79 [00:01<00:03, 13.63it/s]
 39%|      | 31/79 [00:02<00:03, 15.83it/s]
 43%|     | 34/79 [00:02<00:02, 17.72it/s]
 47%|     | 37/79 [00:02<00:02, 19.46it/s]
 51%|     | 40/79 [00:02<00:01, 20.49it/s]
 54%|    | 43/79 [00:02<00:01, 21.66it/s]
 58%|    | 46/79 [00:02<00:01, 22.12it/s]
 62%|   | 49/79 [00:02<00:01, 22.76it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  8.98it/s]
 32%|      | 25/79 [00:01<00:04, 11.10it/s]
 35%|      | 28/79 [00:01<00:03, 13.33it/s]
 39%|      | 31/79 [00:02<00:03, 15.42it/s]
 43%|     | 34/79 [00:02<00:02, 17.40it/s]
 47%|     | 37/79 [00:02<00:02, 19.11it/s]
 51%|     | 40/79 [00:02<00:01, 20.35it/s]
 54%|    | 43/79 [00:02<00:01, 21.12it/s]
 58%|    | 46/79 [00:02<00:01, 22.21it/s]
 62%|   | 49/79 [00:02<00:01, 23.02it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.04it/s]
  4%|         | 3/79 [00:01<00:52,  1.46it/s]
  8%|         | 6/79 [00:01<00:35,  2.03it/s]
 11%|        | 9/79 [00:01<00:24,  2.80it/s]
 15%|        | 12/79 [00:01<00:17,  3.82it/s]
 19%|        | 15/79 [00:01<00:12,  5.12it/s]
 23%|       | 18/79 [00:01<00:09,  6.74it/s]
 27%|       | 21/79 [00:01<00:06,  8.61it/s]
 30%|       | 24/79 [00:01<00:05, 10.72it/s]
 34%|      | 27/79 [00:02<00:04, 12.95it/s]
 38%|      | 30/79 [00:02<00:03, 15.07it/s]
 42%|     | 33/79 [00:02<00:02, 17.06it/s]
 46%|     | 36/79 [00:02<00:02, 18.70it/s]
 49%|     | 39/79 [00:02<00:01, 20.04it/s]
 53%|    | 42/79 [00:02<00:01, 21.22it/s]
 57%|    | 45/79 [00:02<00:01, 22.26it/s]
 61%|    | 48/79 [00:02<00:01, 22.87it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  4%|         | 3/79 [00:01<00:49,  1.55it/s]
  8%|         | 6/79 [00:01<00:33,  2.15it/s]
 11%|        | 9/79 [00:01<00:23,  2.96it/s]
 15%|        | 12/79 [00:01<00:16,  4.01it/s]
 19%|        | 15/79 [00:01<00:11,  5.35it/s]
 23%|       | 18/79 [00:01<00:08,  6.97it/s]
 27%|       | 21/79 [00:01<00:06,  8.84it/s]
 30%|       | 24/79 [00:01<00:05, 10.86it/s]
 34%|      | 27/79 [00:02<00:03, 13.02it/s]
 38%|      | 30/79 [00:02<00:03, 15.10it/s]
 42%|     | 33/79 [00:02<00:02, 16.95it/s]
 46%|     | 36/79 [00:02<00:02, 18.69it/s]
 49%|     | 39/79 [00:02<00:01, 20.09it/s]
 53%|    | 42/79 [00:02<00:01, 21.08it/s]
 57%|    | 45/79 [00:02<00:01, 21.93it/s]
 61%|    | 48/79 [00:02<00:01, 22.49it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  8.94it/s]
 32%|      | 25/79 [00:01<00:04, 11.06it/s]
 35%|      | 28/79 [00:02<00:03, 13.20it/s]
 39%|      | 31/79 [00:02<00:03, 15.42it/s]
 43%|     | 34/79 [00:02<00:02, 17.34it/s]
 47%|     | 37/79 [00:02<00:02, 19.08it/s]
 51%|     | 40/79 [00:02<00:01, 20.29it/s]
 54%|    | 43/79 [00:02<00:01, 21.33it/s]
 58%|    | 46/79 [00:02<00:01, 22.27it/s]
 62%|   | 49/79 [00:02<00:01, 22.59it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.30it/s]
 24%|       | 19/79 [00:01<00:08,  6.92it/s]
 28%|       | 22/79 [00:01<00:06,  8.87it/s]
 32%|      | 25/79 [00:01<00:04, 11.03it/s]
 35%|      | 28/79 [00:02<00:03, 13.21it/s]
 39%|      | 31/79 [00:02<00:03, 15.31it/s]
 43%|     | 34/79 [00:02<00:02, 17.32it/s]
 47%|     | 37/79 [00:02<00:02, 18.95it/s]
 51%|     | 40/79 [00:02<00:01, 20.24it/s]
 54%|    | 43/79 [00:02<00:01, 21.48it/s]
 58%|    | 46/79 [00:02<00:01, 22.06it/s]
 62%|   | 49/79 [00:02<00:01, 22.68it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.09it/s]
 20%|        | 16/79 [00:01<00:11,  5.45it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.03it/s]
 32%|      | 25/79 [00:01<00:04, 11.13it/s]
 35%|      | 28/79 [00:02<00:03, 13.30it/s]
 39%|      | 31/79 [00:02<00:03, 15.34it/s]
 43%|     | 34/79 [00:02<00:02, 17.22it/s]
 47%|     | 37/79 [00:02<00:02, 18.95it/s]
 51%|     | 40/79 [00:02<00:01, 20.44it/s]
 54%|    | 43/79 [00:02<00:01, 21.66it/s]
 58%|    | 46/79 [00:02<00:01, 22.39it/s]
 62%|   | 49/79 [00:02<00:01, 23.13it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.26it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.15it/s]
 35%|      | 28/79 [00:02<00:03, 13.27it/s]
 39%|      | 31/79 [00:02<00:03, 15.24it/s]
 43%|     | 34/79 [00:02<00:02, 16.94it/s]
 47%|     | 37/79 [00:02<00:02, 18.84it/s]
 51%|     | 40/79 [00:02<00:01, 20.16it/s]
 54%|    | 43/79 [00:02<00:01, 21.10it/s]
 58%|    | 46/79 [00:02<00:01, 22.01it/s]
 62%|   | 49/79 [00:02<00:01, 22.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.46it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.04it/s]
 32%|      | 25/79 [00:01<00:04, 11.12it/s]
 35%|      | 28/79 [00:02<00:03, 13.26it/s]
 39%|      | 31/79 [00:02<00:03, 15.29it/s]
 43%|     | 34/79 [00:02<00:02, 17.01it/s]
 47%|     | 37/79 [00:02<00:02, 18.60it/s]
 51%|     | 40/79 [00:02<00:01, 19.69it/s]
 54%|    | 43/79 [00:02<00:01, 20.73it/s]
 58%|    | 46/79 [00:02<00:01, 21.56it/s]
 62%|   | 49/79 [00:02<00:01, 22.20it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  6.95it/s]
 28%|       | 22/79 [00:01<00:06,  8.84it/s]
 32%|      | 25/79 [00:01<00:04, 10.88it/s]
 35%|      | 28/79 [00:02<00:03, 13.11it/s]
 39%|      | 31/79 [00:02<00:03, 15.28it/s]
 43%|     | 34/79 [00:02<00:02, 17.28it/s]
 47%|     | 37/79 [00:02<00:02, 18.99it/s]
 51%|     | 40/79 [00:02<00:01, 20.35it/s]
 54%|    | 43/79 [00:02<00:01, 21.52it/s]
 58%|    | 46/79 [00:02<00:01, 22.49it/s]
 62%|   | 49/79 [00:02<00:01, 23.37it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.91it/s]
 32%|      | 25/79 [00:01<00:04, 10.98it/s]
 35%|      | 28/79 [00:02<00:03, 13.18it/s]
 39%|      | 31/79 [00:02<00:03, 15.26it/s]
 43%|     | 34/79 [00:02<00:02, 17.23it/s]
 47%|     | 37/79 [00:02<00:02, 18.80it/s]
 51%|     | 40/79 [00:02<00:01, 20.29it/s]
 54%|    | 43/79 [00:02<00:01, 21.22it/s]
 58%|    | 46/79 [00:02<00:01, 21.98it/s]
 62%|   | 49/79 [00:02<00:01, 22.80it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  6.96it/s]
 28%|       | 22/79 [00:01<00:06,  8.88it/s]
 32%|      | 25/79 [00:01<00:04, 10.98it/s]
 35%|      | 28/79 [00:02<00:03, 13.14it/s]
 39%|      | 31/79 [00:02<00:03, 15.32it/s]
 43%|     | 34/79 [00:02<00:02, 17.23it/s]
 47%|     | 37/79 [00:02<00:02, 18.86it/s]
 51%|     | 40/79 [00:02<00:01, 20.28it/s]
 54%|    | 43/79 [00:02<00:01, 21.51it/s]
 58%|    | 46/79 [00:02<00:01, 21.98it/s]
 62%|   | 49/79 [00:02<00:01, 22.48it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.91it/s]
 32%|      | 25/79 [00:01<00:04, 10.99it/s]
 35%|      | 28/79 [00:02<00:03, 13.17it/s]
 39%|      | 31/79 [00:02<00:03, 15.20it/s]
 43%|     | 34/79 [00:02<00:02, 17.00it/s]
 47%|     | 37/79 [00:02<00:02, 18.55it/s]
 51%|     | 40/79 [00:02<00:01, 19.94it/s]
 54%|    | 43/79 [00:02<00:01, 20.90it/s]
 58%|    | 46/79 [00:02<00:01, 21.72it/s]
 62%|   | 49/79 [00:02<00:01, 22.55it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.01it/s]
  5%|         | 4/79 [00:01<00:52,  1.42it/s]
  9%|         | 7/79 [00:01<00:36,  1.98it/s]
 13%|        | 10/79 [00:01<00:25,  2.74it/s]
 16%|        | 13/79 [00:01<00:17,  3.74it/s]
 20%|        | 16/79 [00:01<00:12,  5.02it/s]
 24%|       | 19/79 [00:01<00:09,  6.62it/s]
 28%|       | 22/79 [00:01<00:06,  8.46it/s]
 32%|      | 25/79 [00:01<00:05, 10.56it/s]
 35%|      | 28/79 [00:02<00:04, 12.69it/s]
 39%|      | 31/79 [00:02<00:03, 14.83it/s]
 43%|     | 34/79 [00:02<00:02, 16.82it/s]
 47%|     | 37/79 [00:02<00:02, 18.53it/s]
 51%|     | 40/79 [00:02<00:01, 19.85it/s]
 54%|    | 43/79 [00:02<00:01, 20.88it/s]
 58%|    | 46/79 [00:02<00:01, 22.00it/s]
 62%|   | 49/79 [00:02<00:01, 22.36it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:51,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.01it/s]
 13%|        | 10/79 [00:01<00:24,  2.77it/s]
 16%|        | 13/79 [00:01<00:17,  3.77it/s]
 20%|        | 16/79 [00:01<00:12,  5.05it/s]
 24%|       | 19/79 [00:01<00:09,  6.61it/s]
 28%|       | 22/79 [00:01<00:06,  8.43it/s]
 32%|      | 25/79 [00:01<00:05, 10.53it/s]
 35%|      | 28/79 [00:02<00:04, 12.62it/s]
 39%|      | 31/79 [00:02<00:03, 14.84it/s]
 43%|     | 34/79 [00:02<00:02, 16.98it/s]
 47%|     | 37/79 [00:02<00:02, 18.71it/s]
 51%|     | 40/79 [00:02<00:01, 19.99it/s]
 54%|    | 43/79 [00:02<00:01, 20.98it/s]
 58%|    | 46/79 [00:02<00:01, 21.92it/s]
 62%|   | 49/79 [00:02<00:01, 22.55it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.85it/s]
 28%|       | 22/79 [00:01<00:06,  8.70it/s]
 32%|      | 25/79 [00:01<00:05, 10.71it/s]
 35%|      | 28/79 [00:02<00:03, 12.82it/s]
 39%|      | 31/79 [00:02<00:03, 14.92it/s]
 43%|     | 34/79 [00:02<00:02, 16.79it/s]
 47%|     | 37/79 [00:02<00:02, 18.25it/s]
 51%|     | 40/79 [00:02<00:02, 19.45it/s]
 54%|    | 43/79 [00:02<00:01, 20.56it/s]
 58%|    | 46/79 [00:02<00:01, 21.40it/s]
 62%|   | 49/79 [00:02<00:01, 21.91it/s]
 66%|   | 52/79 [00:03<00:01, 23.64it/s]
 70%|   | 55/79 [00:02<00:01, 23.79it/s]
 73%|  | 58/79 [00:03<00:00, 24.23it/s]
 77%|  | 61/79 [00:03<00:00, 24.08it/s]
 81%|  | 64/79 [00:03<00:00, 24.41it/s]
 85%| | 67/79 [00:03<00:00, 24.47it/s]
 89%| | 70/79 [00:03<00:00, 24.75it/s]
 92%|| 73/79 [00:03<00:00, 24.79it/s]
 96%|| 76/79 [00:03<00:00, 25.45it/s]
100%|| 79/79 [00:03<00:00, 26.33it/s]
, 23.78it/s]
 70%|   | 55/79 [00:02<00:00, 24.47it/s]
 73%|  | 58/79 [00:03<00:00, 24.61it/s]
 77%|  | 61/79 [00:03<00:00, 25.05it/s]
 81%|  | 64/79 [00:03<00:00, 25.18it/s]
 85%| | 67/79 [00:03<00:00, 25.29it/s]
 89%| | 70/79 [00:03<00:00, 24.91it/s]
 92%|| 73/79 [00:03<00:00, 25.51it/s]
 96%|| 76/79 [00:03<00:00, 25.94it/s]
100%|| 79/79 [00:03<00:00, 26.60it/s]
, 23.76it/s]
 70%|   | 55/79 [00:03<00:00, 24.08it/s]
 73%|  | 58/79 [00:03<00:00, 24.35it/s]
 77%|  | 61/79 [00:03<00:00, 24.28it/s]
 81%|  | 64/79 [00:03<00:00, 24.09it/s]
 85%| | 67/79 [00:03<00:00, 24.26it/s]
 89%| | 70/79 [00:03<00:00, 24.42it/s]
 92%|| 73/79 [00:03<00:00, 24.79it/s]
 96%|| 76/79 [00:03<00:00, 25.42it/s]
100%|| 79/79 [00:03<00:00, 26.40it/s]
, 24.14it/s]
 70%|   | 55/79 [00:03<00:00, 24.49it/s]
 73%|  | 58/79 [00:03<00:00, 24.55it/s]
 77%|  | 61/79 [00:03<00:00, 24.85it/s]
 81%|  | 64/79 [00:03<00:00, 24.92it/s]
 85%| | 67/79 [00:03<00:00, 24.99it/s]
 89%| | 70/79 [00:03<00:00, 25.00it/s]
 92%|| 73/79 [00:03<00:00, 25.32it/s]
 96%|| 76/79 [00:03<00:00, 25.75it/s]
100%|| 79/79 [00:03<00:00, 26.72it/s]
, 24.01it/s]
 70%|   | 55/79 [00:03<00:00, 24.45it/s]
 73%|  | 58/79 [00:03<00:00, 24.51it/s]
 77%|  | 61/79 [00:03<00:00, 24.81it/s]
 81%|  | 64/79 [00:03<00:00, 24.80it/s]
 85%| | 67/79 [00:03<00:00, 25.03it/s]
 89%| | 70/79 [00:03<00:00, 25.06it/s]
 92%|| 73/79 [00:03<00:00, 25.20it/s]
 96%|| 76/79 [00:03<00:00, 25.77it/s]
100%|| 79/79 [00:03<00:00, 26.67it/s]
, 23.43it/s]
 70%|   | 55/79 [00:03<00:01, 23.62it/s]
 73%|  | 58/79 [00:03<00:00, 23.99it/s]
 77%|  | 61/79 [00:03<00:00, 24.21it/s]
 81%|  | 64/79 [00:03<00:00, 24.29it/s]
 85%| | 67/79 [00:03<00:00, 24.78it/s]
 89%| | 70/79 [00:03<00:00, 24.63it/s]
 92%|| 73/79 [00:03<00:00, 24.63it/s]
 96%|| 76/79 [00:03<00:00, 25.21it/s]
100%|| 79/79 [00:03<00:00, 26.05it/s]
, 23.95it/s]
 70%|   | 55/79 [00:03<00:01, 23.91it/s]
 73%|  | 58/79 [00:03<00:00, 24.14it/s]
 77%|  | 61/79 [00:03<00:00, 24.34it/s]
 81%|  | 64/79 [00:03<00:00, 24.41it/s]
 85%| | 67/79 [00:03<00:00, 24.48it/s]
 89%| | 70/79 [00:03<00:00, 23.06it/s]
 92%|| 73/79 [00:03<00:00, 23.48it/s]
 96%|| 76/79 [00:03<00:00, 24.84it/s]
100%|| 79/79 [00:04<00:00, 25.40it/s]
08it/s]
 68%|   | 54/79 [00:03<00:01, 23.52it/s]
 72%|  | 57/79 [00:03<00:00, 23.99it/s]
 76%|  | 60/79 [00:03<00:00, 23.89it/s]
 80%|  | 63/79 [00:03<00:00, 24.01it/s]
 84%| | 66/79 [00:03<00:00, 24.09it/s]
 87%| | 69/79 [00:03<00:00, 24.27it/s]
 91%| | 72/79 [00:03<00:00, 24.32it/s]
 95%|| 75/79 [00:03<00:00, 25.02it/s]
 99%|| 78/79 [00:04<00:00, 25.59it/s]
100%|| 79/79 [00:04<00:00, 19.21it/s]
, 22.92it/s]
 70%|   | 55/79 [00:03<00:01, 23.41it/s]
 73%|  | 58/79 [00:03<00:00, 23.69it/s]
 77%|  | 61/79 [00:03<00:00, 23.91it/s]
 81%|  | 64/79 [00:03<00:00, 23.86it/s]
 85%| | 67/79 [00:03<00:00, 23.93it/s]
 89%| | 70/79 [00:03<00:00, 24.17it/s]
 92%|| 73/79 [00:03<00:00, 24.53it/s]
 96%|| 76/79 [00:03<00:00, 25.30it/s]
100%|| 79/79 [00:04<00:00, 26.27it/s]
, 23.27it/s]
 70%|   | 55/79 [00:03<00:01, 23.83it/s]
 73%|  | 58/79 [00:03<00:00, 24.07it/s]
 77%|  | 61/79 [00:03<00:00, 24.00it/s]
 81%|  | 64/79 [00:03<00:00, 24.17it/s]
 85%| | 67/79 [00:03<00:00, 24.25it/s]
 89%| | 70/79 [00:03<00:00, 24.20it/s]
 92%|| 73/79 [00:03<00:00, 24.47it/s]
 96%|| 76/79 [00:03<00:00, 25.28it/s]
100%|| 79/79 [00:04<00:00, 26.19it/s]
65it/s]
 68%|   | 54/79 [00:02<00:01, 23.95it/s]
 72%|  | 57/79 [00:03<00:00, 24.19it/s]
 76%|  | 60/79 [00:03<00:00, 24.24it/s]
 80%|  | 63/79 [00:03<00:00, 24.36it/s]
 84%| | 66/79 [00:03<00:00, 24.51it/s]
 87%| | 69/79 [00:03<00:00, 24.64it/s]
 91%| | 72/79 [00:03<00:00, 24.73it/s]
 95%|| 75/79 [00:03<00:00, 25.43it/s]
 99%|| 78/79 [00:03<00:00, 25.90it/s]
100%|| 79/79 [00:04<00:00, 19.39it/s]
, 23.20it/s]
 70%|   | 55/79 [00:03<00:01, 23.45it/s]
 73%|  | 58/79 [00:03<00:00, 23.67it/s]
 77%|  | 61/79 [00:03<00:00, 23.88it/s]
 81%|  | 64/79 [00:03<00:00, 24.01it/s]
 85%| | 67/79 [00:03<00:00, 24.01it/s]
 89%| | 70/79 [00:03<00:00, 23.90it/s]
 92%|| 73/79 [00:03<00:00, 24.52it/s]
 96%|| 76/79 [00:03<00:00, 25.03it/s]
100%|| 79/79 [00:04<00:00, 26.07it/s]
88it/s]
 68%|   | 54/79 [00:03<00:01, 24.33it/s]
 72%|  | 57/79 [00:03<00:00, 24.58it/s]
 76%|  | 60/79 [00:03<00:00, 24.85it/s]
 80%|  | 63/79 [00:03<00:00, 24.85it/s]
 84%| | 66/79 [00:03<00:00, 25.12it/s]
 87%| | 69/79 [00:03<00:00, 24.72it/s]
 91%| | 72/79 [00:03<00:00, 25.06it/s]
 95%|| 75/79 [00:03<00:00, 25.53it/s]
 99%|| 78/79 [00:03<00:00, 25.89it/s]
100%|| 79/79 [00:04<00:00, 19.49it/s]
, 23.28it/s]
 70%|   | 55/79 [00:03<00:01, 23.63it/s]
 73%|  | 58/79 [00:03<00:00, 23.75it/s]
 77%|  | 61/79 [00:03<00:00, 23.99it/s]
 81%|  | 64/79 [00:03<00:00, 24.28it/s]
 85%| | 67/79 [00:03<00:00, 24.36it/s]
 89%| | 70/79 [00:03<00:00, 24.33it/s]
 92%|| 73/79 [00:03<00:00, 24.66it/s]
 96%|| 76/79 [00:03<00:00, 25.37it/s]
100%|| 79/79 [00:04<00:00, 26.17it/s]
, 23.48it/s]
 70%|   | 55/79 [00:03<00:01, 23.99it/s]
 73%|  | 58/79 [00:03<00:00, 24.35it/s]
 77%|  | 61/79 [00:03<00:00, 24.43it/s]
 81%|  | 64/79 [00:03<00:00, 24.59it/s]
 85%| | 67/79 [00:03<00:00, 24.72it/s]
 89%| | 70/79 [00:03<00:00, 24.99it/s]
 92%|| 73/79 [00:03<00:00, 25.17it/s]
 96%|| 76/79 [00:03<00:00, 25.85it/s]
100%|| 79/79 [00:04<00:00, 26.63it/s]
, 23.16it/s]
 70%|   | 55/79 [00:03<00:01, 23.42it/s]
 73%|  | 58/79 [00:03<00:00, 23.79it/s]
 77%|  | 61/79 [00:03<00:00, 24.16it/s]
 81%|  | 64/79 [00:03<00:00, 24.20it/s]
 85%| | 67/79 [00:03<00:00, 24.16it/s]
 89%| | 70/79 [00:03<00:00, 24.13it/s]
 92%|| 73/79 [00:03<00:00, 24.57it/s]
 96%|| 76/79 [00:03<00:00, 25.21it/s]
100%|| 79/79 [00:04<00:00, 26.00it/s]
, 22.95it/s]
 70%|   | 55/79 [00:03<00:01, 23.56it/s]
 73%|  | 58/79 [00:03<00:00, 23.67it/s]
 77%|  | 61/79 [00:03<00:00, 23.78it/s]
 81%|  | 64/79 [00:03<00:00, 23.87it/s]
 85%| | 67/79 [00:03<00:00, 24.01it/s]
 89%| | 70/79 [00:03<00:00, 23.85it/s]
 92%|| 73/79 [00:03<00:00, 24.40it/s]
 96%|| 76/79 [00:03<00:00, 25.14it/s]
100%|| 79/79 [00:04<00:00, 26.08it/s]
, 23.28it/s]
 70%|   | 55/79 [00:03<00:01, 23.59it/s]
 73%|  | 58/79 [00:03<00:00, 23.64it/s]
 77%|  | 61/79 [00:03<00:00, 23.98it/s]
 81%|  | 64/79 [00:03<00:00, 24.14it/s]
 85%| | 67/79 [00:03<00:00, 24.49it/s]
 89%| | 70/79 [00:03<00:00, 24.63it/s]
 92%|| 73/79 [00:03<00:00, 25.08it/s]
 96%|| 76/79 [00:03<00:00, 25.68it/s]
100%|| 79/79 [00:04<00:00, 26.55it/s]
40it/s]
 68%|   | 54/79 [00:03<00:01, 23.74it/s]
 72%|  | 57/79 [00:03<00:00, 24.07it/s]
 76%|  | 60/79 [00:03<00:00, 24.46it/s]
 80%|  | 63/79 [00:03<00:00, 24.54it/s]
 84%| | 66/79 [00:03<00:00, 24.71it/s]
 87%| | 69/79 [00:03<00:00, 24.87it/s]
 91%| | 72/79 [00:03<00:00, 24.79it/s]
 95%|| 75/79 [00:03<00:00, 25.44it/s]
 99%|| 78/79 [00:04<00:00, 25.81it/s]
100%|| 79/79 [00:04<00:00, 18.99it/s]
, 23.27it/s]
 70%|   | 55/79 [00:03<00:01, 23.59it/s]
 73%|  | 58/79 [00:03<00:00, 23.65it/s]
 77%|  | 61/79 [00:03<00:00, 23.90it/s]
 81%|  | 64/79 [00:03<00:00, 23.96it/s]
 85%| | 67/79 [00:03<00:00, 23.94it/s]
 89%| | 70/79 [00:03<00:00, 23.79it/s]
 92%|| 73/79 [00:03<00:00, 24.46it/s]
 96%|| 76/79 [00:03<00:00, 25.21it/s]
100%|| 79/79 [00:04<00:00, 26.20it/s]
, 22.87it/s]
 70%|   | 55/79 [00:03<00:01, 23.16it/s]
 73%|  | 58/79 [00:03<00:00, 23.68it/s]
 77%|  | 61/79 [00:03<00:00, 24.27it/s]
 81%|  | 64/79 [00:03<00:00, 24.04it/s]
 85%| | 67/79 [00:03<00:00, 24.11it/s]
 89%| | 70/79 [00:03<00:00, 24.38it/s]
 92%|| 73/79 [00:03<00:00, 24.57it/s]
 96%|| 76/79 [00:03<00:00, 25.76it/s]
100%|| 79/79 [00:04<00:00, 26.14it/s]
, 23.06it/s]
 70%|   | 55/79 [00:03<00:01, 23.38it/s]
 73%|  | 58/79 [00:03<00:00, 23.58it/s]
 77%|  | 61/79 [00:03<00:00, 23.65it/s]
 81%|  | 64/79 [00:03<00:00, 23.79it/s]
 85%| | 67/79 [00:03<00:00, 23.96it/s]
 89%| | 70/79 [00:03<00:00, 24.04it/s]
 92%|| 73/79 [00:03<00:00, 24.48it/s]
 96%|| 76/79 [00:03<00:00, 25.21it/s]
100%|| 79/79 [00:04<00:00, 26.07it/s]
, 23.07it/s]
 70%|   | 55/79 [00:03<00:01, 23.66it/s]
 73%|  | 58/79 [00:03<00:00, 23.96it/s]
 77%|  | 61/79 [00:03<00:00, 23.99it/s]
 81%|  | 64/79 [00:03<00:00, 24.19it/s]
 85%| | 67/79 [00:03<00:00, 24.31it/s]
 89%| | 70/79 [00:03<00:00, 21.63it/s]
 92%|| 73/79 [00:03<00:00, 22.58it/s]
 96%|| 76/79 [00:04<00:00, 23.85it/s]
100%|| 79/79 [00:04<00:00, 24.89it/s]
, 23.88it/s]
 70%|   | 55/79 [00:03<00:01, 23.96it/s]
 73%|  | 58/79 [00:03<00:00, 24.49it/s]
 77%|  | 61/79 [00:03<00:00, 24.38it/s]
 81%|  | 64/79 [00:03<00:00, 24.58it/s]
 85%| | 67/79 [00:03<00:00, 24.82it/s]
 89%| | 70/79 [00:03<00:00, 25.02it/s]
 92%|| 73/79 [00:03<00:00, 25.15it/s]
 96%|| 76/79 [00:03<00:00, 25.70it/s]
100%|| 79/79 [00:04<00:00, 26.36it/s]
92it/s]
 68%|   | 54/79 [00:03<00:01, 23.37it/s]
 72%|  | 57/79 [00:03<00:00, 23.74it/s]
 76%|  | 60/79 [00:03<00:00, 23.91it/s]
 80%|  | 63/79 [00:03<00:00, 24.00it/s]
 84%| | 66/79 [00:03<00:00, 24.23it/s]
 87%| | 69/79 [00:03<00:00, 24.13it/s]
 91%| | 72/79 [00:03<00:00, 24.13it/s]
 95%|| 75/79 [00:03<00:00, 24.81it/s]
 99%|| 78/79 [00:04<00:00, 25.79it/s]
100%|| 79/79 [00:04<00:00, 18.81it/s]
, 23.30it/s]
 70%|   | 55/79 [00:03<00:01, 23.66it/s]
 73%|  | 58/79 [00:03<00:00, 24.01it/s]
 77%|  | 61/79 [00:03<00:00, 23.92it/s]
 81%|  | 64/79 [00:03<00:00, 24.27it/s]
 85%| | 67/79 [00:03<00:00, 24.22it/s]
 89%| | 70/79 [00:03<00:00, 24.14it/s]
 92%|| 73/79 [00:03<00:00, 24.60it/s]
 96%|| 76/79 [00:03<00:00, 25.10it/s]
100%|| 79/79 [00:04<00:00, 26.04it/s]
, 22.91it/s]
 70%|   | 55/79 [00:03<00:01, 23.12it/s]
 73%|  | 58/79 [00:03<00:00, 23.55it/s]
 77%|  | 61/79 [00:03<00:00, 23.84it/s]
 81%|  | 64/79 [00:03<00:00, 23.85it/s]
 85%| | 67/79 [00:03<00:00, 24.15it/s]
 89%| | 70/79 [00:03<00:00, 23.79it/s]
 92%|| 73/79 [00:03<00:00, 24.37it/s]
 96%|| 76/79 [00:03<00:00, 25.09it/s]
100%|| 79/79 [00:04<00:00, 26.07it/s]
, 22.82it/s]
 70%|   | 55/79 [00:03<00:01, 23.28it/s]
 73%|  | 58/79 [00:03<00:00, 23.84it/s]
 77%|  | 61/79 [00:03<00:00, 23.99it/s]
 81%|  | 64/79 [00:03<00:00, 24.14it/s]
 85%| | 67/79 [00:03<00:00, 24.31it/s]
 89%| | 70/79 [00:03<00:00, 24.50it/s]
 92%|| 73/79 [00:03<00:00, 24.67it/s]
 96%|| 76/79 [00:04<00:00, 25.50it/s]
100%|| 79/79 [00:04<00:00, 26.35it/s]
, 22.84it/s]
 70%|   | 55/79 [00:03<00:01, 23.19it/s]
 73%|  | 58/79 [00:03<00:00, 23.40it/s]
 77%|  | 61/79 [00:03<00:00, 23.45it/s]
 81%|  | 64/79 [00:03<00:00, 23.42it/s]
 85%| | 67/79 [00:03<00:00, 23.46it/s]
 89%| | 70/79 [00:03<00:00, 23.41it/s]
 92%|| 73/79 [00:03<00:00, 23.88it/s]
 96%|| 76/79 [00:04<00:00, 24.73it/s]
100%|| 79/79 [00:04<00:00, 25.64it/s]
, 22.29it/s]
 70%|   | 55/79 [00:03<00:01, 22.86it/s]
 73%|  | 58/79 [00:03<00:00, 23.13it/s]
 77%|  | 61/79 [00:03<00:00, 23.28it/s]
 81%|  | 64/79 [00:03<00:00, 23.37it/s]
 85%| | 67/79 [00:03<00:00, 23.68it/s]
 89%| | 70/79 [00:03<00:00, 23.70it/s]
 92%|| 73/79 [00:03<00:00, 24.01it/s]
 96%|| 76/79 [00:04<00:00, 24.88it/s]
100%|| 79/79 [00:04<00:00, 25.89it/s]
, 23.56it/s]
 70%|   | 55/79 [00:03<00:01, 23.47it/s]
 73%|  | 58/79 [00:03<00:01, 19.85it/s]
 77%|  | 61/79 [00:03<00:00, 18.96it/s]
 81%|  | 64/79 [00:03<00:00, 20.31it/s]
 85%| | 67/79 [00:03<00:00, 21.23it/s]
 89%| | 70/79 [00:03<00:00, 21.96it/s]
 92%|| 73/79 [00:03<00:00, 22.67it/s]
 96%|| 76/79 [00:04<00:00, 23.82it/s]
100%|| 79/79 [00:04<00:00, 24.86it/s]
, 22.89it/s]
 70%|   | 55/79 [00:03<00:01, 23.43it/s]
 73%|  | 58/79 [00:03<00:00, 22.14it/s]
 77%|  | 61/79 [00:03<00:00, 19.47it/s]
 81%|  | 64/79 [00:03<00:00, 20.70it/s]
 85%| | 67/79 [00:03<00:00, 21.76it/s]
 89%| | 70/79 [00:03<00:00, 20.54it/s]
 92%|| 73/79 [00:04<00:00, 18.98it/s]
 95%|| 75/79 [00:04<00:00, 18.17it/s]
 99%|| 78/79 [00:04<00:00, 19.46it/s]
100%|| 79/79 [00:04<00:00, 17.53it/s]
2020-06-23 15:26:35,198 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.513901 (0.028888967895507812 s / img per device, on 32 devices)
2020-06-23 15:26:35,221 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:26:35,221 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:26:35,243 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592951208069, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 3, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592951208070, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 3}}
2020-06-23 15:26:48,734 maskrcnn_benchmark.trainer INFO: eta: 1:24:32  iter: 1840  loss: 0.7877 (0.9868)  loss_classifier: 0.2516 (0.3788)  loss_box_reg: 0.1205 (0.1474)  loss_mask: 0.3042 (0.3816)  loss_objectness: 0.0311 (0.0556)  loss_rpn_box_reg: 0.0135 (0.0233)  time: 0.1096 (0.1329)  data: 0.0015 (0.0224)  lr: 0.160000  max mem: 5020
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 15:26:50,893 maskrcnn_benchmark.trainer INFO: eta: 1:24:19  iter: 1860  loss: 0.7824 (0.9848)  loss_classifier: 0.3138 (0.3780)  loss_box_reg: 0.1304 (0.1473)  loss_mask: 0.2948 (0.3809)  loss_objectness: 0.0320 (0.0554)  loss_rpn_box_reg: 0.0149 (0.0233)  time: 0.1081 (0.1327)  data: 0.0016 (0.0222)  lr: 0.160000  max mem: 5020
2020-06-23 15:26:53,071 maskrcnn_benchmark.trainer INFO: eta: 1:24:07  iter: 1880  loss: 0.7119 (0.9826)  loss_classifier: 0.2452 (0.3770)  loss_box_reg: 0.1090 (0.1471)  loss_mask: 0.2992 (0.3800)  loss_objectness: 0.0270 (0.0552)  loss_rpn_box_reg: 0.0083 (0.0233)  time: 0.1083 (0.1324)  data: 0.0015 (0.0220)  lr: 0.160000  max mem: 5020
2020-06-23 15:26:55,234 maskrcnn_benchmark.trainer INFO: eta: 1:23:54  iter: 1900  loss: 0.6931 (0.9797)  loss_classifier: 0.2164 (0.3756)  loss_box_reg: 0.1043 (0.1467)  loss_mask: 0.2833 (0.3790)  loss_objectness: 0.0185 (0.0549)  loss_rpn_box_reg: 0.0064 (0.0234)  time: 0.1077 (0.1321)  data: 0.0014 (0.0217)  lr: 0.160000  max mem: 5020
2020-06-23 15:26:57,376 maskrcnn_benchmark.trainer INFO: eta: 1:23:42  iter: 1920  loss: 0.6932 (0.9774)  loss_classifier: 0.2378 (0.3746)  loss_box_reg: 0.1093 (0.1465)  loss_mask: 0.2992 (0.3782)  loss_objectness: 0.0164 (0.0548)  loss_rpn_box_reg: 0.0142 (0.0233)  time: 0.1073 (0.1319)  data: 0.0015 (0.0215)  lr: 0.160000  max mem: 5020
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=1.08s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 15:26:59,529 maskrcnn_benchmark.trainer INFO: eta: 1:23:30  iter: 1940  loss: 0.8099 (0.9757)  loss_classifier: 0.3015 (0.3740)  loss_box_reg: 0.1269 (0.1463)  loss_mask: 0.3130 (0.3776)  loss_objectness: 0.0316 (0.0546)  loss_rpn_box_reg: 0.0099 (0.0233)  time: 0.1077 (0.1316)  data: 0.0015 (0.0213)  lr: 0.160000  max mem: 5020
DONE (t=2.00s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21962
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.41004
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.21314
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11674
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.24323
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.28796
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.22106
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.36696
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.38946
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21692
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.42626
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49822
2020-06-23 15:27:01,701 maskrcnn_benchmark.trainer INFO: eta: 1:23:18  iter: 1960  loss: 0.6682 (0.9727)  loss_classifier: 0.2470 (0.3727)  loss_box_reg: 0.1029 (0.1459)  loss_mask: 0.2814 (0.3765)  loss_objectness: 0.0195 (0.0544)  loss_rpn_box_reg: 0.0091 (0.0232)  time: 0.1083 (0.1314)  data: 0.0015 (0.0211)  lr: 0.160000  max mem: 5020
2020-06-23 15:27:03,868 maskrcnn_benchmark.trainer INFO: eta: 1:23:06  iter: 1980  loss: 0.7718 (0.9706)  loss_classifier: 0.2707 (0.3717)  loss_box_reg: 0.1250 (0.1457)  loss_mask: 0.2986 (0.3756)  loss_objectness: 0.0240 (0.0543)  loss_rpn_box_reg: 0.0133 (0.0233)  time: 0.1077 (0.1312)  data: 0.0015 (0.0209)  lr: 0.160000  max mem: 5020
2020-06-23 15:27:06,056 maskrcnn_benchmark.trainer INFO: eta: 1:22:56  iter: 2000  loss: 0.8141 (0.9692)  loss_classifier: 0.2912 (0.3712)  loss_box_reg: 0.1448 (0.1457)  loss_mask: 0.3090 (0.3751)  loss_objectness: 0.0206 (0.0540)  loss_rpn_box_reg: 0.0112 (0.0233)  time: 0.1091 (0.1309)  data: 0.0015 (0.0207)  lr: 0.160000  max mem: 5020
2020-06-23 15:27:08,242 maskrcnn_benchmark.trainer INFO: eta: 1:22:45  iter: 2020  loss: 0.6960 (0.9671)  loss_classifier: 0.2623 (0.3703)  loss_box_reg: 0.1217 (0.1454)  loss_mask: 0.3149 (0.3744)  loss_objectness: 0.0222 (0.0538)  loss_rpn_box_reg: 0.0096 (0.0232)  time: 0.1090 (0.1307)  data: 0.0015 (0.0205)  lr: 0.160000  max mem: 5020
2020-06-23 15:27:10,421 maskrcnn_benchmark.trainer INFO: eta: 1:22:34  iter: 2040  loss: 0.7366 (0.9650)  loss_classifier: 0.2950 (0.3694)  loss_box_reg: 0.1261 (0.1452)  loss_mask: 0.2973 (0.3737)  loss_objectness: 0.0180 (0.0535)  loss_rpn_box_reg: 0.0139 (0.0231)  time: 0.1090 (0.1305)  data: 0.0015 (0.0204)  lr: 0.160000  max mem: 5020
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:27:12,590 maskrcnn_benchmark.trainer INFO: eta: 1:22:23  iter: 2060  loss: 0.7999 (0.9638)  loss_classifier: 0.3364 (0.3690)  loss_box_reg: 0.1420 (0.1453)  loss_mask: 0.3008 (0.3731)  loss_objectness: 0.0272 (0.0534)  loss_rpn_box_reg: 0.0130 (0.0231)  time: 0.1084 (0.1303)  data: 0.0016 (0.0202)  lr: 0.160000  max mem: 5020
DONE (t=2.95s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:27:14,764 maskrcnn_benchmark.trainer INFO: eta: 1:22:13  iter: 2080  loss: 0.8393 (0.9629)  loss_classifier: 0.3395 (0.3685)  loss_box_reg: 0.1517 (0.1453)  loss_mask: 0.3013 (0.3725)  loss_objectness: 0.0320 (0.0533)  loss_rpn_box_reg: 0.0159 (0.0232)  time: 0.1079 (0.1301)  data: 0.0016 (0.0200)  lr: 0.160000  max mem: 5023
2020-06-23 15:27:16,949 maskrcnn_benchmark.trainer INFO: eta: 1:22:03  iter: 2100  loss: 0.8356 (0.9617)  loss_classifier: 0.3191 (0.3681)  loss_box_reg: 0.1362 (0.1452)  loss_mask: 0.3048 (0.3720)  loss_objectness: 0.0411 (0.0532)  loss_rpn_box_reg: 0.0148 (0.0232)  time: 0.1082 (0.1299)  data: 0.0016 (0.0198)  lr: 0.160000  max mem: 5023
DONE (t=3.42s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22068
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.38975
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.22244
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.08357
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.24151
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.33367
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.22567
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.35912
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37831
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19304
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.41950
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.50218
2020-06-23 15:27:17,679 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.21961771062095597, segm mAP: 0.22067521502185344
:::MLLOG {"namespace": "", "time_ms": 1592951237680, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.21961771062095597, "SEGM": 0.22067521502185344}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1592951237680, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 2}}
2020-06-23 15:27:19,303 maskrcnn_benchmark.trainer INFO: eta: 1:21:56  iter: 2120  loss: 0.6127 (0.9594)  loss_classifier: 0.2300 (0.3670)  loss_box_reg: 0.0985 (0.1449)  loss_mask: 0.2927 (0.3712)  loss_objectness: 0.0209 (0.0531)  loss_rpn_box_reg: 0.0109 (0.0231)  time: 0.1079 (0.1298)  data: 0.0015 (0.0196)  lr: 0.160000  max mem: 5023
2020-06-23 15:27:21,470 maskrcnn_benchmark.trainer INFO: eta: 1:21:46  iter: 2140  loss: 0.7709 (0.9577)  loss_classifier: 0.2916 (0.3664)  loss_box_reg: 0.1327 (0.1448)  loss_mask: 0.2835 (0.3705)  loss_objectness: 0.0267 (0.0529)  loss_rpn_box_reg: 0.0139 (0.0231)  time: 0.1077 (0.1296)  data: 0.0014 (0.0195)  lr: 0.160000  max mem: 5023
2020-06-23 15:27:23,650 maskrcnn_benchmark.trainer INFO: eta: 1:21:36  iter: 2160  loss: 0.8284 (0.9567)  loss_classifier: 0.3295 (0.3660)  loss_box_reg: 0.1447 (0.1448)  loss_mask: 0.2933 (0.3700)  loss_objectness: 0.0467 (0.0528)  loss_rpn_box_reg: 0.0115 (0.0231)  time: 0.1079 (0.1294)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5023
2020-06-23 15:27:25,805 maskrcnn_benchmark.trainer INFO: eta: 1:21:26  iter: 2180  loss: 0.7462 (0.9548)  loss_classifier: 0.2613 (0.3652)  loss_box_reg: 0.1122 (0.1446)  loss_mask: 0.2976 (0.3693)  loss_objectness: 0.0262 (0.0527)  loss_rpn_box_reg: 0.0072 (0.0230)  time: 0.1071 (0.1292)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5023
2020-06-23 15:27:27,962 maskrcnn_benchmark.trainer INFO: eta: 1:21:16  iter: 2200  loss: 0.6864 (0.9530)  loss_classifier: 0.2545 (0.3644)  loss_box_reg: 0.1193 (0.1445)  loss_mask: 0.3002 (0.3687)  loss_objectness: 0.0249 (0.0525)  loss_rpn_box_reg: 0.0109 (0.0229)  time: 0.1078 (0.1290)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5023
2020-06-23 15:27:30,108 maskrcnn_benchmark.trainer INFO: eta: 1:21:06  iter: 2220  loss: 0.7086 (0.9509)  loss_classifier: 0.2321 (0.3635)  loss_box_reg: 0.1099 (0.1443)  loss_mask: 0.2886 (0.3680)  loss_objectness: 0.0177 (0.0522)  loss_rpn_box_reg: 0.0093 (0.0228)  time: 0.1069 (0.1288)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5023
2020-06-23 15:27:32,249 maskrcnn_benchmark.trainer INFO: eta: 1:20:56  iter: 2240  loss: 0.8444 (0.9500)  loss_classifier: 0.3192 (0.3631)  loss_box_reg: 0.1403 (0.1443)  loss_mask: 0.3209 (0.3676)  loss_objectness: 0.0322 (0.0521)  loss_rpn_box_reg: 0.0159 (0.0229)  time: 0.1064 (0.1286)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5023
2020-06-23 15:27:34,415 maskrcnn_benchmark.trainer INFO: eta: 1:20:47  iter: 2260  loss: 0.7327 (0.9484)  loss_classifier: 0.2541 (0.3624)  loss_box_reg: 0.1144 (0.1441)  loss_mask: 0.3031 (0.3671)  loss_objectness: 0.0224 (0.0520)  loss_rpn_box_reg: 0.0067 (0.0229)  time: 0.1074 (0.1284)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5023
2020-06-23 15:27:36,546 maskrcnn_benchmark.trainer INFO: eta: 1:20:37  iter: 2280  loss: 0.7422 (0.9468)  loss_classifier: 0.2495 (0.3617)  loss_box_reg: 0.1120 (0.1439)  loss_mask: 0.3283 (0.3666)  loss_objectness: 0.0199 (0.0518)  loss_rpn_box_reg: 0.0094 (0.0228)  time: 0.1058 (0.1282)  data: 0.0013 (0.0184)  lr: 0.160000  max mem: 5023
2020-06-23 15:27:38,694 maskrcnn_benchmark.trainer INFO: eta: 1:20:27  iter: 2300  loss: 0.8635 (0.9461)  loss_classifier: 0.3119 (0.3615)  loss_box_reg: 0.1399 (0.1439)  loss_mask: 0.3174 (0.3662)  loss_objectness: 0.0263 (0.0517)  loss_rpn_box_reg: 0.0110 (0.0228)  time: 0.1071 (0.1281)  data: 0.0015 (0.0182)  lr: 0.160000  max mem: 5023
2020-06-23 15:27:40,859 maskrcnn_benchmark.trainer INFO: eta: 1:20:18  iter: 2320  loss: 0.7351 (0.9443)  loss_classifier: 0.2670 (0.3607)  loss_box_reg: 0.0969 (0.1437)  loss_mask: 0.2781 (0.3655)  loss_objectness: 0.0213 (0.0516)  loss_rpn_box_reg: 0.0100 (0.0228)  time: 0.1085 (0.1279)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5023
2020-06-23 15:27:43,029 maskrcnn_benchmark.trainer INFO: eta: 1:20:10  iter: 2340  loss: 0.7366 (0.9427)  loss_classifier: 0.2884 (0.3601)  loss_box_reg: 0.1211 (0.1435)  loss_mask: 0.2864 (0.3648)  loss_objectness: 0.0253 (0.0514)  loss_rpn_box_reg: 0.0132 (0.0227)  time: 0.1074 (0.1277)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5023
2020-06-23 15:27:45,184 maskrcnn_benchmark.trainer INFO: eta: 1:20:01  iter: 2360  loss: 0.7725 (0.9416)  loss_classifier: 0.2872 (0.3597)  loss_box_reg: 0.1432 (0.1435)  loss_mask: 0.2841 (0.3643)  loss_objectness: 0.0304 (0.0514)  loss_rpn_box_reg: 0.0148 (0.0227)  time: 0.1074 (0.1276)  data: 0.0013 (0.0178)  lr: 0.160000  max mem: 5023
2020-06-23 15:27:47,337 maskrcnn_benchmark.trainer INFO: eta: 1:19:52  iter: 2380  loss: 0.7612 (0.9409)  loss_classifier: 0.3090 (0.3594)  loss_box_reg: 0.1428 (0.1435)  loss_mask: 0.2970 (0.3639)  loss_objectness: 0.0374 (0.0513)  loss_rpn_box_reg: 0.0183 (0.0227)  time: 0.1079 (0.1274)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5023
2020-06-23 15:27:49,502 maskrcnn_benchmark.trainer INFO: eta: 1:19:43  iter: 2400  loss: 0.7136 (0.9394)  loss_classifier: 0.2926 (0.3588)  loss_box_reg: 0.1087 (0.1433)  loss_mask: 0.2907 (0.3634)  loss_objectness: 0.0228 (0.0511)  loss_rpn_box_reg: 0.0094 (0.0227)  time: 0.1074 (0.1272)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5023
2020-06-23 15:27:51,673 maskrcnn_benchmark.trainer INFO: eta: 1:19:35  iter: 2420  loss: 0.8333 (0.9381)  loss_classifier: 0.3158 (0.3582)  loss_box_reg: 0.1444 (0.1433)  loss_mask: 0.2985 (0.3629)  loss_objectness: 0.0284 (0.0510)  loss_rpn_box_reg: 0.0107 (0.0227)  time: 0.1081 (0.1271)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5023
2020-06-23 15:27:53,846 maskrcnn_benchmark.trainer INFO: eta: 1:19:27  iter: 2440  loss: 0.6949 (0.9365)  loss_classifier: 0.2749 (0.3576)  loss_box_reg: 0.1176 (0.1431)  loss_mask: 0.2925 (0.3623)  loss_objectness: 0.0188 (0.0508)  loss_rpn_box_reg: 0.0070 (0.0227)  time: 0.1081 (0.1269)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5023
2020-06-23 15:27:56,009 maskrcnn_benchmark.trainer INFO: eta: 1:19:18  iter: 2460  loss: 0.7467 (0.9351)  loss_classifier: 0.2965 (0.3570)  loss_box_reg: 0.1170 (0.1430)  loss_mask: 0.2762 (0.3617)  loss_objectness: 0.0222 (0.0507)  loss_rpn_box_reg: 0.0113 (0.0227)  time: 0.1077 (0.1268)  data: 0.0014 (0.0171)  lr: 0.160000  max mem: 5023
2020-06-23 15:27:58,175 maskrcnn_benchmark.trainer INFO: eta: 1:19:10  iter: 2480  loss: 0.8098 (0.9343)  loss_classifier: 0.2994 (0.3567)  loss_box_reg: 0.1361 (0.1430)  loss_mask: 0.3089 (0.3612)  loss_objectness: 0.0272 (0.0507)  loss_rpn_box_reg: 0.0099 (0.0226)  time: 0.1083 (0.1266)  data: 0.0015 (0.0170)  lr: 0.160000  max mem: 5023
2020-06-23 15:28:00,352 maskrcnn_benchmark.trainer INFO: eta: 1:19:02  iter: 2500  loss: 0.7066 (0.9327)  loss_classifier: 0.2699 (0.3560)  loss_box_reg: 0.1085 (0.1428)  loss_mask: 0.2992 (0.3607)  loss_objectness: 0.0181 (0.0506)  loss_rpn_box_reg: 0.0123 (0.0227)  time: 0.1081 (0.1265)  data: 0.0013 (0.0169)  lr: 0.160000  max mem: 5023
2020-06-23 15:28:02,520 maskrcnn_benchmark.trainer INFO: eta: 1:18:55  iter: 2520  loss: 0.7193 (0.9313)  loss_classifier: 0.2679 (0.3556)  loss_box_reg: 0.1127 (0.1425)  loss_mask: 0.2689 (0.3600)  loss_objectness: 0.0208 (0.0505)  loss_rpn_box_reg: 0.0073 (0.0227)  time: 0.1083 (0.1263)  data: 0.0014 (0.0168)  lr: 0.160000  max mem: 5055
2020-06-23 15:28:04,678 maskrcnn_benchmark.trainer INFO: eta: 1:18:47  iter: 2540  loss: 0.7104 (0.9296)  loss_classifier: 0.2562 (0.3547)  loss_box_reg: 0.0992 (0.1423)  loss_mask: 0.3063 (0.3596)  loss_objectness: 0.0198 (0.0503)  loss_rpn_box_reg: 0.0096 (0.0226)  time: 0.1077 (0.1262)  data: 0.0014 (0.0166)  lr: 0.160000  max mem: 5055
2020-06-23 15:28:06,842 maskrcnn_benchmark.trainer INFO: eta: 1:18:39  iter: 2560  loss: 0.6851 (0.9279)  loss_classifier: 0.1978 (0.3538)  loss_box_reg: 0.1075 (0.1422)  loss_mask: 0.2842 (0.3591)  loss_objectness: 0.0317 (0.0502)  loss_rpn_box_reg: 0.0111 (0.0226)  time: 0.1076 (0.1260)  data: 0.0015 (0.0165)  lr: 0.160000  max mem: 5055
2020-06-23 15:28:09,011 maskrcnn_benchmark.trainer INFO: eta: 1:18:31  iter: 2580  loss: 0.7073 (0.9269)  loss_classifier: 0.2496 (0.3532)  loss_box_reg: 0.1186 (0.1421)  loss_mask: 0.2857 (0.3586)  loss_objectness: 0.0262 (0.0502)  loss_rpn_box_reg: 0.0141 (0.0228)  time: 0.1085 (0.1259)  data: 0.0015 (0.0164)  lr: 0.160000  max mem: 5055
2020-06-23 15:28:11,179 maskrcnn_benchmark.trainer INFO: eta: 1:18:24  iter: 2600  loss: 0.7423 (0.9253)  loss_classifier: 0.2690 (0.3526)  loss_box_reg: 0.1295 (0.1420)  loss_mask: 0.2656 (0.3580)  loss_objectness: 0.0213 (0.0500)  loss_rpn_box_reg: 0.0075 (0.0227)  time: 0.1073 (0.1258)  data: 0.0015 (0.0163)  lr: 0.160000  max mem: 5055
2020-06-23 15:28:13,350 maskrcnn_benchmark.trainer INFO: eta: 1:18:16  iter: 2620  loss: 0.7223 (0.9238)  loss_classifier: 0.2465 (0.3519)  loss_box_reg: 0.1057 (0.1418)  loss_mask: 0.3039 (0.3576)  loss_objectness: 0.0192 (0.0498)  loss_rpn_box_reg: 0.0069 (0.0227)  time: 0.1083 (0.1256)  data: 0.0014 (0.0162)  lr: 0.160000  max mem: 5093
2020-06-23 15:28:15,503 maskrcnn_benchmark.trainer INFO: eta: 1:18:09  iter: 2640  loss: 0.8411 (0.9229)  loss_classifier: 0.2922 (0.3514)  loss_box_reg: 0.1236 (0.1417)  loss_mask: 0.3153 (0.3573)  loss_objectness: 0.0334 (0.0497)  loss_rpn_box_reg: 0.0136 (0.0227)  time: 0.1071 (0.1255)  data: 0.0014 (0.0161)  lr: 0.160000  max mem: 5093
2020-06-23 15:28:17,661 maskrcnn_benchmark.trainer INFO: eta: 1:18:01  iter: 2660  loss: 0.7090 (0.9216)  loss_classifier: 0.2885 (0.3509)  loss_box_reg: 0.1024 (0.1416)  loss_mask: 0.3015 (0.3569)  loss_objectness: 0.0229 (0.0496)  loss_rpn_box_reg: 0.0104 (0.0227)  time: 0.1075 (0.1254)  data: 0.0013 (0.0159)  lr: 0.160000  max mem: 5093
2020-06-23 15:28:19,836 maskrcnn_benchmark.trainer INFO: eta: 1:17:54  iter: 2680  loss: 0.7736 (0.9205)  loss_classifier: 0.2755 (0.3505)  loss_box_reg: 0.1212 (0.1415)  loss_mask: 0.3067 (0.3565)  loss_objectness: 0.0209 (0.0495)  loss_rpn_box_reg: 0.0128 (0.0226)  time: 0.1085 (0.1253)  data: 0.0014 (0.0158)  lr: 0.160000  max mem: 5093
2020-06-23 15:28:22,008 maskrcnn_benchmark.trainer INFO: eta: 1:17:47  iter: 2700  loss: 0.7736 (0.9195)  loss_classifier: 0.2739 (0.3500)  loss_box_reg: 0.1243 (0.1414)  loss_mask: 0.3056 (0.3561)  loss_objectness: 0.0318 (0.0494)  loss_rpn_box_reg: 0.0147 (0.0227)  time: 0.1082 (0.1251)  data: 0.0015 (0.0157)  lr: 0.160000  max mem: 5093
2020-06-23 15:28:24,180 maskrcnn_benchmark.trainer INFO: eta: 1:17:40  iter: 2720  loss: 0.8632 (0.9190)  loss_classifier: 0.3173 (0.3498)  loss_box_reg: 0.1383 (0.1414)  loss_mask: 0.2943 (0.3557)  loss_objectness: 0.0347 (0.0494)  loss_rpn_box_reg: 0.0183 (0.0227)  time: 0.1085 (0.1250)  data: 0.0015 (0.0156)  lr: 0.160000  max mem: 5093
2020-06-23 15:28:26,346 maskrcnn_benchmark.trainer INFO: eta: 1:17:33  iter: 2740  loss: 0.7220 (0.9177)  loss_classifier: 0.2608 (0.3492)  loss_box_reg: 0.1121 (0.1412)  loss_mask: 0.2994 (0.3553)  loss_objectness: 0.0254 (0.0493)  loss_rpn_box_reg: 0.0172 (0.0227)  time: 0.1083 (0.1249)  data: 0.0015 (0.0155)  lr: 0.160000  max mem: 5093
:::MLLOG {"namespace": "", "time_ms": 1592951308634, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1592951308634, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1592951308634, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 3}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 15:28:28,875 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.29s)
Done (t=0.29s)
creating index...
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
2020-06-23 15:28:29,184 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.41it/s]
 13%|        | 10/79 [00:01<00:20,  3.32it/s]
 16%|        | 13/79 [00:01<00:14,  4.48it/s]
 20%|        | 16/79 [00:01<00:10,  5.96it/s]
 24%|       | 19/79 [00:01<00:07,  7.74it/s]
 28%|       | 22/79 [00:01<00:05,  9.54it/s]
 32%|      | 25/79 [00:01<00:04, 11.76it/s]
 35%|      | 28/79 [00:01<00:03, 14.08it/s]
 39%|      | 31/79 [00:02<00:02, 16.26it/s]
 43%|     | 34/79 [00:02<00:02, 18.33it/s]
 47%|     | 37/79 [00:02<00:02, 20.01it/s]
 51%|     | 40/79 [00:02<00:01, 21.49it/s]
 54%|    | 43/79 [00:02<00:01, 22.65it/s]
 58%|    | 46/79 [00:02<00:01, 23.49it/s]
 62%|   | 49/79 [00:02<00:01, 24.06it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  4%|         | 3/79 [00:00<00:43,  1.73it/s]
  6%|         | 5/79 [00:01<00:31,  2.39it/s]
 10%|         | 8/79 [00:01<00:21,  3.26it/s]
 14%|        | 11/79 [00:01<00:15,  4.41it/s]
 18%|        | 14/79 [00:01<00:11,  5.84it/s]
 22%|       | 17/79 [00:01<00:08,  7.58it/s]
 25%|       | 20/79 [00:01<00:06,  9.54it/s]
 29%|       | 23/79 [00:01<00:04, 11.63it/s]
 33%|      | 26/79 [00:01<00:03, 13.87it/s]
 37%|      | 29/79 [00:01<00:03, 16.05it/s]
 41%|      | 32/79 [00:02<00:02, 17.88it/s]
 44%|     | 35/79 [00:02<00:02, 19.38it/s]
 48%|     | 38/79 [00:02<00:01, 20.67it/s]
 52%|    | 41/79 [00:02<00:01, 21.89it/s]
 56%|    | 44/79 [00:02<00:01, 22.40it/s]
 59%|    | 47/79 [00:02<00:01, 22.93it/s]
 63%|   | 50/79 [00:02<00:01, 23.41it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.60it/s]
 28%|       | 22/79 [00:01<00:05,  9.62it/s]
 32%|      | 25/79 [00:01<00:04, 11.80it/s]
 35%|      | 28/79 [00:01<00:03, 14.11it/s]
 39%|      | 31/79 [00:02<00:02, 16.20it/s]
 43%|     | 34/79 [00:02<00:02, 18.11it/s]
 47%|     | 37/79 [00:02<00:02, 19.75it/s]
 51%|     | 40/79 [00:02<00:01, 21.24it/s]
 54%|    | 43/79 [00:02<00:01, 22.19it/s]
 58%|    | 46/79 [00:02<00:01, 22.95it/s]
 62%|   | 49/79 [00:02<00:01, 23.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:43,  1.74it/s]
  9%|         | 7/79 [00:01<00:29,  2.40it/s]
 13%|        | 10/79 [00:01<00:20,  3.30it/s]
 16%|        | 13/79 [00:01<00:14,  4.46it/s]
 20%|        | 16/79 [00:01<00:10,  5.91it/s]
 24%|       | 19/79 [00:01<00:07,  7.68it/s]
 28%|       | 22/79 [00:01<00:05,  9.73it/s]
 32%|      | 25/79 [00:01<00:04, 11.89it/s]
 35%|      | 28/79 [00:01<00:03, 14.13it/s]
 39%|      | 31/79 [00:02<00:02, 16.41it/s]
 43%|     | 34/79 [00:02<00:02, 18.35it/s]
 47%|     | 37/79 [00:02<00:02, 19.96it/s]
 51%|     | 40/79 [00:02<00:01, 21.14it/s]
 54%|    | 43/79 [00:02<00:01, 22.21it/s]
 58%|    | 46/79 [00:02<00:01, 23.02it/s]
 62%|   | 49/79 [00:02<00:01, 23.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  4%|         | 3/79 [00:01<00:49,  1.53it/s]
  8%|         | 6/79 [00:01<00:34,  2.13it/s]
 11%|        | 9/79 [00:01<00:23,  2.94it/s]
 15%|        | 12/79 [00:01<00:16,  4.00it/s]
 19%|        | 15/79 [00:01<00:11,  5.35it/s]
 23%|       | 18/79 [00:01<00:08,  7.01it/s]
 27%|       | 21/79 [00:01<00:06,  8.95it/s]
 30%|       | 24/79 [00:01<00:04, 11.13it/s]
 34%|      | 27/79 [00:01<00:03, 13.36it/s]
 38%|      | 30/79 [00:02<00:03, 15.58it/s]
 42%|     | 33/79 [00:02<00:02, 17.66it/s]
 46%|     | 36/79 [00:02<00:02, 19.57it/s]
 49%|     | 39/79 [00:02<00:01, 21.04it/s]
 53%|    | 42/79 [00:02<00:01, 21.88it/s]
 57%|    | 45/79 [00:02<00:01, 22.64it/s]
 61%|    | 48/79 [00:02<00:01, 23.24it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.70it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.37it/s]
 32%|      | 25/79 [00:01<00:04, 11.51it/s]
 35%|      | 28/79 [00:01<00:03, 13.78it/s]
 39%|      | 31/79 [00:02<00:03, 15.93it/s]
 43%|     | 34/79 [00:02<00:02, 17.70it/s]
 47%|     | 37/79 [00:02<00:02, 19.41it/s]
 51%|     | 40/79 [00:02<00:01, 20.65it/s]
 54%|    | 43/79 [00:02<00:01, 21.91it/s]
 58%|    | 46/79 [00:02<00:01, 22.62it/s]
 62%|   | 49/79 [00:02<00:01, 23.40it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.40it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.67it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.70it/s]
 47%|     | 37/79 [00:02<00:02, 19.37it/s]
 51%|     | 40/79 [00:02<00:01, 20.68it/s]
 54%|    | 43/79 [00:02<00:01, 21.74it/s]
 58%|    | 46/79 [00:02<00:01, 22.58it/s]
 62%|   | 49/79 [00:02<00:01, 23.02it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.34it/s]
 32%|      | 25/79 [00:01<00:04, 11.36it/s]
 35%|      | 28/79 [00:01<00:03, 13.59it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.58it/s]
 47%|     | 37/79 [00:02<00:02, 19.36it/s]
 51%|     | 40/79 [00:02<00:01, 20.72it/s]
 54%|    | 43/79 [00:02<00:01, 21.86it/s]
 58%|    | 46/79 [00:02<00:01, 22.75it/s]
 62%|   | 49/79 [00:02<00:01, 23.30it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.13it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.20it/s]
 28%|       | 22/79 [00:01<00:06,  9.16it/s]
 32%|      | 25/79 [00:01<00:04, 11.33it/s]
 35%|      | 28/79 [00:01<00:03, 13.62it/s]
 39%|      | 31/79 [00:02<00:03, 15.77it/s]
 43%|     | 34/79 [00:02<00:02, 17.69it/s]
 47%|     | 37/79 [00:02<00:02, 19.24it/s]
 51%|     | 40/79 [00:02<00:01, 20.79it/s]
 54%|    | 43/79 [00:02<00:01, 21.87it/s]
 58%|    | 46/79 [00:02<00:01, 22.67it/s]
 62%|   | 49/79 [00:02<00:01, 23.42it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.34it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.72it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.59it/s]
 47%|     | 37/79 [00:02<00:02, 19.35it/s]
 51%|     | 40/79 [00:02<00:01, 20.65it/s]
 54%|    | 43/79 [00:02<00:01, 21.70it/s]
 58%|    | 46/79 [00:02<00:01, 22.52it/s]
 62%|   | 49/79 [00:02<00:01, 23.15it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:01<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.33it/s]
 32%|      | 25/79 [00:01<00:04, 11.49it/s]
 35%|      | 28/79 [00:01<00:03, 13.74it/s]
 39%|      | 31/79 [00:02<00:03, 15.86it/s]
 43%|     | 34/79 [00:02<00:02, 17.73it/s]
 47%|     | 37/79 [00:02<00:02, 19.28it/s]
 51%|     | 40/79 [00:02<00:01, 20.44it/s]
 54%|    | 43/79 [00:02<00:01, 21.69it/s]
 58%|    | 46/79 [00:02<00:01, 22.15it/s]
 62%|   | 49/79 [00:02<00:01, 23.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  6.97it/s]
 27%|       | 21/79 [00:01<00:06,  8.35it/s]
 30%|       | 24/79 [00:01<00:05, 10.46it/s]
 34%|      | 27/79 [00:02<00:04, 12.72it/s]
 38%|      | 30/79 [00:02<00:03, 14.93it/s]
 42%|     | 33/79 [00:02<00:02, 17.08it/s]
 46%|     | 36/79 [00:02<00:02, 18.92it/s]
 49%|     | 39/79 [00:02<00:01, 20.42it/s]
 53%|    | 42/79 [00:02<00:01, 21.48it/s]
 57%|    | 45/79 [00:02<00:01, 22.33it/s]
 61%|    | 48/79 [00:02<00:01, 22.93it/s]
 65%|   | 51/79 [00:02<00:01, 23
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.07it/s]
 28%|       | 22/79 [00:01<00:06,  8.98it/s]
 32%|      | 25/79 [00:01<00:04, 11.11it/s]
 35%|      | 28/79 [00:01<00:03, 13.26it/s]
 39%|      | 31/79 [00:02<00:03, 15.36it/s]
 43%|     | 34/79 [00:02<00:02, 17.25it/s]
 47%|     | 37/79 [00:02<00:02, 18.97it/s]
 51%|     | 40/79 [00:02<00:01, 20.38it/s]
 54%|    | 43/79 [00:02<00:01, 21.52it/s]
 58%|    | 46/79 [00:02<00:01, 22.35it/s]
 62%|   | 49/79 [00:02<00:01, 23.01it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.05it/s]
 28%|       | 22/79 [00:01<00:06,  8.97it/s]
 32%|      | 25/79 [00:01<00:04, 11.12it/s]
 35%|      | 28/79 [00:01<00:03, 13.36it/s]
 39%|      | 31/79 [00:02<00:03, 15.51it/s]
 43%|     | 34/79 [00:02<00:02, 17.54it/s]
 47%|     | 37/79 [00:02<00:02, 19.21it/s]
 51%|     | 40/79 [00:02<00:01, 20.48it/s]
 54%|    | 43/79 [00:02<00:01, 21.83it/s]
 58%|    | 46/79 [00:02<00:01, 22.71it/s]
 62%|   | 49/79 [00:02<00:01, 23.43it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.23it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.30it/s]
 35%|      | 28/79 [00:01<00:03, 13.49it/s]
 39%|      | 31/79 [00:02<00:03, 15.58it/s]
 43%|     | 34/79 [00:02<00:02, 17.49it/s]
 47%|     | 37/79 [00:02<00:02, 19.18it/s]
 51%|     | 40/79 [00:02<00:01, 20.45it/s]
 54%|    | 43/79 [00:02<00:01, 21.43it/s]
 58%|    | 46/79 [00:02<00:01, 22.39it/s]
 62%|   | 49/79 [00:02<00:01, 23.17it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  4%|         | 3/79 [00:00<00:47,  1.58it/s]
  8%|         | 6/79 [00:01<00:33,  2.20it/s]
 11%|        | 9/79 [00:01<00:23,  3.03it/s]
 15%|        | 12/79 [00:01<00:16,  4.10it/s]
 19%|        | 15/79 [00:01<00:11,  5.47it/s]
 23%|       | 18/79 [00:01<00:08,  7.15it/s]
 27%|       | 21/79 [00:01<00:06,  9.06it/s]
 30%|       | 24/79 [00:01<00:04, 11.17it/s]
 34%|      | 27/79 [00:01<00:03, 13.38it/s]
 38%|      | 30/79 [00:02<00:03, 15.40it/s]
 42%|     | 33/79 [00:02<00:02, 17.25it/s]
 46%|     | 36/79 [00:02<00:02, 18.83it/s]
 49%|     | 39/79 [00:02<00:01, 20.19it/s]
 53%|    | 42/79 [00:02<00:01, 21.22it/s]
 57%|    | 45/79 [00:02<00:01, 22.10it/s]
 61%|    | 48/79 [00:02<00:01, 22.73it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.87it/s]
 20%|        | 16/79 [00:01<00:12,  5.19it/s]
 24%|       | 19/79 [00:01<00:08,  6.82it/s]
 28%|       | 22/79 [00:01<00:06,  8.72it/s]
 32%|      | 25/79 [00:01<00:04, 10.85it/s]
 35%|      | 28/79 [00:02<00:03, 13.10it/s]
 39%|      | 31/79 [00:02<00:03, 15.35it/s]
 43%|     | 34/79 [00:02<00:02, 17.50it/s]
 47%|     | 37/79 [00:02<00:02, 19.22it/s]
 51%|     | 40/79 [00:02<00:01, 20.75it/s]
 54%|    | 43/79 [00:02<00:01, 21.81it/s]
 58%|    | 46/79 [00:02<00:01, 22.73it/s]
 62%|   | 49/79 [00:02<00:01, 23.29it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.06it/s]
 28%|       | 22/79 [00:01<00:06,  8.94it/s]
 32%|      | 25/79 [00:01<00:04, 11.08it/s]
 35%|      | 28/79 [00:02<00:03, 13.26it/s]
 39%|      | 31/79 [00:02<00:03, 15.45it/s]
 43%|     | 34/79 [00:02<00:02, 17.47it/s]
 47%|     | 37/79 [00:02<00:02, 19.19it/s]
 51%|     | 40/79 [00:02<00:01, 20.51it/s]
 54%|    | 43/79 [00:02<00:01, 21.55it/s]
 58%|    | 46/79 [00:02<00:01, 22.31it/s]
 62%|   | 49/79 [00:02<00:01, 23.04it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.27it/s]
 24%|       | 19/79 [00:01<00:08,  6.89it/s]
 28%|       | 22/79 [00:01<00:06,  8.83it/s]
 32%|      | 25/79 [00:01<00:04, 10.93it/s]
 35%|      | 28/79 [00:02<00:03, 13.15it/s]
 39%|      | 31/79 [00:02<00:03, 15.29it/s]
 43%|     | 34/79 [00:02<00:02, 17.37it/s]
 47%|     | 37/79 [00:02<00:02, 18.85it/s]
 51%|     | 40/79 [00:02<00:01, 20.31it/s]
 54%|    | 43/79 [00:02<00:01, 21.39it/s]
 58%|    | 46/79 [00:02<00:01, 22.28it/s]
 62%|   | 49/79 [00:02<00:01, 22.99it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.93it/s]
 20%|        | 16/79 [00:01<00:11,  5.27it/s]
 24%|       | 19/79 [00:01<00:08,  6.90it/s]
 28%|       | 22/79 [00:01<00:06,  8.81it/s]
 32%|      | 25/79 [00:01<00:04, 10.94it/s]
 35%|      | 28/79 [00:02<00:03, 13.16it/s]
 39%|      | 31/79 [00:02<00:03, 15.31it/s]
 43%|     | 34/79 [00:02<00:02, 17.35it/s]
 47%|     | 37/79 [00:02<00:02, 19.08it/s]
 51%|     | 40/79 [00:02<00:01, 20.54it/s]
 54%|    | 43/79 [00:02<00:01, 21.55it/s]
 58%|    | 46/79 [00:02<00:01, 22.24it/s]
 62%|   | 49/79 [00:02<00:01, 22.99it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:16,  3.88it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.84it/s]
 28%|       | 22/79 [00:01<00:06,  8.74it/s]
 32%|      | 25/79 [00:01<00:04, 10.86it/s]
 35%|      | 28/79 [00:02<00:03, 13.13it/s]
 39%|      | 31/79 [00:02<00:03, 15.35it/s]
 43%|     | 34/79 [00:02<00:02, 17.40it/s]
 47%|     | 37/79 [00:02<00:02, 19.20it/s]
 51%|     | 40/79 [00:02<00:01, 20.65it/s]
 54%|    | 43/79 [00:02<00:01, 21.95it/s]
 58%|    | 46/79 [00:02<00:01, 22.70it/s]
 62%|   | 49/79 [00:02<00:01, 23.22it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.23it/s]
 32%|      | 25/79 [00:01<00:04, 11.34it/s]
 35%|      | 28/79 [00:01<00:03, 13.46it/s]
 39%|      | 31/79 [00:02<00:03, 15.54it/s]
 43%|     | 34/79 [00:02<00:02, 17.31it/s]
 47%|     | 37/79 [00:02<00:02, 18.76it/s]
 51%|     | 40/79 [00:02<00:01, 20.08it/s]
 54%|    | 43/79 [00:02<00:01, 21.23it/s]
 58%|    | 46/79 [00:02<00:01, 21.97it/s]
 62%|   | 49/79 [00:02<00:01, 22.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.87it/s]
 20%|        | 16/79 [00:01<00:12,  5.18it/s]
 24%|       | 19/79 [00:01<00:08,  6.79it/s]
 28%|       | 22/79 [00:01<00:06,  8.71it/s]
 32%|      | 25/79 [00:01<00:04, 10.84it/s]
 35%|      | 28/79 [00:02<00:03, 13.11it/s]
 39%|      | 31/79 [00:02<00:03, 15.19it/s]
 43%|     | 34/79 [00:02<00:02, 17.26it/s]
 47%|     | 37/79 [00:02<00:02, 18.99it/s]
 51%|     | 40/79 [00:02<00:01, 20.46it/s]
 54%|    | 43/79 [00:02<00:01, 21.59it/s]
 58%|    | 46/79 [00:02<00:01, 22.48it/s]
 62%|   | 49/79 [00:02<00:01, 23.08it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.48it/s]
 24%|       | 19/79 [00:01<00:08,  7.14it/s]
 28%|       | 22/79 [00:01<00:06,  9.07it/s]
 32%|      | 25/79 [00:01<00:04, 11.15it/s]
 35%|      | 28/79 [00:02<00:03, 13.29it/s]
 39%|      | 31/79 [00:02<00:03, 15.36it/s]
 43%|     | 34/79 [00:02<00:02, 17.38it/s]
 47%|     | 37/79 [00:02<00:02, 18.76it/s]
 51%|     | 40/79 [00:02<00:01, 20.09it/s]
 54%|    | 43/79 [00:02<00:01, 21.16it/s]
 58%|    | 46/79 [00:02<00:01, 21.98it/s]
 62%|   | 49/79 [00:02<00:01, 22.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.23it/s]
 24%|       | 19/79 [00:01<00:08,  6.85it/s]
 28%|       | 22/79 [00:01<00:06,  8.76it/s]
 32%|      | 25/79 [00:01<00:04, 10.80it/s]
 35%|      | 28/79 [00:02<00:03, 13.05it/s]
 39%|      | 31/79 [00:02<00:03, 15.36it/s]
 43%|     | 34/79 [00:02<00:02, 17.34it/s]
 47%|     | 37/79 [00:02<00:02, 19.04it/s]
 51%|     | 40/79 [00:02<00:01, 20.22it/s]
 54%|    | 43/79 [00:02<00:01, 21.45it/s]
 58%|    | 46/79 [00:02<00:01, 21.80it/s]
 62%|   | 49/79 [00:02<00:01, 22.58it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.93it/s]
 20%|        | 16/79 [00:01<00:12,  5.25it/s]
 24%|       | 19/79 [00:01<00:08,  6.89it/s]
 28%|       | 22/79 [00:01<00:06,  8.79it/s]
 32%|      | 25/79 [00:01<00:04, 10.94it/s]
 35%|      | 28/79 [00:02<00:03, 13.14it/s]
 39%|      | 31/79 [00:02<00:03, 15.44it/s]
 43%|     | 34/79 [00:02<00:02, 17.51it/s]
 47%|     | 37/79 [00:02<00:02, 19.17it/s]
 51%|     | 40/79 [00:02<00:01, 20.64it/s]
 54%|    | 43/79 [00:02<00:01, 21.70it/s]
 58%|    | 46/79 [00:02<00:01, 22.34it/s]
 62%|   | 49/79 [00:02<00:01, 22.98it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:52,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.01it/s]
 13%|        | 10/79 [00:01<00:24,  2.77it/s]
 16%|        | 13/79 [00:01<00:17,  3.77it/s]
 20%|        | 16/79 [00:01<00:12,  5.06it/s]
 24%|       | 19/79 [00:01<00:09,  6.66it/s]
 28%|       | 22/79 [00:01<00:06,  8.57it/s]
 32%|      | 25/79 [00:01<00:05, 10.69it/s]
 35%|      | 28/79 [00:02<00:03, 12.98it/s]
 39%|      | 31/79 [00:02<00:03, 15.30it/s]
 43%|     | 34/79 [00:02<00:02, 17.34it/s]
 47%|     | 37/79 [00:02<00:02, 19.34it/s]
 51%|     | 40/79 [00:02<00:01, 20.79it/s]
 54%|    | 43/79 [00:02<00:01, 22.05it/s]
 58%|    | 46/79 [00:02<00:01, 22.92it/s]
 62%|   | 49/79 [00:02<00:01, 23.67it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  6.99it/s]
 28%|       | 22/79 [00:01<00:06,  8.91it/s]
 32%|      | 25/79 [00:01<00:04, 10.95it/s]
 35%|      | 28/79 [00:02<00:03, 13.07it/s]
 39%|      | 31/79 [00:02<00:03, 15.20it/s]
 43%|     | 34/79 [00:02<00:02, 17.28it/s]
 47%|     | 37/79 [00:02<00:02, 18.88it/s]
 51%|     | 40/79 [00:02<00:01, 20.25it/s]
 54%|    | 43/79 [00:02<00:01, 21.34it/s]
 58%|    | 46/79 [00:02<00:01, 22.31it/s]
 62%|   | 49/79 [00:02<00:01, 22.53it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:12,  5.24it/s]
 24%|       | 19/79 [00:01<00:08,  6.88it/s]
 28%|       | 22/79 [00:01<00:06,  8.75it/s]
 32%|      | 25/79 [00:01<00:04, 10.90it/s]
 35%|      | 28/79 [00:02<00:03, 13.06it/s]
 39%|      | 31/79 [00:02<00:03, 15.05it/s]
 43%|     | 34/79 [00:02<00:02, 16.93it/s]
 47%|     | 37/79 [00:02<00:02, 18.67it/s]
 51%|     | 40/79 [00:02<00:01, 19.95it/s]
 54%|    | 43/79 [00:02<00:01, 20.97it/s]
 58%|    | 46/79 [00:02<00:01, 21.86it/s]
 62%|   | 49/79 [00:02<00:01, 22.38it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.03it/s]
  5%|         | 4/79 [00:01<00:52,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.00it/s]
 13%|        | 10/79 [00:01<00:24,  2.77it/s]
 16%|        | 13/79 [00:01<00:17,  3.77it/s]
 20%|        | 16/79 [00:01<00:12,  5.05it/s]
 24%|       | 19/79 [00:01<00:09,  6.65it/s]
 28%|       | 22/79 [00:01<00:06,  8.47it/s]
 32%|      | 25/79 [00:01<00:05, 10.61it/s]
 35%|      | 28/79 [00:02<00:03, 12.83it/s]
 39%|      | 31/79 [00:02<00:03, 14.97it/s]
 43%|     | 34/79 [00:02<00:02, 16.95it/s]
 47%|     | 37/79 [00:02<00:02, 18.82it/s]
 51%|     | 40/79 [00:02<00:01, 20.38it/s]
 54%|    | 43/79 [00:02<00:01, 21.39it/s]
 58%|    | 46/79 [00:02<00:01, 22.28it/s]
 62%|   | 49/79 [00:02<00:01, 23.09it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.83it/s]
 28%|       | 22/79 [00:01<00:06,  8.68it/s]
 32%|      | 25/79 [00:01<00:05, 10.75it/s]
 35%|      | 28/79 [00:02<00:03, 12.92it/s]
 39%|      | 31/79 [00:02<00:03, 15.10it/s]
 43%|     | 34/79 [00:02<00:02, 16.84it/s]
 47%|     | 37/79 [00:02<00:02, 18.39it/s]
 51%|     | 40/79 [00:02<00:01, 19.93it/s]
 54%|    | 43/79 [00:02<00:01, 20.97it/s]
 58%|    | 46/79 [00:02<00:01, 21.68it/s]
 62%|   | 49/79 [00:02<00:01, 22.62it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.43it/s]
  9%|         | 7/79 [00:01<00:36,  1.99it/s]
 13%|        | 10/79 [00:01<00:25,  2.75it/s]
 16%|        | 13/79 [00:01<00:17,  3.73it/s]
 20%|        | 16/79 [00:01<00:12,  4.98it/s]
 24%|       | 19/79 [00:01<00:09,  6.52it/s]
 28%|       | 22/79 [00:01<00:06,  8.37it/s]
 32%|      | 25/79 [00:01<00:05, 10.42it/s]
 35%|      | 28/79 [00:02<00:04, 12.55it/s]
 39%|      | 31/79 [00:02<00:03, 14.62it/s]
 43%|     | 34/79 [00:02<00:02, 16.60it/s]
 47%|     | 37/79 [00:02<00:02, 18.29it/s]
 51%|     | 40/79 [00:02<00:01, 19.79it/s]
 54%|    | 43/79 [00:02<00:01, 20.87it/s]
 58%|    | 46/79 [00:02<00:01, 21.81it/s]
 62%|   | 49/79 [00:02<00:01, 22.78it/s]
 66%|   | 52/79 [00:03<00:01, 24.13it/s]
 70%|   | 55/79 [00:02<00:00, 24.57it/s]
 73%|  | 58/79 [00:03<00:00, 25.03it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 24.75it/s]
 85%| | 67/79 [00:03<00:00, 25.05it/s]
 89%| | 70/79 [00:03<00:00, 24.86it/s]
 92%|| 73/79 [00:03<00:00, 25.20it/s]
 96%|| 76/79 [00:03<00:00, 25.69it/s]
100%|| 79/79 [00:03<00:00, 26.40it/s]
, 24.39it/s]
 70%|   | 55/79 [00:02<00:00, 24.81it/s]
 73%|  | 58/79 [00:03<00:00, 25.06it/s]
 77%|  | 61/79 [00:03<00:00, 24.85it/s]
 81%|  | 64/79 [00:03<00:00, 24.86it/s]
 85%| | 67/79 [00:03<00:00, 25.11it/s]
 89%| | 70/79 [00:03<00:00, 25.14it/s]
 92%|| 73/79 [00:03<00:00, 25.42it/s]
 96%|| 76/79 [00:03<00:00, 26.00it/s]
100%|| 79/79 [00:03<00:00, 26.78it/s]
, 23.69it/s]
 70%|   | 55/79 [00:02<00:00, 24.29it/s]
 73%|  | 58/79 [00:03<00:00, 24.34it/s]
 77%|  | 61/79 [00:03<00:00, 24.66it/s]
 81%|  | 64/79 [00:03<00:00, 24.59it/s]
 85%| | 67/79 [00:03<00:00, 24.73it/s]
 89%| | 70/79 [00:03<00:00, 24.53it/s]
 92%|| 73/79 [00:03<00:00, 24.88it/s]
 96%|| 76/79 [00:03<00:00, 25.52it/s]
100%|| 79/79 [00:03<00:00, 26.36it/s]
, 23.59it/s]
 70%|   | 55/79 [00:03<00:01, 23.91it/s]
 73%|  | 58/79 [00:03<00:00, 24.24it/s]
 77%|  | 61/79 [00:03<00:00, 24.44it/s]
 81%|  | 64/79 [00:03<00:00, 24.67it/s]
 85%| | 67/79 [00:03<00:00, 24.67it/s]
 89%| | 70/79 [00:03<00:00, 24.79it/s]
 92%|| 73/79 [00:03<00:00, 24.82it/s]
 96%|| 76/79 [00:03<00:00, 25.59it/s]
100%|| 79/79 [00:03<00:00, 26.42it/s]
, 23.91it/s]
 70%|   | 55/79 [00:03<00:00, 24.46it/s]
 73%|  | 58/79 [00:03<00:00, 24.74it/s]
 77%|  | 61/79 [00:03<00:00, 24.66it/s]
 81%|  | 64/79 [00:03<00:00, 24.79it/s]
 85%| | 67/79 [00:03<00:00, 25.00it/s]
 89%| | 70/79 [00:03<00:00, 24.86it/s]
 92%|| 73/79 [00:03<00:00, 25.29it/s]
 96%|| 76/79 [00:03<00:00, 25.84it/s]
100%|| 79/79 [00:03<00:00, 26.70it/s]
, 23.83it/s]
 70%|   | 55/79 [00:03<00:00, 24.17it/s]
 73%|  | 58/79 [00:03<00:00, 24.31it/s]
 77%|  | 61/79 [00:03<00:00, 24.31it/s]
 81%|  | 64/79 [00:03<00:00, 24.48it/s]
 85%| | 67/79 [00:03<00:00, 24.57it/s]
 89%| | 70/79 [00:03<00:00, 24.67it/s]
 92%|| 73/79 [00:03<00:00, 24.95it/s]
 96%|| 76/79 [00:03<00:00, 25.58it/s]
100%|| 79/79 [00:03<00:00, 26.45it/s]
88it/s]
 68%|   | 54/79 [00:03<00:01, 24.50it/s]
 72%|  | 57/79 [00:03<00:00, 24.85it/s]
 76%|  | 60/79 [00:03<00:00, 24.78it/s]
 80%|  | 63/79 [00:03<00:00, 24.90it/s]
 84%| | 66/79 [00:03<00:00, 25.21it/s]
 87%| | 69/79 [00:03<00:00, 25.28it/s]
 91%| | 72/79 [00:03<00:00, 25.30it/s]
 95%|| 75/79 [00:03<00:00, 25.91it/s]
 99%|| 78/79 [00:03<00:00, 26.34it/s]
100%|| 79/79 [00:04<00:00, 19.38it/s]
, 23.95it/s]
 70%|   | 55/79 [00:03<00:00, 24.41it/s]
 73%|  | 58/79 [00:03<00:00, 24.58it/s]
 77%|  | 61/79 [00:03<00:00, 24.80it/s]
 81%|  | 64/79 [00:03<00:00, 24.58it/s]
 85%| | 67/79 [00:03<00:00, 24.94it/s]
 89%| | 70/79 [00:03<00:00, 24.55it/s]
 92%|| 73/79 [00:03<00:00, 24.99it/s]
 96%|| 76/79 [00:03<00:00, 25.49it/s]
100%|| 79/79 [00:04<00:00, 26.53it/s]
, 23.71it/s]
 70%|   | 55/79 [00:03<00:00, 24.20it/s]
 73%|  | 58/79 [00:03<00:00, 24.48it/s]
 77%|  | 61/79 [00:03<00:00, 24.61it/s]
 81%|  | 64/79 [00:03<00:00, 24.81it/s]
 85%| | 67/79 [00:03<00:00, 25.04it/s]
 89%| | 70/79 [00:03<00:00, 25.29it/s]
 92%|| 73/79 [00:03<00:00, 25.40it/s]
 96%|| 76/79 [00:03<00:00, 26.19it/s]
100%|| 79/79 [00:03<00:00, 27.00it/s]
, 23.76it/s]
 70%|   | 55/79 [00:03<00:01, 23.87it/s]
 73%|  | 58/79 [00:03<00:00, 24.46it/s]
 77%|  | 61/79 [00:03<00:00, 24.26it/s]
 81%|  | 64/79 [00:03<00:00, 24.43it/s]
 85%| | 67/79 [00:03<00:00, 24.56it/s]
 89%| | 70/79 [00:03<00:00, 24.79it/s]
 92%|| 73/79 [00:03<00:00, 24.96it/s]
 96%|| 76/79 [00:03<00:00, 26.11it/s]
100%|| 79/79 [00:03<00:00, 26.51it/s]
/s]
 67%|   | 53/79 [00:02<00:01, 23.73it/s]
 71%|   | 56/79 [00:03<00:00, 23.75it/s]
 75%|  | 59/79 [00:03<00:00, 23.98it/s]
 78%|  | 62/79 [00:03<00:00, 23.83it/s]
 82%| | 65/79 [00:03<00:00, 24.12it/s]
 86%| | 68/79 [00:03<00:00, 24.16it/s]
 90%| | 71/79 [00:03<00:00, 23.95it/s]
 94%|| 74/79 [00:03<00:00, 24.65it/s]
 97%|| 77/79 [00:03<00:00, 25.29it/s]
100%|| 79/79 [00:04<00:00, 19.34it/s]
, 23.32it/s]
 70%|   | 55/79 [00:03<00:01, 23.58it/s]
 73%|  | 58/79 [00:03<00:00, 23.76it/s]
 77%|  | 61/79 [00:03<00:00, 24.02it/s]
 81%|  | 64/79 [00:03<00:00, 24.02it/s]
 85%| | 67/79 [00:03<00:00, 24.24it/s]
 89%| | 70/79 [00:03<00:00, 24.52it/s]
 92%|| 73/79 [00:03<00:00, 24.85it/s]
 96%|| 76/79 [00:03<00:00, 25.64it/s]
100%|| 79/79 [00:03<00:00, 26.57it/s]
, 23.57it/s]
 70%|   | 55/79 [00:03<00:00, 24.11it/s]
 73%|  | 58/79 [00:03<00:00, 24.44it/s]
 77%|  | 61/79 [00:03<00:00, 24.61it/s]
 81%|  | 64/79 [00:03<00:00, 24.92it/s]
 85%| | 67/79 [00:03<00:00, 25.12it/s]
 89%| | 70/79 [00:03<00:00, 25.09it/s]
 92%|| 73/79 [00:03<00:00, 25.28it/s]
 96%|| 76/79 [00:03<00:00, 26.01it/s]
100%|| 79/79 [00:03<00:00, 26.54it/s]
, 23.45it/s]
 70%|   | 55/79 [00:03<00:01, 23.96it/s]
 73%|  | 58/79 [00:03<00:00, 24.15it/s]
 77%|  | 61/79 [00:03<00:00, 24.24it/s]
 81%|  | 64/79 [00:03<00:00, 24.40it/s]
 85%| | 67/79 [00:03<00:00, 24.64it/s]
 89%| | 70/79 [00:03<00:00, 24.34it/s]
 92%|| 73/79 [00:03<00:00, 24.84it/s]
 96%|| 76/79 [00:03<00:00, 25.45it/s]
100%|| 79/79 [00:04<00:00, 26.26it/s]
, 23.81it/s]
 70%|   | 55/79 [00:03<00:00, 24.25it/s]
 73%|  | 58/79 [00:03<00:00, 24.29it/s]
 77%|  | 61/79 [00:03<00:00, 24.67it/s]
 81%|  | 64/79 [00:03<00:00, 24.85it/s]
 85%| | 67/79 [00:03<00:00, 24.96it/s]
 89%| | 70/79 [00:03<00:00, 24.96it/s]
 92%|| 73/79 [00:03<00:00, 25.42it/s]
 96%|| 76/79 [00:03<00:00, 25.89it/s]
100%|| 79/79 [00:04<00:00, 26.85it/s]
, 23.45it/s]
 70%|   | 55/79 [00:03<00:01, 23.69it/s]
 73%|  | 58/79 [00:03<00:00, 24.32it/s]
 77%|  | 61/79 [00:03<00:00, 24.39it/s]
 81%|  | 64/79 [00:03<00:00, 24.57it/s]
 85%| | 67/79 [00:03<00:00, 24.60it/s]
 89%| | 70/79 [00:03<00:00, 24.73it/s]
 92%|| 73/79 [00:03<00:00, 25.13it/s]
 96%|| 76/79 [00:03<00:00, 25.76it/s]
100%|| 79/79 [00:04<00:00, 26.44it/s]
, 23.57it/s]
 70%|   | 55/79 [00:03<00:01, 23.85it/s]
 73%|  | 58/79 [00:03<00:00, 24.22it/s]
 77%|  | 61/79 [00:03<00:00, 24.42it/s]
 81%|  | 64/79 [00:03<00:00, 24.54it/s]
 85%| | 67/79 [00:03<00:00, 24.53it/s]
 89%| | 70/79 [00:03<00:00, 24.57it/s]
 92%|| 73/79 [00:03<00:00, 24.87it/s]
 96%|| 76/79 [00:03<00:00, 25.42it/s]
100%|| 79/79 [00:04<00:00, 26.27it/s]
, 24.10it/s]
 70%|   | 55/79 [00:03<00:00, 24.54it/s]
 73%|  | 58/79 [00:03<00:00, 24.92it/s]
 77%|  | 61/79 [00:03<00:00, 24.94it/s]
 81%|  | 64/79 [00:03<00:00, 25.13it/s]
 85%| | 67/79 [00:03<00:00, 25.29it/s]
 89%| | 70/79 [00:03<00:00, 25.37it/s]
 92%|| 73/79 [00:03<00:00, 25.72it/s]
 96%|| 76/79 [00:03<00:00, 26.20it/s]
100%|| 79/79 [00:04<00:00, 26.93it/s]
, 24.01it/s]
 70%|   | 55/79 [00:03<00:00, 24.28it/s]
 73%|  | 58/79 [00:03<00:00, 24.34it/s]
 77%|  | 61/79 [00:03<00:00, 24.65it/s]
 81%|  | 64/79 [00:03<00:00, 24.86it/s]
 85%| | 67/79 [00:03<00:00, 25.05it/s]
 89%| | 70/79 [00:03<00:00, 25.21it/s]
 92%|| 73/79 [00:03<00:00, 25.12it/s]
 96%|| 76/79 [00:03<00:00, 26.06it/s]
100%|| 79/79 [00:04<00:00, 26.32it/s]
, 23.37it/s]
 70%|   | 55/79 [00:03<00:01, 23.72it/s]
 73%|  | 58/79 [00:03<00:00, 23.84it/s]
 77%|  | 61/79 [00:03<00:00, 24.06it/s]
 81%|  | 64/79 [00:03<00:00, 24.23it/s]
 85%| | 67/79 [00:03<00:00, 24.11it/s]
 89%| | 70/79 [00:03<00:00, 24.30it/s]
 92%|| 73/79 [00:03<00:00, 24.64it/s]
 96%|| 76/79 [00:03<00:00, 25.44it/s]
100%|| 79/79 [00:04<00:00, 26.36it/s]
.38it/s]
 68%|   | 54/79 [00:03<00:01, 23.62it/s]
 72%|  | 57/79 [00:03<00:00, 23.89it/s]
 76%|  | 60/79 [00:03<00:00, 24.03it/s]
 80%|  | 63/79 [00:03<00:00, 24.15it/s]
 84%| | 66/79 [00:03<00:00, 24.30it/s]
 87%| | 69/79 [00:03<00:00, 24.33it/s]
 91%| | 72/79 [00:03<00:00, 24.59it/s]
 95%|| 75/79 [00:03<00:00, 25.37it/s]
 99%|| 78/79 [00:04<00:00, 25.85it/s]
100%|| 79/79 [00:04<00:00, 19.08it/s]
, 23.10it/s]
 70%|   | 55/79 [00:03<00:01, 23.52it/s]
 73%|  | 58/79 [00:03<00:00, 23.64it/s]
 77%|  | 61/79 [00:03<00:00, 23.83it/s]
 81%|  | 64/79 [00:03<00:00, 23.96it/s]
 85%| | 67/79 [00:03<00:00, 24.40it/s]
 89%| | 70/79 [00:03<00:00, 24.24it/s]
 92%|| 73/79 [00:03<00:00, 24.47it/s]
 96%|| 76/79 [00:03<00:00, 25.21it/s]
100%|| 79/79 [00:04<00:00, 26.10it/s]
, 23.40it/s]
 70%|   | 55/79 [00:03<00:01, 23.95it/s]
 73%|  | 58/79 [00:03<00:00, 24.19it/s]
 77%|  | 61/79 [00:03<00:00, 24.66it/s]
 81%|  | 64/79 [00:03<00:00, 24.60it/s]
 85%| | 67/79 [00:03<00:00, 24.81it/s]
 89%| | 70/79 [00:03<00:00, 24.81it/s]
 92%|| 73/79 [00:03<00:00, 25.10it/s]
 96%|| 76/79 [00:03<00:00, 25.60it/s]
100%|| 79/79 [00:04<00:00, 26.28it/s]
17it/s]
 68%|   | 54/79 [00:03<00:01, 23.77it/s]
 72%|  | 57/79 [00:03<00:00, 23.88it/s]
 76%|  | 60/79 [00:03<00:00, 24.04it/s]
 80%|  | 63/79 [00:03<00:00, 24.20it/s]
 84%| | 66/79 [00:03<00:00, 24.45it/s]
 87%| | 69/79 [00:03<00:00, 24.44it/s]
 91%| | 72/79 [00:03<00:00, 24.63it/s]
 95%|| 75/79 [00:03<00:00, 25.43it/s]
 99%|| 78/79 [00:04<00:00, 26.11it/s]
100%|| 79/79 [00:04<00:00, 19.12it/s]
, 23.12it/s]
 70%|   | 55/79 [00:03<00:01, 23.45it/s]
 73%|  | 58/79 [00:03<00:00, 23.73it/s]
 77%|  | 61/79 [00:03<00:00, 23.81it/s]
 81%|  | 64/79 [00:03<00:00, 23.83it/s]
 85%| | 67/79 [00:03<00:00, 24.02it/s]
 89%| | 70/79 [00:03<00:00, 24.16it/s]
 92%|| 73/79 [00:03<00:00, 24.53it/s]
 96%|| 76/79 [00:03<00:00, 25.28it/s]
100%|| 79/79 [00:04<00:00, 26.21it/s]
, 23.52it/s]
 70%|   | 55/79 [00:03<00:01, 23.65it/s]
 73%|  | 58/79 [00:03<00:00, 24.09it/s]
 77%|  | 61/79 [00:03<00:00, 24.24it/s]
 81%|  | 64/79 [00:03<00:00, 24.34it/s]
 85%| | 67/79 [00:03<00:00, 24.64it/s]
 89%| | 70/79 [00:03<00:00, 24.43it/s]
 92%|| 73/79 [00:03<00:00, 24.70it/s]
 96%|| 76/79 [00:03<00:00, 25.36it/s]
100%|| 79/79 [00:04<00:00, 26.30it/s]
, 23.03it/s]
 70%|   | 55/79 [00:03<00:01, 23.51it/s]
 73%|  | 58/79 [00:03<00:00, 23.61it/s]
 77%|  | 61/79 [00:03<00:00, 23.53it/s]
 81%|  | 64/79 [00:03<00:00, 23.84it/s]
 85%| | 67/79 [00:03<00:00, 23.94it/s]
 89%| | 70/79 [00:03<00:00, 23.93it/s]
 92%|| 73/79 [00:03<00:00, 24.54it/s]
 96%|| 76/79 [00:04<00:00, 25.26it/s]
100%|| 79/79 [00:04<00:00, 26.24it/s]
, 22.94it/s]
 70%|   | 55/79 [00:03<00:01, 23.14it/s]
 73%|  | 58/79 [00:03<00:00, 23.52it/s]
 77%|  | 61/79 [00:03<00:00, 23.80it/s]
 81%|  | 64/79 [00:03<00:00, 24.01it/s]
 85%| | 67/79 [00:03<00:00, 24.23it/s]
 89%| | 70/79 [00:03<00:00, 24.40it/s]
 92%|| 73/79 [00:03<00:00, 24.62it/s]
 96%|| 76/79 [00:03<00:00, 25.34it/s]
100%|| 79/79 [00:04<00:00, 26.20it/s]
, 22.95it/s]
 70%|   | 55/79 [00:03<00:01, 23.11it/s]
 73%|  | 58/79 [00:03<00:00, 23.63it/s]
 77%|  | 61/79 [00:03<00:00, 23.94it/s]
 81%|  | 64/79 [00:03<00:00, 24.08it/s]
 85%| | 67/79 [00:03<00:00, 24.23it/s]
 89%| | 70/79 [00:03<00:00, 24.26it/s]
 92%|| 73/79 [00:03<00:00, 24.79it/s]
 96%|| 76/79 [00:03<00:00, 25.61it/s]
100%|| 79/79 [00:04<00:00, 26.50it/s]
, 22.98it/s]
 70%|   | 55/79 [00:03<00:01, 23.21it/s]
 73%|  | 58/79 [00:03<00:00, 23.57it/s]
 77%|  | 61/79 [00:03<00:00, 23.98it/s]
 81%|  | 64/79 [00:03<00:00, 24.06it/s]
 85%| | 67/79 [00:03<00:00, 24.10it/s]
 89%| | 70/79 [00:03<00:00, 24.10it/s]
 92%|| 73/79 [00:03<00:00, 24.60it/s]
 96%|| 76/79 [00:04<00:00, 25.39it/s]
100%|| 79/79 [00:04<00:00, 26.48it/s]
, 23.74it/s]
 70%|   | 55/79 [00:03<00:01, 23.88it/s]
 73%|  | 58/79 [00:03<00:00, 24.12it/s]
 77%|  | 61/79 [00:03<00:00, 24.38it/s]
 81%|  | 64/79 [00:03<00:00, 24.20it/s]
 85%| | 67/79 [00:03<00:00, 24.02it/s]
 89%| | 70/79 [00:03<00:00, 23.78it/s]
 92%|| 73/79 [00:03<00:00, 24.40it/s]
 96%|| 76/79 [00:04<00:00, 25.04it/s]
100%|| 79/79 [00:04<00:00, 26.17it/s]
, 23.03it/s]
 70%|   | 55/79 [00:03<00:01, 23.31it/s]
 73%|  | 58/79 [00:03<00:00, 23.80it/s]
 77%|  | 61/79 [00:03<00:00, 23.50it/s]
 81%|  | 64/79 [00:03<00:00, 23.59it/s]
 85%| | 67/79 [00:03<00:00, 23.59it/s]
 89%| | 70/79 [00:03<00:00, 23.70it/s]
 92%|| 73/79 [00:03<00:00, 24.24it/s]
 96%|| 76/79 [00:04<00:00, 24.87it/s]
100%|| 79/79 [00:04<00:00, 25.89it/s]
2020-06-23 15:28:33,462 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.277733 (0.027377488708496094 s / img per device, on 32 devices)
2020-06-23 15:28:33,483 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:28:33,483 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:28:33,503 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592951324187, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 4, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592951324188, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 4}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 15:28:45,183 maskrcnn_benchmark.trainer INFO: eta: 1:21:11  iter: 2760  loss: 0.8291 (0.9172)  loss_classifier: 0.2751 (0.3488)  loss_box_reg: 0.1422 (0.1413)  loss_mask: 0.3211 (0.3550)  loss_objectness: 0.0323 (0.0493)  loss_rpn_box_reg: 0.0152 (0.0228)  time: 0.1080 (0.1308)  data: 0.0016 (0.0211)  lr: 0.160000  max mem: 5093
2020-06-23 15:28:47,341 maskrcnn_benchmark.trainer INFO: eta: 1:21:02  iter: 2780  loss: 0.7847 (0.9163)  loss_classifier: 0.3305 (0.3485)  loss_box_reg: 0.1164 (0.1412)  loss_mask: 0.2802 (0.3545)  loss_objectness: 0.0267 (0.0492)  loss_rpn_box_reg: 0.0108 (0.0229)  time: 0.1079 (0.1306)  data: 0.0015 (0.0209)  lr: 0.160000  max mem: 5093
2020-06-23 15:28:49,517 maskrcnn_benchmark.trainer INFO: eta: 1:20:54  iter: 2800  loss: 0.7683 (0.9151)  loss_classifier: 0.2798 (0.3480)  loss_box_reg: 0.1384 (0.1411)  loss_mask: 0.2873 (0.3541)  loss_objectness: 0.0184 (0.0490)  loss_rpn_box_reg: 0.0072 (0.0229)  time: 0.1085 (0.1305)  data: 0.0015 (0.0208)  lr: 0.160000  max mem: 5093
2020-06-23 15:28:51,687 maskrcnn_benchmark.trainer INFO: eta: 1:20:45  iter: 2820  loss: 0.7183 (0.9139)  loss_classifier: 0.2848 (0.3475)  loss_box_reg: 0.1259 (0.1410)  loss_mask: 0.2706 (0.3535)  loss_objectness: 0.0251 (0.0490)  loss_rpn_box_reg: 0.0124 (0.0229)  time: 0.1081 (0.1303)  data: 0.0015 (0.0207)  lr: 0.160000  max mem: 5093
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.88s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 15:28:53,863 maskrcnn_benchmark.trainer INFO: eta: 1:20:37  iter: 2840  loss: 0.8052 (0.9127)  loss_classifier: 0.3037 (0.3471)  loss_box_reg: 0.1146 (0.1409)  loss_mask: 0.2819 (0.3530)  loss_objectness: 0.0244 (0.0489)  loss_rpn_box_reg: 0.0123 (0.0228)  time: 0.1081 (0.1302)  data: 0.0015 (0.0205)  lr: 0.160000  max mem: 5093
DONE (t=1.82s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.24557
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.44176
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.25077
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.13076
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.27546
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.31260
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.23408
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.38652
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.40781
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22259
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.44455
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.52526
2020-06-23 15:28:56,045 maskrcnn_benchmark.trainer INFO: eta: 1:20:29  iter: 2860  loss: 0.6597 (0.9114)  loss_classifier: 0.2441 (0.3465)  loss_box_reg: 0.1056 (0.1407)  loss_mask: 0.2753 (0.3525)  loss_objectness: 0.0211 (0.0488)  loss_rpn_box_reg: 0.0115 (0.0228)  time: 0.1089 (0.1300)  data: 0.0015 (0.0204)  lr: 0.160000  max mem: 5093
2020-06-23 15:28:58,237 maskrcnn_benchmark.trainer INFO: eta: 1:20:21  iter: 2880  loss: 0.6654 (0.9103)  loss_classifier: 0.2837 (0.3461)  loss_box_reg: 0.1121 (0.1407)  loss_mask: 0.2793 (0.3520)  loss_objectness: 0.0256 (0.0487)  loss_rpn_box_reg: 0.0165 (0.0228)  time: 0.1100 (0.1299)  data: 0.0016 (0.0203)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:00,424 maskrcnn_benchmark.trainer INFO: eta: 1:20:13  iter: 2900  loss: 0.7522 (0.9092)  loss_classifier: 0.2774 (0.3457)  loss_box_reg: 0.1175 (0.1406)  loss_mask: 0.2932 (0.3516)  loss_objectness: 0.0234 (0.0486)  loss_rpn_box_reg: 0.0131 (0.0228)  time: 0.1085 (0.1297)  data: 0.0015 (0.0201)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:02,587 maskrcnn_benchmark.trainer INFO: eta: 1:20:05  iter: 2920  loss: 0.6498 (0.9077)  loss_classifier: 0.2445 (0.3450)  loss_box_reg: 0.1122 (0.1404)  loss_mask: 0.2683 (0.3511)  loss_objectness: 0.0168 (0.0484)  loss_rpn_box_reg: 0.0098 (0.0228)  time: 0.1074 (0.1296)  data: 0.0015 (0.0200)  lr: 0.160000  max mem: 5093
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:29:04,747 maskrcnn_benchmark.trainer INFO: eta: 1:19:57  iter: 2940  loss: 0.7670 (0.9069)  loss_classifier: 0.2363 (0.3446)  loss_box_reg: 0.1293 (0.1404)  loss_mask: 0.2905 (0.3507)  loss_objectness: 0.0269 (0.0485)  loss_rpn_box_reg: 0.0110 (0.0228)  time: 0.1082 (0.1295)  data: 0.0016 (0.0199)  lr: 0.160000  max mem: 5093
DONE (t=2.56s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:29:06,921 maskrcnn_benchmark.trainer INFO: eta: 1:19:49  iter: 2960  loss: 0.7243 (0.9056)  loss_classifier: 0.2454 (0.3440)  loss_box_reg: 0.1054 (0.1402)  loss_mask: 0.2665 (0.3502)  loss_objectness: 0.0207 (0.0484)  loss_rpn_box_reg: 0.0088 (0.0227)  time: 0.1084 (0.1293)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5093
DONE (t=3.12s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.24118
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.41829
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.24740
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.09358
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.26325
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.35790
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.23386
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.36969
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.38826
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19127
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.42896
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.52182
2020-06-23 15:29:09,185 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.24556732121294272, segm mAP: 0.24118002807284714
:::MLLOG {"namespace": "", "time_ms": 1592951349185, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.24556732121294272, "SEGM": 0.24118002807284714}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1592951349185, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 3}}
2020-06-23 15:29:09,293 maskrcnn_benchmark.trainer INFO: eta: 1:19:44  iter: 2980  loss: 0.5726 (0.9040)  loss_classifier: 0.2147 (0.3433)  loss_box_reg: 0.0901 (0.1400)  loss_mask: 0.2686 (0.3498)  loss_objectness: 0.0174 (0.0483)  loss_rpn_box_reg: 0.0072 (0.0227)  time: 0.1089 (0.1292)  data: 0.0016 (0.0196)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:11,463 maskrcnn_benchmark.trainer INFO: eta: 1:19:36  iter: 3000  loss: 0.6789 (0.9026)  loss_classifier: 0.2389 (0.3427)  loss_box_reg: 0.1139 (0.1399)  loss_mask: 0.2660 (0.3493)  loss_objectness: 0.0187 (0.0481)  loss_rpn_box_reg: 0.0089 (0.0226)  time: 0.1079 (0.1291)  data: 0.0014 (0.0195)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:13,614 maskrcnn_benchmark.trainer INFO: eta: 1:19:28  iter: 3020  loss: 0.7268 (0.9015)  loss_classifier: 0.2823 (0.3424)  loss_box_reg: 0.1312 (0.1398)  loss_mask: 0.2792 (0.3489)  loss_objectness: 0.0224 (0.0480)  loss_rpn_box_reg: 0.0130 (0.0226)  time: 0.1071 (0.1290)  data: 0.0014 (0.0194)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:15,783 maskrcnn_benchmark.trainer INFO: eta: 1:19:21  iter: 3040  loss: 0.7137 (0.9007)  loss_classifier: 0.2864 (0.3419)  loss_box_reg: 0.1149 (0.1396)  loss_mask: 0.2747 (0.3485)  loss_objectness: 0.0357 (0.0480)  loss_rpn_box_reg: 0.0143 (0.0226)  time: 0.1083 (0.1288)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:17,950 maskrcnn_benchmark.trainer INFO: eta: 1:19:13  iter: 3060  loss: 0.7182 (0.8993)  loss_classifier: 0.2670 (0.3414)  loss_box_reg: 0.1214 (0.1395)  loss_mask: 0.2617 (0.3479)  loss_objectness: 0.0280 (0.0479)  loss_rpn_box_reg: 0.0110 (0.0226)  time: 0.1083 (0.1287)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:20,107 maskrcnn_benchmark.trainer INFO: eta: 1:19:06  iter: 3080  loss: 0.6928 (0.8983)  loss_classifier: 0.2405 (0.3410)  loss_box_reg: 0.1161 (0.1394)  loss_mask: 0.3021 (0.3475)  loss_objectness: 0.0248 (0.0478)  loss_rpn_box_reg: 0.0102 (0.0226)  time: 0.1078 (0.1286)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:22,300 maskrcnn_benchmark.trainer INFO: eta: 1:18:59  iter: 3100  loss: 0.6839 (0.8970)  loss_classifier: 0.2552 (0.3404)  loss_box_reg: 0.1106 (0.1392)  loss_mask: 0.2793 (0.3471)  loss_objectness: 0.0190 (0.0477)  loss_rpn_box_reg: 0.0088 (0.0226)  time: 0.1100 (0.1284)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:24,465 maskrcnn_benchmark.trainer INFO: eta: 1:18:51  iter: 3120  loss: 0.6701 (0.8959)  loss_classifier: 0.2418 (0.3399)  loss_box_reg: 0.1296 (0.1392)  loss_mask: 0.2667 (0.3467)  loss_objectness: 0.0251 (0.0476)  loss_rpn_box_reg: 0.0100 (0.0226)  time: 0.1081 (0.1283)  data: 0.0013 (0.0188)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:26,635 maskrcnn_benchmark.trainer INFO: eta: 1:18:44  iter: 3140  loss: 0.7217 (0.8953)  loss_classifier: 0.2909 (0.3396)  loss_box_reg: 0.1322 (0.1392)  loss_mask: 0.2760 (0.3463)  loss_objectness: 0.0295 (0.0476)  loss_rpn_box_reg: 0.0099 (0.0226)  time: 0.1084 (0.1282)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:28,820 maskrcnn_benchmark.trainer INFO: eta: 1:18:37  iter: 3160  loss: 0.8587 (0.8946)  loss_classifier: 0.2882 (0.3394)  loss_box_reg: 0.1362 (0.1392)  loss_mask: 0.3031 (0.3460)  loss_objectness: 0.0276 (0.0475)  loss_rpn_box_reg: 0.0123 (0.0226)  time: 0.1088 (0.1281)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:30,990 maskrcnn_benchmark.trainer INFO: eta: 1:18:30  iter: 3180  loss: 0.6910 (0.8934)  loss_classifier: 0.2462 (0.3388)  loss_box_reg: 0.1028 (0.1390)  loss_mask: 0.2776 (0.3457)  loss_objectness: 0.0269 (0.0474)  loss_rpn_box_reg: 0.0101 (0.0225)  time: 0.1083 (0.1279)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:33,164 maskrcnn_benchmark.trainer INFO: eta: 1:18:23  iter: 3200  loss: 0.6293 (0.8921)  loss_classifier: 0.2321 (0.3383)  loss_box_reg: 0.1010 (0.1388)  loss_mask: 0.2626 (0.3452)  loss_objectness: 0.0297 (0.0473)  loss_rpn_box_reg: 0.0083 (0.0225)  time: 0.1079 (0.1278)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:35,326 maskrcnn_benchmark.trainer INFO: eta: 1:18:16  iter: 3220  loss: 0.7062 (0.8913)  loss_classifier: 0.2491 (0.3379)  loss_box_reg: 0.1212 (0.1388)  loss_mask: 0.2786 (0.3449)  loss_objectness: 0.0219 (0.0472)  loss_rpn_box_reg: 0.0141 (0.0225)  time: 0.1076 (0.1277)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:37,491 maskrcnn_benchmark.trainer INFO: eta: 1:18:09  iter: 3240  loss: 0.7693 (0.8904)  loss_classifier: 0.2789 (0.3375)  loss_box_reg: 0.1225 (0.1387)  loss_mask: 0.2965 (0.3446)  loss_objectness: 0.0210 (0.0471)  loss_rpn_box_reg: 0.0126 (0.0225)  time: 0.1078 (0.1276)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:39,671 maskrcnn_benchmark.trainer INFO: eta: 1:18:02  iter: 3260  loss: 0.8103 (0.8898)  loss_classifier: 0.2944 (0.3372)  loss_box_reg: 0.1330 (0.1387)  loss_mask: 0.2928 (0.3443)  loss_objectness: 0.0367 (0.0470)  loss_rpn_box_reg: 0.0142 (0.0225)  time: 0.1086 (0.1275)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:41,838 maskrcnn_benchmark.trainer INFO: eta: 1:17:55  iter: 3280  loss: 0.7009 (0.8887)  loss_classifier: 0.2559 (0.3367)  loss_box_reg: 0.1197 (0.1386)  loss_mask: 0.2844 (0.3440)  loss_objectness: 0.0197 (0.0469)  loss_rpn_box_reg: 0.0074 (0.0225)  time: 0.1077 (0.1273)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:43,997 maskrcnn_benchmark.trainer INFO: eta: 1:17:49  iter: 3300  loss: 0.5902 (0.8875)  loss_classifier: 0.2132 (0.3361)  loss_box_reg: 0.0955 (0.1384)  loss_mask: 0.2769 (0.3436)  loss_objectness: 0.0191 (0.0469)  loss_rpn_box_reg: 0.0108 (0.0225)  time: 0.1074 (0.1272)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:46,151 maskrcnn_benchmark.trainer INFO: eta: 1:17:42  iter: 3320  loss: 0.6772 (0.8863)  loss_classifier: 0.2597 (0.3357)  loss_box_reg: 0.1087 (0.1382)  loss_mask: 0.2866 (0.3432)  loss_objectness: 0.0248 (0.0468)  loss_rpn_box_reg: 0.0124 (0.0225)  time: 0.1073 (0.1271)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:48,314 maskrcnn_benchmark.trainer INFO: eta: 1:17:35  iter: 3340  loss: 0.7508 (0.8856)  loss_classifier: 0.2764 (0.3354)  loss_box_reg: 0.1123 (0.1382)  loss_mask: 0.3111 (0.3430)  loss_objectness: 0.0185 (0.0467)  loss_rpn_box_reg: 0.0113 (0.0224)  time: 0.1078 (0.1270)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:50,491 maskrcnn_benchmark.trainer INFO: eta: 1:17:29  iter: 3360  loss: 0.7764 (0.8850)  loss_classifier: 0.2800 (0.3351)  loss_box_reg: 0.1295 (0.1381)  loss_mask: 0.3075 (0.3428)  loss_objectness: 0.0326 (0.0466)  loss_rpn_box_reg: 0.0092 (0.0224)  time: 0.1088 (0.1269)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:52,655 maskrcnn_benchmark.trainer INFO: eta: 1:17:22  iter: 3380  loss: 0.7395 (0.8840)  loss_classifier: 0.2870 (0.3347)  loss_box_reg: 0.1245 (0.1380)  loss_mask: 0.2844 (0.3424)  loss_objectness: 0.0276 (0.0464)  loss_rpn_box_reg: 0.0085 (0.0224)  time: 0.1080 (0.1268)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:54,833 maskrcnn_benchmark.trainer INFO: eta: 1:17:16  iter: 3400  loss: 0.7069 (0.8831)  loss_classifier: 0.2569 (0.3343)  loss_box_reg: 0.1059 (0.1379)  loss_mask: 0.2998 (0.3422)  loss_objectness: 0.0211 (0.0463)  loss_rpn_box_reg: 0.0088 (0.0223)  time: 0.1084 (0.1267)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:56,993 maskrcnn_benchmark.trainer INFO: eta: 1:17:09  iter: 3420  loss: 0.7675 (0.8823)  loss_classifier: 0.2597 (0.3338)  loss_box_reg: 0.1128 (0.1378)  loss_mask: 0.2934 (0.3419)  loss_objectness: 0.0246 (0.0463)  loss_rpn_box_reg: 0.0227 (0.0224)  time: 0.1072 (0.1266)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5093
2020-06-23 15:29:59,142 maskrcnn_benchmark.trainer INFO: eta: 1:17:02  iter: 3440  loss: 0.6832 (0.8814)  loss_classifier: 0.1914 (0.3333)  loss_box_reg: 0.0980 (0.1377)  loss_mask: 0.2875 (0.3417)  loss_objectness: 0.0168 (0.0462)  loss_rpn_box_reg: 0.0069 (0.0224)  time: 0.1070 (0.1264)  data: 0.0013 (0.0172)  lr: 0.160000  max mem: 5093
2020-06-23 15:30:01,323 maskrcnn_benchmark.trainer INFO: eta: 1:16:56  iter: 3460  loss: 0.6329 (0.8802)  loss_classifier: 0.2438 (0.3329)  loss_box_reg: 0.0965 (0.1375)  loss_mask: 0.2683 (0.3413)  loss_objectness: 0.0162 (0.0461)  loss_rpn_box_reg: 0.0099 (0.0224)  time: 0.1085 (0.1263)  data: 0.0014 (0.0171)  lr: 0.160000  max mem: 5093
2020-06-23 15:30:03,489 maskrcnn_benchmark.trainer INFO: eta: 1:16:50  iter: 3480  loss: 0.7258 (0.8796)  loss_classifier: 0.2751 (0.3326)  loss_box_reg: 0.1112 (0.1374)  loss_mask: 0.3018 (0.3411)  loss_objectness: 0.0240 (0.0461)  loss_rpn_box_reg: 0.0112 (0.0224)  time: 0.1076 (0.1262)  data: 0.0014 (0.0170)  lr: 0.160000  max mem: 5093
2020-06-23 15:30:05,636 maskrcnn_benchmark.trainer INFO: eta: 1:16:43  iter: 3500  loss: 0.7412 (0.8789)  loss_classifier: 0.2857 (0.3324)  loss_box_reg: 0.1109 (0.1373)  loss_mask: 0.2817 (0.3409)  loss_objectness: 0.0299 (0.0460)  loss_rpn_box_reg: 0.0083 (0.0224)  time: 0.1079 (0.1261)  data: 0.0014 (0.0169)  lr: 0.160000  max mem: 5093
2020-06-23 15:30:07,807 maskrcnn_benchmark.trainer INFO: eta: 1:16:37  iter: 3520  loss: 0.6768 (0.8782)  loss_classifier: 0.2472 (0.3321)  loss_box_reg: 0.1002 (0.1372)  loss_mask: 0.2994 (0.3406)  loss_objectness: 0.0212 (0.0459)  loss_rpn_box_reg: 0.0075 (0.0223)  time: 0.1084 (0.1260)  data: 0.0014 (0.0168)  lr: 0.160000  max mem: 5093
2020-06-23 15:30:10,000 maskrcnn_benchmark.trainer INFO: eta: 1:16:31  iter: 3540  loss: 0.6811 (0.8770)  loss_classifier: 0.2512 (0.3316)  loss_box_reg: 0.1014 (0.1370)  loss_mask: 0.2647 (0.3402)  loss_objectness: 0.0201 (0.0458)  loss_rpn_box_reg: 0.0127 (0.0223)  time: 0.1088 (0.1259)  data: 0.0014 (0.0167)  lr: 0.160000  max mem: 5093
2020-06-23 15:30:12,180 maskrcnn_benchmark.trainer INFO: eta: 1:16:25  iter: 3560  loss: 0.8028 (0.8765)  loss_classifier: 0.2781 (0.3314)  loss_box_reg: 0.1468 (0.1371)  loss_mask: 0.3028 (0.3400)  loss_objectness: 0.0281 (0.0458)  loss_rpn_box_reg: 0.0087 (0.0223)  time: 0.1087 (0.1258)  data: 0.0014 (0.0167)  lr: 0.160000  max mem: 5093
2020-06-23 15:30:14,356 maskrcnn_benchmark.trainer INFO: eta: 1:16:19  iter: 3580  loss: 0.6697 (0.8755)  loss_classifier: 0.2461 (0.3310)  loss_box_reg: 0.1081 (0.1369)  loss_mask: 0.2807 (0.3397)  loss_objectness: 0.0385 (0.0457)  loss_rpn_box_reg: 0.0112 (0.0222)  time: 0.1083 (0.1258)  data: 0.0013 (0.0166)  lr: 0.160000  max mem: 5093
2020-06-23 15:30:16,509 maskrcnn_benchmark.trainer INFO: eta: 1:16:13  iter: 3600  loss: 0.8335 (0.8751)  loss_classifier: 0.2859 (0.3308)  loss_box_reg: 0.1215 (0.1369)  loss_mask: 0.2967 (0.3394)  loss_objectness: 0.0386 (0.0457)  loss_rpn_box_reg: 0.0160 (0.0223)  time: 0.1071 (0.1257)  data: 0.0014 (0.0165)  lr: 0.160000  max mem: 5093
2020-06-23 15:30:18,690 maskrcnn_benchmark.trainer INFO: eta: 1:16:07  iter: 3620  loss: 0.7729 (0.8748)  loss_classifier: 0.3064 (0.3307)  loss_box_reg: 0.1489 (0.1370)  loss_mask: 0.2964 (0.3392)  loss_objectness: 0.0263 (0.0457)  loss_rpn_box_reg: 0.0153 (0.0223)  time: 0.1092 (0.1256)  data: 0.0014 (0.0164)  lr: 0.160000  max mem: 5093
2020-06-23 15:30:20,858 maskrcnn_benchmark.trainer INFO: eta: 1:16:01  iter: 3640  loss: 0.7105 (0.8742)  loss_classifier: 0.2787 (0.3305)  loss_box_reg: 0.1146 (0.1369)  loss_mask: 0.2932 (0.3390)  loss_objectness: 0.0280 (0.0456)  loss_rpn_box_reg: 0.0156 (0.0223)  time: 0.1082 (0.1255)  data: 0.0014 (0.0163)  lr: 0.160000  max mem: 5093
2020-06-23 15:30:23,027 maskrcnn_benchmark.trainer INFO: eta: 1:15:56  iter: 3660  loss: 0.7870 (0.8741)  loss_classifier: 0.2635 (0.3304)  loss_box_reg: 0.1581 (0.1370)  loss_mask: 0.2848 (0.3388)  loss_objectness: 0.0366 (0.0456)  loss_rpn_box_reg: 0.0172 (0.0224)  time: 0.1082 (0.1254)  data: 0.0014 (0.0162)  lr: 0.160000  max mem: 5093
:::MLLOG {"namespace": "", "time_ms": 1592951423881, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1592951423882, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1592951423882, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 4}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 15:30:24,125 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
Done (t=0.28s)
creating index...
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.29s)
index created!
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
2020-06-23 15:30:24,430 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:57,  1.35it/s]
  4%|         | 3/79 [00:00<00:40,  1.87it/s]
  8%|         | 6/79 [00:00<00:28,  2.58it/s]
 11%|        | 9/79 [00:01<00:19,  3.52it/s]
 15%|        | 12/79 [00:01<00:14,  4.73it/s]
 19%|        | 15/79 [00:01<00:10,  6.25it/s]
 23%|       | 18/79 [00:01<00:07,  8.05it/s]
 27%|       | 21/79 [00:01<00:05, 10.04it/s]
 30%|       | 24/79 [00:01<00:04, 12.18it/s]
 34%|      | 27/79 [00:01<00:03, 14.32it/s]
 38%|      | 30/79 [00:01<00:03, 16.26it/s]
 42%|     | 33/79 [00:02<00:02, 17.84it/s]
 46%|     | 36/79 [00:02<00:02, 19.14it/s]
 49%|     | 39/79 [00:02<00:01, 20.08it/s]
 53%|    | 42/79 [00:02<00:01, 20.89it/s]
 57%|    | 45/79 [00:02<00:01, 21.65it/s]
 61%|    | 48/79 [00:02<00:01, 22.46it/s]
 65%|   | 51/79 [00:02<00:01, 21.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.70it/s]
 24%|       | 19/79 [00:01<00:08,  7.43it/s]
 28%|       | 22/79 [00:01<00:06,  9.42it/s]
 32%|      | 25/79 [00:01<00:04, 11.60it/s]
 35%|      | 28/79 [00:01<00:03, 13.93it/s]
 39%|      | 31/79 [00:02<00:02, 16.07it/s]
 43%|     | 34/79 [00:02<00:02, 18.21it/s]
 47%|     | 37/79 [00:02<00:02, 19.80it/s]
 51%|     | 40/79 [00:02<00:01, 21.09it/s]
 54%|    | 43/79 [00:02<00:01, 22.17it/s]
 58%|    | 46/79 [00:02<00:01, 23.11it/s]
 62%|   | 49/79 [00:02<00:01, 23.61it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  4%|         | 3/79 [00:00<00:45,  1.67it/s]
  8%|         | 6/79 [00:01<00:31,  2.32it/s]
 11%|        | 9/79 [00:01<00:21,  3.19it/s]
 15%|        | 12/79 [00:01<00:15,  4.32it/s]
 19%|        | 15/79 [00:01<00:11,  5.75it/s]
 23%|       | 18/79 [00:01<00:08,  7.47it/s]
 27%|       | 21/79 [00:01<00:06,  9.48it/s]
 30%|       | 24/79 [00:01<00:04, 11.68it/s]
 34%|      | 27/79 [00:01<00:03, 13.89it/s]
 38%|      | 30/79 [00:02<00:03, 16.06it/s]
 42%|     | 33/79 [00:02<00:02, 17.97it/s]
 46%|     | 36/79 [00:02<00:02, 19.63it/s]
 49%|     | 39/79 [00:02<00:01, 21.07it/s]
 53%|    | 42/79 [00:02<00:01, 21.88it/s]
 57%|    | 45/79 [00:02<00:01, 22.89it/s]
 61%|    | 48/79 [00:02<00:01, 23.59it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.78it/s]
 24%|       | 19/79 [00:01<00:07,  7.53it/s]
 28%|       | 22/79 [00:01<00:05,  9.52it/s]
 32%|      | 25/79 [00:01<00:04, 11.68it/s]
 35%|      | 28/79 [00:01<00:03, 13.93it/s]
 39%|      | 31/79 [00:02<00:02, 16.08it/s]
 43%|     | 34/79 [00:02<00:02, 18.14it/s]
 47%|     | 37/79 [00:02<00:02, 19.66it/s]
 51%|     | 40/79 [00:02<00:01, 21.03it/s]
 54%|    | 43/79 [00:02<00:01, 22.28it/s]
 58%|    | 46/79 [00:02<00:01, 23.12it/s]
 62%|   | 49/79 [00:02<00:01, 23.51it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.46it/s]
 28%|       | 22/79 [00:01<00:06,  9.44it/s]
 32%|      | 25/79 [00:01<00:04, 11.65it/s]
 35%|      | 28/79 [00:01<00:03, 13.89it/s]
 39%|      | 31/79 [00:02<00:02, 16.04it/s]
 43%|     | 34/79 [00:02<00:02, 18.00it/s]
 47%|     | 37/79 [00:02<00:02, 19.73it/s]
 51%|     | 40/79 [00:02<00:01, 21.13it/s]
 54%|    | 43/79 [00:02<00:01, 22.15it/s]
 58%|    | 46/79 [00:02<00:01, 23.01it/s]
 62%|   | 49/79 [00:02<00:01, 23.73it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.47it/s]
 28%|       | 22/79 [00:01<00:06,  9.46it/s]
 32%|      | 25/79 [00:01<00:04, 11.67it/s]
 35%|      | 28/79 [00:01<00:03, 13.87it/s]
 39%|      | 31/79 [00:02<00:02, 16.11it/s]
 43%|     | 34/79 [00:02<00:02, 17.99it/s]
 47%|     | 37/79 [00:02<00:02, 19.72it/s]
 51%|     | 40/79 [00:02<00:01, 20.89it/s]
 54%|    | 43/79 [00:02<00:01, 21.83it/s]
 58%|    | 46/79 [00:02<00:01, 22.64it/s]
 62%|   | 49/79 [00:02<00:01, 23.13it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.70it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.38it/s]
 32%|      | 25/79 [00:01<00:04, 11.54it/s]
 35%|      | 28/79 [00:01<00:03, 13.76it/s]
 39%|      | 31/79 [00:02<00:03, 15.97it/s]
 43%|     | 34/79 [00:02<00:02, 17.82it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.82it/s]
 54%|    | 43/79 [00:02<00:01, 21.93it/s]
 58%|    | 46/79 [00:02<00:01, 22.82it/s]
 62%|   | 49/79 [00:02<00:01, 23.64it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.52it/s]
 35%|      | 28/79 [00:01<00:03, 13.75it/s]
 39%|      | 31/79 [00:02<00:03, 15.91it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 20.97it/s]
 54%|    | 43/79 [00:02<00:01, 21.87it/s]
 58%|    | 46/79 [00:02<00:01, 22.55it/s]
 62%|   | 49/79 [00:02<00:01, 23.20it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  4%|         | 3/79 [00:00<00:48,  1.57it/s]
  8%|         | 6/79 [00:01<00:33,  2.19it/s]
 11%|        | 9/79 [00:01<00:23,  3.01it/s]
 15%|        | 12/79 [00:01<00:16,  4.09it/s]
 19%|        | 15/79 [00:01<00:11,  5.47it/s]
 23%|       | 18/79 [00:01<00:08,  7.16it/s]
 27%|       | 21/79 [00:01<00:06,  9.11it/s]
 30%|       | 24/79 [00:01<00:04, 11.26it/s]
 34%|      | 27/79 [00:01<00:03, 13.49it/s]
 38%|      | 30/79 [00:02<00:03, 15.51it/s]
 42%|     | 33/79 [00:02<00:02, 17.45it/s]
 46%|     | 36/79 [00:02<00:02, 19.10it/s]
 49%|     | 39/79 [00:02<00:01, 20.58it/s]
 53%|    | 42/79 [00:02<00:01, 21.50it/s]
 57%|    | 45/79 [00:02<00:01, 22.34it/s]
 61%|    | 48/79 [00:02<00:01, 22.98it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  4%|         | 3/79 [00:00<00:48,  1.58it/s]
  8%|         | 6/79 [00:01<00:33,  2.19it/s]
 11%|        | 9/79 [00:01<00:23,  3.02it/s]
 15%|        | 12/79 [00:01<00:16,  4.10it/s]
 19%|        | 15/79 [00:01<00:11,  5.48it/s]
 23%|       | 18/79 [00:01<00:08,  7.16it/s]
 27%|       | 21/79 [00:01<00:06,  9.15it/s]
 30%|       | 24/79 [00:01<00:04, 11.25it/s]
 34%|      | 27/79 [00:01<00:03, 13.50it/s]
 38%|      | 30/79 [00:02<00:03, 15.62it/s]
 42%|     | 33/79 [00:02<00:02, 17.69it/s]
 46%|     | 36/79 [00:02<00:02, 19.01it/s]
 49%|     | 39/79 [00:02<00:01, 20.43it/s]
 53%|    | 42/79 [00:02<00:01, 21.52it/s]
 57%|    | 45/79 [00:02<00:01, 22.59it/s]
 61%|    | 48/79 [00:02<00:01, 23.17it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.76it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:06,  9.47it/s]
 32%|      | 25/79 [00:01<00:04, 11.64it/s]
 35%|      | 28/79 [00:01<00:03, 13.91it/s]
 39%|      | 31/79 [00:02<00:02, 16.05it/s]
 43%|     | 34/79 [00:02<00:02, 17.92it/s]
 47%|     | 37/79 [00:02<00:02, 19.49it/s]
 51%|     | 40/79 [00:02<00:01, 20.81it/s]
 54%|    | 43/79 [00:02<00:01, 22.07it/s]
 58%|    | 46/79 [00:02<00:01, 22.73it/s]
 62%|   | 49/79 [00:02<00:01, 23.27it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:01<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.27it/s]
 32%|      | 25/79 [00:01<00:04, 11.44it/s]
 35%|      | 28/79 [00:01<00:03, 13.66it/s]
 39%|      | 31/79 [00:02<00:03, 15.86it/s]
 43%|     | 34/79 [00:02<00:02, 17.86it/s]
 47%|     | 37/79 [00:02<00:02, 19.58it/s]
 51%|     | 40/79 [00:02<00:01, 20.78it/s]
 54%|    | 43/79 [00:02<00:01, 21.85it/s]
 58%|    | 46/79 [00:02<00:01, 22.59it/s]
 62%|   | 49/79 [00:02<00:01, 23.23it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  4%|         | 3/79 [00:01<00:48,  1.56it/s]
  8%|         | 6/79 [00:01<00:33,  2.17it/s]
 11%|        | 9/79 [00:01<00:23,  2.99it/s]
 15%|        | 12/79 [00:01<00:16,  4.06it/s]
 19%|        | 15/79 [00:01<00:11,  5.43it/s]
 23%|       | 18/79 [00:01<00:08,  7.11it/s]
 27%|       | 21/79 [00:01<00:06,  9.06it/s]
 30%|       | 24/79 [00:01<00:04, 11.25it/s]
 34%|      | 27/79 [00:01<00:03, 13.43it/s]
 38%|      | 30/79 [00:02<00:03, 15.67it/s]
 42%|     | 33/79 [00:02<00:02, 17.52it/s]
 46%|     | 36/79 [00:02<00:02, 19.20it/s]
 49%|     | 39/79 [00:02<00:01, 20.70it/s]
 53%|    | 42/79 [00:02<00:01, 21.91it/s]
 57%|    | 45/79 [00:02<00:01, 22.67it/s]
 61%|    | 48/79 [00:02<00:01, 23.52it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  3.99it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  7.01it/s]
 28%|       | 22/79 [00:01<00:06,  8.96it/s]
 32%|      | 25/79 [00:01<00:04, 11.14it/s]
 35%|      | 28/79 [00:01<00:03, 13.43it/s]
 39%|      | 31/79 [00:02<00:03, 15.74it/s]
 43%|     | 34/79 [00:02<00:02, 17.69it/s]
 47%|     | 37/79 [00:02<00:02, 19.63it/s]
 51%|     | 40/79 [00:02<00:01, 21.07it/s]
 54%|    | 43/79 [00:02<00:01, 22.25it/s]
 58%|    | 46/79 [00:02<00:01, 23.05it/s]
 62%|   | 49/79 [00:02<00:01, 23.76it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.23it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.37it/s]
 35%|      | 28/79 [00:01<00:03, 13.57it/s]
 39%|      | 31/79 [00:02<00:03, 15.61it/s]
 43%|     | 34/79 [00:02<00:02, 17.49it/s]
 47%|     | 37/79 [00:02<00:02, 19.16it/s]
 51%|     | 40/79 [00:02<00:01, 20.41it/s]
 54%|    | 43/79 [00:02<00:01, 21.50it/s]
 58%|    | 46/79 [00:02<00:01, 22.21it/s]
 62%|   | 49/79 [00:02<00:01, 22.80it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.24it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.38it/s]
 35%|      | 28/79 [00:01<00:03, 13.67it/s]
 39%|      | 31/79 [00:02<00:03, 15.85it/s]
 43%|     | 34/79 [00:02<00:02, 17.73it/s]
 47%|     | 37/79 [00:02<00:02, 19.47it/s]
 51%|     | 40/79 [00:02<00:01, 20.81it/s]
 54%|    | 43/79 [00:02<00:01, 21.77it/s]
 58%|    | 46/79 [00:02<00:01, 22.55it/s]
 62%|   | 49/79 [00:02<00:01, 23.36it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.23it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.28it/s]
 35%|      | 28/79 [00:01<00:03, 13.54it/s]
 39%|      | 31/79 [00:02<00:03, 15.69it/s]
 43%|     | 34/79 [00:02<00:02, 17.60it/s]
 47%|     | 37/79 [00:02<00:02, 19.38it/s]
 51%|     | 40/79 [00:02<00:01, 20.65it/s]
 54%|    | 43/79 [00:02<00:01, 21.61it/s]
 58%|    | 46/79 [00:02<00:01, 22.39it/s]
 62%|   | 49/79 [00:02<00:01, 22.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.34it/s]
 28%|       | 22/79 [00:01<00:06,  9.24it/s]
 32%|      | 25/79 [00:01<00:04, 11.36it/s]
 35%|      | 28/79 [00:01<00:03, 13.50it/s]
 39%|      | 31/79 [00:02<00:03, 15.62it/s]
 43%|     | 34/79 [00:02<00:02, 17.62it/s]
 47%|     | 37/79 [00:02<00:02, 19.13it/s]
 51%|     | 40/79 [00:02<00:01, 20.48it/s]
 54%|    | 43/79 [00:02<00:01, 21.53it/s]
 58%|    | 46/79 [00:02<00:01, 22.42it/s]
 62%|   | 49/79 [00:02<00:01, 22.70it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.09it/s]
 20%|        | 16/79 [00:01<00:11,  5.48it/s]
 24%|       | 19/79 [00:01<00:08,  7.13it/s]
 28%|       | 22/79 [00:01<00:06,  9.07it/s]
 32%|      | 25/79 [00:01<00:04, 11.19it/s]
 35%|      | 28/79 [00:01<00:03, 13.39it/s]
 39%|      | 31/79 [00:02<00:03, 15.62it/s]
 43%|     | 34/79 [00:02<00:02, 17.51it/s]
 47%|     | 37/79 [00:02<00:02, 19.17it/s]
 51%|     | 40/79 [00:02<00:01, 20.61it/s]
 54%|    | 43/79 [00:02<00:01, 21.76it/s]
 58%|    | 46/79 [00:02<00:01, 22.29it/s]
 62%|   | 49/79 [00:02<00:01, 23.14it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.16it/s]
  4%|         | 3/79 [00:00<00:46,  1.62it/s]
  8%|         | 6/79 [00:01<00:32,  2.26it/s]
 11%|        | 9/79 [00:01<00:22,  3.09it/s]
 15%|        | 12/79 [00:01<00:16,  4.19it/s]
 19%|        | 15/79 [00:01<00:11,  5.55it/s]
 23%|       | 18/79 [00:01<00:08,  7.22it/s]
 27%|       | 21/79 [00:01<00:06,  9.15it/s]
 30%|       | 24/79 [00:01<00:04, 11.19it/s]
 34%|      | 27/79 [00:01<00:03, 13.33it/s]
 38%|      | 30/79 [00:02<00:03, 15.38it/s]
 42%|     | 33/79 [00:02<00:02, 17.21it/s]
 46%|     | 36/79 [00:02<00:02, 18.74it/s]
 49%|     | 39/79 [00:02<00:02, 19.95it/s]
 53%|    | 42/79 [00:02<00:01, 21.11it/s]
 57%|    | 45/79 [00:02<00:01, 21.79it/s]
 61%|    | 48/79 [00:02<00:01, 22.41it/s]
 65%|   | 51/79 [00:02<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.40it/s]
 35%|      | 28/79 [00:01<00:03, 13.52it/s]
 39%|      | 31/79 [00:02<00:03, 15.66it/s]
 43%|     | 34/79 [00:02<00:02, 17.56it/s]
 47%|     | 37/79 [00:02<00:02, 19.21it/s]
 51%|     | 40/79 [00:02<00:01, 20.38it/s]
 54%|    | 43/79 [00:02<00:01, 21.41it/s]
 58%|    | 46/79 [00:02<00:01, 21.94it/s]
 62%|   | 49/79 [00:02<00:01, 22.57it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.43it/s]
 35%|      | 28/79 [00:01<00:03, 13.70it/s]
 39%|      | 31/79 [00:02<00:03, 15.85it/s]
 43%|     | 34/79 [00:02<00:02, 17.83it/s]
 47%|     | 37/79 [00:02<00:02, 19.57it/s]
 51%|     | 40/79 [00:02<00:01, 20.80it/s]
 54%|    | 43/79 [00:02<00:01, 21.73it/s]
 58%|    | 46/79 [00:02<00:01, 22.28it/s]
 62%|   | 49/79 [00:02<00:01, 22.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.93it/s]
 20%|        | 16/79 [00:01<00:11,  5.25it/s]
 24%|       | 19/79 [00:01<00:08,  6.91it/s]
 28%|       | 22/79 [00:01<00:06,  8.83it/s]
 32%|      | 25/79 [00:01<00:04, 10.95it/s]
 35%|      | 28/79 [00:02<00:03, 13.17it/s]
 39%|      | 31/79 [00:02<00:03, 15.38it/s]
 43%|     | 34/79 [00:02<00:02, 17.26it/s]
 47%|     | 37/79 [00:02<00:02, 19.01it/s]
 51%|     | 40/79 [00:02<00:01, 20.42it/s]
 54%|    | 43/79 [00:02<00:01, 21.69it/s]
 58%|    | 46/79 [00:02<00:01, 22.57it/s]
 62%|   | 49/79 [00:02<00:01, 23.12it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.37it/s]
 35%|      | 28/79 [00:01<00:03, 13.28it/s]
 39%|      | 31/79 [00:02<00:03, 15.28it/s]
 43%|     | 34/79 [00:02<00:02, 17.13it/s]
 47%|     | 37/79 [00:02<00:02, 18.92it/s]
 51%|     | 40/79 [00:02<00:01, 20.27it/s]
 54%|    | 43/79 [00:02<00:01, 21.49it/s]
 58%|    | 46/79 [00:02<00:01, 22.24it/s]
 62%|   | 49/79 [00:02<00:01, 22.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:11,  5.71it/s]
 24%|       | 19/79 [00:01<00:08,  7.43it/s]
 28%|       | 22/79 [00:01<00:06,  9.42it/s]
 32%|      | 25/79 [00:01<00:04, 11.56it/s]
 35%|      | 28/79 [00:01<00:03, 13.75it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.72it/s]
 47%|     | 37/79 [00:02<00:02, 19.33it/s]
 51%|     | 40/79 [00:02<00:02, 18.60it/s]
 54%|    | 43/79 [00:02<00:01, 18.82it/s]
 58%|    | 46/79 [00:02<00:01, 20.27it/s]
 62%|   | 49/79 [00:02<00:01, 21.51it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.20it/s]
 24%|       | 19/79 [00:01<00:08,  6.82it/s]
 28%|       | 22/79 [00:01<00:06,  8.73it/s]
 32%|      | 25/79 [00:01<00:05, 10.79it/s]
 35%|      | 28/79 [00:02<00:03, 13.02it/s]
 39%|      | 31/79 [00:02<00:03, 15.21it/s]
 43%|     | 34/79 [00:02<00:02, 17.23it/s]
 47%|     | 37/79 [00:02<00:02, 19.02it/s]
 51%|     | 40/79 [00:02<00:01, 20.39it/s]
 54%|    | 43/79 [00:02<00:01, 21.55it/s]
 58%|    | 46/79 [00:02<00:01, 22.60it/s]
 62%|   | 49/79 [00:02<00:01, 23.55it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.97it/s]
 20%|        | 16/79 [00:01<00:11,  5.32it/s]
 24%|       | 19/79 [00:01<00:08,  6.92it/s]
 28%|       | 22/79 [00:01<00:06,  8.81it/s]
 32%|      | 25/79 [00:01<00:04, 10.89it/s]
 35%|      | 28/79 [00:02<00:03, 13.16it/s]
 39%|      | 31/79 [00:02<00:03, 15.30it/s]
 43%|     | 34/79 [00:02<00:02, 17.16it/s]
 47%|     | 37/79 [00:02<00:02, 18.77it/s]
 51%|     | 40/79 [00:02<00:01, 20.31it/s]
 54%|    | 43/79 [00:02<00:01, 21.50it/s]
 58%|    | 46/79 [00:02<00:01, 22.22it/s]
 62%|   | 49/79 [00:02<00:01, 22.78it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.92it/s]
 32%|      | 25/79 [00:01<00:04, 11.02it/s]
 35%|      | 28/79 [00:02<00:03, 13.21it/s]
 39%|      | 31/79 [00:02<00:03, 15.45it/s]
 43%|     | 34/79 [00:02<00:02, 17.39it/s]
 47%|     | 37/79 [00:02<00:02, 19.11it/s]
 51%|     | 40/79 [00:02<00:01, 20.41it/s]
 54%|    | 43/79 [00:02<00:01, 21.57it/s]
 58%|    | 46/79 [00:02<00:01, 21.87it/s]
 62%|   | 49/79 [00:02<00:01, 22.34it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.08it/s]
 28%|       | 22/79 [00:01<00:06,  8.95it/s]
 32%|      | 25/79 [00:01<00:04, 11.03it/s]
 35%|      | 28/79 [00:02<00:03, 13.14it/s]
 39%|      | 31/79 [00:02<00:03, 15.14it/s]
 43%|     | 34/79 [00:02<00:02, 17.09it/s]
 47%|     | 37/79 [00:02<00:02, 18.77it/s]
 51%|     | 40/79 [00:02<00:01, 20.18it/s]
 54%|    | 43/79 [00:02<00:01, 21.24it/s]
 58%|    | 46/79 [00:02<00:01, 22.23it/s]
 62%|   | 49/79 [00:02<00:01, 22.84it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:51,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.82it/s]
 16%|        | 13/79 [00:01<00:17,  3.84it/s]
 20%|        | 16/79 [00:01<00:12,  5.15it/s]
 24%|       | 19/79 [00:01<00:08,  6.77it/s]
 28%|       | 22/79 [00:01<00:06,  8.66it/s]
 32%|      | 25/79 [00:01<00:05, 10.73it/s]
 35%|      | 28/79 [00:02<00:03, 12.92it/s]
 39%|      | 31/79 [00:02<00:03, 15.05it/s]
 43%|     | 34/79 [00:02<00:02, 16.96it/s]
 47%|     | 37/79 [00:02<00:02, 18.67it/s]
 51%|     | 40/79 [00:02<00:01, 20.09it/s]
 54%|    | 43/79 [00:02<00:01, 21.04it/s]
 58%|    | 46/79 [00:02<00:01, 22.04it/s]
 62%|   | 49/79 [00:02<00:01, 22.86it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.80it/s]
 16%|        | 13/79 [00:01<00:17,  3.82it/s]
 20%|        | 16/79 [00:01<00:12,  5.10it/s]
 24%|       | 19/79 [00:01<00:08,  6.69it/s]
 28%|       | 22/79 [00:01<00:06,  8.53it/s]
 32%|      | 25/79 [00:01<00:05, 10.66it/s]
 35%|      | 28/79 [00:02<00:04, 12.74it/s]
 39%|      | 31/79 [00:02<00:03, 14.85it/s]
 43%|     | 34/79 [00:02<00:02, 16.92it/s]
 47%|     | 37/79 [00:02<00:02, 18.62it/s]
 51%|     | 40/79 [00:02<00:01, 20.13it/s]
 54%|    | 43/79 [00:02<00:01, 21.00it/s]
 58%|    | 46/79 [00:02<00:01, 22.00it/s]
 62%|   | 49/79 [00:02<00:01, 22.82it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.16it/s]
 24%|       | 19/79 [00:01<00:08,  6.75it/s]
 28%|       | 22/79 [00:01<00:06,  8.61it/s]
 32%|      | 25/79 [00:01<00:05, 10.66it/s]
 35%|      | 28/79 [00:02<00:03, 12.80it/s]
 39%|      | 31/79 [00:02<00:03, 14.76it/s]
 43%|     | 34/79 [00:02<00:02, 16.63it/s]
 47%|     | 37/79 [00:02<00:02, 18.28it/s]
 51%|     | 40/79 [00:02<00:01, 19.77it/s]
 54%|    | 43/79 [00:02<00:01, 20.78it/s]
 58%|    | 46/79 [00:02<00:01, 21.58it/s]
 62%|   | 49/79 [00:02<00:01, 22.22it/s]
 66%|   | 52/79 [00:03<00:01, 24.20it/s]
 70%|   | 55/79 [00:02<00:00, 24.42it/s]
 73%|  | 58/79 [00:03<00:00, 24.57it/s]
 77%|  | 61/79 [00:03<00:00, 24.70it/s]
 81%|  | 64/79 [00:03<00:00, 24.87it/s]
 85%| | 67/79 [00:03<00:00, 25.01it/s]
 89%| | 70/79 [00:03<00:00, 24.99it/s]
 92%|| 73/79 [00:03<00:00, 25.19it/s]
 96%|| 76/79 [00:03<00:00, 26.12it/s]
100%|| 79/79 [00:03<00:00, 26.30it/s]
, 24.08it/s]
 70%|   | 55/79 [00:02<00:00, 24.65it/s]
 73%|  | 58/79 [00:03<00:00, 24.87it/s]
 77%|  | 61/79 [00:03<00:00, 25.06it/s]
 81%|  | 64/79 [00:03<00:00, 25.17it/s]
 85%| | 67/79 [00:03<00:00, 25.45it/s]
 89%| | 70/79 [00:03<00:00, 25.13it/s]
 92%|| 73/79 [00:03<00:00, 25.45it/s]
 96%|| 76/79 [00:03<00:00, 25.89it/s]
100%|| 79/79 [00:03<00:00, 26.65it/s]
, 23.90it/s]
 70%|   | 55/79 [00:02<00:00, 24.32it/s]
 73%|  | 58/79 [00:03<00:00, 24.60it/s]
 77%|  | 61/79 [00:03<00:00, 24.62it/s]
 81%|  | 64/79 [00:03<00:00, 24.12it/s]
 85%| | 67/79 [00:03<00:00, 24.46it/s]
 89%| | 70/79 [00:03<00:00, 24.59it/s]
 92%|| 73/79 [00:03<00:00, 24.96it/s]
 96%|| 76/79 [00:03<00:00, 25.61it/s]
100%|| 79/79 [00:03<00:00, 26.47it/s]
, 23.91it/s]
 70%|   | 55/79 [00:03<00:00, 24.44it/s]
 73%|  | 58/79 [00:03<00:00, 24.61it/s]
 77%|  | 61/79 [00:03<00:00, 24.68it/s]
 81%|  | 64/79 [00:03<00:00, 24.78it/s]
 85%| | 67/79 [00:03<00:00, 24.96it/s]
 89%| | 70/79 [00:03<00:00, 25.03it/s]
 92%|| 73/79 [00:03<00:00, 25.15it/s]
 96%|| 76/79 [00:03<00:00, 25.63it/s]
100%|| 79/79 [00:03<00:00, 26.41it/s]
86it/s]
 68%|   | 54/79 [00:03<00:01, 22.75it/s]
 72%|  | 57/79 [00:03<00:00, 23.07it/s]
 76%|  | 60/79 [00:03<00:00, 23.44it/s]
 80%|  | 63/79 [00:03<00:00, 23.74it/s]
 84%| | 66/79 [00:03<00:00, 24.17it/s]
 87%| | 69/79 [00:03<00:00, 24.31it/s]
 91%| | 72/79 [00:03<00:00, 24.40it/s]
 95%|| 75/79 [00:03<00:00, 25.24it/s]
 99%|| 78/79 [00:03<00:00, 25.93it/s]
100%|| 79/79 [00:04<00:00, 19.54it/s]
, 23.79it/s]
 70%|   | 55/79 [00:03<00:00, 24.24it/s]
 73%|  | 58/79 [00:03<00:00, 24.36it/s]
 77%|  | 61/79 [00:03<00:00, 24.51it/s]
 81%|  | 64/79 [00:03<00:00, 24.93it/s]
 85%| | 67/79 [00:03<00:00, 24.86it/s]
 89%| | 70/79 [00:03<00:00, 24.74it/s]
 92%|| 73/79 [00:03<00:00, 24.91it/s]
 96%|| 76/79 [00:03<00:00, 25.62it/s]
100%|| 79/79 [00:03<00:00, 26.43it/s]
, 23.60it/s]
 70%|   | 55/79 [00:03<00:01, 23.84it/s]
 73%|  | 58/79 [00:03<00:00, 24.00it/s]
 77%|  | 61/79 [00:03<00:00, 23.98it/s]
 81%|  | 64/79 [00:03<00:00, 23.99it/s]
 85%| | 67/79 [00:03<00:00, 24.12it/s]
 89%| | 70/79 [00:03<00:00, 24.19it/s]
 92%|| 73/79 [00:03<00:00, 24.59it/s]
 96%|| 76/79 [00:03<00:00, 25.30it/s]
100%|| 79/79 [00:03<00:00, 26.21it/s]
04it/s]
 68%|   | 54/79 [00:02<00:01, 24.16it/s]
 72%|  | 57/79 [00:03<00:00, 24.36it/s]
 76%|  | 60/79 [00:03<00:00, 24.52it/s]
 80%|  | 63/79 [00:03<00:00, 24.86it/s]
 84%| | 66/79 [00:03<00:00, 24.52it/s]
 87%| | 69/79 [00:03<00:00, 24.36it/s]
 91%| | 72/79 [00:03<00:00, 24.65it/s]
 95%|| 75/79 [00:03<00:00, 25.21it/s]
 99%|| 78/79 [00:03<00:00, 25.83it/s]
100%|| 79/79 [00:04<00:00, 19.64it/s]
, 23.71it/s]
 70%|   | 55/79 [00:03<00:00, 24.27it/s]
 73%|  | 58/79 [00:03<00:00, 24.90it/s]
 77%|  | 61/79 [00:03<00:00, 24.83it/s]
 81%|  | 64/79 [00:03<00:00, 25.02it/s]
 85%| | 67/79 [00:03<00:00, 25.19it/s]
 89%| | 70/79 [00:03<00:00, 25.38it/s]
 92%|| 73/79 [00:03<00:00, 25.37it/s]
 96%|| 76/79 [00:03<00:00, 26.36it/s]
100%|| 79/79 [00:03<00:00, 26.63it/s]
, 23.66it/s]
 70%|   | 55/79 [00:03<00:00, 24.01it/s]
 73%|  | 58/79 [00:03<00:00, 24.18it/s]
 77%|  | 61/79 [00:03<00:00, 24.11it/s]
 81%|  | 64/79 [00:03<00:00, 24.30it/s]
 85%| | 67/79 [00:03<00:00, 24.43it/s]
 89%| | 70/79 [00:03<00:00, 24.61it/s]
 92%|| 73/79 [00:03<00:00, 24.95it/s]
 96%|| 76/79 [00:03<00:00, 25.60it/s]
100%|| 79/79 [00:03<00:00, 26.47it/s]
, 24.06it/s]
 70%|   | 55/79 [00:03<00:00, 24.53it/s]
 73%|  | 58/79 [00:03<00:00, 24.80it/s]
 77%|  | 61/79 [00:03<00:00, 24.89it/s]
 81%|  | 64/79 [00:03<00:00, 24.98it/s]
 85%| | 67/79 [00:03<00:00, 25.17it/s]
 89%| | 70/79 [00:03<00:00, 24.95it/s]
 92%|| 73/79 [00:03<00:00, 25.36it/s]
 96%|| 76/79 [00:03<00:00, 25.90it/s]
100%|| 79/79 [00:03<00:00, 26.69it/s]
, 23.66it/s]
 70%|   | 55/79 [00:03<00:01, 23.98it/s]
 73%|  | 58/79 [00:03<00:00, 24.27it/s]
 77%|  | 61/79 [00:03<00:00, 24.39it/s]
 81%|  | 64/79 [00:03<00:00, 24.29it/s]
 85%| | 67/79 [00:03<00:00, 24.39it/s]
 89%| | 70/79 [00:03<00:00, 24.38it/s]
 92%|| 73/79 [00:03<00:00, 24.23it/s]
 96%|| 76/79 [00:03<00:00, 25.09it/s]
100%|| 79/79 [00:03<00:00, 25.91it/s]
, 23.31it/s]
 70%|   | 55/79 [00:03<00:01, 23.50it/s]
 73%|  | 58/79 [00:03<00:00, 23.61it/s]
 77%|  | 61/79 [00:03<00:00, 24.16it/s]
 81%|  | 64/79 [00:03<00:00, 24.15it/s]
 85%| | 67/79 [00:03<00:00, 24.22it/s]
 89%| | 70/79 [00:03<00:00, 24.26it/s]
 92%|| 73/79 [00:03<00:00, 24.74it/s]
 96%|| 76/79 [00:03<00:00, 25.45it/s]
100%|| 79/79 [00:04<00:00, 26.52it/s]
, 23.17it/s]
 70%|   | 55/79 [00:03<00:01, 23.52it/s]
 73%|  | 58/79 [00:03<00:00, 23.89it/s]
 77%|  | 61/79 [00:03<00:00, 24.02it/s]
 81%|  | 64/79 [00:03<00:00, 24.05it/s]
 85%| | 67/79 [00:03<00:00, 24.51it/s]
 89%| | 70/79 [00:03<00:00, 24.35it/s]
 92%|| 73/79 [00:03<00:00, 24.74it/s]
 96%|| 76/79 [00:03<00:00, 25.41it/s]
100%|| 79/79 [00:04<00:00, 26.24it/s]
, 23.33it/s]
 70%|   | 55/79 [00:03<00:01, 23.50it/s]
 73%|  | 58/79 [00:03<00:00, 23.77it/s]
 77%|  | 61/79 [00:03<00:00, 23.75it/s]
 81%|  | 64/79 [00:03<00:00, 24.26it/s]
 85%| | 67/79 [00:03<00:00, 24.27it/s]
 89%| | 70/79 [00:03<00:00, 24.39it/s]
 92%|| 73/79 [00:03<00:00, 24.82it/s]
 96%|| 76/79 [00:03<00:00, 25.50it/s]
100%|| 79/79 [00:04<00:00, 26.40it/s]
79it/s]
 68%|   | 54/79 [00:03<00:01, 24.15it/s]
 72%|  | 57/79 [00:03<00:00, 24.43it/s]
 76%|  | 60/79 [00:03<00:00, 24.72it/s]
 80%|  | 63/79 [00:03<00:00, 24.85it/s]
 84%| | 66/79 [00:03<00:00, 24.88it/s]
 87%| | 69/79 [00:03<00:00, 25.00it/s]
 91%| | 72/79 [00:03<00:00, 24.90it/s]
 95%|| 75/79 [00:03<00:00, 25.52it/s]
 99%|| 78/79 [00:03<00:00, 25.94it/s]
100%|| 79/79 [00:04<00:00, 19.40it/s]
16it/s]
 68%|   | 54/79 [00:03<00:01, 23.52it/s]
 72%|  | 57/79 [00:03<00:00, 23.83it/s]
 76%|  | 60/79 [00:03<00:00, 24.26it/s]
 80%|  | 63/79 [00:03<00:00, 24.18it/s]
 84%| | 66/79 [00:03<00:00, 24.34it/s]
 87%| | 69/79 [00:03<00:00, 24.62it/s]
 91%| | 72/79 [00:03<00:00, 24.77it/s]
 95%|| 75/79 [00:03<00:00, 25.54it/s]
 99%|| 78/79 [00:03<00:00, 26.10it/s]
100%|| 79/79 [00:04<00:00, 19.32it/s]
, 23.73it/s]
 70%|   | 55/79 [00:03<00:00, 24.17it/s]
 73%|  | 58/79 [00:03<00:00, 24.32it/s]
 77%|  | 61/79 [00:03<00:00, 24.98it/s]
 81%|  | 64/79 [00:03<00:00, 24.68it/s]
 85%| | 67/79 [00:03<00:00, 24.54it/s]
 89%| | 70/79 [00:03<00:00, 24.45it/s]
 92%|| 73/79 [00:03<00:00, 24.88it/s]
 96%|| 76/79 [00:03<00:00, 25.56it/s]
100%|| 79/79 [00:04<00:00, 26.56it/s]
, 23.12it/s]
 70%|   | 55/79 [00:03<00:01, 23.61it/s]
 73%|  | 58/79 [00:03<00:00, 23.93it/s]
 77%|  | 61/79 [00:03<00:00, 24.16it/s]
 81%|  | 64/79 [00:03<00:00, 24.42it/s]
 85%| | 67/79 [00:03<00:00, 24.44it/s]
 89%| | 70/79 [00:03<00:00, 24.30it/s]
 92%|| 73/79 [00:03<00:00, 24.55it/s]
 96%|| 76/79 [00:03<00:00, 25.37it/s]
100%|| 79/79 [00:04<00:00, 26.01it/s]
, 23.51it/s]
 70%|   | 55/79 [00:03<00:01, 23.82it/s]
 73%|  | 58/79 [00:03<00:00, 23.76it/s]
 77%|  | 61/79 [00:03<00:00, 24.20it/s]
 81%|  | 64/79 [00:03<00:00, 24.44it/s]
 85%| | 67/79 [00:03<00:00, 25.03it/s]
 89%| | 70/79 [00:03<00:00, 25.21it/s]
 92%|| 73/79 [00:03<00:00, 25.47it/s]
 96%|| 76/79 [00:03<00:00, 26.01it/s]
100%|| 79/79 [00:04<00:00, 26.86it/s]
06it/s]
 68%|   | 54/79 [00:03<00:01, 24.29it/s]
 72%|  | 57/79 [00:03<00:00, 24.67it/s]
 76%|  | 60/79 [00:03<00:00, 24.96it/s]
 80%|  | 63/79 [00:03<00:00, 24.96it/s]
 84%| | 66/79 [00:03<00:00, 24.68it/s]
 87%| | 69/79 [00:03<00:00, 24.91it/s]
 91%| | 72/79 [00:03<00:00, 24.59it/s]
 95%|| 75/79 [00:03<00:00, 25.30it/s]
 99%|| 78/79 [00:03<00:00, 26.04it/s]
100%|| 79/79 [00:04<00:00, 19.34it/s]
, 22.69it/s]
 70%|   | 55/79 [00:03<00:01, 23.54it/s]
 73%|  | 58/79 [00:03<00:00, 23.82it/s]
 77%|  | 61/79 [00:03<00:00, 24.18it/s]
 81%|  | 64/79 [00:03<00:00, 24.24it/s]
 85%| | 67/79 [00:03<00:00, 24.30it/s]
 89%| | 70/79 [00:03<00:00, 24.32it/s]
 92%|| 73/79 [00:03<00:00, 24.87it/s]
 96%|| 76/79 [00:03<00:00, 25.47it/s]
100%|| 79/79 [00:04<00:00, 26.39it/s]
, 22.84it/s]
 70%|   | 55/79 [00:03<00:01, 23.65it/s]
 73%|  | 58/79 [00:03<00:00, 24.11it/s]
 77%|  | 61/79 [00:03<00:00, 24.14it/s]
 81%|  | 64/79 [00:03<00:00, 24.24it/s]
 85%| | 67/79 [00:03<00:00, 24.44it/s]
 89%| | 70/79 [00:03<00:00, 24.40it/s]
 92%|| 73/79 [00:03<00:00, 24.69it/s]
 96%|| 76/79 [00:03<00:00, 25.35it/s]
100%|| 79/79 [00:04<00:00, 26.33it/s]
, 22.24it/s]
 70%|   | 55/79 [00:03<00:01, 22.89it/s]
 73%|  | 58/79 [00:03<00:00, 23.47it/s]
 77%|  | 61/79 [00:03<00:00, 23.70it/s]
 81%|  | 64/79 [00:03<00:00, 23.90it/s]
 85%| | 67/79 [00:03<00:00, 24.19it/s]
 89%| | 70/79 [00:03<00:00, 24.70it/s]
 92%|| 73/79 [00:03<00:00, 24.88it/s]
 96%|| 76/79 [00:03<00:00, 25.73it/s]
100%|| 79/79 [00:04<00:00, 26.59it/s]
82it/s]
 68%|   | 54/79 [00:03<00:01, 23.29it/s]
 72%|  | 57/79 [00:03<00:00, 23.84it/s]
 76%|  | 60/79 [00:03<00:00, 23.97it/s]
 80%|  | 63/79 [00:03<00:00, 24.12it/s]
 84%| | 66/79 [00:03<00:00, 24.37it/s]
 87%| | 69/79 [00:03<00:00, 24.54it/s]
 91%| | 72/79 [00:03<00:00, 24.51it/s]
 95%|| 75/79 [00:03<00:00, 25.28it/s]
 99%|| 78/79 [00:04<00:00, 25.78it/s]
100%|| 79/79 [00:04<00:00, 19.11it/s]
, 23.83it/s]
 70%|   | 55/79 [00:03<00:00, 24.07it/s]
 73%|  | 58/79 [00:03<00:00, 24.09it/s]
 77%|  | 61/79 [00:03<00:00, 24.29it/s]
 81%|  | 64/79 [00:03<00:00, 24.42it/s]
 85%| | 67/79 [00:03<00:00, 24.64it/s]
 89%| | 70/79 [00:03<00:00, 24.71it/s]
 92%|| 73/79 [00:03<00:00, 25.00it/s]
 96%|| 76/79 [00:03<00:00, 25.42it/s]
100%|| 79/79 [00:04<00:00, 26.29it/s]
, 23.23it/s]
 70%|   | 55/79 [00:03<00:01, 23.54it/s]
 73%|  | 58/79 [00:03<00:00, 23.97it/s]
 77%|  | 61/79 [00:03<00:00, 24.16it/s]
 81%|  | 64/79 [00:03<00:00, 24.30it/s]
 85%| | 67/79 [00:03<00:00, 24.62it/s]
 89%| | 70/79 [00:03<00:00, 24.37it/s]
 92%|| 73/79 [00:03<00:00, 24.75it/s]
 96%|| 76/79 [00:03<00:00, 25.40it/s]
100%|| 79/79 [00:04<00:00, 26.30it/s]
, 22.88it/s]
 70%|   | 55/79 [00:03<00:01, 23.41it/s]
 73%|  | 58/79 [00:03<00:00, 23.62it/s]
 77%|  | 61/79 [00:03<00:00, 23.59it/s]
 81%|  | 64/79 [00:03<00:00, 23.84it/s]
 85%| | 67/79 [00:03<00:00, 23.96it/s]
 89%| | 70/79 [00:03<00:00, 23.96it/s]
 92%|| 73/79 [00:03<00:00, 24.61it/s]
 96%|| 76/79 [00:03<00:00, 25.34it/s]
100%|| 79/79 [00:04<00:00, 26.28it/s]
, 23.46it/s]
 70%|   | 55/79 [00:03<00:01, 23.96it/s]
 73%|  | 58/79 [00:03<00:00, 24.16it/s]
 77%|  | 61/79 [00:03<00:00, 24.22it/s]
 81%|  | 64/79 [00:03<00:00, 24.01it/s]
 85%| | 67/79 [00:03<00:00, 24.53it/s]
 89%| | 70/79 [00:03<00:00, 24.12it/s]
 92%|| 73/79 [00:03<00:00, 24.57it/s]
 96%|| 76/79 [00:03<00:00, 25.11it/s]
100%|| 79/79 [00:04<00:00, 26.13it/s]
, 23.27it/s]
 70%|   | 55/79 [00:03<00:01, 23.60it/s]
 73%|  | 58/79 [00:03<00:00, 24.02it/s]
 77%|  | 61/79 [00:03<00:00, 24.25it/s]
 81%|  | 64/79 [00:03<00:00, 24.14it/s]
 85%| | 67/79 [00:03<00:00, 24.35it/s]
 89%| | 70/79 [00:03<00:00, 24.51it/s]
 92%|| 73/79 [00:03<00:00, 25.04it/s]
 96%|| 76/79 [00:04<00:00, 25.69it/s]
100%|| 79/79 [00:04<00:00, 26.56it/s]
, 22.83it/s]
 70%|   | 55/79 [00:03<00:01, 23.54it/s]
 73%|  | 58/79 [00:03<00:00, 23.89it/s]
 77%|  | 61/79 [00:03<00:00, 24.21it/s]
 81%|  | 64/79 [00:03<00:00, 24.59it/s]
 85%| | 67/79 [00:03<00:00, 24.88it/s]
 89%| | 70/79 [00:03<00:00, 24.82it/s]
 92%|| 73/79 [00:03<00:00, 25.21it/s]
 96%|| 76/79 [00:04<00:00, 25.72it/s]
100%|| 79/79 [00:04<00:00, 26.31it/s]
, 22.85it/s]
 70%|   | 55/79 [00:03<00:01, 23.14it/s]
 73%|  | 58/79 [00:03<00:00, 23.60it/s]
 77%|  | 61/79 [00:03<00:00, 23.88it/s]
 81%|  | 64/79 [00:03<00:00, 23.94it/s]
 85%| | 67/79 [00:03<00:00, 23.94it/s]
 89%| | 70/79 [00:03<00:00, 23.85it/s]
 92%|| 73/79 [00:03<00:00, 24.28it/s]
 96%|| 76/79 [00:04<00:00, 24.96it/s]
100%|| 79/79 [00:04<00:00, 25.90it/s]
2020-06-23 15:30:28,664 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.233960 (0.027097344970703124 s / img per device, on 32 devices)
2020-06-23 15:30:28,685 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:30:28,685 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:30:28,706 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592951439606, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 5, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592951439607, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 5}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 15:30:40,940 maskrcnn_benchmark.trainer INFO: eta: 1:18:25  iter: 3680  loss: 0.7244 (0.8734)  loss_classifier: 0.2533 (0.3300)  loss_box_reg: 0.1140 (0.1369)  loss_mask: 0.2831 (0.3385)  loss_objectness: 0.0239 (0.0455)  loss_rpn_box_reg: 0.0135 (0.0224)  time: 0.1101 (0.1296)  data: 0.0016 (0.0204)  lr: 0.160000  max mem: 5093
2020-06-23 15:30:43,130 maskrcnn_benchmark.trainer INFO: eta: 1:18:19  iter: 3700  loss: 0.5721 (0.8719)  loss_classifier: 0.1794 (0.3293)  loss_box_reg: 0.0678 (0.1366)  loss_mask: 0.2529 (0.3381)  loss_objectness: 0.0231 (0.0455)  loss_rpn_box_reg: 0.0056 (0.0224)  time: 0.1092 (0.1295)  data: 0.0015 (0.0203)  lr: 0.160000  max mem: 5093
2020-06-23 15:30:45,305 maskrcnn_benchmark.trainer INFO: eta: 1:18:12  iter: 3720  loss: 0.6784 (0.8708)  loss_classifier: 0.2368 (0.3288)  loss_box_reg: 0.1006 (0.1365)  loss_mask: 0.2888 (0.3377)  loss_objectness: 0.0254 (0.0454)  loss_rpn_box_reg: 0.0112 (0.0223)  time: 0.1085 (0.1293)  data: 0.0015 (0.0202)  lr: 0.160000  max mem: 5093
2020-06-23 15:30:47,502 maskrcnn_benchmark.trainer INFO: eta: 1:18:06  iter: 3740  loss: 0.7101 (0.8699)  loss_classifier: 0.2534 (0.3284)  loss_box_reg: 0.1068 (0.1363)  loss_mask: 0.2723 (0.3374)  loss_objectness: 0.0216 (0.0454)  loss_rpn_box_reg: 0.0088 (0.0223)  time: 0.1089 (0.1292)  data: 0.0015 (0.0201)  lr: 0.160000  max mem: 5093
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.93s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 15:30:49,688 maskrcnn_benchmark.trainer INFO: eta: 1:17:59  iter: 3760  loss: 0.6946 (0.8691)  loss_classifier: 0.2597 (0.3280)  loss_box_reg: 0.1083 (0.1363)  loss_mask: 0.2884 (0.3372)  loss_objectness: 0.0303 (0.0453)  loss_rpn_box_reg: 0.0111 (0.0223)  time: 0.1086 (0.1291)  data: 0.0014 (0.0200)  lr: 0.160000  max mem: 5093
DONE (t=1.90s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.26231
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.46229
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.26837
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.14408
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.29128
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.33331
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.24886
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.40685
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.42817
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.25056
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.46587
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.54084
2020-06-23 15:30:51,879 maskrcnn_benchmark.trainer INFO: eta: 1:17:53  iter: 3780  loss: 0.7030 (0.8684)  loss_classifier: 0.2650 (0.3276)  loss_box_reg: 0.1209 (0.1363)  loss_mask: 0.2855 (0.3369)  loss_objectness: 0.0175 (0.0452)  loss_rpn_box_reg: 0.0082 (0.0223)  time: 0.1092 (0.1290)  data: 0.0016 (0.0199)  lr: 0.160000  max mem: 5093
2020-06-23 15:30:54,059 maskrcnn_benchmark.trainer INFO: eta: 1:17:46  iter: 3800  loss: 0.5724 (0.8673)  loss_classifier: 0.1930 (0.3271)  loss_box_reg: 0.0892 (0.1361)  loss_mask: 0.2663 (0.3366)  loss_objectness: 0.0229 (0.0452)  loss_rpn_box_reg: 0.0166 (0.0223)  time: 0.1089 (0.1289)  data: 0.0015 (0.0198)  lr: 0.160000  max mem: 5093
2020-06-23 15:30:56,218 maskrcnn_benchmark.trainer INFO: eta: 1:17:40  iter: 3820  loss: 0.6282 (0.8665)  loss_classifier: 0.2305 (0.3267)  loss_box_reg: 0.0975 (0.1360)  loss_mask: 0.2946 (0.3364)  loss_objectness: 0.0273 (0.0451)  loss_rpn_box_reg: 0.0112 (0.0223)  time: 0.1083 (0.1288)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5093
2020-06-23 15:30:58,400 maskrcnn_benchmark.trainer INFO: eta: 1:17:34  iter: 3840  loss: 0.7152 (0.8661)  loss_classifier: 0.2599 (0.3264)  loss_box_reg: 0.1134 (0.1359)  loss_mask: 0.3008 (0.3363)  loss_objectness: 0.0211 (0.0451)  loss_rpn_box_reg: 0.0092 (0.0223)  time: 0.1093 (0.1287)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5093
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:31:00,565 maskrcnn_benchmark.trainer INFO: eta: 1:17:27  iter: 3860  loss: 0.6965 (0.8652)  loss_classifier: 0.2491 (0.3260)  loss_box_reg: 0.0974 (0.1358)  loss_mask: 0.2804 (0.3360)  loss_objectness: 0.0203 (0.0450)  loss_rpn_box_reg: 0.0095 (0.0223)  time: 0.1081 (0.1286)  data: 0.0015 (0.0196)  lr: 0.160000  max mem: 5093
DONE (t=2.57s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:31:02,749 maskrcnn_benchmark.trainer INFO: eta: 1:17:21  iter: 3880  loss: 0.7058 (0.8649)  loss_classifier: 0.2522 (0.3257)  loss_box_reg: 0.1334 (0.1359)  loss_mask: 0.3121 (0.3359)  loss_objectness: 0.0308 (0.0450)  loss_rpn_box_reg: 0.0171 (0.0224)  time: 0.1085 (0.1285)  data: 0.0016 (0.0195)  lr: 0.160000  max mem: 5110
DONE (t=3.11s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.25578
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.44030
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.26143
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.10687
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.28042
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.37921
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.24716
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.38889
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.40699
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21806
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.44878
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.53820
2020-06-23 15:31:04,925 maskrcnn_benchmark.trainer INFO: eta: 1:17:15  iter: 3900  loss: 0.6975 (0.8640)  loss_classifier: 0.2607 (0.3253)  loss_box_reg: 0.1149 (0.1358)  loss_mask: 0.2840 (0.3356)  loss_objectness: 0.0183 (0.0449)  loss_rpn_box_reg: 0.0076 (0.0224)  time: 0.1078 (0.1284)  data: 0.0015 (0.0194)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:05,207 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.26230541709351657, segm mAP: 0.2557825998457696
:::MLLOG {"namespace": "", "time_ms": 1592951465208, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.26230541709351657, "SEGM": 0.2557825998457696}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1592951465208, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 4}}
2020-06-23 15:31:07,273 maskrcnn_benchmark.trainer INFO: eta: 1:17:10  iter: 3920  loss: 0.7801 (0.8636)  loss_classifier: 0.3049 (0.3252)  loss_box_reg: 0.1239 (0.1358)  loss_mask: 0.3062 (0.3354)  loss_objectness: 0.0247 (0.0449)  loss_rpn_box_reg: 0.0098 (0.0223)  time: 0.1083 (0.1283)  data: 0.0016 (0.0193)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:09,454 maskrcnn_benchmark.trainer INFO: eta: 1:17:04  iter: 3940  loss: 0.7668 (0.8632)  loss_classifier: 0.2411 (0.3249)  loss_box_reg: 0.1085 (0.1357)  loss_mask: 0.2933 (0.3352)  loss_objectness: 0.0315 (0.0450)  loss_rpn_box_reg: 0.0201 (0.0224)  time: 0.1086 (0.1282)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:11,616 maskrcnn_benchmark.trainer INFO: eta: 1:16:58  iter: 3960  loss: 0.7230 (0.8626)  loss_classifier: 0.2594 (0.3246)  loss_box_reg: 0.1132 (0.1356)  loss_mask: 0.3038 (0.3350)  loss_objectness: 0.0334 (0.0450)  loss_rpn_box_reg: 0.0155 (0.0224)  time: 0.1078 (0.1281)  data: 0.0015 (0.0191)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:13,788 maskrcnn_benchmark.trainer INFO: eta: 1:16:52  iter: 3980  loss: 0.6422 (0.8616)  loss_classifier: 0.2277 (0.3242)  loss_box_reg: 0.1073 (0.1355)  loss_mask: 0.2759 (0.3347)  loss_objectness: 0.0196 (0.0449)  loss_rpn_box_reg: 0.0064 (0.0223)  time: 0.1089 (0.1280)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:15,955 maskrcnn_benchmark.trainer INFO: eta: 1:16:46  iter: 4000  loss: 0.6519 (0.8609)  loss_classifier: 0.2400 (0.3239)  loss_box_reg: 0.1075 (0.1354)  loss_mask: 0.2941 (0.3345)  loss_objectness: 0.0179 (0.0448)  loss_rpn_box_reg: 0.0079 (0.0223)  time: 0.1070 (0.1279)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:18,138 maskrcnn_benchmark.trainer INFO: eta: 1:16:40  iter: 4020  loss: 0.7625 (0.8605)  loss_classifier: 0.2544 (0.3237)  loss_box_reg: 0.1483 (0.1355)  loss_mask: 0.2848 (0.3343)  loss_objectness: 0.0331 (0.0448)  loss_rpn_box_reg: 0.0213 (0.0223)  time: 0.1080 (0.1279)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:20,303 maskrcnn_benchmark.trainer INFO: eta: 1:16:34  iter: 4040  loss: 0.6813 (0.8597)  loss_classifier: 0.2329 (0.3233)  loss_box_reg: 0.1162 (0.1354)  loss_mask: 0.2813 (0.3340)  loss_objectness: 0.0190 (0.0447)  loss_rpn_box_reg: 0.0106 (0.0223)  time: 0.1079 (0.1278)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:22,457 maskrcnn_benchmark.trainer INFO: eta: 1:16:28  iter: 4060  loss: 0.6099 (0.8588)  loss_classifier: 0.2309 (0.3228)  loss_box_reg: 0.0929 (0.1353)  loss_mask: 0.2834 (0.3338)  loss_objectness: 0.0227 (0.0447)  loss_rpn_box_reg: 0.0104 (0.0222)  time: 0.1074 (0.1277)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:24,633 maskrcnn_benchmark.trainer INFO: eta: 1:16:22  iter: 4080  loss: 0.6110 (0.8578)  loss_classifier: 0.2148 (0.3223)  loss_box_reg: 0.0939 (0.1351)  loss_mask: 0.2703 (0.3335)  loss_objectness: 0.0209 (0.0446)  loss_rpn_box_reg: 0.0114 (0.0222)  time: 0.1082 (0.1276)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:26,803 maskrcnn_benchmark.trainer INFO: eta: 1:16:16  iter: 4100  loss: 0.6594 (0.8571)  loss_classifier: 0.2606 (0.3221)  loss_box_reg: 0.1254 (0.1350)  loss_mask: 0.2723 (0.3332)  loss_objectness: 0.0254 (0.0446)  loss_rpn_box_reg: 0.0105 (0.0222)  time: 0.1082 (0.1275)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:28,970 maskrcnn_benchmark.trainer INFO: eta: 1:16:10  iter: 4120  loss: 0.6747 (0.8564)  loss_classifier: 0.2394 (0.3218)  loss_box_reg: 0.1149 (0.1350)  loss_mask: 0.2765 (0.3329)  loss_objectness: 0.0257 (0.0445)  loss_rpn_box_reg: 0.0058 (0.0221)  time: 0.1075 (0.1274)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:31,145 maskrcnn_benchmark.trainer INFO: eta: 1:16:04  iter: 4140  loss: 0.6245 (0.8553)  loss_classifier: 0.2328 (0.3213)  loss_box_reg: 0.1064 (0.1348)  loss_mask: 0.2546 (0.3326)  loss_objectness: 0.0202 (0.0444)  loss_rpn_box_reg: 0.0109 (0.0221)  time: 0.1088 (0.1273)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:33,301 maskrcnn_benchmark.trainer INFO: eta: 1:15:58  iter: 4160  loss: 0.6325 (0.8544)  loss_classifier: 0.2339 (0.3210)  loss_box_reg: 0.0922 (0.1347)  loss_mask: 0.2481 (0.3322)  loss_objectness: 0.0175 (0.0444)  loss_rpn_box_reg: 0.0093 (0.0221)  time: 0.1076 (0.1272)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:35,460 maskrcnn_benchmark.trainer INFO: eta: 1:15:52  iter: 4180  loss: 0.7512 (0.8538)  loss_classifier: 0.2756 (0.3207)  loss_box_reg: 0.1088 (0.1347)  loss_mask: 0.2917 (0.3320)  loss_objectness: 0.0299 (0.0443)  loss_rpn_box_reg: 0.0144 (0.0221)  time: 0.1071 (0.1271)  data: 0.0015 (0.0182)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:37,616 maskrcnn_benchmark.trainer INFO: eta: 1:15:47  iter: 4200  loss: 0.7659 (0.8531)  loss_classifier: 0.2744 (0.3204)  loss_box_reg: 0.1204 (0.1346)  loss_mask: 0.2630 (0.3318)  loss_objectness: 0.0256 (0.0443)  loss_rpn_box_reg: 0.0118 (0.0221)  time: 0.1072 (0.1270)  data: 0.0015 (0.0181)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:39,787 maskrcnn_benchmark.trainer INFO: eta: 1:15:41  iter: 4220  loss: 0.6767 (0.8524)  loss_classifier: 0.2171 (0.3201)  loss_box_reg: 0.1046 (0.1345)  loss_mask: 0.2774 (0.3315)  loss_objectness: 0.0179 (0.0442)  loss_rpn_box_reg: 0.0091 (0.0220)  time: 0.1081 (0.1269)  data: 0.0015 (0.0180)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:41,950 maskrcnn_benchmark.trainer INFO: eta: 1:15:35  iter: 4240  loss: 0.7202 (0.8519)  loss_classifier: 0.2713 (0.3199)  loss_box_reg: 0.1277 (0.1345)  loss_mask: 0.2865 (0.3313)  loss_objectness: 0.0245 (0.0441)  loss_rpn_box_reg: 0.0085 (0.0220)  time: 0.1079 (0.1268)  data: 0.0016 (0.0179)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:44,104 maskrcnn_benchmark.trainer INFO: eta: 1:15:29  iter: 4260  loss: 0.6688 (0.8510)  loss_classifier: 0.2316 (0.3195)  loss_box_reg: 0.0913 (0.1343)  loss_mask: 0.2562 (0.3311)  loss_objectness: 0.0190 (0.0440)  loss_rpn_box_reg: 0.0081 (0.0220)  time: 0.1071 (0.1267)  data: 0.0015 (0.0179)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:46,279 maskrcnn_benchmark.trainer INFO: eta: 1:15:24  iter: 4280  loss: 0.6551 (0.8503)  loss_classifier: 0.2199 (0.3192)  loss_box_reg: 0.0957 (0.1343)  loss_mask: 0.2888 (0.3309)  loss_objectness: 0.0155 (0.0439)  loss_rpn_box_reg: 0.0072 (0.0220)  time: 0.1082 (0.1267)  data: 0.0015 (0.0178)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:48,467 maskrcnn_benchmark.trainer INFO: eta: 1:15:19  iter: 4300  loss: 0.6446 (0.8497)  loss_classifier: 0.2488 (0.3190)  loss_box_reg: 0.1046 (0.1342)  loss_mask: 0.2770 (0.3307)  loss_objectness: 0.0194 (0.0439)  loss_rpn_box_reg: 0.0095 (0.0220)  time: 0.1093 (0.1266)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:50,653 maskrcnn_benchmark.trainer INFO: eta: 1:15:13  iter: 4320  loss: 0.7913 (0.8494)  loss_classifier: 0.2875 (0.3188)  loss_box_reg: 0.1235 (0.1341)  loss_mask: 0.2881 (0.3305)  loss_objectness: 0.0355 (0.0439)  loss_rpn_box_reg: 0.0228 (0.0220)  time: 0.1085 (0.1265)  data: 0.0015 (0.0176)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:52,804 maskrcnn_benchmark.trainer INFO: eta: 1:15:07  iter: 4340  loss: 0.6807 (0.8488)  loss_classifier: 0.2520 (0.3185)  loss_box_reg: 0.1243 (0.1341)  loss_mask: 0.2727 (0.3303)  loss_objectness: 0.0226 (0.0439)  loss_rpn_box_reg: 0.0133 (0.0220)  time: 0.1072 (0.1264)  data: 0.0015 (0.0176)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:54,970 maskrcnn_benchmark.trainer INFO: eta: 1:15:02  iter: 4360  loss: 0.7435 (0.8484)  loss_classifier: 0.2516 (0.3184)  loss_box_reg: 0.1341 (0.1341)  loss_mask: 0.2917 (0.3301)  loss_objectness: 0.0269 (0.0438)  loss_rpn_box_reg: 0.0112 (0.0220)  time: 0.1082 (0.1263)  data: 0.0015 (0.0175)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:57,145 maskrcnn_benchmark.trainer INFO: eta: 1:14:57  iter: 4380  loss: 0.7101 (0.8478)  loss_classifier: 0.2671 (0.3181)  loss_box_reg: 0.1223 (0.1340)  loss_mask: 0.2832 (0.3299)  loss_objectness: 0.0240 (0.0438)  loss_rpn_box_reg: 0.0095 (0.0220)  time: 0.1086 (0.1263)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5110
2020-06-23 15:31:59,321 maskrcnn_benchmark.trainer INFO: eta: 1:14:51  iter: 4400  loss: 0.8636 (0.8478)  loss_classifier: 0.3177 (0.3181)  loss_box_reg: 0.1487 (0.1341)  loss_mask: 0.2967 (0.3298)  loss_objectness: 0.0244 (0.0437)  loss_rpn_box_reg: 0.0110 (0.0220)  time: 0.1079 (0.1262)  data: 0.0015 (0.0173)  lr: 0.160000  max mem: 5110
2020-06-23 15:32:01,482 maskrcnn_benchmark.trainer INFO: eta: 1:14:46  iter: 4420  loss: 0.5986 (0.8468)  loss_classifier: 0.1908 (0.3177)  loss_box_reg: 0.0808 (0.1340)  loss_mask: 0.2614 (0.3296)  loss_objectness: 0.0233 (0.0437)  loss_rpn_box_reg: 0.0105 (0.0220)  time: 0.1077 (0.1261)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5110
2020-06-23 15:32:03,635 maskrcnn_benchmark.trainer INFO: eta: 1:14:40  iter: 4440  loss: 0.7072 (0.8461)  loss_classifier: 0.2373 (0.3173)  loss_box_reg: 0.1138 (0.1339)  loss_mask: 0.2864 (0.3294)  loss_objectness: 0.0230 (0.0436)  loss_rpn_box_reg: 0.0097 (0.0219)  time: 0.1074 (0.1260)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5110
2020-06-23 15:32:05,812 maskrcnn_benchmark.trainer INFO: eta: 1:14:35  iter: 4460  loss: 0.6917 (0.8455)  loss_classifier: 0.2489 (0.3171)  loss_box_reg: 0.1096 (0.1338)  loss_mask: 0.2704 (0.3291)  loss_objectness: 0.0234 (0.0435)  loss_rpn_box_reg: 0.0114 (0.0219)  time: 0.1087 (0.1259)  data: 0.0014 (0.0171)  lr: 0.160000  max mem: 5110
2020-06-23 15:32:07,970 maskrcnn_benchmark.trainer INFO: eta: 1:14:30  iter: 4480  loss: 0.6368 (0.8448)  loss_classifier: 0.2522 (0.3168)  loss_box_reg: 0.1055 (0.1338)  loss_mask: 0.2625 (0.3289)  loss_objectness: 0.0173 (0.0435)  loss_rpn_box_reg: 0.0073 (0.0218)  time: 0.1073 (0.1259)  data: 0.0014 (0.0171)  lr: 0.160000  max mem: 5110
2020-06-23 15:32:10,136 maskrcnn_benchmark.trainer INFO: eta: 1:14:24  iter: 4500  loss: 0.7280 (0.8442)  loss_classifier: 0.2482 (0.3166)  loss_box_reg: 0.1088 (0.1337)  loss_mask: 0.2687 (0.3286)  loss_objectness: 0.0271 (0.0434)  loss_rpn_box_reg: 0.0152 (0.0218)  time: 0.1080 (0.1258)  data: 0.0015 (0.0170)  lr: 0.160000  max mem: 5110
2020-06-23 15:32:12,306 maskrcnn_benchmark.trainer INFO: eta: 1:14:19  iter: 4520  loss: 0.7083 (0.8437)  loss_classifier: 0.2462 (0.3164)  loss_box_reg: 0.1043 (0.1337)  loss_mask: 0.2677 (0.3284)  loss_objectness: 0.0262 (0.0434)  loss_rpn_box_reg: 0.0154 (0.0219)  time: 0.1086 (0.1257)  data: 0.0015 (0.0169)  lr: 0.160000  max mem: 5110
2020-06-23 15:32:14,487 maskrcnn_benchmark.trainer INFO: eta: 1:14:14  iter: 4540  loss: 0.6497 (0.8430)  loss_classifier: 0.2013 (0.3160)  loss_box_reg: 0.0920 (0.1336)  loss_mask: 0.2861 (0.3283)  loss_objectness: 0.0188 (0.0433)  loss_rpn_box_reg: 0.0097 (0.0218)  time: 0.1084 (0.1256)  data: 0.0014 (0.0169)  lr: 0.160000  max mem: 5110
2020-06-23 15:32:16,659 maskrcnn_benchmark.trainer INFO: eta: 1:14:09  iter: 4560  loss: 0.6331 (0.8422)  loss_classifier: 0.2250 (0.3157)  loss_box_reg: 0.0989 (0.1335)  loss_mask: 0.2584 (0.3280)  loss_objectness: 0.0207 (0.0432)  loss_rpn_box_reg: 0.0061 (0.0218)  time: 0.1082 (0.1255)  data: 0.0015 (0.0168)  lr: 0.160000  max mem: 5110
2020-06-23 15:32:18,852 maskrcnn_benchmark.trainer INFO: eta: 1:14:04  iter: 4580  loss: 0.7232 (0.8416)  loss_classifier: 0.2491 (0.3155)  loss_box_reg: 0.1220 (0.1334)  loss_mask: 0.2848 (0.3278)  loss_objectness: 0.0206 (0.0432)  loss_rpn_box_reg: 0.0121 (0.0218)  time: 0.1094 (0.1255)  data: 0.0015 (0.0167)  lr: 0.160000  max mem: 5110
:::MLLOG {"namespace": "", "time_ms": 1592951539389, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1592951539390, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1592951539390, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 5}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
2020-06-23 15:32:19,650 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
Done (t=0.29s)
Done (t=0.28s)
creating index...
creating index...
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
index created!
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 15:32:19,950 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:56,  1.38it/s]
  5%|         | 4/79 [00:00<00:38,  1.92it/s]
  9%|         | 7/79 [00:00<00:27,  2.66it/s]
 13%|        | 10/79 [00:01<00:18,  3.64it/s]
 16%|        | 13/79 [00:01<00:13,  4.89it/s]
 20%|        | 16/79 [00:01<00:09,  6.46it/s]
 24%|       | 19/79 [00:01<00:07,  8.31it/s]
 28%|       | 22/79 [00:01<00:05, 10.39it/s]
 32%|      | 25/79 [00:01<00:04, 12.57it/s]
 35%|      | 28/79 [00:01<00:03, 14.79it/s]
 39%|      | 31/79 [00:01<00:02, 16.69it/s]
 43%|     | 34/79 [00:02<00:02, 18.50it/s]
 47%|     | 37/79 [00:02<00:02, 19.91it/s]
 51%|     | 40/79 [00:02<00:01, 21.10it/s]
 54%|    | 43/79 [00:02<00:01, 21.96it/s]
 58%|    | 46/79 [00:02<00:01, 22.90it/s]
 62%|   | 49/79 [00:02<00:01, 23.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  4%|         | 3/79 [00:00<00:43,  1.74it/s]
  8%|         | 6/79 [00:01<00:30,  2.41it/s]
 11%|        | 9/79 [00:01<00:21,  3.32it/s]
 15%|        | 12/79 [00:01<00:14,  4.48it/s]
 19%|        | 15/79 [00:01<00:10,  5.94it/s]
 23%|       | 18/79 [00:01<00:07,  7.68it/s]
 27%|       | 21/79 [00:01<00:05,  9.70it/s]
 30%|       | 24/79 [00:01<00:04, 11.93it/s]
 34%|      | 27/79 [00:01<00:03, 14.04it/s]
 38%|      | 30/79 [00:01<00:03, 16.23it/s]
 42%|     | 33/79 [00:02<00:02, 18.19it/s]
 46%|     | 36/79 [00:02<00:02, 19.96it/s]
 49%|     | 39/79 [00:02<00:01, 20.97it/s]
 53%|    | 42/79 [00:02<00:01, 21.99it/s]
 57%|    | 45/79 [00:02<00:01, 22.79it/s]
 61%|    | 48/79 [00:02<00:01, 23.28it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:59,  1.31it/s]
  5%|         | 4/79 [00:00<00:41,  1.83it/s]
  9%|         | 7/79 [00:01<00:28,  2.53it/s]
 13%|        | 10/79 [00:01<00:19,  3.46it/s]
 16%|        | 13/79 [00:01<00:14,  4.66it/s]
 20%|        | 16/79 [00:01<00:10,  6.15it/s]
 24%|       | 19/79 [00:01<00:07,  7.95it/s]
 28%|       | 22/79 [00:01<00:05,  9.96it/s]
 32%|      | 25/79 [00:01<00:04, 12.10it/s]
 35%|      | 28/79 [00:01<00:03, 14.34it/s]
 39%|      | 31/79 [00:02<00:02, 16.39it/s]
 43%|     | 34/79 [00:02<00:02, 18.36it/s]
 47%|     | 37/79 [00:02<00:02, 19.74it/s]
 51%|     | 40/79 [00:02<00:01, 20.97it/s]
 54%|    | 43/79 [00:02<00:01, 22.17it/s]
 58%|    | 46/79 [00:02<00:01, 22.98it/s]
 62%|   | 49/79 [00:02<00:01, 23.35it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.18it/s]
 32%|      | 25/79 [00:01<00:04, 11.37it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.88it/s]
 47%|     | 37/79 [00:02<00:02, 19.50it/s]
 51%|     | 40/79 [00:02<00:01, 20.86it/s]
 54%|    | 43/79 [00:02<00:01, 22.24it/s]
 58%|    | 46/79 [00:02<00:01, 23.08it/s]
 62%|   | 49/79 [00:02<00:01, 23.62it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.92it/s]
 32%|      | 25/79 [00:01<00:04, 11.07it/s]
 35%|      | 28/79 [00:01<00:03, 13.28it/s]
 39%|      | 31/79 [00:02<00:03, 15.36it/s]
 43%|     | 34/79 [00:02<00:02, 17.33it/s]
 47%|     | 37/79 [00:02<00:02, 18.97it/s]
 51%|     | 40/79 [00:02<00:01, 20.42it/s]
 54%|    | 43/79 [00:02<00:01, 21.41it/s]
 58%|    | 46/79 [00:02<00:01, 22.11it/s]
 62%|   | 49/79 [00:02<00:01, 22.89it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.95it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.93it/s]
 28%|       | 22/79 [00:01<00:06,  8.84it/s]
 32%|      | 25/79 [00:01<00:04, 10.98it/s]
 35%|      | 28/79 [00:02<00:03, 13.22it/s]
 39%|      | 31/79 [00:02<00:03, 15.48it/s]
 43%|     | 34/79 [00:02<00:02, 17.40it/s]
 47%|     | 37/79 [00:02<00:02, 19.14it/s]
 51%|     | 40/79 [00:02<00:01, 20.52it/s]
 54%|    | 43/79 [00:02<00:01, 21.78it/s]
 58%|    | 46/79 [00:02<00:01, 22.51it/s]
 62%|   | 49/79 [00:02<00:01, 23.13it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.82it/s]
 16%|        | 13/79 [00:01<00:17,  3.84it/s]
 20%|        | 16/79 [00:01<00:12,  5.15it/s]
 24%|       | 19/79 [00:01<00:08,  6.76it/s]
 28%|       | 22/79 [00:01<00:06,  8.62it/s]
 32%|      | 25/79 [00:01<00:05, 10.74it/s]
 35%|      | 28/79 [00:02<00:03, 12.96it/s]
 39%|      | 31/79 [00:02<00:03, 15.18it/s]
 43%|     | 34/79 [00:02<00:02, 17.29it/s]
 47%|     | 37/79 [00:02<00:02, 19.05it/s]
 51%|     | 40/79 [00:02<00:01, 20.43it/s]
 54%|    | 43/79 [00:02<00:01, 21.57it/s]
 58%|    | 46/79 [00:02<00:01, 22.53it/s]
 62%|   | 49/79 [00:02<00:01, 23.03it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.02it/s]
 28%|       | 22/79 [00:01<00:06,  8.97it/s]
 32%|      | 25/79 [00:01<00:04, 11.09it/s]
 35%|      | 28/79 [00:02<00:03, 13.30it/s]
 39%|      | 31/79 [00:02<00:03, 15.48it/s]
 43%|     | 34/79 [00:02<00:02, 17.45it/s]
 47%|     | 37/79 [00:02<00:02, 19.31it/s]
 51%|     | 40/79 [00:02<00:01, 20.56it/s]
 54%|    | 43/79 [00:02<00:01, 21.63it/s]
 58%|    | 46/79 [00:02<00:01, 22.14it/s]
 62%|   | 49/79 [00:02<00:01, 22.67it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.77it/s]
 32%|      | 25/79 [00:01<00:04, 10.84it/s]
 35%|      | 28/79 [00:02<00:03, 13.00it/s]
 39%|      | 31/79 [00:02<00:03, 15.16it/s]
 43%|     | 34/79 [00:02<00:02, 16.99it/s]
 47%|     | 37/79 [00:02<00:02, 18.63it/s]
 51%|     | 40/79 [00:02<00:01, 20.03it/s]
 54%|    | 43/79 [00:02<00:01, 21.16it/s]
 58%|    | 46/79 [00:02<00:01, 21.89it/s]
 62%|   | 49/79 [00:02<00:01, 22.52it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  3%|         | 2/79 [00:01<00:54,  1.42it/s]
  6%|         | 5/79 [00:01<00:37,  1.98it/s]
 10%|         | 8/79 [00:01<00:25,  2.73it/s]
 14%|        | 11/79 [00:01<00:18,  3.73it/s]
 18%|        | 14/79 [00:01<00:12,  5.01it/s]
 22%|       | 17/79 [00:01<00:09,  6.60it/s]
 25%|       | 20/79 [00:01<00:06,  8.47it/s]
 29%|       | 23/79 [00:01<00:05, 10.55it/s]
 33%|      | 26/79 [00:02<00:04, 12.75it/s]
 37%|      | 29/79 [00:02<00:03, 14.94it/s]
 41%|      | 32/79 [00:02<00:02, 16.92it/s]
 44%|     | 35/79 [00:02<00:02, 18.73it/s]
 48%|     | 38/79 [00:02<00:02, 20.23it/s]
 52%|    | 41/79 [00:02<00:01, 21.57it/s]
 56%|    | 44/79 [00:02<00:01, 22.22it/s]
 59%|    | 47/79 [00:02<00:01, 23.03it/s]
 63%|   | 50/79 [00:03<00:01, 23.45it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.89it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.81it/s]
 28%|       | 22/79 [00:01<00:06,  8.71it/s]
 32%|      | 25/79 [00:01<00:05, 10.79it/s]
 35%|      | 28/79 [00:02<00:03, 12.98it/s]
 39%|      | 31/79 [00:02<00:03, 15.10it/s]
 43%|     | 34/79 [00:02<00:02, 16.98it/s]
 47%|     | 37/79 [00:02<00:02, 18.66it/s]
 51%|     | 40/79 [00:02<00:01, 20.04it/s]
 54%|    | 43/79 [00:02<00:01, 20.86it/s]
 58%|    | 46/79 [00:02<00:01, 21.78it/s]
 62%|   | 49/79 [00:02<00:01, 22.43it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:18,  1.01s/it]
  5%|         | 4/79 [00:01<00:53,  1.39it/s]
  9%|         | 7/79 [00:01<00:37,  1.94it/s]
 13%|        | 10/79 [00:01<00:25,  2.69it/s]
 16%|        | 13/79 [00:01<00:17,  3.67it/s]
 20%|        | 16/79 [00:01<00:12,  4.93it/s]
 24%|       | 19/79 [00:01<00:09,  6.50it/s]
 28%|       | 22/79 [00:01<00:06,  8.40it/s]
 32%|      | 25/79 [00:01<00:05, 10.45it/s]
 35%|      | 28/79 [00:02<00:04, 12.67it/s]
 39%|      | 31/79 [00:02<00:03, 14.89it/s]
 43%|     | 34/79 [00:02<00:02, 17.05it/s]
 47%|     | 37/79 [00:02<00:02, 18.72it/s]
 51%|     | 40/79 [00:02<00:01, 20.43it/s]
 54%|    | 43/79 [00:02<00:01, 21.61it/s]
 58%|    | 46/79 [00:02<00:01, 22.35it/s]
 62%|   | 49/79 [00:02<00:01, 23.23it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  4%|         | 3/79 [00:01<00:51,  1.48it/s]
  8%|         | 6/79 [00:01<00:35,  2.06it/s]
 11%|        | 9/79 [00:01<00:24,  2.84it/s]
 15%|        | 12/79 [00:01<00:17,  3.86it/s]
 19%|        | 15/79 [00:01<00:12,  5.17it/s]
 23%|       | 18/79 [00:01<00:09,  6.77it/s]
 27%|       | 21/79 [00:01<00:06,  8.61it/s]
 30%|       | 24/79 [00:01<00:05, 10.66it/s]
 34%|      | 27/79 [00:02<00:04, 12.80it/s]
 38%|      | 30/79 [00:02<00:03, 14.98it/s]
 42%|     | 33/79 [00:02<00:02, 16.99it/s]
 46%|     | 36/79 [00:02<00:02, 18.62it/s]
 49%|     | 39/79 [00:02<00:02, 19.85it/s]
 53%|    | 42/79 [00:02<00:01, 21.11it/s]
 57%|    | 45/79 [00:02<00:01, 22.03it/s]
 61%|    | 48/79 [00:02<00:01, 22.48it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:21,  1.04s/it]
  5%|         | 4/79 [00:01<00:55,  1.35it/s]
  9%|         | 7/79 [00:01<00:38,  1.89it/s]
 13%|        | 10/79 [00:01<00:26,  2.61it/s]
 16%|        | 13/79 [00:01<00:18,  3.56it/s]
 20%|        | 16/79 [00:01<00:13,  4.80it/s]
 24%|       | 19/79 [00:01<00:09,  6.33it/s]
 28%|       | 22/79 [00:01<00:06,  8.20it/s]
 32%|      | 25/79 [00:02<00:05, 10.29it/s]
 35%|      | 28/79 [00:02<00:04, 12.49it/s]
 39%|      | 31/79 [00:02<00:03, 14.81it/s]
 43%|     | 34/79 [00:02<00:02, 16.86it/s]
 47%|     | 37/79 [00:02<00:02, 18.78it/s]
 51%|     | 40/79 [00:02<00:01, 20.20it/s]
 54%|    | 43/79 [00:02<00:01, 21.44it/s]
 58%|    | 46/79 [00:02<00:01, 22.40it/s]
 62%|   | 49/79 [00:02<00:01, 23.10it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:19,  1.02s/it]
  4%|         | 3/79 [00:01<00:55,  1.36it/s]
  8%|         | 6/79 [00:01<00:38,  1.90it/s]
 11%|        | 9/79 [00:01<00:26,  2.63it/s]
 15%|        | 12/79 [00:01<00:18,  3.59it/s]
 19%|        | 15/79 [00:01<00:13,  4.83it/s]
 23%|       | 18/79 [00:01<00:09,  6.35it/s]
 27%|       | 21/79 [00:01<00:07,  8.17it/s]
 30%|       | 24/79 [00:02<00:05, 10.19it/s]
 34%|      | 27/79 [00:02<00:04, 12.33it/s]
 38%|      | 30/79 [00:02<00:03, 14.48it/s]
 42%|     | 33/79 [00:02<00:02, 16.57it/s]
 46%|     | 36/79 [00:02<00:02, 18.21it/s]
 49%|     | 39/79 [00:02<00:02, 19.60it/s]
 53%|    | 42/79 [00:02<00:01, 20.94it/s]
 57%|    | 45/79 [00:02<00:01, 21.88it/s]
 61%|    | 48/79 [00:02<00:01, 22.48it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:18,  1.01s/it]
  5%|         | 4/79 [00:01<00:53,  1.39it/s]
  9%|         | 7/79 [00:01<00:37,  1.94it/s]
 13%|        | 10/79 [00:01<00:25,  2.68it/s]
 16%|        | 13/79 [00:01<00:18,  3.66it/s]
 20%|        | 16/79 [00:01<00:12,  4.90it/s]
 24%|       | 19/79 [00:01<00:09,  6.42it/s]
 28%|       | 22/79 [00:01<00:06,  8.25it/s]
 32%|      | 25/79 [00:02<00:05, 10.25it/s]
 35%|      | 28/79 [00:02<00:04, 12.41it/s]
 39%|      | 31/79 [00:02<00:03, 14.48it/s]
 43%|     | 34/79 [00:02<00:02, 16.48it/s]
 47%|     | 37/79 [00:02<00:02, 18.29it/s]
 51%|     | 40/79 [00:02<00:02, 19.48it/s]
 54%|    | 43/79 [00:02<00:01, 20.69it/s]
 58%|    | 46/79 [00:02<00:01, 21.71it/s]
 62%|   | 49/79 [00:03<00:01, 22.56it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:21,  1.04s/it]
  4%|         | 3/79 [00:01<00:56,  1.34it/s]
  8%|         | 6/79 [00:01<00:38,  1.88it/s]
 11%|        | 9/79 [00:01<00:27,  2.59it/s]
 15%|        | 12/79 [00:01<00:18,  3.54it/s]
 19%|        | 15/79 [00:01<00:13,  4.76it/s]
 23%|       | 18/79 [00:01<00:09,  6.25it/s]
 27%|       | 21/79 [00:01<00:07,  8.05it/s]
 30%|       | 24/79 [00:02<00:05, 10.04it/s]
 34%|      | 27/79 [00:02<00:04, 12.12it/s]
 38%|      | 30/79 [00:02<00:03, 14.27it/s]
 42%|     | 33/79 [00:02<00:02, 16.30it/s]
 46%|     | 36/79 [00:02<00:02, 18.06it/s]
 49%|     | 39/79 [00:02<00:02, 19.39it/s]
 53%|    | 42/79 [00:02<00:01, 20.71it/s]
 57%|    | 45/79 [00:02<00:01, 21.71it/s]
 61%|    | 48/79 [00:03<00:01, 22.17it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  4%|         | 3/79 [00:01<00:51,  1.48it/s]
  8%|         | 6/79 [00:01<00:35,  2.05it/s]
 11%|        | 9/79 [00:01<00:24,  2.83it/s]
 15%|        | 12/79 [00:01<00:17,  3.85it/s]
 19%|        | 15/79 [00:01<00:12,  5.16it/s]
 23%|       | 18/79 [00:01<00:09,  6.77it/s]
 27%|       | 21/79 [00:01<00:06,  8.69it/s]
 30%|       | 24/79 [00:02<00:05, 10.78it/s]
 34%|      | 27/79 [00:02<00:04, 12.97it/s]
 38%|      | 30/79 [00:02<00:03, 15.10it/s]
 42%|     | 33/79 [00:02<00:02, 17.00it/s]
 46%|     | 36/79 [00:02<00:02, 18.71it/s]
 49%|     | 39/79 [00:02<00:01, 20.15it/s]
 53%|    | 42/79 [00:02<00:01, 20.80it/s]
 57%|    | 45/79 [00:02<00:01, 21.70it/s]
 61%|    | 48/79 [00:03<00:01, 22.09it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:22,  1.05s/it]
  5%|         | 4/79 [00:01<00:56,  1.33it/s]
  9%|         | 7/79 [00:01<00:38,  1.86it/s]
 13%|        | 10/79 [00:01<00:26,  2.57it/s]
 16%|        | 13/79 [00:01<00:18,  3.52it/s]
 20%|        | 16/79 [00:01<00:13,  4.72it/s]
 24%|       | 19/79 [00:01<00:09,  6.23it/s]
 28%|       | 22/79 [00:01<00:07,  8.02it/s]
 32%|      | 25/79 [00:02<00:05, 10.05it/s]
 35%|      | 28/79 [00:02<00:04, 12.18it/s]
 39%|      | 31/79 [00:02<00:03, 14.35it/s]
 43%|     | 34/79 [00:02<00:02, 16.52it/s]
 47%|     | 37/79 [00:02<00:02, 18.21it/s]
 51%|     | 40/79 [00:02<00:01, 19.63it/s]
 54%|    | 43/79 [00:02<00:01, 20.88it/s]
 58%|    | 46/79 [00:02<00:01, 21.98it/s]
 62%|   | 49/79 [00:03<00:01, 22.84it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  3%|         | 2/79 [00:01<00:55,  1.38it/s]
  6%|         | 5/79 [00:01<00:38,  1.91it/s]
 10%|         | 8/79 [00:01<00:26,  2.65it/s]
 14%|        | 11/79 [00:01<00:18,  3.61it/s]
 18%|        | 14/79 [00:01<00:13,  4.85it/s]
 22%|       | 17/79 [00:01<00:09,  6.39it/s]
 25%|       | 20/79 [00:01<00:07,  8.23it/s]
 29%|       | 23/79 [00:02<00:05, 10.23it/s]
 33%|      | 26/79 [00:02<00:04, 12.38it/s]
 37%|      | 29/79 [00:02<00:03, 14.38it/s]
 41%|      | 32/79 [00:02<00:02, 16.32it/s]
 44%|     | 35/79 [00:02<00:02, 18.08it/s]
 48%|     | 38/79 [00:02<00:02, 19.29it/s]
 52%|    | 41/79 [00:02<00:01, 20.41it/s]
 56%|    | 44/79 [00:02<00:01, 21.45it/s]
 59%|    | 47/79 [00:03<00:01, 22.15it/s]
 63%|   | 50/79 [00:03<00:01, 22.24it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:24,  1.08s/it]
  5%|         | 4/79 [00:01<00:57,  1.30it/s]
  9%|         | 7/79 [00:01<00:39,  1.81it/s]
 13%|        | 10/79 [00:01<00:27,  2.52it/s]
 16%|        | 13/79 [00:01<00:19,  3.44it/s]
 20%|        | 16/79 [00:01<00:13,  4.63it/s]
 24%|       | 19/79 [00:01<00:09,  6.14it/s]
 28%|       | 22/79 [00:01<00:07,  7.91it/s]
 32%|      | 25/79 [00:02<00:05,  9.96it/s]
 35%|      | 28/79 [00:02<00:04, 12.14it/s]
 39%|      | 31/79 [00:02<00:03, 14.46it/s]
 43%|     | 34/79 [00:02<00:02, 16.53it/s]
 47%|     | 37/79 [00:02<00:02, 18.43it/s]
 51%|     | 40/79 [00:02<00:01, 19.89it/s]
 54%|    | 43/79 [00:02<00:01, 21.06it/s]
 58%|    | 46/79 [00:02<00:01, 22.03it/s]
 62%|   | 49/79 [00:03<00:01, 22.64it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  3%|         | 2/79 [00:01<00:52,  1.46it/s]
  4%|         | 3/79 [00:01<00:40,  1.87it/s]
  8%|         | 6/79 [00:01<00:28,  2.58it/s]
 11%|        | 9/79 [00:01<00:19,  3.53it/s]
 15%|        | 12/79 [00:01<00:14,  4.76it/s]
 19%|        | 15/79 [00:01<00:10,  6.27it/s]
 23%|       | 18/79 [00:01<00:07,  8.10it/s]
 27%|       | 21/79 [00:01<00:05, 10.16it/s]
 30%|       | 24/79 [00:02<00:04, 12.39it/s]
 34%|      | 27/79 [00:02<00:03, 14.71it/s]
 38%|      | 30/79 [00:02<00:02, 16.81it/s]
 42%|     | 33/79 [00:02<00:02, 18.60it/s]
 46%|     | 36/79 [00:02<00:02, 20.14it/s]
 49%|     | 39/79 [00:02<00:01, 21.34it/s]
 53%|    | 42/79 [00:02<00:01, 22.59it/s]
 57%|    | 45/79 [00:02<00:01, 23.12it/s]
 61%|    | 48/79 [00:03<00:01, 23.84it/s]
 65%|
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:21,  1.04s/it]
  5%|         | 4/79 [00:01<00:55,  1.35it/s]
  9%|         | 7/79 [00:01<00:38,  1.88it/s]
 13%|        | 10/79 [00:01<00:26,  2.60it/s]
 16%|        | 13/79 [00:01<00:18,  3.55it/s]
 20%|        | 16/79 [00:01<00:13,  4.78it/s]
 24%|       | 19/79 [00:01<00:09,  6.30it/s]
 28%|       | 22/79 [00:01<00:07,  8.08it/s]
 32%|      | 25/79 [00:02<00:05, 10.08it/s]
 35%|      | 28/79 [00:02<00:04, 12.20it/s]
 39%|      | 31/79 [00:02<00:03, 14.38it/s]
 43%|     | 34/79 [00:02<00:02, 16.25it/s]
 47%|     | 37/79 [00:02<00:02, 18.09it/s]
 51%|     | 40/79 [00:02<00:01, 19.61it/s]
 54%|    | 43/79 [00:02<00:01, 20.97it/s]
 58%|    | 46/79 [00:02<00:01, 21.87it/s]
 62%|   | 49/79 [00:03<00:01, 22.68it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:24,  1.08s/it]
  5%|         | 4/79 [00:01<00:57,  1.30it/s]
  9%|         | 7/79 [00:01<00:39,  1.81it/s]
 13%|        | 10/79 [00:01<00:27,  2.51it/s]
 16%|        | 13/79 [00:01<00:19,  3.44it/s]
 20%|        | 16/79 [00:01<00:13,  4.63it/s]
 24%|       | 19/79 [00:01<00:09,  6.13it/s]
 28%|       | 22/79 [00:01<00:07,  7.90it/s]
 32%|      | 25/79 [00:02<00:05,  9.93it/s]
 35%|      | 28/79 [00:02<00:04, 12.05it/s]
 39%|      | 31/79 [00:02<00:03, 14.19it/s]
 43%|     | 34/79 [00:02<00:02, 16.28it/s]
 47%|     | 37/79 [00:02<00:02, 17.98it/s]
 51%|     | 40/79 [00:02<00:02, 19.46it/s]
 54%|    | 43/79 [00:02<00:01, 20.69it/s]
 58%|    | 46/79 [00:02<00:01, 21.62it/s]
 62%|   | 49/79 [00:03<00:01, 22.43it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:29,  1.15s/it]
  5%|         | 4/79 [00:01<01:01,  1.23it/s]
  9%|         | 7/79 [00:01<00:41,  1.72it/s]
 13%|        | 10/79 [00:01<00:28,  2.38it/s]
 16%|        | 13/79 [00:01<00:20,  3.26it/s]
 20%|        | 16/79 [00:01<00:14,  4.41it/s]
 24%|       | 19/79 [00:01<00:10,  5.86it/s]
 28%|       | 22/79 [00:02<00:07,  7.57it/s]
 32%|      | 25/79 [00:02<00:05,  9.60it/s]
 35%|      | 28/79 [00:02<00:04, 11.74it/s]
 39%|      | 31/79 [00:02<00:03, 13.90it/s]
 43%|     | 34/79 [00:02<00:02, 16.00it/s]
 47%|     | 37/79 [00:02<00:02, 17.91it/s]
 51%|     | 40/79 [00:02<00:01, 19.61it/s]
 54%|    | 43/79 [00:02<00:01, 20.84it/s]
 58%|    | 46/79 [00:02<00:01, 21.95it/s]
 62%|   | 49/79 [00:03<00:01, 22.84it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:19,  1.01s/it]
  4%|         | 3/79 [00:01<00:57,  1.33it/s]
  8%|         | 6/79 [00:01<00:39,  1.86it/s]
 11%|        | 9/79 [00:01<00:27,  2.58it/s]
 15%|        | 12/79 [00:01<00:18,  3.53it/s]
 19%|        | 15/79 [00:01<00:13,  4.77it/s]
 23%|       | 18/79 [00:01<00:09,  6.29it/s]
 27%|       | 21/79 [00:01<00:07,  8.12it/s]
 30%|       | 24/79 [00:02<00:05, 10.19it/s]
 34%|      | 27/79 [00:02<00:04, 12.36it/s]
 38%|      | 30/79 [00:02<00:03, 14.56it/s]
 42%|     | 33/79 [00:02<00:02, 16.47it/s]
 46%|     | 36/79 [00:02<00:02, 18.44it/s]
 49%|     | 39/79 [00:02<00:01, 20.12it/s]
 53%|    | 42/79 [00:02<00:01, 21.33it/s]
 57%|    | 45/79 [00:02<00:01, 22.29it/s]
 61%|    | 48/79 [00:03<00:01, 22.98it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:25,  1.10s/it]
  5%|         | 4/79 [00:01<00:58,  1.28it/s]
  9%|         | 7/79 [00:01<00:40,  1.78it/s]
 13%|        | 10/79 [00:01<00:27,  2.47it/s]
 16%|        | 13/79 [00:01<00:19,  3.38it/s]
 20%|        | 16/79 [00:01<00:13,  4.57it/s]
 24%|       | 19/79 [00:01<00:09,  6.05it/s]
 28%|       | 22/79 [00:01<00:07,  7.79it/s]
 32%|      | 25/79 [00:02<00:05,  9.77it/s]
 35%|      | 28/79 [00:02<00:04, 11.90it/s]
 39%|      | 31/79 [00:02<00:03, 14.07it/s]
 43%|     | 34/79 [00:02<00:02, 16.07it/s]
 47%|     | 37/79 [00:02<00:02, 17.87it/s]
 51%|     | 40/79 [00:02<00:02, 19.44it/s]
 54%|    | 43/79 [00:02<00:01, 20.70it/s]
 58%|    | 46/79 [00:02<00:01, 21.49it/s]
 62%|   | 49/79 [00:03<00:01, 22.40it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:26,  1.12s/it]
  5%|         | 4/79 [00:01<00:59,  1.26it/s]
  9%|         | 7/79 [00:01<00:41,  1.76it/s]
 13%|        | 10/79 [00:01<00:28,  2.43it/s]
 16%|        | 13/79 [00:01<00:19,  3.33it/s]
 20%|        | 16/79 [00:01<00:14,  4.50it/s]
 24%|       | 19/79 [00:01<00:10,  5.94it/s]
 28%|       | 22/79 [00:02<00:07,  7.71it/s]
 32%|      | 25/79 [00:02<00:05,  9.69it/s]
 35%|      | 28/79 [00:02<00:04, 11.80it/s]
 39%|      | 31/79 [00:02<00:03, 13.97it/s]
 43%|     | 34/79 [00:02<00:02, 16.01it/s]
 47%|     | 37/79 [00:02<00:02, 17.74it/s]
 51%|     | 40/79 [00:02<00:02, 19.17it/s]
 54%|    | 43/79 [00:02<00:01, 20.46it/s]
 58%|    | 46/79 [00:02<00:01, 21.53it/s]
 62%|   | 49/79 [00:03<00:01, 22.35it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:30,  1.16s/it]
  4%|         | 3/79 [00:01<01:02,  1.21it/s]
  8%|         | 6/79 [00:01<00:43,  1.69it/s]
 11%|        | 9/79 [00:01<00:29,  2.35it/s]
 15%|        | 12/79 [00:01<00:20,  3.22it/s]
 19%|        | 15/79 [00:01<00:14,  4.35it/s]
 23%|       | 18/79 [00:01<00:10,  5.78it/s]
 27%|       | 21/79 [00:02<00:07,  7.50it/s]
 30%|       | 24/79 [00:02<00:05,  9.44it/s]
 34%|      | 27/79 [00:02<00:04, 11.52it/s]
 38%|      | 30/79 [00:02<00:03, 13.62it/s]
 42%|     | 33/79 [00:02<00:02, 15.67it/s]
 46%|     | 36/79 [00:02<00:02, 17.28it/s]
 49%|     | 39/79 [00:02<00:02, 18.80it/s]
 53%|    | 42/79 [00:02<00:01, 20.07it/s]
 57%|    | 45/79 [00:03<00:01, 21.16it/s]
 61%|    | 48/79 [00:03<00:01, 21.82it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:28,  1.14s/it]
  5%|         | 4/79 [00:01<01:00,  1.23it/s]
  9%|         | 7/79 [00:01<00:41,  1.73it/s]
 13%|        | 10/79 [00:01<00:28,  2.40it/s]
 16%|        | 13/79 [00:01<00:20,  3.28it/s]
 20%|        | 16/79 [00:01<00:14,  4.44it/s]
 24%|       | 19/79 [00:01<00:10,  5.87it/s]
 28%|       | 22/79 [00:02<00:07,  7.61it/s]
 32%|      | 25/79 [00:02<00:05,  9.53it/s]
 35%|      | 28/79 [00:02<00:04, 11.63it/s]
 39%|      | 31/79 [00:02<00:03, 13.74it/s]
 43%|     | 34/79 [00:02<00:02, 15.71it/s]
 47%|     | 37/79 [00:02<00:02, 17.66it/s]
 51%|     | 40/79 [00:02<00:02, 19.21it/s]
 54%|    | 43/79 [00:02<00:01, 20.35it/s]
 58%|    | 46/79 [00:03<00:01, 21.66it/s]
 62%|   | 49/79 [00:03<00:01, 22.41it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:34,  1.22s/it]
  5%|         | 4/79 [00:01<01:04,  1.16it/s]
  9%|         | 7/79 [00:01<00:44,  1.62it/s]
 13%|        | 10/79 [00:01<00:30,  2.25it/s]
 16%|        | 13/79 [00:01<00:21,  3.09it/s]
 20%|        | 16/79 [00:01<00:15,  4.19it/s]
 24%|       | 19/79 [00:01<00:10,  5.58it/s]
 28%|       | 22/79 [00:02<00:07,  7.26it/s]
 32%|      | 25/79 [00:02<00:05,  9.22it/s]
 35%|      | 28/79 [00:02<00:04, 11.30it/s]
 39%|      | 31/79 [00:02<00:03, 13.52it/s]
 43%|     | 34/79 [00:02<00:02, 15.73it/s]
 47%|     | 37/79 [00:02<00:02, 17.54it/s]
 51%|     | 40/79 [00:02<00:02, 19.20it/s]
 54%|    | 43/79 [00:02<00:01, 20.62it/s]
 58%|    | 46/79 [00:03<00:01, 21.44it/s]
 62%|   | 49/79 [00:03<00:01, 22.15it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:36,  1.23s/it]
  5%|         | 4/79 [00:01<01:05,  1.14it/s]
  9%|         | 7/79 [00:01<00:45,  1.60it/s]
 13%|        | 10/79 [00:01<00:31,  2.22it/s]
 16%|        | 13/79 [00:01<00:21,  3.05it/s]
 20%|        | 16/79 [00:01<00:15,  4.14it/s]
 24%|       | 19/79 [00:01<00:10,  5.52it/s]
 28%|       | 22/79 [00:02<00:07,  7.20it/s]
 32%|      | 25/79 [00:02<00:05,  9.13it/s]
 35%|      | 28/79 [00:02<00:04, 11.20it/s]
 39%|      | 31/79 [00:02<00:03, 13.40it/s]
 43%|     | 34/79 [00:02<00:02, 15.40it/s]
 47%|     | 37/79 [00:02<00:02, 17.43it/s]
 51%|     | 40/79 [00:02<00:02, 19.05it/s]
 54%|    | 43/79 [00:02<00:01, 20.33it/s]
 58%|    | 46/79 [00:03<00:01, 21.30it/s]
 62%|   | 49/79 [00:03<00:01, 22.35it/s]
 66%|   | 52/79 [00:03<00:01, 23.61it/s]
 70%|   | 55/79 [00:02<00:00, 24.08it/s]
 73%|  | 58/79 [00:03<00:00, 24.15it/s]
 77%|  | 61/79 [00:03<00:00, 24.56it/s]
 81%|  | 64/79 [00:03<00:00, 24.70it/s]
 85%| | 67/79 [00:03<00:00, 24.75it/s]
 89%| | 70/79 [00:03<00:00, 24.79it/s]
 92%|| 73/79 [00:03<00:00, 25.03it/s]
 96%|| 76/79 [00:03<00:00, 25.73it/s]
100%|| 79/79 [00:03<00:00, 26.59it/s]
85it/s]
 68%|   | 54/79 [00:02<00:01, 24.25it/s]
 72%|  | 57/79 [00:03<00:00, 24.44it/s]
 76%|  | 60/79 [00:03<00:00, 24.43it/s]
 80%|  | 63/79 [00:03<00:00, 24.62it/s]
 84%| | 66/79 [00:03<00:00, 24.76it/s]
 87%| | 69/79 [00:03<00:00, 24.96it/s]
 91%| | 72/79 [00:03<00:00, 24.67it/s]
 95%|| 75/79 [00:03<00:00, 25.34it/s]
 99%|| 78/79 [00:03<00:00, 25.85it/s]
100%|| 79/79 [00:03<00:00, 19.80it/s]
, 23.74it/s]
 70%|   | 55/79 [00:02<00:00, 24.07it/s]
 73%|  | 58/79 [00:03<00:00, 24.25it/s]
 77%|  | 61/79 [00:03<00:00, 24.02it/s]
 81%|  | 64/79 [00:03<00:00, 23.90it/s]
 85%| | 67/79 [00:03<00:00, 24.16it/s]
 89%| | 70/79 [00:03<00:00, 24.25it/s]
 92%|| 73/79 [00:03<00:00, 24.61it/s]
 96%|| 76/79 [00:03<00:00, 25.24it/s]
100%|| 79/79 [00:03<00:00, 26.17it/s]
, 24.16it/s]
 70%|   | 55/79 [00:03<00:00, 24.14it/s]
 73%|  | 58/79 [00:03<00:00, 24.03it/s]
 77%|  | 61/79 [00:03<00:00, 24.37it/s]
 81%|  | 64/79 [00:03<00:00, 24.49it/s]
 85%| | 67/79 [00:03<00:00, 24.75it/s]
 89%| | 70/79 [00:03<00:00, 24.80it/s]
 92%|| 73/79 [00:03<00:00, 25.06it/s]
 96%|| 76/79 [00:03<00:00, 25.57it/s]
100%|| 79/79 [00:03<00:00, 26.53it/s]
, 23.70it/s]
 70%|   | 55/79 [00:03<00:01, 23.87it/s]
 73%|  | 58/79 [00:03<00:00, 24.28it/s]
 77%|  | 61/79 [00:03<00:00, 24.53it/s]
 81%|  | 64/79 [00:03<00:00, 24.50it/s]
 85%| | 67/79 [00:03<00:00, 24.54it/s]
 89%| | 70/79 [00:03<00:00, 24.47it/s]
 92%|| 73/79 [00:03<00:00, 24.63it/s]
 96%|| 76/79 [00:03<00:00, 25.19it/s]
100%|| 79/79 [00:04<00:00, 25.98it/s]
, 23.64it/s]
 70%|   | 55/79 [00:03<00:00, 24.11it/s]
 73%|  | 58/79 [00:03<00:00, 24.29it/s]
 77%|  | 61/79 [00:03<00:00, 23.51it/s]
 81%|  | 64/79 [00:03<00:00, 23.77it/s]
 85%| | 67/79 [00:03<00:00, 24.07it/s]
 89%| | 70/79 [00:03<00:00, 24.18it/s]
 92%|| 73/79 [00:03<00:00, 24.81it/s]
 96%|| 76/79 [00:03<00:00, 25.52it/s]
100%|| 79/79 [00:04<00:00, 26.36it/s]
, 23.92it/s]
 70%|   | 55/79 [00:03<00:01, 23.68it/s]
 73%|  | 58/79 [00:03<00:00, 24.03it/s]
 77%|  | 61/79 [00:03<00:00, 24.37it/s]
 81%|  | 64/79 [00:03<00:00, 24.62it/s]
 85%| | 67/79 [00:03<00:00, 24.51it/s]
 89%| | 70/79 [00:03<00:00, 24.69it/s]
 92%|| 73/79 [00:03<00:00, 24.80it/s]
 96%|| 76/79 [00:03<00:00, 25.78it/s]
100%|| 79/79 [00:04<00:00, 26.02it/s]
, 23.00it/s]
 70%|   | 55/79 [00:03<00:01, 23.46it/s]
 73%|  | 58/79 [00:03<00:00, 23.69it/s]
 77%|  | 61/79 [00:03<00:00, 23.80it/s]
 81%|  | 64/79 [00:03<00:00, 24.01it/s]
 85%| | 67/79 [00:03<00:00, 23.99it/s]
 89%| | 70/79 [00:03<00:00, 24.05it/s]
 92%|| 73/79 [00:03<00:00, 24.61it/s]
 96%|| 76/79 [00:03<00:00, 25.20it/s]
100%|| 79/79 [00:04<00:00, 26.16it/s]
, 24.01it/s]
 70%|   | 55/79 [00:03<00:00, 24.41it/s]
 73%|  | 58/79 [00:03<00:00, 24.70it/s]
 77%|  | 61/79 [00:03<00:00, 24.85it/s]
 81%|  | 64/79 [00:03<00:00, 25.07it/s]
 85%| | 67/79 [00:03<00:00, 25.02it/s]
 89%| | 70/79 [00:03<00:00, 24.90it/s]
 92%|| 73/79 [00:03<00:00, 24.99it/s]
 96%|| 76/79 [00:03<00:00, 25.63it/s]
100%|| 79/79 [00:04<00:00, 26.43it/s]
, 22.99it/s]
 70%|   | 55/79 [00:03<00:01, 23.14it/s]
 73%|  | 58/79 [00:03<00:00, 23.47it/s]
 77%|  | 61/79 [00:03<00:00, 23.50it/s]
 81%|  | 64/79 [00:03<00:00, 23.71it/s]
 85%| | 67/79 [00:03<00:00, 23.96it/s]
 89%| | 70/79 [00:03<00:00, 23.89it/s]
 92%|| 73/79 [00:03<00:00, 24.11it/s]
 96%|| 76/79 [00:04<00:00, 24.96it/s]
100%|| 79/79 [00:04<00:00, 25.97it/s]
, 23.07it/s]
 70%|   | 55/79 [00:03<00:01, 23.54it/s]
 73%|  | 58/79 [00:03<00:00, 23.77it/s]
 77%|  | 61/79 [00:03<00:00, 23.74it/s]
 81%|  | 64/79 [00:03<00:00, 24.03it/s]
 85%| | 67/79 [00:03<00:00, 24.24it/s]
 89%| | 70/79 [00:03<00:00, 24.40it/s]
 92%|| 73/79 [00:03<00:00, 24.79it/s]
 96%|| 76/79 [00:04<00:00, 25.64it/s]
100%|| 79/79 [00:04<00:00, 26.58it/s]
, 23.73it/s]
 70%|   | 55/79 [00:03<00:00, 24.05it/s]
 73%|  | 58/79 [00:03<00:00, 24.21it/s]
 77%|  | 61/79 [00:03<00:00, 24.64it/s]
 81%|  | 64/79 [00:03<00:00, 24.77it/s]
 85%| | 67/79 [00:03<00:00, 24.87it/s]
 89%| | 70/79 [00:03<00:00, 24.78it/s]
 92%|| 73/79 [00:03<00:00, 25.12it/s]
 96%|| 76/79 [00:04<00:00, 25.62it/s]
100%|| 79/79 [00:04<00:00, 26.37it/s]
84it/s]
 68%|   | 54/79 [00:03<00:01, 23.13it/s]
 72%|  | 57/79 [00:03<00:00, 23.48it/s]
 76%|  | 60/79 [00:03<00:00, 23.75it/s]
 80%|  | 63/79 [00:03<00:00, 23.93it/s]
 84%| | 66/79 [00:03<00:00, 24.16it/s]
 87%| | 69/79 [00:03<00:00, 24.07it/s]
 91%| | 72/79 [00:03<00:00, 24.01it/s]
 95%|| 75/79 [00:04<00:00, 24.74it/s]
 99%|| 78/79 [00:04<00:00, 25.37it/s]
100%|| 79/79 [00:04<00:00, 18.63it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 23.96it/s]
 71%|   | 56/79 [00:03<00:00, 24.20it/s]
 75%|  | 59/79 [00:03<00:00, 24.46it/s]
 78%|  | 62/79 [00:03<00:00, 24.44it/s]
 82%| | 65/79 [00:03<00:00, 24.39it/s]
 86%| | 68/79 [00:03<00:00, 24.52it/s]
 90%| | 71/79 [00:03<00:00, 24.50it/s]
 94%|| 74/79 [00:03<00:00, 24.92it/s]
 97%|| 77/79 [00:04<00:00, 25.85it/s]
100%|| 79/79 [00:04<00:00, 18.70it/s]
, 23.04it/s]
 70%|   | 55/79 [00:03<00:01, 23.02it/s]
 73%|  | 58/79 [00:03<00:00, 23.47it/s]
 77%|  | 61/79 [00:03<00:00, 23.78it/s]
 81%|  | 64/79 [00:03<00:00, 24.08it/s]
 85%| | 67/79 [00:03<00:00, 24.11it/s]
 89%| | 70/79 [00:03<00:00, 24.29it/s]
 92%|| 73/79 [00:03<00:00, 24.58it/s]
 96%|| 76/79 [00:04<00:00, 25.29it/s]
100%|| 79/79 [00:04<00:00, 26.09it/s]
, 23.32it/s]
 70%|   | 55/79 [00:03<00:01, 23.68it/s]
 73%|  | 58/79 [00:03<00:00, 24.03it/s]
 77%|  | 61/79 [00:03<00:00, 24.09it/s]
 81%|  | 64/79 [00:03<00:00, 24.08it/s]
 85%| | 67/79 [00:03<00:00, 24.05it/s]
 89%| | 70/79 [00:03<00:00, 24.05it/s]
 92%|| 73/79 [00:04<00:00, 24.45it/s]
 96%|| 76/79 [00:04<00:00, 24.99it/s]
100%|| 79/79 [00:04<00:00, 26.03it/s]
, 22.98it/s]
 70%|   | 55/79 [00:03<00:01, 23.36it/s]
 73%|  | 58/79 [00:03<00:00, 23.60it/s]
 77%|  | 61/79 [00:03<00:00, 23.90it/s]
 81%|  | 64/79 [00:03<00:00, 23.99it/s]
 85%| | 67/79 [00:03<00:00, 24.30it/s]
 89%| | 70/79 [00:03<00:00, 24.47it/s]
 92%|| 73/79 [00:04<00:00, 24.84it/s]
 96%|| 76/79 [00:04<00:00, 25.52it/s]
100%|| 79/79 [00:04<00:00, 26.43it/s]
, 23.16it/s]
 70%|   | 55/79 [00:03<00:01, 23.38it/s]
 73%|  | 58/79 [00:03<00:00, 23.54it/s]
 77%|  | 61/79 [00:03<00:00, 23.72it/s]
 81%|  | 64/79 [00:03<00:00, 23.96it/s]
 85%| | 67/79 [00:03<00:00, 24.11it/s]
 89%| | 70/79 [00:03<00:00, 24.22it/s]
 92%|| 73/79 [00:04<00:00, 24.66it/s]
 96%|| 76/79 [00:04<00:00, 25.33it/s]
100%|| 79/79 [00:04<00:00, 26.20it/s]
01it/s]
 68%|   | 54/79 [00:03<00:01, 23.53it/s]
 72%|  | 57/79 [00:03<00:00, 23.89it/s]
 76%|  | 60/79 [00:03<00:00, 24.14it/s]
 80%|  | 63/79 [00:03<00:00, 24.69it/s]
 84%| | 66/79 [00:03<00:00, 24.78it/s]
 87%| | 69/79 [00:03<00:00, 24.72it/s]
 91%| | 72/79 [00:03<00:00, 24.90it/s]
 95%|| 75/79 [00:04<00:00, 25.23it/s]
 99%|| 78/79 [00:04<00:00, 25.54it/s]
100%|| 79/79 [00:04<00:00, 18.39it/s]
06it/s]
 68%|   | 54/79 [00:03<00:01, 23.52it/s]
 72%|  | 57/79 [00:03<00:00, 23.66it/s]
 76%|  | 60/79 [00:03<00:00, 23.53it/s]
 80%|  | 63/79 [00:03<00:00, 23.76it/s]
 84%| | 66/79 [00:03<00:00, 23.73it/s]
 87%| | 69/79 [00:03<00:00, 23.76it/s]
 91%| | 72/79 [00:03<00:00, 23.83it/s]
 95%|| 75/79 [00:04<00:00, 24.61it/s]
 99%|| 78/79 [00:04<00:00, 25.13it/s]
100%|| 79/79 [00:04<00:00, 18.27it/s]
, 23.49it/s]
 70%|   | 55/79 [00:03<00:01, 23.99it/s]
 73%|  | 58/79 [00:03<00:00, 24.33it/s]
 77%|  | 61/79 [00:03<00:00, 24.61it/s]
 81%|  | 64/79 [00:03<00:00, 24.74it/s]
 85%| | 67/79 [00:03<00:00, 24.58it/s]
 89%| | 70/79 [00:03<00:00, 24.37it/s]
 92%|| 73/79 [00:04<00:00, 24.87it/s]
 96%|| 76/79 [00:04<00:00, 25.32it/s]
100%|| 79/79 [00:04<00:00, 26.20it/s]
, 22.84it/s]
 70%|   | 55/79 [00:03<00:01, 23.36it/s]
 73%|  | 58/79 [00:03<00:00, 23.70it/s]
 77%|  | 61/79 [00:03<00:00, 23.96it/s]
 81%|  | 64/79 [00:03<00:00, 23.88it/s]
 85%| | 67/79 [00:03<00:00, 24.10it/s]
 89%| | 70/79 [00:03<00:00, 24.34it/s]
 92%|| 73/79 [00:04<00:00, 24.51it/s]
 96%|| 76/79 [00:04<00:00, 25.19it/s]
100%|| 79/79 [00:04<00:00, 26.24it/s]
   | 51/79 [00:03<00:01, 24.36it/s]
 68%|   | 54/79 [00:03<00:01, 24.39it/s]
 72%|  | 57/79 [00:03<00:00, 24.55it/s]
 76%|  | 60/79 [00:03<00:00, 24.90it/s]
 80%|  | 63/79 [00:03<00:00, 24.80it/s]
 84%| | 66/79 [00:03<00:00, 24.72it/s]
 87%| | 69/79 [00:03<00:00, 24.76it/s]
 91%| | 72/79 [00:03<00:00, 24.72it/s]
 95%|| 75/79 [00:04<00:00, 25.35it/s]
 99%|| 78/79 [00:04<00:00, 25.67it/s]
100%|| 79/79 [00:04<00:00, 18.26it/s]
, 22.86it/s]
 70%|   | 55/79 [00:03<00:01, 23.28it/s]
 73%|  | 58/79 [00:03<00:00, 23.65it/s]
 77%|  | 61/79 [00:03<00:00, 23.98it/s]
 81%|  | 64/79 [00:03<00:00, 23.94it/s]
 85%| | 67/79 [00:03<00:00, 24.16it/s]
 89%| | 70/79 [00:03<00:00, 24.20it/s]
 92%|| 73/79 [00:04<00:00, 24.56it/s]
 96%|| 76/79 [00:04<00:00, 25.27it/s]
100%|| 79/79 [00:04<00:00, 26.20it/s]
32it/s]
 68%|   | 54/79 [00:03<00:01, 23.89it/s]
 72%|  | 57/79 [00:03<00:00, 24.24it/s]
 76%|  | 60/79 [00:03<00:00, 24.33it/s]
 80%|  | 63/79 [00:03<00:00, 24.34it/s]
 84%| | 66/79 [00:03<00:00, 24.62it/s]
 87%| | 69/79 [00:03<00:00, 24.67it/s]
 91%| | 72/79 [00:04<00:00, 24.74it/s]
 95%|| 75/79 [00:04<00:00, 25.20it/s]
 99%|| 78/79 [00:04<00:00, 25.98it/s]
100%|| 79/79 [00:04<00:00, 18.10it/s]
49it/s]
 68%|   | 54/79 [00:03<00:01, 22.48it/s]
 72%|  | 57/79 [00:03<00:00, 22.84it/s]
 76%|  | 60/79 [00:03<00:00, 22.80it/s]
 80%|  | 63/79 [00:03<00:00, 23.08it/s]
 84%| | 66/79 [00:03<00:00, 23.25it/s]
 87%| | 69/79 [00:03<00:00, 23.16it/s]
 91%| | 72/79 [00:04<00:00, 23.32it/s]
 95%|| 75/79 [00:04<00:00, 24.24it/s]
 99%|| 78/79 [00:04<00:00, 25.06it/s]
100%|| 79/79 [00:04<00:00, 17.96it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 22.73it/s]
 71%|   | 56/79 [00:03<00:01, 22.98it/s]
 75%|  | 59/79 [00:03<00:00, 23.33it/s]
 78%|  | 62/79 [00:03<00:00, 23.40it/s]
 82%| | 65/79 [00:03<00:00, 23.67it/s]
 86%| | 68/79 [00:03<00:00, 24.08it/s]
 90%| | 71/79 [00:04<00:00, 24.40it/s]
 94%|| 74/79 [00:04<00:00, 24.99it/s]
 97%|| 77/79 [00:04<00:00, 25.63it/s]
100%|| 79/79 [00:04<00:00, 18.03it/s]
, 23.01it/s]
 70%|   | 55/79 [00:03<00:01, 23.41it/s]
 73%|  | 58/79 [00:03<00:00, 23.59it/s]
 77%|  | 61/79 [00:03<00:00, 23.74it/s]
 81%|  | 64/79 [00:03<00:00, 23.81it/s]
 85%| | 67/79 [00:03<00:00, 24.02it/s]
 89%| | 70/79 [00:03<00:00, 23.95it/s]
 92%|| 73/79 [00:04<00:00, 24.56it/s]
 96%|| 76/79 [00:04<00:00, 25.25it/s]
100%|| 79/79 [00:04<00:00, 26.25it/s]
, 22.64it/s]
 70%|   | 55/79 [00:03<00:01, 23.07it/s]
 73%|  | 58/79 [00:03<00:00, 23.48it/s]
 77%|  | 61/79 [00:03<00:00, 23.47it/s]
 81%|  | 64/79 [00:03<00:00, 23.72it/s]
 85%| | 67/79 [00:03<00:00, 23.73it/s]
 89%| | 70/79 [00:03<00:00, 24.05it/s]
 92%|| 73/79 [00:04<00:00, 24.26it/s]
 96%|| 76/79 [00:04<00:00, 25.00it/s]
100%|| 79/79 [00:04<00:00, 25.91it/s]
64it/s]
 68%|   | 54/79 [00:03<00:01, 23.15it/s]
 72%|  | 57/79 [00:03<00:00, 23.39it/s]
 76%|  | 60/79 [00:03<00:00, 23.69it/s]
 80%|  | 63/79 [00:03<00:00, 23.95it/s]
 84%| | 66/79 [00:03<00:00, 24.12it/s]
 87%| | 69/79 [00:03<00:00, 24.16it/s]
 91%| | 72/79 [00:04<00:00, 24.11it/s]
 95%|| 75/79 [00:04<00:00, 24.86it/s]
 99%|| 78/79 [00:04<00:00, 25.34it/s]
100%|| 79/79 [00:04<00:00, 17.75it/s]
, 22.59it/s]
 70%|   | 55/79 [00:03<00:01, 23.15it/s]
 73%|  | 58/79 [00:03<00:00, 23.42it/s]
 77%|  | 61/79 [00:03<00:00, 23.62it/s]
 81%|  | 64/79 [00:03<00:00, 23.89it/s]
 85%| | 67/79 [00:03<00:00, 24.19it/s]
 89%| | 70/79 [00:04<00:00, 24.33it/s]
 92%|| 73/79 [00:04<00:00, 24.42it/s]
 96%|| 76/79 [00:04<00:00, 25.02it/s]
100%|| 79/79 [00:04<00:00, 25.85it/s]
, 22.96it/s]
 70%|   | 55/79 [00:03<00:01, 23.50it/s]
 73%|  | 58/79 [00:03<00:00, 23.72it/s]
 77%|  | 61/79 [00:03<00:00, 23.76it/s]
 81%|  | 64/79 [00:03<00:00, 23.69it/s]
 85%| | 67/79 [00:03<00:00, 23.86it/s]
 89%| | 70/79 [00:04<00:00, 23.99it/s]
 92%|| 73/79 [00:04<00:00, 24.28it/s]
 96%|| 76/79 [00:04<00:00, 25.45it/s]
100%|| 79/79 [00:04<00:00, 25.90it/s]
2020-06-23 15:32:24,450 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.500440 (0.028802818298339843 s / img per device, on 32 devices)
2020-06-23 15:32:24,472 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:32:24,473 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:32:24,494 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592951557468, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 6, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592951557468, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 6}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 15:32:39,103 maskrcnn_benchmark.trainer INFO: eta: 1:16:18  iter: 4600  loss: 0.6539 (0.8409)  loss_classifier: 0.2214 (0.3152)  loss_box_reg: 0.1115 (0.1333)  loss_mask: 0.2757 (0.3276)  loss_objectness: 0.0191 (0.0431)  loss_rpn_box_reg: 0.0101 (0.0217)  time: 0.1098 (0.1293)  data: 0.0014 (0.0206)  lr: 0.160000  max mem: 5110
2020-06-23 15:32:41,287 maskrcnn_benchmark.trainer INFO: eta: 1:16:12  iter: 4620  loss: 0.7439 (0.8405)  loss_classifier: 0.2589 (0.3150)  loss_box_reg: 0.1148 (0.1333)  loss_mask: 0.2820 (0.3274)  loss_objectness: 0.0264 (0.0431)  loss_rpn_box_reg: 0.0118 (0.0217)  time: 0.1087 (0.1292)  data: 0.0014 (0.0205)  lr: 0.160000  max mem: 5110
2020-06-23 15:32:43,461 maskrcnn_benchmark.trainer INFO: eta: 1:16:07  iter: 4640  loss: 0.6667 (0.8397)  loss_classifier: 0.2350 (0.3147)  loss_box_reg: 0.1086 (0.1332)  loss_mask: 0.2662 (0.3272)  loss_objectness: 0.0193 (0.0430)  loss_rpn_box_reg: 0.0076 (0.0217)  time: 0.1083 (0.1292)  data: 0.0014 (0.0204)  lr: 0.160000  max mem: 5110
2020-06-23 15:32:45,653 maskrcnn_benchmark.trainer INFO: eta: 1:16:01  iter: 4660  loss: 0.5785 (0.8391)  loss_classifier: 0.2180 (0.3144)  loss_box_reg: 0.0982 (0.1330)  loss_mask: 0.2646 (0.3269)  loss_objectness: 0.0190 (0.0430)  loss_rpn_box_reg: 0.0094 (0.0217)  time: 0.1094 (0.1291)  data: 0.0014 (0.0203)  lr: 0.160000  max mem: 5110
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 15:32:47,829 maskrcnn_benchmark.trainer INFO: eta: 1:15:55  iter: 4680  loss: 0.6575 (0.8386)  loss_classifier: 0.2464 (0.3141)  loss_box_reg: 0.1060 (0.1330)  loss_mask: 0.2739 (0.3268)  loss_objectness: 0.0253 (0.0430)  loss_rpn_box_reg: 0.0089 (0.0217)  time: 0.1089 (0.1290)  data: 0.0014 (0.0203)  lr: 0.160000  max mem: 5110
DONE (t=1.10s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 15:32:50,001 maskrcnn_benchmark.trainer INFO: eta: 1:15:50  iter: 4700  loss: 0.6230 (0.8378)  loss_classifier: 0.2370 (0.3138)  loss_box_reg: 0.0899 (0.1328)  loss_mask: 0.2558 (0.3265)  loss_objectness: 0.0227 (0.0429)  loss_rpn_box_reg: 0.0083 (0.0217)  time: 0.1083 (0.1289)  data: 0.0014 (0.0202)  lr: 0.160000  max mem: 5110
DONE (t=2.09s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.26478
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.46404
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.27297
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15508
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.28893
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.33217
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25138
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.40998
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.43346
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.26217
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.46358
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.54413
2020-06-23 15:32:52,181 maskrcnn_benchmark.trainer INFO: eta: 1:15:44  iter: 4720  loss: 0.6635 (0.8371)  loss_classifier: 0.2346 (0.3135)  loss_box_reg: 0.1060 (0.1328)  loss_mask: 0.2865 (0.3263)  loss_objectness: 0.0243 (0.0429)  loss_rpn_box_reg: 0.0158 (0.0217)  time: 0.1089 (0.1288)  data: 0.0014 (0.0201)  lr: 0.160000  max mem: 5110
2020-06-23 15:32:54,340 maskrcnn_benchmark.trainer INFO: eta: 1:15:39  iter: 4740  loss: 0.6337 (0.8364)  loss_classifier: 0.2209 (0.3132)  loss_box_reg: 0.0862 (0.1327)  loss_mask: 0.2616 (0.3260)  loss_objectness: 0.0259 (0.0428)  loss_rpn_box_reg: 0.0095 (0.0217)  time: 0.1077 (0.1287)  data: 0.0015 (0.0200)  lr: 0.160000  max mem: 5110
2020-06-23 15:32:56,506 maskrcnn_benchmark.trainer INFO: eta: 1:15:33  iter: 4760  loss: 0.6278 (0.8356)  loss_classifier: 0.2234 (0.3129)  loss_box_reg: 0.1260 (0.1326)  loss_mask: 0.2725 (0.3258)  loss_objectness: 0.0200 (0.0428)  loss_rpn_box_reg: 0.0079 (0.0216)  time: 0.1076 (0.1286)  data: 0.0014 (0.0199)  lr: 0.160000  max mem: 5110
2020-06-23 15:32:58,700 maskrcnn_benchmark.trainer INFO: eta: 1:15:28  iter: 4780  loss: 0.6982 (0.8350)  loss_classifier: 0.2276 (0.3126)  loss_box_reg: 0.1096 (0.1325)  loss_mask: 0.2743 (0.3256)  loss_objectness: 0.0211 (0.0427)  loss_rpn_box_reg: 0.0102 (0.0216)  time: 0.1092 (0.1286)  data: 0.0014 (0.0199)  lr: 0.160000  max mem: 5110
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:33:00,867 maskrcnn_benchmark.trainer INFO: eta: 1:15:22  iter: 4800  loss: 0.6635 (0.8345)  loss_classifier: 0.2354 (0.3123)  loss_box_reg: 0.1001 (0.1324)  loss_mask: 0.2745 (0.3255)  loss_objectness: 0.0212 (0.0427)  loss_rpn_box_reg: 0.0079 (0.0216)  time: 0.1080 (0.1285)  data: 0.0014 (0.0198)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:03,056 maskrcnn_benchmark.trainer INFO: eta: 1:15:17  iter: 4820  loss: 0.7617 (0.8340)  loss_classifier: 0.2654 (0.3121)  loss_box_reg: 0.1306 (0.1324)  loss_mask: 0.2707 (0.3252)  loss_objectness: 0.0333 (0.0427)  loss_rpn_box_reg: 0.0075 (0.0216)  time: 0.1090 (0.1284)  data: 0.0014 (0.0197)  lr: 0.160000  max mem: 5110
DONE (t=3.03s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:33:05,236 maskrcnn_benchmark.trainer INFO: eta: 1:15:11  iter: 4840  loss: 0.7393 (0.8338)  loss_classifier: 0.2618 (0.3120)  loss_box_reg: 0.1285 (0.1323)  loss_mask: 0.2749 (0.3251)  loss_objectness: 0.0206 (0.0427)  loss_rpn_box_reg: 0.0138 (0.0216)  time: 0.1081 (0.1283)  data: 0.0015 (0.0196)  lr: 0.160000  max mem: 5110
DONE (t=3.65s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.25333
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.43766
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.26055
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11223
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.27640
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.37001
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.24651
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.38964
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.41035
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22748
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.45030
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.54242
2020-06-23 15:33:07,628 maskrcnn_benchmark.trainer INFO: eta: 1:15:07  iter: 4860  loss: 0.7594 (0.8335)  loss_classifier: 0.2750 (0.3119)  loss_box_reg: 0.1406 (0.1323)  loss_mask: 0.2872 (0.3249)  loss_objectness: 0.0240 (0.0427)  loss_rpn_box_reg: 0.0082 (0.0216)  time: 0.1090 (0.1283)  data: 0.0015 (0.0196)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:07,628 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.2647797783813037, segm mAP: 0.253330287464488
:::MLLOG {"namespace": "", "time_ms": 1592951587628, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.2647797783813037, "SEGM": 0.253330287464488}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1592951587629, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 5}}
2020-06-23 15:33:09,809 maskrcnn_benchmark.trainer INFO: eta: 1:15:02  iter: 4880  loss: 0.7301 (0.8331)  loss_classifier: 0.2478 (0.3117)  loss_box_reg: 0.1116 (0.1323)  loss_mask: 0.2792 (0.3248)  loss_objectness: 0.0328 (0.0427)  loss_rpn_box_reg: 0.0088 (0.0216)  time: 0.1086 (0.1282)  data: 0.0015 (0.0195)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:11,977 maskrcnn_benchmark.trainer INFO: eta: 1:14:57  iter: 4900  loss: 0.7295 (0.8327)  loss_classifier: 0.2636 (0.3116)  loss_box_reg: 0.1131 (0.1322)  loss_mask: 0.2922 (0.3246)  loss_objectness: 0.0225 (0.0427)  loss_rpn_box_reg: 0.0114 (0.0216)  time: 0.1083 (0.1281)  data: 0.0014 (0.0194)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:14,148 maskrcnn_benchmark.trainer INFO: eta: 1:14:51  iter: 4920  loss: 0.6856 (0.8322)  loss_classifier: 0.2475 (0.3113)  loss_box_reg: 0.1056 (0.1321)  loss_mask: 0.2816 (0.3244)  loss_objectness: 0.0170 (0.0427)  loss_rpn_box_reg: 0.0088 (0.0217)  time: 0.1079 (0.1280)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:16,313 maskrcnn_benchmark.trainer INFO: eta: 1:14:46  iter: 4940  loss: 0.6576 (0.8315)  loss_classifier: 0.2401 (0.3110)  loss_box_reg: 0.0968 (0.1320)  loss_mask: 0.2682 (0.3241)  loss_objectness: 0.0228 (0.0427)  loss_rpn_box_reg: 0.0078 (0.0216)  time: 0.1083 (0.1280)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:18,486 maskrcnn_benchmark.trainer INFO: eta: 1:14:41  iter: 4960  loss: 0.6202 (0.8311)  loss_classifier: 0.2288 (0.3109)  loss_box_reg: 0.1098 (0.1320)  loss_mask: 0.2630 (0.3240)  loss_objectness: 0.0278 (0.0427)  loss_rpn_box_reg: 0.0102 (0.0216)  time: 0.1087 (0.1279)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:20,663 maskrcnn_benchmark.trainer INFO: eta: 1:14:35  iter: 4980  loss: 0.6944 (0.8305)  loss_classifier: 0.2413 (0.3106)  loss_box_reg: 0.1079 (0.1319)  loss_mask: 0.2754 (0.3238)  loss_objectness: 0.0276 (0.0426)  loss_rpn_box_reg: 0.0064 (0.0216)  time: 0.1080 (0.1278)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:22,830 maskrcnn_benchmark.trainer INFO: eta: 1:14:30  iter: 5000  loss: 0.6213 (0.8297)  loss_classifier: 0.2115 (0.3103)  loss_box_reg: 0.0852 (0.1318)  loss_mask: 0.2741 (0.3236)  loss_objectness: 0.0246 (0.0425)  loss_rpn_box_reg: 0.0099 (0.0216)  time: 0.1075 (0.1277)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:25,000 maskrcnn_benchmark.trainer INFO: eta: 1:14:25  iter: 5020  loss: 0.7211 (0.8292)  loss_classifier: 0.2296 (0.3100)  loss_box_reg: 0.1119 (0.1317)  loss_mask: 0.2636 (0.3234)  loss_objectness: 0.0241 (0.0425)  loss_rpn_box_reg: 0.0096 (0.0216)  time: 0.1088 (0.1277)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:27,163 maskrcnn_benchmark.trainer INFO: eta: 1:14:20  iter: 5040  loss: 0.7644 (0.8289)  loss_classifier: 0.2480 (0.3098)  loss_box_reg: 0.1104 (0.1316)  loss_mask: 0.2772 (0.3233)  loss_objectness: 0.0315 (0.0426)  loss_rpn_box_reg: 0.0090 (0.0216)  time: 0.1075 (0.1276)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:29,310 maskrcnn_benchmark.trainer INFO: eta: 1:14:14  iter: 5060  loss: 0.6490 (0.8283)  loss_classifier: 0.2279 (0.3095)  loss_box_reg: 0.1037 (0.1315)  loss_mask: 0.2665 (0.3231)  loss_objectness: 0.0233 (0.0425)  loss_rpn_box_reg: 0.0125 (0.0216)  time: 0.1072 (0.1275)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:31,480 maskrcnn_benchmark.trainer INFO: eta: 1:14:09  iter: 5080  loss: 0.6375 (0.8276)  loss_classifier: 0.2274 (0.3092)  loss_box_reg: 0.0922 (0.1314)  loss_mask: 0.2494 (0.3229)  loss_objectness: 0.0198 (0.0425)  loss_rpn_box_reg: 0.0097 (0.0215)  time: 0.1086 (0.1274)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:33,640 maskrcnn_benchmark.trainer INFO: eta: 1:14:04  iter: 5100  loss: 0.6604 (0.8270)  loss_classifier: 0.2264 (0.3090)  loss_box_reg: 0.0899 (0.1313)  loss_mask: 0.2718 (0.3227)  loss_objectness: 0.0202 (0.0424)  loss_rpn_box_reg: 0.0082 (0.0215)  time: 0.1079 (0.1273)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:35,807 maskrcnn_benchmark.trainer INFO: eta: 1:13:59  iter: 5120  loss: 0.6592 (0.8264)  loss_classifier: 0.2147 (0.3087)  loss_box_reg: 0.0896 (0.1312)  loss_mask: 0.2859 (0.3226)  loss_objectness: 0.0176 (0.0424)  loss_rpn_box_reg: 0.0122 (0.0215)  time: 0.1076 (0.1273)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:37,969 maskrcnn_benchmark.trainer INFO: eta: 1:13:54  iter: 5140  loss: 0.7102 (0.8259)  loss_classifier: 0.2163 (0.3085)  loss_box_reg: 0.1210 (0.1311)  loss_mask: 0.2686 (0.3224)  loss_objectness: 0.0314 (0.0424)  loss_rpn_box_reg: 0.0132 (0.0215)  time: 0.1074 (0.1272)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:40,129 maskrcnn_benchmark.trainer INFO: eta: 1:13:49  iter: 5160  loss: 0.7099 (0.8255)  loss_classifier: 0.2575 (0.3083)  loss_box_reg: 0.1029 (0.1311)  loss_mask: 0.2791 (0.3222)  loss_objectness: 0.0338 (0.0424)  loss_rpn_box_reg: 0.0118 (0.0215)  time: 0.1075 (0.1271)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:42,321 maskrcnn_benchmark.trainer INFO: eta: 1:13:44  iter: 5180  loss: 0.5753 (0.8248)  loss_classifier: 0.1996 (0.3080)  loss_box_reg: 0.0971 (0.1310)  loss_mask: 0.2776 (0.3220)  loss_objectness: 0.0148 (0.0423)  loss_rpn_box_reg: 0.0074 (0.0215)  time: 0.1088 (0.1271)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:44,487 maskrcnn_benchmark.trainer INFO: eta: 1:13:39  iter: 5200  loss: 0.7341 (0.8244)  loss_classifier: 0.2724 (0.3078)  loss_box_reg: 0.1123 (0.1309)  loss_mask: 0.2869 (0.3219)  loss_objectness: 0.0238 (0.0423)  loss_rpn_box_reg: 0.0105 (0.0215)  time: 0.1083 (0.1270)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:46,689 maskrcnn_benchmark.trainer INFO: eta: 1:13:34  iter: 5220  loss: 0.6667 (0.8239)  loss_classifier: 0.2255 (0.3077)  loss_box_reg: 0.0982 (0.1308)  loss_mask: 0.2719 (0.3217)  loss_objectness: 0.0228 (0.0422)  loss_rpn_box_reg: 0.0079 (0.0215)  time: 0.1093 (0.1269)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:48,865 maskrcnn_benchmark.trainer INFO: eta: 1:13:29  iter: 5240  loss: 0.6875 (0.8233)  loss_classifier: 0.2670 (0.3075)  loss_box_reg: 0.0970 (0.1307)  loss_mask: 0.2640 (0.3215)  loss_objectness: 0.0182 (0.0422)  loss_rpn_box_reg: 0.0084 (0.0214)  time: 0.1080 (0.1269)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:51,035 maskrcnn_benchmark.trainer INFO: eta: 1:13:24  iter: 5260  loss: 0.6783 (0.8228)  loss_classifier: 0.2212 (0.3072)  loss_box_reg: 0.1117 (0.1307)  loss_mask: 0.2780 (0.3213)  loss_objectness: 0.0230 (0.0421)  loss_rpn_box_reg: 0.0116 (0.0214)  time: 0.1084 (0.1268)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:53,207 maskrcnn_benchmark.trainer INFO: eta: 1:13:19  iter: 5280  loss: 0.6713 (0.8220)  loss_classifier: 0.2477 (0.3069)  loss_box_reg: 0.0887 (0.1305)  loss_mask: 0.2550 (0.3211)  loss_objectness: 0.0107 (0.0421)  loss_rpn_box_reg: 0.0077 (0.0214)  time: 0.1078 (0.1267)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:55,402 maskrcnn_benchmark.trainer INFO: eta: 1:13:14  iter: 5300  loss: 0.6541 (0.8215)  loss_classifier: 0.2132 (0.3066)  loss_box_reg: 0.1116 (0.1305)  loss_mask: 0.2821 (0.3210)  loss_objectness: 0.0242 (0.0420)  loss_rpn_box_reg: 0.0117 (0.0214)  time: 0.1090 (0.1266)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:57,608 maskrcnn_benchmark.trainer INFO: eta: 1:13:10  iter: 5320  loss: 0.5929 (0.8210)  loss_classifier: 0.1869 (0.3063)  loss_box_reg: 0.0960 (0.1304)  loss_mask: 0.2832 (0.3208)  loss_objectness: 0.0200 (0.0420)  loss_rpn_box_reg: 0.0074 (0.0214)  time: 0.1089 (0.1266)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5110
2020-06-23 15:33:59,788 maskrcnn_benchmark.trainer INFO: eta: 1:13:05  iter: 5340  loss: 0.6975 (0.8206)  loss_classifier: 0.2487 (0.3061)  loss_box_reg: 0.1260 (0.1304)  loss_mask: 0.2881 (0.3207)  loss_objectness: 0.0258 (0.0419)  loss_rpn_box_reg: 0.0108 (0.0214)  time: 0.1082 (0.1265)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5110
2020-06-23 15:34:01,974 maskrcnn_benchmark.trainer INFO: eta: 1:13:00  iter: 5360  loss: 0.7214 (0.8201)  loss_classifier: 0.2423 (0.3059)  loss_box_reg: 0.1292 (0.1303)  loss_mask: 0.2678 (0.3205)  loss_objectness: 0.0231 (0.0419)  loss_rpn_box_reg: 0.0103 (0.0214)  time: 0.1088 (0.1265)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5110
2020-06-23 15:34:04,152 maskrcnn_benchmark.trainer INFO: eta: 1:12:55  iter: 5380  loss: 0.6476 (0.8196)  loss_classifier: 0.2299 (0.3057)  loss_box_reg: 0.1041 (0.1302)  loss_mask: 0.2665 (0.3203)  loss_objectness: 0.0275 (0.0419)  loss_rpn_box_reg: 0.0123 (0.0215)  time: 0.1084 (0.1264)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5110
2020-06-23 15:34:06,330 maskrcnn_benchmark.trainer INFO: eta: 1:12:50  iter: 5400  loss: 0.6503 (0.8194)  loss_classifier: 0.2445 (0.3056)  loss_box_reg: 0.1148 (0.1302)  loss_mask: 0.2701 (0.3202)  loss_objectness: 0.0329 (0.0419)  loss_rpn_box_reg: 0.0110 (0.0215)  time: 0.1086 (0.1263)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5110
2020-06-23 15:34:08,500 maskrcnn_benchmark.trainer INFO: eta: 1:12:46  iter: 5420  loss: 0.5692 (0.8186)  loss_classifier: 0.1956 (0.3052)  loss_box_reg: 0.0876 (0.1301)  loss_mask: 0.2735 (0.3200)  loss_objectness: 0.0204 (0.0418)  loss_rpn_box_reg: 0.0083 (0.0214)  time: 0.1079 (0.1263)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5110
2020-06-23 15:34:10,703 maskrcnn_benchmark.trainer INFO: eta: 1:12:41  iter: 5440  loss: 0.6440 (0.8181)  loss_classifier: 0.2258 (0.3050)  loss_box_reg: 0.1038 (0.1300)  loss_mask: 0.2707 (0.3198)  loss_objectness: 0.0283 (0.0418)  loss_rpn_box_reg: 0.0102 (0.0214)  time: 0.1098 (0.1262)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5110
2020-06-23 15:34:12,880 maskrcnn_benchmark.trainer INFO: eta: 1:12:36  iter: 5460  loss: 0.6804 (0.8177)  loss_classifier: 0.2404 (0.3048)  loss_box_reg: 0.1043 (0.1300)  loss_mask: 0.2651 (0.3197)  loss_objectness: 0.0201 (0.0418)  loss_rpn_box_reg: 0.0136 (0.0215)  time: 0.1085 (0.1261)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5110
2020-06-23 15:34:15,057 maskrcnn_benchmark.trainer INFO: eta: 1:12:32  iter: 5480  loss: 0.5668 (0.8170)  loss_classifier: 0.1768 (0.3044)  loss_box_reg: 0.0851 (0.1298)  loss_mask: 0.2777 (0.3196)  loss_objectness: 0.0230 (0.0418)  loss_rpn_box_reg: 0.0091 (0.0214)  time: 0.1089 (0.1261)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5110
2020-06-23 15:34:17,246 maskrcnn_benchmark.trainer INFO: eta: 1:12:27  iter: 5500  loss: 0.7108 (0.8165)  loss_classifier: 0.2449 (0.3042)  loss_box_reg: 0.1219 (0.1297)  loss_mask: 0.2836 (0.3195)  loss_objectness: 0.0182 (0.0417)  loss_rpn_box_reg: 0.0075 (0.0214)  time: 0.1088 (0.1260)  data: 0.0015 (0.0175)  lr: 0.160000  max mem: 5110
:::MLLOG {"namespace": "", "time_ms": 1592951658014, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 6}}
:::MLLOG {"namespace": "", "time_ms": 1592951658015, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 6}}
:::MLLOG {"namespace": "", "time_ms": 1592951658015, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 6}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 15:34:18,284 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 15:34:18,584 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.44it/s]
 20%|        | 16/79 [00:01<00:10,  5.91it/s]
 24%|       | 19/79 [00:01<00:07,  7.67it/s]
 28%|       | 22/79 [00:01<00:05,  9.69it/s]
 32%|      | 25/79 [00:01<00:04, 11.90it/s]
 35%|      | 28/79 [00:01<00:03, 14.19it/s]
 39%|      | 31/79 [00:02<00:02, 16.34it/s]
 43%|     | 34/79 [00:02<00:02, 18.34it/s]
 47%|     | 37/79 [00:02<00:02, 19.92it/s]
 51%|     | 40/79 [00:02<00:01, 21.35it/s]
 54%|    | 43/79 [00:02<00:01, 22.52it/s]
 58%|    | 46/79 [00:02<00:01, 23.36it/s]
 62%|   | 49/79 [00:02<00:01, 23.83it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.36it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.54it/s]
 32%|      | 25/79 [00:01<00:04, 11.74it/s]
 35%|      | 28/79 [00:01<00:03, 13.98it/s]
 39%|      | 31/79 [00:02<00:02, 16.11it/s]
 43%|     | 34/79 [00:02<00:02, 18.08it/s]
 47%|     | 37/79 [00:02<00:02, 19.83it/s]
 51%|     | 40/79 [00:02<00:01, 21.16it/s]
 54%|    | 43/79 [00:02<00:01, 22.28it/s]
 58%|    | 46/79 [00:02<00:01, 23.15it/s]
 62%|   | 49/79 [00:02<00:01, 23.84it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  4%|         | 3/79 [00:00<00:45,  1.66it/s]
  8%|         | 6/79 [00:01<00:31,  2.30it/s]
 11%|        | 9/79 [00:01<00:22,  3.16it/s]
 15%|        | 12/79 [00:01<00:15,  4.28it/s]
 19%|        | 15/79 [00:01<00:11,  5.71it/s]
 23%|       | 18/79 [00:01<00:08,  7.43it/s]
 27%|       | 21/79 [00:01<00:06,  9.39it/s]
 30%|       | 24/79 [00:01<00:04, 11.50it/s]
 34%|      | 27/79 [00:01<00:03, 13.81it/s]
 38%|      | 30/79 [00:02<00:03, 15.98it/s]
 42%|     | 33/79 [00:02<00:02, 17.90it/s]
 46%|     | 36/79 [00:02<00:02, 19.47it/s]
 49%|     | 39/79 [00:02<00:01, 20.77it/s]
 53%|    | 42/79 [00:02<00:01, 21.87it/s]
 57%|    | 45/79 [00:02<00:01, 22.68it/s]
 61%|    | 48/79 [00:02<00:01, 22.94it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.76it/s]
 24%|       | 19/79 [00:01<00:08,  7.48it/s]
 28%|       | 22/79 [00:01<00:06,  9.48it/s]
 32%|      | 25/79 [00:01<00:04, 11.62it/s]
 35%|      | 28/79 [00:01<00:03, 13.90it/s]
 39%|      | 31/79 [00:02<00:03, 15.93it/s]
 43%|     | 34/79 [00:02<00:02, 17.88it/s]
 47%|     | 37/79 [00:02<00:02, 19.45it/s]
 51%|     | 40/79 [00:02<00:01, 20.80it/s]
 54%|    | 43/79 [00:02<00:01, 21.82it/s]
 58%|    | 46/79 [00:02<00:01, 22.89it/s]
 62%|   | 49/79 [00:02<00:01, 23.43it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.36it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.57it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.78it/s]
 35%|      | 28/79 [00:01<00:03, 14.02it/s]
 39%|      | 31/79 [00:02<00:02, 16.20it/s]
 43%|     | 34/79 [00:02<00:02, 17.84it/s]
 47%|     | 37/79 [00:02<00:02, 19.40it/s]
 51%|     | 40/79 [00:02<00:01, 20.69it/s]
 54%|    | 43/79 [00:02<00:01, 21.66it/s]
 58%|    | 46/79 [00:02<00:01, 22.36it/s]
 62%|   | 49/79 [00:02<00:01, 22.90it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.76it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:05,  9.54it/s]
 32%|      | 25/79 [00:01<00:04, 11.65it/s]
 35%|      | 28/79 [00:01<00:03, 13.82it/s]
 39%|      | 31/79 [00:02<00:03, 15.98it/s]
 43%|     | 34/79 [00:02<00:02, 17.87it/s]
 47%|     | 37/79 [00:02<00:02, 19.57it/s]
 51%|     | 40/79 [00:02<00:01, 20.70it/s]
 54%|    | 43/79 [00:02<00:01, 21.53it/s]
 58%|    | 46/79 [00:02<00:01, 22.42it/s]
 62%|   | 49/79 [00:02<00:01, 22.93it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.23it/s]
 32%|      | 25/79 [00:01<00:04, 11.37it/s]
 35%|      | 28/79 [00:01<00:03, 13.62it/s]
 39%|      | 31/79 [00:02<00:03, 15.84it/s]
 43%|     | 34/79 [00:02<00:02, 17.91it/s]
 47%|     | 37/79 [00:02<00:02, 19.63it/s]
 51%|     | 40/79 [00:02<00:01, 21.03it/s]
 54%|    | 43/79 [00:02<00:01, 21.91it/s]
 58%|    | 46/79 [00:02<00:01, 22.60it/s]
 62%|   | 49/79 [00:02<00:01, 23.22it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  4%|         | 3/79 [00:00<00:46,  1.65it/s]
  8%|         | 6/79 [00:01<00:31,  2.29it/s]
 11%|        | 9/79 [00:01<00:22,  3.15it/s]
 15%|        | 12/79 [00:01<00:15,  4.27it/s]
 19%|        | 15/79 [00:01<00:11,  5.69it/s]
 23%|       | 18/79 [00:01<00:08,  7.41it/s]
 27%|       | 21/79 [00:01<00:06,  9.37it/s]
 30%|       | 24/79 [00:01<00:04, 11.54it/s]
 34%|      | 27/79 [00:01<00:03, 13.78it/s]
 38%|      | 30/79 [00:02<00:03, 15.83it/s]
 42%|     | 33/79 [00:02<00:02, 17.74it/s]
 46%|     | 36/79 [00:02<00:02, 19.26it/s]
 49%|     | 39/79 [00:02<00:01, 20.61it/s]
 53%|    | 42/79 [00:02<00:01, 21.62it/s]
 57%|    | 45/79 [00:02<00:01, 22.53it/s]
 61%|    | 48/79 [00:02<00:01, 23.10it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.21it/s]
 32%|      | 25/79 [00:01<00:04, 11.37it/s]
 35%|      | 28/79 [00:01<00:03, 13.60it/s]
 39%|      | 31/79 [00:02<00:03, 15.69it/s]
 43%|     | 34/79 [00:02<00:02, 17.77it/s]
 47%|     | 37/79 [00:02<00:02, 19.43it/s]
 51%|     | 40/79 [00:02<00:01, 20.73it/s]
 54%|    | 43/79 [00:02<00:01, 22.04it/s]
 58%|    | 46/79 [00:02<00:01, 22.77it/s]
 62%|   | 49/79 [00:02<00:01, 23.26it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  4%|         | 3/79 [00:00<00:46,  1.65it/s]
  8%|         | 6/79 [00:01<00:31,  2.29it/s]
 11%|        | 9/79 [00:01<00:22,  3.14it/s]
 15%|        | 12/79 [00:01<00:15,  4.25it/s]
 19%|        | 15/79 [00:01<00:11,  5.65it/s]
 23%|       | 18/79 [00:01<00:08,  7.35it/s]
 27%|       | 21/79 [00:01<00:06,  9.31it/s]
 30%|       | 24/79 [00:01<00:04, 11.40it/s]
 34%|      | 27/79 [00:01<00:03, 13.53it/s]
 38%|      | 30/79 [00:02<00:03, 15.65it/s]
 42%|     | 33/79 [00:02<00:02, 17.42it/s]
 46%|     | 36/79 [00:02<00:02, 19.07it/s]
 49%|     | 39/79 [00:02<00:01, 20.13it/s]
 53%|    | 42/79 [00:02<00:01, 21.12it/s]
 57%|    | 45/79 [00:02<00:01, 21.91it/s]
 61%|    | 48/79 [00:02<00:01, 22.56it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  4%|         | 3/79 [00:00<00:46,  1.62it/s]
  8%|         | 6/79 [00:01<00:32,  2.24it/s]
 11%|        | 9/79 [00:01<00:22,  3.08it/s]
 15%|        | 12/79 [00:01<00:16,  4.18it/s]
 19%|        | 15/79 [00:01<00:11,  5.56it/s]
 23%|       | 18/79 [00:01<00:08,  7.25it/s]
 27%|       | 21/79 [00:01<00:06,  9.17it/s]
 30%|       | 24/79 [00:01<00:04, 11.30it/s]
 34%|      | 27/79 [00:01<00:03, 13.53it/s]
 38%|      | 30/79 [00:02<00:03, 15.60it/s]
 42%|     | 33/79 [00:02<00:02, 17.53it/s]
 46%|     | 36/79 [00:02<00:02, 19.21it/s]
 49%|     | 39/79 [00:02<00:01, 20.28it/s]
 53%|    | 42/79 [00:02<00:01, 21.49it/s]
 57%|    | 45/79 [00:02<00:01, 22.14it/s]
 61%|    | 48/79 [00:02<00:01, 22.57it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  4%|         | 3/79 [00:00<00:48,  1.57it/s]
  8%|         | 6/79 [00:01<00:33,  2.19it/s]
 11%|        | 9/79 [00:01<00:23,  3.01it/s]
 15%|        | 12/79 [00:01<00:16,  4.08it/s]
 19%|        | 15/79 [00:01<00:11,  5.43it/s]
 23%|       | 18/79 [00:01<00:08,  7.10it/s]
 27%|       | 21/79 [00:01<00:06,  9.04it/s]
 30%|       | 24/79 [00:01<00:04, 11.19it/s]
 34%|      | 27/79 [00:01<00:03, 13.40it/s]
 38%|      | 30/79 [00:02<00:03, 15.61it/s]
 42%|     | 33/79 [00:02<00:02, 17.57it/s]
 46%|     | 36/79 [00:02<00:02, 19.26it/s]
 49%|     | 39/79 [00:02<00:01, 20.62it/s]
 53%|    | 42/79 [00:02<00:01, 21.81it/s]
 57%|    | 45/79 [00:02<00:01, 22.81it/s]
 61%|    | 48/79 [00:02<00:01, 23.18it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.21it/s]
 32%|      | 25/79 [00:01<00:04, 11.33it/s]
 35%|      | 28/79 [00:01<00:03, 13.54it/s]
 39%|      | 31/79 [00:02<00:03, 15.72it/s]
 43%|     | 34/79 [00:02<00:02, 17.59it/s]
 47%|     | 37/79 [00:02<00:02, 19.24it/s]
 51%|     | 40/79 [00:02<00:01, 20.66it/s]
 54%|    | 43/79 [00:02<00:01, 21.73it/s]
 58%|    | 46/79 [00:02<00:01, 22.28it/s]
 62%|   | 49/79 [00:02<00:01, 22.80it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  4%|         | 3/79 [00:00<00:47,  1.60it/s]
  8%|         | 6/79 [00:01<00:32,  2.22it/s]
 11%|        | 9/79 [00:01<00:22,  3.05it/s]
 15%|        | 12/79 [00:01<00:16,  4.15it/s]
 19%|        | 15/79 [00:01<00:11,  5.49it/s]
 23%|       | 18/79 [00:01<00:08,  7.16it/s]
 27%|       | 21/79 [00:01<00:06,  9.04it/s]
 30%|       | 24/79 [00:01<00:04, 11.22it/s]
 34%|      | 27/79 [00:01<00:03, 13.43it/s]
 38%|      | 30/79 [00:02<00:03, 15.52it/s]
 42%|     | 33/79 [00:02<00:02, 17.21it/s]
 46%|     | 36/79 [00:02<00:02, 18.91it/s]
 49%|     | 39/79 [00:02<00:01, 20.34it/s]
 53%|    | 42/79 [00:02<00:01, 21.32it/s]
 57%|    | 45/79 [00:02<00:01, 22.20it/s]
 61%|    | 48/79 [00:02<00:01, 22.97it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.23it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.28it/s]
 32%|      | 25/79 [00:01<00:04, 11.44it/s]
 35%|      | 28/79 [00:01<00:03, 13.63it/s]
 39%|      | 31/79 [00:02<00:03, 15.75it/s]
 43%|     | 34/79 [00:02<00:02, 17.51it/s]
 47%|     | 37/79 [00:02<00:02, 19.16it/s]
 51%|     | 40/79 [00:02<00:01, 20.49it/s]
 54%|    | 43/79 [00:02<00:01, 21.56it/s]
 58%|    | 46/79 [00:02<00:01, 22.32it/s]
 62%|   | 49/79 [00:02<00:01, 23.21it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.09it/s]
 32%|      | 25/79 [00:01<00:04, 11.22it/s]
 35%|      | 28/79 [00:01<00:03, 13.42it/s]
 39%|      | 31/79 [00:02<00:03, 15.63it/s]
 43%|     | 34/79 [00:02<00:02, 17.55it/s]
 47%|     | 37/79 [00:02<00:02, 19.05it/s]
 51%|     | 40/79 [00:02<00:01, 20.44it/s]
 54%|    | 43/79 [00:02<00:01, 21.46it/s]
 58%|    | 46/79 [00:02<00:01, 22.42it/s]
 62%|   | 49/79 [00:02<00:01, 22.88it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.05it/s]
 28%|       | 22/79 [00:01<00:06,  8.97it/s]
 32%|      | 25/79 [00:01<00:04, 11.02it/s]
 35%|      | 28/79 [00:02<00:03, 13.18it/s]
 39%|      | 31/79 [00:02<00:03, 15.24it/s]
 43%|     | 34/79 [00:02<00:02, 17.21it/s]
 47%|     | 37/79 [00:02<00:02, 18.86it/s]
 51%|     | 40/79 [00:02<00:01, 20.07it/s]
 54%|    | 43/79 [00:02<00:01, 21.20it/s]
 58%|    | 46/79 [00:02<00:01, 22.21it/s]
 62%|   | 49/79 [00:02<00:01, 22.95it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.92it/s]
 28%|       | 22/79 [00:01<00:06,  8.85it/s]
 32%|      | 25/79 [00:01<00:04, 10.99it/s]
 35%|      | 28/79 [00:02<00:03, 13.20it/s]
 39%|      | 31/79 [00:02<00:03, 15.51it/s]
 43%|     | 34/79 [00:02<00:02, 17.49it/s]
 47%|     | 37/79 [00:02<00:02, 19.27it/s]
 51%|     | 40/79 [00:02<00:01, 20.65it/s]
 54%|    | 43/79 [00:02<00:01, 21.80it/s]
 58%|    | 46/79 [00:02<00:01, 22.48it/s]
 62%|   | 49/79 [00:02<00:01, 23.24it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  4%|         | 3/79 [00:01<00:51,  1.49it/s]
  8%|         | 6/79 [00:01<00:35,  2.07it/s]
 11%|        | 9/79 [00:01<00:24,  2.85it/s]
 15%|        | 12/79 [00:01<00:17,  3.89it/s]
 19%|        | 15/79 [00:01<00:12,  5.22it/s]
 23%|       | 18/79 [00:01<00:08,  6.84it/s]
 27%|       | 21/79 [00:01<00:06,  8.72it/s]
 30%|       | 24/79 [00:01<00:05, 10.82it/s]
 34%|      | 27/79 [00:02<00:04, 12.90it/s]
 38%|      | 30/79 [00:02<00:03, 15.01it/s]
 42%|     | 33/79 [00:02<00:02, 16.95it/s]
 46%|     | 36/79 [00:02<00:02, 18.77it/s]
 49%|     | 39/79 [00:02<00:01, 20.34it/s]
 53%|    | 42/79 [00:02<00:01, 21.50it/s]
 57%|    | 45/79 [00:02<00:01, 22.44it/s]
 61%|    | 48/79 [00:02<00:01, 23.15it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.09it/s]
 28%|       | 22/79 [00:01<00:06,  9.03it/s]
 32%|      | 25/79 [00:01<00:04, 11.18it/s]
 35%|      | 28/79 [00:02<00:03, 13.29it/s]
 39%|      | 31/79 [00:02<00:03, 15.41it/s]
 43%|     | 34/79 [00:02<00:02, 17.30it/s]
 47%|     | 37/79 [00:02<00:02, 18.84it/s]
 51%|     | 40/79 [00:02<00:01, 20.13it/s]
 54%|    | 43/79 [00:02<00:01, 21.06it/s]
 58%|    | 46/79 [00:02<00:01, 21.86it/s]
 62%|   | 49/79 [00:02<00:01, 22.58it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.17it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.39it/s]
 39%|      | 31/79 [00:02<00:03, 15.45it/s]
 43%|     | 34/79 [00:02<00:02, 17.27it/s]
 47%|     | 37/79 [00:02<00:02, 18.73it/s]
 51%|     | 40/79 [00:02<00:01, 20.06it/s]
 54%|    | 43/79 [00:02<00:01, 21.10it/s]
 58%|    | 46/79 [00:02<00:01, 21.98it/s]
 62%|   | 49/79 [00:02<00:01, 22.74it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.18it/s]
 24%|       | 19/79 [00:01<00:08,  6.81it/s]
 28%|       | 22/79 [00:01<00:06,  8.71it/s]
 32%|      | 25/79 [00:01<00:05, 10.80it/s]
 35%|      | 28/79 [00:02<00:03, 13.01it/s]
 39%|      | 31/79 [00:02<00:03, 15.25it/s]
 43%|     | 34/79 [00:02<00:02, 17.07it/s]
 47%|     | 37/79 [00:02<00:02, 18.89it/s]
 51%|     | 40/79 [00:02<00:01, 20.15it/s]
 54%|    | 43/79 [00:02<00:01, 21.31it/s]
 58%|    | 46/79 [00:02<00:01, 22.06it/s]
 62%|   | 49/79 [00:02<00:01, 22.85it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.93it/s]
 28%|       | 22/79 [00:01<00:06,  8.88it/s]
 32%|      | 25/79 [00:01<00:04, 10.92it/s]
 35%|      | 28/79 [00:02<00:03, 13.14it/s]
 39%|      | 31/79 [00:02<00:03, 15.29it/s]
 43%|     | 34/79 [00:02<00:02, 17.30it/s]
 47%|     | 37/79 [00:02<00:02, 18.87it/s]
 51%|     | 40/79 [00:02<00:01, 20.21it/s]
 54%|    | 43/79 [00:02<00:01, 21.33it/s]
 58%|    | 46/79 [00:02<00:01, 22.16it/s]
 62%|   | 49/79 [00:02<00:01, 22.75it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:11,  5.26it/s]
 24%|       | 19/79 [00:01<00:08,  6.86it/s]
 28%|       | 22/79 [00:01<00:06,  8.78it/s]
 32%|      | 25/79 [00:01<00:04, 10.93it/s]
 35%|      | 28/79 [00:02<00:03, 13.13it/s]
 39%|      | 31/79 [00:02<00:03, 15.22it/s]
 43%|     | 34/79 [00:02<00:02, 17.29it/s]
 47%|     | 37/79 [00:02<00:02, 18.97it/s]
 51%|     | 40/79 [00:02<00:01, 20.38it/s]
 54%|    | 43/79 [00:02<00:01, 21.79it/s]
 58%|    | 46/79 [00:02<00:01, 22.40it/s]
 62%|   | 49/79 [00:02<00:01, 23.14it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.95it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.86it/s]
 32%|      | 25/79 [00:01<00:04, 11.02it/s]
 35%|      | 28/79 [00:02<00:03, 13.18it/s]
 39%|      | 31/79 [00:02<00:03, 15.42it/s]
 43%|     | 34/79 [00:02<00:02, 16.74it/s]
 47%|     | 37/79 [00:02<00:02, 18.67it/s]
 51%|     | 40/79 [00:02<00:01, 20.22it/s]
 54%|    | 43/79 [00:02<00:01, 21.58it/s]
 58%|    | 46/79 [00:02<00:01, 22.45it/s]
 62%|   | 49/79 [00:02<00:01, 23.21it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.86it/s]
 28%|       | 22/79 [00:01<00:06,  8.76it/s]
 32%|      | 25/79 [00:01<00:04, 10.86it/s]
 35%|      | 28/79 [00:02<00:03, 13.09it/s]
 39%|      | 31/79 [00:02<00:03, 15.25it/s]
 43%|     | 34/79 [00:02<00:02, 17.19it/s]
 47%|     | 37/79 [00:02<00:02, 18.81it/s]
 51%|     | 40/79 [00:02<00:01, 20.30it/s]
 54%|    | 43/79 [00:02<00:01, 21.60it/s]
 58%|    | 46/79 [00:02<00:01, 22.40it/s]
 62%|   | 49/79 [00:02<00:01, 23.26it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  4%|         | 3/79 [00:01<00:51,  1.48it/s]
  8%|         | 6/79 [00:01<00:35,  2.06it/s]
 11%|        | 9/79 [00:01<00:24,  2.84it/s]
 15%|        | 12/79 [00:01<00:17,  3.86it/s]
 19%|        | 15/79 [00:01<00:12,  5.17it/s]
 23%|       | 18/79 [00:01<00:09,  6.76it/s]
 27%|       | 21/79 [00:01<00:06,  8.67it/s]
 30%|       | 24/79 [00:01<00:05, 10.75it/s]
 34%|      | 27/79 [00:02<00:04, 12.84it/s]
 38%|      | 30/79 [00:02<00:03, 14.99it/s]
 42%|     | 33/79 [00:02<00:02, 17.02it/s]
 46%|     | 36/79 [00:02<00:02, 18.70it/s]
 49%|     | 39/79 [00:02<00:01, 20.12it/s]
 53%|    | 42/79 [00:02<00:01, 21.13it/s]
 57%|    | 45/79 [00:02<00:01, 22.23it/s]
 61%|    | 48/79 [00:02<00:01, 22.69it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.05it/s]
 32%|      | 25/79 [00:01<00:04, 11.19it/s]
 35%|      | 28/79 [00:02<00:03, 13.15it/s]
 39%|      | 31/79 [00:02<00:03, 15.26it/s]
 43%|     | 34/79 [00:02<00:02, 16.99it/s]
 47%|     | 37/79 [00:02<00:02, 18.66it/s]
 51%|     | 40/79 [00:02<00:01, 19.60it/s]
 54%|    | 43/79 [00:02<00:01, 20.70it/s]
 58%|    | 46/79 [00:02<00:01, 21.41it/s]
 62%|   | 49/79 [00:02<00:01, 22.08it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.93it/s]
 20%|        | 16/79 [00:01<00:12,  5.24it/s]
 24%|       | 19/79 [00:01<00:08,  6.86it/s]
 28%|       | 22/79 [00:01<00:06,  8.74it/s]
 32%|      | 25/79 [00:01<00:04, 10.86it/s]
 35%|      | 28/79 [00:02<00:03, 13.02it/s]
 39%|      | 31/79 [00:02<00:03, 15.24it/s]
 43%|     | 34/79 [00:02<00:02, 17.36it/s]
 47%|     | 37/79 [00:02<00:02, 19.06it/s]
 51%|     | 40/79 [00:02<00:01, 20.28it/s]
 54%|    | 43/79 [00:02<00:01, 21.25it/s]
 58%|    | 46/79 [00:02<00:01, 22.13it/s]
 62%|   | 49/79 [00:02<00:01, 23.00it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.16it/s]
 24%|       | 19/79 [00:01<00:08,  6.73it/s]
 28%|       | 22/79 [00:01<00:06,  8.62it/s]
 32%|      | 25/79 [00:01<00:05, 10.59it/s]
 35%|      | 28/79 [00:02<00:03, 12.75it/s]
 39%|      | 31/79 [00:02<00:03, 15.00it/s]
 43%|     | 34/79 [00:02<00:02, 17.02it/s]
 47%|     | 37/79 [00:02<00:02, 18.86it/s]
 51%|     | 40/79 [00:02<00:01, 20.09it/s]
 54%|    | 43/79 [00:02<00:01, 21.27it/s]
 58%|    | 46/79 [00:02<00:01, 21.66it/s]
 62%|   | 49/79 [00:02<00:01, 22.26it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.89it/s]
 20%|        | 16/79 [00:01<00:12,  5.18it/s]
 24%|       | 19/79 [00:01<00:08,  6.76it/s]
 28%|       | 22/79 [00:01<00:06,  8.63it/s]
 32%|      | 25/79 [00:01<00:05, 10.59it/s]
 35%|      | 28/79 [00:02<00:04, 12.73it/s]
 39%|      | 31/79 [00:02<00:03, 14.75it/s]
 43%|     | 34/79 [00:02<00:02, 16.74it/s]
 47%|     | 37/79 [00:02<00:02, 18.27it/s]
 51%|     | 40/79 [00:02<00:01, 19.60it/s]
 54%|    | 43/79 [00:02<00:01, 20.89it/s]
 58%|    | 46/79 [00:02<00:01, 21.39it/s]
 62%|   | 49/79 [00:02<00:01, 21.92it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  6.99it/s]
 28%|       | 22/79 [00:01<00:06,  8.92it/s]
 32%|      | 25/79 [00:01<00:04, 11.04it/s]
 35%|      | 28/79 [00:02<00:03, 13.23it/s]
 39%|      | 31/79 [00:02<00:03, 15.45it/s]
 43%|     | 34/79 [00:02<00:02, 17.45it/s]
 47%|     | 37/79 [00:02<00:02, 19.12it/s]
 51%|     | 40/79 [00:02<00:02, 18.55it/s]
 54%|    | 43/79 [00:02<00:02, 17.41it/s]
 58%|    | 46/79 [00:02<00:01, 19.23it/s]
 62%|   | 49/79 [00:03<00:01, 20.47it/s]
 66%|   | 52/79 [00:03<00:01, 24.17it/s]
 70%|   | 55/79 [00:02<00:00, 24.52it/s]
 73%|  | 58/79 [00:03<00:00, 24.67it/s]
 77%|  | 61/79 [00:03<00:00, 24.74it/s]
 81%|  | 64/79 [00:03<00:00, 24.47it/s]
 85%| | 67/79 [00:03<00:00, 24.63it/s]
 89%| | 70/79 [00:03<00:00, 24.70it/s]
 92%|| 73/79 [00:03<00:00, 25.01it/s]
 96%|| 76/79 [00:03<00:00, 25.64it/s]
100%|| 79/79 [00:03<00:00, 26.51it/s]
, 24.07it/s]
 70%|   | 55/79 [00:02<00:00, 24.61it/s]
 73%|  | 58/79 [00:03<00:00, 24.91it/s]
 77%|  | 61/79 [00:03<00:00, 25.09it/s]
 81%|  | 64/79 [00:03<00:00, 25.19it/s]
 85%| | 67/79 [00:03<00:00, 25.44it/s]
 89%| | 70/79 [00:03<00:00, 25.15it/s]
 92%|| 73/79 [00:03<00:00, 25.31it/s]
 96%|| 76/79 [00:03<00:00, 25.77it/s]
100%|| 79/79 [00:03<00:00, 26.55it/s]
, 23.78it/s]
 70%|   | 55/79 [00:03<00:00, 24.13it/s]
 73%|  | 58/79 [00:03<00:00, 24.26it/s]
 77%|  | 61/79 [00:03<00:00, 24.63it/s]
 81%|  | 64/79 [00:03<00:00, 24.66it/s]
 85%| | 67/79 [00:03<00:00, 24.79it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 25.22it/s]
 96%|| 76/79 [00:03<00:00, 25.87it/s]
100%|| 79/79 [00:03<00:00, 26.76it/s]
, 23.15it/s]
 70%|   | 55/79 [00:03<00:01, 23.43it/s]
 73%|  | 58/79 [00:03<00:00, 23.94it/s]
 77%|  | 61/79 [00:03<00:00, 24.16it/s]
 81%|  | 64/79 [00:03<00:00, 24.43it/s]
 85%| | 67/79 [00:03<00:00, 24.67it/s]
 89%| | 70/79 [00:03<00:00, 24.72it/s]
 92%|| 73/79 [00:03<00:00, 24.97it/s]
 96%|| 76/79 [00:03<00:00, 25.74it/s]
100%|| 79/79 [00:03<00:00, 26.51it/s]
37it/s]
 68%|   | 54/79 [00:03<00:01, 23.78it/s]
 72%|  | 57/79 [00:03<00:00, 23.92it/s]
 76%|  | 60/79 [00:03<00:00, 24.48it/s]
 80%|  | 63/79 [00:03<00:00, 24.31it/s]
 84%| | 66/79 [00:03<00:00, 24.79it/s]
 87%| | 69/79 [00:03<00:00, 24.74it/s]
 91%| | 72/79 [00:03<00:00, 24.68it/s]
 95%|| 75/79 [00:03<00:00, 25.16it/s]
 99%|| 78/79 [00:03<00:00, 25.69it/s]
100%|| 79/79 [00:04<00:00, 19.51it/s]
, 23.52it/s]
 70%|   | 55/79 [00:03<00:01, 23.66it/s]
 73%|  | 58/79 [00:03<00:00, 23.72it/s]
 77%|  | 61/79 [00:03<00:00, 24.20it/s]
 81%|  | 64/79 [00:03<00:00, 24.31it/s]
 85%| | 67/79 [00:03<00:00, 24.69it/s]
 89%| | 70/79 [00:03<00:00, 24.79it/s]
 92%|| 73/79 [00:03<00:00, 24.88it/s]
 96%|| 76/79 [00:03<00:00, 25.93it/s]
100%|| 79/79 [00:03<00:00, 26.15it/s]
, 23.68it/s]
 70%|   | 55/79 [00:03<00:01, 23.98it/s]
 73%|  | 58/79 [00:03<00:00, 24.30it/s]
 77%|  | 61/79 [00:03<00:00, 24.67it/s]
 81%|  | 64/79 [00:03<00:00, 24.69it/s]
 85%| | 67/79 [00:03<00:00, 24.81it/s]
 89%| | 70/79 [00:03<00:00, 24.97it/s]
 92%|| 73/79 [00:03<00:00, 25.15it/s]
 96%|| 76/79 [00:03<00:00, 25.68it/s]
100%|| 79/79 [00:03<00:00, 26.68it/s]
68it/s]
 68%|   | 54/79 [00:03<00:01, 24.05it/s]
 72%|  | 57/79 [00:03<00:00, 24.29it/s]
 76%|  | 60/79 [00:03<00:00, 24.65it/s]
 80%|  | 63/79 [00:03<00:00, 24.93it/s]
 84%| | 66/79 [00:03<00:00, 25.07it/s]
 87%| | 69/79 [00:03<00:00, 25.14it/s]
 91%| | 72/79 [00:03<00:00, 25.01it/s]
 95%|| 75/79 [00:03<00:00, 25.54it/s]
 99%|| 78/79 [00:03<00:00, 25.88it/s]
100%|| 79/79 [00:04<00:00, 19.50it/s]
, 23.14it/s]
 70%|   | 55/79 [00:03<00:01, 23.28it/s]
 73%|  | 58/79 [00:03<00:00, 23.45it/s]
 77%|  | 61/79 [00:03<00:00, 23.69it/s]
 81%|  | 64/79 [00:03<00:00, 23.82it/s]
 85%| | 67/79 [00:03<00:00, 23.98it/s]
 89%| | 70/79 [00:03<00:00, 24.08it/s]
 92%|| 73/79 [00:03<00:00, 24.46it/s]
 96%|| 76/79 [00:03<00:00, 25.17it/s]
100%|| 79/79 [00:03<00:00, 26.05it/s]
, 23.34it/s]
 70%|   | 55/79 [00:03<00:01, 23.52it/s]
 73%|  | 58/79 [00:03<00:00, 23.76it/s]
 77%|  | 61/79 [00:03<00:00, 23.78it/s]
 81%|  | 64/79 [00:03<00:00, 24.16it/s]
 85%| | 67/79 [00:03<00:00, 24.40it/s]
 89%| | 70/79 [00:03<00:00, 24.39it/s]
 92%|| 73/79 [00:03<00:00, 24.75it/s]
 96%|| 76/79 [00:03<00:00, 25.48it/s]
100%|| 79/79 [00:04<00:00, 26.42it/s]
00it/s]
 68%|   | 54/79 [00:03<00:01, 23.40it/s]
 72%|  | 57/79 [00:03<00:00, 23.91it/s]
 76%|  | 60/79 [00:03<00:00, 23.81it/s]
 80%|  | 63/79 [00:03<00:00, 24.09it/s]
 84%| | 66/79 [00:03<00:00, 24.08it/s]
 87%| | 69/79 [00:03<00:00, 24.63it/s]
 91%| | 72/79 [00:03<00:00, 24.53it/s]
 95%|| 75/79 [00:03<00:00, 25.31it/s]
 99%|| 78/79 [00:04<00:00, 25.97it/s]
100%|| 79/79 [00:04<00:00, 19.31it/s]
, 23.19it/s]
 70%|   | 55/79 [00:03<00:01, 23.34it/s]
 73%|  | 58/79 [00:03<00:00, 23.65it/s]
 77%|  | 61/79 [00:03<00:00, 23.89it/s]
 81%|  | 64/79 [00:03<00:00, 23.78it/s]
 85%| | 67/79 [00:03<00:00, 23.94it/s]
 89%| | 70/79 [00:03<00:00, 24.15it/s]
 92%|| 73/79 [00:03<00:00, 24.37it/s]
 96%|| 76/79 [00:03<00:00, 25.19it/s]
100%|| 79/79 [00:04<00:00, 26.24it/s]
, 23.32it/s]
 70%|   | 55/79 [00:03<00:01, 23.57it/s]
 73%|  | 58/79 [00:03<00:00, 23.78it/s]
 77%|  | 61/79 [00:03<00:00, 24.42it/s]
 81%|  | 64/79 [00:03<00:00, 24.51it/s]
 85%| | 67/79 [00:03<00:00, 24.53it/s]
 89%| | 70/79 [00:03<00:00, 24.20it/s]
 92%|| 73/79 [00:03<00:00, 24.91it/s]
 96%|| 76/79 [00:03<00:00, 25.48it/s]
100%|| 79/79 [00:04<00:00, 26.27it/s]
, 23.43it/s]
 70%|   | 55/79 [00:03<00:01, 23.92it/s]
 73%|  | 58/79 [00:03<00:00, 24.18it/s]
 77%|  | 61/79 [00:03<00:00, 24.41it/s]
 81%|  | 64/79 [00:03<00:00, 24.42it/s]
 85%| | 67/79 [00:03<00:00, 24.52it/s]
 89%| | 70/79 [00:03<00:00, 24.77it/s]
 92%|| 73/79 [00:03<00:00, 24.69it/s]
 96%|| 76/79 [00:03<00:00, 25.40it/s]
100%|| 79/79 [00:04<00:00, 26.27it/s]
, 23.33it/s]
 70%|   | 55/79 [00:03<00:01, 23.66it/s]
 73%|  | 58/79 [00:03<00:00, 23.64it/s]
 77%|  | 61/79 [00:03<00:00, 23.87it/s]
 81%|  | 64/79 [00:03<00:00, 23.86it/s]
 85%| | 67/79 [00:03<00:00, 23.99it/s]
 89%| | 70/79 [00:03<00:00, 24.06it/s]
 92%|| 73/79 [00:03<00:00, 24.35it/s]
 96%|| 76/79 [00:03<00:00, 24.91it/s]
100%|| 79/79 [00:04<00:00, 25.91it/s]
26it/s]
 68%|   | 54/79 [00:03<00:01, 23.67it/s]
 72%|  | 57/79 [00:03<00:00, 23.84it/s]
 76%|  | 60/79 [00:03<00:00, 23.80it/s]
 80%|  | 63/79 [00:03<00:00, 24.06it/s]
 84%| | 66/79 [00:03<00:00, 24.29it/s]
 87%| | 69/79 [00:03<00:00, 24.11it/s]
 91%| | 72/79 [00:03<00:00, 24.14it/s]
 95%|| 75/79 [00:03<00:00, 24.95it/s]
 99%|| 78/79 [00:04<00:00, 25.59it/s]
100%|| 79/79 [00:04<00:00, 19.21it/s]
, 23.43it/s]
 70%|   | 55/79 [00:03<00:01, 23.78it/s]
 73%|  | 58/79 [00:03<00:00, 24.06it/s]
 77%|  | 61/79 [00:03<00:00, 24.42it/s]
 81%|  | 64/79 [00:03<00:00, 24.58it/s]
 85%| | 67/79 [00:03<00:00, 24.99it/s]
 89%| | 70/79 [00:03<00:00, 25.23it/s]
 92%|| 73/79 [00:03<00:00, 25.48it/s]
 96%|| 76/79 [00:03<00:00, 25.92it/s]
100%|| 79/79 [00:04<00:00, 26.74it/s]
, 23.35it/s]
 70%|   | 55/79 [00:03<00:01, 23.82it/s]
 73%|  | 58/79 [00:03<00:00, 24.28it/s]
 77%|  | 61/79 [00:03<00:00, 24.69it/s]
 81%|  | 64/79 [00:03<00:00, 24.58it/s]
 85%| | 67/79 [00:03<00:00, 24.62it/s]
 89%| | 70/79 [00:03<00:00, 24.72it/s]
 92%|| 73/79 [00:03<00:00, 24.91it/s]
 96%|| 76/79 [00:03<00:00, 25.95it/s]
100%|| 79/79 [00:04<00:00, 26.28it/s]
, 23.37it/s]
 70%|   | 55/79 [00:03<00:01, 23.70it/s]
 73%|  | 58/79 [00:03<00:00, 24.26it/s]
 77%|  | 61/79 [00:03<00:00, 24.38it/s]
 81%|  | 64/79 [00:03<00:00, 24.51it/s]
 85%| | 67/79 [00:03<00:00, 24.73it/s]
 89%| | 70/79 [00:03<00:00, 24.63it/s]
 92%|| 73/79 [00:03<00:00, 24.68it/s]
 96%|| 76/79 [00:03<00:00, 25.27it/s]
100%|| 79/79 [00:04<00:00, 26.11it/s]
, 23.04it/s]
 70%|   | 55/79 [00:03<00:01, 23.23it/s]
 73%|  | 58/79 [00:03<00:00, 23.79it/s]
 77%|  | 61/79 [00:03<00:00, 23.92it/s]
 81%|  | 64/79 [00:03<00:00, 24.04it/s]
 85%| | 67/79 [00:03<00:00, 24.45it/s]
 89%| | 70/79 [00:03<00:00, 24.65it/s]
 92%|| 73/79 [00:03<00:00, 24.83it/s]
 96%|| 76/79 [00:03<00:00, 25.49it/s]
100%|| 79/79 [00:04<00:00, 26.33it/s]
66it/s]
 68%|   | 54/79 [00:03<00:01, 24.11it/s]
 72%|  | 57/79 [00:03<00:00, 24.37it/s]
 76%|  | 60/79 [00:03<00:00, 24.61it/s]
 80%|  | 63/79 [00:03<00:00, 24.64it/s]
 84%| | 66/79 [00:03<00:00, 24.66it/s]
 87%| | 69/79 [00:03<00:00, 24.01it/s]
 91%| | 72/79 [00:03<00:00, 24.21it/s]
 95%|| 75/79 [00:03<00:00, 24.89it/s]
 99%|| 78/79 [00:04<00:00, 25.53it/s]
100%|| 79/79 [00:04<00:00, 19.17it/s]
53it/s]
 68%|   | 54/79 [00:03<00:01, 23.01it/s]
 72%|  | 57/79 [00:03<00:00, 23.53it/s]
 76%|  | 60/79 [00:03<00:00, 23.71it/s]
 80%|  | 63/79 [00:03<00:00, 23.95it/s]
 84%| | 66/79 [00:03<00:00, 24.24it/s]
 87%| | 69/79 [00:03<00:00, 24.40it/s]
 91%| | 72/79 [00:03<00:00, 24.63it/s]
 95%|| 75/79 [00:03<00:00, 25.33it/s]
 99%|| 78/79 [00:04<00:00, 26.26it/s]
100%|| 79/79 [00:04<00:00, 19.16it/s]
, 23.58it/s]
 70%|   | 55/79 [00:03<00:01, 23.83it/s]
 73%|  | 58/79 [00:03<00:00, 24.02it/s]
 77%|  | 61/79 [00:03<00:00, 23.99it/s]
 81%|  | 64/79 [00:03<00:00, 24.22it/s]
 85%| | 67/79 [00:03<00:00, 24.07it/s]
 89%| | 70/79 [00:03<00:00, 24.20it/s]
 92%|| 73/79 [00:03<00:00, 24.51it/s]
 96%|| 76/79 [00:03<00:00, 25.20it/s]
100%|| 79/79 [00:04<00:00, 26.11it/s]
, 23.60it/s]
 70%|   | 55/79 [00:03<00:00, 24.07it/s]
 73%|  | 58/79 [00:03<00:00, 24.23it/s]
 77%|  | 61/79 [00:03<00:00, 24.03it/s]
 81%|  | 64/79 [00:03<00:00, 23.86it/s]
 85%| | 67/79 [00:03<00:00, 24.27it/s]
 89%| | 70/79 [00:03<00:00, 24.11it/s]
 92%|| 73/79 [00:03<00:00, 24.46it/s]
 96%|| 76/79 [00:03<00:00, 25.12it/s]
100%|| 79/79 [00:04<00:00, 25.97it/s]
, 23.45it/s]
 70%|   | 55/79 [00:03<00:01, 23.67it/s]
 73%|  | 58/79 [00:03<00:00, 24.05it/s]
 77%|  | 61/79 [00:03<00:00, 24.00it/s]
 81%|  | 64/79 [00:03<00:00, 23.93it/s]
 85%| | 67/79 [00:03<00:00, 23.82it/s]
 89%| | 70/79 [00:03<00:00, 24.14it/s]
 92%|| 73/79 [00:03<00:00, 24.20it/s]
 96%|| 76/79 [00:03<00:00, 25.07it/s]
100%|| 79/79 [00:04<00:00, 25.86it/s]
, 23.06it/s]
 70%|   | 55/79 [00:03<00:01, 23.40it/s]
 73%|  | 58/79 [00:03<00:00, 23.65it/s]
 77%|  | 61/79 [00:03<00:00, 24.01it/s]
 81%|  | 64/79 [00:03<00:00, 23.76it/s]
 85%| | 67/79 [00:03<00:00, 23.96it/s]
 89%| | 70/79 [00:03<00:00, 24.12it/s]
 92%|| 73/79 [00:03<00:00, 24.56it/s]
 96%|| 76/79 [00:03<00:00, 25.21it/s]
100%|| 79/79 [00:04<00:00, 26.05it/s]
, 22.54it/s]
 70%|   | 55/79 [00:03<00:01, 22.82it/s]
 73%|  | 58/79 [00:03<00:00, 23.37it/s]
 77%|  | 61/79 [00:03<00:00, 23.53it/s]
 81%|  | 64/79 [00:03<00:00, 23.65it/s]
 85%| | 67/79 [00:03<00:00, 23.71it/s]
 89%| | 70/79 [00:03<00:00, 23.90it/s]
 92%|| 73/79 [00:03<00:00, 23.83it/s]
 96%|| 76/79 [00:04<00:00, 24.84it/s]
100%|| 79/79 [00:04<00:00, 25.64it/s]
74it/s]
 68%|   | 54/79 [00:03<00:01, 24.35it/s]
 72%|  | 57/79 [00:03<00:00, 24.57it/s]
 76%|  | 60/79 [00:03<00:00, 24.78it/s]
 80%|  | 63/79 [00:03<00:00, 24.75it/s]
 84%| | 66/79 [00:03<00:00, 24.94it/s]
 87%| | 69/79 [00:03<00:00, 23.55it/s]
 91%| | 72/79 [00:03<00:00, 22.81it/s]
 95%|| 75/79 [00:03<00:00, 23.91it/s]
 99%|| 78/79 [00:04<00:00, 25.25it/s]
100%|| 79/79 [00:04<00:00, 18.72it/s]
78it/s]
 68%|   | 54/79 [00:03<00:01, 22.97it/s]
 72%|  | 57/79 [00:03<00:00, 22.76it/s]
 76%|  | 60/79 [00:03<00:00, 22.53it/s]
 80%|  | 63/79 [00:03<00:00, 22.90it/s]
 84%| | 66/79 [00:03<00:00, 23.05it/s]
 87%| | 69/79 [00:03<00:00, 23.41it/s]
 91%| | 72/79 [00:03<00:00, 23.78it/s]
 95%|| 75/79 [00:04<00:00, 24.57it/s]
 99%|| 78/79 [00:04<00:00, 25.40it/s]
100%|| 79/79 [00:04<00:00, 18.62it/s]
, 22.62it/s]
 70%|   | 55/79 [00:03<00:01, 23.19it/s]
 73%|  | 58/79 [00:03<00:00, 23.41it/s]
 77%|  | 61/79 [00:03<00:00, 23.24it/s]
 81%|  | 64/79 [00:03<00:00, 23.19it/s]
 85%| | 67/79 [00:03<00:00, 23.54it/s]
 89%| | 70/79 [00:03<00:00, 23.50it/s]
 92%|| 73/79 [00:03<00:00, 24.12it/s]
 96%|| 76/79 [00:04<00:00, 24.91it/s]
100%|| 79/79 [00:04<00:00, 25.90it/s]
, 22.35it/s]
 70%|   | 55/79 [00:03<00:01, 22.29it/s]
 73%|  | 58/79 [00:03<00:00, 22.86it/s]
 77%|  | 61/79 [00:03<00:00, 23.11it/s]
 81%|  | 64/79 [00:03<00:00, 23.40it/s]
 85%| | 67/79 [00:03<00:00, 23.58it/s]
 89%| | 70/79 [00:03<00:00, 23.48it/s]
 92%|| 73/79 [00:03<00:00, 24.01it/s]
 96%|| 76/79 [00:04<00:00, 24.80it/s]
100%|| 79/79 [00:04<00:00, 25.71it/s]
, 21.31it/s]
 70%|   | 55/79 [00:03<00:01, 22.04it/s]
 73%|  | 58/79 [00:03<00:00, 22.75it/s]
 77%|  | 61/79 [00:03<00:00, 23.10it/s]
 81%|  | 64/79 [00:03<00:00, 23.34it/s]
 85%| | 67/79 [00:03<00:00, 23.75it/s]
 89%| | 70/79 [00:03<00:00, 23.58it/s]
 92%|| 73/79 [00:03<00:00, 24.05it/s]
 96%|| 76/79 [00:04<00:00, 24.80it/s]
100%|| 79/79 [00:04<00:00, 25.92it/s]
2020-06-23 15:34:22,895 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.310746 (0.02758877410888672 s / img per device, on 32 devices)
2020-06-23 15:34:22,917 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:34:22,917 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:34:22,937 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592951674201, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 7, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592951674201, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 7}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 15:34:36,156 maskrcnn_benchmark.trainer INFO: eta: 1:14:07  iter: 5520  loss: 0.6858 (0.8161)  loss_classifier: 0.2487 (0.3040)  loss_box_reg: 0.1036 (0.1297)  loss_mask: 0.2721 (0.3193)  loss_objectness: 0.0274 (0.0417)  loss_rpn_box_reg: 0.0138 (0.0214)  time: 0.1085 (0.1290)  data: 0.0015 (0.0203)  lr: 0.160000  max mem: 5110
2020-06-23 15:34:38,360 maskrcnn_benchmark.trainer INFO: eta: 1:14:02  iter: 5540  loss: 0.6462 (0.8154)  loss_classifier: 0.2119 (0.3037)  loss_box_reg: 0.0900 (0.1296)  loss_mask: 0.2454 (0.3191)  loss_objectness: 0.0199 (0.0417)  loss_rpn_box_reg: 0.0090 (0.0214)  time: 0.1095 (0.1289)  data: 0.0014 (0.0203)  lr: 0.160000  max mem: 5110
2020-06-23 15:34:40,544 maskrcnn_benchmark.trainer INFO: eta: 1:13:57  iter: 5560  loss: 0.8028 (0.8152)  loss_classifier: 0.2657 (0.3036)  loss_box_reg: 0.1279 (0.1295)  loss_mask: 0.2868 (0.3189)  loss_objectness: 0.0222 (0.0417)  loss_rpn_box_reg: 0.0123 (0.0215)  time: 0.1088 (0.1288)  data: 0.0015 (0.0202)  lr: 0.160000  max mem: 5110
2020-06-23 15:34:42,718 maskrcnn_benchmark.trainer INFO: eta: 1:13:52  iter: 5580  loss: 0.5602 (0.8144)  loss_classifier: 0.1871 (0.3032)  loss_box_reg: 0.0782 (0.1294)  loss_mask: 0.2646 (0.3187)  loss_objectness: 0.0158 (0.0416)  loss_rpn_box_reg: 0.0072 (0.0214)  time: 0.1086 (0.1288)  data: 0.0014 (0.0201)  lr: 0.160000  max mem: 5110
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.97s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 15:34:44,886 maskrcnn_benchmark.trainer INFO: eta: 1:13:47  iter: 5600  loss: 0.6816 (0.8140)  loss_classifier: 0.2713 (0.3030)  loss_box_reg: 0.1223 (0.1294)  loss_mask: 0.2565 (0.3186)  loss_objectness: 0.0185 (0.0416)  loss_rpn_box_reg: 0.0103 (0.0214)  time: 0.1073 (0.1287)  data: 0.0014 (0.0201)  lr: 0.160000  max mem: 5110
DONE (t=1.93s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.27633
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.47287
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.29430
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15622
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.30197
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.34666
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25739
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.41704
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44135
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.26170
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47519
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.54163
2020-06-23 15:34:47,059 maskrcnn_benchmark.trainer INFO: eta: 1:13:42  iter: 5620  loss: 0.7086 (0.8135)  loss_classifier: 0.2022 (0.3027)  loss_box_reg: 0.1056 (0.1293)  loss_mask: 0.2662 (0.3184)  loss_objectness: 0.0268 (0.0416)  loss_rpn_box_reg: 0.0170 (0.0215)  time: 0.1082 (0.1286)  data: 0.0015 (0.0200)  lr: 0.160000  max mem: 5110
2020-06-23 15:34:49,236 maskrcnn_benchmark.trainer INFO: eta: 1:13:37  iter: 5640  loss: 0.6434 (0.8130)  loss_classifier: 0.2249 (0.3025)  loss_box_reg: 0.1060 (0.1292)  loss_mask: 0.2614 (0.3182)  loss_objectness: 0.0194 (0.0416)  loss_rpn_box_reg: 0.0068 (0.0215)  time: 0.1085 (0.1286)  data: 0.0014 (0.0199)  lr: 0.160000  max mem: 5110
2020-06-23 15:34:51,409 maskrcnn_benchmark.trainer INFO: eta: 1:13:32  iter: 5660  loss: 0.6454 (0.8126)  loss_classifier: 0.2456 (0.3023)  loss_box_reg: 0.1078 (0.1292)  loss_mask: 0.2623 (0.3181)  loss_objectness: 0.0224 (0.0416)  loss_rpn_box_reg: 0.0125 (0.0215)  time: 0.1086 (0.1285)  data: 0.0014 (0.0199)  lr: 0.160000  max mem: 5110
2020-06-23 15:34:53,563 maskrcnn_benchmark.trainer INFO: eta: 1:13:27  iter: 5680  loss: 0.6912 (0.8122)  loss_classifier: 0.2038 (0.3021)  loss_box_reg: 0.1078 (0.1291)  loss_mask: 0.2952 (0.3180)  loss_objectness: 0.0185 (0.0416)  loss_rpn_box_reg: 0.0107 (0.0214)  time: 0.1075 (0.1284)  data: 0.0014 (0.0198)  lr: 0.160000  max mem: 5110
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:34:55,745 maskrcnn_benchmark.trainer INFO: eta: 1:13:22  iter: 5700  loss: 0.6995 (0.8118)  loss_classifier: 0.2430 (0.3019)  loss_box_reg: 0.1063 (0.1291)  loss_mask: 0.2855 (0.3178)  loss_objectness: 0.0175 (0.0415)  loss_rpn_box_reg: 0.0114 (0.0214)  time: 0.1084 (0.1283)  data: 0.0014 (0.0197)  lr: 0.160000  max mem: 5110
DONE (t=2.42s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:34:57,902 maskrcnn_benchmark.trainer INFO: eta: 1:13:17  iter: 5720  loss: 0.5886 (0.8113)  loss_classifier: 0.1972 (0.3017)  loss_box_reg: 0.0781 (0.1290)  loss_mask: 0.2706 (0.3177)  loss_objectness: 0.0164 (0.0415)  loss_rpn_box_reg: 0.0102 (0.0214)  time: 0.1081 (0.1283)  data: 0.0014 (0.0197)  lr: 0.160000  max mem: 5110
DONE (t=3.07s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.26349
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.44403
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.27487
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11123
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.28900
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.38182
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.24952
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.39277
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.41403
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22625
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.45018
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.52690
2020-06-23 15:35:00,236 maskrcnn_benchmark.trainer INFO: eta: 1:13:13  iter: 5740  loss: 0.6427 (0.8110)  loss_classifier: 0.1766 (0.3015)  loss_box_reg: 0.1097 (0.1290)  loss_mask: 0.2800 (0.3176)  loss_objectness: 0.0220 (0.0414)  loss_rpn_box_reg: 0.0106 (0.0214)  time: 0.1077 (0.1282)  data: 0.0015 (0.0196)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:00,236 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.27633358069587927, segm mAP: 0.26348667229497486
:::MLLOG {"namespace": "", "time_ms": 1592951700237, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.27633358069587927, "SEGM": 0.26348667229497486}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 6}}
:::MLLOG {"namespace": "", "time_ms": 1592951700237, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 6}}
2020-06-23 15:35:02,407 maskrcnn_benchmark.trainer INFO: eta: 1:13:08  iter: 5760  loss: 0.7254 (0.8106)  loss_classifier: 0.2752 (0.3014)  loss_box_reg: 0.1209 (0.1289)  loss_mask: 0.2784 (0.3174)  loss_objectness: 0.0177 (0.0413)  loss_rpn_box_reg: 0.0106 (0.0214)  time: 0.1086 (0.1282)  data: 0.0015 (0.0195)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:04,592 maskrcnn_benchmark.trainer INFO: eta: 1:13:03  iter: 5780  loss: 0.5839 (0.8100)  loss_classifier: 0.1922 (0.3012)  loss_box_reg: 0.0922 (0.1288)  loss_mask: 0.2734 (0.3173)  loss_objectness: 0.0143 (0.0413)  loss_rpn_box_reg: 0.0077 (0.0214)  time: 0.1090 (0.1281)  data: 0.0014 (0.0195)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:06,760 maskrcnn_benchmark.trainer INFO: eta: 1:12:58  iter: 5800  loss: 0.7189 (0.8098)  loss_classifier: 0.2290 (0.3011)  loss_box_reg: 0.1289 (0.1288)  loss_mask: 0.2881 (0.3172)  loss_objectness: 0.0234 (0.0413)  loss_rpn_box_reg: 0.0136 (0.0214)  time: 0.1077 (0.1280)  data: 0.0015 (0.0194)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:08,915 maskrcnn_benchmark.trainer INFO: eta: 1:12:53  iter: 5820  loss: 0.7067 (0.8094)  loss_classifier: 0.2503 (0.3009)  loss_box_reg: 0.0971 (0.1287)  loss_mask: 0.2598 (0.3171)  loss_objectness: 0.0225 (0.0412)  loss_rpn_box_reg: 0.0073 (0.0214)  time: 0.1075 (0.1280)  data: 0.0014 (0.0194)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:11,084 maskrcnn_benchmark.trainer INFO: eta: 1:12:49  iter: 5840  loss: 0.7640 (0.8091)  loss_classifier: 0.2696 (0.3008)  loss_box_reg: 0.1135 (0.1287)  loss_mask: 0.2832 (0.3170)  loss_objectness: 0.0282 (0.0412)  loss_rpn_box_reg: 0.0120 (0.0214)  time: 0.1081 (0.1279)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:13,264 maskrcnn_benchmark.trainer INFO: eta: 1:12:44  iter: 5860  loss: 0.6421 (0.8088)  loss_classifier: 0.2085 (0.3006)  loss_box_reg: 0.0948 (0.1287)  loss_mask: 0.2725 (0.3168)  loss_objectness: 0.0194 (0.0413)  loss_rpn_box_reg: 0.0131 (0.0214)  time: 0.1080 (0.1278)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:15,443 maskrcnn_benchmark.trainer INFO: eta: 1:12:39  iter: 5880  loss: 0.5504 (0.8082)  loss_classifier: 0.2000 (0.3004)  loss_box_reg: 0.0743 (0.1286)  loss_mask: 0.2678 (0.3166)  loss_objectness: 0.0219 (0.0412)  loss_rpn_box_reg: 0.0127 (0.0214)  time: 0.1090 (0.1278)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:17,618 maskrcnn_benchmark.trainer INFO: eta: 1:12:34  iter: 5900  loss: 0.6763 (0.8075)  loss_classifier: 0.2349 (0.3001)  loss_box_reg: 0.1047 (0.1284)  loss_mask: 0.2588 (0.3164)  loss_objectness: 0.0201 (0.0412)  loss_rpn_box_reg: 0.0096 (0.0214)  time: 0.1085 (0.1277)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:19,790 maskrcnn_benchmark.trainer INFO: eta: 1:12:29  iter: 5920  loss: 0.6695 (0.8072)  loss_classifier: 0.2266 (0.3000)  loss_box_reg: 0.1051 (0.1284)  loss_mask: 0.2797 (0.3163)  loss_objectness: 0.0223 (0.0412)  loss_rpn_box_reg: 0.0123 (0.0214)  time: 0.1083 (0.1276)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:21,974 maskrcnn_benchmark.trainer INFO: eta: 1:12:25  iter: 5940  loss: 0.6701 (0.8069)  loss_classifier: 0.2486 (0.2998)  loss_box_reg: 0.1011 (0.1284)  loss_mask: 0.2765 (0.3162)  loss_objectness: 0.0211 (0.0411)  loss_rpn_box_reg: 0.0106 (0.0214)  time: 0.1091 (0.1276)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:24,152 maskrcnn_benchmark.trainer INFO: eta: 1:12:20  iter: 5960  loss: 0.5945 (0.8064)  loss_classifier: 0.2084 (0.2996)  loss_box_reg: 0.0933 (0.1283)  loss_mask: 0.2500 (0.3161)  loss_objectness: 0.0169 (0.0411)  loss_rpn_box_reg: 0.0062 (0.0214)  time: 0.1084 (0.1275)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:26,330 maskrcnn_benchmark.trainer INFO: eta: 1:12:15  iter: 5980  loss: 0.6819 (0.8060)  loss_classifier: 0.2393 (0.2994)  loss_box_reg: 0.1095 (0.1282)  loss_mask: 0.2666 (0.3159)  loss_objectness: 0.0269 (0.0411)  loss_rpn_box_reg: 0.0096 (0.0214)  time: 0.1084 (0.1275)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:28,515 maskrcnn_benchmark.trainer INFO: eta: 1:12:11  iter: 6000  loss: 0.6301 (0.8053)  loss_classifier: 0.2039 (0.2991)  loss_box_reg: 0.0969 (0.1281)  loss_mask: 0.2512 (0.3156)  loss_objectness: 0.0144 (0.0410)  loss_rpn_box_reg: 0.0075 (0.0214)  time: 0.1087 (0.1274)  data: 0.0013 (0.0188)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:30,680 maskrcnn_benchmark.trainer INFO: eta: 1:12:06  iter: 6020  loss: 0.6920 (0.8051)  loss_classifier: 0.2419 (0.2990)  loss_box_reg: 0.1163 (0.1281)  loss_mask: 0.2872 (0.3156)  loss_objectness: 0.0258 (0.0410)  loss_rpn_box_reg: 0.0143 (0.0214)  time: 0.1081 (0.1273)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:32,865 maskrcnn_benchmark.trainer INFO: eta: 1:12:02  iter: 6040  loss: 0.6222 (0.8047)  loss_classifier: 0.2474 (0.2988)  loss_box_reg: 0.1061 (0.1281)  loss_mask: 0.2690 (0.3154)  loss_objectness: 0.0240 (0.0410)  loss_rpn_box_reg: 0.0129 (0.0214)  time: 0.1085 (0.1273)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:35,034 maskrcnn_benchmark.trainer INFO: eta: 1:11:57  iter: 6060  loss: 0.6971 (0.8044)  loss_classifier: 0.2436 (0.2986)  loss_box_reg: 0.1037 (0.1280)  loss_mask: 0.2830 (0.3153)  loss_objectness: 0.0216 (0.0410)  loss_rpn_box_reg: 0.0136 (0.0214)  time: 0.1077 (0.1272)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:37,223 maskrcnn_benchmark.trainer INFO: eta: 1:11:52  iter: 6080  loss: 0.6894 (0.8038)  loss_classifier: 0.2305 (0.2984)  loss_box_reg: 0.0976 (0.1279)  loss_mask: 0.2865 (0.3152)  loss_objectness: 0.0187 (0.0409)  loss_rpn_box_reg: 0.0069 (0.0214)  time: 0.1087 (0.1271)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:39,400 maskrcnn_benchmark.trainer INFO: eta: 1:11:48  iter: 6100  loss: 0.6331 (0.8034)  loss_classifier: 0.2141 (0.2981)  loss_box_reg: 0.1024 (0.1278)  loss_mask: 0.2614 (0.3150)  loss_objectness: 0.0213 (0.0409)  loss_rpn_box_reg: 0.0129 (0.0214)  time: 0.1079 (0.1271)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:41,576 maskrcnn_benchmark.trainer INFO: eta: 1:11:43  iter: 6120  loss: 0.6425 (0.8028)  loss_classifier: 0.2321 (0.2979)  loss_box_reg: 0.1256 (0.1278)  loss_mask: 0.2678 (0.3149)  loss_objectness: 0.0217 (0.0409)  loss_rpn_box_reg: 0.0085 (0.0214)  time: 0.1091 (0.1270)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:43,754 maskrcnn_benchmark.trainer INFO: eta: 1:11:39  iter: 6140  loss: 0.7394 (0.8025)  loss_classifier: 0.2780 (0.2978)  loss_box_reg: 0.1205 (0.1277)  loss_mask: 0.2744 (0.3148)  loss_objectness: 0.0278 (0.0408)  loss_rpn_box_reg: 0.0094 (0.0214)  time: 0.1082 (0.1270)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:45,914 maskrcnn_benchmark.trainer INFO: eta: 1:11:34  iter: 6160  loss: 0.6529 (0.8021)  loss_classifier: 0.2410 (0.2976)  loss_box_reg: 0.1110 (0.1277)  loss_mask: 0.2826 (0.3146)  loss_objectness: 0.0211 (0.0408)  loss_rpn_box_reg: 0.0136 (0.0214)  time: 0.1077 (0.1269)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:48,104 maskrcnn_benchmark.trainer INFO: eta: 1:11:30  iter: 6180  loss: 0.7668 (0.8020)  loss_classifier: 0.2622 (0.2975)  loss_box_reg: 0.1296 (0.1277)  loss_mask: 0.2812 (0.3146)  loss_objectness: 0.0276 (0.0408)  loss_rpn_box_reg: 0.0106 (0.0214)  time: 0.1094 (0.1269)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:50,285 maskrcnn_benchmark.trainer INFO: eta: 1:11:25  iter: 6200  loss: 0.5862 (0.8014)  loss_classifier: 0.1880 (0.2973)  loss_box_reg: 0.0999 (0.1276)  loss_mask: 0.2530 (0.3143)  loss_objectness: 0.0175 (0.0408)  loss_rpn_box_reg: 0.0108 (0.0214)  time: 0.1090 (0.1268)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:52,464 maskrcnn_benchmark.trainer INFO: eta: 1:11:21  iter: 6220  loss: 0.7309 (0.8013)  loss_classifier: 0.2720 (0.2973)  loss_box_reg: 0.1313 (0.1276)  loss_mask: 0.2754 (0.3143)  loss_objectness: 0.0286 (0.0408)  loss_rpn_box_reg: 0.0171 (0.0214)  time: 0.1084 (0.1267)  data: 0.0015 (0.0182)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:54,630 maskrcnn_benchmark.trainer INFO: eta: 1:11:16  iter: 6240  loss: 0.6556 (0.8009)  loss_classifier: 0.2362 (0.2971)  loss_box_reg: 0.1086 (0.1276)  loss_mask: 0.2571 (0.3141)  loss_objectness: 0.0187 (0.0407)  loss_rpn_box_reg: 0.0080 (0.0214)  time: 0.1082 (0.1267)  data: 0.0015 (0.0182)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:56,792 maskrcnn_benchmark.trainer INFO: eta: 1:11:12  iter: 6260  loss: 0.7362 (0.8007)  loss_classifier: 0.2785 (0.2970)  loss_box_reg: 0.1172 (0.1276)  loss_mask: 0.2665 (0.3139)  loss_objectness: 0.0233 (0.0407)  loss_rpn_box_reg: 0.0130 (0.0214)  time: 0.1071 (0.1266)  data: 0.0015 (0.0181)  lr: 0.160000  max mem: 5110
2020-06-23 15:35:58,955 maskrcnn_benchmark.trainer INFO: eta: 1:11:07  iter: 6280  loss: 0.6059 (0.8002)  loss_classifier: 0.1994 (0.2968)  loss_box_reg: 0.0953 (0.1275)  loss_mask: 0.2632 (0.3138)  loss_objectness: 0.0173 (0.0407)  loss_rpn_box_reg: 0.0099 (0.0214)  time: 0.1071 (0.1266)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5110
2020-06-23 15:36:01,132 maskrcnn_benchmark.trainer INFO: eta: 1:11:03  iter: 6300  loss: 0.6311 (0.7997)  loss_classifier: 0.2386 (0.2966)  loss_box_reg: 0.0977 (0.1274)  loss_mask: 0.2765 (0.3137)  loss_objectness: 0.0207 (0.0407)  loss_rpn_box_reg: 0.0102 (0.0214)  time: 0.1089 (0.1265)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5110
2020-06-23 15:36:03,314 maskrcnn_benchmark.trainer INFO: eta: 1:10:58  iter: 6320  loss: 0.7165 (0.7995)  loss_classifier: 0.2645 (0.2965)  loss_box_reg: 0.1126 (0.1274)  loss_mask: 0.2921 (0.3136)  loss_objectness: 0.0238 (0.0406)  loss_rpn_box_reg: 0.0109 (0.0214)  time: 0.1085 (0.1264)  data: 0.0015 (0.0179)  lr: 0.160000  max mem: 5110
2020-06-23 15:36:05,491 maskrcnn_benchmark.trainer INFO: eta: 1:10:54  iter: 6340  loss: 0.5340 (0.7988)  loss_classifier: 0.1893 (0.2962)  loss_box_reg: 0.0830 (0.1273)  loss_mask: 0.2340 (0.3134)  loss_objectness: 0.0137 (0.0406)  loss_rpn_box_reg: 0.0066 (0.0214)  time: 0.1086 (0.1264)  data: 0.0013 (0.0179)  lr: 0.160000  max mem: 5110
2020-06-23 15:36:07,671 maskrcnn_benchmark.trainer INFO: eta: 1:10:50  iter: 6360  loss: 0.7231 (0.7986)  loss_classifier: 0.2370 (0.2961)  loss_box_reg: 0.1176 (0.1273)  loss_mask: 0.2864 (0.3133)  loss_objectness: 0.0304 (0.0405)  loss_rpn_box_reg: 0.0087 (0.0214)  time: 0.1087 (0.1263)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5110
2020-06-23 15:36:09,846 maskrcnn_benchmark.trainer INFO: eta: 1:10:45  iter: 6380  loss: 0.6318 (0.7983)  loss_classifier: 0.2148 (0.2961)  loss_box_reg: 0.0971 (0.1272)  loss_mask: 0.2816 (0.3132)  loss_objectness: 0.0209 (0.0405)  loss_rpn_box_reg: 0.0065 (0.0213)  time: 0.1076 (0.1263)  data: 0.0013 (0.0178)  lr: 0.160000  max mem: 5110
2020-06-23 15:36:12,007 maskrcnn_benchmark.trainer INFO: eta: 1:10:41  iter: 6400  loss: 0.6014 (0.7979)  loss_classifier: 0.2139 (0.2959)  loss_box_reg: 0.0929 (0.1271)  loss_mask: 0.2824 (0.3131)  loss_objectness: 0.0204 (0.0405)  loss_rpn_box_reg: 0.0124 (0.0213)  time: 0.1083 (0.1262)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5110
:::MLLOG {"namespace": "", "time_ms": 1592951774629, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1592951774629, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1592951774629, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 7}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 15:36:14,885 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
Done (t=0.28s)
creating index...
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
2020-06-23 15:36:15,187 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:56,  1.38it/s]
  5%|         | 4/79 [00:00<00:39,  1.91it/s]
  9%|         | 7/79 [00:00<00:27,  2.64it/s]
 13%|        | 10/79 [00:01<00:19,  3.61it/s]
 16%|        | 13/79 [00:01<00:13,  4.88it/s]
 20%|        | 16/79 [00:01<00:09,  6.42it/s]
 24%|       | 19/79 [00:01<00:07,  8.27it/s]
 28%|       | 22/79 [00:01<00:05, 10.35it/s]
 32%|      | 25/79 [00:01<00:04, 12.60it/s]
 35%|      | 28/79 [00:01<00:03, 14.84it/s]
 39%|      | 31/79 [00:01<00:02, 16.91it/s]
 43%|     | 34/79 [00:02<00:02, 18.82it/s]
 47%|     | 37/79 [00:02<00:02, 20.53it/s]
 51%|     | 40/79 [00:02<00:01, 21.40it/s]
 54%|    | 43/79 [00:02<00:01, 22.41it/s]
 58%|    | 46/79 [00:02<00:01, 23.08it/s]
 62%|   | 49/79 [00:02<00:01, 23.80it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.82it/s]
 24%|       | 19/79 [00:01<00:07,  7.56it/s]
 28%|       | 22/79 [00:01<00:05,  9.57it/s]
 32%|      | 25/79 [00:01<00:04, 11.77it/s]
 35%|      | 28/79 [00:01<00:03, 14.06it/s]
 39%|      | 31/79 [00:02<00:02, 16.25it/s]
 43%|     | 34/79 [00:02<00:02, 18.26it/s]
 47%|     | 37/79 [00:02<00:02, 19.93it/s]
 51%|     | 40/79 [00:02<00:01, 21.64it/s]
 54%|    | 43/79 [00:02<00:01, 22.25it/s]
 58%|    | 46/79 [00:02<00:01, 23.11it/s]
 62%|   | 49/79 [00:02<00:01, 23.70it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.43it/s]
 20%|        | 16/79 [00:01<00:10,  5.89it/s]
 24%|       | 19/79 [00:01<00:07,  7.66it/s]
 28%|       | 22/79 [00:01<00:05,  9.71it/s]
 32%|      | 25/79 [00:01<00:04, 11.95it/s]
 35%|      | 28/79 [00:01<00:03, 14.24it/s]
 39%|      | 31/79 [00:02<00:02, 16.49it/s]
 43%|     | 34/79 [00:02<00:02, 18.36it/s]
 47%|     | 37/79 [00:02<00:02, 20.14it/s]
 51%|     | 40/79 [00:02<00:01, 21.45it/s]
 54%|    | 43/79 [00:02<00:01, 22.46it/s]
 58%|    | 46/79 [00:02<00:01, 23.14it/s]
 62%|   | 49/79 [00:02<00:01, 23.74it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.64it/s]
 28%|       | 22/79 [00:01<00:05,  9.67it/s]
 32%|      | 25/79 [00:01<00:04, 11.81it/s]
 35%|      | 28/79 [00:01<00:03, 14.12it/s]
 39%|      | 31/79 [00:02<00:02, 16.25it/s]
 43%|     | 34/79 [00:02<00:02, 18.07it/s]
 47%|     | 37/79 [00:02<00:02, 19.59it/s]
 51%|     | 40/79 [00:02<00:01, 20.92it/s]
 54%|    | 43/79 [00:02<00:01, 21.93it/s]
 58%|    | 46/79 [00:02<00:01, 22.95it/s]
 62%|   | 49/79 [00:02<00:01, 23.56it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.69it/s]
 24%|       | 19/79 [00:01<00:08,  7.42it/s]
 28%|       | 22/79 [00:01<00:06,  9.40it/s]
 32%|      | 25/79 [00:01<00:04, 11.59it/s]
 35%|      | 28/79 [00:01<00:03, 13.77it/s]
 39%|      | 31/79 [00:02<00:03, 15.99it/s]
 43%|     | 34/79 [00:02<00:02, 18.03it/s]
 47%|     | 37/79 [00:02<00:02, 19.74it/s]
 51%|     | 40/79 [00:02<00:01, 20.86it/s]
 54%|    | 43/79 [00:02<00:01, 21.99it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.16it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.48it/s]
 35%|      | 28/79 [00:01<00:03, 13.72it/s]
 39%|      | 31/79 [00:02<00:03, 15.91it/s]
 43%|     | 34/79 [00:02<00:02, 17.68it/s]
 47%|     | 37/79 [00:02<00:02, 19.19it/s]
 51%|     | 40/79 [00:02<00:01, 20.70it/s]
 54%|    | 43/79 [00:02<00:01, 21.82it/s]
 58%|    | 46/79 [00:02<00:01, 22.39it/s]
 62%|   | 49/79 [00:02<00:01, 23.10it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.44it/s]
 20%|        | 16/79 [00:01<00:10,  5.89it/s]
 24%|       | 19/79 [00:01<00:07,  7.64it/s]
 28%|       | 22/79 [00:01<00:05,  9.66it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 13.88it/s]
 39%|      | 31/79 [00:02<00:03, 16.00it/s]
 43%|     | 34/79 [00:02<00:02, 17.90it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 20.68it/s]
 54%|    | 43/79 [00:02<00:01, 21.71it/s]
 58%|    | 46/79 [00:02<00:01, 22.56it/s]
 62%|   | 49/79 [00:02<00:01, 22.93it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.27it/s]
 32%|      | 25/79 [00:01<00:04, 11.46it/s]
 35%|      | 28/79 [00:01<00:03, 13.67it/s]
 39%|      | 31/79 [00:02<00:03, 15.97it/s]
 43%|     | 34/79 [00:02<00:02, 17.83it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 21.01it/s]
 54%|    | 43/79 [00:02<00:01, 22.20it/s]
 58%|    | 46/79 [00:02<00:01, 22.62it/s]
 62%|   | 49/79 [00:02<00:01, 23.44it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 28%|       | 22/79 [00:01<00:06,  9.16it/s]
 32%|      | 25/79 [00:01<00:04, 11.20it/s]
 35%|      | 28/79 [00:01<00:03, 13.38it/s]
 39%|      | 31/79 [00:02<00:03, 15.48it/s]
 43%|     | 34/79 [00:02<00:02, 17.45it/s]
 47%|     | 37/79 [00:02<00:02, 19.22it/s]
 51%|     | 40/79 [00:02<00:01, 20.66it/s]
 54%|    | 43/79 [00:02<00:01, 21.81it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.57it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.43it/s]
 20%|        | 16/79 [00:01<00:10,  5.89it/s]
 24%|       | 19/79 [00:01<00:07,  7.66it/s]
 28%|       | 22/79 [00:01<00:05,  9.70it/s]
 32%|      | 25/79 [00:01<00:04, 11.87it/s]
 35%|      | 28/79 [00:01<00:03, 14.14it/s]
 39%|      | 31/79 [00:02<00:03, 15.48it/s]
 43%|     | 34/79 [00:02<00:02, 17.46it/s]
 47%|     | 37/79 [00:02<00:02, 19.11it/s]
 51%|     | 40/79 [00:02<00:01, 20.51it/s]
 54%|    | 43/79 [00:02<00:01, 21.51it/s]
 58%|    | 46/79 [00:02<00:01, 22.48it/s]
 62%|   | 49/79 [00:02<00:01, 23.39it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:22,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.28it/s]
 32%|      | 25/79 [00:01<00:04, 11.11it/s]
 35%|      | 28/79 [00:01<00:03, 13.45it/s]
 39%|      | 31/79 [00:02<00:03, 15.60it/s]
 43%|     | 34/79 [00:02<00:02, 17.59it/s]
 47%|     | 37/79 [00:02<00:02, 19.28it/s]
 51%|     | 40/79 [00:02<00:01, 20.64it/s]
 54%|    | 43/79 [00:02<00:01, 21.78it/s]
 58%|    | 46/79 [00:02<00:01, 22.66it/s]
 62%|   | 49/79 [00:02<00:01, 23.32it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.92it/s]
 28%|       | 22/79 [00:01<00:06,  8.82it/s]
 32%|      | 25/79 [00:01<00:04, 11.01it/s]
 35%|      | 28/79 [00:02<00:03, 13.22it/s]
 39%|      | 31/79 [00:02<00:03, 15.51it/s]
 43%|     | 34/79 [00:02<00:02, 17.61it/s]
 47%|     | 37/79 [00:02<00:02, 19.38it/s]
 51%|     | 40/79 [00:02<00:01, 20.70it/s]
 54%|    | 43/79 [00:02<00:01, 21.81it/s]
 58%|    | 46/79 [00:02<00:01, 22.50it/s]
 62%|   | 49/79 [00:02<00:01, 22.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.17it/s]
 28%|       | 22/79 [00:01<00:06,  9.12it/s]
 32%|      | 25/79 [00:01<00:04, 11.30it/s]
 35%|      | 28/79 [00:01<00:03, 13.49it/s]
 39%|      | 31/79 [00:02<00:03, 15.61it/s]
 43%|     | 34/79 [00:02<00:02, 17.63it/s]
 47%|     | 37/79 [00:02<00:02, 19.27it/s]
 51%|     | 40/79 [00:02<00:01, 20.72it/s]
 54%|    | 43/79 [00:02<00:01, 21.26it/s]
 58%|    | 46/79 [00:02<00:01, 22.07it/s]
 62%|   | 49/79 [00:02<00:01, 23.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.93it/s]
 20%|        | 16/79 [00:01<00:11,  5.27it/s]
 24%|       | 19/79 [00:01<00:08,  6.91it/s]
 28%|       | 22/79 [00:01<00:06,  8.82it/s]
 32%|      | 25/79 [00:01<00:04, 10.96it/s]
 35%|      | 28/79 [00:02<00:03, 13.21it/s]
 39%|      | 31/79 [00:02<00:03, 15.41it/s]
 43%|     | 34/79 [00:02<00:02, 17.47it/s]
 47%|     | 37/79 [00:02<00:02, 19.30it/s]
 51%|     | 40/79 [00:02<00:01, 20.75it/s]
 54%|    | 43/79 [00:02<00:01, 21.94it/s]
 58%|    | 46/79 [00:02<00:01, 22.81it/s]
 62%|   | 49/79 [00:02<00:01, 23.51it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.28it/s]
 35%|      | 28/79 [00:01<00:03, 13.55it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.62it/s]
 47%|     | 37/79 [00:02<00:02, 19.27it/s]
 51%|     | 40/79 [00:02<00:01, 20.63it/s]
 54%|    | 43/79 [00:02<00:01, 21.77it/s]
 58%|    | 46/79 [00:02<00:01, 22.28it/s]
 62%|   | 49/79 [00:02<00:01, 22.92it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.06it/s]
 28%|       | 22/79 [00:01<00:06,  8.99it/s]
 32%|      | 25/79 [00:01<00:04, 11.09it/s]
 35%|      | 28/79 [00:02<00:03, 13.33it/s]
 39%|      | 31/79 [00:02<00:03, 15.51it/s]
 43%|     | 34/79 [00:02<00:02, 17.39it/s]
 47%|     | 37/79 [00:02<00:02, 19.10it/s]
 51%|     | 40/79 [00:02<00:01, 20.47it/s]
 54%|    | 43/79 [00:02<00:01, 21.56it/s]
 58%|    | 46/79 [00:02<00:01, 22.40it/s]
 62%|   | 49/79 [00:02<00:01, 22.75it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.86it/s]
 28%|       | 22/79 [00:01<00:06,  8.78it/s]
 32%|      | 25/79 [00:01<00:04, 10.92it/s]
 35%|      | 28/79 [00:02<00:03, 13.13it/s]
 39%|      | 31/79 [00:02<00:03, 15.40it/s]
 43%|     | 34/79 [00:02<00:02, 17.36it/s]
 47%|     | 37/79 [00:02<00:02, 19.19it/s]
 51%|     | 40/79 [00:02<00:01, 20.58it/s]
 54%|    | 43/79 [00:02<00:01, 21.62it/s]
 58%|    | 46/79 [00:02<00:01, 22.58it/s]
 62%|   | 49/79 [00:02<00:01, 23.06it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.30it/s]
 24%|       | 19/79 [00:01<00:08,  6.95it/s]
 28%|       | 22/79 [00:01<00:06,  8.83it/s]
 32%|      | 25/79 [00:01<00:04, 10.98it/s]
 35%|      | 28/79 [00:02<00:03, 13.17it/s]
 39%|      | 31/79 [00:02<00:03, 15.29it/s]
 43%|     | 34/79 [00:02<00:02, 17.25it/s]
 47%|     | 37/79 [00:02<00:02, 19.02it/s]
 51%|     | 40/79 [00:02<00:01, 20.37it/s]
 54%|    | 43/79 [00:02<00:01, 21.47it/s]
 58%|    | 46/79 [00:02<00:01, 22.56it/s]
 62%|   | 49/79 [00:02<00:01, 23.47it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.93it/s]
 28%|       | 22/79 [00:01<00:06,  8.87it/s]
 32%|      | 25/79 [00:01<00:04, 11.05it/s]
 35%|      | 28/79 [00:02<00:03, 13.21it/s]
 39%|      | 31/79 [00:02<00:03, 15.36it/s]
 43%|     | 34/79 [00:02<00:02, 17.34it/s]
 47%|     | 37/79 [00:02<00:02, 18.86it/s]
 51%|     | 40/79 [00:02<00:01, 20.31it/s]
 54%|    | 43/79 [00:02<00:01, 21.38it/s]
 58%|    | 46/79 [00:02<00:01, 22.50it/s]
 62%|   | 49/79 [00:02<00:01, 22.98it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.39it/s]
 24%|       | 19/79 [00:01<00:08,  7.08it/s]
 28%|       | 22/79 [00:01<00:06,  8.96it/s]
 32%|      | 25/79 [00:01<00:04, 11.06it/s]
 35%|      | 28/79 [00:02<00:03, 13.20it/s]
 39%|      | 31/79 [00:02<00:03, 15.14it/s]
 43%|     | 34/79 [00:02<00:02, 17.04it/s]
 47%|     | 37/79 [00:02<00:02, 18.71it/s]
 51%|     | 40/79 [00:02<00:01, 19.86it/s]
 54%|    | 43/79 [00:02<00:01, 21.26it/s]
 58%|    | 46/79 [00:02<00:01, 22.08it/s]
 62%|   | 49/79 [00:02<00:01, 22.63it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 11%|        | 9/79 [00:01<00:25,  2.77it/s]
 14%|        | 11/79 [00:01<00:18,  3.70it/s]
 18%|        | 14/79 [00:01<00:13,  4.99it/s]
 22%|       | 17/79 [00:01<00:09,  6.55it/s]
 25%|       | 20/79 [00:01<00:07,  8.39it/s]
 29%|       | 23/79 [00:01<00:05, 10.47it/s]
 33%|      | 26/79 [00:02<00:04, 12.69it/s]
 37%|      | 29/79 [00:02<00:03, 14.84it/s]
 41%|      | 32/79 [00:02<00:02, 16.75it/s]
 44%|     | 35/79 [00:02<00:02, 18.49it/s]
 48%|     | 38/79 [00:02<00:02, 19.97it/s]
 52%|    | 41/79 [00:02<00:01, 21.25it/s]
 56%|    | 44/79 [00:02<00:01, 21.84it/s]
 59%|    | 47/79 [00:02<00:01, 22.75it/s]
 63%|   | 50/79 [00:03<00:01, 23.28
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  8.96it/s]
 32%|      | 25/79 [00:01<00:04, 11.06it/s]
 35%|      | 28/79 [00:02<00:03, 13.25it/s]
 39%|      | 31/79 [00:02<00:03, 15.40it/s]
 43%|     | 34/79 [00:02<00:02, 17.39it/s]
 47%|     | 37/79 [00:02<00:02, 18.85it/s]
 51%|     | 40/79 [00:02<00:01, 20.22it/s]
 54%|    | 43/79 [00:02<00:01, 21.68it/s]
 58%|    | 46/79 [00:02<00:01, 22.34it/s]
 62%|   | 49/79 [00:02<00:01, 22.68it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.90it/s]
 32%|      | 25/79 [00:01<00:04, 11.00it/s]
 35%|      | 28/79 [00:02<00:04, 12.43it/s]
 39%|      | 31/79 [00:02<00:03, 14.60it/s]
 43%|     | 34/79 [00:02<00:02, 16.52it/s]
 47%|     | 37/79 [00:02<00:02, 18.49it/s]
 51%|     | 40/79 [00:02<00:01, 19.99it/s]
 54%|    | 43/79 [00:02<00:01, 21.24it/s]
 58%|    | 46/79 [00:02<00:01, 22.04it/s]
 62%|   | 49/79 [00:02<00:01, 22.78it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:16,  3.88it/s]
 20%|        | 16/79 [00:01<00:12,  5.20it/s]
 24%|       | 19/79 [00:01<00:08,  6.80it/s]
 28%|       | 22/79 [00:01<00:06,  8.71it/s]
 32%|      | 25/79 [00:01<00:05, 10.79it/s]
 35%|      | 28/79 [00:02<00:03, 12.99it/s]
 39%|      | 31/79 [00:02<00:03, 15.22it/s]
 43%|     | 34/79 [00:02<00:02, 17.09it/s]
 47%|     | 37/79 [00:02<00:02, 18.76it/s]
 51%|     | 40/79 [00:02<00:01, 20.20it/s]
 54%|    | 43/79 [00:02<00:01, 21.46it/s]
 58%|    | 46/79 [00:02<00:01, 22.32it/s]
 62%|   | 49/79 [00:02<00:01, 23.09it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:12,  5.25it/s]
 24%|       | 19/79 [00:01<00:08,  6.87it/s]
 28%|       | 22/79 [00:01<00:06,  8.81it/s]
 32%|      | 25/79 [00:01<00:04, 10.96it/s]
 35%|      | 28/79 [00:02<00:03, 13.12it/s]
 39%|      | 31/79 [00:02<00:03, 15.26it/s]
 43%|     | 34/79 [00:02<00:02, 17.14it/s]
 47%|     | 37/79 [00:02<00:02, 18.71it/s]
 51%|     | 40/79 [00:02<00:01, 20.05it/s]
 54%|    | 43/79 [00:02<00:01, 20.92it/s]
 58%|    | 46/79 [00:02<00:01, 22.10it/s]
 62%|   | 49/79 [00:02<00:01, 22.63it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.45it/s]
 24%|       | 19/79 [00:01<00:08,  7.09it/s]
 28%|       | 22/79 [00:01<00:06,  8.99it/s]
 32%|      | 25/79 [00:01<00:04, 11.06it/s]
 35%|      | 28/79 [00:02<00:03, 13.25it/s]
 39%|      | 31/79 [00:02<00:03, 15.32it/s]
 43%|     | 34/79 [00:02<00:02, 17.16it/s]
 47%|     | 37/79 [00:02<00:02, 18.72it/s]
 51%|     | 40/79 [00:02<00:01, 20.10it/s]
 54%|    | 43/79 [00:02<00:01, 21.23it/s]
 58%|    | 46/79 [00:02<00:01, 21.95it/s]
 62%|   | 49/79 [00:02<00:01, 22.61it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.79it/s]
 16%|        | 13/79 [00:01<00:17,  3.81it/s]
 20%|        | 16/79 [00:01<00:12,  5.09it/s]
 24%|       | 19/79 [00:01<00:09,  6.67it/s]
 28%|       | 22/79 [00:01<00:06,  8.53it/s]
 32%|      | 25/79 [00:01<00:05, 10.57it/s]
 35%|      | 28/79 [00:02<00:04, 12.69it/s]
 39%|      | 31/79 [00:02<00:03, 14.82it/s]
 43%|     | 34/79 [00:02<00:02, 16.62it/s]
 47%|     | 37/79 [00:02<00:02, 18.56it/s]
 51%|     | 40/79 [00:02<00:01, 19.97it/s]
 54%|    | 43/79 [00:02<00:01, 21.10it/s]
 58%|    | 46/79 [00:02<00:01, 21.84it/s]
 62%|   | 49/79 [00:02<00:01, 22.69it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.85it/s]
 20%|        | 16/79 [00:01<00:12,  5.15it/s]
 24%|       | 19/79 [00:01<00:08,  6.74it/s]
 28%|       | 22/79 [00:01<00:06,  8.63it/s]
 32%|      | 25/79 [00:01<00:05, 10.70it/s]
 35%|      | 28/79 [00:02<00:03, 12.79it/s]
 39%|      | 31/79 [00:02<00:03, 14.87it/s]
 43%|     | 34/79 [00:02<00:02, 16.85it/s]
 47%|     | 37/79 [00:02<00:02, 18.64it/s]
 51%|     | 40/79 [00:02<00:01, 20.07it/s]
 54%|    | 43/79 [00:02<00:01, 21.32it/s]
 58%|    | 46/79 [00:02<00:01, 22.19it/s]
 62%|   | 49/79 [00:02<00:01, 22.99it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.23it/s]
 24%|       | 19/79 [00:01<00:08,  6.82it/s]
 28%|       | 22/79 [00:01<00:06,  8.71it/s]
 32%|      | 25/79 [00:01<00:05, 10.79it/s]
 35%|      | 28/79 [00:02<00:03, 12.95it/s]
 39%|      | 31/79 [00:02<00:03, 15.06it/s]
 43%|     | 34/79 [00:02<00:02, 17.02it/s]
 47%|     | 37/79 [00:02<00:02, 18.78it/s]
 51%|     | 40/79 [00:02<00:01, 20.04it/s]
 54%|    | 43/79 [00:02<00:01, 20.96it/s]
 58%|    | 46/79 [00:02<00:01, 21.45it/s]
 62%|   | 49/79 [00:02<00:01, 22.00it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.82it/s]
 16%|        | 13/79 [00:01<00:17,  3.84it/s]
 20%|        | 16/79 [00:01<00:12,  5.14it/s]
 24%|       | 19/79 [00:01<00:08,  6.70it/s]
 28%|       | 22/79 [00:01<00:06,  8.58it/s]
 32%|      | 25/79 [00:01<00:05, 10.61it/s]
 35%|      | 28/79 [00:02<00:03, 12.79it/s]
 39%|      | 31/79 [00:02<00:03, 14.92it/s]
 43%|     | 34/79 [00:02<00:02, 16.88it/s]
 47%|     | 37/79 [00:02<00:02, 18.59it/s]
 51%|     | 40/79 [00:02<00:01, 20.02it/s]
 54%|    | 43/79 [00:02<00:01, 21.06it/s]
 58%|    | 46/79 [00:02<00:01, 22.03it/s]
 62%|   | 49/79 [00:02<00:01, 22.93it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:52,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.01it/s]
 13%|        | 10/79 [00:01<00:24,  2.78it/s]
 16%|        | 13/79 [00:01<00:17,  3.78it/s]
 20%|        | 16/79 [00:01<00:12,  5.07it/s]
 24%|       | 19/79 [00:01<00:08,  6.68it/s]
 28%|       | 22/79 [00:01<00:06,  8.56it/s]
 32%|      | 25/79 [00:01<00:05, 10.67it/s]
 35%|      | 28/79 [00:02<00:03, 12.82it/s]
 39%|      | 31/79 [00:02<00:03, 14.98it/s]
 43%|     | 34/79 [00:02<00:02, 16.91it/s]
 47%|     | 37/79 [00:02<00:02, 18.54it/s]
 51%|     | 40/79 [00:02<00:01, 20.01it/s]
 54%|    | 43/79 [00:02<00:01, 21.31it/s]
 58%|    | 46/79 [00:02<00:01, 22.33it/s]
 62%|   | 49/79 [00:02<00:01, 22.98it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:19,  1.02s/it]
  5%|         | 4/79 [00:01<00:54,  1.38it/s]
  9%|         | 7/79 [00:01<00:37,  1.93it/s]
 13%|        | 10/79 [00:01<00:25,  2.66it/s]
 16%|        | 13/79 [00:01<00:18,  3.64it/s]
 20%|        | 16/79 [00:01<00:12,  4.90it/s]
 24%|       | 19/79 [00:01<00:09,  6.45it/s]
 28%|       | 22/79 [00:01<00:06,  8.30it/s]
 32%|      | 25/79 [00:01<00:05, 10.36it/s]
 35%|      | 28/79 [00:02<00:04, 12.55it/s]
 39%|      | 31/79 [00:02<00:03, 14.70it/s]
 43%|     | 34/79 [00:02<00:02, 16.60it/s]
 47%|     | 37/79 [00:02<00:02, 18.49it/s]
 51%|     | 40/79 [00:02<00:01, 19.67it/s]
 54%|    | 43/79 [00:02<00:01, 20.92it/s]
 58%|    | 46/79 [00:02<00:01, 21.44it/s]
 62%|   | 49/79 [00:02<00:01, 22.14it/s]
 66%|   | 52/79 [00:03<00:01, 23.99it/s]
 70%|   | 55/79 [00:02<00:00, 24.19it/s]
 73%|  | 58/79 [00:03<00:00, 24.32it/s]
 77%|  | 61/79 [00:03<00:00, 24.51it/s]
 81%|  | 64/79 [00:03<00:00, 24.31it/s]
 85%| | 67/79 [00:03<00:00, 24.48it/s]
 89%| | 70/79 [00:03<00:00, 24.54it/s]
 92%|| 73/79 [00:03<00:00, 25.04it/s]
 96%|| 76/79 [00:03<00:00, 25.72it/s]
100%|| 79/79 [00:03<00:00, 26.56it/s]
, 24.06it/s]
 70%|   | 55/79 [00:02<00:00, 24.39it/s]
 73%|  | 58/79 [00:03<00:00, 24.39it/s]
 77%|  | 61/79 [00:03<00:00, 24.89it/s]
 81%|  | 64/79 [00:03<00:00, 25.00it/s]
 85%| | 67/79 [00:03<00:00, 25.33it/s]
 89%| | 70/79 [00:03<00:00, 25.35it/s]
 92%|| 73/79 [00:03<00:00, 25.47it/s]
 96%|| 76/79 [00:03<00:00, 26.44it/s]
100%|| 79/79 [00:03<00:00, 26.62it/s]
, 24.09it/s]
 70%|   | 55/79 [00:02<00:00, 24.59it/s]
 73%|  | 58/79 [00:03<00:00, 24.77it/s]
 77%|  | 61/79 [00:03<00:00, 24.92it/s]
 81%|  | 64/79 [00:03<00:00, 24.94it/s]
 85%| | 67/79 [00:03<00:00, 25.01it/s]
 89%| | 70/79 [00:03<00:00, 25.34it/s]
 92%|| 73/79 [00:03<00:00, 25.56it/s]
 96%|| 76/79 [00:03<00:00, 26.09it/s]
100%|| 79/79 [00:03<00:00, 26.80it/s]
, 23.89it/s]
 70%|   | 55/79 [00:02<00:00, 24.33it/s]
 73%|  | 58/79 [00:03<00:00, 24.46it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 25.14it/s]
 85%| | 67/79 [00:03<00:00, 25.19it/s]
 89%| | 70/79 [00:03<00:00, 25.37it/s]
 92%|| 73/79 [00:03<00:00, 25.74it/s]
 96%|| 76/79 [00:03<00:00, 26.29it/s]
100%|| 79/79 [00:03<00:00, 27.07it/s]
, 23.60it/s]
 70%|   | 55/79 [00:03<00:00, 24.24it/s]
 73%|  | 58/79 [00:03<00:00, 24.40it/s]
 77%|  | 61/79 [00:03<00:00, 24.62it/s]
 81%|  | 64/79 [00:03<00:00, 24.64it/s]
 85%| | 67/79 [00:03<00:00, 24.90it/s]
 89%| | 70/79 [00:03<00:00, 24.80it/s]
 92%|| 73/79 [00:03<00:00, 24.77it/s]
 96%|| 76/79 [00:03<00:00, 25.57it/s]
100%|| 79/79 [00:03<00:00, 26.42it/s]
, 23.66it/s]
 70%|   | 55/79 [00:03<00:00, 24.02it/s]
 73%|  | 58/79 [00:03<00:00, 24.53it/s]
 77%|  | 61/79 [00:03<00:00, 24.44it/s]
 81%|  | 64/79 [00:03<00:00, 24.63it/s]
 85%| | 67/79 [00:03<00:00, 24.62it/s]
 89%| | 70/79 [00:03<00:00, 24.64it/s]
 92%|| 73/79 [00:03<00:00, 25.02it/s]
 96%|| 76/79 [00:03<00:00, 25.57it/s]
100%|| 79/79 [00:03<00:00, 26.43it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:00, 24.28it/s]
 73%|  | 58/79 [00:03<00:00, 24.35it/s]
 77%|  | 61/79 [00:03<00:00, 24.78it/s]
 81%|  | 64/79 [00:03<00:00, 24.87it/s]
 85%| | 67/79 [00:03<00:00, 25.04it/s]
 89%| | 70/79 [00:03<00:00, 24.70it/s]
 92%|| 73/79 [00:03<00:00, 25.28it/s]
 96%|| 76/79 [00:03<00:00, 25.81it/s]
100%|| 79/79 [00:03<00:00, 26.64it/s]
, 23.74it/s]
 70%|   | 55/79 [00:03<00:00, 24.18it/s]
 73%|  | 58/79 [00:03<00:00, 24.39it/s]
 77%|  | 61/79 [00:03<00:00, 24.53it/s]
 81%|  | 64/79 [00:03<00:00, 24.40it/s]
 85%| | 67/79 [00:03<00:00, 24.68it/s]
 89%| | 70/79 [00:03<00:00, 24.78it/s]
 92%|| 73/79 [00:03<00:00, 25.06it/s]
 96%|| 76/79 [00:03<00:00, 25.67it/s]
100%|| 79/79 [00:03<00:00, 26.62it/s]
, 23.47it/s]
 70%|   | 55/79 [00:03<00:01, 23.72it/s]
 73%|  | 58/79 [00:03<00:00, 24.07it/s]
 77%|  | 61/79 [00:03<00:00, 24.22it/s]
 81%|  | 64/79 [00:03<00:00, 24.41it/s]
 85%| | 67/79 [00:03<00:00, 24.72it/s]
 89%| | 70/79 [00:03<00:00, 24.41it/s]
 92%|| 73/79 [00:03<00:00, 24.92it/s]
 96%|| 76/79 [00:03<00:00, 25.58it/s]
100%|| 79/79 [00:03<00:00, 26.47it/s]
, 23.89it/s]
 70%|   | 55/79 [00:03<00:00, 24.18it/s]
 73%|  | 58/79 [00:03<00:00, 24.33it/s]
 77%|  | 61/79 [00:03<00:00, 24.09it/s]
 81%|  | 64/79 [00:03<00:00, 24.42it/s]
 85%| | 67/79 [00:03<00:00, 24.31it/s]
 89%| | 70/79 [00:03<00:00, 24.86it/s]
 92%|| 73/79 [00:03<00:00, 25.02it/s]
 96%|| 76/79 [00:03<00:00, 25.90it/s]
100%|| 79/79 [00:03<00:00, 26.76it/s]
, 23.88it/s]
 70%|   | 55/79 [00:03<00:00, 24.53it/s]
 73%|  | 58/79 [00:03<00:00, 24.82it/s]
 77%|  | 61/79 [00:03<00:00, 24.94it/s]
 81%|  | 64/79 [00:03<00:00, 25.09it/s]
 85%| | 67/79 [00:03<00:00, 25.35it/s]
 89%| | 70/79 [00:03<00:00, 25.11it/s]
 92%|| 73/79 [00:03<00:00, 25.39it/s]
 96%|| 76/79 [00:03<00:00, 25.85it/s]
100%|| 79/79 [00:04<00:00, 26.57it/s]
, 24.11it/s]
 70%|   | 55/79 [00:03<00:00, 24.68it/s]
 73%|  | 58/79 [00:03<00:00, 24.93it/s]
 77%|  | 61/79 [00:03<00:00, 24.94it/s]
 81%|  | 64/79 [00:03<00:00, 25.07it/s]
 85%| | 67/79 [00:03<00:00, 25.20it/s]
 89%| | 70/79 [00:03<00:00, 25.15it/s]
 92%|| 73/79 [00:03<00:00, 25.47it/s]
 96%|| 76/79 [00:03<00:00, 26.00it/s]
100%|| 79/79 [00:03<00:00, 26.79it/s]
, 23.23it/s]
 70%|   | 55/79 [00:03<00:01, 23.70it/s]
 73%|  | 58/79 [00:03<00:00, 23.82it/s]
 77%|  | 61/79 [00:03<00:00, 24.07it/s]
 81%|  | 64/79 [00:03<00:00, 24.31it/s]
 85%| | 67/79 [00:03<00:00, 24.62it/s]
 89%| | 70/79 [00:03<00:00, 24.68it/s]
 92%|| 73/79 [00:03<00:00, 24.76it/s]
 96%|| 76/79 [00:03<00:00, 25.39it/s]
100%|| 79/79 [00:04<00:00, 26.09it/s]
, 23.51it/s]
 70%|   | 55/79 [00:03<00:01, 23.66it/s]
 73%|  | 58/79 [00:03<00:00, 24.10it/s]
 77%|  | 61/79 [00:03<00:00, 24.33it/s]
 81%|  | 64/79 [00:03<00:00, 24.36it/s]
 85%| | 67/79 [00:03<00:00, 24.22it/s]
 89%| | 70/79 [00:03<00:00, 24.53it/s]
 92%|| 73/79 [00:03<00:00, 24.49it/s]
 96%|| 76/79 [00:03<00:00, 25.24it/s]
100%|| 79/79 [00:04<00:00, 26.04it/s]
, 23.92it/s]
 70%|   | 55/79 [00:03<00:00, 24.44it/s]
 73%|  | 58/79 [00:03<00:00, 24.94it/s]
 77%|  | 61/79 [00:03<00:00, 24.94it/s]
 81%|  | 64/79 [00:03<00:00, 24.95it/s]
 85%| | 67/79 [00:03<00:00, 25.20it/s]
 89%| | 70/79 [00:03<00:00, 24.84it/s]
 92%|| 73/79 [00:03<00:00, 25.31it/s]
 96%|| 76/79 [00:03<00:00, 25.63it/s]
100%|| 79/79 [00:04<00:00, 26.56it/s]
, 23.24it/s]
 70%|   | 55/79 [00:03<00:01, 23.36it/s]
 73%|  | 58/79 [00:03<00:00, 23.83it/s]
 77%|  | 61/79 [00:03<00:00, 23.61it/s]
 81%|  | 64/79 [00:03<00:00, 23.91it/s]
 85%| | 67/79 [00:03<00:00, 24.10it/s]
 89%| | 70/79 [00:03<00:00, 24.32it/s]
 92%|| 73/79 [00:03<00:00, 24.70it/s]
 96%|| 76/79 [00:03<00:00, 25.47it/s]
100%|| 79/79 [00:04<00:00, 26.36it/s]
, 23.36it/s]
 70%|   | 55/79 [00:03<00:01, 23.79it/s]
 73%|  | 58/79 [00:03<00:00, 24.13it/s]
 77%|  | 61/79 [00:03<00:00, 24.44it/s]
 81%|  | 64/79 [00:03<00:00, 24.27it/s]
 85%| | 67/79 [00:03<00:00, 24.42it/s]
 89%| | 70/79 [00:03<00:00, 24.77it/s]
 92%|| 73/79 [00:03<00:00, 24.86it/s]
 96%|| 76/79 [00:03<00:00, 25.52it/s]
100%|| 79/79 [00:04<00:00, 26.47it/s]
, 23.00it/s]
 70%|   | 55/79 [00:03<00:01, 23.19it/s]
 73%|  | 58/79 [00:03<00:00, 23.52it/s]
 77%|  | 61/79 [00:03<00:00, 23.64it/s]
 81%|  | 64/79 [00:03<00:00, 23.81it/s]
 85%| | 67/79 [00:03<00:00, 24.22it/s]
 89%| | 70/79 [00:03<00:00, 24.01it/s]
 92%|| 73/79 [00:03<00:00, 24.51it/s]
 96%|| 76/79 [00:03<00:00, 25.25it/s]
100%|| 79/79 [00:04<00:00, 26.22it/s]
, 23.27it/s]
 70%|   | 55/79 [00:03<00:01, 23.79it/s]
 73%|  | 58/79 [00:03<00:00, 23.98it/s]
 77%|  | 61/79 [00:03<00:00, 24.32it/s]
 81%|  | 64/79 [00:03<00:00, 24.51it/s]
 85%| | 67/79 [00:03<00:00, 24.87it/s]
 89%| | 70/79 [00:03<00:00, 24.95it/s]
 92%|| 73/79 [00:03<00:00, 25.17it/s]
 96%|| 76/79 [00:03<00:00, 25.74it/s]
100%|| 79/79 [00:04<00:00, 26.68it/s]
, 23.64it/s]
 70%|   | 55/79 [00:03<00:01, 23.90it/s]
 73%|  | 58/79 [00:03<00:00, 24.09it/s]
 77%|  | 61/79 [00:03<00:00, 24.13it/s]
 81%|  | 64/79 [00:03<00:00, 24.29it/s]
 85%| | 67/79 [00:03<00:00, 24.57it/s]
 89%| | 70/79 [00:03<00:00, 24.70it/s]
 92%|| 73/79 [00:03<00:00, 25.00it/s]
 96%|| 76/79 [00:03<00:00, 25.67it/s]
100%|| 79/79 [00:04<00:00, 26.53it/s]
, 23.06it/s]
 70%|   | 55/79 [00:03<00:01, 23.52it/s]
 73%|  | 58/79 [00:03<00:00, 23.65it/s]
 77%|  | 61/79 [00:03<00:00, 23.60it/s]
 81%|  | 64/79 [00:03<00:00, 23.85it/s]
 85%| | 67/79 [00:03<00:00, 24.05it/s]
 89%| | 70/79 [00:03<00:00, 23.94it/s]
 92%|| 73/79 [00:03<00:00, 24.61it/s]
 96%|| 76/79 [00:03<00:00, 25.21it/s]
100%|| 79/79 [00:04<00:00, 26.32it/s]
, 23.10it/s]
 70%|   | 55/79 [00:03<00:01, 23.23it/s]
 73%|  | 58/79 [00:03<00:00, 23.52it/s]
 77%|  | 61/79 [00:03<00:00, 24.01it/s]
 81%|  | 64/79 [00:03<00:00, 24.21it/s]
 85%| | 67/79 [00:03<00:00, 24.49it/s]
 89%| | 70/79 [00:03<00:00, 24.71it/s]
 92%|| 73/79 [00:03<00:00, 25.02it/s]
 96%|| 76/79 [00:03<00:00, 25.61it/s]
100%|| 79/79 [00:04<00:00, 26.58it/s]
, 23.51it/s]
 70%|   | 55/79 [00:03<00:01, 23.83it/s]
 73%|  | 58/79 [00:03<00:00, 24.13it/s]
 77%|  | 61/79 [00:03<00:00, 24.44it/s]
 81%|  | 64/79 [00:03<00:00, 24.56it/s]
 85%| | 67/79 [00:03<00:00, 24.69it/s]
 89%| | 70/79 [00:03<00:00, 24.67it/s]
 92%|| 73/79 [00:03<00:00, 24.87it/s]
 96%|| 76/79 [00:03<00:00, 25.41it/s]
100%|| 79/79 [00:04<00:00, 26.13it/s]
, 22.62it/s]
 70%|   | 55/79 [00:03<00:01, 23.09it/s]
 73%|  | 58/79 [00:03<00:00, 23.77it/s]
 77%|  | 61/79 [00:03<00:00, 24.04it/s]
 81%|  | 64/79 [00:03<00:00, 24.11it/s]
 85%| | 67/79 [00:03<00:00, 24.14it/s]
 89%| | 70/79 [00:03<00:00, 24.47it/s]
 92%|| 73/79 [00:03<00:00, 24.71it/s]
 96%|| 76/79 [00:03<00:00, 25.54it/s]
100%|| 79/79 [00:04<00:00, 26.55it/s]
, 23.60it/s]
 70%|   | 55/79 [00:03<00:00, 24.02it/s]
 73%|  | 58/79 [00:03<00:00, 24.44it/s]
 77%|  | 61/79 [00:03<00:00, 24.77it/s]
 81%|  | 64/79 [00:03<00:00, 24.71it/s]
 85%| | 67/79 [00:03<00:00, 25.03it/s]
 89%| | 70/79 [00:03<00:00, 24.94it/s]
 92%|| 73/79 [00:03<00:00, 25.09it/s]
 96%|| 76/79 [00:03<00:00, 25.63it/s]
100%|| 79/79 [00:04<00:00, 26.37it/s]
, 22.86it/s]
 70%|   | 55/79 [00:03<00:01, 22.85it/s]
 73%|  | 58/79 [00:03<00:00, 23.32it/s]
 77%|  | 61/79 [00:03<00:00, 23.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.09it/s]
 85%| | 67/79 [00:03<00:00, 24.18it/s]
 89%| | 70/79 [00:03<00:00, 24.34it/s]
 92%|| 73/79 [00:03<00:00, 24.72it/s]
 96%|| 76/79 [00:03<00:00, 25.45it/s]
100%|| 79/79 [00:04<00:00, 26.19it/s]
, 23.29it/s]
 70%|   | 55/79 [00:03<00:01, 23.30it/s]
 73%|  | 58/79 [00:03<00:00, 23.66it/s]
 77%|  | 61/79 [00:03<00:00, 23.82it/s]
 81%|  | 64/79 [00:03<00:00, 24.06it/s]
 85%| | 67/79 [00:03<00:00, 24.11it/s]
 89%| | 70/79 [00:03<00:00, 24.37it/s]
 92%|| 73/79 [00:03<00:00, 24.82it/s]
 96%|| 76/79 [00:04<00:00, 26.00it/s]
100%|| 79/79 [00:04<00:00, 26.45it/s]
, 23.45it/s]
 70%|   | 55/79 [00:03<00:01, 23.95it/s]
 73%|  | 58/79 [00:03<00:00, 24.01it/s]
 77%|  | 61/79 [00:03<00:00, 23.96it/s]
 81%|  | 64/79 [00:03<00:00, 24.25it/s]
 85%| | 67/79 [00:03<00:00, 24.36it/s]
 89%| | 70/79 [00:03<00:00, 24.43it/s]
 92%|| 73/79 [00:03<00:00, 24.79it/s]
 96%|| 76/79 [00:03<00:00, 25.45it/s]
100%|| 79/79 [00:04<00:00, 26.34it/s]
, 22.43it/s]
 70%|   | 55/79 [00:03<00:01, 22.86it/s]
 73%|  | 58/79 [00:03<00:00, 22.98it/s]
 77%|  | 61/79 [00:03<00:00, 23.01it/s]
 81%|  | 64/79 [00:03<00:00, 23.24it/s]
 85%| | 67/79 [00:03<00:00, 23.15it/s]
 89%| | 70/79 [00:03<00:00, 23.22it/s]
 92%|| 73/79 [00:03<00:00, 23.78it/s]
 96%|| 76/79 [00:04<00:00, 24.67it/s]
100%|| 79/79 [00:04<00:00, 25.80it/s]
, 23.29it/s]
 70%|   | 55/79 [00:03<00:01, 23.65it/s]
 73%|  | 58/79 [00:03<00:00, 23.73it/s]
 77%|  | 61/79 [00:03<00:00, 23.98it/s]
 81%|  | 64/79 [00:03<00:00, 24.04it/s]
 85%| | 67/79 [00:03<00:00, 24.05it/s]
 89%| | 70/79 [00:03<00:00, 23.98it/s]
 92%|| 73/79 [00:03<00:00, 24.42it/s]
 96%|| 76/79 [00:04<00:00, 25.01it/s]
100%|| 79/79 [00:04<00:00, 25.99it/s]
it/s]
 67%|   | 53/79 [00:03<00:01, 23.76it/s]
 71%|   | 56/79 [00:03<00:00, 24.06it/s]
 75%|  | 59/79 [00:03<00:00, 24.44it/s]
 78%|  | 62/79 [00:03<00:00, 24.28it/s]
 82%| | 65/79 [00:03<00:00, 24.18it/s]
 86%| | 68/79 [00:03<00:00, 24.16it/s]
 90%| | 71/79 [00:03<00:00, 24.04it/s]
 94%|| 74/79 [00:03<00:00, 24.64it/s]
 97%|| 77/79 [00:04<00:00, 25.68it/s]
100%|| 79/79 [00:04<00:00, 18.62it/s]
, 22.81it/s]
 70%|   | 55/79 [00:03<00:01, 23.45it/s]
 73%|  | 58/79 [00:03<00:00, 23.76it/s]
 77%|  | 61/79 [00:03<00:00, 23.94it/s]
 81%|  | 64/79 [00:03<00:00, 24.12it/s]
 85%| | 67/79 [00:03<00:00, 24.32it/s]
 89%| | 70/79 [00:03<00:00, 24.31it/s]
 92%|| 73/79 [00:03<00:00, 24.57it/s]
 96%|| 76/79 [00:04<00:00, 25.35it/s]
100%|| 79/79 [00:04<00:00, 25.95it/s]
2020-06-23 15:36:19,431 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.243426 (0.027157926940917967 s / img per device, on 32 devices)
2020-06-23 15:36:19,452 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:36:19,452 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:36:19,471 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592951789365, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 8, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592951789366, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 8}}
2020-06-23 15:36:29,470 maskrcnn_benchmark.trainer INFO: eta: 1:11:56  iter: 6420  loss: 0.5486 (0.7974)  loss_classifier: 0.1782 (0.2956)  loss_box_reg: 0.0901 (0.1271)  loss_mask: 0.2373 (0.3130)  loss_objectness: 0.0179 (0.0404)  loss_rpn_box_reg: 0.0061 (0.0213)  time: 0.1089 (0.1286)  data: 0.0013 (0.0200)  lr: 0.160000  max mem: 5110
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 15:36:31,682 maskrcnn_benchmark.trainer INFO: eta: 1:11:52  iter: 6440  loss: 0.6244 (0.7970)  loss_classifier: 0.2336 (0.2955)  loss_box_reg: 0.0977 (0.1270)  loss_mask: 0.2651 (0.3128)  loss_objectness: 0.0207 (0.0404)  loss_rpn_box_reg: 0.0079 (0.0213)  time: 0.1090 (0.1285)  data: 0.0015 (0.0199)  lr: 0.160000  max mem: 5110
2020-06-23 15:36:33,876 maskrcnn_benchmark.trainer INFO: eta: 1:11:47  iter: 6460  loss: 0.6219 (0.7965)  loss_classifier: 0.2303 (0.2953)  loss_box_reg: 0.0938 (0.1269)  loss_mask: 0.2683 (0.3127)  loss_objectness: 0.0104 (0.0404)  loss_rpn_box_reg: 0.0095 (0.0213)  time: 0.1090 (0.1284)  data: 0.0014 (0.0199)  lr: 0.160000  max mem: 5110
2020-06-23 15:36:36,063 maskrcnn_benchmark.trainer INFO: eta: 1:11:43  iter: 6480  loss: 0.6135 (0.7961)  loss_classifier: 0.2055 (0.2951)  loss_box_reg: 0.1051 (0.1268)  loss_mask: 0.2756 (0.3126)  loss_objectness: 0.0194 (0.0403)  loss_rpn_box_reg: 0.0109 (0.0213)  time: 0.1089 (0.1284)  data: 0.0015 (0.0198)  lr: 0.160000  max mem: 5110
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.81s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 15:36:38,245 maskrcnn_benchmark.trainer INFO: eta: 1:11:38  iter: 6500  loss: 0.6789 (0.7959)  loss_classifier: 0.2468 (0.2950)  loss_box_reg: 0.1174 (0.1268)  loss_mask: 0.2868 (0.3125)  loss_objectness: 0.0194 (0.0403)  loss_rpn_box_reg: 0.0084 (0.0212)  time: 0.1091 (0.1283)  data: 0.0016 (0.0198)  lr: 0.160000  max mem: 5110
DONE (t=1.75s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.28315
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.48924
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.29829
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.16011
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.31416
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.36922
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.26226
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.42071
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44344
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.25747
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.48109
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.57736
2020-06-23 15:36:40,420 maskrcnn_benchmark.trainer INFO: eta: 1:11:34  iter: 6520  loss: 0.6233 (0.7955)  loss_classifier: 0.2096 (0.2948)  loss_box_reg: 0.0884 (0.1268)  loss_mask: 0.2768 (0.3124)  loss_objectness: 0.0175 (0.0402)  loss_rpn_box_reg: 0.0076 (0.0212)  time: 0.1085 (0.1283)  data: 0.0014 (0.0197)  lr: 0.160000  max mem: 5110
2020-06-23 15:36:42,584 maskrcnn_benchmark.trainer INFO: eta: 1:11:29  iter: 6540  loss: 0.6663 (0.7952)  loss_classifier: 0.2345 (0.2947)  loss_box_reg: 0.1143 (0.1267)  loss_mask: 0.2710 (0.3123)  loss_objectness: 0.0267 (0.0402)  loss_rpn_box_reg: 0.0142 (0.0212)  time: 0.1078 (0.1282)  data: 0.0015 (0.0196)  lr: 0.160000  max mem: 5110
2020-06-23 15:36:44,770 maskrcnn_benchmark.trainer INFO: eta: 1:11:25  iter: 6560  loss: 0.6465 (0.7946)  loss_classifier: 0.1883 (0.2944)  loss_box_reg: 0.0839 (0.1266)  loss_mask: 0.2698 (0.3122)  loss_objectness: 0.0148 (0.0401)  loss_rpn_box_reg: 0.0067 (0.0212)  time: 0.1088 (0.1281)  data: 0.0013 (0.0196)  lr: 0.160000  max mem: 5110
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:36:46,963 maskrcnn_benchmark.trainer INFO: eta: 1:11:20  iter: 6580  loss: 0.6740 (0.7944)  loss_classifier: 0.2380 (0.2943)  loss_box_reg: 0.1226 (0.1266)  loss_mask: 0.2723 (0.3121)  loss_objectness: 0.0267 (0.0402)  loss_rpn_box_reg: 0.0101 (0.0212)  time: 0.1094 (0.1281)  data: 0.0016 (0.0195)  lr: 0.160000  max mem: 5110
DONE (t=2.19s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:36:49,134 maskrcnn_benchmark.trainer INFO: eta: 1:11:16  iter: 6600  loss: 0.6161 (0.7940)  loss_classifier: 0.2057 (0.2941)  loss_box_reg: 0.1014 (0.1266)  loss_mask: 0.2773 (0.3120)  loss_objectness: 0.0149 (0.0401)  loss_rpn_box_reg: 0.0122 (0.0212)  time: 0.1085 (0.1280)  data: 0.0015 (0.0195)  lr: 0.160000  max mem: 5110
2020-06-23 15:36:51,304 maskrcnn_benchmark.trainer INFO: eta: 1:11:11  iter: 6620  loss: 0.6933 (0.7936)  loss_classifier: 0.2260 (0.2940)  loss_box_reg: 0.0985 (0.1265)  loss_mask: 0.2809 (0.3118)  loss_objectness: 0.0233 (0.0401)  loss_rpn_box_reg: 0.0186 (0.0212)  time: 0.1083 (0.1280)  data: 0.0015 (0.0194)  lr: 0.160000  max mem: 5110
DONE (t=2.87s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.27223
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.46029
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.28316
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11589
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.29485
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.40680
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25803
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.39924
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.41888
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21845
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.45948
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.57399
2020-06-23 15:36:51,910 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.28314879540946686, segm mAP: 0.2722270947646903
:::MLLOG {"namespace": "", "time_ms": 1592951811911, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.28314879540946686, "SEGM": 0.2722270947646903}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1592951811911, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 7}}
2020-06-23 15:36:53,660 maskrcnn_benchmark.trainer INFO: eta: 1:11:07  iter: 6640  loss: 0.6781 (0.7934)  loss_classifier: 0.2205 (0.2939)  loss_box_reg: 0.1060 (0.1265)  loss_mask: 0.2566 (0.3117)  loss_objectness: 0.0248 (0.0401)  loss_rpn_box_reg: 0.0085 (0.0212)  time: 0.1084 (0.1279)  data: 0.0015 (0.0194)  lr: 0.160000  max mem: 5110
2020-06-23 15:36:55,818 maskrcnn_benchmark.trainer INFO: eta: 1:11:03  iter: 6660  loss: 0.5418 (0.7927)  loss_classifier: 0.1841 (0.2936)  loss_box_reg: 0.0798 (0.1264)  loss_mask: 0.2495 (0.3116)  loss_objectness: 0.0196 (0.0401)  loss_rpn_box_reg: 0.0087 (0.0212)  time: 0.1075 (0.1279)  data: 0.0013 (0.0193)  lr: 0.160000  max mem: 5110
2020-06-23 15:36:57,984 maskrcnn_benchmark.trainer INFO: eta: 1:10:58  iter: 6680  loss: 0.6185 (0.7924)  loss_classifier: 0.1979 (0.2934)  loss_box_reg: 0.0909 (0.1263)  loss_mask: 0.2791 (0.3115)  loss_objectness: 0.0186 (0.0400)  loss_rpn_box_reg: 0.0113 (0.0212)  time: 0.1081 (0.1278)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:00,176 maskrcnn_benchmark.trainer INFO: eta: 1:10:54  iter: 6700  loss: 0.6245 (0.7920)  loss_classifier: 0.2119 (0.2932)  loss_box_reg: 0.0820 (0.1262)  loss_mask: 0.2730 (0.3114)  loss_objectness: 0.0192 (0.0400)  loss_rpn_box_reg: 0.0166 (0.0212)  time: 0.1095 (0.1278)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:02,338 maskrcnn_benchmark.trainer INFO: eta: 1:10:50  iter: 6720  loss: 0.6448 (0.7916)  loss_classifier: 0.2257 (0.2931)  loss_box_reg: 0.1048 (0.1262)  loss_mask: 0.2640 (0.3113)  loss_objectness: 0.0177 (0.0400)  loss_rpn_box_reg: 0.0065 (0.0211)  time: 0.1078 (0.1277)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:04,513 maskrcnn_benchmark.trainer INFO: eta: 1:10:45  iter: 6740  loss: 0.6212 (0.7912)  loss_classifier: 0.2301 (0.2929)  loss_box_reg: 0.0901 (0.1261)  loss_mask: 0.2449 (0.3111)  loss_objectness: 0.0170 (0.0400)  loss_rpn_box_reg: 0.0105 (0.0211)  time: 0.1075 (0.1276)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:06,675 maskrcnn_benchmark.trainer INFO: eta: 1:10:41  iter: 6760  loss: 0.7313 (0.7909)  loss_classifier: 0.2292 (0.2928)  loss_box_reg: 0.1104 (0.1260)  loss_mask: 0.2753 (0.3110)  loss_objectness: 0.0165 (0.0399)  loss_rpn_box_reg: 0.0084 (0.0211)  time: 0.1079 (0.1276)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:08,860 maskrcnn_benchmark.trainer INFO: eta: 1:10:36  iter: 6780  loss: 0.6568 (0.7906)  loss_classifier: 0.2504 (0.2927)  loss_box_reg: 0.1080 (0.1260)  loss_mask: 0.2562 (0.3109)  loss_objectness: 0.0224 (0.0399)  loss_rpn_box_reg: 0.0088 (0.0211)  time: 0.1087 (0.1275)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:11,061 maskrcnn_benchmark.trainer INFO: eta: 1:10:32  iter: 6800  loss: 0.5875 (0.7903)  loss_classifier: 0.2014 (0.2925)  loss_box_reg: 0.1072 (0.1260)  loss_mask: 0.2547 (0.3108)  loss_objectness: 0.0163 (0.0399)  loss_rpn_box_reg: 0.0204 (0.0211)  time: 0.1097 (0.1275)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:13,223 maskrcnn_benchmark.trainer INFO: eta: 1:10:28  iter: 6820  loss: 0.6885 (0.7902)  loss_classifier: 0.2708 (0.2925)  loss_box_reg: 0.1024 (0.1260)  loss_mask: 0.2887 (0.3107)  loss_objectness: 0.0225 (0.0399)  loss_rpn_box_reg: 0.0120 (0.0212)  time: 0.1076 (0.1274)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:15,383 maskrcnn_benchmark.trainer INFO: eta: 1:10:23  iter: 6840  loss: 0.6281 (0.7897)  loss_classifier: 0.2150 (0.2923)  loss_box_reg: 0.0878 (0.1259)  loss_mask: 0.2850 (0.3106)  loss_objectness: 0.0139 (0.0398)  loss_rpn_box_reg: 0.0066 (0.0211)  time: 0.1076 (0.1274)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:17,583 maskrcnn_benchmark.trainer INFO: eta: 1:10:19  iter: 6860  loss: 0.7017 (0.7896)  loss_classifier: 0.2490 (0.2922)  loss_box_reg: 0.1150 (0.1259)  loss_mask: 0.2930 (0.3106)  loss_objectness: 0.0248 (0.0398)  loss_rpn_box_reg: 0.0147 (0.0211)  time: 0.1098 (0.1273)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:19,758 maskrcnn_benchmark.trainer INFO: eta: 1:10:15  iter: 6880  loss: 0.6839 (0.7894)  loss_classifier: 0.2468 (0.2921)  loss_box_reg: 0.1082 (0.1258)  loss_mask: 0.2675 (0.3105)  loss_objectness: 0.0183 (0.0398)  loss_rpn_box_reg: 0.0094 (0.0211)  time: 0.1077 (0.1273)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:21,930 maskrcnn_benchmark.trainer INFO: eta: 1:10:10  iter: 6900  loss: 0.6312 (0.7891)  loss_classifier: 0.1884 (0.2919)  loss_box_reg: 0.0889 (0.1258)  loss_mask: 0.2832 (0.3105)  loss_objectness: 0.0207 (0.0398)  loss_rpn_box_reg: 0.0108 (0.0211)  time: 0.1079 (0.1272)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:24,103 maskrcnn_benchmark.trainer INFO: eta: 1:10:06  iter: 6920  loss: 0.6854 (0.7889)  loss_classifier: 0.2423 (0.2918)  loss_box_reg: 0.1069 (0.1258)  loss_mask: 0.2827 (0.3104)  loss_objectness: 0.0220 (0.0398)  loss_rpn_box_reg: 0.0073 (0.0211)  time: 0.1078 (0.1272)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:26,279 maskrcnn_benchmark.trainer INFO: eta: 1:10:02  iter: 6940  loss: 0.5483 (0.7885)  loss_classifier: 0.1970 (0.2916)  loss_box_reg: 0.0943 (0.1257)  loss_mask: 0.2668 (0.3103)  loss_objectness: 0.0272 (0.0397)  loss_rpn_box_reg: 0.0111 (0.0211)  time: 0.1086 (0.1271)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:28,442 maskrcnn_benchmark.trainer INFO: eta: 1:09:57  iter: 6960  loss: 0.5824 (0.7881)  loss_classifier: 0.2021 (0.2914)  loss_box_reg: 0.0960 (0.1257)  loss_mask: 0.2814 (0.3102)  loss_objectness: 0.0157 (0.0397)  loss_rpn_box_reg: 0.0096 (0.0211)  time: 0.1079 (0.1271)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:30,629 maskrcnn_benchmark.trainer INFO: eta: 1:09:53  iter: 6980  loss: 0.6020 (0.7878)  loss_classifier: 0.2482 (0.2913)  loss_box_reg: 0.1076 (0.1256)  loss_mask: 0.2682 (0.3101)  loss_objectness: 0.0187 (0.0397)  loss_rpn_box_reg: 0.0098 (0.0211)  time: 0.1090 (0.1270)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:32,807 maskrcnn_benchmark.trainer INFO: eta: 1:09:49  iter: 7000  loss: 0.6550 (0.7874)  loss_classifier: 0.2098 (0.2911)  loss_box_reg: 0.1083 (0.1256)  loss_mask: 0.2443 (0.3100)  loss_objectness: 0.0231 (0.0396)  loss_rpn_box_reg: 0.0160 (0.0211)  time: 0.1086 (0.1269)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:34,995 maskrcnn_benchmark.trainer INFO: eta: 1:09:45  iter: 7020  loss: 0.7276 (0.7872)  loss_classifier: 0.2563 (0.2911)  loss_box_reg: 0.1230 (0.1256)  loss_mask: 0.2805 (0.3099)  loss_objectness: 0.0191 (0.0396)  loss_rpn_box_reg: 0.0130 (0.0211)  time: 0.1086 (0.1269)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:37,170 maskrcnn_benchmark.trainer INFO: eta: 1:09:40  iter: 7040  loss: 0.6311 (0.7868)  loss_classifier: 0.2243 (0.2909)  loss_box_reg: 0.0885 (0.1256)  loss_mask: 0.2467 (0.3097)  loss_objectness: 0.0184 (0.0396)  loss_rpn_box_reg: 0.0135 (0.0211)  time: 0.1082 (0.1268)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:39,354 maskrcnn_benchmark.trainer INFO: eta: 1:09:36  iter: 7060  loss: 0.6852 (0.7866)  loss_classifier: 0.2320 (0.2908)  loss_box_reg: 0.1266 (0.1255)  loss_mask: 0.2944 (0.3097)  loss_objectness: 0.0278 (0.0396)  loss_rpn_box_reg: 0.0125 (0.0211)  time: 0.1085 (0.1268)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:41,524 maskrcnn_benchmark.trainer INFO: eta: 1:09:32  iter: 7080  loss: 0.7266 (0.7864)  loss_classifier: 0.2523 (0.2908)  loss_box_reg: 0.1110 (0.1255)  loss_mask: 0.2685 (0.3095)  loss_objectness: 0.0239 (0.0395)  loss_rpn_box_reg: 0.0118 (0.0210)  time: 0.1083 (0.1267)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:43,678 maskrcnn_benchmark.trainer INFO: eta: 1:09:28  iter: 7100  loss: 0.6036 (0.7860)  loss_classifier: 0.1961 (0.2905)  loss_box_reg: 0.0969 (0.1255)  loss_mask: 0.2621 (0.3094)  loss_objectness: 0.0176 (0.0395)  loss_rpn_box_reg: 0.0071 (0.0210)  time: 0.1082 (0.1267)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:45,855 maskrcnn_benchmark.trainer INFO: eta: 1:09:24  iter: 7120  loss: 0.6380 (0.7857)  loss_classifier: 0.2418 (0.2904)  loss_box_reg: 0.1122 (0.1254)  loss_mask: 0.2639 (0.3093)  loss_objectness: 0.0167 (0.0395)  loss_rpn_box_reg: 0.0127 (0.0210)  time: 0.1083 (0.1266)  data: 0.0015 (0.0182)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:48,029 maskrcnn_benchmark.trainer INFO: eta: 1:09:19  iter: 7140  loss: 0.6306 (0.7854)  loss_classifier: 0.2340 (0.2903)  loss_box_reg: 0.0884 (0.1254)  loss_mask: 0.2692 (0.3092)  loss_objectness: 0.0221 (0.0395)  loss_rpn_box_reg: 0.0101 (0.0210)  time: 0.1083 (0.1266)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:50,203 maskrcnn_benchmark.trainer INFO: eta: 1:09:15  iter: 7160  loss: 0.5771 (0.7848)  loss_classifier: 0.2046 (0.2901)  loss_box_reg: 0.0902 (0.1253)  loss_mask: 0.2526 (0.3090)  loss_objectness: 0.0159 (0.0395)  loss_rpn_box_reg: 0.0058 (0.0210)  time: 0.1086 (0.1265)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:52,368 maskrcnn_benchmark.trainer INFO: eta: 1:09:11  iter: 7180  loss: 0.5971 (0.7844)  loss_classifier: 0.2264 (0.2899)  loss_box_reg: 0.0947 (0.1252)  loss_mask: 0.2688 (0.3089)  loss_objectness: 0.0144 (0.0394)  loss_rpn_box_reg: 0.0079 (0.0210)  time: 0.1079 (0.1265)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:54,558 maskrcnn_benchmark.trainer INFO: eta: 1:09:07  iter: 7200  loss: 0.6533 (0.7840)  loss_classifier: 0.2284 (0.2897)  loss_box_reg: 0.0956 (0.1251)  loss_mask: 0.2662 (0.3088)  loss_objectness: 0.0175 (0.0394)  loss_rpn_box_reg: 0.0077 (0.0210)  time: 0.1097 (0.1264)  data: 0.0015 (0.0180)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:56,744 maskrcnn_benchmark.trainer INFO: eta: 1:09:03  iter: 7220  loss: 0.7068 (0.7839)  loss_classifier: 0.2458 (0.2897)  loss_box_reg: 0.1037 (0.1251)  loss_mask: 0.2660 (0.3087)  loss_objectness: 0.0260 (0.0394)  loss_rpn_box_reg: 0.0119 (0.0210)  time: 0.1089 (0.1264)  data: 0.0015 (0.0179)  lr: 0.160000  max mem: 5110
2020-06-23 15:37:58,921 maskrcnn_benchmark.trainer INFO: eta: 1:08:59  iter: 7240  loss: 0.6736 (0.7836)  loss_classifier: 0.2592 (0.2895)  loss_box_reg: 0.0983 (0.1251)  loss_mask: 0.2749 (0.3086)  loss_objectness: 0.0274 (0.0394)  loss_rpn_box_reg: 0.0100 (0.0210)  time: 0.1089 (0.1263)  data: 0.0015 (0.0179)  lr: 0.160000  max mem: 5110
2020-06-23 15:38:01,105 maskrcnn_benchmark.trainer INFO: eta: 1:08:55  iter: 7260  loss: 0.7220 (0.7835)  loss_classifier: 0.2572 (0.2895)  loss_box_reg: 0.1200 (0.1251)  loss_mask: 0.2836 (0.3086)  loss_objectness: 0.0187 (0.0394)  loss_rpn_box_reg: 0.0118 (0.0210)  time: 0.1085 (0.1263)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5110
2020-06-23 15:38:03,280 maskrcnn_benchmark.trainer INFO: eta: 1:08:50  iter: 7280  loss: 0.6198 (0.7830)  loss_classifier: 0.1960 (0.2892)  loss_box_reg: 0.1002 (0.1250)  loss_mask: 0.2600 (0.3085)  loss_objectness: 0.0174 (0.0393)  loss_rpn_box_reg: 0.0083 (0.0209)  time: 0.1082 (0.1263)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5110
2020-06-23 15:38:05,466 maskrcnn_benchmark.trainer INFO: eta: 1:08:46  iter: 7300  loss: 0.6209 (0.7827)  loss_classifier: 0.2186 (0.2891)  loss_box_reg: 0.1017 (0.1249)  loss_mask: 0.2607 (0.3084)  loss_objectness: 0.0190 (0.0393)  loss_rpn_box_reg: 0.0088 (0.0209)  time: 0.1084 (0.1262)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5110
2020-06-23 15:38:07,641 maskrcnn_benchmark.trainer INFO: eta: 1:08:42  iter: 7320  loss: 0.7717 (0.7826)  loss_classifier: 0.2596 (0.2890)  loss_box_reg: 0.1204 (0.1249)  loss_mask: 0.2583 (0.3083)  loss_objectness: 0.0334 (0.0394)  loss_rpn_box_reg: 0.0168 (0.0210)  time: 0.1080 (0.1262)  data: 0.0016 (0.0177)  lr: 0.160000  max mem: 5110
:::MLLOG {"namespace": "", "time_ms": 1592951889393, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 8}}
:::MLLOG {"namespace": "", "time_ms": 1592951889393, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 8}}
:::MLLOG {"namespace": "", "time_ms": 1592951889393, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 8}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 15:38:09,644 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
Done (t=0.27s)
creating index...
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
2020-06-23 15:38:09,945 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:56,  1.39it/s]
  4%|         | 3/79 [00:00<00:39,  1.92it/s]
  8%|         | 6/79 [00:00<00:27,  2.64it/s]
 11%|        | 9/79 [00:01<00:19,  3.62it/s]
 15%|        | 12/79 [00:01<00:13,  4.87it/s]
 19%|        | 15/79 [00:01<00:09,  6.42it/s]
 23%|       | 18/79 [00:01<00:07,  8.27it/s]
 27%|       | 21/79 [00:01<00:05, 10.35it/s]
 30%|       | 24/79 [00:01<00:04, 12.55it/s]
 34%|      | 27/79 [00:01<00:03, 14.86it/s]
 38%|      | 30/79 [00:01<00:02, 16.94it/s]
 42%|     | 33/79 [00:02<00:02, 18.88it/s]
 46%|     | 36/79 [00:02<00:02, 20.49it/s]
 49%|     | 39/79 [00:02<00:01, 21.76it/s]
 53%|    | 42/79 [00:02<00:01, 22.72it/s]
 57%|    | 45/79 [00:02<00:01, 23.48it/s]
 61%|    | 48/79 [00:02<00:01, 24.21it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.27it/s]
  5%|         | 4/79 [00:00<00:42,  1.77it/s]
  9%|         | 7/79 [00:01<00:29,  2.45it/s]
 13%|        | 10/79 [00:01<00:20,  3.36it/s]
 16%|        | 13/79 [00:01<00:14,  4.53it/s]
 20%|        | 16/79 [00:01<00:10,  5.99it/s]
 24%|       | 19/79 [00:01<00:07,  7.75it/s]
 28%|       | 22/79 [00:01<00:05,  9.79it/s]
 32%|      | 25/79 [00:01<00:04, 11.99it/s]
 35%|      | 28/79 [00:01<00:03, 14.34it/s]
 39%|      | 31/79 [00:02<00:02, 16.26it/s]
 43%|     | 34/79 [00:02<00:02, 18.13it/s]
 47%|     | 37/79 [00:02<00:02, 19.69it/s]
 51%|     | 40/79 [00:02<00:01, 21.06it/s]
 54%|    | 43/79 [00:02<00:01, 22.14it/s]
 58%|    | 46/79 [00:02<00:01, 22.79it/s]
 62%|   | 49/79 [00:02<00:01, 23.18it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.46it/s]
 28%|       | 22/79 [00:01<00:06,  9.49it/s]
 32%|      | 25/79 [00:01<00:04, 11.67it/s]
 35%|      | 28/79 [00:01<00:03, 13.97it/s]
 39%|      | 31/79 [00:02<00:02, 16.14it/s]
 43%|     | 34/79 [00:02<00:02, 18.01it/s]
 47%|     | 37/79 [00:02<00:02, 19.74it/s]
 51%|     | 40/79 [00:02<00:01, 20.96it/s]
 54%|    | 43/79 [00:02<00:01, 21.90it/s]
 58%|    | 46/79 [00:02<00:01, 22.84it/s]
 62%|   | 49/79 [00:02<00:01, 23.44it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  4%|         | 3/79 [00:00<00:44,  1.71it/s]
  8%|         | 6/79 [00:01<00:30,  2.37it/s]
 11%|        | 9/79 [00:01<00:21,  3.25it/s]
 15%|        | 12/79 [00:01<00:15,  4.40it/s]
 19%|        | 15/79 [00:01<00:10,  5.83it/s]
 23%|       | 18/79 [00:01<00:08,  7.54it/s]
 27%|       | 21/79 [00:01<00:06,  9.55it/s]
 30%|       | 24/79 [00:01<00:04, 11.68it/s]
 34%|      | 27/79 [00:01<00:03, 13.84it/s]
 38%|      | 30/79 [00:02<00:03, 15.88it/s]
 42%|     | 33/79 [00:02<00:02, 17.74it/s]
 46%|     | 36/79 [00:02<00:02, 19.46it/s]
 49%|     | 39/79 [00:02<00:01, 20.60it/s]
 53%|    | 42/79 [00:02<00:01, 21.43it/s]
 57%|    | 45/79 [00:02<00:01, 22.33it/s]
 61%|    | 48/79 [00:02<00:01, 23.00it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.24it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.56it/s]
 28%|       | 22/79 [00:01<00:05,  9.56it/s]
 32%|      | 25/79 [00:01<00:04, 11.77it/s]
 35%|      | 28/79 [00:01<00:03, 14.03it/s]
 39%|      | 31/79 [00:02<00:02, 16.31it/s]
 43%|     | 34/79 [00:02<00:02, 18.17it/s]
 47%|     | 37/79 [00:02<00:02, 19.92it/s]
 51%|     | 40/79 [00:02<00:01, 21.24it/s]
 54%|    | 43/79 [00:02<00:01, 22.28it/s]
 58%|    | 46/79 [00:02<00:01, 23.06it/s]
 62%|   | 49/79 [00:02<00:01, 23.58it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.29it/s]
  4%|         | 3/79 [00:00<00:42,  1.79it/s]
  8%|         | 6/79 [00:01<00:29,  2.47it/s]
 11%|        | 9/79 [00:01<00:20,  3.39it/s]
 15%|        | 12/79 [00:01<00:14,  4.56it/s]
 19%|        | 15/79 [00:01<00:10,  6.02it/s]
 23%|       | 18/79 [00:01<00:07,  7.77it/s]
 27%|       | 21/79 [00:01<00:05,  9.73it/s]
 30%|       | 24/79 [00:01<00:04, 11.79it/s]
 34%|      | 27/79 [00:01<00:03, 13.76it/s]
 38%|      | 30/79 [00:02<00:03, 15.78it/s]
 42%|     | 33/79 [00:02<00:02, 17.48it/s]
 46%|     | 36/79 [00:02<00:02, 18.99it/s]
 49%|     | 39/79 [00:02<00:01, 20.18it/s]
 53%|    | 42/79 [00:02<00:01, 21.16it/s]
 57%|    | 45/79 [00:02<00:01, 21.96it/s]
 61%|    | 48/79 [00:02<00:01, 22.52it/s]
 65%|   | 51/79 [00:02<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  4%|         | 3/79 [00:00<00:45,  1.69it/s]
  8%|         | 6/79 [00:01<00:31,  2.34it/s]
 11%|        | 9/79 [00:01<00:21,  3.21it/s]
 15%|        | 12/79 [00:01<00:15,  4.35it/s]
 19%|        | 15/79 [00:01<00:11,  5.79it/s]
 23%|       | 18/79 [00:01<00:08,  7.47it/s]
 27%|       | 21/79 [00:01<00:06,  9.40it/s]
 30%|       | 24/79 [00:01<00:04, 11.50it/s]
 34%|      | 27/79 [00:01<00:03, 13.68it/s]
 38%|      | 30/79 [00:02<00:03, 15.62it/s]
 42%|     | 33/79 [00:02<00:02, 17.62it/s]
 46%|     | 36/79 [00:02<00:02, 19.19it/s]
 49%|     | 39/79 [00:02<00:01, 20.51it/s]
 53%|    | 42/79 [00:02<00:01, 21.42it/s]
 57%|    | 45/79 [00:02<00:01, 22.20it/s]
 61%|    | 48/79 [00:02<00:01, 22.72it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.27it/s]
  5%|         | 4/79 [00:00<00:42,  1.77it/s]
  9%|         | 7/79 [00:01<00:29,  2.45it/s]
 13%|        | 10/79 [00:01<00:20,  3.36it/s]
 16%|        | 13/79 [00:01<00:14,  4.53it/s]
 20%|        | 16/79 [00:01<00:10,  6.00it/s]
 24%|       | 19/79 [00:01<00:07,  7.76it/s]
 28%|       | 22/79 [00:01<00:05,  9.79it/s]
 32%|      | 25/79 [00:01<00:04, 11.98it/s]
 35%|      | 28/79 [00:01<00:03, 14.20it/s]
 39%|      | 31/79 [00:02<00:02, 16.19it/s]
 43%|     | 34/79 [00:02<00:02, 18.03it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 20.66it/s]
 54%|    | 43/79 [00:02<00:01, 21.62it/s]
 58%|    | 46/79 [00:02<00:01, 22.40it/s]
 62%|   | 49/79 [00:02<00:01, 23.12it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  8%|         | 6/79 [00:01<00:32,  2.25it/s]
 11%|        | 9/79 [00:01<00:22,  3.10it/s]
 15%|        | 12/79 [00:01<00:15,  4.20it/s]
 19%|        | 15/79 [00:01<00:11,  5.60it/s]
 23%|       | 18/79 [00:01<00:08,  7.30it/s]
 27%|       | 21/79 [00:01<00:06,  9.26it/s]
 30%|       | 24/79 [00:01<00:04, 11.39it/s]
 34%|      | 27/79 [00:01<00:03, 13.63it/s]
 38%|      | 30/79 [00:02<00:03, 15.77it/s]
 42%|     | 33/79 [00:02<00:02, 17.68it/s]
 46%|     | 36/79 [00:02<00:02, 19.28it/s]
 49%|     | 39/79 [00:02<00:01, 20.53it/s]
 53%|    | 42/79 [00:02<00:01, 21.72it/s]
 57%|    | 45/79 [00:02<00:01, 22.45it/s]
 61%|    | 48/79 [00:02<00:01, 23.11it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.61it/s]
 28%|       | 22/79 [00:01<00:05,  9.54it/s]
 32%|      | 25/79 [00:01<00:04, 11.67it/s]
 35%|      | 28/79 [00:01<00:03, 13.53it/s]
 39%|      | 31/79 [00:02<00:03, 15.64it/s]
 43%|     | 34/79 [00:02<00:02, 17.53it/s]
 47%|     | 37/79 [00:02<00:02, 19.15it/s]
 51%|     | 40/79 [00:02<00:01, 20.53it/s]
 54%|    | 43/79 [00:02<00:01, 21.45it/s]
 58%|    | 46/79 [00:02<00:01, 22.19it/s]
 62%|   | 49/79 [00:02<00:01, 22.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.39it/s]
 35%|      | 28/79 [00:01<00:03, 13.68it/s]
 39%|      | 31/79 [00:02<00:03, 15.72it/s]
 43%|     | 34/79 [00:02<00:02, 17.62it/s]
 47%|     | 37/79 [00:02<00:02, 19.26it/s]
 51%|     | 40/79 [00:02<00:01, 20.80it/s]
 54%|    | 43/79 [00:02<00:01, 21.64it/s]
 58%|    | 46/79 [00:02<00:01, 22.34it/s]
 62%|   | 49/79 [00:02<00:01, 23.13it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.24it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.35it/s]
 35%|      | 28/79 [00:01<00:03, 13.62it/s]
 39%|      | 31/79 [00:02<00:03, 15.78it/s]
 43%|     | 34/79 [00:02<00:02, 17.65it/s]
 47%|     | 37/79 [00:02<00:02, 19.31it/s]
 51%|     | 40/79 [00:02<00:01, 20.80it/s]
 54%|    | 43/79 [00:02<00:01, 22.02it/s]
 58%|    | 46/79 [00:02<00:01, 22.54it/s]
 62%|   | 49/79 [00:02<00:01, 23.42it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:11,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.39it/s]
 32%|      | 25/79 [00:01<00:04, 11.52it/s]
 35%|      | 28/79 [00:01<00:03, 13.71it/s]
 39%|      | 31/79 [00:02<00:03, 15.80it/s]
 43%|     | 34/79 [00:02<00:02, 17.71it/s]
 47%|     | 37/79 [00:02<00:02, 19.35it/s]
 51%|     | 40/79 [00:02<00:01, 20.52it/s]
 54%|    | 43/79 [00:02<00:01, 21.56it/s]
 58%|    | 46/79 [00:02<00:01, 22.29it/s]
 62%|   | 49/79 [00:02<00:01, 22.80it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:00<00:46,  1.63it/s]
  8%|         | 6/79 [00:01<00:32,  2.26it/s]
 11%|        | 9/79 [00:01<00:22,  3.11it/s]
 15%|        | 12/79 [00:01<00:15,  4.20it/s]
 19%|        | 15/79 [00:01<00:11,  5.58it/s]
 23%|       | 18/79 [00:01<00:08,  7.26it/s]
 27%|       | 21/79 [00:01<00:06,  9.18it/s]
 30%|       | 24/79 [00:01<00:04, 11.29it/s]
 34%|      | 27/79 [00:01<00:03, 13.41it/s]
 38%|      | 30/79 [00:02<00:03, 15.48it/s]
 42%|     | 33/79 [00:02<00:02, 17.41it/s]
 46%|     | 36/79 [00:02<00:02, 18.90it/s]
 49%|     | 39/79 [00:02<00:01, 20.02it/s]
 53%|    | 42/79 [00:02<00:01, 21.09it/s]
 57%|    | 45/79 [00:02<00:01, 22.01it/s]
 61%|    | 48/79 [00:02<00:01, 22.87it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.24it/s]
 32%|      | 25/79 [00:01<00:04, 11.39it/s]
 35%|      | 28/79 [00:01<00:03, 13.58it/s]
 39%|      | 31/79 [00:02<00:03, 15.82it/s]
 43%|     | 34/79 [00:02<00:02, 17.58it/s]
 47%|     | 37/79 [00:02<00:02, 19.41it/s]
 51%|     | 40/79 [00:02<00:01, 20.83it/s]
 54%|    | 43/79 [00:02<00:01, 21.93it/s]
 58%|    | 46/79 [00:02<00:01, 22.90it/s]
 62%|   | 49/79 [00:02<00:01, 22.99it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:01<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.24it/s]
 32%|      | 25/79 [00:01<00:04, 11.37it/s]
 35%|      | 28/79 [00:01<00:03, 13.59it/s]
 39%|      | 31/79 [00:02<00:03, 15.74it/s]
 43%|     | 34/79 [00:02<00:02, 17.57it/s]
 47%|     | 37/79 [00:02<00:02, 19.28it/s]
 51%|     | 40/79 [00:02<00:01, 20.48it/s]
 54%|    | 43/79 [00:02<00:01, 21.64it/s]
 58%|    | 46/79 [00:02<00:01, 22.43it/s]
 62%|   | 49/79 [00:02<00:01, 23.36it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  8.95it/s]
 32%|      | 25/79 [00:01<00:04, 11.08it/s]
 35%|      | 28/79 [00:02<00:03, 13.34it/s]
 39%|      | 31/79 [00:02<00:03, 15.50it/s]
 43%|     | 34/79 [00:02<00:02, 17.29it/s]
 47%|     | 37/79 [00:02<00:02, 18.99it/s]
 51%|     | 40/79 [00:02<00:01, 20.31it/s]
 54%|    | 43/79 [00:02<00:01, 21.32it/s]
 58%|    | 46/79 [00:02<00:01, 22.00it/s]
 62%|   | 49/79 [00:02<00:01, 22.75it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.46it/s]
 28%|       | 22/79 [00:01<00:06,  9.37it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.67it/s]
 39%|      | 31/79 [00:02<00:03, 15.84it/s]
 43%|     | 34/79 [00:02<00:02, 17.36it/s]
 47%|     | 37/79 [00:02<00:02, 18.81it/s]
 51%|     | 40/79 [00:02<00:01, 20.21it/s]
 54%|    | 43/79 [00:02<00:01, 21.12it/s]
 58%|    | 46/79 [00:02<00:01, 21.99it/s]
 62%|   | 49/79 [00:02<00:01, 22.62it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  4%|         | 3/79 [00:00<00:47,  1.59it/s]
  8%|         | 6/79 [00:01<00:33,  2.21it/s]
 11%|        | 9/79 [00:01<00:23,  3.04it/s]
 15%|        | 12/79 [00:01<00:16,  4.13it/s]
 19%|        | 15/79 [00:01<00:11,  5.51it/s]
 23%|       | 18/79 [00:01<00:08,  7.18it/s]
 27%|       | 21/79 [00:01<00:06,  9.13it/s]
 30%|       | 24/79 [00:01<00:04, 11.20it/s]
 34%|      | 27/79 [00:01<00:03, 13.42it/s]
 38%|      | 30/79 [00:02<00:03, 15.47it/s]
 42%|     | 33/79 [00:02<00:02, 17.42it/s]
 46%|     | 36/79 [00:02<00:02, 18.91it/s]
 49%|     | 39/79 [00:02<00:01, 20.12it/s]
 53%|    | 42/79 [00:02<00:01, 21.24it/s]
 57%|    | 45/79 [00:02<00:01, 22.16it/s]
 61%|    | 48/79 [00:02<00:01, 22.78it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.05it/s]
 28%|       | 22/79 [00:01<00:06,  9.01it/s]
 32%|      | 25/79 [00:01<00:04, 11.15it/s]
 35%|      | 28/79 [00:01<00:03, 13.29it/s]
 39%|      | 31/79 [00:02<00:03, 15.51it/s]
 43%|     | 34/79 [00:02<00:02, 17.22it/s]
 47%|     | 37/79 [00:02<00:02, 18.88it/s]
 51%|     | 40/79 [00:02<00:01, 20.06it/s]
 54%|    | 43/79 [00:02<00:01, 21.22it/s]
 58%|    | 46/79 [00:02<00:01, 21.70it/s]
 62%|   | 49/79 [00:02<00:01, 22.47it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  8.86it/s]
 32%|      | 25/79 [00:01<00:04, 10.84it/s]
 35%|      | 28/79 [00:02<00:03, 12.99it/s]
 39%|      | 31/79 [00:02<00:03, 14.99it/s]
 43%|     | 34/79 [00:02<00:02, 16.84it/s]
 47%|     | 37/79 [00:02<00:02, 18.46it/s]
 51%|     | 40/79 [00:02<00:01, 19.89it/s]
 54%|    | 43/79 [00:02<00:01, 20.96it/s]
 58%|    | 46/79 [00:02<00:01, 21.61it/s]
 62%|   | 49/79 [00:02<00:01, 22.20it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  4%|         | 3/79 [00:01<00:50,  1.50it/s]
  8%|         | 6/79 [00:01<00:34,  2.09it/s]
 11%|        | 9/79 [00:01<00:24,  2.87it/s]
 15%|        | 12/79 [00:01<00:17,  3.90it/s]
 19%|        | 15/79 [00:01<00:12,  5.19it/s]
 23%|       | 18/79 [00:01<00:08,  6.78it/s]
 27%|       | 21/79 [00:01<00:06,  8.64it/s]
 30%|       | 24/79 [00:01<00:05, 10.69it/s]
 34%|      | 27/79 [00:02<00:04, 12.86it/s]
 38%|      | 30/79 [00:02<00:03, 14.96it/s]
 42%|     | 33/79 [00:02<00:02, 16.87it/s]
 46%|     | 36/79 [00:02<00:02, 18.59it/s]
 49%|     | 39/79 [00:02<00:02, 19.69it/s]
 53%|    | 42/79 [00:02<00:01, 20.87it/s]
 57%|    | 45/79 [00:02<00:01, 21.75it/s]
 61%|    | 48/79 [00:02<00:01, 22.35it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.82it/s]
 28%|       | 22/79 [00:01<00:06,  8.71it/s]
 32%|      | 25/79 [00:01<00:04, 10.80it/s]
 35%|      | 28/79 [00:02<00:03, 12.96it/s]
 39%|      | 31/79 [00:02<00:03, 15.10it/s]
 43%|     | 34/79 [00:02<00:02, 17.09it/s]
 47%|     | 37/79 [00:02<00:02, 18.76it/s]
 51%|     | 40/79 [00:02<00:01, 20.18it/s]
 54%|    | 43/79 [00:02<00:01, 21.35it/s]
 58%|    | 46/79 [00:02<00:01, 22.16it/s]
 62%|   | 49/79 [00:02<00:01, 23.01it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.32it/s]
 24%|       | 19/79 [00:01<00:08,  6.97it/s]
 28%|       | 22/79 [00:01<00:06,  8.86it/s]
 32%|      | 25/79 [00:01<00:04, 10.90it/s]
 35%|      | 28/79 [00:02<00:03, 13.11it/s]
 39%|      | 31/79 [00:02<00:03, 15.25it/s]
 43%|     | 34/79 [00:02<00:02, 17.21it/s]
 47%|     | 37/79 [00:02<00:02, 18.56it/s]
 51%|     | 40/79 [00:02<00:01, 19.95it/s]
 54%|    | 43/79 [00:02<00:01, 20.96it/s]
 58%|    | 46/79 [00:02<00:01, 22.07it/s]
 62%|   | 49/79 [00:02<00:01, 22.71it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:51,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.84it/s]
 20%|        | 16/79 [00:01<00:12,  5.15it/s]
 24%|       | 19/79 [00:01<00:08,  6.76it/s]
 28%|       | 22/79 [00:01<00:06,  8.63it/s]
 32%|      | 25/79 [00:01<00:05, 10.70it/s]
 35%|      | 28/79 [00:02<00:03, 12.87it/s]
 39%|      | 31/79 [00:02<00:03, 15.09it/s]
 43%|     | 34/79 [00:02<00:02, 17.06it/s]
 47%|     | 37/79 [00:02<00:02, 18.81it/s]
 51%|     | 40/79 [00:02<00:01, 20.06it/s]
 54%|    | 43/79 [00:02<00:01, 21.22it/s]
 58%|    | 46/79 [00:02<00:01, 21.79it/s]
 62%|   | 49/79 [00:02<00:01, 22.69it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.80it/s]
 16%|        | 13/79 [00:01<00:17,  3.83it/s]
 20%|        | 16/79 [00:01<00:12,  5.12it/s]
 24%|       | 19/79 [00:01<00:08,  6.71it/s]
 28%|       | 22/79 [00:01<00:06,  8.58it/s]
 32%|      | 25/79 [00:01<00:05, 10.66it/s]
 35%|      | 28/79 [00:02<00:03, 12.84it/s]
 39%|      | 31/79 [00:02<00:03, 14.87it/s]
 43%|     | 34/79 [00:02<00:02, 16.82it/s]
 47%|     | 37/79 [00:02<00:02, 18.49it/s]
 51%|     | 40/79 [00:02<00:01, 20.09it/s]
 54%|    | 43/79 [00:02<00:01, 21.00it/s]
 58%|    | 46/79 [00:02<00:01, 21.64it/s]
 62%|   | 49/79 [00:02<00:01, 22.36it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.89it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.82it/s]
 28%|       | 22/79 [00:01<00:06,  8.71it/s]
 32%|      | 25/79 [00:01<00:05, 10.77it/s]
 35%|      | 28/79 [00:02<00:03, 12.89it/s]
 39%|      | 31/79 [00:02<00:03, 14.83it/s]
 43%|     | 34/79 [00:02<00:02, 16.77it/s]
 47%|     | 37/79 [00:02<00:02, 18.31it/s]
 51%|     | 40/79 [00:02<00:01, 19.68it/s]
 54%|    | 43/79 [00:02<00:01, 20.76it/s]
 58%|    | 46/79 [00:02<00:01, 21.73it/s]
 62%|   | 49/79 [00:02<00:01, 22.23it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  4%|         | 3/79 [00:01<00:53,  1.42it/s]
  8%|         | 6/79 [00:01<00:36,  1.98it/s]
 11%|        | 9/79 [00:01<00:25,  2.74it/s]
 15%|        | 12/79 [00:01<00:17,  3.72it/s]
 19%|        | 15/79 [00:01<00:12,  4.99it/s]
 23%|       | 18/79 [00:01<00:09,  6.54it/s]
 27%|       | 21/79 [00:01<00:06,  8.41it/s]
 30%|       | 24/79 [00:01<00:05, 10.44it/s]
 34%|      | 27/79 [00:02<00:04, 12.57it/s]
 38%|      | 30/79 [00:02<00:03, 14.75it/s]
 42%|     | 33/79 [00:02<00:02, 16.80it/s]
 46%|     | 36/79 [00:02<00:02, 18.50it/s]
 49%|     | 39/79 [00:02<00:02, 19.84it/s]
 53%|    | 42/79 [00:02<00:01, 21.06it/s]
 57%|    | 45/79 [00:02<00:01, 21.66it/s]
 61%|    | 48/79 [00:02<00:01, 22.37it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  3.99it/s]
 20%|        | 16/79 [00:01<00:11,  5.31it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.81it/s]
 32%|      | 25/79 [00:01<00:04, 10.93it/s]
 35%|      | 28/79 [00:02<00:03, 13.02it/s]
 39%|      | 31/79 [00:02<00:03, 15.15it/s]
 43%|     | 34/79 [00:02<00:02, 17.05it/s]
 47%|     | 37/79 [00:02<00:02, 18.80it/s]
 51%|     | 40/79 [00:02<00:01, 20.04it/s]
 54%|    | 43/79 [00:02<00:01, 20.90it/s]
 58%|    | 46/79 [00:02<00:01, 21.76it/s]
 62%|   | 49/79 [00:02<00:01, 22.24it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.16it/s]
 24%|       | 19/79 [00:01<00:08,  6.75it/s]
 28%|       | 22/79 [00:01<00:06,  8.59it/s]
 32%|      | 25/79 [00:01<00:05, 10.61it/s]
 35%|      | 28/79 [00:02<00:03, 12.76it/s]
 39%|      | 31/79 [00:02<00:03, 14.92it/s]
 43%|     | 34/79 [00:02<00:02, 16.82it/s]
 47%|     | 37/79 [00:02<00:02, 18.47it/s]
 51%|     | 40/79 [00:02<00:01, 19.90it/s]
 54%|    | 43/79 [00:02<00:01, 20.99it/s]
 58%|    | 46/79 [00:02<00:01, 21.91it/s]
 62%|   | 49/79 [00:02<00:01, 22.32it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:51,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.01it/s]
 13%|        | 10/79 [00:01<00:24,  2.77it/s]
 16%|        | 13/79 [00:01<00:17,  3.77it/s]
 20%|        | 16/79 [00:01<00:12,  5.06it/s]
 24%|       | 19/79 [00:01<00:09,  6.63it/s]
 28%|       | 22/79 [00:01<00:06,  8.44it/s]
 32%|      | 25/79 [00:01<00:05, 10.51it/s]
 35%|      | 28/79 [00:02<00:04, 12.63it/s]
 39%|      | 31/79 [00:02<00:03, 14.82it/s]
 43%|     | 34/79 [00:02<00:02, 16.80it/s]
 47%|     | 37/79 [00:02<00:02, 18.39it/s]
 51%|     | 40/79 [00:02<00:01, 19.89it/s]
 54%|    | 43/79 [00:02<00:01, 21.04it/s]
 58%|    | 46/79 [00:02<00:01, 21.74it/s]
 62%|   | 49/79 [00:02<00:01, 22.26it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:20,  1.03s/it]
  5%|         | 4/79 [00:01<00:55,  1.36it/s]
  9%|         | 7/79 [00:01<00:37,  1.90it/s]
 13%|        | 10/79 [00:01<00:26,  2.62it/s]
 16%|        | 13/79 [00:01<00:18,  3.58it/s]
 20%|        | 16/79 [00:01<00:13,  4.81it/s]
 24%|       | 19/79 [00:01<00:09,  6.32it/s]
 28%|       | 22/79 [00:01<00:06,  8.16it/s]
 32%|      | 25/79 [00:02<00:05, 10.14it/s]
 35%|      | 28/79 [00:02<00:04, 12.30it/s]
 39%|      | 31/79 [00:02<00:03, 14.49it/s]
 43%|     | 34/79 [00:02<00:02, 16.55it/s]
 47%|     | 37/79 [00:02<00:02, 18.09it/s]
 51%|     | 40/79 [00:02<00:01, 19.66it/s]
 54%|    | 43/79 [00:02<00:01, 20.93it/s]
 58%|    | 46/79 [00:02<00:01, 21.98it/s]
 62%|   | 49/79 [00:03<00:01, 22.64it/s]
 66%|   | 52/79 [00:03<00:0137it/s]
 68%|   | 54/79 [00:02<00:01, 24.63it/s]
 72%|  | 57/79 [00:02<00:00, 24.72it/s]
 76%|  | 60/79 [00:03<00:00, 24.68it/s]
 80%|  | 63/79 [00:03<00:00, 24.52it/s]
 84%| | 66/79 [00:03<00:00, 24.69it/s]
 87%| | 69/79 [00:03<00:00, 24.76it/s]
 91%| | 72/79 [00:03<00:00, 24.77it/s]
 95%|| 75/79 [00:03<00:00, 25.39it/s]
 99%|| 78/79 [00:03<00:00, 25.88it/s]
100%|| 79/79 [00:03<00:00, 20.10it/s]
, 23.87it/s]
 70%|   | 55/79 [00:02<00:00, 24.15it/s]
 73%|  | 58/79 [00:03<00:00, 24.29it/s]
 77%|  | 61/79 [00:03<00:00, 24.61it/s]
 81%|  | 64/79 [00:03<00:00, 24.67it/s]
 85%| | 67/79 [00:03<00:00, 24.85it/s]
 89%| | 70/79 [00:03<00:00, 24.82it/s]
 92%|| 73/79 [00:03<00:00, 25.05it/s]
 96%|| 76/79 [00:03<00:00, 25.51it/s]
100%|| 79/79 [00:03<00:00, 26.45it/s]
, 24.06it/s]
 70%|   | 55/79 [00:02<00:00, 24.22it/s]
 73%|  | 58/79 [00:03<00:00, 24.35it/s]
 77%|  | 61/79 [00:03<00:00, 24.72it/s]
 81%|  | 64/79 [00:03<00:00, 24.90it/s]
 85%| | 67/79 [00:03<00:00, 24.97it/s]
 89%| | 70/79 [00:03<00:00, 24.58it/s]
 92%|| 73/79 [00:03<00:00, 25.17it/s]
 96%|| 76/79 [00:03<00:00, 25.62it/s]
100%|| 79/79 [00:03<00:00, 26.40it/s]
, 23.78it/s]
 70%|   | 55/79 [00:02<00:00, 24.35it/s]
 73%|  | 58/79 [00:03<00:00, 24.33it/s]
 77%|  | 61/79 [00:03<00:00, 24.36it/s]
 81%|  | 64/79 [00:03<00:00, 24.36it/s]
 85%| | 67/79 [00:03<00:00, 24.50it/s]
 89%| | 70/79 [00:03<00:00, 24.75it/s]
 92%|| 73/79 [00:03<00:00, 24.95it/s]
 96%|| 76/79 [00:03<00:00, 25.58it/s]
100%|| 79/79 [00:03<00:00, 26.38it/s]
, 23.48it/s]
 70%|   | 55/79 [00:03<00:01, 23.82it/s]
 73%|  | 58/79 [00:03<00:00, 24.07it/s]
 77%|  | 61/79 [00:03<00:00, 24.19it/s]
 81%|  | 64/79 [00:03<00:00, 24.33it/s]
 85%| | 67/79 [00:03<00:00, 24.48it/s]
 89%| | 70/79 [00:03<00:00, 24.58it/s]
 92%|| 73/79 [00:03<00:00, 24.77it/s]
 96%|| 76/79 [00:03<00:00, 25.58it/s]
100%|| 79/79 [00:03<00:00, 26.50it/s]
81it/s]
 68%|   | 54/79 [00:03<00:01, 23.45it/s]
 72%|  | 57/79 [00:03<00:00, 23.61it/s]
 76%|  | 60/79 [00:03<00:00, 23.86it/s]
 80%|  | 63/79 [00:03<00:00, 23.67it/s]
 84%| | 66/79 [00:03<00:00, 24.02it/s]
 87%| | 69/79 [00:03<00:00, 24.05it/s]
 91%| | 72/79 [00:03<00:00, 24.28it/s]
 95%|| 75/79 [00:03<00:00, 25.06it/s]
 99%|| 78/79 [00:03<00:00, 26.09it/s]
100%|| 79/79 [00:04<00:00, 19.39it/s]
, 23.85it/s]
 70%|   | 55/79 [00:03<00:00, 24.41it/s]
 73%|  | 58/79 [00:03<00:00, 24.61it/s]
 77%|  | 61/79 [00:03<00:00, 24.85it/s]
 81%|  | 64/79 [00:03<00:00, 25.07it/s]
 85%| | 67/79 [00:03<00:00, 24.75it/s]
 89%| | 70/79 [00:03<00:00, 24.92it/s]
 92%|| 73/79 [00:03<00:00, 24.90it/s]
 96%|| 76/79 [00:03<00:00, 25.56it/s]
100%|| 79/79 [00:03<00:00, 26.34it/s]
, 23.79it/s]
 70%|   | 55/79 [00:03<00:00, 24.24it/s]
 73%|  | 58/79 [00:03<00:00, 24.52it/s]
 77%|  | 61/79 [00:03<00:00, 24.54it/s]
 81%|  | 64/79 [00:03<00:00, 24.46it/s]
 85%| | 67/79 [00:03<00:00, 24.70it/s]
 89%| | 70/79 [00:03<00:00, 25.03it/s]
 92%|| 73/79 [00:03<00:00, 24.84it/s]
 96%|| 76/79 [00:03<00:00, 25.39it/s]
100%|| 79/79 [00:03<00:00, 26.13it/s]
, 23.20it/s]
 70%|   | 55/79 [00:03<00:01, 23.31it/s]
 73%|  | 58/79 [00:03<00:00, 23.55it/s]
 77%|  | 61/79 [00:03<00:00, 23.67it/s]
 81%|  | 64/79 [00:03<00:00, 23.94it/s]
 85%| | 67/79 [00:03<00:00, 24.15it/s]
 89%| | 70/79 [00:03<00:00, 24.18it/s]
 92%|| 73/79 [00:03<00:00, 24.72it/s]
 96%|| 76/79 [00:03<00:00, 25.30it/s]
100%|| 79/79 [00:04<00:00, 26.10it/s]
38it/s]
 68%|   | 54/79 [00:03<00:01, 23.78it/s]
 72%|  | 57/79 [00:03<00:00, 24.09it/s]
 76%|  | 60/79 [00:03<00:00, 24.33it/s]
 80%|  | 63/79 [00:03<00:00, 24.09it/s]
 84%| | 66/79 [00:03<00:00, 24.10it/s]
 87%| | 69/79 [00:03<00:00, 24.04it/s]
 91%| | 72/79 [00:03<00:00, 24.37it/s]
 95%|| 75/79 [00:03<00:00, 24.86it/s]
 99%|| 78/79 [00:03<00:00, 25.79it/s]
100%|| 79/79 [00:04<00:00, 19.37it/s]
, 22.86it/s]
 70%|   | 55/79 [00:03<00:01, 23.22it/s]
 73%|  | 58/79 [00:03<00:00, 23.37it/s]
 77%|  | 61/79 [00:03<00:00, 23.62it/s]
 81%|  | 64/79 [00:03<00:00, 23.74it/s]
 85%| | 67/79 [00:03<00:00, 24.03it/s]
 89%| | 70/79 [00:03<00:00, 24.16it/s]
 92%|| 73/79 [00:03<00:00, 24.37it/s]
 96%|| 76/79 [00:03<00:00, 25.15it/s]
100%|| 79/79 [00:04<00:00, 26.10it/s]
43it/s]
 68%|   | 54/79 [00:03<00:01, 23.32it/s]
 72%|  | 57/79 [00:03<00:00, 23.61it/s]
 76%|  | 60/79 [00:03<00:00, 23.80it/s]
 80%|  | 63/79 [00:03<00:00, 24.08it/s]
 84%| | 66/79 [00:03<00:00, 23.66it/s]
 87%| | 69/79 [00:03<00:00, 23.83it/s]
 91%| | 72/79 [00:03<00:00, 23.72it/s]
 95%|| 75/79 [00:03<00:00, 24.99it/s]
 99%|| 78/79 [00:04<00:00, 25.42it/s]
100%|| 79/79 [00:04<00:00, 19.24it/s]
67it/s]
 68%|   | 54/79 [00:03<00:01, 23.78it/s]
 72%|  | 57/79 [00:03<00:00, 24.06it/s]
 76%|  | 60/79 [00:03<00:00, 24.35it/s]
 80%|  | 63/79 [00:03<00:00, 24.27it/s]
 84%| | 66/79 [00:03<00:00, 24.21it/s]
 87%| | 69/79 [00:03<00:00, 24.36it/s]
 91%| | 72/79 [00:03<00:00, 24.15it/s]
 95%|| 75/79 [00:03<00:00, 24.91it/s]
 99%|| 78/79 [00:04<00:00, 25.35it/s]
100%|| 79/79 [00:04<00:00, 19.30it/s]
, 23.25it/s]
 70%|   | 55/79 [00:03<00:01, 23.47it/s]
 73%|  | 58/79 [00:03<00:00, 23.43it/s]
 77%|  | 61/79 [00:03<00:00, 23.56it/s]
 81%|  | 64/79 [00:03<00:00, 23.67it/s]
 85%| | 67/79 [00:03<00:00, 23.97it/s]
 89%| | 70/79 [00:03<00:00, 24.18it/s]
 92%|| 73/79 [00:03<00:00, 24.61it/s]
 96%|| 76/79 [00:03<00:00, 25.31it/s]
100%|| 79/79 [00:04<00:00, 26.28it/s]
, 23.59it/s]
 70%|   | 55/79 [00:03<00:00, 24.04it/s]
 73%|  | 58/79 [00:03<00:00, 24.25it/s]
 77%|  | 61/79 [00:03<00:00, 24.28it/s]
 81%|  | 64/79 [00:03<00:00, 24.55it/s]
 85%| | 67/79 [00:03<00:00, 24.42it/s]
 89%| | 70/79 [00:03<00:00, 24.60it/s]
 92%|| 73/79 [00:03<00:00, 24.77it/s]
 96%|| 76/79 [00:03<00:00, 25.34it/s]
100%|| 79/79 [00:04<00:00, 26.14it/s]
, 23.01it/s]
 70%|   | 55/79 [00:03<00:01, 23.34it/s]
 73%|  | 58/79 [00:03<00:00, 23.44it/s]
 77%|  | 61/79 [00:03<00:00, 23.62it/s]
 81%|  | 64/79 [00:03<00:00, 23.95it/s]
 85%| | 67/79 [00:03<00:00, 23.85it/s]
 89%| | 70/79 [00:03<00:00, 23.63it/s]
 92%|| 73/79 [00:03<00:00, 24.18it/s]
 96%|| 76/79 [00:03<00:00, 25.05it/s]
100%|| 79/79 [00:04<00:00, 26.00it/s]
, 23.35it/s]
 70%|   | 55/79 [00:03<00:01, 23.58it/s]
 73%|  | 58/79 [00:03<00:00, 23.91it/s]
 77%|  | 61/79 [00:03<00:00, 24.10it/s]
 81%|  | 64/79 [00:03<00:00, 24.12it/s]
 85%| | 67/79 [00:03<00:00, 24.12it/s]
 89%| | 70/79 [00:03<00:00, 24.16it/s]
 92%|| 73/79 [00:03<00:00, 24.58it/s]
 96%|| 76/79 [00:03<00:00, 25.69it/s]
100%|| 79/79 [00:04<00:00, 26.08it/s]
04it/s]
 68%|   | 54/79 [00:03<00:01, 23.38it/s]
 72%|  | 57/79 [00:03<00:00, 23.73it/s]
 76%|  | 60/79 [00:03<00:00, 23.92it/s]
 80%|  | 63/79 [00:03<00:00, 23.53it/s]
 84%| | 66/79 [00:03<00:00, 23.90it/s]
 87%| | 69/79 [00:03<00:00, 23.85it/s]
 91%| | 72/79 [00:03<00:00, 24.35it/s]
 95%|| 75/79 [00:03<00:00, 24.94it/s]
 99%|| 78/79 [00:04<00:00, 25.59it/s]
100%|| 79/79 [00:04<00:00, 19.07it/s]
36it/s]
 68%|   | 54/79 [00:03<00:01, 23.68it/s]
 72%|  | 57/79 [00:03<00:00, 23.99it/s]
 76%|  | 60/79 [00:03<00:00, 24.38it/s]
 80%|  | 63/79 [00:03<00:00, 24.47it/s]
 84%| | 66/79 [00:03<00:00, 24.55it/s]
 87%| | 69/79 [00:03<00:00, 24.68it/s]
 91%| | 72/79 [00:03<00:00, 24.57it/s]
 95%|| 75/79 [00:03<00:00, 25.28it/s]
 99%|| 78/79 [00:04<00:00, 25.60it/s]
100%|| 79/79 [00:04<00:00, 19.16it/s]
, 23.46it/s]
 70%|   | 55/79 [00:03<00:01, 23.62it/s]
 73%|  | 58/79 [00:03<00:00, 24.13it/s]
 77%|  | 61/79 [00:03<00:00, 24.09it/s]
 81%|  | 64/79 [00:03<00:00, 24.37it/s]
 85%| | 67/79 [00:03<00:00, 24.42it/s]
 89%| | 70/79 [00:03<00:00, 24.54it/s]
 92%|| 73/79 [00:03<00:00, 24.95it/s]
 96%|| 76/79 [00:03<00:00, 25.57it/s]
100%|| 79/79 [00:04<00:00, 26.27it/s]
, 23.35it/s]
 70%|   | 55/79 [00:03<00:01, 23.87it/s]
 73%|  | 58/79 [00:03<00:00, 24.09it/s]
 77%|  | 61/79 [00:03<00:00, 24.31it/s]
 81%|  | 64/79 [00:03<00:00, 24.54it/s]
 85%| | 67/79 [00:03<00:00, 24.38it/s]
 89%| | 70/79 [00:03<00:00, 24.36it/s]
 92%|| 73/79 [00:03<00:00, 24.75it/s]
 96%|| 76/79 [00:03<00:00, 25.49it/s]
100%|| 79/79 [00:04<00:00, 26.46it/s]
, 23.08it/s]
 70%|   | 55/79 [00:03<00:01, 23.71it/s]
 73%|  | 58/79 [00:03<00:00, 24.03it/s]
 77%|  | 61/79 [00:03<00:00, 24.09it/s]
 81%|  | 64/79 [00:03<00:00, 24.19it/s]
 85%| | 67/79 [00:03<00:00, 24.32it/s]
 89%| | 70/79 [00:03<00:00, 24.35it/s]
 92%|| 73/79 [00:03<00:00, 24.50it/s]
 96%|| 76/79 [00:03<00:00, 25.27it/s]
100%|| 79/79 [00:04<00:00, 25.93it/s]
, 23.28it/s]
 70%|   | 55/79 [00:03<00:01, 23.66it/s]
 73%|  | 58/79 [00:03<00:00, 24.03it/s]
 77%|  | 61/79 [00:03<00:00, 24.15it/s]
 81%|  | 64/79 [00:03<00:00, 24.34it/s]
 85%| | 67/79 [00:03<00:00, 24.52it/s]
 89%| | 70/79 [00:03<00:00, 24.52it/s]
 92%|| 73/79 [00:03<00:00, 24.97it/s]
 96%|| 76/79 [00:03<00:00, 25.55it/s]
100%|| 79/79 [00:04<00:00, 26.42it/s]
, 22.99it/s]
 70%|   | 55/79 [00:03<00:01, 23.41it/s]
 73%|  | 58/79 [00:03<00:00, 23.51it/s]
 77%|  | 61/79 [00:03<00:00, 23.76it/s]
 81%|  | 64/79 [00:03<00:00, 23.90it/s]
 85%| | 67/79 [00:03<00:00, 23.92it/s]
 89%| | 70/79 [00:03<00:00, 23.32it/s]
 92%|| 73/79 [00:03<00:00, 24.09it/s]
 96%|| 76/79 [00:04<00:00, 24.70it/s]
100%|| 79/79 [00:04<00:00, 25.75it/s]
, 23.27it/s]
 70%|   | 55/79 [00:03<00:01, 23.34it/s]
 73%|  | 58/79 [00:03<00:00, 23.72it/s]
 77%|  | 61/79 [00:03<00:00, 23.71it/s]
 81%|  | 64/79 [00:03<00:00, 23.81it/s]
 85%| | 67/79 [00:03<00:00, 24.02it/s]
 89%| | 70/79 [00:03<00:00, 23.84it/s]
 92%|| 73/79 [00:03<00:00, 24.34it/s]
 96%|| 76/79 [00:04<00:00, 25.02it/s]
100%|| 79/79 [00:04<00:00, 25.82it/s]
, 22.65it/s]
 70%|   | 55/79 [00:03<00:01, 23.06it/s]
 73%|  | 58/79 [00:03<00:00, 23.63it/s]
 77%|  | 61/79 [00:03<00:00, 23.67it/s]
 81%|  | 64/79 [00:03<00:00, 23.89it/s]
 85%| | 67/79 [00:03<00:00, 24.19it/s]
 89%| | 70/79 [00:03<00:00, 24.32it/s]
 92%|| 73/79 [00:03<00:00, 24.60it/s]
 96%|| 76/79 [00:04<00:00, 25.38it/s]
100%|| 79/79 [00:04<00:00, 26.24it/s]
, 22.76it/s]
 70%|   | 55/79 [00:03<00:01, 23.51it/s]
 73%|  | 58/79 [00:03<00:00, 23.67it/s]
 77%|  | 61/79 [00:03<00:00, 24.14it/s]
 81%|  | 64/79 [00:03<00:00, 24.30it/s]
 85%| | 67/79 [00:03<00:00, 24.61it/s]
 89%| | 70/79 [00:03<00:00, 24.53it/s]
 92%|| 73/79 [00:03<00:00, 24.85it/s]
 96%|| 76/79 [00:04<00:00, 25.36it/s]
100%|| 79/79 [00:04<00:00, 26.07it/s]
79it/s]
 68%|   | 54/79 [00:03<00:01, 22.99it/s]
 72%|  | 57/79 [00:03<00:00, 23.22it/s]
 76%|  | 60/79 [00:03<00:00, 23.05it/s]
 80%|  | 63/79 [00:03<00:00, 23.19it/s]
 84%| | 66/79 [00:03<00:00, 23.46it/s]
 87%| | 69/79 [00:03<00:00, 23.44it/s]
 91%| | 72/79 [00:03<00:00, 23.70it/s]
 95%|| 75/79 [00:04<00:00, 24.56it/s]
 99%|| 78/79 [00:04<00:00, 25.28it/s]
100%|| 79/79 [00:04<00:00, 18.58it/s]
68it/s]
 68%|   | 54/79 [00:03<00:01, 23.20it/s]
 72%|  | 57/79 [00:03<00:00, 23.51it/s]
 76%|  | 60/79 [00:03<00:00, 23.39it/s]
 80%|  | 63/79 [00:03<00:00, 23.62it/s]
 84%| | 66/79 [00:03<00:00, 23.95it/s]
 87%| | 69/79 [00:03<00:00, 23.92it/s]
 91%| | 72/79 [00:03<00:00, 24.38it/s]
 95%|| 75/79 [00:04<00:00, 25.24it/s]
 99%|| 78/79 [00:04<00:00, 25.74it/s]
100%|| 79/79 [00:04<00:00, 18.61it/s]
, 22.66it/s]
 70%|   | 55/79 [00:03<00:01, 22.69it/s]
 73%|  | 58/79 [00:03<00:00, 23.09it/s]
 77%|  | 61/79 [00:03<00:00, 23.05it/s]
 81%|  | 64/79 [00:03<00:00, 23.30it/s]
 85%| | 67/79 [00:03<00:00, 23.53it/s]
 89%| | 70/79 [00:03<00:00, 23.56it/s]
 92%|| 73/79 [00:03<00:00, 24.07it/s]
 96%|| 76/79 [00:04<00:00, 24.91it/s]
100%|| 79/79 [00:04<00:00, 25.91it/s]
, 22.56it/s]
 70%|   | 55/79 [00:03<00:01, 22.75it/s]
 73%|  | 58/79 [00:03<00:00, 23.16it/s]
 77%|  | 61/79 [00:03<00:00, 23.18it/s]
 81%|  | 64/79 [00:03<00:00, 23.23it/s]
 85%| | 67/79 [00:03<00:00, 23.51it/s]
 89%| | 70/79 [00:03<00:00, 23.16it/s]
 92%|| 73/79 [00:03<00:00, 23.65it/s]
 96%|| 76/79 [00:04<00:00, 24.53it/s]
100%|| 79/79 [00:04<00:00, 25.60it/s]
, 23.08it/s]
 70%|   | 55/79 [00:03<00:01, 23.60it/s]
 73%|  | 58/79 [00:03<00:00, 23.64it/s]
 77%|  | 61/79 [00:03<00:00, 23.80it/s]
 81%|  | 64/79 [00:03<00:00, 23.84it/s]
 85%| | 67/79 [00:03<00:00, 23.92it/s]
 89%| | 70/79 [00:03<00:00, 24.12it/s]
 92%|| 73/79 [00:03<00:00, 24.43it/s]
 96%|| 76/79 [00:04<00:00, 24.96it/s]
100%|| 79/79 [00:04<00:00, 25.91it/s]
2020-06-23 15:38:14,222 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.276455 (0.027369309997558593 s / img per device, on 32 devices)
2020-06-23 15:38:14,244 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:38:14,244 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:38:14,265 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592951906637, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 9, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592951906637, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 9}}

Grad overflow on iteration  7336

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0


Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0


Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0


Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
Grad overflow on iteration  7336

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0


Grad overflow on iteration  7336

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
Grad overflow on iteration  7336


Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336

Grad overflow on iteration  7336
Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
Grad overflow on iteration  7336

Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0

Grad overflow on iteration  7336

Grad overflow on iteration  7336
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
2020-06-23 15:38:27,086 maskrcnn_benchmark.trainer INFO: eta: 1:09:55  iter: 7340  loss: 0.6288 (0.7823)  loss_classifier: 0.2101 (0.2889)  loss_box_reg: 0.1007 (0.1249)  loss_mask: 0.2760 (0.3082)  loss_objectness: 0.0200 (0.0393)  loss_rpn_box_reg: 0.0116 (0.0210)  time: 0.1107 (0.1285)  data: 0.0015 (0.0200)  lr: 0.160000  max mem: 5110
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 15:38:29,281 maskrcnn_benchmark.trainer INFO: eta: 1:09:51  iter: 7360  loss: 0.5852 (0.7819)  loss_classifier: 0.2175 (0.2888)  loss_box_reg: 0.0969 (0.1248)  loss_mask: 0.2545 (0.3081)  loss_objectness: 0.0183 (0.0393)  loss_rpn_box_reg: 0.0077 (0.0210)  time: 0.1100 (0.1284)  data: 0.0015 (0.0200)  lr: 0.160000  max mem: 5110
2020-06-23 15:38:31,466 maskrcnn_benchmark.trainer INFO: eta: 1:09:47  iter: 7380  loss: 0.6215 (0.7816)  loss_classifier: 0.2221 (0.2886)  loss_box_reg: 0.0988 (0.1248)  loss_mask: 0.2665 (0.3080)  loss_objectness: 0.0254 (0.0393)  loss_rpn_box_reg: 0.0089 (0.0209)  time: 0.1089 (0.1284)  data: 0.0015 (0.0199)  lr: 0.160000  max mem: 5110
2020-06-23 15:38:33,665 maskrcnn_benchmark.trainer INFO: eta: 1:09:42  iter: 7400  loss: 0.6725 (0.7813)  loss_classifier: 0.2230 (0.2885)  loss_box_reg: 0.1037 (0.1247)  loss_mask: 0.2563 (0.3079)  loss_objectness: 0.0164 (0.0392)  loss_rpn_box_reg: 0.0075 (0.0209)  time: 0.1089 (0.1283)  data: 0.0015 (0.0199)  lr: 0.160000  max mem: 5110
2020-06-23 15:38:35,836 maskrcnn_benchmark.trainer INFO: eta: 1:09:38  iter: 7420  loss: 0.6942 (0.7811)  loss_classifier: 0.2399 (0.2884)  loss_box_reg: 0.1207 (0.1247)  loss_mask: 0.2901 (0.3078)  loss_objectness: 0.0170 (0.0392)  loss_rpn_box_reg: 0.0094 (0.0209)  time: 0.1085 (0.1283)  data: 0.0015 (0.0198)  lr: 0.160000  max mem: 5110
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=1.06s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 15:38:38,013 maskrcnn_benchmark.trainer INFO: eta: 1:09:34  iter: 7440  loss: 0.6150 (0.7808)  loss_classifier: 0.2154 (0.2882)  loss_box_reg: 0.0922 (0.1247)  loss_mask: 0.2679 (0.3077)  loss_objectness: 0.0261 (0.0392)  loss_rpn_box_reg: 0.0151 (0.0209)  time: 0.1085 (0.1282)  data: 0.0016 (0.0198)  lr: 0.160000  max mem: 5110
DONE (t=1.99s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.27779
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.48192
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.28808
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15844
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.31024
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.36053
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25812
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.42038
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44400
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27292
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.48496
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.54743
2020-06-23 15:38:40,190 maskrcnn_benchmark.trainer INFO: eta: 1:09:30  iter: 7460  loss: 0.5886 (0.7804)  loss_classifier: 0.1989 (0.2881)  loss_box_reg: 0.1053 (0.1246)  loss_mask: 0.2618 (0.3076)  loss_objectness: 0.0178 (0.0392)  loss_rpn_box_reg: 0.0077 (0.0209)  time: 0.1084 (0.1282)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5110
2020-06-23 15:38:42,381 maskrcnn_benchmark.trainer INFO: eta: 1:09:25  iter: 7480  loss: 0.6266 (0.7800)  loss_classifier: 0.2190 (0.2880)  loss_box_reg: 0.0938 (0.1246)  loss_mask: 0.2542 (0.3075)  loss_objectness: 0.0193 (0.0391)  loss_rpn_box_reg: 0.0079 (0.0209)  time: 0.1093 (0.1281)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5110
2020-06-23 15:38:44,568 maskrcnn_benchmark.trainer INFO: eta: 1:09:21  iter: 7500  loss: 0.5933 (0.7797)  loss_classifier: 0.2005 (0.2878)  loss_box_reg: 0.1033 (0.1245)  loss_mask: 0.2692 (0.3074)  loss_objectness: 0.0174 (0.0391)  loss_rpn_box_reg: 0.0110 (0.0209)  time: 0.1093 (0.1281)  data: 0.0015 (0.0196)  lr: 0.160000  max mem: 5110
2020-06-23 15:38:46,749 maskrcnn_benchmark.trainer INFO: eta: 1:09:17  iter: 7520  loss: 0.6743 (0.7795)  loss_classifier: 0.2467 (0.2877)  loss_box_reg: 0.1105 (0.1245)  loss_mask: 0.2617 (0.3072)  loss_objectness: 0.0275 (0.0391)  loss_rpn_box_reg: 0.0108 (0.0209)  time: 0.1094 (0.1280)  data: 0.0015 (0.0196)  lr: 0.160000  max mem: 5110
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:38:48,951 maskrcnn_benchmark.trainer INFO: eta: 1:09:13  iter: 7540  loss: 0.5708 (0.7790)  loss_classifier: 0.2008 (0.2875)  loss_box_reg: 0.0905 (0.1244)  loss_mask: 0.2438 (0.3071)  loss_objectness: 0.0204 (0.0391)  loss_rpn_box_reg: 0.0061 (0.0209)  time: 0.1099 (0.1280)  data: 0.0014 (0.0195)  lr: 0.160000  max mem: 5110
2020-06-23 15:38:51,139 maskrcnn_benchmark.trainer INFO: eta: 1:09:09  iter: 7560  loss: 0.6586 (0.7788)  loss_classifier: 0.2410 (0.2874)  loss_box_reg: 0.1055 (0.1244)  loss_mask: 0.2658 (0.3070)  loss_objectness: 0.0171 (0.0391)  loss_rpn_box_reg: 0.0079 (0.0209)  time: 0.1096 (0.1279)  data: 0.0015 (0.0195)  lr: 0.160000  max mem: 5110
DONE (t=2.62s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:38:53,330 maskrcnn_benchmark.trainer INFO: eta: 1:09:05  iter: 7580  loss: 0.7185 (0.7785)  loss_classifier: 0.2388 (0.2873)  loss_box_reg: 0.1161 (0.1244)  loss_mask: 0.2671 (0.3069)  loss_objectness: 0.0269 (0.0390)  loss_rpn_box_reg: 0.0089 (0.0209)  time: 0.1091 (0.1279)  data: 0.0015 (0.0194)  lr: 0.160000  max mem: 5110
DONE (t=3.20s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.26683
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.45658
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.27716
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11289
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.29218
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.39466
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25457
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.40091
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.42110
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.23656
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.46371
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.54184
2020-06-23 15:38:55,086 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.2777888838981684, segm mAP: 0.2668258208544446
:::MLLOG {"namespace": "", "time_ms": 1592951935086, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.2777888838981684, "SEGM": 0.2668258208544446}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 8}}
:::MLLOG {"namespace": "", "time_ms": 1592951935086, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 8}}
2020-06-23 15:38:55,736 maskrcnn_benchmark.trainer INFO: eta: 1:09:01  iter: 7600  loss: 0.6364 (0.7783)  loss_classifier: 0.2221 (0.2872)  loss_box_reg: 0.1086 (0.1243)  loss_mask: 0.2724 (0.3068)  loss_objectness: 0.0146 (0.0390)  loss_rpn_box_reg: 0.0124 (0.0209)  time: 0.1087 (0.1278)  data: 0.0015 (0.0194)  lr: 0.160000  max mem: 5110
2020-06-23 15:38:57,907 maskrcnn_benchmark.trainer INFO: eta: 1:08:57  iter: 7620  loss: 0.6632 (0.7780)  loss_classifier: 0.2479 (0.2872)  loss_box_reg: 0.1085 (0.1243)  loss_mask: 0.2752 (0.3067)  loss_objectness: 0.0226 (0.0390)  loss_rpn_box_reg: 0.0098 (0.0209)  time: 0.1085 (0.1278)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:00,121 maskrcnn_benchmark.trainer INFO: eta: 1:08:53  iter: 7640  loss: 0.6419 (0.7777)  loss_classifier: 0.2385 (0.2870)  loss_box_reg: 0.0990 (0.1243)  loss_mask: 0.2768 (0.3066)  loss_objectness: 0.0150 (0.0390)  loss_rpn_box_reg: 0.0075 (0.0208)  time: 0.1094 (0.1277)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:02,307 maskrcnn_benchmark.trainer INFO: eta: 1:08:49  iter: 7660  loss: 0.6556 (0.7776)  loss_classifier: 0.2253 (0.2870)  loss_box_reg: 0.1107 (0.1242)  loss_mask: 0.2686 (0.3065)  loss_objectness: 0.0241 (0.0390)  loss_rpn_box_reg: 0.0139 (0.0209)  time: 0.1091 (0.1277)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:04,514 maskrcnn_benchmark.trainer INFO: eta: 1:08:45  iter: 7680  loss: 0.6497 (0.7772)  loss_classifier: 0.2329 (0.2869)  loss_box_reg: 0.1075 (0.1242)  loss_mask: 0.2515 (0.3064)  loss_objectness: 0.0201 (0.0390)  loss_rpn_box_reg: 0.0084 (0.0208)  time: 0.1104 (0.1277)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:06,698 maskrcnn_benchmark.trainer INFO: eta: 1:08:41  iter: 7700  loss: 0.7539 (0.7771)  loss_classifier: 0.2806 (0.2868)  loss_box_reg: 0.1168 (0.1242)  loss_mask: 0.2788 (0.3063)  loss_objectness: 0.0220 (0.0390)  loss_rpn_box_reg: 0.0085 (0.0208)  time: 0.1089 (0.1276)  data: 0.0016 (0.0192)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:08,877 maskrcnn_benchmark.trainer INFO: eta: 1:08:37  iter: 7720  loss: 0.7102 (0.7770)  loss_classifier: 0.2503 (0.2867)  loss_box_reg: 0.1215 (0.1242)  loss_mask: 0.2881 (0.3063)  loss_objectness: 0.0182 (0.0389)  loss_rpn_box_reg: 0.0102 (0.0208)  time: 0.1087 (0.1276)  data: 0.0016 (0.0191)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:11,069 maskrcnn_benchmark.trainer INFO: eta: 1:08:33  iter: 7740  loss: 0.6957 (0.7768)  loss_classifier: 0.2442 (0.2867)  loss_box_reg: 0.1058 (0.1242)  loss_mask: 0.2832 (0.3062)  loss_objectness: 0.0180 (0.0389)  loss_rpn_box_reg: 0.0076 (0.0208)  time: 0.1094 (0.1275)  data: 0.0015 (0.0191)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:13,251 maskrcnn_benchmark.trainer INFO: eta: 1:08:29  iter: 7760  loss: 0.5557 (0.7764)  loss_classifier: 0.2053 (0.2865)  loss_box_reg: 0.0887 (0.1241)  loss_mask: 0.2396 (0.3061)  loss_objectness: 0.0194 (0.0389)  loss_rpn_box_reg: 0.0068 (0.0208)  time: 0.1084 (0.1275)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:15,443 maskrcnn_benchmark.trainer INFO: eta: 1:08:25  iter: 7780  loss: 0.6627 (0.7761)  loss_classifier: 0.2133 (0.2864)  loss_box_reg: 0.1017 (0.1241)  loss_mask: 0.2637 (0.3060)  loss_objectness: 0.0224 (0.0389)  loss_rpn_box_reg: 0.0077 (0.0208)  time: 0.1097 (0.1274)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:17,612 maskrcnn_benchmark.trainer INFO: eta: 1:08:21  iter: 7800  loss: 0.5542 (0.7756)  loss_classifier: 0.1886 (0.2862)  loss_box_reg: 0.1018 (0.1240)  loss_mask: 0.2418 (0.3059)  loss_objectness: 0.0204 (0.0388)  loss_rpn_box_reg: 0.0058 (0.0208)  time: 0.1081 (0.1274)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:19,781 maskrcnn_benchmark.trainer INFO: eta: 1:08:17  iter: 7820  loss: 0.6896 (0.7755)  loss_classifier: 0.2597 (0.2861)  loss_box_reg: 0.1127 (0.1240)  loss_mask: 0.2665 (0.3058)  loss_objectness: 0.0220 (0.0388)  loss_rpn_box_reg: 0.0075 (0.0208)  time: 0.1078 (0.1273)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:21,952 maskrcnn_benchmark.trainer INFO: eta: 1:08:12  iter: 7840  loss: 0.6229 (0.7751)  loss_classifier: 0.2181 (0.2860)  loss_box_reg: 0.0965 (0.1239)  loss_mask: 0.2633 (0.3057)  loss_objectness: 0.0261 (0.0388)  loss_rpn_box_reg: 0.0117 (0.0208)  time: 0.1079 (0.1273)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:24,140 maskrcnn_benchmark.trainer INFO: eta: 1:08:08  iter: 7860  loss: 0.6848 (0.7750)  loss_classifier: 0.2331 (0.2859)  loss_box_reg: 0.1160 (0.1239)  loss_mask: 0.2649 (0.3056)  loss_objectness: 0.0299 (0.0388)  loss_rpn_box_reg: 0.0138 (0.0208)  time: 0.1088 (0.1272)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:26,315 maskrcnn_benchmark.trainer INFO: eta: 1:08:04  iter: 7880  loss: 0.6513 (0.7747)  loss_classifier: 0.2326 (0.2858)  loss_box_reg: 0.0910 (0.1238)  loss_mask: 0.2795 (0.3055)  loss_objectness: 0.0260 (0.0388)  loss_rpn_box_reg: 0.0074 (0.0208)  time: 0.1092 (0.1272)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:28,515 maskrcnn_benchmark.trainer INFO: eta: 1:08:00  iter: 7900  loss: 0.4962 (0.7742)  loss_classifier: 0.1816 (0.2856)  loss_box_reg: 0.0804 (0.1238)  loss_mask: 0.2402 (0.3053)  loss_objectness: 0.0167 (0.0387)  loss_rpn_box_reg: 0.0078 (0.0208)  time: 0.1107 (0.1271)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:30,714 maskrcnn_benchmark.trainer INFO: eta: 1:07:57  iter: 7920  loss: 0.6843 (0.7740)  loss_classifier: 0.2560 (0.2855)  loss_box_reg: 0.1145 (0.1237)  loss_mask: 0.2625 (0.3052)  loss_objectness: 0.0266 (0.0387)  loss_rpn_box_reg: 0.0109 (0.0208)  time: 0.1094 (0.1271)  data: 0.0016 (0.0187)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:32,900 maskrcnn_benchmark.trainer INFO: eta: 1:07:53  iter: 7940  loss: 0.6150 (0.7736)  loss_classifier: 0.2097 (0.2853)  loss_box_reg: 0.0932 (0.1237)  loss_mask: 0.2766 (0.3051)  loss_objectness: 0.0182 (0.0387)  loss_rpn_box_reg: 0.0134 (0.0208)  time: 0.1082 (0.1270)  data: 0.0016 (0.0186)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:35,060 maskrcnn_benchmark.trainer INFO: eta: 1:07:49  iter: 7960  loss: 0.6648 (0.7734)  loss_classifier: 0.2520 (0.2852)  loss_box_reg: 0.0976 (0.1237)  loss_mask: 0.2576 (0.3050)  loss_objectness: 0.0157 (0.0387)  loss_rpn_box_reg: 0.0097 (0.0208)  time: 0.1082 (0.1270)  data: 0.0016 (0.0186)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:37,232 maskrcnn_benchmark.trainer INFO: eta: 1:07:44  iter: 7980  loss: 0.7544 (0.7731)  loss_classifier: 0.2663 (0.2851)  loss_box_reg: 0.1194 (0.1236)  loss_mask: 0.2991 (0.3050)  loss_objectness: 0.0223 (0.0386)  loss_rpn_box_reg: 0.0085 (0.0208)  time: 0.1083 (0.1270)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:39,395 maskrcnn_benchmark.trainer INFO: eta: 1:07:40  iter: 8000  loss: 0.7489 (0.7732)  loss_classifier: 0.2711 (0.2852)  loss_box_reg: 0.1095 (0.1236)  loss_mask: 0.2659 (0.3050)  loss_objectness: 0.0353 (0.0387)  loss_rpn_box_reg: 0.0122 (0.0208)  time: 0.1080 (0.1269)  data: 0.0016 (0.0185)  lr: 0.160000  max mem: 5110
2020-06-23 15:39:41,571 maskrcnn_benchmark.trainer INFO: eta: 1:07:36  iter: 8020  loss: 0.6868 (0.7730)  loss_classifier: 0.2331 (0.2851)  loss_box_reg: 0.1130 (0.1236)  loss_mask: 0.2587 (0.3049)  loss_objectness: 0.0212 (0.0386)  loss_rpn_box_reg: 0.0085 (0.0208)  time: 0.1087 (0.1269)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5140
2020-06-23 15:39:43,758 maskrcnn_benchmark.trainer INFO: eta: 1:07:33  iter: 8040  loss: 0.5902 (0.7726)  loss_classifier: 0.1837 (0.2849)  loss_box_reg: 0.0957 (0.1236)  loss_mask: 0.2568 (0.3048)  loss_objectness: 0.0169 (0.0386)  loss_rpn_box_reg: 0.0105 (0.0208)  time: 0.1095 (0.1268)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5140
2020-06-23 15:39:45,947 maskrcnn_benchmark.trainer INFO: eta: 1:07:29  iter: 8060  loss: 0.6841 (0.7723)  loss_classifier: 0.2274 (0.2848)  loss_box_reg: 0.1113 (0.1235)  loss_mask: 0.2626 (0.3047)  loss_objectness: 0.0233 (0.0386)  loss_rpn_box_reg: 0.0073 (0.0207)  time: 0.1095 (0.1268)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5140
2020-06-23 15:39:48,123 maskrcnn_benchmark.trainer INFO: eta: 1:07:25  iter: 8080  loss: 0.6339 (0.7721)  loss_classifier: 0.2302 (0.2847)  loss_box_reg: 0.0973 (0.1235)  loss_mask: 0.2547 (0.3046)  loss_objectness: 0.0215 (0.0385)  loss_rpn_box_reg: 0.0077 (0.0207)  time: 0.1084 (0.1267)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5140
2020-06-23 15:39:50,305 maskrcnn_benchmark.trainer INFO: eta: 1:07:21  iter: 8100  loss: 0.6602 (0.7718)  loss_classifier: 0.1984 (0.2846)  loss_box_reg: 0.1021 (0.1235)  loss_mask: 0.2646 (0.3045)  loss_objectness: 0.0204 (0.0385)  loss_rpn_box_reg: 0.0086 (0.0207)  time: 0.1089 (0.1267)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5140
2020-06-23 15:39:52,485 maskrcnn_benchmark.trainer INFO: eta: 1:07:17  iter: 8120  loss: 0.6180 (0.7715)  loss_classifier: 0.2130 (0.2844)  loss_box_reg: 0.0890 (0.1235)  loss_mask: 0.2824 (0.3045)  loss_objectness: 0.0159 (0.0385)  loss_rpn_box_reg: 0.0075 (0.0207)  time: 0.1087 (0.1266)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5140
2020-06-23 15:39:54,673 maskrcnn_benchmark.trainer INFO: eta: 1:07:13  iter: 8140  loss: 0.6498 (0.7713)  loss_classifier: 0.2380 (0.2843)  loss_box_reg: 0.1169 (0.1234)  loss_mask: 0.2714 (0.3044)  loss_objectness: 0.0222 (0.0384)  loss_rpn_box_reg: 0.0131 (0.0207)  time: 0.1088 (0.1266)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5140
2020-06-23 15:39:56,855 maskrcnn_benchmark.trainer INFO: eta: 1:07:09  iter: 8160  loss: 0.6239 (0.7709)  loss_classifier: 0.2111 (0.2842)  loss_box_reg: 0.0953 (0.1234)  loss_mask: 0.2576 (0.3043)  loss_objectness: 0.0191 (0.0384)  loss_rpn_box_reg: 0.0068 (0.0207)  time: 0.1088 (0.1266)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5140
2020-06-23 15:39:59,032 maskrcnn_benchmark.trainer INFO: eta: 1:07:05  iter: 8180  loss: 0.7504 (0.7709)  loss_classifier: 0.2717 (0.2842)  loss_box_reg: 0.1301 (0.1234)  loss_mask: 0.2575 (0.3042)  loss_objectness: 0.0273 (0.0385)  loss_rpn_box_reg: 0.0148 (0.0207)  time: 0.1093 (0.1265)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5140
2020-06-23 15:40:01,202 maskrcnn_benchmark.trainer INFO: eta: 1:07:01  iter: 8200  loss: 0.7368 (0.7707)  loss_classifier: 0.2802 (0.2841)  loss_box_reg: 0.1158 (0.1234)  loss_mask: 0.2759 (0.3041)  loss_objectness: 0.0282 (0.0385)  loss_rpn_box_reg: 0.0078 (0.0207)  time: 0.1079 (0.1265)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5140
2020-06-23 15:40:03,379 maskrcnn_benchmark.trainer INFO: eta: 1:06:57  iter: 8220  loss: 0.6378 (0.7706)  loss_classifier: 0.2425 (0.2841)  loss_box_reg: 0.0935 (0.1234)  loss_mask: 0.2433 (0.3040)  loss_objectness: 0.0234 (0.0385)  loss_rpn_box_reg: 0.0088 (0.0207)  time: 0.1075 (0.1264)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5140
2020-06-23 15:40:05,570 maskrcnn_benchmark.trainer INFO: eta: 1:06:53  iter: 8240  loss: 0.6181 (0.7703)  loss_classifier: 0.2382 (0.2840)  loss_box_reg: 0.1079 (0.1233)  loss_mask: 0.2334 (0.3038)  loss_objectness: 0.0212 (0.0384)  loss_rpn_box_reg: 0.0110 (0.0207)  time: 0.1094 (0.1264)  data: 0.0015 (0.0180)  lr: 0.160000  max mem: 5140
:::MLLOG {"namespace": "", "time_ms": 1592952006981, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 9}}
:::MLLOG {"namespace": "", "time_ms": 1592952006981, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 9}}
:::MLLOG {"namespace": "", "time_ms": 1592952006981, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 9}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 15:40:07,203 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
2020-06-23 15:40:07,500 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
Done (t=0.27s)
creating index...
creating index...
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  4%|         | 3/79 [00:00<00:45,  1.68it/s]
  8%|         | 6/79 [00:01<00:31,  2.33it/s]
 11%|        | 9/79 [00:01<00:21,  3.20it/s]
 15%|        | 12/79 [00:01<00:15,  4.34it/s]
 19%|        | 15/79 [00:01<00:11,  5.78it/s]
 23%|       | 18/79 [00:01<00:08,  7.51it/s]
 27%|       | 21/79 [00:01<00:06,  9.50it/s]
 30%|       | 24/79 [00:01<00:04, 11.63it/s]
 34%|      | 27/79 [00:01<00:03, 13.89it/s]
 38%|      | 30/79 [00:02<00:03, 16.10it/s]
 42%|     | 33/79 [00:02<00:02, 18.06it/s]
 46%|     | 36/79 [00:02<00:02, 19.71it/s]
 49%|     | 39/79 [00:02<00:01, 20.96it/s]
 53%|    | 42/79 [00:02<00:01, 22.02it/s]
 57%|    | 45/79 [00:02<00:01, 22.81it/s]
 61%|    | 48/79 [00:02<00:01, 23.27it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:00<00:46,  1.62it/s]
  8%|         | 6/79 [00:01<00:32,  2.25it/s]
 11%|        | 9/79 [00:01<00:22,  3.10it/s]
 15%|        | 12/79 [00:01<00:15,  4.21it/s]
 19%|        | 15/79 [00:01<00:11,  5.60it/s]
 23%|       | 18/79 [00:01<00:08,  7.32it/s]
 27%|       | 21/79 [00:01<00:06,  9.28it/s]
 30%|       | 24/79 [00:01<00:04, 11.38it/s]
 34%|      | 27/79 [00:01<00:03, 13.60it/s]
 38%|      | 30/79 [00:02<00:03, 15.77it/s]
 42%|     | 33/79 [00:02<00:02, 17.87it/s]
 46%|     | 36/79 [00:02<00:02, 19.51it/s]
 49%|     | 39/79 [00:02<00:01, 20.78it/s]
 53%|    | 42/79 [00:02<00:01, 21.83it/s]
 57%|    | 45/79 [00:02<00:01, 22.84it/s]
 61%|    | 48/79 [00:02<00:01, 23.21it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.62it/s]
 35%|      | 28/79 [00:01<00:03, 13.84it/s]
 39%|      | 31/79 [00:02<00:02, 16.11it/s]
 43%|     | 34/79 [00:02<00:02, 18.03it/s]
 47%|     | 37/79 [00:02<00:02, 19.84it/s]
 51%|     | 40/79 [00:02<00:01, 21.26it/s]
 54%|    | 43/79 [00:02<00:01, 22.14it/s]
 58%|    | 46/79 [00:02<00:01, 22.90it/s]
 62%|   | 49/79 [00:02<00:01, 23.64it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.23it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.42it/s]
 32%|      | 25/79 [00:01<00:04, 11.56it/s]
 35%|      | 28/79 [00:01<00:03, 13.82it/s]
 39%|      | 31/79 [00:02<00:03, 15.97it/s]
 43%|     | 34/79 [00:02<00:02, 17.90it/s]
 47%|     | 37/79 [00:02<00:02, 19.52it/s]
 51%|     | 40/79 [00:02<00:01, 21.13it/s]
 54%|    | 43/79 [00:02<00:01, 22.07it/s]
 58%|    | 46/79 [00:02<00:01, 22.76it/s]
 62%|   | 49/79 [00:02<00:01, 23.74it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.48it/s]
 28%|       | 22/79 [00:01<00:06,  9.50it/s]
 32%|      | 25/79 [00:01<00:04, 11.71it/s]
 35%|      | 28/79 [00:01<00:03, 13.70it/s]
 39%|      | 31/79 [00:02<00:03, 15.96it/s]
 43%|     | 34/79 [00:02<00:02, 17.81it/s]
 47%|     | 37/79 [00:02<00:02, 19.66it/s]
 51%|     | 40/79 [00:02<00:01, 21.12it/s]
 54%|    | 43/79 [00:02<00:01, 22.30it/s]
 58%|    | 46/79 [00:02<00:01, 23.04it/s]
 62%|   | 49/79 [00:02<00:01, 23.74it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.09it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.17it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.35it/s]
 35%|      | 28/79 [00:01<00:03, 13.64it/s]
 39%|      | 31/79 [00:02<00:03, 15.83it/s]
 43%|     | 34/79 [00:02<00:02, 17.91it/s]
 47%|     | 37/79 [00:02<00:02, 19.52it/s]
 51%|     | 40/79 [00:02<00:01, 20.91it/s]
 54%|    | 43/79 [00:02<00:01, 22.26it/s]
 58%|    | 46/79 [00:02<00:01, 23.14it/s]
 62%|   | 49/79 [00:02<00:01, 23.64it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  4%|         | 3/79 [00:00<00:43,  1.73it/s]
  8%|         | 6/79 [00:01<00:30,  2.39it/s]
 11%|        | 9/79 [00:01<00:21,  3.28it/s]
 15%|        | 12/79 [00:01<00:15,  4.44it/s]
 19%|        | 15/79 [00:01<00:10,  5.88it/s]
 23%|       | 18/79 [00:01<00:08,  7.62it/s]
 27%|       | 21/79 [00:01<00:06,  9.65it/s]
 30%|       | 24/79 [00:01<00:04, 11.83it/s]
 34%|      | 27/79 [00:01<00:03, 13.99it/s]
 38%|      | 30/79 [00:02<00:03, 16.04it/s]
 42%|     | 33/79 [00:02<00:02, 17.98it/s]
 46%|     | 36/79 [00:02<00:02, 19.63it/s]
 49%|     | 39/79 [00:02<00:01, 20.87it/s]
 53%|    | 42/79 [00:02<00:01, 22.03it/s]
 57%|    | 45/79 [00:02<00:01, 22.94it/s]
 61%|    | 48/79 [00:02<00:01, 23.66it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.37it/s]
 32%|      | 25/79 [00:01<00:04, 11.58it/s]
 35%|      | 28/79 [00:01<00:03, 13.81it/s]
 39%|      | 31/79 [00:02<00:02, 16.07it/s]
 43%|     | 34/79 [00:02<00:02, 18.05it/s]
 47%|     | 37/79 [00:02<00:02, 19.88it/s]
 51%|     | 40/79 [00:02<00:01, 21.32it/s]
 54%|    | 43/79 [00:02<00:01, 22.11it/s]
 58%|    | 46/79 [00:02<00:01, 22.94it/s]
 62%|   | 49/79 [00:02<00:01, 23.51it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.34it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.44it/s]
 35%|      | 28/79 [00:01<00:03, 13.68it/s]
 39%|      | 31/79 [00:02<00:03, 15.89it/s]
 43%|     | 34/79 [00:02<00:02, 17.94it/s]
 47%|     | 37/79 [00:02<00:02, 19.64it/s]
 51%|     | 40/79 [00:02<00:01, 20.71it/s]
 54%|    | 43/79 [00:02<00:01, 21.98it/s]
 58%|    | 46/79 [00:02<00:01, 22.92it/s]
 62%|   | 49/79 [00:02<00:01, 23.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  4%|         | 3/79 [00:00<00:45,  1.68it/s]
  8%|         | 6/79 [00:01<00:31,  2.32it/s]
 11%|        | 9/79 [00:01<00:21,  3.19it/s]
 15%|        | 12/79 [00:01<00:15,  4.32it/s]
 19%|        | 15/79 [00:01<00:11,  5.74it/s]
 23%|       | 18/79 [00:01<00:08,  7.45it/s]
 27%|       | 21/79 [00:01<00:06,  9.44it/s]
 30%|       | 24/79 [00:01<00:04, 11.57it/s]
 34%|      | 27/79 [00:01<00:03, 13.74it/s]
 38%|      | 30/79 [00:02<00:03, 15.85it/s]
 42%|     | 33/79 [00:02<00:02, 17.72it/s]
 46%|     | 36/79 [00:02<00:02, 19.33it/s]
 49%|     | 39/79 [00:02<00:01, 20.38it/s]
 53%|    | 42/79 [00:02<00:01, 21.51it/s]
 57%|    | 45/79 [00:02<00:01, 22.31it/s]
 61%|    | 48/79 [00:02<00:01, 22.98it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.48it/s]
 28%|       | 22/79 [00:01<00:06,  9.47it/s]
 32%|      | 25/79 [00:01<00:04, 11.64it/s]
 35%|      | 28/79 [00:01<00:03, 13.85it/s]
 39%|      | 31/79 [00:02<00:03, 15.96it/s]
 43%|     | 34/79 [00:02<00:02, 17.91it/s]
 47%|     | 37/79 [00:02<00:02, 19.48it/s]
 51%|     | 40/79 [00:02<00:01, 20.81it/s]
 54%|    | 43/79 [00:02<00:01, 21.98it/s]
 58%|    | 46/79 [00:02<00:01, 22.82it/s]
 62%|   | 49/79 [00:02<00:01, 23.33it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.24it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.55it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 13.88it/s]
 39%|      | 31/79 [00:02<00:03, 15.93it/s]
 43%|     | 34/79 [00:02<00:02, 17.91it/s]
 47%|     | 37/79 [00:02<00:02, 19.12it/s]
 51%|     | 40/79 [00:02<00:01, 20.41it/s]
 54%|    | 43/79 [00:02<00:01, 21.53it/s]
 58%|    | 46/79 [00:02<00:01, 22.41it/s]
 62%|   | 49/79 [00:02<00:01, 22.94it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.46it/s]
 35%|      | 28/79 [00:01<00:03, 13.66it/s]
 39%|      | 31/79 [00:02<00:03, 15.86it/s]
 43%|     | 34/79 [00:02<00:02, 17.85it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.76it/s]
 54%|    | 43/79 [00:02<00:01, 21.86it/s]
 58%|    | 46/79 [00:02<00:01, 22.54it/s]
 62%|   | 49/79 [00:02<00:01, 23.14it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.27it/s]
 16%|        | 13/79 [00:01<00:14,  4.42it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.59it/s]
 35%|      | 28/79 [00:01<00:03, 13.74it/s]
 39%|      | 31/79 [00:02<00:03, 15.76it/s]
 43%|     | 34/79 [00:02<00:02, 17.75it/s]
 47%|     | 37/79 [00:02<00:02, 19.33it/s]
 51%|     | 40/79 [00:02<00:01, 20.60it/s]
 54%|    | 43/79 [00:02<00:01, 21.60it/s]
 58%|    | 46/79 [00:02<00:01, 22.64it/s]
 62%|   | 49/79 [00:02<00:01, 23.26it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.18it/s]
 32%|      | 25/79 [00:01<00:04, 11.36it/s]
 35%|      | 28/79 [00:01<00:03, 13.53it/s]
 39%|      | 31/79 [00:02<00:03, 15.67it/s]
 43%|     | 34/79 [00:02<00:02, 17.58it/s]
 47%|     | 37/79 [00:02<00:02, 19.25it/s]
 51%|     | 40/79 [00:02<00:01, 20.65it/s]
 54%|    | 43/79 [00:02<00:01, 21.84it/s]
 58%|    | 46/79 [00:02<00:01, 22.43it/s]
 62%|   | 49/79 [00:02<00:01, 23.14it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.42it/s]
 35%|      | 28/79 [00:01<00:03, 13.65it/s]
 39%|      | 31/79 [00:02<00:03, 15.96it/s]
 43%|     | 34/79 [00:02<00:02, 17.82it/s]
 47%|     | 37/79 [00:02<00:02, 19.59it/s]
 51%|     | 40/79 [00:02<00:01, 20.96it/s]
 54%|    | 43/79 [00:02<00:01, 22.07it/s]
 58%|    | 46/79 [00:02<00:01, 23.01it/s]
 62%|   | 49/79 [00:02<00:01, 23.82it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.21it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.38it/s]
 35%|      | 28/79 [00:01<00:03, 13.66it/s]
 39%|      | 31/79 [00:02<00:03, 15.84it/s]
 43%|     | 34/79 [00:02<00:02, 17.71it/s]
 47%|     | 37/79 [00:02<00:02, 19.46it/s]
 51%|     | 40/79 [00:02<00:01, 20.91it/s]
 54%|    | 43/79 [00:02<00:01, 21.95it/s]
 58%|    | 46/79 [00:02<00:01, 22.64it/s]
 62%|   | 49/79 [00:02<00:01, 23.54it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.33it/s]
 28%|       | 22/79 [00:01<00:06,  9.32it/s]
 32%|      | 25/79 [00:01<00:04, 11.59it/s]
 35%|      | 28/79 [00:01<00:03, 13.68it/s]
 39%|      | 31/79 [00:02<00:03, 15.82it/s]
 43%|     | 34/79 [00:02<00:02, 17.63it/s]
 47%|     | 37/79 [00:02<00:02, 19.41it/s]
 51%|     | 40/79 [00:02<00:01, 20.54it/s]
 54%|    | 43/79 [00:02<00:01, 21.74it/s]
 58%|    | 46/79 [00:02<00:01, 22.14it/s]
 62%|   | 49/79 [00:02<00:01, 22.93it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  4%|         | 3/79 [00:00<00:46,  1.64it/s]
  8%|         | 6/79 [00:01<00:32,  2.28it/s]
 11%|        | 9/79 [00:01<00:22,  3.13it/s]
 15%|        | 12/79 [00:01<00:15,  4.24it/s]
 19%|        | 15/79 [00:01<00:11,  5.63it/s]
 23%|       | 18/79 [00:01<00:08,  7.30it/s]
 27%|       | 21/79 [00:01<00:06,  9.25it/s]
 30%|       | 24/79 [00:01<00:04, 11.31it/s]
 34%|      | 27/79 [00:01<00:03, 13.46it/s]
 38%|      | 30/79 [00:02<00:03, 15.50it/s]
 42%|     | 33/79 [00:02<00:02, 17.40it/s]
 46%|     | 36/79 [00:02<00:02, 18.95it/s]
 49%|     | 39/79 [00:02<00:01, 20.29it/s]
 53%|    | 42/79 [00:02<00:01, 21.25it/s]
 57%|    | 45/79 [00:02<00:01, 22.14it/s]
 61%|    | 48/79 [00:02<00:01, 22.67it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.70it/s]
 39%|      | 31/79 [00:02<00:03, 15.85it/s]
 43%|     | 34/79 [00:02<00:02, 17.64it/s]
 47%|     | 37/79 [00:02<00:02, 19.19it/s]
 51%|     | 40/79 [00:02<00:01, 20.50it/s]
 54%|    | 43/79 [00:02<00:01, 21.46it/s]
 58%|    | 46/79 [00:02<00:01, 22.45it/s]
 62%|   | 49/79 [00:02<00:01, 22.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.25it/s]
 32%|      | 25/79 [00:01<00:04, 11.33it/s]
 35%|      | 28/79 [00:01<00:03, 13.48it/s]
 39%|      | 31/79 [00:02<00:03, 15.63it/s]
 43%|     | 34/79 [00:02<00:02, 17.48it/s]
 47%|     | 37/79 [00:02<00:02, 18.96it/s]
 51%|     | 40/79 [00:02<00:01, 20.44it/s]
 54%|    | 43/79 [00:02<00:01, 21.54it/s]
 58%|    | 46/79 [00:02<00:01, 22.30it/s]
 62%|   | 49/79 [00:02<00:01, 22.93it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.34it/s]
 28%|       | 22/79 [00:01<00:06,  9.25it/s]
 32%|      | 25/79 [00:01<00:04, 11.30it/s]
 35%|      | 28/79 [00:01<00:03, 13.50it/s]
 39%|      | 31/79 [00:02<00:03, 15.47it/s]
 43%|     | 34/79 [00:02<00:02, 17.35it/s]
 47%|     | 37/79 [00:02<00:02, 18.74it/s]
 51%|     | 40/79 [00:02<00:01, 20.05it/s]
 54%|    | 43/79 [00:02<00:01, 21.09it/s]
 58%|    | 46/79 [00:02<00:01, 21.97it/s]
 62%|   | 49/79 [00:02<00:01, 22.43it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:11,  5.26it/s]
 24%|       | 19/79 [00:01<00:08,  6.87it/s]
 28%|       | 22/79 [00:01<00:06,  8.84it/s]
 32%|      | 25/79 [00:01<00:04, 10.91it/s]
 35%|      | 28/79 [00:02<00:03, 13.19it/s]
 39%|      | 31/79 [00:02<00:03, 15.48it/s]
 43%|     | 34/79 [00:02<00:02, 17.51it/s]
 47%|     | 37/79 [00:02<00:02, 19.42it/s]
 51%|     | 40/79 [00:02<00:01, 20.72it/s]
 54%|    | 43/79 [00:02<00:01, 21.88it/s]
 58%|    | 46/79 [00:02<00:01, 22.45it/s]
 62%|   | 49/79 [00:02<00:01, 23.21it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.89it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.82it/s]
 28%|       | 22/79 [00:01<00:06,  8.74it/s]
 32%|      | 25/79 [00:01<00:04, 10.85it/s]
 35%|      | 28/79 [00:02<00:03, 13.13it/s]
 39%|      | 31/79 [00:02<00:03, 15.30it/s]
 43%|     | 34/79 [00:02<00:02, 17.24it/s]
 47%|     | 37/79 [00:02<00:02, 19.03it/s]
 51%|     | 40/79 [00:02<00:01, 20.56it/s]
 54%|    | 43/79 [00:02<00:01, 21.60it/s]
 58%|    | 46/79 [00:02<00:01, 22.46it/s]
 62%|   | 49/79 [00:02<00:01, 22.82it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.21it/s]
 28%|       | 22/79 [00:01<00:06,  9.14it/s]
 32%|      | 25/79 [00:01<00:04, 11.20it/s]
 35%|      | 28/79 [00:01<00:03, 13.39it/s]
 39%|      | 31/79 [00:02<00:03, 15.46it/s]
 43%|     | 34/79 [00:02<00:02, 17.34it/s]
 47%|     | 37/79 [00:02<00:02, 18.88it/s]
 51%|     | 40/79 [00:02<00:01, 20.18it/s]
 54%|    | 43/79 [00:02<00:01, 21.16it/s]
 58%|    | 46/79 [00:02<00:01, 21.80it/s]
 62%|   | 49/79 [00:02<00:01, 22.44it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.02it/s]
 13%|        | 10/79 [00:01<00:24,  2.79it/s]
 16%|        | 13/79 [00:01<00:17,  3.81it/s]
 20%|        | 16/79 [00:01<00:12,  5.12it/s]
 24%|       | 19/79 [00:01<00:08,  6.71it/s]
 28%|       | 22/79 [00:01<00:06,  8.62it/s]
 32%|      | 25/79 [00:01<00:05, 10.69it/s]
 35%|      | 28/79 [00:02<00:03, 12.95it/s]
 39%|      | 31/79 [00:02<00:03, 15.19it/s]
 43%|     | 34/79 [00:02<00:02, 17.27it/s]
 47%|     | 37/79 [00:02<00:02, 18.99it/s]
 51%|     | 40/79 [00:02<00:01, 20.50it/s]
 54%|    | 43/79 [00:02<00:01, 21.55it/s]
 58%|    | 46/79 [00:02<00:01, 22.50it/s]
 62%|   | 49/79 [00:02<00:01, 23.37it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.32it/s]
 24%|       | 19/79 [00:01<00:08,  6.96it/s]
 28%|       | 22/79 [00:01<00:06,  8.88it/s]
 32%|      | 25/79 [00:01<00:04, 11.00it/s]
 35%|      | 28/79 [00:02<00:03, 13.15it/s]
 39%|      | 31/79 [00:02<00:03, 15.39it/s]
 43%|     | 34/79 [00:02<00:02, 17.32it/s]
 47%|     | 37/79 [00:02<00:02, 18.90it/s]
 51%|     | 40/79 [00:02<00:01, 20.32it/s]
 54%|    | 43/79 [00:02<00:01, 21.54it/s]
 58%|    | 46/79 [00:02<00:01, 22.16it/s]
 62%|   | 49/79 [00:02<00:01, 22.69it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.97it/s]
 20%|        | 16/79 [00:01<00:11,  5.31it/s]
 24%|       | 19/79 [00:01<00:08,  6.92it/s]
 28%|       | 22/79 [00:01<00:06,  8.79it/s]
 32%|      | 25/79 [00:01<00:04, 10.89it/s]
 35%|      | 28/79 [00:02<00:03, 13.02it/s]
 39%|      | 31/79 [00:02<00:03, 15.07it/s]
 43%|     | 34/79 [00:02<00:02, 16.92it/s]
 47%|     | 37/79 [00:02<00:02, 18.54it/s]
 51%|     | 40/79 [00:02<00:01, 19.98it/s]
 54%|    | 43/79 [00:02<00:01, 21.05it/s]
 58%|    | 46/79 [00:02<00:01, 21.53it/s]
 62%|   | 49/79 [00:02<00:01, 22.25it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.81it/s]
 16%|        | 13/79 [00:01<00:17,  3.82it/s]
 20%|        | 16/79 [00:01<00:12,  5.12it/s]
 24%|       | 19/79 [00:01<00:08,  6.73it/s]
 28%|       | 22/79 [00:01<00:06,  8.58it/s]
 32%|      | 25/79 [00:01<00:05, 10.67it/s]
 35%|      | 28/79 [00:02<00:03, 12.85it/s]
 39%|      | 31/79 [00:02<00:03, 14.96it/s]
 43%|     | 34/79 [00:02<00:02, 16.95it/s]
 47%|     | 37/79 [00:02<00:02, 18.73it/s]
 51%|     | 40/79 [00:02<00:01, 20.26it/s]
 54%|    | 43/79 [00:02<00:01, 21.41it/s]
 58%|    | 46/79 [00:02<00:01, 22.36it/s]
 62%|   | 49/79 [00:02<00:01, 23.03it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.95it/s]
 20%|        | 16/79 [00:01<00:11,  5.27it/s]
 24%|       | 19/79 [00:01<00:08,  6.91it/s]
 28%|       | 22/79 [00:01<00:06,  8.75it/s]
 32%|      | 25/79 [00:01<00:04, 10.83it/s]
 35%|      | 28/79 [00:02<00:03, 13.06it/s]
 39%|      | 31/79 [00:02<00:03, 15.19it/s]
 43%|     | 34/79 [00:02<00:02, 17.10it/s]
 47%|     | 37/79 [00:02<00:02, 18.79it/s]
 51%|     | 40/79 [00:02<00:01, 19.97it/s]
 54%|    | 43/79 [00:02<00:01, 21.14it/s]
 58%|    | 46/79 [00:02<00:01, 21.55it/s]
 62%|   | 49/79 [00:02<00:01, 22.27it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.01it/s]
 13%|        | 10/79 [00:01<00:24,  2.78it/s]
 16%|        | 13/79 [00:01<00:17,  3.78it/s]
 20%|        | 16/79 [00:01<00:12,  5.06it/s]
 24%|       | 19/79 [00:01<00:09,  6.62it/s]
 28%|       | 22/79 [00:01<00:06,  8.50it/s]
 32%|      | 25/79 [00:01<00:05, 10.53it/s]
 35%|      | 28/79 [00:02<00:04, 12.66it/s]
 39%|      | 31/79 [00:02<00:03, 14.80it/s]
 43%|     | 34/79 [00:02<00:02, 16.79it/s]
 47%|     | 37/79 [00:02<00:02, 18.47it/s]
 51%|     | 40/79 [00:02<00:01, 19.73it/s]
 54%|    | 43/79 [00:02<00:01, 20.96it/s]
 58%|    | 46/79 [00:02<00:01, 21.91it/s]
 62%|   | 49/79 [00:02<00:01, 22.60it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.81it/s]
 16%|        | 13/79 [00:01<00:17,  3.83it/s]
 20%|        | 16/79 [00:01<00:12,  5.12it/s]
 24%|       | 19/79 [00:01<00:08,  6.72it/s]
 28%|       | 22/79 [00:01<00:06,  8.55it/s]
 32%|      | 25/79 [00:01<00:05, 10.64it/s]
 35%|      | 28/79 [00:02<00:03, 12.82it/s]
 39%|      | 31/79 [00:02<00:03, 14.99it/s]
 43%|     | 34/79 [00:02<00:02, 16.85it/s]
 47%|     | 37/79 [00:02<00:02, 18.49it/s]
 51%|     | 40/79 [00:02<00:01, 20.01it/s]
 54%|    | 43/79 [00:02<00:01, 20.99it/s]
 58%|    | 46/79 [00:02<00:01, 21.86it/s]
 62%|   | 49/79 [00:02<00:01, 22.55it/s]
 66%|   | 52/79 [00:03<00:01, 24.15it/s]
 70%|   | 55/79 [00:02<00:00, 24.66it/s]
 73%|  | 58/79 [00:03<00:00, 24.94it/s]
 77%|  | 61/79 [00:03<00:00, 25.42it/s]
 81%|  | 64/79 [00:03<00:00, 25.49it/s]
 85%| | 67/79 [00:03<00:00, 25.25it/s]
 89%| | 70/79 [00:03<00:00, 25.15it/s]
 92%|| 73/79 [00:03<00:00, 25.13it/s]
 96%|| 76/79 [00:03<00:00, 25.88it/s]
100%|| 79/79 [00:03<00:00, 26.64it/s]
, 24.03it/s]
 70%|   | 55/79 [00:03<00:00, 24.41it/s]
 73%|  | 58/79 [00:03<00:00, 24.70it/s]
 77%|  | 61/79 [00:03<00:00, 24.87it/s]
 81%|  | 64/79 [00:03<00:00, 25.08it/s]
 85%| | 67/79 [00:03<00:00, 25.07it/s]
 89%| | 70/79 [00:03<00:00, 25.11it/s]
 92%|| 73/79 [00:03<00:00, 25.28it/s]
 96%|| 76/79 [00:03<00:00, 25.94it/s]
100%|| 79/79 [00:03<00:00, 26.79it/s]
, 24.25it/s]
 70%|   | 55/79 [00:03<00:00, 24.65it/s]
 73%|  | 58/79 [00:03<00:00, 24.92it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 25.01it/s]
 85%| | 67/79 [00:03<00:00, 25.15it/s]
 89%| | 70/79 [00:03<00:00, 25.20it/s]
 92%|| 73/79 [00:03<00:00, 25.38it/s]
 96%|| 76/79 [00:03<00:00, 25.94it/s]
100%|| 79/79 [00:03<00:00, 26.86it/s]
60it/s]
 68%|   | 54/79 [00:02<00:01, 23.87it/s]
 72%|  | 57/79 [00:03<00:00, 24.11it/s]
 76%|  | 60/79 [00:03<00:00, 24.36it/s]
 80%|  | 63/79 [00:03<00:00, 24.40it/s]
 84%| | 66/79 [00:03<00:00, 24.76it/s]
 87%| | 69/79 [00:03<00:00, 24.70it/s]
 91%| | 72/79 [00:03<00:00, 24.83it/s]
 95%|| 75/79 [00:03<00:00, 25.52it/s]
 99%|| 78/79 [00:03<00:00, 26.01it/s]
100%|| 79/79 [00:04<00:00, 19.65it/s]
, 23.64it/s]
 70%|   | 55/79 [00:03<00:00, 24.10it/s]
 73%|  | 58/79 [00:03<00:00, 24.35it/s]
 77%|  | 61/79 [00:03<00:00, 24.51it/s]
 81%|  | 64/79 [00:03<00:00, 24.47it/s]
 85%| | 67/79 [00:03<00:00, 24.53it/s]
 89%| | 70/79 [00:03<00:00, 24.67it/s]
 92%|| 73/79 [00:03<00:00, 25.19it/s]
 96%|| 76/79 [00:03<00:00, 25.80it/s]
100%|| 79/79 [00:03<00:00, 26.66it/s]
, 23.49it/s]
 70%|   | 55/79 [00:03<00:00, 24.09it/s]
 73%|  | 58/79 [00:03<00:00, 24.05it/s]
 77%|  | 61/79 [00:03<00:00, 23.92it/s]
 81%|  | 64/79 [00:03<00:00, 24.17it/s]
 85%| | 67/79 [00:03<00:00, 24.32it/s]
 89%| | 70/79 [00:03<00:00, 24.39it/s]
 92%|| 73/79 [00:03<00:00, 24.76it/s]
 96%|| 76/79 [00:03<00:00, 25.56it/s]
100%|| 79/79 [00:03<00:00, 26.43it/s]
, 23.99it/s]
 70%|   | 55/79 [00:02<00:00, 24.09it/s]
 73%|  | 58/79 [00:03<00:00, 24.13it/s]
 77%|  | 61/79 [00:03<00:00, 24.47it/s]
 81%|  | 64/79 [00:03<00:00, 24.51it/s]
 85%| | 67/79 [00:03<00:00, 24.75it/s]
 89%| | 70/79 [00:03<00:00, 24.86it/s]
 92%|| 73/79 [00:03<00:00, 25.31it/s]
 96%|| 76/79 [00:03<00:00, 25.90it/s]
100%|| 79/79 [00:03<00:00, 26.75it/s]
, 24.17it/s]
 70%|   | 55/79 [00:03<00:00, 24.40it/s]
 73%|  | 58/79 [00:03<00:00, 24.78it/s]
 77%|  | 61/79 [00:03<00:00, 25.00it/s]
 81%|  | 64/79 [00:03<00:00, 24.99it/s]
 85%| | 67/79 [00:03<00:00, 25.00it/s]
 89%| | 70/79 [00:03<00:00, 25.21it/s]
 92%|| 73/79 [00:03<00:00, 25.35it/s]
 96%|| 76/79 [00:03<00:00, 26.38it/s]
100%|| 79/79 [00:03<00:00, 26.72it/s]
, 23.84it/s]
 70%|   | 55/79 [00:03<00:00, 24.21it/s]
 73%|  | 58/79 [00:03<00:00, 24.54it/s]
 77%|  | 61/79 [00:03<00:00, 24.37it/s]
 81%|  | 64/79 [00:03<00:00, 24.27it/s]
 85%| | 67/79 [00:03<00:00, 24.63it/s]
 89%| | 70/79 [00:03<00:00, 24.70it/s]
 92%|| 73/79 [00:03<00:00, 25.09it/s]
 96%|| 76/79 [00:03<00:00, 25.72it/s]
100%|| 79/79 [00:03<00:00, 26.56it/s]
, 23.66it/s]
 70%|   | 55/79 [00:03<00:00, 24.36it/s]
 73%|  | 58/79 [00:03<00:00, 24.36it/s]
 77%|  | 61/79 [00:03<00:00, 24.75it/s]
 81%|  | 64/79 [00:03<00:00, 24.77it/s]
 85%| | 67/79 [00:03<00:00, 24.79it/s]
 89%| | 70/79 [00:03<00:00, 24.38it/s]
 92%|| 73/79 [00:03<00:00, 25.16it/s]
 96%|| 76/79 [00:03<00:00, 25.76it/s]
100%|| 79/79 [00:03<00:00, 26.52it/s]
, 23.43it/s]
 70%|   | 55/79 [00:03<00:01, 23.80it/s]
 73%|  | 58/79 [00:03<00:00, 24.15it/s]
 77%|  | 61/79 [00:03<00:00, 24.38it/s]
 81%|  | 64/79 [00:03<00:00, 24.46it/s]
 85%| | 67/79 [00:03<00:00, 24.66it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 24.99it/s]
 96%|| 76/79 [00:03<00:00, 25.59it/s]
100%|| 79/79 [00:03<00:00, 26.38it/s]
, 24.06it/s]
 70%|   | 55/79 [00:02<00:00, 24.24it/s]
 73%|  | 58/79 [00:03<00:00, 24.41it/s]
 77%|  | 61/79 [00:03<00:00, 24.36it/s]
 81%|  | 64/79 [00:03<00:00, 24.53it/s]
 85%| | 67/79 [00:03<00:00, 24.93it/s]
 89%| | 70/79 [00:03<00:00, 24.87it/s]
 92%|| 73/79 [00:03<00:00, 25.11it/s]
 96%|| 76/79 [00:03<00:00, 25.72it/s]
100%|| 79/79 [00:03<00:00, 26.55it/s]
, 23.82it/s]
 70%|   | 55/79 [00:03<00:00, 24.16it/s]
 73%|  | 58/79 [00:03<00:00, 24.36it/s]
 77%|  | 61/79 [00:03<00:00, 24.28it/s]
 81%|  | 64/79 [00:03<00:00, 24.27it/s]
 85%| | 67/79 [00:03<00:00, 24.32it/s]
 89%| | 70/79 [00:03<00:00, 24.68it/s]
 92%|| 73/79 [00:03<00:00, 24.79it/s]
 96%|| 76/79 [00:03<00:00, 25.50it/s]
100%|| 79/79 [00:03<00:00, 26.26it/s]
, 23.04it/s]
 70%|   | 55/79 [00:03<00:01, 23.55it/s]
 73%|  | 58/79 [00:03<00:00, 24.30it/s]
 77%|  | 61/79 [00:03<00:00, 24.30it/s]
 81%|  | 64/79 [00:03<00:00, 24.48it/s]
 85%| | 67/79 [00:03<00:00, 24.66it/s]
 89%| | 70/79 [00:03<00:00, 24.75it/s]
 92%|| 73/79 [00:03<00:00, 25.05it/s]
 96%|| 76/79 [00:03<00:00, 25.81it/s]
100%|| 79/79 [00:03<00:00, 26.59it/s]
77it/s]
 68%|   | 54/79 [00:03<00:01, 23.85it/s]
 72%|  | 57/79 [00:03<00:00, 24.16it/s]
 76%|  | 60/79 [00:03<00:00, 24.25it/s]
 80%|  | 63/79 [00:03<00:00, 24.43it/s]
 84%| | 66/79 [00:03<00:00, 24.81it/s]
 87%| | 69/79 [00:03<00:00, 24.98it/s]
 91%| | 72/79 [00:03<00:00, 24.57it/s]
 95%|| 75/79 [00:03<00:00, 25.77it/s]
 99%|| 78/79 [00:03<00:00, 26.07it/s]
100%|| 79/79 [00:04<00:00, 19.41it/s]
, 23.72it/s]
 70%|   | 55/79 [00:03<00:01, 23.81it/s]
 73%|  | 58/79 [00:03<00:00, 24.20it/s]
 77%|  | 61/79 [00:03<00:00, 24.31it/s]
 81%|  | 64/79 [00:03<00:00, 24.41it/s]
 85%| | 67/79 [00:03<00:00, 24.60it/s]
 89%| | 70/79 [00:03<00:00, 25.03it/s]
 92%|| 73/79 [00:03<00:00, 25.07it/s]
 96%|| 76/79 [00:03<00:00, 25.73it/s]
100%|| 79/79 [00:03<00:00, 26.58it/s]
78it/s]
 68%|   | 54/79 [00:02<00:01, 23.94it/s]
 72%|  | 57/79 [00:03<00:00, 24.25it/s]
 76%|  | 60/79 [00:03<00:00, 24.25it/s]
 80%|  | 63/79 [00:03<00:00, 24.03it/s]
 84%| | 66/79 [00:03<00:00, 24.41it/s]
 87%| | 69/79 [00:03<00:00, 24.29it/s]
 91%| | 72/79 [00:03<00:00, 24.52it/s]
 95%|| 75/79 [00:03<00:00, 25.17it/s]
 99%|| 78/79 [00:03<00:00, 25.84it/s]
100%|| 79/79 [00:04<00:00, 19.55it/s]
, 23.51it/s]
 70%|   | 55/79 [00:03<00:01, 23.96it/s]
 73%|  | 58/79 [00:03<00:00, 24.27it/s]
 77%|  | 61/79 [00:03<00:00, 24.51it/s]
 81%|  | 64/79 [00:03<00:00, 24.82it/s]
 85%| | 67/79 [00:03<00:00, 24.95it/s]
 89%| | 70/79 [00:03<00:00, 24.94it/s]
 92%|| 73/79 [00:03<00:00, 25.13it/s]
 96%|| 76/79 [00:03<00:00, 25.82it/s]
100%|| 79/79 [00:03<00:00, 26.36it/s]
25it/s]
 68%|   | 54/79 [00:03<00:01, 23.55it/s]
 72%|  | 57/79 [00:03<00:00, 24.07it/s]
 76%|  | 60/79 [00:03<00:00, 23.96it/s]
 80%|  | 63/79 [00:03<00:00, 24.14it/s]
 84%| | 66/79 [00:03<00:00, 24.14it/s]
 87%| | 69/79 [00:03<00:00, 24.43it/s]
 91%| | 72/79 [00:03<00:00, 24.45it/s]
 95%|| 75/79 [00:03<00:00, 25.13it/s]
 99%|| 78/79 [00:03<00:00, 25.73it/s]
100%|| 79/79 [00:04<00:00, 19.40it/s]
, 23.69it/s]
 70%|   | 55/79 [00:03<00:00, 24.26it/s]
 73%|  | 58/79 [00:03<00:00, 24.36it/s]
 77%|  | 61/79 [00:03<00:00, 24.33it/s]
 81%|  | 64/79 [00:03<00:00, 24.47it/s]
 85%| | 67/79 [00:03<00:00, 24.59it/s]
 89%| | 70/79 [00:03<00:00, 24.71it/s]
 92%|| 73/79 [00:03<00:00, 25.09it/s]
 96%|| 76/79 [00:03<00:00, 25.72it/s]
100%|| 79/79 [00:04<00:00, 26.65it/s]
, 23.41it/s]
 70%|   | 55/79 [00:03<00:01, 23.79it/s]
 73%|  | 58/79 [00:03<00:00, 24.26it/s]
 77%|  | 61/79 [00:03<00:00, 24.39it/s]
 81%|  | 64/79 [00:03<00:00, 23.90it/s]
 85%| | 67/79 [00:03<00:00, 24.33it/s]
 89%| | 70/79 [00:03<00:00, 24.45it/s]
 92%|| 73/79 [00:03<00:00, 24.56it/s]
 96%|| 76/79 [00:03<00:00, 25.26it/s]
100%|| 79/79 [00:04<00:00, 26.07it/s]
, 22.92it/s]
 70%|   | 55/79 [00:03<00:01, 23.51it/s]
 73%|  | 58/79 [00:03<00:00, 23.89it/s]
 77%|  | 61/79 [00:03<00:00, 23.76it/s]
 81%|  | 64/79 [00:03<00:00, 23.95it/s]
 85%| | 67/79 [00:03<00:00, 24.18it/s]
 89%| | 70/79 [00:03<00:00, 24.41it/s]
 92%|| 73/79 [00:03<00:00, 24.75it/s]
 96%|| 76/79 [00:03<00:00, 25.67it/s]
100%|| 79/79 [00:04<00:00, 26.63it/s]
, 23.85it/s]
 70%|   | 55/79 [00:03<00:00, 24.43it/s]
 73%|  | 58/79 [00:03<00:00, 24.27it/s]
 77%|  | 61/79 [00:03<00:00, 24.33it/s]
 81%|  | 64/79 [00:03<00:00, 24.41it/s]
 85%| | 67/79 [00:03<00:00, 24.56it/s]
 89%| | 70/79 [00:03<00:00, 24.64it/s]
 92%|| 73/79 [00:03<00:00, 24.89it/s]
 96%|| 76/79 [00:03<00:00, 25.34it/s]
100%|| 79/79 [00:04<00:00, 26.22it/s]
, 22.83it/s]
 70%|   | 55/79 [00:03<00:01, 23.34it/s]
 73%|  | 58/79 [00:03<00:00, 23.49it/s]
 77%|  | 61/79 [00:03<00:00, 23.83it/s]
 81%|  | 64/79 [00:03<00:00, 23.99it/s]
 85%| | 67/79 [00:03<00:00, 24.06it/s]
 89%| | 70/79 [00:03<00:00, 24.02it/s]
 92%|| 73/79 [00:03<00:00, 24.53it/s]
 96%|| 76/79 [00:03<00:00, 25.39it/s]
100%|| 79/79 [00:04<00:00, 26.39it/s]
20it/s]
 68%|   | 54/79 [00:03<00:01, 23.56it/s]
 72%|  | 57/79 [00:03<00:00, 23.95it/s]
 76%|  | 60/79 [00:03<00:00, 23.98it/s]
 80%|  | 63/79 [00:03<00:00, 24.12it/s]
 84%| | 66/79 [00:03<00:00, 24.27it/s]
 87%| | 69/79 [00:03<00:00, 24.37it/s]
 91%| | 72/79 [00:03<00:00, 24.42it/s]
 95%|| 75/79 [00:03<00:00, 24.97it/s]
 99%|| 78/79 [00:04<00:00, 25.92it/s]
100%|| 79/79 [00:04<00:00, 19.14it/s]
, 23.18it/s]
 70%|   | 55/79 [00:03<00:01, 23.82it/s]
 73%|  | 58/79 [00:03<00:00, 23.82it/s]
 77%|  | 61/79 [00:03<00:00, 24.08it/s]
 81%|  | 64/79 [00:03<00:00, 23.88it/s]
 85%| | 67/79 [00:03<00:00, 24.24it/s]
 89%| | 70/79 [00:03<00:00, 24.20it/s]
 92%|| 73/79 [00:03<00:00, 24.67it/s]
 96%|| 76/79 [00:03<00:00, 25.47it/s]
100%|| 79/79 [00:04<00:00, 26.48it/s]
, 23.40it/s]
 70%|   | 55/79 [00:03<00:01, 23.55it/s]
 73%|  | 58/79 [00:03<00:00, 23.84it/s]
 77%|  | 61/79 [00:03<00:00, 23.86it/s]
 81%|  | 64/79 [00:03<00:00, 23.95it/s]
 85%| | 67/79 [00:03<00:00, 24.16it/s]
 89%| | 70/79 [00:03<00:00, 23.61it/s]
 92%|| 73/79 [00:03<00:00, 24.09it/s]
 96%|| 76/79 [00:03<00:00, 24.96it/s]
100%|| 79/79 [00:04<00:00, 26.05it/s]
, 23.54it/s]
 70%|   | 55/79 [00:03<00:00, 24.05it/s]
 73%|  | 58/79 [00:03<00:00, 24.22it/s]
 77%|  | 61/79 [00:03<00:00, 24.39it/s]
 81%|  | 64/79 [00:03<00:00, 24.53it/s]
 85%| | 67/79 [00:03<00:00, 24.86it/s]
 89%| | 70/79 [00:03<00:00, 24.26it/s]
 92%|| 73/79 [00:03<00:00, 24.88it/s]
 96%|| 76/79 [00:03<00:00, 25.35it/s]
100%|| 79/79 [00:04<00:00, 26.31it/s]
, 22.94it/s]
 70%|   | 55/79 [00:03<00:01, 23.37it/s]
 73%|  | 58/79 [00:03<00:00, 23.43it/s]
 77%|  | 61/79 [00:03<00:00, 23.69it/s]
 81%|  | 64/79 [00:03<00:00, 23.80it/s]
 85%| | 67/79 [00:03<00:00, 23.85it/s]
 89%| | 70/79 [00:03<00:00, 23.63it/s]
 92%|| 73/79 [00:03<00:00, 24.28it/s]
 96%|| 76/79 [00:04<00:00, 24.99it/s]
100%|| 79/79 [00:04<00:00, 25.89it/s]
, 22.90it/s]
 70%|   | 55/79 [00:03<00:01, 23.26it/s]
 73%|  | 58/79 [00:03<00:00, 23.51it/s]
 77%|  | 61/79 [00:03<00:00, 23.60it/s]
 81%|  | 64/79 [00:03<00:00, 23.92it/s]
 85%| | 67/79 [00:03<00:00, 24.18it/s]
 89%| | 70/79 [00:03<00:00, 24.24it/s]
 92%|| 73/79 [00:03<00:00, 24.73it/s]
 96%|| 76/79 [00:04<00:00, 25.45it/s]
100%|| 79/79 [00:04<00:00, 26.39it/s]
, 22.92it/s]
 70%|   | 55/79 [00:03<00:01, 23.55it/s]
 73%|  | 58/79 [00:03<00:00, 23.78it/s]
 77%|  | 61/79 [00:03<00:00, 24.18it/s]
 81%|  | 64/79 [00:03<00:00, 24.61it/s]
 85%| | 67/79 [00:03<00:00, 24.93it/s]
 89%| | 70/79 [00:03<00:00, 24.85it/s]
 92%|| 73/79 [00:03<00:00, 25.21it/s]
 96%|| 76/79 [00:04<00:00, 25.71it/s]
100%|| 79/79 [00:04<00:00, 26.44it/s]
, 23.13it/s]
 70%|   | 55/79 [00:03<00:01, 23.40it/s]
 73%|  | 58/79 [00:03<00:00, 23.94it/s]
 77%|  | 61/79 [00:03<00:00, 23.92it/s]
 81%|  | 64/79 [00:03<00:00, 24.17it/s]
 85%| | 67/79 [00:03<00:00, 24.33it/s]
 89%| | 70/79 [00:03<00:00, 24.52it/s]
 92%|| 73/79 [00:03<00:00, 24.80it/s]
 96%|| 76/79 [00:04<00:00, 25.55it/s]
100%|| 79/79 [00:04<00:00, 26.30it/s]
2020-06-23 15:40:11,741 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.240353 (0.027138258361816405 s / img per device, on 32 devices)
2020-06-23 15:40:11,762 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:40:11,762 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:40:11,781 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592952021153, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 10, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592952021153, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 10}}
2020-06-23 15:40:21,930 maskrcnn_benchmark.trainer INFO: eta: 1:07:44  iter: 8260  loss: 0.6672 (0.7700)  loss_classifier: 0.2071 (0.2838)  loss_box_reg: 0.1048 (0.1233)  loss_mask: 0.2702 (0.3037)  loss_objectness: 0.0252 (0.0384)  loss_rpn_box_reg: 0.0133 (0.0207)  time: 0.1090 (0.1281)  data: 0.0015 (0.0197)  lr: 0.160000  max mem: 5140
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 15:40:24,122 maskrcnn_benchmark.trainer INFO: eta: 1:07:40  iter: 8280  loss: 0.7113 (0.7698)  loss_classifier: 0.2530 (0.2837)  loss_box_reg: 0.1231 (0.1233)  loss_mask: 0.2446 (0.3037)  loss_objectness: 0.0271 (0.0384)  loss_rpn_box_reg: 0.0107 (0.0207)  time: 0.1095 (0.1280)  data: 0.0015 (0.0196)  lr: 0.160000  max mem: 5140
2020-06-23 15:40:26,293 maskrcnn_benchmark.trainer INFO: eta: 1:07:36  iter: 8300  loss: 0.7844 (0.7697)  loss_classifier: 0.2685 (0.2837)  loss_box_reg: 0.1408 (0.1233)  loss_mask: 0.2626 (0.3036)  loss_objectness: 0.0334 (0.0384)  loss_rpn_box_reg: 0.0123 (0.0207)  time: 0.1086 (0.1280)  data: 0.0015 (0.0196)  lr: 0.160000  max mem: 5140
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 15:40:28,470 maskrcnn_benchmark.trainer INFO: eta: 1:07:32  iter: 8320  loss: 0.6022 (0.7694)  loss_classifier: 0.2105 (0.2836)  loss_box_reg: 0.1003 (0.1233)  loss_mask: 0.2467 (0.3035)  loss_objectness: 0.0126 (0.0384)  loss_rpn_box_reg: 0.0087 (0.0207)  time: 0.1084 (0.1279)  data: 0.0014 (0.0195)  lr: 0.160000  max mem: 5140
DONE (t=0.77s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 15:40:30,646 maskrcnn_benchmark.trainer INFO: eta: 1:07:28  iter: 8340  loss: 0.6778 (0.7692)  loss_classifier: 0.2475 (0.2835)  loss_box_reg: 0.1084 (0.1233)  loss_mask: 0.2704 (0.3034)  loss_objectness: 0.0236 (0.0384)  loss_rpn_box_reg: 0.0085 (0.0207)  time: 0.1082 (0.1279)  data: 0.0014 (0.0195)  lr: 0.160000  max mem: 5140
DONE (t=1.74s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.29771
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.50150
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.31818
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.17199
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.32376
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.38757
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.27379
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43835
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.46066
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.28350
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.49498
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.58467
2020-06-23 15:40:32,834 maskrcnn_benchmark.trainer INFO: eta: 1:07:24  iter: 8360  loss: 0.6869 (0.7691)  loss_classifier: 0.2366 (0.2835)  loss_box_reg: 0.1131 (0.1233)  loss_mask: 0.2754 (0.3033)  loss_objectness: 0.0287 (0.0384)  loss_rpn_box_reg: 0.0108 (0.0207)  time: 0.1079 (0.1278)  data: 0.0015 (0.0195)  lr: 0.160000  max mem: 5140
2020-06-23 15:40:35,000 maskrcnn_benchmark.trainer INFO: eta: 1:07:20  iter: 8380  loss: 0.5433 (0.7687)  loss_classifier: 0.1895 (0.2833)  loss_box_reg: 0.0915 (0.1232)  loss_mask: 0.2458 (0.3032)  loss_objectness: 0.0121 (0.0384)  loss_rpn_box_reg: 0.0058 (0.0207)  time: 0.1078 (0.1278)  data: 0.0014 (0.0194)  lr: 0.160000  max mem: 5140
2020-06-23 15:40:37,175 maskrcnn_benchmark.trainer INFO: eta: 1:07:16  iter: 8400  loss: 0.6752 (0.7685)  loss_classifier: 0.2341 (0.2832)  loss_box_reg: 0.1138 (0.1232)  loss_mask: 0.2811 (0.3031)  loss_objectness: 0.0204 (0.0384)  loss_rpn_box_reg: 0.0085 (0.0207)  time: 0.1088 (0.1277)  data: 0.0015 (0.0194)  lr: 0.160000  max mem: 5140
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:40:39,360 maskrcnn_benchmark.trainer INFO: eta: 1:07:12  iter: 8420  loss: 0.5945 (0.7682)  loss_classifier: 0.2044 (0.2831)  loss_box_reg: 0.1026 (0.1231)  loss_mask: 0.2543 (0.3030)  loss_objectness: 0.0169 (0.0383)  loss_rpn_box_reg: 0.0093 (0.0207)  time: 0.1090 (0.1277)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5140
DONE (t=2.14s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:40:41,546 maskrcnn_benchmark.trainer INFO: eta: 1:07:08  iter: 8440  loss: 0.6101 (0.7679)  loss_classifier: 0.2101 (0.2829)  loss_box_reg: 0.0970 (0.1231)  loss_mask: 0.2718 (0.3029)  loss_objectness: 0.0241 (0.0383)  loss_rpn_box_reg: 0.0085 (0.0207)  time: 0.1089 (0.1277)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5140
DONE (t=2.81s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.28169
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.47183
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.29551
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.12195
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.30942
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.41929
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.26472
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.41266
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.43176
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24458
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.47373
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.57071
2020-06-23 15:40:43,132 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.29770745520732994, segm mAP: 0.2816944592775803
:::MLLOG {"namespace": "", "time_ms": 1592952043132, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.29770745520732994, "SEGM": 0.2816944592775803}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 9}}
:::MLLOG {"namespace": "", "time_ms": 1592952043132, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 9}}
2020-06-23 15:40:43,909 maskrcnn_benchmark.trainer INFO: eta: 1:07:05  iter: 8460  loss: 0.5823 (0.7675)  loss_classifier: 0.2375 (0.2828)  loss_box_reg: 0.0908 (0.1230)  loss_mask: 0.2296 (0.3028)  loss_objectness: 0.0137 (0.0382)  loss_rpn_box_reg: 0.0090 (0.0206)  time: 0.1082 (0.1276)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5140
2020-06-23 15:40:46,103 maskrcnn_benchmark.trainer INFO: eta: 1:07:01  iter: 8480  loss: 0.6645 (0.7672)  loss_classifier: 0.2239 (0.2826)  loss_box_reg: 0.1255 (0.1230)  loss_mask: 0.2573 (0.3027)  loss_objectness: 0.0174 (0.0382)  loss_rpn_box_reg: 0.0084 (0.0206)  time: 0.1093 (0.1276)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5140
2020-06-23 15:40:48,289 maskrcnn_benchmark.trainer INFO: eta: 1:06:57  iter: 8500  loss: 0.7278 (0.7670)  loss_classifier: 0.2979 (0.2826)  loss_box_reg: 0.1263 (0.1230)  loss_mask: 0.2438 (0.3026)  loss_objectness: 0.0167 (0.0382)  loss_rpn_box_reg: 0.0130 (0.0206)  time: 0.1087 (0.1275)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5140
2020-06-23 15:40:50,476 maskrcnn_benchmark.trainer INFO: eta: 1:06:53  iter: 8520  loss: 0.7146 (0.7668)  loss_classifier: 0.2485 (0.2825)  loss_box_reg: 0.1231 (0.1230)  loss_mask: 0.2570 (0.3025)  loss_objectness: 0.0283 (0.0382)  loss_rpn_box_reg: 0.0144 (0.0206)  time: 0.1086 (0.1275)  data: 0.0015 (0.0191)  lr: 0.160000  max mem: 5140
2020-06-23 15:40:52,649 maskrcnn_benchmark.trainer INFO: eta: 1:06:49  iter: 8540  loss: 0.6429 (0.7664)  loss_classifier: 0.2026 (0.2824)  loss_box_reg: 0.0913 (0.1229)  loss_mask: 0.2516 (0.3024)  loss_objectness: 0.0150 (0.0381)  loss_rpn_box_reg: 0.0127 (0.0206)  time: 0.1077 (0.1275)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5140
2020-06-23 15:40:54,827 maskrcnn_benchmark.trainer INFO: eta: 1:06:45  iter: 8560  loss: 0.6669 (0.7662)  loss_classifier: 0.2292 (0.2823)  loss_box_reg: 0.1134 (0.1229)  loss_mask: 0.2689 (0.3023)  loss_objectness: 0.0174 (0.0381)  loss_rpn_box_reg: 0.0147 (0.0206)  time: 0.1089 (0.1274)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5140
2020-06-23 15:40:56,991 maskrcnn_benchmark.trainer INFO: eta: 1:06:41  iter: 8580  loss: 0.6804 (0.7660)  loss_classifier: 0.2263 (0.2822)  loss_box_reg: 0.1024 (0.1228)  loss_mask: 0.2628 (0.3022)  loss_objectness: 0.0274 (0.0381)  loss_rpn_box_reg: 0.0114 (0.0206)  time: 0.1082 (0.1274)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5140
2020-06-23 15:40:59,178 maskrcnn_benchmark.trainer INFO: eta: 1:06:38  iter: 8600  loss: 0.7075 (0.7658)  loss_classifier: 0.2567 (0.2821)  loss_box_reg: 0.1062 (0.1228)  loss_mask: 0.2654 (0.3021)  loss_objectness: 0.0199 (0.0381)  loss_rpn_box_reg: 0.0125 (0.0206)  time: 0.1091 (0.1273)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:01,343 maskrcnn_benchmark.trainer INFO: eta: 1:06:34  iter: 8620  loss: 0.6730 (0.7656)  loss_classifier: 0.2143 (0.2820)  loss_box_reg: 0.1165 (0.1228)  loss_mask: 0.2695 (0.3021)  loss_objectness: 0.0277 (0.0381)  loss_rpn_box_reg: 0.0075 (0.0206)  time: 0.1080 (0.1273)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:03,511 maskrcnn_benchmark.trainer INFO: eta: 1:06:30  iter: 8640  loss: 0.6793 (0.7654)  loss_classifier: 0.2160 (0.2819)  loss_box_reg: 0.1064 (0.1228)  loss_mask: 0.2747 (0.3020)  loss_objectness: 0.0225 (0.0381)  loss_rpn_box_reg: 0.0114 (0.0207)  time: 0.1089 (0.1272)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:05,701 maskrcnn_benchmark.trainer INFO: eta: 1:06:26  iter: 8660  loss: 0.6994 (0.7653)  loss_classifier: 0.2654 (0.2818)  loss_box_reg: 0.1355 (0.1228)  loss_mask: 0.2693 (0.3020)  loss_objectness: 0.0272 (0.0381)  loss_rpn_box_reg: 0.0153 (0.0207)  time: 0.1092 (0.1272)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:07,891 maskrcnn_benchmark.trainer INFO: eta: 1:06:22  iter: 8680  loss: 0.5802 (0.7651)  loss_classifier: 0.2343 (0.2817)  loss_box_reg: 0.0893 (0.1227)  loss_mask: 0.2596 (0.3019)  loss_objectness: 0.0187 (0.0381)  loss_rpn_box_reg: 0.0075 (0.0207)  time: 0.1091 (0.1272)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:10,077 maskrcnn_benchmark.trainer INFO: eta: 1:06:18  iter: 8700  loss: 0.7317 (0.7649)  loss_classifier: 0.2464 (0.2817)  loss_box_reg: 0.1051 (0.1227)  loss_mask: 0.2772 (0.3019)  loss_objectness: 0.0244 (0.0380)  loss_rpn_box_reg: 0.0110 (0.0207)  time: 0.1096 (0.1271)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:12,259 maskrcnn_benchmark.trainer INFO: eta: 1:06:14  iter: 8720  loss: 0.6066 (0.7646)  loss_classifier: 0.2144 (0.2815)  loss_box_reg: 0.0998 (0.1227)  loss_mask: 0.2570 (0.3017)  loss_objectness: 0.0200 (0.0380)  loss_rpn_box_reg: 0.0111 (0.0207)  time: 0.1087 (0.1271)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:14,447 maskrcnn_benchmark.trainer INFO: eta: 1:06:11  iter: 8740  loss: 0.6433 (0.7644)  loss_classifier: 0.2340 (0.2815)  loss_box_reg: 0.1143 (0.1226)  loss_mask: 0.2647 (0.3017)  loss_objectness: 0.0262 (0.0380)  loss_rpn_box_reg: 0.0078 (0.0207)  time: 0.1089 (0.1270)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:16,622 maskrcnn_benchmark.trainer INFO: eta: 1:06:07  iter: 8760  loss: 0.6397 (0.7642)  loss_classifier: 0.2243 (0.2814)  loss_box_reg: 0.0942 (0.1226)  loss_mask: 0.2729 (0.3016)  loss_objectness: 0.0243 (0.0380)  loss_rpn_box_reg: 0.0129 (0.0206)  time: 0.1085 (0.1270)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:18,803 maskrcnn_benchmark.trainer INFO: eta: 1:06:03  iter: 8780  loss: 0.6763 (0.7640)  loss_classifier: 0.2492 (0.2813)  loss_box_reg: 0.1185 (0.1226)  loss_mask: 0.2826 (0.3015)  loss_objectness: 0.0205 (0.0380)  loss_rpn_box_reg: 0.0077 (0.0207)  time: 0.1088 (0.1270)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:20,972 maskrcnn_benchmark.trainer INFO: eta: 1:05:59  iter: 8800  loss: 0.6470 (0.7639)  loss_classifier: 0.2655 (0.2812)  loss_box_reg: 0.1028 (0.1226)  loss_mask: 0.2624 (0.3015)  loss_objectness: 0.0156 (0.0379)  loss_rpn_box_reg: 0.0120 (0.0206)  time: 0.1075 (0.1269)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:23,153 maskrcnn_benchmark.trainer INFO: eta: 1:05:55  iter: 8820  loss: 0.6333 (0.7636)  loss_classifier: 0.2241 (0.2811)  loss_box_reg: 0.0941 (0.1225)  loss_mask: 0.2727 (0.3014)  loss_objectness: 0.0195 (0.0379)  loss_rpn_box_reg: 0.0122 (0.0206)  time: 0.1087 (0.1269)  data: 0.0013 (0.0185)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:25,343 maskrcnn_benchmark.trainer INFO: eta: 1:05:52  iter: 8840  loss: 0.6410 (0.7633)  loss_classifier: 0.2173 (0.2810)  loss_box_reg: 0.0974 (0.1225)  loss_mask: 0.2666 (0.3013)  loss_objectness: 0.0226 (0.0379)  loss_rpn_box_reg: 0.0087 (0.0206)  time: 0.1090 (0.1268)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:27,540 maskrcnn_benchmark.trainer INFO: eta: 1:05:48  iter: 8860  loss: 0.6679 (0.7631)  loss_classifier: 0.2474 (0.2810)  loss_box_reg: 0.1121 (0.1225)  loss_mask: 0.2561 (0.3012)  loss_objectness: 0.0196 (0.0378)  loss_rpn_box_reg: 0.0082 (0.0206)  time: 0.1097 (0.1268)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:29,713 maskrcnn_benchmark.trainer INFO: eta: 1:05:44  iter: 8880  loss: 0.7054 (0.7630)  loss_classifier: 0.2311 (0.2809)  loss_box_reg: 0.1258 (0.1225)  loss_mask: 0.2784 (0.3012)  loss_objectness: 0.0228 (0.0378)  loss_rpn_box_reg: 0.0141 (0.0206)  time: 0.1087 (0.1268)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:31,894 maskrcnn_benchmark.trainer INFO: eta: 1:05:40  iter: 8900  loss: 0.6941 (0.7628)  loss_classifier: 0.2767 (0.2808)  loss_box_reg: 0.1145 (0.1225)  loss_mask: 0.2642 (0.3011)  loss_objectness: 0.0151 (0.0378)  loss_rpn_box_reg: 0.0151 (0.0206)  time: 0.1087 (0.1267)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:34,047 maskrcnn_benchmark.trainer INFO: eta: 1:05:36  iter: 8920  loss: 0.6872 (0.7626)  loss_classifier: 0.2472 (0.2807)  loss_box_reg: 0.1105 (0.1224)  loss_mask: 0.2637 (0.3010)  loss_objectness: 0.0206 (0.0378)  loss_rpn_box_reg: 0.0092 (0.0206)  time: 0.1069 (0.1267)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:36,225 maskrcnn_benchmark.trainer INFO: eta: 1:05:33  iter: 8940  loss: 0.6349 (0.7624)  loss_classifier: 0.2417 (0.2807)  loss_box_reg: 0.1100 (0.1224)  loss_mask: 0.2417 (0.3009)  loss_objectness: 0.0181 (0.0378)  loss_rpn_box_reg: 0.0116 (0.0206)  time: 0.1084 (0.1266)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:38,405 maskrcnn_benchmark.trainer INFO: eta: 1:05:29  iter: 8960  loss: 0.7262 (0.7623)  loss_classifier: 0.2155 (0.2806)  loss_box_reg: 0.1073 (0.1224)  loss_mask: 0.2596 (0.3009)  loss_objectness: 0.0208 (0.0377)  loss_rpn_box_reg: 0.0133 (0.0207)  time: 0.1089 (0.1266)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:40,594 maskrcnn_benchmark.trainer INFO: eta: 1:05:25  iter: 8980  loss: 0.6413 (0.7620)  loss_classifier: 0.2298 (0.2805)  loss_box_reg: 0.0985 (0.1223)  loss_mask: 0.2624 (0.3008)  loss_objectness: 0.0173 (0.0377)  loss_rpn_box_reg: 0.0081 (0.0207)  time: 0.1087 (0.1266)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5140
2020-06-23 15:41:42,764 maskrcnn_benchmark.trainer INFO: eta: 1:05:21  iter: 9000  loss: 0.6186 (0.7618)  loss_classifier: 0.2143 (0.2804)  loss_box_reg: 0.0928 (0.1223)  loss_mask: 0.2413 (0.3007)  loss_objectness: 0.0207 (0.0377)  loss_rpn_box_reg: 0.0083 (0.0207)  time: 0.1082 (0.1265)  data: 0.0014 (0.0182)  lr: 0.016000  max mem: 5140
2020-06-23 15:41:44,941 maskrcnn_benchmark.trainer INFO: eta: 1:05:18  iter: 9020  loss: 0.6050 (0.7615)  loss_classifier: 0.2191 (0.2803)  loss_box_reg: 0.0962 (0.1223)  loss_mask: 0.2624 (0.3006)  loss_objectness: 0.0195 (0.0377)  loss_rpn_box_reg: 0.0073 (0.0207)  time: 0.1084 (0.1265)  data: 0.0014 (0.0181)  lr: 0.016000  max mem: 5140
2020-06-23 15:41:47,140 maskrcnn_benchmark.trainer INFO: eta: 1:05:14  iter: 9040  loss: 0.5979 (0.7612)  loss_classifier: 0.1926 (0.2801)  loss_box_reg: 0.0851 (0.1223)  loss_mask: 0.2655 (0.3006)  loss_objectness: 0.0189 (0.0377)  loss_rpn_box_reg: 0.0057 (0.0206)  time: 0.1098 (0.1264)  data: 0.0014 (0.0181)  lr: 0.016000  max mem: 5140
2020-06-23 15:41:49,352 maskrcnn_benchmark.trainer INFO: eta: 1:05:10  iter: 9060  loss: 0.5393 (0.7608)  loss_classifier: 0.1635 (0.2799)  loss_box_reg: 0.0831 (0.1222)  loss_mask: 0.2388 (0.3005)  loss_objectness: 0.0190 (0.0376)  loss_rpn_box_reg: 0.0046 (0.0206)  time: 0.1099 (0.1264)  data: 0.0013 (0.0181)  lr: 0.016000  max mem: 5140
2020-06-23 15:41:51,542 maskrcnn_benchmark.trainer INFO: eta: 1:05:07  iter: 9080  loss: 0.6688 (0.7607)  loss_classifier: 0.2644 (0.2799)  loss_box_reg: 0.1204 (0.1222)  loss_mask: 0.2633 (0.3003)  loss_objectness: 0.0212 (0.0376)  loss_rpn_box_reg: 0.0147 (0.0206)  time: 0.1096 (0.1264)  data: 0.0015 (0.0180)  lr: 0.016000  max mem: 5140
2020-06-23 15:41:53,731 maskrcnn_benchmark.trainer INFO: eta: 1:05:03  iter: 9100  loss: 0.5554 (0.7603)  loss_classifier: 0.1755 (0.2797)  loss_box_reg: 0.0980 (0.1221)  loss_mask: 0.2491 (0.3003)  loss_objectness: 0.0124 (0.0376)  loss_rpn_box_reg: 0.0058 (0.0206)  time: 0.1091 (0.1263)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5140
2020-06-23 15:41:55,928 maskrcnn_benchmark.trainer INFO: eta: 1:04:59  iter: 9120  loss: 0.5488 (0.7599)  loss_classifier: 0.1738 (0.2795)  loss_box_reg: 0.0794 (0.1221)  loss_mask: 0.2595 (0.3002)  loss_objectness: 0.0158 (0.0376)  loss_rpn_box_reg: 0.0051 (0.0206)  time: 0.1090 (0.1263)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5140
2020-06-23 15:41:58,122 maskrcnn_benchmark.trainer INFO: eta: 1:04:56  iter: 9140  loss: 0.5496 (0.7594)  loss_classifier: 0.1782 (0.2793)  loss_box_reg: 0.0933 (0.1220)  loss_mask: 0.2637 (0.3000)  loss_objectness: 0.0079 (0.0375)  loss_rpn_box_reg: 0.0068 (0.0206)  time: 0.1087 (0.1263)  data: 0.0013 (0.0179)  lr: 0.016000  max mem: 5140
2020-06-23 15:42:00,308 maskrcnn_benchmark.trainer INFO: eta: 1:04:52  iter: 9160  loss: 0.6463 (0.7591)  loss_classifier: 0.1955 (0.2791)  loss_box_reg: 0.0948 (0.1220)  loss_mask: 0.2673 (0.3000)  loss_objectness: 0.0144 (0.0375)  loss_rpn_box_reg: 0.0081 (0.0206)  time: 0.1090 (0.1262)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5140
:::MLLOG {"namespace": "", "time_ms": 1592952121387, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 10}}
:::MLLOG {"namespace": "", "time_ms": 1592952121387, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 10}}
:::MLLOG {"namespace": "", "time_ms": 1592952121387, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 10}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 15:42:01,584 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
2020-06-23 15:42:01,885 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:00<00:46,  1.63it/s]
  8%|         | 6/79 [00:01<00:32,  2.25it/s]
 11%|        | 9/79 [00:01<00:22,  3.11it/s]
 15%|        | 12/79 [00:01<00:15,  4.22it/s]
 19%|        | 15/79 [00:01<00:11,  5.62it/s]
 23%|       | 18/79 [00:01<00:08,  7.36it/s]
 27%|       | 21/79 [00:01<00:06,  9.37it/s]
 30%|       | 24/79 [00:01<00:04, 11.55it/s]
 34%|      | 27/79 [00:01<00:03, 13.88it/s]
 38%|      | 30/79 [00:02<00:03, 16.08it/s]
 42%|     | 33/79 [00:02<00:02, 18.16it/s]
 46%|     | 36/79 [00:02<00:02, 19.96it/s]
 49%|     | 39/79 [00:02<00:01, 21.48it/s]
 53%|    | 42/79 [00:02<00:01, 22.67it/s]
 57%|    | 45/79 [00:02<00:01, 23.65it/s]
 61%|    | 48/79 [00:02<00:01, 24.42it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.25it/s]
 32%|      | 25/79 [00:01<00:04, 11.41it/s]
 35%|      | 28/79 [00:01<00:03, 13.69it/s]
 39%|      | 31/79 [00:02<00:03, 15.89it/s]
 43%|     | 34/79 [00:02<00:02, 17.97it/s]
 47%|     | 37/79 [00:02<00:02, 19.68it/s]
 51%|     | 40/79 [00:02<00:01, 21.02it/s]
 54%|    | 43/79 [00:02<00:01, 22.32it/s]
 58%|    | 46/79 [00:02<00:01, 22.62it/s]
 62%|   | 49/79 [00:02<00:01, 23.24it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.46it/s]
 24%|       | 19/79 [00:01<00:08,  7.14it/s]
 28%|       | 22/79 [00:01<00:06,  9.11it/s]
 32%|      | 25/79 [00:01<00:04, 11.29it/s]
 35%|      | 28/79 [00:01<00:03, 13.55it/s]
 39%|      | 31/79 [00:02<00:03, 15.68it/s]
 43%|     | 34/79 [00:02<00:02, 17.68it/s]
 47%|     | 37/79 [00:02<00:02, 19.37it/s]
 51%|     | 40/79 [00:02<00:01, 20.63it/s]
 54%|    | 43/79 [00:02<00:01, 21.66it/s]
 58%|    | 46/79 [00:02<00:01, 22.57it/s]
 62%|   | 49/79 [00:02<00:01, 23.56it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  4%|         | 3/79 [00:01<00:49,  1.54it/s]
  8%|         | 6/79 [00:01<00:34,  2.14it/s]
 11%|        | 9/79 [00:01<00:23,  2.94it/s]
 15%|        | 12/79 [00:01<00:16,  4.01it/s]
 19%|        | 15/79 [00:01<00:11,  5.36it/s]
 23%|       | 18/79 [00:01<00:08,  6.99it/s]
 27%|       | 21/79 [00:01<00:06,  8.92it/s]
 30%|       | 24/79 [00:01<00:04, 11.01it/s]
 34%|      | 27/79 [00:01<00:03, 13.22it/s]
 38%|      | 30/79 [00:02<00:03, 15.34it/s]
 42%|     | 33/79 [00:02<00:02, 17.32it/s]
 46%|     | 36/79 [00:02<00:02, 19.10it/s]
 49%|     | 39/79 [00:02<00:01, 20.54it/s]
 53%|    | 42/79 [00:02<00:01, 21.62it/s]
 57%|    | 45/79 [00:02<00:01, 22.39it/s]
 61%|    | 48/79 [00:02<00:01, 23.29it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.09it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.15it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.35it/s]
 35%|      | 28/79 [00:01<00:03, 13.55it/s]
 39%|      | 31/79 [00:02<00:03, 15.81it/s]
 43%|     | 34/79 [00:02<00:02, 17.80it/s]
 47%|     | 37/79 [00:02<00:02, 19.62it/s]
 51%|     | 40/79 [00:02<00:01, 20.91it/s]
 54%|    | 43/79 [00:02<00:01, 22.01it/s]
 58%|    | 46/79 [00:02<00:01, 22.96it/s]
 62%|   | 49/79 [00:02<00:01, 23.76it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.03it/s]
 32%|      | 25/79 [00:01<00:04, 11.18it/s]
 35%|      | 28/79 [00:01<00:03, 13.35it/s]
 39%|      | 31/79 [00:02<00:03, 15.44it/s]
 43%|     | 34/79 [00:02<00:02, 17.45it/s]
 47%|     | 37/79 [00:02<00:02, 19.03it/s]
 51%|     | 40/79 [00:02<00:01, 20.48it/s]
 54%|    | 43/79 [00:02<00:01, 21.49it/s]
 58%|    | 46/79 [00:02<00:01, 22.30it/s]
 62%|   | 49/79 [00:02<00:01, 22.76it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.06it/s]
 28%|       | 22/79 [00:01<00:06,  9.00it/s]
 32%|      | 25/79 [00:01<00:04, 11.15it/s]
 35%|      | 28/79 [00:01<00:03, 13.38it/s]
 39%|      | 31/79 [00:02<00:03, 15.54it/s]
 43%|     | 34/79 [00:02<00:02, 17.54it/s]
 47%|     | 37/79 [00:02<00:02, 19.25it/s]
 51%|     | 40/79 [00:02<00:01, 20.63it/s]
 54%|    | 43/79 [00:02<00:01, 21.71it/s]
 58%|    | 46/79 [00:02<00:01, 22.65it/s]
 62%|   | 49/79 [00:02<00:01, 23.29it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.07it/s]
 28%|       | 22/79 [00:01<00:06,  9.00it/s]
 32%|      | 25/79 [00:01<00:04, 11.15it/s]
 35%|      | 28/79 [00:01<00:03, 13.34it/s]
 39%|      | 31/79 [00:02<00:03, 15.49it/s]
 43%|     | 34/79 [00:02<00:02, 17.59it/s]
 47%|     | 37/79 [00:02<00:02, 19.45it/s]
 51%|     | 40/79 [00:02<00:01, 20.67it/s]
 54%|    | 43/79 [00:02<00:01, 21.61it/s]
 58%|    | 46/79 [00:02<00:01, 22.68it/s]
 62%|   | 49/79 [00:02<00:01, 23.16it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.93it/s]
 20%|        | 16/79 [00:01<00:11,  5.26it/s]
 24%|       | 19/79 [00:01<00:08,  6.90it/s]
 28%|       | 22/79 [00:01<00:06,  8.84it/s]
 32%|      | 25/79 [00:01<00:04, 10.99it/s]
 35%|      | 28/79 [00:02<00:03, 13.35it/s]
 39%|      | 31/79 [00:02<00:03, 15.36it/s]
 43%|     | 34/79 [00:02<00:02, 17.39it/s]
 47%|     | 37/79 [00:02<00:02, 19.19it/s]
 51%|     | 40/79 [00:02<00:01, 20.58it/s]
 54%|    | 43/79 [00:02<00:01, 21.91it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.12it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.09it/s]
 28%|       | 22/79 [00:01<00:06,  9.02it/s]
 32%|      | 25/79 [00:01<00:04, 11.16it/s]
 35%|      | 28/79 [00:01<00:03, 13.36it/s]
 39%|      | 31/79 [00:02<00:03, 15.62it/s]
 43%|     | 34/79 [00:02<00:02, 17.58it/s]
 47%|     | 37/79 [00:02<00:02, 19.36it/s]
 51%|     | 40/79 [00:02<00:01, 20.90it/s]
 54%|    | 43/79 [00:02<00:01, 21.85it/s]
 58%|    | 46/79 [00:02<00:01, 22.61it/s]
 62%|   | 49/79 [00:02<00:01, 23.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  4%|         | 3/79 [00:01<00:50,  1.52it/s]
  8%|         | 6/79 [00:01<00:34,  2.10it/s]
 11%|        | 9/79 [00:01<00:24,  2.90it/s]
 15%|        | 12/79 [00:01<00:16,  3.94it/s]
 19%|        | 15/79 [00:01<00:12,  5.29it/s]
 23%|       | 18/79 [00:01<00:08,  6.91it/s]
 27%|       | 21/79 [00:01<00:06,  8.71it/s]
 30%|       | 24/79 [00:01<00:05, 10.81it/s]
 34%|      | 27/79 [00:02<00:03, 13.04it/s]
 38%|      | 30/79 [00:02<00:03, 15.20it/s]
 42%|     | 33/79 [00:02<00:02, 16.97it/s]
 46%|     | 36/79 [00:02<00:02, 18.84it/s]
 49%|     | 39/79 [00:02<00:01, 20.14it/s]
 53%|    | 42/79 [00:02<00:01, 21.55it/s]
 57%|    | 45/79 [00:02<00:01, 22.52it/s]
 61%|    | 48/79 [00:02<00:01, 23.41it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.87it/s]
 32%|      | 25/79 [00:01<00:04, 11.04it/s]
 35%|      | 28/79 [00:02<00:03, 13.28it/s]
 39%|      | 31/79 [00:02<00:03, 15.53it/s]
 43%|     | 34/79 [00:02<00:02, 17.62it/s]
 47%|     | 37/79 [00:02<00:02, 19.39it/s]
 51%|     | 40/79 [00:02<00:01, 20.88it/s]
 54%|    | 43/79 [00:02<00:01, 22.00it/s]
 58%|    | 46/79 [00:02<00:01, 21.93it/s]
 62%|   | 49/79 [00:02<00:01, 22.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.48it/s]
 24%|       | 19/79 [00:01<00:08,  7.15it/s]
 28%|       | 22/79 [00:01<00:06,  9.09it/s]
 32%|      | 25/79 [00:01<00:04, 11.22it/s]
 35%|      | 28/79 [00:01<00:03, 13.45it/s]
 39%|      | 31/79 [00:02<00:03, 15.58it/s]
 43%|     | 34/79 [00:02<00:02, 17.46it/s]
 47%|     | 37/79 [00:02<00:02, 19.16it/s]
 51%|     | 40/79 [00:02<00:01, 20.57it/s]
 54%|    | 43/79 [00:02<00:01, 21.74it/s]
 58%|    | 46/79 [00:02<00:01, 22.59it/s]
 62%|   | 49/79 [00:02<00:01, 23.16it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:51,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.82it/s]
 16%|        | 13/79 [00:01<00:17,  3.85it/s]
 20%|        | 16/79 [00:01<00:12,  5.17it/s]
 24%|       | 19/79 [00:01<00:08,  6.80it/s]
 28%|       | 22/79 [00:01<00:06,  8.72it/s]
 32%|      | 25/79 [00:01<00:04, 10.84it/s]
 35%|      | 28/79 [00:02<00:03, 13.19it/s]
 39%|      | 31/79 [00:02<00:03, 15.42it/s]
 43%|     | 34/79 [00:02<00:02, 17.36it/s]
 47%|     | 37/79 [00:02<00:02, 19.10it/s]
 51%|     | 40/79 [00:02<00:01, 20.77it/s]
 54%|    | 43/79 [00:02<00:01, 21.80it/s]
 58%|    | 46/79 [00:02<00:01, 22.73it/s]
 62%|   | 49/79 [00:02<00:01, 23.56it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  4%|         | 3/79 [00:01<00:54,  1.41it/s]
  8%|         | 6/79 [00:01<00:37,  1.96it/s]
 11%|        | 9/79 [00:01<00:25,  2.71it/s]
 15%|        | 12/79 [00:01<00:18,  3.70it/s]
 19%|        | 15/79 [00:01<00:12,  4.98it/s]
 23%|       | 18/79 [00:01<00:09,  6.55it/s]
 27%|       | 21/79 [00:01<00:06,  8.45it/s]
 30%|       | 24/79 [00:01<00:05, 10.55it/s]
 34%|      | 27/79 [00:02<00:04, 12.83it/s]
 38%|      | 30/79 [00:02<00:03, 15.10it/s]
 42%|     | 33/79 [00:02<00:02, 17.19it/s]
 46%|     | 36/79 [00:02<00:02, 19.04it/s]
 49%|     | 39/79 [00:02<00:01, 20.59it/s]
 53%|    | 42/79 [00:02<00:01, 21.79it/s]
 57%|    | 45/79 [00:02<00:01, 22.60it/s]
 61%|    | 48/79 [00:02<00:01, 22.94it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:17,  3.88it/s]
 20%|        | 16/79 [00:01<00:12,  5.19it/s]
 24%|       | 19/79 [00:01<00:08,  6.80it/s]
 28%|       | 22/79 [00:01<00:06,  8.73it/s]
 32%|      | 25/79 [00:01<00:05, 10.74it/s]
 35%|      | 28/79 [00:02<00:03, 13.01it/s]
 39%|      | 31/79 [00:02<00:03, 15.23it/s]
 43%|     | 34/79 [00:02<00:02, 17.12it/s]
 47%|     | 37/79 [00:02<00:02, 18.77it/s]
 51%|     | 40/79 [00:02<00:01, 20.50it/s]
 54%|    | 43/79 [00:02<00:01, 21.57it/s]
 58%|    | 46/79 [00:02<00:01, 22.38it/s]
 62%|   | 49/79 [00:02<00:01, 23.12it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.02it/s]
 13%|        | 10/79 [00:01<00:24,  2.79it/s]
 16%|        | 13/79 [00:01<00:17,  3.82it/s]
 20%|        | 16/79 [00:01<00:12,  5.12it/s]
 24%|       | 19/79 [00:01<00:08,  6.73it/s]
 28%|       | 22/79 [00:01<00:06,  8.67it/s]
 32%|      | 25/79 [00:01<00:04, 10.81it/s]
 35%|      | 28/79 [00:02<00:03, 13.05it/s]
 39%|      | 31/79 [00:02<00:03, 15.23it/s]
 43%|     | 34/79 [00:02<00:02, 17.28it/s]
 47%|     | 37/79 [00:02<00:02, 19.17it/s]
 51%|     | 40/79 [00:02<00:01, 20.48it/s]
 54%|    | 43/79 [00:02<00:01, 21.77it/s]
 58%|    | 46/79 [00:02<00:01, 22.35it/s]
 62%|   | 49/79 [00:02<00:01, 23.08it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.05it/s]
 28%|       | 22/79 [00:01<00:06,  9.00it/s]
 32%|      | 25/79 [00:01<00:04, 11.16it/s]
 35%|      | 28/79 [00:02<00:03, 13.14it/s]
 39%|      | 31/79 [00:02<00:03, 15.28it/s]
 43%|     | 34/79 [00:02<00:02, 17.29it/s]
 47%|     | 37/79 [00:02<00:02, 19.16it/s]
 51%|     | 40/79 [00:02<00:01, 20.58it/s]
 54%|    | 43/79 [00:02<00:01, 21.90it/s]
 58%|    | 46/79 [00:02<00:01, 22.58it/s]
 62%|   | 49/79 [00:02<00:01, 23.28it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.80it/s]
 16%|        | 13/79 [00:01<00:17,  3.82it/s]
 20%|        | 16/79 [00:01<00:12,  5.13it/s]
 24%|       | 19/79 [00:01<00:08,  6.75it/s]
 28%|       | 22/79 [00:01<00:06,  8.67it/s]
 32%|      | 25/79 [00:01<00:05, 10.79it/s]
 35%|      | 28/79 [00:02<00:03, 13.05it/s]
 39%|      | 31/79 [00:02<00:03, 15.26it/s]
 43%|     | 34/79 [00:02<00:02, 17.22it/s]
 47%|     | 37/79 [00:02<00:02, 19.00it/s]
 51%|     | 40/79 [00:02<00:01, 20.47it/s]
 54%|    | 43/79 [00:02<00:01, 21.58it/s]
 58%|    | 46/79 [00:02<00:01, 22.47it/s]
 62%|   | 49/79 [00:02<00:01, 23.25it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.00it/s]
  5%|         | 4/79 [00:01<00:53,  1.40it/s]
  9%|         | 7/79 [00:01<00:36,  1.96it/s]
 13%|        | 10/79 [00:01<00:25,  2.71it/s]
 16%|        | 13/79 [00:01<00:17,  3.70it/s]
 20%|        | 16/79 [00:01<00:12,  4.99it/s]
 24%|       | 19/79 [00:01<00:09,  6.58it/s]
 28%|       | 22/79 [00:01<00:06,  8.47it/s]
 32%|      | 25/79 [00:01<00:05, 10.55it/s]
 35%|      | 28/79 [00:02<00:03, 12.80it/s]
 39%|      | 31/79 [00:02<00:03, 14.99it/s]
 43%|     | 34/79 [00:02<00:02, 17.12it/s]
 47%|     | 37/79 [00:02<00:02, 18.86it/s]
 51%|     | 40/79 [00:02<00:01, 20.13it/s]
 54%|    | 43/79 [00:02<00:01, 21.39it/s]
 58%|    | 46/79 [00:02<00:01, 22.14it/s]
 62%|   | 49/79 [00:02<00:01, 23.07it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:12,  5.24it/s]
 24%|       | 19/79 [00:01<00:08,  6.87it/s]
 28%|       | 22/79 [00:01<00:06,  8.76it/s]
 32%|      | 25/79 [00:01<00:04, 10.85it/s]
 35%|      | 28/79 [00:02<00:03, 13.09it/s]
 39%|      | 31/79 [00:02<00:03, 15.28it/s]
 43%|     | 34/79 [00:02<00:02, 16.86it/s]
 47%|     | 37/79 [00:02<00:02, 18.56it/s]
 51%|     | 40/79 [00:02<00:01, 20.15it/s]
 54%|    | 43/79 [00:02<00:01, 21.21it/s]
 58%|    | 46/79 [00:02<00:01, 22.16it/s]
 62%|   | 49/79 [00:02<00:01, 22.64it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  4%|         | 3/79 [00:01<00:52,  1.45it/s]
  8%|         | 6/79 [00:01<00:36,  2.02it/s]
 11%|        | 9/79 [00:01<00:25,  2.79it/s]
 15%|        | 12/79 [00:01<00:17,  3.80it/s]
 19%|        | 15/79 [00:01<00:12,  5.10it/s]
 23%|       | 18/79 [00:01<00:09,  6.70it/s]
 27%|       | 21/79 [00:01<00:06,  8.59it/s]
 30%|       | 24/79 [00:01<00:05, 10.67it/s]
 34%|      | 27/79 [00:02<00:04, 12.85it/s]
 38%|      | 30/79 [00:02<00:03, 14.94it/s]
 42%|     | 33/79 [00:02<00:02, 16.94it/s]
 46%|     | 36/79 [00:02<00:02, 18.58it/s]
 49%|     | 39/79 [00:02<00:01, 20.01it/s]
 53%|    | 42/79 [00:02<00:01, 20.94it/s]
 57%|    | 45/79 [00:02<00:01, 21.80it/s]
 61%|    | 48/79 [00:02<00:01, 22.43it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.81it/s]
 28%|       | 22/79 [00:01<00:06,  8.72it/s]
 32%|      | 25/79 [00:01<00:05, 10.78it/s]
 35%|      | 28/79 [00:02<00:03, 12.96it/s]
 39%|      | 31/79 [00:02<00:03, 15.08it/s]
 43%|     | 34/79 [00:02<00:02, 17.07it/s]
 47%|     | 37/79 [00:02<00:02, 18.76it/s]
 51%|     | 40/79 [00:02<00:01, 20.04it/s]
 54%|    | 43/79 [00:02<00:01, 21.29it/s]
 58%|    | 46/79 [00:02<00:01, 22.07it/s]
 62%|   | 49/79 [00:02<00:01, 22.84it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  5%|         | 4/79 [00:01<00:52,  1.42it/s]
  9%|         | 7/79 [00:01<00:36,  1.97it/s]
 13%|        | 10/79 [00:01<00:25,  2.73it/s]
 16%|        | 13/79 [00:01<00:17,  3.72it/s]
 20%|        | 16/79 [00:01<00:12,  5.00it/s]
 24%|       | 19/79 [00:01<00:09,  6.59it/s]
 28%|       | 22/79 [00:01<00:06,  8.46it/s]
 32%|      | 25/79 [00:01<00:05, 10.57it/s]
 35%|      | 28/79 [00:02<00:04, 12.74it/s]
 39%|      | 31/79 [00:02<00:03, 14.94it/s]
 43%|     | 34/79 [00:02<00:02, 16.87it/s]
 47%|     | 37/79 [00:02<00:02, 18.64it/s]
 51%|     | 40/79 [00:02<00:01, 20.13it/s]
 54%|    | 43/79 [00:02<00:01, 21.26it/s]
 58%|    | 46/79 [00:02<00:01, 22.16it/s]
 62%|   | 49/79 [00:02<00:01, 22.92it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.89it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.83it/s]
 28%|       | 22/79 [00:01<00:06,  8.69it/s]
 32%|      | 25/79 [00:01<00:05, 10.76it/s]
 35%|      | 28/79 [00:02<00:03, 12.90it/s]
 39%|      | 31/79 [00:02<00:03, 14.99it/s]
 43%|     | 34/79 [00:02<00:02, 16.88it/s]
 47%|     | 37/79 [00:02<00:02, 18.51it/s]
 51%|     | 40/79 [00:02<00:01, 19.90it/s]
 54%|    | 43/79 [00:02<00:01, 21.02it/s]
 58%|    | 46/79 [00:02<00:01, 21.74it/s]
 62%|   | 49/79 [00:02<00:01, 22.25it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.43it/s]
  9%|         | 7/79 [00:01<00:36,  2.00it/s]
 13%|        | 10/79 [00:01<00:25,  2.76it/s]
 16%|        | 13/79 [00:01<00:17,  3.76it/s]
 20%|        | 16/79 [00:01<00:12,  5.04it/s]
 24%|       | 19/79 [00:01<00:09,  6.64it/s]
 28%|       | 22/79 [00:01<00:06,  8.48it/s]
 32%|      | 25/79 [00:01<00:05, 10.59it/s]
 35%|      | 28/79 [00:02<00:03, 12.77it/s]
 39%|      | 31/79 [00:02<00:03, 15.00it/s]
 43%|     | 34/79 [00:02<00:02, 17.01it/s]
 47%|     | 37/79 [00:02<00:02, 18.80it/s]
 51%|     | 40/79 [00:02<00:01, 20.21it/s]
 54%|    | 43/79 [00:02<00:01, 21.32it/s]
 58%|    | 46/79 [00:02<00:01, 22.29it/s]
 62%|   | 49/79 [00:02<00:01, 22.73it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.23it/s]
 24%|       | 19/79 [00:01<00:08,  6.83it/s]
 28%|       | 22/79 [00:01<00:06,  8.75it/s]
 32%|      | 25/79 [00:01<00:04, 10.86it/s]
 35%|      | 28/79 [00:02<00:03, 13.11it/s]
 39%|      | 31/79 [00:02<00:03, 15.26it/s]
 43%|     | 34/79 [00:02<00:02, 17.23it/s]
 47%|     | 37/79 [00:02<00:02, 19.03it/s]
 51%|     | 40/79 [00:02<00:01, 20.29it/s]
 54%|    | 43/79 [00:02<00:01, 21.33it/s]
 58%|    | 46/79 [00:02<00:01, 21.80it/s]
 62%|   | 49/79 [00:02<00:01, 22.53it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.84it/s]
 20%|        | 16/79 [00:01<00:12,  5.16it/s]
 24%|       | 19/79 [00:01<00:08,  6.76it/s]
 28%|       | 22/79 [00:01<00:06,  8.63it/s]
 32%|      | 25/79 [00:01<00:05, 10.72it/s]
 35%|      | 28/79 [00:02<00:03, 12.88it/s]
 39%|      | 31/79 [00:02<00:03, 15.11it/s]
 43%|     | 34/79 [00:02<00:02, 16.87it/s]
 47%|     | 37/79 [00:02<00:02, 18.68it/s]
 51%|     | 40/79 [00:02<00:01, 20.12it/s]
 54%|    | 43/79 [00:02<00:01, 21.28it/s]
 58%|    | 46/79 [00:02<00:01, 22.02it/s]
 62%|   | 49/79 [00:02<00:01, 22.77it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.43it/s]
  9%|         | 7/79 [00:01<00:36,  1.99it/s]
 13%|        | 10/79 [00:01<00:25,  2.75it/s]
 16%|        | 13/79 [00:01<00:17,  3.74it/s]
 20%|        | 16/79 [00:01<00:12,  5.02it/s]
 24%|       | 19/79 [00:01<00:09,  6.61it/s]
 28%|       | 22/79 [00:01<00:06,  8.43it/s]
 32%|      | 25/79 [00:01<00:05, 10.55it/s]
 35%|      | 28/79 [00:02<00:03, 12.75it/s]
 39%|      | 31/79 [00:02<00:03, 14.89it/s]
 43%|     | 34/79 [00:02<00:02, 16.82it/s]
 47%|     | 37/79 [00:02<00:02, 18.68it/s]
 51%|     | 40/79 [00:02<00:01, 20.24it/s]
 54%|    | 43/79 [00:02<00:01, 21.12it/s]
 58%|    | 46/79 [00:02<00:01, 22.07it/s]
 62%|   | 49/79 [00:02<00:01, 22.90it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:18,  1.01s/it]
  5%|         | 4/79 [00:01<00:54,  1.39it/s]
  9%|         | 7/79 [00:01<00:37,  1.93it/s]
 13%|        | 10/79 [00:01<00:25,  2.67it/s]
 16%|        | 13/79 [00:01<00:18,  3.65it/s]
 20%|        | 16/79 [00:01<00:12,  4.89it/s]
 24%|       | 19/79 [00:01<00:09,  6.45it/s]
 28%|       | 22/79 [00:01<00:06,  8.29it/s]
 32%|      | 25/79 [00:01<00:05, 10.33it/s]
 35%|      | 28/79 [00:02<00:04, 12.51it/s]
 39%|      | 31/79 [00:02<00:03, 14.77it/s]
 43%|     | 34/79 [00:02<00:02, 16.93it/s]
 47%|     | 37/79 [00:02<00:02, 18.86it/s]
 51%|     | 40/79 [00:02<00:01, 19.88it/s]
 54%|    | 43/79 [00:02<00:01, 21.13it/s]
 58%|    | 46/79 [00:02<00:01, 22.08it/s]
 62%|   | 49/79 [00:02<00:01, 22.49it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.80it/s]
 28%|       | 22/79 [00:01<00:06,  8.68it/s]
 32%|      | 25/79 [00:01<00:05, 10.71it/s]
 35%|      | 28/79 [00:02<00:03, 12.84it/s]
 39%|      | 31/79 [00:02<00:03, 14.94it/s]
 43%|     | 34/79 [00:02<00:02, 16.93it/s]
 47%|     | 37/79 [00:02<00:02, 18.45it/s]
 51%|     | 40/79 [00:02<00:01, 19.92it/s]
 54%|    | 43/79 [00:02<00:01, 21.05it/s]
 58%|    | 46/79 [00:02<00:01, 21.92it/s]
 62%|   | 49/79 [00:02<00:01, 22.72it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:19,  1.02s/it]
  5%|         | 4/79 [00:01<00:54,  1.37it/s]
  9%|         | 7/79 [00:01<00:37,  1.92it/s]
 13%|        | 10/79 [00:01<00:26,  2.65it/s]
 16%|        | 13/79 [00:01<00:18,  3.62it/s]
 20%|        | 16/79 [00:01<00:12,  4.86it/s]
 24%|       | 19/79 [00:01<00:09,  6.42it/s]
 28%|       | 22/79 [00:01<00:06,  8.24it/s]
 32%|      | 25/79 [00:01<00:05, 10.31it/s]
 35%|      | 28/79 [00:02<00:04, 12.52it/s]
 39%|      | 31/79 [00:02<00:03, 14.73it/s]
 43%|     | 34/79 [00:02<00:02, 16.74it/s]
 47%|     | 37/79 [00:02<00:02, 18.44it/s]
 51%|     | 40/79 [00:02<00:01, 20.13it/s]
 54%|    | 43/79 [00:02<00:01, 21.25it/s]
 58%|    | 46/79 [00:02<00:01, 21.94it/s]
 62%|   | 49/79 [00:02<00:01, 22.63it/s]
 66%|   | 52/79 [00:03<00:0166it/s]
 68%|   | 54/79 [00:02<00:01, 24.94it/s]
 72%|  | 57/79 [00:03<00:00, 25.19it/s]
 76%|  | 60/79 [00:03<00:00, 25.24it/s]
 80%|  | 63/79 [00:03<00:00, 25.51it/s]
 84%| | 66/79 [00:03<00:00, 25.17it/s]
 87%| | 69/79 [00:03<00:00, 25.21it/s]
 91%| | 72/79 [00:03<00:00, 25.34it/s]
 95%|| 75/79 [00:03<00:00, 26.04it/s]
 99%|| 78/79 [00:03<00:00, 26.50it/s]
100%|| 79/79 [00:03<00:00, 19.77it/s]
, 23.89it/s]
 70%|   | 55/79 [00:03<00:00, 24.46it/s]
 73%|  | 58/79 [00:03<00:00, 24.71it/s]
 77%|  | 61/79 [00:03<00:00, 25.01it/s]
 81%|  | 64/79 [00:03<00:00, 25.06it/s]
 85%| | 67/79 [00:03<00:00, 25.13it/s]
 89%| | 70/79 [00:03<00:00, 24.86it/s]
 92%|| 73/79 [00:03<00:00, 25.45it/s]
 96%|| 76/79 [00:03<00:00, 26.07it/s]
100%|| 79/79 [00:03<00:00, 26.92it/s]
, 24.04it/s]
 70%|   | 55/79 [00:03<00:00, 24.28it/s]
 73%|  | 58/79 [00:03<00:00, 24.58it/s]
 77%|  | 61/79 [00:03<00:00, 24.75it/s]
 81%|  | 64/79 [00:03<00:00, 25.14it/s]
 85%| | 67/79 [00:03<00:00, 25.09it/s]
 89%| | 70/79 [00:03<00:00, 25.51it/s]
 92%|| 73/79 [00:03<00:00, 25.42it/s]
 96%|| 76/79 [00:03<00:00, 26.14it/s]
100%|| 79/79 [00:03<00:00, 26.95it/s]
, 23.69it/s]
 70%|   | 55/79 [00:03<00:01, 23.82it/s]
 73%|  | 58/79 [00:03<00:00, 24.41it/s]
 77%|  | 61/79 [00:03<00:00, 24.11it/s]
 81%|  | 64/79 [00:03<00:00, 24.32it/s]
 85%| | 67/79 [00:03<00:00, 24.48it/s]
 89%| | 70/79 [00:03<00:00, 24.85it/s]
 92%|| 73/79 [00:03<00:00, 25.02it/s]
 96%|| 76/79 [00:03<00:00, 25.77it/s]
100%|| 79/79 [00:03<00:00, 26.65it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:01, 23.72it/s]
 73%|  | 58/79 [00:03<00:00, 23.89it/s]
 77%|  | 61/79 [00:03<00:00, 24.16it/s]
 81%|  | 64/79 [00:03<00:00, 24.38it/s]
 85%| | 67/79 [00:03<00:00, 24.60it/s]
 89%| | 70/79 [00:03<00:00, 24.90it/s]
 92%|| 73/79 [00:03<00:00, 25.25it/s]
 96%|| 76/79 [00:03<00:00, 25.91it/s]
100%|| 79/79 [00:04<00:00, 26.83it/s]
, 23.72it/s]
 70%|   | 55/79 [00:03<00:01, 23.94it/s]
 73%|  | 58/79 [00:03<00:00, 24.06it/s]
 77%|  | 61/79 [00:03<00:00, 24.66it/s]
 81%|  | 64/79 [00:03<00:00, 24.39it/s]
 85%| | 67/79 [00:03<00:00, 24.60it/s]
 89%| | 70/79 [00:03<00:00, 24.75it/s]
 92%|| 73/79 [00:03<00:00, 25.04it/s]
 96%|| 76/79 [00:03<00:00, 26.06it/s]
100%|| 79/79 [00:04<00:00, 26.39it/s]
, 23.39it/s]
 70%|   | 55/79 [00:03<00:01, 23.57it/s]
 73%|  | 58/79 [00:03<00:00, 23.82it/s]
 77%|  | 61/79 [00:03<00:00, 24.22it/s]
 81%|  | 64/79 [00:03<00:00, 24.59it/s]
 85%| | 67/79 [00:03<00:00, 24.88it/s]
 89%| | 70/79 [00:03<00:00, 24.78it/s]
 92%|| 73/79 [00:03<00:00, 25.29it/s]
 96%|| 76/79 [00:03<00:00, 25.88it/s]
100%|| 79/79 [00:04<00:00, 26.65it/s]
91it/s]
 68%|   | 54/79 [00:03<00:01, 24.02it/s]
 72%|  | 57/79 [00:03<00:00, 24.19it/s]
 76%|  | 60/79 [00:03<00:00, 24.57it/s]
 80%|  | 63/79 [00:03<00:00, 24.71it/s]
 84%| | 66/79 [00:03<00:00, 24.84it/s]
 87%| | 69/79 [00:03<00:00, 24.83it/s]
 91%| | 72/79 [00:03<00:00, 24.96it/s]
 95%|| 75/79 [00:03<00:00, 25.58it/s]
 99%|| 78/79 [00:04<00:00, 26.39it/s]
100%|| 79/79 [00:04<00:00, 19.21it/s]
, 23.80it/s]
 70%|   | 55/79 [00:03<00:01, 24.00it/s]
 73%|  | 58/79 [00:03<00:00, 24.22it/s]
 77%|  | 61/79 [00:03<00:00, 24.35it/s]
 81%|  | 64/79 [00:03<00:00, 24.22it/s]
 85%| | 67/79 [00:03<00:00, 24.12it/s]
 89%| | 70/79 [00:03<00:00, 24.47it/s]
 92%|| 73/79 [00:03<00:00, 24.58it/s]
 96%|| 76/79 [00:03<00:00, 25.39it/s]
100%|| 79/79 [00:04<00:00, 26.21it/s]
, 23.46it/s]
 70%|   | 55/79 [00:03<00:01, 23.90it/s]
 73%|  | 58/79 [00:03<00:00, 24.26it/s]
 77%|  | 61/79 [00:03<00:00, 24.52it/s]
 81%|  | 64/79 [00:03<00:00, 24.35it/s]
 85%| | 67/79 [00:03<00:00, 24.65it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 25.17it/s]
 96%|| 76/79 [00:03<00:00, 25.80it/s]
100%|| 79/79 [00:04<00:00, 26.72it/s]
, 23.71it/s]
 70%|   | 55/79 [00:03<00:00, 24.30it/s]
 73%|  | 58/79 [00:03<00:00, 24.62it/s]
 77%|  | 61/79 [00:03<00:00, 24.90it/s]
 81%|  | 64/79 [00:03<00:00, 25.12it/s]
 85%| | 67/79 [00:03<00:00, 25.27it/s]
 89%| | 70/79 [00:03<00:00, 25.29it/s]
 92%|| 73/79 [00:03<00:00, 25.50it/s]
 96%|| 76/79 [00:03<00:00, 26.09it/s]
100%|| 79/79 [00:04<00:00, 26.60it/s]
, 23.53it/s]
 70%|   | 55/79 [00:03<00:00, 24.18it/s]
 73%|  | 58/79 [00:03<00:00, 24.18it/s]
 77%|  | 61/79 [00:03<00:00, 24.35it/s]
 81%|  | 64/79 [00:03<00:00, 24.73it/s]
 85%| | 67/79 [00:03<00:00, 24.76it/s]
 89%| | 70/79 [00:03<00:00, 24.58it/s]
 92%|| 73/79 [00:03<00:00, 25.18it/s]
 96%|| 76/79 [00:03<00:00, 25.87it/s]
100%|| 79/79 [00:04<00:00, 26.71it/s]
, 23.80it/s]
 70%|   | 55/79 [00:03<00:00, 24.37it/s]
 73%|  | 58/79 [00:03<00:00, 24.62it/s]
 77%|  | 61/79 [00:03<00:00, 24.68it/s]
 81%|  | 64/79 [00:03<00:00, 24.79it/s]
 85%| | 67/79 [00:03<00:00, 24.95it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 25.25it/s]
 96%|| 76/79 [00:03<00:00, 25.86it/s]
100%|| 79/79 [00:04<00:00, 26.76it/s]
, 24.04it/s]
 70%|   | 55/79 [00:03<00:00, 24.44it/s]
 73%|  | 58/79 [00:03<00:00, 24.88it/s]
 77%|  | 61/79 [00:03<00:00, 25.30it/s]
 81%|  | 64/79 [00:03<00:00, 24.42it/s]
 85%| | 67/79 [00:03<00:00, 24.77it/s]
 89%| | 70/79 [00:03<00:00, 25.11it/s]
 92%|| 73/79 [00:03<00:00, 24.88it/s]
 96%|| 76/79 [00:03<00:00, 25.53it/s]
100%|| 79/79 [00:04<00:00, 26.32it/s]
, 23.70it/s]
 70%|   | 55/79 [00:03<00:01, 23.89it/s]
 73%|  | 58/79 [00:03<00:00, 24.15it/s]
 77%|  | 61/79 [00:03<00:00, 24.12it/s]
 81%|  | 64/79 [00:03<00:00, 24.34it/s]
 85%| | 67/79 [00:03<00:00, 24.49it/s]
 89%| | 70/79 [00:03<00:00, 24.32it/s]
 92%|| 73/79 [00:03<00:00, 24.93it/s]
 96%|| 76/79 [00:03<00:00, 25.49it/s]
100%|| 79/79 [00:04<00:00, 26.55it/s]
, 23.91it/s]
 70%|   | 55/79 [00:03<00:00, 24.19it/s]
 73%|  | 58/79 [00:03<00:00, 24.53it/s]
 77%|  | 61/79 [00:03<00:00, 24.85it/s]
 81%|  | 64/79 [00:03<00:00, 25.16it/s]
 85%| | 67/79 [00:03<00:00, 24.85it/s]
 89%| | 70/79 [00:03<00:00, 24.94it/s]
 92%|| 73/79 [00:03<00:00, 24.84it/s]
 96%|| 76/79 [00:03<00:00, 25.64it/s]
100%|| 79/79 [00:04<00:00, 26.53it/s]
, 23.68it/s]
 70%|   | 55/79 [00:03<00:00, 24.10it/s]
 73%|  | 58/79 [00:03<00:00, 24.40it/s]
 77%|  | 61/79 [00:03<00:00, 24.53it/s]
 81%|  | 64/79 [00:03<00:00, 24.59it/s]
 85%| | 67/79 [00:03<00:00, 24.70it/s]
 89%| | 70/79 [00:03<00:00, 24.80it/s]
 92%|| 73/79 [00:03<00:00, 25.28it/s]
 96%|| 76/79 [00:03<00:00, 25.85it/s]
100%|| 79/79 [00:04<00:00, 26.69it/s]
, 23.81it/s]
 70%|   | 55/79 [00:03<00:00, 24.23it/s]
 73%|  | 58/79 [00:03<00:00, 24.59it/s]
 77%|  | 61/79 [00:03<00:00, 24.64it/s]
 81%|  | 64/79 [00:03<00:00, 24.86it/s]
 85%| | 67/79 [00:03<00:00, 24.85it/s]
 89%| | 70/79 [00:03<00:00, 24.89it/s]
 92%|| 73/79 [00:03<00:00, 24.92it/s]
 96%|| 76/79 [00:03<00:00, 26.03it/s]
100%|| 79/79 [00:04<00:00, 26.51it/s]
, 23.47it/s]
 70%|   | 55/79 [00:03<00:01, 23.69it/s]
 73%|  | 58/79 [00:03<00:00, 24.08it/s]
 77%|  | 61/79 [00:03<00:00, 24.56it/s]
 81%|  | 64/79 [00:03<00:00, 24.75it/s]
 85%| | 67/79 [00:03<00:00, 24.90it/s]
 89%| | 70/79 [00:03<00:00, 24.98it/s]
 92%|| 73/79 [00:03<00:00, 25.08it/s]
 96%|| 76/79 [00:03<00:00, 25.68it/s]
100%|| 79/79 [00:04<00:00, 26.47it/s]
, 23.35it/s]
 70%|   | 55/79 [00:03<00:01, 23.62it/s]
 73%|  | 58/79 [00:03<00:00, 24.12it/s]
 77%|  | 61/79 [00:03<00:00, 24.19it/s]
 81%|  | 64/79 [00:03<00:00, 24.57it/s]
 85%| | 67/79 [00:03<00:00, 24.66it/s]
 89%| | 70/79 [00:03<00:00, 24.24it/s]
 92%|| 73/79 [00:03<00:00, 24.65it/s]
 96%|| 76/79 [00:03<00:00, 25.44it/s]
100%|| 79/79 [00:04<00:00, 26.27it/s]
, 23.04it/s]
 70%|   | 55/79 [00:03<00:01, 23.37it/s]
 73%|  | 58/79 [00:03<00:00, 23.45it/s]
 77%|  | 61/79 [00:03<00:00, 23.82it/s]
 81%|  | 64/79 [00:03<00:00, 23.75it/s]
 85%| | 67/79 [00:03<00:00, 23.67it/s]
 89%| | 70/79 [00:03<00:00, 23.87it/s]
 92%|| 73/79 [00:03<00:00, 24.34it/s]
 96%|| 76/79 [00:03<00:00, 25.25it/s]
100%|| 79/79 [00:04<00:00, 26.33it/s]
50it/s]
 68%|   | 54/79 [00:03<00:01, 23.77it/s]
 72%|  | 57/79 [00:03<00:00, 24.21it/s]
 76%|  | 60/79 [00:03<00:00, 24.59it/s]
 80%|  | 63/79 [00:03<00:00, 24.76it/s]
 84%| | 66/79 [00:03<00:00, 24.84it/s]
 87%| | 69/79 [00:03<00:00, 24.81it/s]
 91%| | 72/79 [00:03<00:00, 25.07it/s]
 95%|| 75/79 [00:03<00:00, 25.73it/s]
 99%|| 78/79 [00:04<00:00, 26.31it/s]
100%|| 79/79 [00:04<00:00, 18.97it/s]
, 23.23it/s]
 70%|   | 55/79 [00:03<00:01, 23.46it/s]
 73%|  | 58/79 [00:03<00:00, 23.66it/s]
 77%|  | 61/79 [00:03<00:00, 24.00it/s]
 81%|  | 64/79 [00:03<00:00, 24.14it/s]
 85%| | 67/79 [00:03<00:00, 24.44it/s]
 89%| | 70/79 [00:03<00:00, 24.54it/s]
 92%|| 73/79 [00:03<00:00, 24.98it/s]
 96%|| 76/79 [00:03<00:00, 25.72it/s]
100%|| 79/79 [00:04<00:00, 26.59it/s]
, 22.98it/s]
 70%|   | 55/79 [00:03<00:01, 23.46it/s]
 73%|  | 58/79 [00:03<00:00, 23.59it/s]
 77%|  | 61/79 [00:03<00:00, 23.57it/s]
 81%|  | 64/79 [00:03<00:00, 23.81it/s]
 85%| | 67/79 [00:03<00:00, 23.78it/s]
 89%| | 70/79 [00:03<00:00, 23.77it/s]
 92%|| 73/79 [00:03<00:00, 24.21it/s]
 96%|| 76/79 [00:04<00:00, 25.00it/s]
100%|| 79/79 [00:04<00:00, 25.98it/s]
, 23.05it/s]
 70%|   | 55/79 [00:03<00:01, 23.32it/s]
 73%|  | 58/79 [00:03<00:00, 23.79it/s]
 77%|  | 61/79 [00:03<00:00, 23.60it/s]
 81%|  | 64/79 [00:03<00:00, 23.64it/s]
 85%| | 67/79 [00:03<00:00, 24.09it/s]
 89%| | 70/79 [00:03<00:00, 24.40it/s]
 92%|| 73/79 [00:03<00:00, 24.68it/s]
 96%|| 76/79 [00:04<00:00, 25.49it/s]
100%|| 79/79 [00:04<00:00, 26.46it/s]
, 23.59it/s]
 70%|   | 55/79 [00:03<00:01, 23.68it/s]
 73%|  | 58/79 [00:03<00:00, 23.93it/s]
 77%|  | 61/79 [00:03<00:00, 24.28it/s]
 81%|  | 64/79 [00:03<00:00, 24.32it/s]
 85%| | 67/79 [00:03<00:00, 24.22it/s]
 89%| | 70/79 [00:03<00:00, 24.13it/s]
 92%|| 73/79 [00:03<00:00, 24.71it/s]
 96%|| 76/79 [00:04<00:00, 25.29it/s]
100%|| 79/79 [00:04<00:00, 26.35it/s]
86it/s]
 68%|   | 54/79 [00:03<00:01, 23.99it/s]
 72%|  | 57/79 [00:03<00:00, 24.16it/s]
 76%|  | 60/79 [00:03<00:00, 24.03it/s]
 80%|  | 63/79 [00:03<00:00, 24.31it/s]
 84%| | 66/79 [00:03<00:00, 24.25it/s]
 87%| | 69/79 [00:03<00:00, 24.32it/s]
 91%| | 72/79 [00:03<00:00, 24.65it/s]
 95%|| 75/79 [00:03<00:00, 25.34it/s]
 99%|| 78/79 [00:04<00:00, 25.83it/s]
100%|| 79/79 [00:04<00:00, 18.79it/s]
, 22.98it/s]
 70%|   | 55/79 [00:03<00:01, 23.49it/s]
 73%|  | 58/79 [00:03<00:00, 23.55it/s]
 77%|  | 61/79 [00:03<00:00, 23.58it/s]
 81%|  | 64/79 [00:03<00:00, 23.88it/s]
 85%| | 67/79 [00:03<00:00, 23.47it/s]
 89%| | 70/79 [00:03<00:00, 23.45it/s]
 92%|| 73/79 [00:03<00:00, 23.97it/s]
 96%|| 76/79 [00:04<00:00, 24.88it/s]
100%|| 79/79 [00:04<00:00, 26.01it/s]
52it/s]
 68%|   | 54/79 [00:03<00:01, 22.99it/s]
 72%|  | 57/79 [00:03<00:00, 23.58it/s]
 76%|  | 60/79 [00:03<00:00, 23.80it/s]
 80%|  | 63/79 [00:03<00:00, 24.02it/s]
 84%| | 66/79 [00:03<00:00, 24.31it/s]
 87%| | 69/79 [00:03<00:00, 24.46it/s]
 91%| | 72/79 [00:03<00:00, 24.63it/s]
 95%|| 75/79 [00:03<00:00, 25.39it/s]
 99%|| 78/79 [00:04<00:00, 26.01it/s]
100%|| 79/79 [00:04<00:00, 18.78it/s]
, 23.13it/s]
 70%|   | 55/79 [00:03<00:01, 23.47it/s]
 73%|  | 58/79 [00:03<00:00, 23.71it/s]
 77%|  | 61/79 [00:03<00:00, 23.73it/s]
 81%|  | 64/79 [00:03<00:00, 23.86it/s]
 85%| | 67/79 [00:03<00:00, 23.95it/s]
 89%| | 70/79 [00:03<00:00, 23.99it/s]
 92%|| 73/79 [00:03<00:00, 24.34it/s]
 96%|| 76/79 [00:04<00:00, 25.03it/s]
100%|| 79/79 [00:04<00:00, 26.05it/s]
, 23.18it/s]
 70%|   | 55/79 [00:03<00:01, 23.67it/s]
 73%|  | 58/79 [00:03<00:00, 23.90it/s]
 77%|  | 61/79 [00:03<00:00, 24.02it/s]
 81%|  | 64/79 [00:03<00:00, 24.46it/s]
 85%| | 67/79 [00:03<00:00, 24.54it/s]
 89%| | 70/79 [00:03<00:00, 24.68it/s]
 92%|| 73/79 [00:03<00:00, 24.95it/s]
 96%|| 76/79 [00:04<00:00, 25.59it/s]
100%|| 79/79 [00:04<00:00, 26.38it/s]
, 23.22it/s]
 70%|   | 55/79 [00:03<00:01, 23.26it/s]
 73%|  | 58/79 [00:03<00:00, 23.31it/s]
 77%|  | 61/79 [00:03<00:00, 23.41it/s]
 81%|  | 64/79 [00:03<00:00, 23.65it/s]
 85%| | 67/79 [00:03<00:00, 23.87it/s]
 89%| | 70/79 [00:03<00:00, 23.87it/s]
 92%|| 73/79 [00:03<00:00, 24.43it/s]
 96%|| 76/79 [00:04<00:00, 25.22it/s]
100%|| 79/79 [00:04<00:00, 26.21it/s]
2020-06-23 15:42:06,140 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.255331 (0.027234120178222656 s / img per device, on 32 devices)
2020-06-23 15:42:06,160 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:42:06,160 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:42:06,178 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592952133350, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 11, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592952133350, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 11}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 15:42:14,458 maskrcnn_benchmark.trainer INFO: eta: 1:05:29  iter: 9180  loss: 0.5518 (0.7587)  loss_classifier: 0.1749 (0.2789)  loss_box_reg: 0.0937 (0.1219)  loss_mask: 0.2459 (0.2999)  loss_objectness: 0.0155 (0.0375)  loss_rpn_box_reg: 0.0110 (0.0206)  time: 0.1105 (0.1275)  data: 0.0014 (0.0192)  lr: 0.016000  max mem: 5140
2020-06-23 15:42:16,631 maskrcnn_benchmark.trainer INFO: eta: 1:05:25  iter: 9200  loss: 0.5176 (0.7583)  loss_classifier: 0.1636 (0.2787)  loss_box_reg: 0.0731 (0.1219)  loss_mask: 0.2383 (0.2997)  loss_objectness: 0.0126 (0.0375)  loss_rpn_box_reg: 0.0091 (0.0205)  time: 0.1081 (0.1274)  data: 0.0015 (0.0191)  lr: 0.016000  max mem: 5140
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 15:42:18,830 maskrcnn_benchmark.trainer INFO: eta: 1:05:21  iter: 9220  loss: 0.5173 (0.7579)  loss_classifier: 0.1706 (0.2785)  loss_box_reg: 0.0751 (0.1218)  loss_mask: 0.2367 (0.2996)  loss_objectness: 0.0177 (0.0374)  loss_rpn_box_reg: 0.0068 (0.0205)  time: 0.1097 (0.1274)  data: 0.0015 (0.0191)  lr: 0.016000  max mem: 5140
DONE (t=0.58s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.45s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35332
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.56349
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.38296
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20063
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.38354
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.45755
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30007
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.47481
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.49942
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.30952
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.53699
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62661
2020-06-23 15:42:21,032 maskrcnn_benchmark.trainer INFO: eta: 1:05:17  iter: 9240  loss: 0.5546 (0.7575)  loss_classifier: 0.1899 (0.2783)  loss_box_reg: 0.0968 (0.1217)  loss_mask: 0.2453 (0.2995)  loss_objectness: 0.0144 (0.0374)  loss_rpn_box_reg: 0.0084 (0.0205)  time: 0.1091 (0.1274)  data: 0.0014 (0.0190)  lr: 0.016000  max mem: 5140
2020-06-23 15:42:23,221 maskrcnn_benchmark.trainer INFO: eta: 1:05:14  iter: 9260  loss: 0.5749 (0.7571)  loss_classifier: 0.1955 (0.2782)  loss_box_reg: 0.0937 (0.1217)  loss_mask: 0.2611 (0.2994)  loss_objectness: 0.0143 (0.0374)  loss_rpn_box_reg: 0.0098 (0.0205)  time: 0.1097 (0.1273)  data: 0.0016 (0.0190)  lr: 0.016000  max mem: 5140
2020-06-23 15:42:25,428 maskrcnn_benchmark.trainer INFO: eta: 1:05:10  iter: 9280  loss: 0.5977 (0.7569)  loss_classifier: 0.2141 (0.2781)  loss_box_reg: 0.1008 (0.1217)  loss_mask: 0.2620 (0.2993)  loss_objectness: 0.0169 (0.0373)  loss_rpn_box_reg: 0.0108 (0.0205)  time: 0.1099 (0.1273)  data: 0.0015 (0.0190)  lr: 0.016000  max mem: 5140
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
DONE (t=1.54s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:42:27,625 maskrcnn_benchmark.trainer INFO: eta: 1:05:06  iter: 9300  loss: 0.5239 (0.7565)  loss_classifier: 0.1707 (0.2779)  loss_box_reg: 0.0898 (0.1216)  loss_mask: 0.2519 (0.2992)  loss_objectness: 0.0152 (0.0373)  loss_rpn_box_reg: 0.0068 (0.0205)  time: 0.1103 (0.1273)  data: 0.0015 (0.0189)  lr: 0.016000  max mem: 5140
2020-06-23 15:42:29,839 maskrcnn_benchmark.trainer INFO: eta: 1:05:03  iter: 9320  loss: 0.4663 (0.7560)  loss_classifier: 0.1602 (0.2777)  loss_box_reg: 0.0679 (0.1216)  loss_mask: 0.2344 (0.2991)  loss_objectness: 0.0114 (0.0372)  loss_rpn_box_reg: 0.0049 (0.0204)  time: 0.1104 (0.1272)  data: 0.0015 (0.0189)  lr: 0.016000  max mem: 5140
DONE (t=2.38s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32425
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53413
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34228
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.14659
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.34944
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47832
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28379
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43801
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.45862
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.26419
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.49817
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60380
2020-06-23 15:42:30,175 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.35332319914395915, segm mAP: 0.32424974561703207
:::MLLOG {"namespace": "", "time_ms": 1592952150175, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.35332319914395915, "SEGM": 0.32424974561703207}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 10}}
:::MLLOG {"namespace": "", "time_ms": 1592952150176, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 10}}
2020-06-23 15:42:32,160 maskrcnn_benchmark.trainer INFO: eta: 1:04:59  iter: 9340  loss: 0.6529 (0.7557)  loss_classifier: 0.2272 (0.2775)  loss_box_reg: 0.1031 (0.1215)  loss_mask: 0.2414 (0.2990)  loss_objectness: 0.0253 (0.0372)  loss_rpn_box_reg: 0.0093 (0.0204)  time: 0.1100 (0.1272)  data: 0.0015 (0.0189)  lr: 0.016000  max mem: 5140
2020-06-23 15:42:34,344 maskrcnn_benchmark.trainer INFO: eta: 1:04:56  iter: 9360  loss: 0.5220 (0.7552)  loss_classifier: 0.1562 (0.2773)  loss_box_reg: 0.0832 (0.1214)  loss_mask: 0.2362 (0.2989)  loss_objectness: 0.0182 (0.0372)  loss_rpn_box_reg: 0.0078 (0.0204)  time: 0.1090 (0.1272)  data: 0.0015 (0.0188)  lr: 0.016000  max mem: 5140
2020-06-23 15:42:36,554 maskrcnn_benchmark.trainer INFO: eta: 1:04:52  iter: 9380  loss: 0.5986 (0.7549)  loss_classifier: 0.1849 (0.2771)  loss_box_reg: 0.0934 (0.1214)  loss_mask: 0.2478 (0.2988)  loss_objectness: 0.0124 (0.0372)  loss_rpn_box_reg: 0.0090 (0.0204)  time: 0.1094 (0.1271)  data: 0.0014 (0.0188)  lr: 0.016000  max mem: 5140
2020-06-23 15:42:38,740 maskrcnn_benchmark.trainer INFO: eta: 1:04:48  iter: 9400  loss: 0.5447 (0.7545)  loss_classifier: 0.1824 (0.2769)  loss_box_reg: 0.0833 (0.1213)  loss_mask: 0.2551 (0.2986)  loss_objectness: 0.0172 (0.0371)  loss_rpn_box_reg: 0.0141 (0.0204)  time: 0.1086 (0.1271)  data: 0.0014 (0.0187)  lr: 0.016000  max mem: 5140
2020-06-23 15:42:40,934 maskrcnn_benchmark.trainer INFO: eta: 1:04:45  iter: 9420  loss: 0.5383 (0.7542)  loss_classifier: 0.2118 (0.2768)  loss_box_reg: 0.0695 (0.1213)  loss_mask: 0.2186 (0.2985)  loss_objectness: 0.0127 (0.0371)  loss_rpn_box_reg: 0.0101 (0.0204)  time: 0.1098 (0.1270)  data: 0.0014 (0.0187)  lr: 0.016000  max mem: 5140
2020-06-23 15:42:43,124 maskrcnn_benchmark.trainer INFO: eta: 1:04:41  iter: 9440  loss: 0.5808 (0.7539)  loss_classifier: 0.2031 (0.2767)  loss_box_reg: 0.0946 (0.1213)  loss_mask: 0.2379 (0.2984)  loss_objectness: 0.0134 (0.0371)  loss_rpn_box_reg: 0.0078 (0.0204)  time: 0.1090 (0.1270)  data: 0.0014 (0.0187)  lr: 0.016000  max mem: 5140
2020-06-23 15:42:45,319 maskrcnn_benchmark.trainer INFO: eta: 1:04:37  iter: 9460  loss: 0.6207 (0.7536)  loss_classifier: 0.2039 (0.2766)  loss_box_reg: 0.1089 (0.1212)  loss_mask: 0.2634 (0.2983)  loss_objectness: 0.0193 (0.0371)  loss_rpn_box_reg: 0.0093 (0.0204)  time: 0.1097 (0.1270)  data: 0.0015 (0.0186)  lr: 0.016000  max mem: 5140
2020-06-23 15:42:47,539 maskrcnn_benchmark.trainer INFO: eta: 1:04:34  iter: 9480  loss: 0.6251 (0.7535)  loss_classifier: 0.2050 (0.2765)  loss_box_reg: 0.1089 (0.1212)  loss_mask: 0.2740 (0.2983)  loss_objectness: 0.0131 (0.0371)  loss_rpn_box_reg: 0.0132 (0.0204)  time: 0.1096 (0.1269)  data: 0.0014 (0.0186)  lr: 0.016000  max mem: 5140
2020-06-23 15:42:49,735 maskrcnn_benchmark.trainer INFO: eta: 1:04:30  iter: 9500  loss: 0.6260 (0.7532)  loss_classifier: 0.2044 (0.2764)  loss_box_reg: 0.1019 (0.1212)  loss_mask: 0.2496 (0.2982)  loss_objectness: 0.0154 (0.0370)  loss_rpn_box_reg: 0.0097 (0.0204)  time: 0.1092 (0.1269)  data: 0.0014 (0.0186)  lr: 0.016000  max mem: 5140
2020-06-23 15:42:51,940 maskrcnn_benchmark.trainer INFO: eta: 1:04:26  iter: 9520  loss: 0.4756 (0.7527)  loss_classifier: 0.1439 (0.2761)  loss_box_reg: 0.0807 (0.1211)  loss_mask: 0.2489 (0.2981)  loss_objectness: 0.0148 (0.0370)  loss_rpn_box_reg: 0.0042 (0.0204)  time: 0.1097 (0.1269)  data: 0.0014 (0.0185)  lr: 0.016000  max mem: 5140
2020-06-23 15:42:54,122 maskrcnn_benchmark.trainer INFO: eta: 1:04:23  iter: 9540  loss: 0.5692 (0.7524)  loss_classifier: 0.1930 (0.2760)  loss_box_reg: 0.0875 (0.1211)  loss_mask: 0.2496 (0.2980)  loss_objectness: 0.0132 (0.0370)  loss_rpn_box_reg: 0.0057 (0.0204)  time: 0.1089 (0.1268)  data: 0.0014 (0.0185)  lr: 0.016000  max mem: 5140
2020-06-23 15:42:56,306 maskrcnn_benchmark.trainer INFO: eta: 1:04:19  iter: 9560  loss: 0.5946 (0.7521)  loss_classifier: 0.1904 (0.2758)  loss_box_reg: 0.0993 (0.1211)  loss_mask: 0.2604 (0.2979)  loss_objectness: 0.0210 (0.0369)  loss_rpn_box_reg: 0.0112 (0.0204)  time: 0.1084 (0.1268)  data: 0.0014 (0.0185)  lr: 0.016000  max mem: 5140
2020-06-23 15:42:58,485 maskrcnn_benchmark.trainer INFO: eta: 1:04:15  iter: 9580  loss: 0.5671 (0.7518)  loss_classifier: 0.2126 (0.2757)  loss_box_reg: 0.0962 (0.1210)  loss_mask: 0.2583 (0.2978)  loss_objectness: 0.0160 (0.0369)  loss_rpn_box_reg: 0.0056 (0.0204)  time: 0.1083 (0.1268)  data: 0.0015 (0.0184)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:00,672 maskrcnn_benchmark.trainer INFO: eta: 1:04:12  iter: 9600  loss: 0.5732 (0.7516)  loss_classifier: 0.1991 (0.2756)  loss_box_reg: 0.0962 (0.1210)  loss_mask: 0.2338 (0.2977)  loss_objectness: 0.0147 (0.0369)  loss_rpn_box_reg: 0.0092 (0.0204)  time: 0.1091 (0.1267)  data: 0.0014 (0.0184)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:02,852 maskrcnn_benchmark.trainer INFO: eta: 1:04:08  iter: 9620  loss: 0.6166 (0.7512)  loss_classifier: 0.2087 (0.2754)  loss_box_reg: 0.0965 (0.1210)  loss_mask: 0.2474 (0.2977)  loss_objectness: 0.0120 (0.0368)  loss_rpn_box_reg: 0.0130 (0.0204)  time: 0.1086 (0.1267)  data: 0.0015 (0.0183)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:05,031 maskrcnn_benchmark.trainer INFO: eta: 1:04:04  iter: 9640  loss: 0.5309 (0.7509)  loss_classifier: 0.1657 (0.2752)  loss_box_reg: 0.0947 (0.1209)  loss_mask: 0.2507 (0.2975)  loss_objectness: 0.0151 (0.0368)  loss_rpn_box_reg: 0.0115 (0.0204)  time: 0.1090 (0.1266)  data: 0.0015 (0.0183)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:07,244 maskrcnn_benchmark.trainer INFO: eta: 1:04:01  iter: 9660  loss: 0.5882 (0.7506)  loss_classifier: 0.1893 (0.2751)  loss_box_reg: 0.1086 (0.1209)  loss_mask: 0.2667 (0.2975)  loss_objectness: 0.0149 (0.0368)  loss_rpn_box_reg: 0.0054 (0.0204)  time: 0.1098 (0.1266)  data: 0.0015 (0.0183)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:09,432 maskrcnn_benchmark.trainer INFO: eta: 1:03:57  iter: 9680  loss: 0.5543 (0.7503)  loss_classifier: 0.1886 (0.2749)  loss_box_reg: 0.0827 (0.1208)  loss_mask: 0.2547 (0.2974)  loss_objectness: 0.0154 (0.0368)  loss_rpn_box_reg: 0.0060 (0.0204)  time: 0.1090 (0.1266)  data: 0.0014 (0.0182)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:11,623 maskrcnn_benchmark.trainer INFO: eta: 1:03:54  iter: 9700  loss: 0.6083 (0.7500)  loss_classifier: 0.1857 (0.2748)  loss_box_reg: 0.0926 (0.1208)  loss_mask: 0.2557 (0.2973)  loss_objectness: 0.0198 (0.0367)  loss_rpn_box_reg: 0.0092 (0.0203)  time: 0.1093 (0.1265)  data: 0.0014 (0.0182)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:13,826 maskrcnn_benchmark.trainer INFO: eta: 1:03:50  iter: 9720  loss: 0.4924 (0.7496)  loss_classifier: 0.1651 (0.2746)  loss_box_reg: 0.0891 (0.1208)  loss_mask: 0.2352 (0.2972)  loss_objectness: 0.0176 (0.0367)  loss_rpn_box_reg: 0.0076 (0.0203)  time: 0.1099 (0.1265)  data: 0.0014 (0.0182)  lr: 0.016000  max mem: 5140

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0


Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0


Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0


Grad overflow on iteration  9728
Grad overflow on iteration  9728
Grad overflow on iteration  9728

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0
Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9728
Using dynamic loss scale of  65536.0
2020-06-23 15:43:16,045 maskrcnn_benchmark.trainer INFO: eta: 1:03:47  iter: 9740  loss: 0.5533 (0.7493)  loss_classifier: 0.1584 (0.2744)  loss_box_reg: 0.0806 (0.1207)  loss_mask: 0.2584 (0.2971)  loss_objectness: 0.0128 (0.0367)  loss_rpn_box_reg: 0.0040 (0.0203)  time: 0.1101 (0.1265)  data: 0.0015 (0.0181)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:18,222 maskrcnn_benchmark.trainer INFO: eta: 1:03:43  iter: 9760  loss: 0.5204 (0.7489)  loss_classifier: 0.1557 (0.2743)  loss_box_reg: 0.0781 (0.1206)  loss_mask: 0.2407 (0.2970)  loss_objectness: 0.0139 (0.0366)  loss_rpn_box_reg: 0.0088 (0.0203)  time: 0.1087 (0.1264)  data: 0.0014 (0.0181)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:20,394 maskrcnn_benchmark.trainer INFO: eta: 1:03:39  iter: 9780  loss: 0.5433 (0.7485)  loss_classifier: 0.1790 (0.2741)  loss_box_reg: 0.0847 (0.1206)  loss_mask: 0.2399 (0.2969)  loss_objectness: 0.0197 (0.0366)  loss_rpn_box_reg: 0.0052 (0.0203)  time: 0.1086 (0.1264)  data: 0.0015 (0.0181)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:22,605 maskrcnn_benchmark.trainer INFO: eta: 1:03:36  iter: 9800  loss: 0.5724 (0.7481)  loss_classifier: 0.1860 (0.2739)  loss_box_reg: 0.0923 (0.1205)  loss_mask: 0.2547 (0.2968)  loss_objectness: 0.0196 (0.0366)  loss_rpn_box_reg: 0.0089 (0.0203)  time: 0.1097 (0.1264)  data: 0.0015 (0.0180)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:24,791 maskrcnn_benchmark.trainer INFO: eta: 1:03:32  iter: 9820  loss: 0.5808 (0.7478)  loss_classifier: 0.1800 (0.2738)  loss_box_reg: 0.0876 (0.1205)  loss_mask: 0.2533 (0.2967)  loss_objectness: 0.0105 (0.0366)  loss_rpn_box_reg: 0.0112 (0.0203)  time: 0.1090 (0.1263)  data: 0.0015 (0.0180)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:27,001 maskrcnn_benchmark.trainer INFO: eta: 1:03:29  iter: 9840  loss: 0.5753 (0.7475)  loss_classifier: 0.1697 (0.2736)  loss_box_reg: 0.0934 (0.1205)  loss_mask: 0.2556 (0.2966)  loss_objectness: 0.0176 (0.0365)  loss_rpn_box_reg: 0.0075 (0.0203)  time: 0.1096 (0.1263)  data: 0.0015 (0.0180)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:29,195 maskrcnn_benchmark.trainer INFO: eta: 1:03:25  iter: 9860  loss: 0.4946 (0.7471)  loss_classifier: 0.1413 (0.2735)  loss_box_reg: 0.0772 (0.1204)  loss_mask: 0.2449 (0.2965)  loss_objectness: 0.0149 (0.0365)  loss_rpn_box_reg: 0.0098 (0.0203)  time: 0.1090 (0.1263)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:31,379 maskrcnn_benchmark.trainer INFO: eta: 1:03:22  iter: 9880  loss: 0.5089 (0.7467)  loss_classifier: 0.1712 (0.2732)  loss_box_reg: 0.0772 (0.1203)  loss_mask: 0.2378 (0.2964)  loss_objectness: 0.0097 (0.0365)  loss_rpn_box_reg: 0.0045 (0.0203)  time: 0.1095 (0.1262)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:33,562 maskrcnn_benchmark.trainer INFO: eta: 1:03:18  iter: 9900  loss: 0.5310 (0.7462)  loss_classifier: 0.1503 (0.2730)  loss_box_reg: 0.0789 (0.1203)  loss_mask: 0.2437 (0.2963)  loss_objectness: 0.0090 (0.0364)  loss_rpn_box_reg: 0.0042 (0.0202)  time: 0.1093 (0.1262)  data: 0.0015 (0.0179)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:35,749 maskrcnn_benchmark.trainer INFO: eta: 1:03:15  iter: 9920  loss: 0.5810 (0.7460)  loss_classifier: 0.2113 (0.2729)  loss_box_reg: 0.1021 (0.1202)  loss_mask: 0.2489 (0.2962)  loss_objectness: 0.0163 (0.0364)  loss_rpn_box_reg: 0.0082 (0.0202)  time: 0.1085 (0.1262)  data: 0.0015 (0.0178)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:37,928 maskrcnn_benchmark.trainer INFO: eta: 1:03:11  iter: 9940  loss: 0.5177 (0.7456)  loss_classifier: 0.1793 (0.2727)  loss_box_reg: 0.0730 (0.1202)  loss_mask: 0.2324 (0.2960)  loss_objectness: 0.0147 (0.0364)  loss_rpn_box_reg: 0.0050 (0.0202)  time: 0.1077 (0.1261)  data: 0.0015 (0.0178)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:40,103 maskrcnn_benchmark.trainer INFO: eta: 1:03:08  iter: 9960  loss: 0.5808 (0.7452)  loss_classifier: 0.1719 (0.2726)  loss_box_reg: 0.1003 (0.1201)  loss_mask: 0.2750 (0.2960)  loss_objectness: 0.0179 (0.0363)  loss_rpn_box_reg: 0.0062 (0.0202)  time: 0.1084 (0.1261)  data: 0.0015 (0.0178)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:42,294 maskrcnn_benchmark.trainer INFO: eta: 1:03:04  iter: 9980  loss: 0.5116 (0.7447)  loss_classifier: 0.1541 (0.2723)  loss_box_reg: 0.0593 (0.1200)  loss_mask: 0.2440 (0.2958)  loss_objectness: 0.0077 (0.0363)  loss_rpn_box_reg: 0.0056 (0.0202)  time: 0.1087 (0.1261)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:44,465 maskrcnn_benchmark.trainer INFO: eta: 1:03:00  iter: 10000  loss: 0.6056 (0.7444)  loss_classifier: 0.1899 (0.2722)  loss_box_reg: 0.1117 (0.1200)  loss_mask: 0.2379 (0.2957)  loss_objectness: 0.0171 (0.0363)  loss_rpn_box_reg: 0.0058 (0.0202)  time: 0.1086 (0.1260)  data: 0.0015 (0.0177)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:46,674 maskrcnn_benchmark.trainer INFO: eta: 1:02:57  iter: 10020  loss: 0.5149 (0.7441)  loss_classifier: 0.1740 (0.2720)  loss_box_reg: 0.1006 (0.1200)  loss_mask: 0.2267 (0.2956)  loss_objectness: 0.0120 (0.0362)  loss_rpn_box_reg: 0.0119 (0.0202)  time: 0.1102 (0.1260)  data: 0.0015 (0.0177)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:48,876 maskrcnn_benchmark.trainer INFO: eta: 1:02:53  iter: 10040  loss: 0.5125 (0.7436)  loss_classifier: 0.1738 (0.2719)  loss_box_reg: 0.0752 (0.1199)  loss_mask: 0.2304 (0.2955)  loss_objectness: 0.0108 (0.0362)  loss_rpn_box_reg: 0.0048 (0.0202)  time: 0.1090 (0.1260)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:51,070 maskrcnn_benchmark.trainer INFO: eta: 1:02:50  iter: 10060  loss: 0.5844 (0.7433)  loss_classifier: 0.1611 (0.2717)  loss_box_reg: 0.1035 (0.1199)  loss_mask: 0.2582 (0.2954)  loss_objectness: 0.0116 (0.0362)  loss_rpn_box_reg: 0.0104 (0.0201)  time: 0.1096 (0.1259)  data: 0.0015 (0.0176)  lr: 0.016000  max mem: 5140
2020-06-23 15:43:53,259 maskrcnn_benchmark.trainer INFO: eta: 1:02:47  iter: 10080  loss: 0.6484 (0.7430)  loss_classifier: 0.2203 (0.2716)  loss_box_reg: 0.1066 (0.1199)  loss_mask: 0.2652 (0.2953)  loss_objectness: 0.0144 (0.0361)  loss_rpn_box_reg: 0.0063 (0.0201)  time: 0.1087 (0.1259)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5140

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0


Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0

Grad overflow on iteration  10086
Using dynamic loss scale of  32768.0
:::MLLOG {"namespace": "", "time_ms": 1592952234005, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1592952234006, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1592952234006, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 11}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 15:43:54,180 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
2020-06-23 15:43:54,478 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:29,  2.40it/s]
 13%|        | 10/79 [00:01<00:20,  3.30it/s]
 16%|        | 13/79 [00:01<00:14,  4.47it/s]
 20%|        | 16/79 [00:01<00:10,  5.93it/s]
 24%|       | 19/79 [00:01<00:07,  7.71it/s]
 28%|       | 22/79 [00:01<00:05,  9.74it/s]
 32%|      | 25/79 [00:01<00:04, 11.97it/s]
 35%|      | 28/79 [00:01<00:03, 14.26it/s]
 39%|      | 31/79 [00:02<00:02, 16.46it/s]
 43%|     | 34/79 [00:02<00:02, 18.43it/s]
 47%|     | 37/79 [00:02<00:02, 20.01it/s]
 51%|     | 40/79 [00:02<00:01, 21.44it/s]
 54%|    | 43/79 [00:02<00:01, 22.68it/s]
 58%|    | 46/79 [00:02<00:01, 23.65it/s]
 62%|   | 49/79 [00:02<00:01, 24.36it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:30,  2.40it/s]
 13%|        | 10/79 [00:01<00:20,  3.29it/s]
 16%|        | 13/79 [00:01<00:14,  4.46it/s]
 20%|        | 16/79 [00:01<00:10,  5.92it/s]
 24%|       | 19/79 [00:01<00:07,  7.68it/s]
 28%|       | 22/79 [00:01<00:05,  9.77it/s]
 32%|      | 25/79 [00:01<00:04, 11.93it/s]
 35%|      | 28/79 [00:01<00:03, 14.16it/s]
 39%|      | 31/79 [00:02<00:02, 16.18it/s]
 43%|     | 34/79 [00:02<00:02, 17.97it/s]
 47%|     | 37/79 [00:02<00:02, 19.53it/s]
 51%|     | 40/79 [00:02<00:01, 20.79it/s]
 54%|    | 43/79 [00:02<00:01, 21.68it/s]
 58%|    | 46/79 [00:02<00:01, 22.71it/s]
 62%|   | 49/79 [00:02<00:01, 22.91it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.41it/s]
 32%|      | 25/79 [00:01<00:04, 11.60it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:03, 15.98it/s]
 43%|     | 34/79 [00:02<00:02, 18.04it/s]
 47%|     | 37/79 [00:02<00:02, 19.82it/s]
 51%|     | 40/79 [00:02<00:01, 21.36it/s]
 54%|    | 43/79 [00:02<00:01, 22.21it/s]
 58%|    | 46/79 [00:02<00:01, 23.28it/s]
 62%|   | 49/79 [00:02<00:01, 23.95it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.39it/s]
 32%|      | 25/79 [00:01<00:04, 11.61it/s]
 35%|      | 28/79 [00:01<00:03, 13.87it/s]
 39%|      | 31/79 [00:02<00:02, 16.27it/s]
 43%|     | 34/79 [00:02<00:02, 18.20it/s]
 47%|     | 37/79 [00:02<00:02, 19.99it/s]
 51%|     | 40/79 [00:02<00:01, 21.18it/s]
 54%|    | 43/79 [00:02<00:01, 22.27it/s]
 58%|    | 46/79 [00:02<00:01, 23.19it/s]
 62%|   | 49/79 [00:02<00:01, 23.82it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.42it/s]
 28%|       | 22/79 [00:01<00:06,  9.46it/s]
 32%|      | 25/79 [00:01<00:04, 11.67it/s]
 35%|      | 28/79 [00:01<00:03, 13.98it/s]
 39%|      | 31/79 [00:02<00:02, 16.27it/s]
 43%|     | 34/79 [00:02<00:02, 18.19it/s]
 47%|     | 37/79 [00:02<00:02, 19.88it/s]
 51%|     | 40/79 [00:02<00:01, 21.25it/s]
 54%|    | 43/79 [00:02<00:01, 22.37it/s]
 58%|    | 46/79 [00:02<00:01, 23.21it/s]
 62%|   | 49/79 [00:02<00:01, 23.64it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:10,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.64it/s]
 35%|      | 28/79 [00:01<00:03, 13.85it/s]
 39%|      | 31/79 [00:02<00:03, 15.94it/s]
 43%|     | 34/79 [00:02<00:02, 17.88it/s]
 47%|     | 37/79 [00:02<00:02, 19.52it/s]
 51%|     | 40/79 [00:02<00:01, 20.81it/s]
 54%|    | 43/79 [00:02<00:01, 21.85it/s]
 58%|    | 46/79 [00:02<00:01, 22.59it/s]
 62%|   | 49/79 [00:02<00:01, 23.30it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  4%|         | 3/79 [00:00<00:46,  1.65it/s]
  8%|         | 6/79 [00:01<00:31,  2.29it/s]
 11%|        | 9/79 [00:01<00:22,  3.15it/s]
 15%|        | 12/79 [00:01<00:15,  4.27it/s]
 19%|        | 15/79 [00:01<00:11,  5.68it/s]
 23%|       | 18/79 [00:01<00:08,  7.41it/s]
 27%|       | 21/79 [00:01<00:06,  9.37it/s]
 30%|       | 24/79 [00:01<00:04, 11.50it/s]
 34%|      | 27/79 [00:01<00:03, 13.62it/s]
 38%|      | 30/79 [00:02<00:03, 15.80it/s]
 42%|     | 33/79 [00:02<00:02, 17.75it/s]
 46%|     | 36/79 [00:02<00:02, 19.47it/s]
 49%|     | 39/79 [00:02<00:01, 20.97it/s]
 53%|    | 42/79 [00:02<00:01, 22.14it/s]
 57%|    | 45/79 [00:02<00:01, 23.05it/s]
 61%|    | 48/79 [00:02<00:01, 23.79it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.77it/s]
 24%|       | 19/79 [00:01<00:08,  7.50it/s]
 28%|       | 22/79 [00:01<00:06,  9.46it/s]
 32%|      | 25/79 [00:01<00:04, 11.63it/s]
 35%|      | 28/79 [00:01<00:03, 13.91it/s]
 39%|      | 31/79 [00:02<00:02, 16.02it/s]
 43%|     | 34/79 [00:02<00:02, 17.99it/s]
 47%|     | 37/79 [00:02<00:02, 19.67it/s]
 51%|     | 40/79 [00:02<00:01, 21.06it/s]
 54%|    | 43/79 [00:02<00:01, 22.12it/s]
 58%|    | 46/79 [00:02<00:01, 22.97it/s]
 62%|   | 49/79 [00:02<00:01, 23.40it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.43it/s]
 20%|        | 16/79 [00:01<00:10,  5.88it/s]
 24%|       | 19/79 [00:01<00:07,  7.63it/s]
 28%|       | 22/79 [00:01<00:05,  9.63it/s]
 32%|      | 25/79 [00:01<00:04, 11.69it/s]
 35%|      | 28/79 [00:01<00:03, 13.92it/s]
 39%|      | 31/79 [00:02<00:03, 15.93it/s]
 43%|     | 34/79 [00:02<00:02, 17.83it/s]
 47%|     | 37/79 [00:02<00:02, 19.45it/s]
 51%|     | 40/79 [00:02<00:01, 20.98it/s]
 54%|    | 43/79 [00:02<00:01, 21.76it/s]
 58%|    | 46/79 [00:02<00:01, 22.58it/s]
 62%|   | 49/79 [00:02<00:01, 23.07it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.21it/s]
 28%|       | 22/79 [00:01<00:06,  9.17it/s]
 32%|      | 25/79 [00:01<00:04, 11.28it/s]
 35%|      | 28/79 [00:01<00:03, 13.50it/s]
 39%|      | 31/79 [00:02<00:03, 15.71it/s]
 43%|     | 34/79 [00:02<00:02, 17.71it/s]
 47%|     | 37/79 [00:02<00:02, 19.32it/s]
 51%|     | 40/79 [00:02<00:01, 20.83it/s]
 54%|    | 43/79 [00:02<00:01, 21.95it/s]
 58%|    | 46/79 [00:02<00:01, 23.12it/s]
 62%|   | 49/79 [00:02<00:01, 23.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.77it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:06,  9.47it/s]
 32%|      | 25/79 [00:01<00:04, 11.60it/s]
 35%|      | 28/79 [00:01<00:03, 13.81it/s]
 39%|      | 31/79 [00:02<00:03, 15.92it/s]
 43%|     | 34/79 [00:02<00:02, 17.86it/s]
 47%|     | 37/79 [00:02<00:02, 19.47it/s]
 51%|     | 40/79 [00:02<00:01, 20.74it/s]
 54%|    | 43/79 [00:02<00:01, 21.80it/s]
 58%|    | 46/79 [00:02<00:01, 22.37it/s]
 62%|   | 49/79 [00:02<00:01, 23.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.05it/s]
 32%|      | 25/79 [00:01<00:04, 11.17it/s]
 35%|      | 28/79 [00:01<00:03, 13.42it/s]
 39%|      | 31/79 [00:02<00:03, 15.58it/s]
 43%|     | 34/79 [00:02<00:02, 17.49it/s]
 47%|     | 37/79 [00:02<00:02, 19.03it/s]
 51%|     | 40/79 [00:02<00:01, 20.46it/s]
 54%|    | 43/79 [00:02<00:01, 21.44it/s]
 58%|    | 46/79 [00:02<00:01, 22.49it/s]
 62%|   | 49/79 [00:02<00:01, 23.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.07it/s]
 32%|      | 25/79 [00:01<00:04, 11.22it/s]
 35%|      | 28/79 [00:01<00:03, 13.42it/s]
 39%|      | 31/79 [00:02<00:03, 15.54it/s]
 43%|     | 34/79 [00:02<00:02, 17.50it/s]
 47%|     | 37/79 [00:02<00:02, 19.22it/s]
 51%|     | 40/79 [00:02<00:01, 20.56it/s]
 54%|    | 43/79 [00:02<00:01, 21.51it/s]
 58%|    | 46/79 [00:02<00:01, 22.43it/s]
 62%|   | 49/79 [00:02<00:01, 23.23it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.13it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.60it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.60it/s]
 47%|     | 37/79 [00:02<00:02, 19.38it/s]
 51%|     | 40/79 [00:02<00:01, 20.62it/s]
 54%|    | 43/79 [00:02<00:01, 21.67it/s]
 58%|    | 46/79 [00:02<00:01, 22.67it/s]
 62%|   | 49/79 [00:02<00:01, 23.20it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.48it/s]
 24%|       | 19/79 [00:01<00:08,  7.15it/s]
 28%|       | 22/79 [00:01<00:06,  9.12it/s]
 32%|      | 25/79 [00:01<00:04, 11.31it/s]
 35%|      | 28/79 [00:01<00:03, 13.54it/s]
 39%|      | 31/79 [00:02<00:03, 15.71it/s]
 43%|     | 34/79 [00:02<00:02, 17.75it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 20.78it/s]
 54%|    | 43/79 [00:02<00:01, 22.00it/s]
 58%|    | 46/79 [00:02<00:01, 22.90it/s]
 62%|   | 49/79 [00:02<00:01, 23.46it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.33it/s]
 32%|      | 25/79 [00:01<00:04, 11.52it/s]
 35%|      | 28/79 [00:01<00:03, 13.77it/s]
 39%|      | 31/79 [00:02<00:03, 15.91it/s]
 43%|     | 34/79 [00:02<00:02, 17.83it/s]
 47%|     | 37/79 [00:02<00:02, 19.41it/s]
 51%|     | 40/79 [00:02<00:01, 20.84it/s]
 54%|    | 43/79 [00:02<00:01, 21.76it/s]
 58%|    | 46/79 [00:02<00:01, 22.21it/s]
 62%|   | 49/79 [00:02<00:01, 23.12it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.07it/s]
 35%|      | 28/79 [00:02<00:03, 13.29it/s]
 39%|      | 31/79 [00:02<00:03, 15.49it/s]
 43%|     | 34/79 [00:02<00:02, 17.33it/s]
 47%|     | 37/79 [00:02<00:02, 18.97it/s]
 51%|     | 40/79 [00:02<00:01, 20.44it/s]
 54%|    | 43/79 [00:02<00:01, 21.54it/s]
 58%|    | 46/79 [00:02<00:01, 22.41it/s]
 62%|   | 49/79 [00:02<00:01, 23.01it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.18it/s]
 24%|       | 19/79 [00:01<00:08,  6.82it/s]
 28%|       | 22/79 [00:01<00:06,  8.74it/s]
 32%|      | 25/79 [00:01<00:04, 10.89it/s]
 35%|      | 28/79 [00:02<00:03, 13.19it/s]
 39%|      | 31/79 [00:02<00:03, 15.49it/s]
 43%|     | 34/79 [00:02<00:02, 17.60it/s]
 47%|     | 37/79 [00:02<00:02, 19.61it/s]
 51%|     | 40/79 [00:02<00:01, 20.92it/s]
 54%|    | 43/79 [00:02<00:01, 22.11it/s]
 58%|    | 46/79 [00:02<00:01, 22.87it/s]
 62%|   | 49/79 [00:02<00:01, 23.56it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.93it/s]
 28%|       | 22/79 [00:01<00:06,  8.86it/s]
 32%|      | 25/79 [00:01<00:04, 10.97it/s]
 35%|      | 28/79 [00:02<00:03, 13.17it/s]
 39%|      | 31/79 [00:02<00:03, 15.41it/s]
 43%|     | 34/79 [00:02<00:02, 17.38it/s]
 47%|     | 37/79 [00:02<00:02, 19.25it/s]
 51%|     | 40/79 [00:02<00:01, 20.55it/s]
 54%|    | 43/79 [00:02<00:01, 21.43it/s]
 58%|    | 46/79 [00:02<00:01, 22.22it/s]
 62%|   | 49/79 [00:02<00:01, 22.92it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.06it/s]
 28%|       | 22/79 [00:01<00:06,  9.00it/s]
 32%|      | 25/79 [00:01<00:04, 11.13it/s]
 35%|      | 28/79 [00:01<00:03, 13.40it/s]
 39%|      | 31/79 [00:02<00:03, 15.53it/s]
 43%|     | 34/79 [00:02<00:02, 17.38it/s]
 47%|     | 37/79 [00:02<00:02, 19.28it/s]
 51%|     | 40/79 [00:02<00:01, 20.46it/s]
 54%|    | 43/79 [00:02<00:01, 21.43it/s]
 58%|    | 46/79 [00:02<00:01, 21.76it/s]
 62%|   | 49/79 [00:02<00:01, 22.42it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:17,  3.88it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.84it/s]
 28%|       | 22/79 [00:01<00:06,  8.76it/s]
 32%|      | 25/79 [00:01<00:04, 10.88it/s]
 35%|      | 28/79 [00:02<00:03, 13.20it/s]
 39%|      | 31/79 [00:02<00:03, 15.28it/s]
 43%|     | 34/79 [00:02<00:02, 17.36it/s]
 47%|     | 37/79 [00:02<00:02, 18.99it/s]
 51%|     | 40/79 [00:02<00:01, 20.55it/s]
 54%|    | 43/79 [00:02<00:01, 21.74it/s]
 58%|    | 46/79 [00:02<00:01, 22.87it/s]
 62%|   | 49/79 [00:02<00:01, 23.37it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.45it/s]
 24%|       | 19/79 [00:01<00:08,  7.08it/s]
 28%|       | 22/79 [00:01<00:06,  8.98it/s]
 32%|      | 25/79 [00:01<00:04, 11.13it/s]
 35%|      | 28/79 [00:02<00:03, 13.34it/s]
 39%|      | 31/79 [00:02<00:03, 15.48it/s]
 43%|     | 34/79 [00:02<00:02, 17.31it/s]
 47%|     | 37/79 [00:02<00:02, 19.03it/s]
 51%|     | 40/79 [00:02<00:01, 20.27it/s]
 54%|    | 43/79 [00:02<00:01, 21.37it/s]
 58%|    | 46/79 [00:02<00:01, 22.14it/s]
 62%|   | 49/79 [00:02<00:01, 23.07it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 28%|       | 22/79 [00:01<00:06,  9.18it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.51it/s]
 39%|      | 31/79 [00:02<00:03, 15.63it/s]
 43%|     | 34/79 [00:02<00:02, 17.59it/s]
 47%|     | 37/79 [00:02<00:02, 19.42it/s]
 51%|     | 40/79 [00:02<00:01, 20.63it/s]
 54%|    | 43/79 [00:02<00:01, 21.51it/s]
 58%|    | 46/79 [00:02<00:01, 22.08it/s]
 62%|   | 49/79 [00:02<00:01, 22.93it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.92it/s]
 28%|       | 22/79 [00:01<00:06,  8.81it/s]
 32%|      | 25/79 [00:01<00:04, 10.94it/s]
 35%|      | 28/79 [00:02<00:03, 13.11it/s]
 39%|      | 31/79 [00:02<00:03, 15.25it/s]
 43%|     | 34/79 [00:02<00:02, 17.42it/s]
 47%|     | 37/79 [00:02<00:02, 19.12it/s]
 51%|     | 40/79 [00:02<00:01, 20.61it/s]
 54%|    | 43/79 [00:02<00:01, 21.75it/s]
 58%|    | 46/79 [00:02<00:01, 22.38it/s]
 62%|   | 49/79 [00:02<00:01, 22.94it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  6.99it/s]
 28%|       | 22/79 [00:01<00:06,  8.94it/s]
 32%|      | 25/79 [00:01<00:04, 11.01it/s]
 35%|      | 28/79 [00:02<00:03, 13.25it/s]
 39%|      | 31/79 [00:02<00:03, 15.46it/s]
 43%|     | 34/79 [00:02<00:02, 17.53it/s]
 47%|     | 37/79 [00:02<00:02, 18.90it/s]
 51%|     | 40/79 [00:02<00:01, 20.40it/s]
 54%|    | 43/79 [00:02<00:01, 21.43it/s]
 58%|    | 46/79 [00:02<00:01, 22.26it/s]
 62%|   | 49/79 [00:02<00:01, 22.90it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.11it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.48it/s]
 39%|      | 31/79 [00:02<00:03, 15.49it/s]
 43%|     | 34/79 [00:02<00:02, 17.24it/s]
 47%|     | 37/79 [00:02<00:02, 19.07it/s]
 51%|     | 40/79 [00:02<00:01, 20.28it/s]
 54%|    | 43/79 [00:02<00:01, 21.41it/s]
 58%|    | 46/79 [00:02<00:01, 22.17it/s]
 62%|   | 49/79 [00:02<00:01, 22.92it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  6.98it/s]
 28%|       | 22/79 [00:01<00:06,  8.90it/s]
 32%|      | 25/79 [00:01<00:04, 10.96it/s]
 35%|      | 28/79 [00:02<00:03, 13.18it/s]
 39%|      | 31/79 [00:02<00:03, 15.34it/s]
 43%|     | 34/79 [00:02<00:02, 17.31it/s]
 47%|     | 37/79 [00:02<00:02, 18.83it/s]
 51%|     | 40/79 [00:02<00:01, 20.35it/s]
 54%|    | 43/79 [00:02<00:01, 21.53it/s]
 58%|    | 46/79 [00:02<00:01, 22.39it/s]
 62%|   | 49/79 [00:02<00:01, 23.10it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.17it/s]
 24%|       | 19/79 [00:01<00:08,  6.80it/s]
 28%|       | 22/79 [00:01<00:06,  8.70it/s]
 32%|      | 25/79 [00:01<00:05, 10.80it/s]
 35%|      | 28/79 [00:02<00:03, 13.02it/s]
 39%|      | 31/79 [00:02<00:03, 15.21it/s]
 43%|     | 34/79 [00:02<00:02, 17.28it/s]
 47%|     | 37/79 [00:02<00:02, 18.90it/s]
 51%|     | 40/79 [00:02<00:01, 20.33it/s]
 54%|    | 43/79 [00:02<00:01, 21.71it/s]
 58%|    | 46/79 [00:02<00:01, 22.60it/s]
 62%|   | 49/79 [00:02<00:01, 22.98it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.80it/s]
 16%|        | 13/79 [00:01<00:17,  3.82it/s]
 20%|        | 16/79 [00:01<00:12,  5.12it/s]
 24%|       | 19/79 [00:01<00:08,  6.75it/s]
 28%|       | 22/79 [00:01<00:06,  8.64it/s]
 32%|      | 25/79 [00:01<00:05, 10.80it/s]
 35%|      | 28/79 [00:02<00:03, 13.01it/s]
 39%|      | 31/79 [00:02<00:03, 15.32it/s]
 43%|     | 34/79 [00:02<00:02, 17.32it/s]
 47%|     | 37/79 [00:02<00:02, 19.06it/s]
 51%|     | 40/79 [00:02<00:01, 20.42it/s]
 54%|    | 43/79 [00:02<00:01, 21.70it/s]
 58%|    | 46/79 [00:02<00:01, 22.34it/s]
 62%|   | 49/79 [00:02<00:01, 22.95it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  4%|         | 3/79 [00:01<00:49,  1.55it/s]
  8%|         | 6/79 [00:01<00:33,  2.16it/s]
 11%|        | 9/79 [00:01<00:23,  2.96it/s]
 15%|        | 12/79 [00:01<00:16,  4.03it/s]
 19%|        | 15/79 [00:01<00:11,  5.37it/s]
 23%|       | 18/79 [00:01<00:08,  6.99it/s]
 27%|       | 21/79 [00:01<00:06,  8.88it/s]
 30%|       | 24/79 [00:01<00:05, 10.93it/s]
 34%|      | 27/79 [00:02<00:03, 13.12it/s]
 38%|      | 30/79 [00:02<00:03, 15.29it/s]
 42%|     | 33/79 [00:02<00:02, 17.14it/s]
 46%|     | 36/79 [00:02<00:02, 18.98it/s]
 49%|     | 39/79 [00:02<00:01, 20.15it/s]
 53%|    | 42/79 [00:02<00:01, 21.36it/s]
 57%|    | 45/79 [00:02<00:01, 22.02it/s]
 61%|    | 48/79 [00:02<00:01, 22.59it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.95it/s]
 20%|        | 16/79 [00:01<00:11,  5.27it/s]
 24%|       | 19/79 [00:01<00:08,  6.89it/s]
 28%|       | 22/79 [00:01<00:06,  8.81it/s]
 32%|      | 25/79 [00:01<00:04, 10.88it/s]
 35%|      | 28/79 [00:02<00:03, 13.03it/s]
 39%|      | 31/79 [00:02<00:03, 15.19it/s]
 43%|     | 34/79 [00:02<00:02, 17.33it/s]
 47%|     | 37/79 [00:02<00:02, 18.97it/s]
 51%|     | 40/79 [00:02<00:01, 20.19it/s]
 54%|    | 43/79 [00:02<00:01, 21.34it/s]
 58%|    | 46/79 [00:02<00:01, 22.27it/s]
 62%|   | 49/79 [00:02<00:01, 22.62it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.81it/s]
 28%|       | 22/79 [00:01<00:06,  8.71it/s]
 32%|      | 25/79 [00:01<00:05, 10.77it/s]
 35%|      | 28/79 [00:02<00:03, 12.96it/s]
 39%|      | 31/79 [00:02<00:03, 15.02it/s]
 43%|     | 34/79 [00:02<00:02, 16.93it/s]
 47%|     | 37/79 [00:02<00:02, 18.53it/s]
 51%|     | 40/79 [00:02<00:01, 20.14it/s]
 54%|    | 43/79 [00:02<00:01, 21.39it/s]
 58%|    | 46/79 [00:02<00:01, 22.23it/s]
 62%|   | 49/79 [00:02<00:01, 23.12it/s]
 66%|   | 52/79 [00:03<00:01, 24.68it/s]
 70%|   | 55/79 [00:02<00:00, 24.99it/s]
 73%|  | 58/79 [00:03<00:00, 25.21it/s]
 77%|  | 61/79 [00:03<00:00, 25.05it/s]
 81%|  | 64/79 [00:03<00:00, 24.95it/s]
 85%| | 67/79 [00:03<00:00, 25.23it/s]
 89%| | 70/79 [00:03<00:00, 25.26it/s]
 92%|| 73/79 [00:03<00:00, 25.65it/s]
 96%|| 76/79 [00:03<00:00, 26.20it/s]
100%|| 79/79 [00:03<00:00, 27.01it/s]
, 24.28it/s]
 70%|   | 55/79 [00:02<00:00, 24.81it/s]
 73%|  | 58/79 [00:03<00:00, 25.14it/s]
 77%|  | 61/79 [00:03<00:00, 25.28it/s]
 81%|  | 64/79 [00:03<00:00, 25.41it/s]
 85%| | 67/79 [00:03<00:00, 25.62it/s]
 89%| | 70/79 [00:03<00:00, 25.40it/s]
 92%|| 73/79 [00:03<00:00, 25.71it/s]
 96%|| 76/79 [00:03<00:00, 26.12it/s]
100%|| 79/79 [00:03<00:00, 26.83it/s]
, 23.52it/s]
 70%|   | 55/79 [00:02<00:01, 23.64it/s]
 73%|  | 58/79 [00:03<00:00, 24.15it/s]
 77%|  | 61/79 [00:03<00:00, 24.38it/s]
 81%|  | 64/79 [00:03<00:00, 24.42it/s]
 85%| | 67/79 [00:03<00:00, 24.56it/s]
 89%| | 70/79 [00:03<00:00, 24.68it/s]
 92%|| 73/79 [00:03<00:00, 24.95it/s]
 96%|| 76/79 [00:03<00:00, 25.71it/s]
100%|| 79/79 [00:03<00:00, 26.65it/s]
, 24.19it/s]
 70%|   | 55/79 [00:02<00:00, 24.57it/s]
 73%|  | 58/79 [00:03<00:00, 24.89it/s]
 77%|  | 61/79 [00:03<00:00, 25.30it/s]
 81%|  | 64/79 [00:03<00:00, 25.30it/s]
 85%| | 67/79 [00:03<00:00, 25.37it/s]
 89%| | 70/79 [00:03<00:00, 25.00it/s]
 92%|| 73/79 [00:03<00:00, 25.64it/s]
 96%|| 76/79 [00:03<00:00, 26.17it/s]
100%|| 79/79 [00:03<00:00, 26.94it/s]
, 24.10it/s]
 70%|   | 55/79 [00:02<00:00, 24.55it/s]
 73%|  | 58/79 [00:03<00:00, 24.89it/s]
 77%|  | 61/79 [00:03<00:00, 24.99it/s]
 81%|  | 64/79 [00:03<00:00, 25.06it/s]
 85%| | 67/79 [00:03<00:00, 25.00it/s]
 89%| | 70/79 [00:03<00:00, 24.73it/s]
 92%|| 73/79 [00:03<00:00, 25.17it/s]
 96%|| 76/79 [00:03<00:00, 25.72it/s]
100%|| 79/79 [00:03<00:00, 26.47it/s]
, 23.99it/s]
 70%|   | 55/79 [00:02<00:00, 24.25it/s]
 73%|  | 58/79 [00:03<00:00, 24.65it/s]
 77%|  | 61/79 [00:03<00:00, 24.92it/s]
 81%|  | 64/79 [00:03<00:00, 24.96it/s]
 85%| | 67/79 [00:03<00:00, 25.24it/s]
 89%| | 70/79 [00:03<00:00, 24.97it/s]
 92%|| 73/79 [00:03<00:00, 25.32it/s]
 96%|| 76/79 [00:03<00:00, 25.89it/s]
100%|| 79/79 [00:03<00:00, 26.67it/s]
, 23.63it/s]
 70%|   | 55/79 [00:03<00:01, 23.88it/s]
 73%|  | 58/79 [00:03<00:00, 24.32it/s]
 77%|  | 61/79 [00:03<00:00, 24.62it/s]
 81%|  | 64/79 [00:03<00:00, 24.78it/s]
 85%| | 67/79 [00:03<00:00, 25.07it/s]
 89%| | 70/79 [00:03<00:00, 25.13it/s]
 92%|| 73/79 [00:03<00:00, 25.25it/s]
 96%|| 76/79 [00:03<00:00, 25.85it/s]
100%|| 79/79 [00:03<00:00, 26.64it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:00, 24.06it/s]
 73%|  | 58/79 [00:03<00:00, 24.31it/s]
 77%|  | 61/79 [00:03<00:00, 24.62it/s]
 81%|  | 64/79 [00:03<00:00, 24.86it/s]
 85%| | 67/79 [00:03<00:00, 24.87it/s]
 89%| | 70/79 [00:03<00:00, 25.32it/s]
 92%|| 73/79 [00:03<00:00, 25.25it/s]
 96%|| 76/79 [00:03<00:00, 26.06it/s]
100%|| 79/79 [00:03<00:00, 26.95it/s]
, 23.83it/s]
 70%|   | 55/79 [00:03<00:01, 23.88it/s]
 73%|  | 58/79 [00:03<00:00, 24.20it/s]
 77%|  | 61/79 [00:03<00:00, 24.24it/s]
 81%|  | 64/79 [00:03<00:00, 24.34it/s]
 85%| | 67/79 [00:03<00:00, 24.28it/s]
 89%| | 70/79 [00:03<00:00, 24.52it/s]
 92%|| 73/79 [00:03<00:00, 24.55it/s]
 96%|| 76/79 [00:03<00:00, 25.38it/s]
100%|| 79/79 [00:03<00:00, 26.16it/s]
, 23.84it/s]
 70%|   | 55/79 [00:03<00:01, 23.71it/s]
 73%|  | 58/79 [00:03<00:00, 24.26it/s]
 77%|  | 61/79 [00:03<00:00, 24.30it/s]
 81%|  | 64/79 [00:03<00:00, 24.74it/s]
 85%| | 67/79 [00:03<00:00, 24.80it/s]
 89%| | 70/79 [00:03<00:00, 25.05it/s]
 92%|| 73/79 [00:03<00:00, 25.19it/s]
 96%|| 76/79 [00:03<00:00, 25.78it/s]
100%|| 79/79 [00:03<00:00, 26.45it/s]
, 23.81it/s]
 70%|   | 55/79 [00:03<00:00, 24.01it/s]
 73%|  | 58/79 [00:03<00:00, 24.29it/s]
 77%|  | 61/79 [00:03<00:00, 24.24it/s]
 81%|  | 64/79 [00:03<00:00, 24.45it/s]
 85%| | 67/79 [00:03<00:00, 24.44it/s]
 89%| | 70/79 [00:03<00:00, 23.95it/s]
 92%|| 73/79 [00:03<00:00, 24.45it/s]
 96%|| 76/79 [00:03<00:00, 25.12it/s]
100%|| 79/79 [00:03<00:00, 26.18it/s]
, 23.57it/s]
 70%|   | 55/79 [00:03<00:01, 23.98it/s]
 73%|  | 58/79 [00:03<00:00, 24.48it/s]
 77%|  | 61/79 [00:03<00:00, 24.48it/s]
 81%|  | 64/79 [00:03<00:00, 24.57it/s]
 85%| | 67/79 [00:03<00:00, 24.88it/s]
 89%| | 70/79 [00:03<00:00, 24.85it/s]
 92%|| 73/79 [00:03<00:00, 25.29it/s]
 96%|| 76/79 [00:03<00:00, 25.84it/s]
100%|| 79/79 [00:04<00:00, 26.71it/s]
20it/s]
 68%|   | 54/79 [00:02<00:01, 24.70it/s]
 72%|  | 57/79 [00:03<00:00, 25.00it/s]
 76%|  | 60/79 [00:03<00:00, 25.16it/s]
 80%|  | 63/79 [00:03<00:00, 25.12it/s]
 84%| | 66/79 [00:03<00:00, 25.24it/s]
 87%| | 69/79 [00:03<00:00, 25.36it/s]
 91%| | 72/79 [00:03<00:00, 25.45it/s]
 95%|| 75/79 [00:03<00:00, 26.03it/s]
 99%|| 78/79 [00:03<00:00, 26.85it/s]
100%|| 79/79 [00:04<00:00, 19.65it/s]
, 23.75it/s]
 70%|   | 55/79 [00:03<00:00, 24.07it/s]
 73%|  | 58/79 [00:03<00:00, 24.51it/s]
 77%|  | 61/79 [00:03<00:00, 24.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.70it/s]
 85%| | 67/79 [00:03<00:00, 24.73it/s]
 89%| | 70/79 [00:03<00:00, 24.87it/s]
 92%|| 73/79 [00:03<00:00, 25.21it/s]
 96%|| 76/79 [00:03<00:00, 26.28it/s]
100%|| 79/79 [00:04<00:00, 26.68it/s]
, 23.75it/s]
 70%|   | 55/79 [00:03<00:00, 24.14it/s]
 73%|  | 58/79 [00:03<00:00, 24.30it/s]
 77%|  | 61/79 [00:03<00:00, 24.67it/s]
 81%|  | 64/79 [00:03<00:00, 24.72it/s]
 85%| | 67/79 [00:03<00:00, 24.93it/s]
 89%| | 70/79 [00:03<00:00, 24.87it/s]
 92%|| 73/79 [00:03<00:00, 25.25it/s]
 96%|| 76/79 [00:03<00:00, 25.90it/s]
100%|| 79/79 [00:03<00:00, 26.80it/s]
, 23.94it/s]
 70%|   | 55/79 [00:03<00:00, 24.20it/s]
 73%|  | 58/79 [00:03<00:00, 24.67it/s]
 77%|  | 61/79 [00:03<00:00, 24.91it/s]
 81%|  | 64/79 [00:03<00:00, 24.77it/s]
 85%| | 67/79 [00:03<00:00, 24.77it/s]
 89%| | 70/79 [00:03<00:00, 25.04it/s]
 92%|| 73/79 [00:03<00:00, 25.22it/s]
 96%|| 76/79 [00:03<00:00, 25.93it/s]
100%|| 79/79 [00:04<00:00, 26.69it/s]
, 23.86it/s]
 70%|   | 55/79 [00:03<00:00, 24.30it/s]
 73%|  | 58/79 [00:03<00:00, 24.43it/s]
 77%|  | 61/79 [00:03<00:00, 24.89it/s]
 81%|  | 64/79 [00:03<00:00, 25.08it/s]
 85%| | 67/79 [00:03<00:00, 25.11it/s]
 89%| | 70/79 [00:03<00:00, 25.35it/s]
 92%|| 73/79 [00:03<00:00, 25.64it/s]
 96%|| 76/79 [00:03<00:00, 26.26it/s]
100%|| 79/79 [00:03<00:00, 27.06it/s]
, 23.86it/s]
 70%|   | 55/79 [00:03<00:00, 24.21it/s]
 73%|  | 58/79 [00:03<00:00, 24.59it/s]
 77%|  | 61/79 [00:03<00:00, 24.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.44it/s]
 85%| | 67/79 [00:03<00:00, 24.70it/s]
 89%| | 70/79 [00:03<00:00, 24.65it/s]
 92%|| 73/79 [00:03<00:00, 25.10it/s]
 96%|| 76/79 [00:03<00:00, 25.62it/s]
100%|| 79/79 [00:03<00:00, 26.64it/s]
, 23.61it/s]
 70%|   | 55/79 [00:03<00:01, 24.00it/s]
 73%|  | 58/79 [00:03<00:00, 24.30it/s]
 77%|  | 61/79 [00:03<00:00, 24.50it/s]
 81%|  | 64/79 [00:03<00:00, 24.69it/s]
 85%| | 67/79 [00:03<00:00, 24.94it/s]
 89%| | 70/79 [00:03<00:00, 25.01it/s]
 92%|| 73/79 [00:03<00:00, 25.20it/s]
 96%|| 76/79 [00:03<00:00, 25.76it/s]
100%|| 79/79 [00:04<00:00, 26.45it/s]
, 23.64it/s]
 70%|   | 55/79 [00:03<00:00, 24.14it/s]
 73%|  | 58/79 [00:03<00:00, 24.56it/s]
 77%|  | 61/79 [00:03<00:00, 24.66it/s]
 81%|  | 64/79 [00:03<00:00, 24.68it/s]
 85%| | 67/79 [00:03<00:00, 24.87it/s]
 89%| | 70/79 [00:03<00:00, 24.98it/s]
 92%|| 73/79 [00:03<00:00, 25.52it/s]
 96%|| 76/79 [00:03<00:00, 26.13it/s]
100%|| 79/79 [00:04<00:00, 27.05it/s]
, 23.49it/s]
 70%|   | 55/79 [00:03<00:00, 24.01it/s]
 73%|  | 58/79 [00:03<00:00, 24.41it/s]
 77%|  | 61/79 [00:03<00:00, 24.41it/s]
 81%|  | 64/79 [00:03<00:00, 24.52it/s]
 85%| | 67/79 [00:03<00:00, 24.70it/s]
 89%| | 70/79 [00:03<00:00, 24.84it/s]
 92%|| 73/79 [00:03<00:00, 24.82it/s]
 96%|| 76/79 [00:03<00:00, 25.65it/s]
100%|| 79/79 [00:04<00:00, 26.49it/s]
, 23.52it/s]
 70%|   | 55/79 [00:03<00:01, 23.69it/s]
 73%|  | 58/79 [00:03<00:00, 24.33it/s]
 77%|  | 61/79 [00:03<00:00, 24.32it/s]
 81%|  | 64/79 [00:03<00:00, 24.65it/s]
 85%| | 67/79 [00:03<00:00, 24.71it/s]
 89%| | 70/79 [00:03<00:00, 24.97it/s]
 92%|| 73/79 [00:03<00:00, 24.92it/s]
 96%|| 76/79 [00:03<00:00, 25.64it/s]
100%|| 79/79 [00:04<00:00, 26.51it/s]
, 23.52it/s]
 70%|   | 55/79 [00:03<00:01, 23.59it/s]
 73%|  | 58/79 [00:03<00:00, 23.97it/s]
 77%|  | 61/79 [00:03<00:00, 23.90it/s]
 81%|  | 64/79 [00:03<00:00, 23.97it/s]
 85%| | 67/79 [00:03<00:00, 24.24it/s]
 89%| | 70/79 [00:03<00:00, 24.22it/s]
 92%|| 73/79 [00:03<00:00, 24.72it/s]
 96%|| 76/79 [00:03<00:00, 25.41it/s]
100%|| 79/79 [00:04<00:00, 26.34it/s]
, 23.23it/s]
 70%|   | 55/79 [00:03<00:01, 23.76it/s]
 73%|  | 58/79 [00:03<00:00, 24.09it/s]
 77%|  | 61/79 [00:03<00:00, 24.43it/s]
 81%|  | 64/79 [00:03<00:00, 24.74it/s]
 85%| | 67/79 [00:03<00:00, 24.96it/s]
 89%| | 70/79 [00:03<00:00, 24.90it/s]
 92%|| 73/79 [00:03<00:00, 25.00it/s]
 96%|| 76/79 [00:03<00:00, 25.63it/s]
100%|| 79/79 [00:04<00:00, 26.34it/s]
, 23.32it/s]
 70%|   | 55/79 [00:03<00:01, 23.75it/s]
 73%|  | 58/79 [00:03<00:00, 23.74it/s]
 77%|  | 61/79 [00:03<00:00, 23.82it/s]
 81%|  | 64/79 [00:03<00:00, 24.01it/s]
 85%| | 67/79 [00:03<00:00, 23.72it/s]
 89%| | 70/79 [00:03<00:00, 23.72it/s]
 92%|| 73/79 [00:03<00:00, 24.47it/s]
 96%|| 76/79 [00:03<00:00, 25.22it/s]
100%|| 79/79 [00:04<00:00, 26.22it/s]
, 23.21it/s]
 70%|   | 55/79 [00:03<00:01, 23.74it/s]
 73%|  | 58/79 [00:03<00:00, 23.91it/s]
 77%|  | 61/79 [00:03<00:00, 24.11it/s]
 81%|  | 64/79 [00:03<00:00, 24.72it/s]
 85%| | 67/79 [00:03<00:00, 24.28it/s]
 89%| | 70/79 [00:03<00:00, 24.28it/s]
 92%|| 73/79 [00:03<00:00, 24.71it/s]
 96%|| 76/79 [00:03<00:00, 25.50it/s]
100%|| 79/79 [00:04<00:00, 26.16it/s]
, 23.22it/s]
 70%|   | 55/79 [00:03<00:01, 23.28it/s]
 73%|  | 58/79 [00:03<00:00, 23.41it/s]
 77%|  | 61/79 [00:03<00:00, 23.91it/s]
 81%|  | 64/79 [00:03<00:00, 23.95it/s]
 85%| | 67/79 [00:03<00:00, 24.37it/s]
 89%| | 70/79 [00:03<00:00, 24.45it/s]
 92%|| 73/79 [00:03<00:00, 24.71it/s]
 96%|| 76/79 [00:03<00:00, 25.53it/s]
100%|| 79/79 [00:04<00:00, 26.45it/s]
, 23.21it/s]
 70%|   | 55/79 [00:03<00:01, 23.62it/s]
 73%|  | 58/79 [00:03<00:00, 23.77it/s]
 77%|  | 61/79 [00:03<00:00, 23.95it/s]
 81%|  | 64/79 [00:03<00:00, 24.07it/s]
 85%| | 67/79 [00:03<00:00, 24.19it/s]
 89%| | 70/79 [00:03<00:00, 24.27it/s]
 92%|| 73/79 [00:03<00:00, 24.73it/s]
 96%|| 76/79 [00:03<00:00, 25.44it/s]
100%|| 79/79 [00:04<00:00, 26.30it/s]
, 23.58it/s]
 70%|   | 55/79 [00:03<00:01, 23.94it/s]
 73%|  | 58/79 [00:03<00:00, 23.85it/s]
 77%|  | 61/79 [00:03<00:00, 24.02it/s]
 81%|  | 64/79 [00:03<00:00, 24.15it/s]
 85%| | 67/79 [00:03<00:00, 24.28it/s]
 89%| | 70/79 [00:03<00:00, 24.25it/s]
 92%|| 73/79 [00:03<00:00, 24.67it/s]
 96%|| 76/79 [00:03<00:00, 25.28it/s]
100%|| 79/79 [00:04<00:00, 26.24it/s]
, 22.98it/s]
 70%|   | 55/79 [00:03<00:01, 23.37it/s]
 73%|  | 58/79 [00:03<00:00, 23.87it/s]
 77%|  | 61/79 [00:03<00:00, 23.80it/s]
 81%|  | 64/79 [00:03<00:00, 23.99it/s]
 85%| | 67/79 [00:03<00:00, 24.27it/s]
 89%| | 70/79 [00:03<00:00, 24.28it/s]
 92%|| 73/79 [00:03<00:00, 24.28it/s]
 96%|| 76/79 [00:03<00:00, 25.51it/s]
100%|| 79/79 [00:04<00:00, 25.95it/s]
, 23.54it/s]
 70%|   | 55/79 [00:03<00:01, 24.00it/s]
 73%|  | 58/79 [00:03<00:00, 24.61it/s]
 77%|  | 61/79 [00:03<00:00, 24.35it/s]
 81%|  | 64/79 [00:03<00:00, 24.23it/s]
 85%| | 67/79 [00:03<00:00, 24.43it/s]
 89%| | 70/79 [00:03<00:00, 24.39it/s]
 92%|| 73/79 [00:03<00:00, 24.52it/s]
 96%|| 76/79 [00:03<00:00, 25.28it/s]
100%|| 79/79 [00:04<00:00, 26.13it/s]
30it/s]
 68%|   | 54/79 [00:03<00:01, 23.96it/s]
 72%|  | 57/79 [00:03<00:00, 24.13it/s]
 76%|  | 60/79 [00:03<00:00, 24.09it/s]
 80%|  | 63/79 [00:03<00:00, 24.27it/s]
 84%| | 66/79 [00:03<00:00, 24.39it/s]
 87%| | 69/79 [00:03<00:00, 24.38it/s]
 91%| | 72/79 [00:03<00:00, 24.53it/s]
 95%|| 75/79 [00:03<00:00, 25.39it/s]
 99%|| 78/79 [00:04<00:00, 26.04it/s]
100%|| 79/79 [00:04<00:00, 18.89it/s]
2020-06-23 15:43:58,723 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.245520 (0.02717133026123047 s / img per device, on 32 devices)
2020-06-23 15:43:58,743 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:43:58,743 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:43:58,761 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592952245767, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 12, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592952245768, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 12}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 15:44:07,192 maskrcnn_benchmark.trainer INFO: eta: 1:03:18  iter: 10100  loss: 0.5590 (0.7429)  loss_classifier: 0.1977 (0.2714)  loss_box_reg: 0.0916 (0.1198)  loss_mask: 0.2542 (0.2953)  loss_objectness: 0.0162 (0.0362)  loss_rpn_box_reg: 0.0105 (0.0202)  time: 0.1091 (0.1270)  data: 0.0015 (0.0187)  lr: 0.016000  max mem: 5140
2020-06-23 15:44:09,383 maskrcnn_benchmark.trainer INFO: eta: 1:03:14  iter: 10120  loss: 0.6080 (0.7426)  loss_classifier: 0.2070 (0.2713)  loss_box_reg: 0.1006 (0.1198)  loss_mask: 0.2442 (0.2952)  loss_objectness: 0.0157 (0.0362)  loss_rpn_box_reg: 0.0076 (0.0202)  time: 0.1086 (0.1270)  data: 0.0015 (0.0187)  lr: 0.016000  max mem: 5140
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 15:44:11,585 maskrcnn_benchmark.trainer INFO: eta: 1:03:11  iter: 10140  loss: 0.5774 (0.7423)  loss_classifier: 0.1903 (0.2712)  loss_box_reg: 0.0820 (0.1197)  loss_mask: 0.2724 (0.2951)  loss_objectness: 0.0216 (0.0362)  loss_rpn_box_reg: 0.0082 (0.0201)  time: 0.1096 (0.1270)  data: 0.0015 (0.0186)  lr: 0.016000  max mem: 5140
DONE (t=0.57s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.46s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36615
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.57930
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.39707
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20889
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.39586
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47532
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30576
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.48343
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.50727
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.31627
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.54502
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.63711
2020-06-23 15:44:13,779 maskrcnn_benchmark.trainer INFO: eta: 1:03:07  iter: 10160  loss: 0.5619 (0.7420)  loss_classifier: 0.1800 (0.2710)  loss_box_reg: 0.0846 (0.1197)  loss_mask: 0.2547 (0.2950)  loss_objectness: 0.0148 (0.0361)  loss_rpn_box_reg: 0.0061 (0.0201)  time: 0.1096 (0.1269)  data: 0.0016 (0.0186)  lr: 0.016000  max mem: 5140
2020-06-23 15:44:15,984 maskrcnn_benchmark.trainer INFO: eta: 1:03:04  iter: 10180  loss: 0.5533 (0.7417)  loss_classifier: 0.1731 (0.2709)  loss_box_reg: 0.0904 (0.1197)  loss_mask: 0.2533 (0.2949)  loss_objectness: 0.0131 (0.0361)  loss_rpn_box_reg: 0.0109 (0.0201)  time: 0.1095 (0.1269)  data: 0.0016 (0.0186)  lr: 0.016000  max mem: 5140
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:44:18,172 maskrcnn_benchmark.trainer INFO: eta: 1:03:00  iter: 10200  loss: 0.6174 (0.7415)  loss_classifier: 0.2166 (0.2708)  loss_box_reg: 0.1179 (0.1196)  loss_mask: 0.2653 (0.2949)  loss_objectness: 0.0182 (0.0361)  loss_rpn_box_reg: 0.0097 (0.0201)  time: 0.1100 (0.1269)  data: 0.0014 (0.0185)  lr: 0.016000  max mem: 5140
DONE (t=1.51s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:44:20,379 maskrcnn_benchmark.trainer INFO: eta: 1:02:57  iter: 10220  loss: 0.5747 (0.7412)  loss_classifier: 0.1857 (0.2706)  loss_box_reg: 0.0711 (0.1196)  loss_mask: 0.2219 (0.2947)  loss_objectness: 0.0151 (0.0361)  loss_rpn_box_reg: 0.0070 (0.0201)  time: 0.1099 (0.1268)  data: 0.0014 (0.0185)  lr: 0.016000  max mem: 5140
DONE (t=2.44s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.33644
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.54853
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.35618
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15233
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36309
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49631
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28964
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.44714
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.46708
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27061
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50715
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.61279
2020-06-23 15:44:22,476 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3661471508670396, segm mAP: 0.3364364873990914
:::MLLOG {"namespace": "", "time_ms": 1592952262476, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.3661471508670396, "SEGM": 0.3364364873990914}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1592952262477, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 11}}
2020-06-23 15:44:22,694 maskrcnn_benchmark.trainer INFO: eta: 1:02:53  iter: 10240  loss: 0.5654 (0.7408)  loss_classifier: 0.1749 (0.2705)  loss_box_reg: 0.0888 (0.1195)  loss_mask: 0.2461 (0.2947)  loss_objectness: 0.0169 (0.0360)  loss_rpn_box_reg: 0.0102 (0.0201)  time: 0.1087 (0.1268)  data: 0.0015 (0.0185)  lr: 0.016000  max mem: 5140
2020-06-23 15:44:24,909 maskrcnn_benchmark.trainer INFO: eta: 1:02:50  iter: 10260  loss: 0.5769 (0.7405)  loss_classifier: 0.2060 (0.2703)  loss_box_reg: 0.0912 (0.1195)  loss_mask: 0.2391 (0.2946)  loss_objectness: 0.0115 (0.0360)  loss_rpn_box_reg: 0.0068 (0.0201)  time: 0.1104 (0.1268)  data: 0.0014 (0.0184)  lr: 0.016000  max mem: 5140
2020-06-23 15:44:27,100 maskrcnn_benchmark.trainer INFO: eta: 1:02:46  iter: 10280  loss: 0.5731 (0.7401)  loss_classifier: 0.2012 (0.2701)  loss_box_reg: 0.0871 (0.1194)  loss_mask: 0.2449 (0.2945)  loss_objectness: 0.0113 (0.0360)  loss_rpn_box_reg: 0.0075 (0.0201)  time: 0.1090 (0.1267)  data: 0.0014 (0.0184)  lr: 0.016000  max mem: 5140
2020-06-23 15:44:29,308 maskrcnn_benchmark.trainer INFO: eta: 1:02:43  iter: 10300  loss: 0.6157 (0.7399)  loss_classifier: 0.2034 (0.2700)  loss_box_reg: 0.1096 (0.1194)  loss_mask: 0.2575 (0.2944)  loss_objectness: 0.0156 (0.0360)  loss_rpn_box_reg: 0.0090 (0.0201)  time: 0.1091 (0.1267)  data: 0.0014 (0.0184)  lr: 0.016000  max mem: 5140
2020-06-23 15:44:31,508 maskrcnn_benchmark.trainer INFO: eta: 1:02:39  iter: 10320  loss: 0.5229 (0.7395)  loss_classifier: 0.1655 (0.2699)  loss_box_reg: 0.1023 (0.1194)  loss_mask: 0.2198 (0.2943)  loss_objectness: 0.0093 (0.0359)  loss_rpn_box_reg: 0.0085 (0.0201)  time: 0.1092 (0.1267)  data: 0.0015 (0.0183)  lr: 0.016000  max mem: 5140
2020-06-23 15:44:33,698 maskrcnn_benchmark.trainer INFO: eta: 1:02:36  iter: 10340  loss: 0.5172 (0.7391)  loss_classifier: 0.1698 (0.2697)  loss_box_reg: 0.0792 (0.1193)  loss_mask: 0.2284 (0.2941)  loss_objectness: 0.0120 (0.0359)  loss_rpn_box_reg: 0.0100 (0.0201)  time: 0.1095 (0.1266)  data: 0.0015 (0.0183)  lr: 0.016000  max mem: 5140
2020-06-23 15:44:35,904 maskrcnn_benchmark.trainer INFO: eta: 1:02:32  iter: 10360  loss: 0.4438 (0.7386)  loss_classifier: 0.1431 (0.2695)  loss_box_reg: 0.0668 (0.1192)  loss_mask: 0.2262 (0.2940)  loss_objectness: 0.0119 (0.0359)  loss_rpn_box_reg: 0.0059 (0.0201)  time: 0.1095 (0.1266)  data: 0.0014 (0.0183)  lr: 0.016000  max mem: 5140
2020-06-23 15:44:38,077 maskrcnn_benchmark.trainer INFO: eta: 1:02:29  iter: 10380  loss: 0.4707 (0.7382)  loss_classifier: 0.1603 (0.2693)  loss_box_reg: 0.0623 (0.1191)  loss_mask: 0.2371 (0.2939)  loss_objectness: 0.0127 (0.0358)  loss_rpn_box_reg: 0.0062 (0.0201)  time: 0.1083 (0.1266)  data: 0.0015 (0.0182)  lr: 0.016000  max mem: 5140
2020-06-23 15:44:40,280 maskrcnn_benchmark.trainer INFO: eta: 1:02:25  iter: 10400  loss: 0.5770 (0.7379)  loss_classifier: 0.1783 (0.2691)  loss_box_reg: 0.1065 (0.1191)  loss_mask: 0.2562 (0.2938)  loss_objectness: 0.0148 (0.0358)  loss_rpn_box_reg: 0.0095 (0.0201)  time: 0.1102 (0.1265)  data: 0.0014 (0.0182)  lr: 0.016000  max mem: 5140
2020-06-23 15:44:42,486 maskrcnn_benchmark.trainer INFO: eta: 1:02:22  iter: 10420  loss: 0.5245 (0.7375)  loss_classifier: 0.1695 (0.2690)  loss_box_reg: 0.0921 (0.1191)  loss_mask: 0.2388 (0.2937)  loss_objectness: 0.0132 (0.0358)  loss_rpn_box_reg: 0.0086 (0.0200)  time: 0.1096 (0.1265)  data: 0.0015 (0.0182)  lr: 0.016000  max mem: 5140
2020-06-23 15:44:44,678 maskrcnn_benchmark.trainer INFO: eta: 1:02:18  iter: 10440  loss: 0.5148 (0.7372)  loss_classifier: 0.1538 (0.2688)  loss_box_reg: 0.0844 (0.1190)  loss_mask: 0.2474 (0.2937)  loss_objectness: 0.0139 (0.0357)  loss_rpn_box_reg: 0.0063 (0.0200)  time: 0.1094 (0.1265)  data: 0.0015 (0.0182)  lr: 0.016000  max mem: 5140
2020-06-23 15:44:46,881 maskrcnn_benchmark.trainer INFO: eta: 1:02:15  iter: 10460  loss: 0.5228 (0.7369)  loss_classifier: 0.1685 (0.2686)  loss_box_reg: 0.0952 (0.1190)  loss_mask: 0.2434 (0.2936)  loss_objectness: 0.0118 (0.0357)  loss_rpn_box_reg: 0.0091 (0.0200)  time: 0.1098 (0.1265)  data: 0.0015 (0.0181)  lr: 0.016000  max mem: 5140
2020-06-23 15:44:49,067 maskrcnn_benchmark.trainer INFO: eta: 1:02:11  iter: 10480  loss: 0.5317 (0.7365)  loss_classifier: 0.1750 (0.2685)  loss_box_reg: 0.0944 (0.1189)  loss_mask: 0.2471 (0.2935)  loss_objectness: 0.0145 (0.0357)  loss_rpn_box_reg: 0.0059 (0.0200)  time: 0.1092 (0.1264)  data: 0.0015 (0.0181)  lr: 0.016000  max mem: 5140
2020-06-23 15:44:51,242 maskrcnn_benchmark.trainer INFO: eta: 1:02:08  iter: 10500  loss: 0.5275 (0.7361)  loss_classifier: 0.1671 (0.2683)  loss_box_reg: 0.0805 (0.1188)  loss_mask: 0.2348 (0.2934)  loss_objectness: 0.0119 (0.0356)  loss_rpn_box_reg: 0.0053 (0.0200)  time: 0.1092 (0.1264)  data: 0.0015 (0.0181)  lr: 0.016000  max mem: 5140
2020-06-23 15:44:53,432 maskrcnn_benchmark.trainer INFO: eta: 1:02:04  iter: 10520  loss: 0.5681 (0.7358)  loss_classifier: 0.1910 (0.2681)  loss_box_reg: 0.0887 (0.1188)  loss_mask: 0.2403 (0.2933)  loss_objectness: 0.0183 (0.0356)  loss_rpn_box_reg: 0.0105 (0.0200)  time: 0.1089 (0.1264)  data: 0.0015 (0.0180)  lr: 0.016000  max mem: 5140
2020-06-23 15:44:55,627 maskrcnn_benchmark.trainer INFO: eta: 1:02:01  iter: 10540  loss: 0.5286 (0.7354)  loss_classifier: 0.1487 (0.2679)  loss_box_reg: 0.0840 (0.1187)  loss_mask: 0.2325 (0.2932)  loss_objectness: 0.0109 (0.0356)  loss_rpn_box_reg: 0.0046 (0.0200)  time: 0.1099 (0.1263)  data: 0.0015 (0.0180)  lr: 0.016000  max mem: 5140
2020-06-23 15:44:57,825 maskrcnn_benchmark.trainer INFO: eta: 1:01:58  iter: 10560  loss: 0.4877 (0.7350)  loss_classifier: 0.1424 (0.2677)  loss_box_reg: 0.0707 (0.1187)  loss_mask: 0.2464 (0.2931)  loss_objectness: 0.0080 (0.0355)  loss_rpn_box_reg: 0.0057 (0.0200)  time: 0.1094 (0.1263)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:00,023 maskrcnn_benchmark.trainer INFO: eta: 1:01:54  iter: 10580  loss: 0.5125 (0.7346)  loss_classifier: 0.1590 (0.2676)  loss_box_reg: 0.0784 (0.1186)  loss_mask: 0.2378 (0.2930)  loss_objectness: 0.0112 (0.0355)  loss_rpn_box_reg: 0.0055 (0.0199)  time: 0.1096 (0.1263)  data: 0.0015 (0.0179)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:02,242 maskrcnn_benchmark.trainer INFO: eta: 1:01:51  iter: 10600  loss: 0.4743 (0.7343)  loss_classifier: 0.1508 (0.2674)  loss_box_reg: 0.0821 (0.1186)  loss_mask: 0.2476 (0.2929)  loss_objectness: 0.0152 (0.0355)  loss_rpn_box_reg: 0.0089 (0.0199)  time: 0.1105 (0.1262)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:04,420 maskrcnn_benchmark.trainer INFO: eta: 1:01:47  iter: 10620  loss: 0.5204 (0.7339)  loss_classifier: 0.1754 (0.2672)  loss_box_reg: 0.0767 (0.1185)  loss_mask: 0.2314 (0.2928)  loss_objectness: 0.0187 (0.0355)  loss_rpn_box_reg: 0.0061 (0.0199)  time: 0.1086 (0.1262)  data: 0.0015 (0.0179)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:06,607 maskrcnn_benchmark.trainer INFO: eta: 1:01:44  iter: 10640  loss: 0.4969 (0.7335)  loss_classifier: 0.1567 (0.2671)  loss_box_reg: 0.0843 (0.1184)  loss_mask: 0.2391 (0.2927)  loss_objectness: 0.0148 (0.0354)  loss_rpn_box_reg: 0.0063 (0.0199)  time: 0.1095 (0.1262)  data: 0.0014 (0.0178)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:08,814 maskrcnn_benchmark.trainer INFO: eta: 1:01:40  iter: 10660  loss: 0.6182 (0.7334)  loss_classifier: 0.2334 (0.2670)  loss_box_reg: 0.1094 (0.1184)  loss_mask: 0.2574 (0.2926)  loss_objectness: 0.0169 (0.0354)  loss_rpn_box_reg: 0.0068 (0.0199)  time: 0.1092 (0.1261)  data: 0.0015 (0.0178)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:11,010 maskrcnn_benchmark.trainer INFO: eta: 1:01:37  iter: 10680  loss: 0.4980 (0.7330)  loss_classifier: 0.1691 (0.2668)  loss_box_reg: 0.0880 (0.1184)  loss_mask: 0.2399 (0.2925)  loss_objectness: 0.0110 (0.0354)  loss_rpn_box_reg: 0.0066 (0.0199)  time: 0.1093 (0.1261)  data: 0.0014 (0.0178)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:13,200 maskrcnn_benchmark.trainer INFO: eta: 1:01:34  iter: 10700  loss: 0.5629 (0.7328)  loss_classifier: 0.1949 (0.2667)  loss_box_reg: 0.0852 (0.1184)  loss_mask: 0.2469 (0.2925)  loss_objectness: 0.0176 (0.0354)  loss_rpn_box_reg: 0.0117 (0.0199)  time: 0.1092 (0.1261)  data: 0.0015 (0.0177)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:15,395 maskrcnn_benchmark.trainer INFO: eta: 1:01:30  iter: 10720  loss: 0.5780 (0.7326)  loss_classifier: 0.1831 (0.2666)  loss_box_reg: 0.0963 (0.1183)  loss_mask: 0.2750 (0.2924)  loss_objectness: 0.0166 (0.0353)  loss_rpn_box_reg: 0.0052 (0.0199)  time: 0.1093 (0.1260)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:17,596 maskrcnn_benchmark.trainer INFO: eta: 1:01:27  iter: 10740  loss: 0.5655 (0.7324)  loss_classifier: 0.2013 (0.2665)  loss_box_reg: 0.0939 (0.1183)  loss_mask: 0.2598 (0.2924)  loss_objectness: 0.0151 (0.0353)  loss_rpn_box_reg: 0.0131 (0.0199)  time: 0.1103 (0.1260)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:19,789 maskrcnn_benchmark.trainer INFO: eta: 1:01:23  iter: 10760  loss: 0.4906 (0.7320)  loss_classifier: 0.1557 (0.2664)  loss_box_reg: 0.0662 (0.1183)  loss_mask: 0.2361 (0.2923)  loss_objectness: 0.0169 (0.0353)  loss_rpn_box_reg: 0.0070 (0.0199)  time: 0.1095 (0.1260)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:21,998 maskrcnn_benchmark.trainer INFO: eta: 1:01:20  iter: 10780  loss: 0.5622 (0.7318)  loss_classifier: 0.1783 (0.2662)  loss_box_reg: 0.0862 (0.1182)  loss_mask: 0.2525 (0.2922)  loss_objectness: 0.0135 (0.0353)  loss_rpn_box_reg: 0.0065 (0.0199)  time: 0.1093 (0.1260)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:24,201 maskrcnn_benchmark.trainer INFO: eta: 1:01:17  iter: 10800  loss: 0.6006 (0.7316)  loss_classifier: 0.1964 (0.2661)  loss_box_reg: 0.0986 (0.1182)  loss_mask: 0.2668 (0.2922)  loss_objectness: 0.0190 (0.0353)  loss_rpn_box_reg: 0.0114 (0.0199)  time: 0.1101 (0.1259)  data: 0.0015 (0.0176)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:26,401 maskrcnn_benchmark.trainer INFO: eta: 1:01:13  iter: 10820  loss: 0.5153 (0.7313)  loss_classifier: 0.1847 (0.2659)  loss_box_reg: 0.0781 (0.1182)  loss_mask: 0.2480 (0.2921)  loss_objectness: 0.0167 (0.0352)  loss_rpn_box_reg: 0.0072 (0.0199)  time: 0.1095 (0.1259)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:28,593 maskrcnn_benchmark.trainer INFO: eta: 1:01:10  iter: 10840  loss: 0.5234 (0.7310)  loss_classifier: 0.1759 (0.2658)  loss_box_reg: 0.0909 (0.1181)  loss_mask: 0.2572 (0.2920)  loss_objectness: 0.0125 (0.0352)  loss_rpn_box_reg: 0.0114 (0.0199)  time: 0.1088 (0.1259)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:30,785 maskrcnn_benchmark.trainer INFO: eta: 1:01:06  iter: 10860  loss: 0.6013 (0.7308)  loss_classifier: 0.2043 (0.2657)  loss_box_reg: 0.1114 (0.1181)  loss_mask: 0.2715 (0.2919)  loss_objectness: 0.0128 (0.0352)  loss_rpn_box_reg: 0.0084 (0.0199)  time: 0.1101 (0.1258)  data: 0.0015 (0.0175)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:32,958 maskrcnn_benchmark.trainer INFO: eta: 1:01:03  iter: 10880  loss: 0.5982 (0.7305)  loss_classifier: 0.1971 (0.2656)  loss_box_reg: 0.0785 (0.1181)  loss_mask: 0.2553 (0.2919)  loss_objectness: 0.0158 (0.0352)  loss_rpn_box_reg: 0.0078 (0.0199)  time: 0.1085 (0.1258)  data: 0.0015 (0.0175)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:35,157 maskrcnn_benchmark.trainer INFO: eta: 1:01:00  iter: 10900  loss: 0.4921 (0.7302)  loss_classifier: 0.1580 (0.2654)  loss_box_reg: 0.0919 (0.1180)  loss_mask: 0.2302 (0.2918)  loss_objectness: 0.0135 (0.0351)  loss_rpn_box_reg: 0.0080 (0.0199)  time: 0.1097 (0.1258)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:37,341 maskrcnn_benchmark.trainer INFO: eta: 1:00:56  iter: 10920  loss: 0.5319 (0.7299)  loss_classifier: 0.2121 (0.2653)  loss_box_reg: 0.0857 (0.1180)  loss_mask: 0.2328 (0.2917)  loss_objectness: 0.0123 (0.0351)  loss_rpn_box_reg: 0.0058 (0.0199)  time: 0.1093 (0.1257)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:39,520 maskrcnn_benchmark.trainer INFO: eta: 1:00:53  iter: 10940  loss: 0.5586 (0.7296)  loss_classifier: 0.1377 (0.2651)  loss_box_reg: 0.0825 (0.1179)  loss_mask: 0.2342 (0.2916)  loss_objectness: 0.0159 (0.0351)  loss_rpn_box_reg: 0.0078 (0.0199)  time: 0.1090 (0.1257)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:41,721 maskrcnn_benchmark.trainer INFO: eta: 1:00:50  iter: 10960  loss: 0.5000 (0.7293)  loss_classifier: 0.1768 (0.2650)  loss_box_reg: 0.0919 (0.1179)  loss_mask: 0.2463 (0.2915)  loss_objectness: 0.0143 (0.0351)  loss_rpn_box_reg: 0.0056 (0.0198)  time: 0.1101 (0.1257)  data: 0.0015 (0.0174)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:43,894 maskrcnn_benchmark.trainer INFO: eta: 1:00:46  iter: 10980  loss: 0.5926 (0.7290)  loss_classifier: 0.1956 (0.2648)  loss_box_reg: 0.1066 (0.1179)  loss_mask: 0.2618 (0.2915)  loss_objectness: 0.0196 (0.0350)  loss_rpn_box_reg: 0.0067 (0.0198)  time: 0.1086 (0.1257)  data: 0.0015 (0.0173)  lr: 0.016000  max mem: 5140
2020-06-23 15:45:46,083 maskrcnn_benchmark.trainer INFO: eta: 1:00:43  iter: 11000  loss: 0.4806 (0.7287)  loss_classifier: 0.1431 (0.2647)  loss_box_reg: 0.0796 (0.1178)  loss_mask: 0.2157 (0.2914)  loss_objectness: 0.0167 (0.0350)  loss_rpn_box_reg: 0.0086 (0.0198)  time: 0.1092 (0.1256)  data: 0.0015 (0.0173)  lr: 0.016000  max mem: 5140
:::MLLOG {"namespace": "", "time_ms": 1592952346519, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 12}}
:::MLLOG {"namespace": "", "time_ms": 1592952346519, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 12}}
:::MLLOG {"namespace": "", "time_ms": 1592952346520, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 12}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
2020-06-23 15:45:46,711 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
Done (t=0.27s)
creating index...
creating index...
index created!
Done (t=0.28s)
Done (t=0.28s)
creating index...
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
2020-06-23 15:45:47,008 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.24it/s]
  4%|         | 3/79 [00:00<00:44,  1.72it/s]
  8%|         | 6/79 [00:01<00:30,  2.38it/s]
 11%|        | 9/79 [00:01<00:21,  3.27it/s]
 15%|        | 12/79 [00:01<00:15,  4.42it/s]
 19%|        | 15/79 [00:01<00:10,  5.87it/s]
 23%|       | 18/79 [00:01<00:07,  7.64it/s]
 27%|       | 21/79 [00:01<00:06,  9.65it/s]
 30%|       | 24/79 [00:01<00:04, 11.80it/s]
 34%|      | 27/79 [00:01<00:03, 14.11it/s]
 38%|      | 30/79 [00:01<00:03, 16.24it/s]
 42%|     | 33/79 [00:02<00:02, 18.19it/s]
 46%|     | 36/79 [00:02<00:02, 19.85it/s]
 49%|     | 39/79 [00:02<00:01, 21.15it/s]
 53%|    | 42/79 [00:02<00:01, 22.27it/s]
 57%|    | 45/79 [00:02<00:01, 23.01it/s]
 61%|    | 48/79 [00:02<00:01, 23.81it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  4%|         | 3/79 [00:00<00:43,  1.73it/s]
  8%|         | 6/79 [00:01<00:30,  2.39it/s]
 11%|        | 9/79 [00:01<00:21,  3.29it/s]
 15%|        | 12/79 [00:01<00:15,  4.46it/s]
 19%|        | 15/79 [00:01<00:10,  5.92it/s]
 23%|       | 18/79 [00:01<00:07,  7.68it/s]
 27%|       | 21/79 [00:01<00:05,  9.69it/s]
 30%|       | 24/79 [00:01<00:04, 11.89it/s]
 34%|      | 27/79 [00:01<00:03, 14.13it/s]
 38%|      | 30/79 [00:01<00:03, 16.30it/s]
 42%|     | 33/79 [00:02<00:02, 18.22it/s]
 46%|     | 36/79 [00:02<00:02, 20.00it/s]
 49%|     | 39/79 [00:02<00:01, 21.07it/s]
 53%|    | 42/79 [00:02<00:01, 22.11it/s]
 57%|    | 45/79 [00:02<00:01, 22.81it/s]
 61%|    | 48/79 [00:02<00:01, 23.28it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:58,  1.33it/s]
  5%|         | 4/79 [00:00<00:40,  1.86it/s]
  9%|         | 7/79 [00:01<00:28,  2.57it/s]
 13%|        | 10/79 [00:01<00:19,  3.51it/s]
 16%|        | 13/79 [00:01<00:13,  4.72it/s]
 20%|        | 16/79 [00:01<00:10,  6.23it/s]
 24%|       | 19/79 [00:01<00:07,  8.00it/s]
 28%|       | 22/79 [00:01<00:05, 10.06it/s]
 32%|      | 25/79 [00:01<00:04, 12.14it/s]
 35%|      | 28/79 [00:01<00:03, 14.37it/s]
 39%|      | 31/79 [00:01<00:02, 16.40it/s]
 43%|     | 34/79 [00:02<00:02, 18.17it/s]
 47%|     | 37/79 [00:02<00:02, 19.59it/s]
 51%|     | 40/79 [00:02<00:01, 20.84it/s]
 54%|    | 43/79 [00:02<00:01, 21.96it/s]
 58%|    | 46/79 [00:02<00:01, 22.65it/s]
 62%|   | 49/79 [00:02<00:01, 23.22it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  4%|         | 3/79 [00:00<00:45,  1.66it/s]
  8%|         | 6/79 [00:01<00:31,  2.31it/s]
 11%|        | 9/79 [00:01<00:22,  3.17it/s]
 15%|        | 12/79 [00:01<00:15,  4.30it/s]
 19%|        | 15/79 [00:01<00:11,  5.73it/s]
 23%|       | 18/79 [00:01<00:08,  7.50it/s]
 27%|       | 21/79 [00:01<00:06,  9.49it/s]
 30%|       | 24/79 [00:01<00:04, 11.69it/s]
 34%|      | 27/79 [00:01<00:03, 14.03it/s]
 38%|      | 30/79 [00:02<00:03, 16.04it/s]
 42%|     | 33/79 [00:02<00:02, 17.87it/s]
 46%|     | 36/79 [00:02<00:02, 19.43it/s]
 49%|     | 39/79 [00:02<00:01, 20.87it/s]
 53%|    | 42/79 [00:02<00:01, 21.78it/s]
 57%|    | 45/79 [00:02<00:01, 22.72it/s]
 61%|    | 48/79 [00:02<00:01, 23.07it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.42it/s]
 32%|      | 25/79 [00:01<00:04, 11.63it/s]
 35%|      | 28/79 [00:01<00:03, 13.93it/s]
 39%|      | 31/79 [00:02<00:02, 16.22it/s]
 43%|     | 34/79 [00:02<00:02, 18.22it/s]
 47%|     | 37/79 [00:02<00:02, 20.01it/s]
 51%|     | 40/79 [00:02<00:01, 21.30it/s]
 54%|    | 43/79 [00:02<00:01, 22.32it/s]
 58%|    | 46/79 [00:02<00:01, 23.21it/s]
 62%|   | 49/79 [00:02<00:01, 23.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  4%|         | 3/79 [00:00<00:45,  1.67it/s]
  8%|         | 6/79 [00:01<00:31,  2.32it/s]
 11%|        | 9/79 [00:01<00:21,  3.19it/s]
 15%|        | 12/79 [00:01<00:15,  4.31it/s]
 19%|        | 15/79 [00:01<00:11,  5.75it/s]
 23%|       | 18/79 [00:01<00:08,  7.46it/s]
 27%|       | 21/79 [00:01<00:06,  9.44it/s]
 30%|       | 24/79 [00:01<00:04, 11.53it/s]
 34%|      | 27/79 [00:01<00:03, 13.72it/s]
 38%|      | 30/79 [00:02<00:03, 15.82it/s]
 42%|     | 33/79 [00:02<00:02, 17.74it/s]
 46%|     | 36/79 [00:02<00:02, 19.37it/s]
 49%|     | 39/79 [00:02<00:01, 20.78it/s]
 53%|    | 42/79 [00:02<00:01, 21.73it/s]
 57%|    | 45/79 [00:02<00:01, 22.43it/s]
 61%|    | 48/79 [00:02<00:01, 22.86it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.86it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.59it/s]
 32%|      | 25/79 [00:01<00:04, 11.80it/s]
 35%|      | 28/79 [00:01<00:03, 14.06it/s]
 39%|      | 31/79 [00:02<00:02, 16.26it/s]
 43%|     | 34/79 [00:02<00:02, 18.20it/s]
 47%|     | 37/79 [00:02<00:02, 19.97it/s]
 51%|     | 40/79 [00:02<00:01, 20.92it/s]
 54%|    | 43/79 [00:02<00:01, 22.09it/s]
 58%|    | 46/79 [00:02<00:01, 22.72it/s]
 62%|   | 49/79 [00:02<00:01, 23.28it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:05,  9.53it/s]
 32%|      | 25/79 [00:01<00:04, 11.74it/s]
 35%|      | 28/79 [00:01<00:03, 14.01it/s]
 39%|      | 31/79 [00:02<00:02, 16.24it/s]
 43%|     | 34/79 [00:02<00:02, 18.27it/s]
 47%|     | 37/79 [00:02<00:02, 19.96it/s]
 51%|     | 40/79 [00:02<00:01, 21.37it/s]
 54%|    | 43/79 [00:02<00:01, 22.52it/s]
 58%|    | 46/79 [00:02<00:01, 23.21it/s]
 62%|   | 49/79 [00:02<00:01, 23.61it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.36it/s]
 28%|       | 22/79 [00:01<00:06,  9.34it/s]
 32%|      | 25/79 [00:01<00:04, 11.54it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:03, 16.00it/s]
 43%|     | 34/79 [00:02<00:02, 18.04it/s]
 47%|     | 37/79 [00:02<00:02, 19.66it/s]
 51%|     | 40/79 [00:02<00:01, 21.09it/s]
 54%|    | 43/79 [00:02<00:01, 22.23it/s]
 58%|    | 46/79 [00:02<00:01, 23.30it/s]
 62%|   | 49/79 [00:02<00:01, 23.71it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.46it/s]
 28%|       | 22/79 [00:01<00:06,  9.42it/s]
 32%|      | 25/79 [00:01<00:04, 11.67it/s]
 35%|      | 28/79 [00:01<00:03, 13.92it/s]
 39%|      | 31/79 [00:02<00:02, 16.05it/s]
 43%|     | 34/79 [00:02<00:02, 17.98it/s]
 47%|     | 37/79 [00:02<00:02, 19.75it/s]
 51%|     | 40/79 [00:02<00:01, 21.18it/s]
 54%|    | 43/79 [00:02<00:01, 22.19it/s]
 58%|    | 46/79 [00:02<00:01, 23.14it/s]
 62%|   | 49/79 [00:02<00:01, 23.83it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.36it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.54it/s]
 28%|       | 22/79 [00:01<00:06,  9.47it/s]
 32%|      | 25/79 [00:01<00:04, 11.68it/s]
 35%|      | 28/79 [00:01<00:03, 13.91it/s]
 39%|      | 31/79 [00:02<00:02, 16.11it/s]
 43%|     | 34/79 [00:02<00:02, 18.04it/s]
 47%|     | 37/79 [00:02<00:02, 19.79it/s]
 51%|     | 40/79 [00:02<00:01, 21.02it/s]
 54%|    | 43/79 [00:02<00:01, 21.89it/s]
 58%|    | 46/79 [00:02<00:01, 22.44it/s]
 62%|   | 49/79 [00:02<00:01, 23.28it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.17it/s]
 20%|        | 16/79 [00:01<00:11,  5.57it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.23it/s]
 32%|      | 25/79 [00:01<00:04, 11.39it/s]
 35%|      | 28/79 [00:01<00:03, 13.66it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.79it/s]
 47%|     | 37/79 [00:02<00:02, 19.52it/s]
 51%|     | 40/79 [00:02<00:01, 20.95it/s]
 54%|    | 43/79 [00:02<00:01, 21.91it/s]
 58%|    | 46/79 [00:02<00:01, 22.78it/s]
 62%|   | 49/79 [00:02<00:01, 23.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.39it/s]
 32%|      | 25/79 [00:01<00:04, 11.53it/s]
 35%|      | 28/79 [00:01<00:03, 13.84it/s]
 39%|      | 31/79 [00:02<00:03, 15.90it/s]
 43%|     | 34/79 [00:02<00:02, 17.88it/s]
 47%|     | 37/79 [00:02<00:02, 19.46it/s]
 51%|     | 40/79 [00:02<00:01, 20.92it/s]
 54%|    | 43/79 [00:02<00:01, 21.88it/s]
 58%|    | 46/79 [00:02<00:01, 22.87it/s]
 62%|   | 49/79 [00:02<00:01, 23.53it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.57it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.42it/s]
 35%|      | 28/79 [00:01<00:03, 13.63it/s]
 39%|      | 31/79 [00:02<00:03, 15.87it/s]
 43%|     | 34/79 [00:02<00:02, 17.79it/s]
 47%|     | 37/79 [00:02<00:02, 19.56it/s]
 51%|     | 40/79 [00:02<00:01, 21.05it/s]
 54%|    | 43/79 [00:02<00:01, 21.92it/s]
 58%|    | 46/79 [00:02<00:01, 22.59it/s]
 62%|   | 49/79 [00:02<00:01, 23.14it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  4%|         | 3/79 [00:00<00:46,  1.65it/s]
  8%|         | 6/79 [00:01<00:31,  2.29it/s]
 11%|        | 9/79 [00:01<00:22,  3.15it/s]
 15%|        | 12/79 [00:01<00:15,  4.27it/s]
 19%|        | 15/79 [00:01<00:11,  5.68it/s]
 23%|       | 18/79 [00:01<00:08,  7.38it/s]
 27%|       | 21/79 [00:01<00:06,  9.37it/s]
 30%|       | 24/79 [00:01<00:04, 11.52it/s]
 34%|      | 27/79 [00:01<00:03, 13.66it/s]
 38%|      | 30/79 [00:02<00:03, 15.84it/s]
 42%|     | 33/79 [00:02<00:02, 17.54it/s]
 46%|     | 36/79 [00:02<00:02, 19.27it/s]
 49%|     | 39/79 [00:02<00:01, 20.24it/s]
 53%|    | 42/79 [00:02<00:01, 21.43it/s]
 57%|    | 45/79 [00:02<00:01, 22.21it/s]
 61%|    | 48/79 [00:02<00:01, 22.87it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  4%|         | 3/79 [00:01<00:49,  1.53it/s]
  8%|         | 6/79 [00:01<00:34,  2.14it/s]
 11%|        | 9/79 [00:01<00:23,  2.94it/s]
 15%|        | 12/79 [00:01<00:16,  4.00it/s]
 19%|        | 15/79 [00:01<00:11,  5.36it/s]
 23%|       | 18/79 [00:01<00:08,  7.01it/s]
 27%|       | 21/79 [00:01<00:06,  8.96it/s]
 30%|       | 24/79 [00:01<00:04, 11.12it/s]
 34%|      | 27/79 [00:01<00:03, 13.38it/s]
 38%|      | 30/79 [00:02<00:03, 15.65it/s]
 42%|     | 33/79 [00:02<00:02, 17.60it/s]
 46%|     | 36/79 [00:02<00:02, 19.46it/s]
 49%|     | 39/79 [00:02<00:01, 20.84it/s]
 53%|    | 42/79 [00:02<00:01, 22.00it/s]
 57%|    | 45/79 [00:02<00:01, 22.92it/s]
 61%|    | 48/79 [00:02<00:01, 23.48it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  4%|         | 3/79 [00:00<00:47,  1.59it/s]
  8%|         | 6/79 [00:01<00:33,  2.20it/s]
 11%|        | 9/79 [00:01<00:23,  3.03it/s]
 15%|        | 12/79 [00:01<00:16,  4.12it/s]
 19%|        | 15/79 [00:01<00:11,  5.50it/s]
 23%|       | 18/79 [00:01<00:08,  7.18it/s]
 27%|       | 21/79 [00:01<00:06,  9.13it/s]
 30%|       | 24/79 [00:01<00:04, 11.23it/s]
 34%|      | 27/79 [00:01<00:03, 13.46it/s]
 38%|      | 30/79 [00:02<00:03, 15.50it/s]
 42%|     | 33/79 [00:02<00:02, 17.34it/s]
 46%|     | 36/79 [00:02<00:02, 19.09it/s]
 49%|     | 39/79 [00:02<00:01, 20.32it/s]
 53%|    | 42/79 [00:02<00:01, 21.40it/s]
 57%|    | 45/79 [00:02<00:01, 22.42it/s]
 61%|    | 48/79 [00:02<00:01, 23.01it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.28it/s]
 32%|      | 25/79 [00:01<00:04, 11.42it/s]
 35%|      | 28/79 [00:01<00:03, 13.64it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.85it/s]
 47%|     | 37/79 [00:02<00:02, 19.47it/s]
 51%|     | 40/79 [00:02<00:01, 20.81it/s]
 54%|    | 43/79 [00:02<00:01, 22.15it/s]
 58%|    | 46/79 [00:02<00:01, 22.99it/s]
 62%|   | 49/79 [00:02<00:01, 23.20it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  4%|         | 3/79 [00:00<00:45,  1.69it/s]
  8%|         | 6/79 [00:01<00:31,  2.34it/s]
 11%|        | 9/79 [00:01<00:21,  3.21it/s]
 15%|        | 12/79 [00:01<00:15,  4.34it/s]
 19%|        | 15/79 [00:01<00:11,  5.76it/s]
 23%|       | 18/79 [00:01<00:08,  7.45it/s]
 27%|       | 21/79 [00:01<00:06,  9.45it/s]
 30%|       | 24/79 [00:01<00:04, 11.55it/s]
 34%|      | 27/79 [00:01<00:03, 13.66it/s]
 38%|      | 30/79 [00:02<00:03, 15.72it/s]
 42%|     | 33/79 [00:02<00:02, 17.81it/s]
 46%|     | 36/79 [00:02<00:02, 19.19it/s]
 49%|     | 39/79 [00:02<00:01, 20.21it/s]
 53%|    | 42/79 [00:02<00:01, 21.36it/s]
 57%|    | 45/79 [00:02<00:01, 22.10it/s]
 61%|    | 48/79 [00:02<00:01, 22.66it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.17it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.17it/s]
 32%|      | 25/79 [00:01<00:04, 11.29it/s]
 35%|      | 28/79 [00:01<00:03, 13.54it/s]
 39%|      | 31/79 [00:02<00:03, 15.73it/s]
 43%|     | 34/79 [00:02<00:02, 17.57it/s]
 47%|     | 37/79 [00:02<00:02, 19.31it/s]
 51%|     | 40/79 [00:02<00:01, 20.56it/s]
 54%|    | 43/79 [00:02<00:01, 21.69it/s]
 58%|    | 46/79 [00:02<00:01, 22.64it/s]
 62%|   | 49/79 [00:02<00:01, 23.49it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.23it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.33it/s]
 32%|      | 25/79 [00:01<00:04, 11.48it/s]
 35%|      | 28/79 [00:01<00:03, 13.77it/s]
 39%|      | 31/79 [00:02<00:02, 16.01it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.70it/s]
 51%|     | 40/79 [00:02<00:01, 21.05it/s]
 54%|    | 43/79 [00:02<00:01, 22.06it/s]
 58%|    | 46/79 [00:02<00:01, 22.31it/s]
 62%|   | 49/79 [00:02<00:01, 23.13it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  8.98it/s]
 32%|      | 25/79 [00:01<00:04, 11.19it/s]
 35%|      | 28/79 [00:01<00:03, 13.39it/s]
 39%|      | 31/79 [00:02<00:03, 15.66it/s]
 43%|     | 34/79 [00:02<00:02, 17.71it/s]
 47%|     | 37/79 [00:02<00:02, 19.61it/s]
 51%|     | 40/79 [00:02<00:01, 21.13it/s]
 54%|    | 43/79 [00:02<00:01, 22.03it/s]
 58%|    | 46/79 [00:02<00:01, 22.84it/s]
 62%|   | 49/79 [00:02<00:01, 23.51it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.21it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.30it/s]
 35%|      | 28/79 [00:01<00:03, 13.53it/s]
 39%|      | 31/79 [00:02<00:03, 15.63it/s]
 43%|     | 34/79 [00:02<00:02, 17.57it/s]
 47%|     | 37/79 [00:02<00:02, 19.10it/s]
 51%|     | 40/79 [00:02<00:01, 20.42it/s]
 54%|    | 43/79 [00:02<00:01, 21.49it/s]
 58%|    | 46/79 [00:02<00:01, 22.43it/s]
 62%|   | 49/79 [00:02<00:01, 23.18it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.05it/s]
 32%|      | 25/79 [00:01<00:04, 11.22it/s]
 35%|      | 28/79 [00:01<00:03, 13.49it/s]
 39%|      | 31/79 [00:02<00:03, 15.69it/s]
 43%|     | 34/79 [00:02<00:02, 17.66it/s]
 47%|     | 37/79 [00:02<00:02, 19.24it/s]
 51%|     | 40/79 [00:02<00:01, 20.60it/s]
 54%|    | 43/79 [00:02<00:01, 21.70it/s]
 58%|    | 46/79 [00:02<00:01, 22.69it/s]
 62%|   | 49/79 [00:02<00:01, 23.20it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  4%|         | 3/79 [00:00<00:48,  1.57it/s]
  8%|         | 6/79 [00:01<00:33,  2.18it/s]
 11%|        | 9/79 [00:01<00:23,  3.01it/s]
 15%|        | 12/79 [00:01<00:16,  4.08it/s]
 19%|        | 15/79 [00:01<00:11,  5.43it/s]
 23%|       | 18/79 [00:01<00:08,  7.11it/s]
 27%|       | 21/79 [00:01<00:06,  9.06it/s]
 30%|       | 24/79 [00:01<00:04, 11.15it/s]
 34%|      | 27/79 [00:01<00:03, 13.23it/s]
 38%|      | 30/79 [00:02<00:03, 15.41it/s]
 42%|     | 33/79 [00:02<00:02, 17.28it/s]
 46%|     | 36/79 [00:02<00:02, 18.78it/s]
 49%|     | 39/79 [00:02<00:02, 19.89it/s]
 53%|    | 42/79 [00:02<00:01, 21.24it/s]
 57%|    | 45/79 [00:02<00:01, 21.62it/s]
 61%|    | 48/79 [00:02<00:01, 22.16it/s]
 65%|   | 51/79 [00:02<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.17it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.24it/s]
 35%|      | 28/79 [00:01<00:03, 13.42it/s]
 39%|      | 31/79 [00:02<00:03, 15.50it/s]
 43%|     | 34/79 [00:02<00:02, 17.38it/s]
 47%|     | 37/79 [00:02<00:02, 19.02it/s]
 51%|     | 40/79 [00:02<00:01, 20.25it/s]
 54%|    | 43/79 [00:02<00:01, 21.47it/s]
 58%|    | 46/79 [00:02<00:01, 22.02it/s]
 62%|   | 49/79 [00:02<00:01, 22.46it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.89it/s]
 32%|      | 25/79 [00:01<00:04, 11.03it/s]
 35%|      | 28/79 [00:02<00:03, 13.24it/s]
 39%|      | 31/79 [00:02<00:03, 15.49it/s]
 43%|     | 34/79 [00:02<00:02, 17.47it/s]
 47%|     | 37/79 [00:02<00:02, 19.07it/s]
 51%|     | 40/79 [00:02<00:01, 20.52it/s]
 54%|    | 43/79 [00:02<00:01, 21.61it/s]
 58%|    | 46/79 [00:02<00:01, 22.63it/s]
 62%|   | 49/79 [00:02<00:01, 23.48it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.08it/s]
 28%|       | 22/79 [00:01<00:06,  9.02it/s]
 32%|      | 25/79 [00:01<00:04, 11.08it/s]
 35%|      | 28/79 [00:02<00:03, 13.32it/s]
 39%|      | 31/79 [00:02<00:03, 15.48it/s]
 43%|     | 34/79 [00:02<00:02, 17.45it/s]
 47%|     | 37/79 [00:02<00:02, 18.92it/s]
 51%|     | 40/79 [00:02<00:01, 20.48it/s]
 54%|    | 43/79 [00:02<00:01, 21.62it/s]
 58%|    | 46/79 [00:02<00:01, 22.46it/s]
 62%|   | 49/79 [00:02<00:01, 23.15it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:16,  3.88it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.83it/s]
 28%|       | 22/79 [00:01<00:06,  8.76it/s]
 32%|      | 25/79 [00:01<00:04, 10.87it/s]
 35%|      | 28/79 [00:02<00:03, 13.14it/s]
 39%|      | 31/79 [00:02<00:03, 15.35it/s]
 43%|     | 34/79 [00:02<00:02, 17.41it/s]
 47%|     | 37/79 [00:02<00:02, 19.03it/s]
 51%|     | 40/79 [00:02<00:01, 20.43it/s]
 54%|    | 43/79 [00:02<00:01, 21.64it/s]
 58%|    | 46/79 [00:02<00:01, 22.40it/s]
 62%|   | 49/79 [00:02<00:01, 23.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.27it/s]
 24%|       | 19/79 [00:01<00:08,  6.93it/s]
 28%|       | 22/79 [00:01<00:06,  8.86it/s]
 32%|      | 25/79 [00:01<00:04, 11.01it/s]
 35%|      | 28/79 [00:02<00:03, 13.21it/s]
 39%|      | 31/79 [00:02<00:03, 15.40it/s]
 43%|     | 34/79 [00:02<00:02, 17.34it/s]
 47%|     | 37/79 [00:02<00:02, 19.27it/s]
 51%|     | 40/79 [00:02<00:01, 20.81it/s]
 54%|    | 43/79 [00:02<00:01, 22.12it/s]
 58%|    | 46/79 [00:02<00:01, 22.91it/s]
 62%|   | 49/79 [00:02<00:01, 23.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  8.94it/s]
 32%|      | 25/79 [00:01<00:04, 11.03it/s]
 35%|      | 28/79 [00:02<00:03, 13.27it/s]
 39%|      | 31/79 [00:02<00:03, 15.39it/s]
 43%|     | 34/79 [00:02<00:02, 17.24it/s]
 47%|     | 37/79 [00:02<00:02, 18.89it/s]
 51%|     | 40/79 [00:02<00:01, 20.44it/s]
 54%|    | 43/79 [00:02<00:01, 21.74it/s]
 58%|    | 46/79 [00:02<00:01, 22.11it/s]
 62%|   | 49/79 [00:02<00:01, 22.98it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.14it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.18it/s]
 35%|      | 28/79 [00:02<00:03, 13.08it/s]
 39%|      | 31/79 [00:02<00:03, 15.14it/s]
 43%|     | 34/79 [00:02<00:02, 17.04it/s]
 47%|     | 37/79 [00:02<00:02, 18.90it/s]
 51%|     | 40/79 [00:02<00:01, 20.24it/s]
 54%|    | 43/79 [00:02<00:01, 21.53it/s]
 58%|    | 46/79 [00:02<00:01, 22.19it/s]
 62%|   | 49/79 [00:02<00:01, 22.81it/s]
 66%|   | 52/79 [00:02<00:01, 24.02it/s]
 70%|   | 55/79 [00:02<00:00, 24.65it/s]
 73%|  | 58/79 [00:03<00:00, 24.76it/s]
 77%|  | 61/79 [00:03<00:00, 25.25it/s]
 81%|  | 64/79 [00:03<00:00, 25.31it/s]
 85%| | 67/79 [00:03<00:00, 25.37it/s]
 89%| | 70/79 [00:03<00:00, 24.98it/s]
 92%|| 73/79 [00:03<00:00, 25.63it/s]
 96%|| 76/79 [00:03<00:00, 26.11it/s]
100%|| 79/79 [00:03<00:00, 26.91it/s]
, 23.75it/s]
 70%|   | 55/79 [00:02<00:01, 23.66it/s]
 73%|  | 58/79 [00:03<00:00, 23.84it/s]
 77%|  | 61/79 [00:03<00:00, 23.82it/s]
 81%|  | 64/79 [00:03<00:00, 24.16it/s]
 85%| | 67/79 [00:03<00:00, 24.27it/s]
 89%| | 70/79 [00:03<00:00, 24.23it/s]
 92%|| 73/79 [00:03<00:00, 24.72it/s]
 96%|| 76/79 [00:03<00:00, 25.47it/s]
100%|| 79/79 [00:03<00:00, 26.28it/s]
47it/s]
 68%|   | 54/79 [00:02<00:01, 23.68it/s]
 72%|  | 57/79 [00:03<00:00, 24.19it/s]
 76%|  | 60/79 [00:03<00:00, 24.57it/s]
 80%|  | 63/79 [00:03<00:00, 24.74it/s]
 84%| | 66/79 [00:03<00:00, 24.81it/s]
 87%| | 69/79 [00:03<00:00, 24.97it/s]
 91%| | 72/79 [00:03<00:00, 25.15it/s]
 95%|| 75/79 [00:03<00:00, 25.83it/s]
 99%|| 78/79 [00:03<00:00, 26.35it/s]
100%|| 79/79 [00:04<00:00, 19.73it/s]
, 24.05it/s]
 70%|   | 55/79 [00:02<00:01, 23.98it/s]
 73%|  | 58/79 [00:03<00:00, 24.46it/s]
 77%|  | 61/79 [00:03<00:00, 24.30it/s]
 81%|  | 64/79 [00:03<00:00, 24.61it/s]
 85%| | 67/79 [00:03<00:00, 24.71it/s]
 89%| | 70/79 [00:03<00:00, 24.85it/s]
 92%|| 73/79 [00:03<00:00, 25.19it/s]
 96%|| 76/79 [00:03<00:00, 25.84it/s]
100%|| 79/79 [00:03<00:00, 26.64it/s]
00it/s]
 68%|   | 54/79 [00:02<00:01, 24.35it/s]
 72%|  | 57/79 [00:03<00:00, 24.41it/s]
 76%|  | 60/79 [00:03<00:00, 24.50it/s]
 80%|  | 63/79 [00:03<00:00, 24.62it/s]
 84%| | 66/79 [00:03<00:00, 24.65it/s]
 87%| | 69/79 [00:03<00:00, 24.71it/s]
 91%| | 72/79 [00:03<00:00, 24.82it/s]
 95%|| 75/79 [00:03<00:00, 25.68it/s]
 99%|| 78/79 [00:03<00:00, 26.23it/s]
100%|| 79/79 [00:04<00:00, 19.71it/s]
, 23.92it/s]
 70%|   | 55/79 [00:02<00:00, 24.10it/s]
 73%|  | 58/79 [00:03<00:00, 24.50it/s]
 77%|  | 61/79 [00:03<00:00, 24.78it/s]
 81%|  | 64/79 [00:03<00:00, 24.75it/s]
 85%| | 67/79 [00:03<00:00, 25.11it/s]
 89%| | 70/79 [00:03<00:00, 24.74it/s]
 92%|| 73/79 [00:03<00:00, 25.08it/s]
 96%|| 76/79 [00:03<00:00, 25.76it/s]
100%|| 79/79 [00:03<00:00, 26.66it/s]
80it/s]
 68%|   | 54/79 [00:02<00:01, 24.24it/s]
 72%|  | 57/79 [00:03<00:00, 24.59it/s]
 76%|  | 60/79 [00:03<00:00, 24.56it/s]
 80%|  | 63/79 [00:03<00:00, 24.73it/s]
 84%| | 66/79 [00:03<00:00, 24.85it/s]
 87%| | 69/79 [00:03<00:00, 24.72it/s]
 91%| | 72/79 [00:03<00:00, 24.94it/s]
 95%|| 75/79 [00:03<00:00, 25.62it/s]
 99%|| 78/79 [00:03<00:00, 26.01it/s]
100%|| 79/79 [00:03<00:00, 19.78it/s]
, 23.66it/s]
 70%|   | 55/79 [00:03<00:01, 23.76it/s]
 73%|  | 58/79 [00:03<00:00, 24.12it/s]
 77%|  | 61/79 [00:03<00:00, 24.37it/s]
 81%|  | 64/79 [00:03<00:00, 24.38it/s]
 85%| | 67/79 [00:03<00:00, 24.50it/s]
 89%| | 70/79 [00:03<00:00, 24.70it/s]
 92%|| 73/79 [00:03<00:00, 25.10it/s]
 96%|| 76/79 [00:03<00:00, 25.83it/s]
100%|| 79/79 [00:03<00:00, 26.69it/s]
, 24.05it/s]
 70%|   | 55/79 [00:03<00:00, 24.27it/s]
 73%|  | 58/79 [00:03<00:00, 24.50it/s]
 77%|  | 61/79 [00:03<00:00, 24.79it/s]
 81%|  | 64/79 [00:03<00:00, 25.03it/s]
 85%| | 67/79 [00:03<00:00, 25.29it/s]
 89%| | 70/79 [00:03<00:00, 25.14it/s]
 92%|| 73/79 [00:03<00:00, 25.37it/s]
 96%|| 76/79 [00:03<00:00, 26.36it/s]
100%|| 79/79 [00:03<00:00, 26.56it/s]
, 24.45it/s]
 70%|   | 55/79 [00:02<00:00, 24.74it/s]
 73%|  | 58/79 [00:03<00:00, 24.94it/s]
 77%|  | 61/79 [00:03<00:00, 25.26it/s]
 81%|  | 64/79 [00:03<00:00, 25.30it/s]
 85%| | 67/79 [00:03<00:00, 25.40it/s]
 89%| | 70/79 [00:03<00:00, 24.94it/s]
 92%|| 73/79 [00:03<00:00, 25.38it/s]
 96%|| 76/79 [00:03<00:00, 25.71it/s]
100%|| 79/79 [00:03<00:00, 26.61it/s]
, 23.81it/s]
 70%|   | 55/79 [00:03<00:00, 24.10it/s]
 73%|  | 58/79 [00:03<00:00, 24.15it/s]
 77%|  | 61/79 [00:03<00:00, 24.51it/s]
 81%|  | 64/79 [00:03<00:00, 24.89it/s]
 85%| | 67/79 [00:03<00:00, 25.01it/s]
 89%| | 70/79 [00:03<00:00, 25.29it/s]
 92%|| 73/79 [00:03<00:00, 25.69it/s]
 96%|| 76/79 [00:03<00:00, 26.32it/s]
100%|| 79/79 [00:03<00:00, 27.15it/s]
, 23.87it/s]
 70%|   | 55/79 [00:03<00:00, 24.41it/s]
 73%|  | 58/79 [00:03<00:00, 24.75it/s]
 77%|  | 61/79 [00:03<00:00, 24.99it/s]
 81%|  | 64/79 [00:03<00:00, 25.10it/s]
 85%| | 67/79 [00:03<00:00, 25.10it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 25.55it/s]
 96%|| 76/79 [00:03<00:00, 25.85it/s]
100%|| 79/79 [00:03<00:00, 26.58it/s]
38it/s]
 68%|   | 54/79 [00:03<00:01, 23.59it/s]
 72%|  | 57/79 [00:03<00:00, 23.84it/s]
 76%|  | 60/79 [00:03<00:00, 24.31it/s]
 80%|  | 63/79 [00:03<00:00, 24.37it/s]
 84%| | 66/79 [00:03<00:00, 24.62it/s]
 87%| | 69/79 [00:03<00:00, 24.61it/s]
 91%| | 72/79 [00:03<00:00, 24.83it/s]
 95%|| 75/79 [00:03<00:00, 25.58it/s]
 99%|| 78/79 [00:03<00:00, 26.12it/s]
100%|| 79/79 [00:04<00:00, 19.53it/s]
, 23.76it/s]
 70%|   | 55/79 [00:03<00:00, 24.22it/s]
 73%|  | 58/79 [00:03<00:00, 24.60it/s]
 77%|  | 61/79 [00:03<00:00, 24.73it/s]
 81%|  | 64/79 [00:03<00:00, 24.91it/s]
 85%| | 67/79 [00:03<00:00, 24.96it/s]
 89%| | 70/79 [00:03<00:00, 25.11it/s]
 92%|| 73/79 [00:03<00:00, 25.41it/s]
 96%|| 76/79 [00:03<00:00, 26.04it/s]
100%|| 79/79 [00:03<00:00, 26.94it/s]
, 23.76it/s]
 70%|   | 55/79 [00:03<00:01, 23.92it/s]
 73%|  | 58/79 [00:03<00:00, 24.10it/s]
 77%|  | 61/79 [00:03<00:00, 24.12it/s]
 81%|  | 64/79 [00:03<00:00, 24.32it/s]
 85%| | 67/79 [00:03<00:00, 24.65it/s]
 89%| | 70/79 [00:03<00:00, 24.69it/s]
 92%|| 73/79 [00:03<00:00, 25.09it/s]
 96%|| 76/79 [00:03<00:00, 25.68it/s]
100%|| 79/79 [00:03<00:00, 26.50it/s]
, 23.85it/s]
 70%|   | 55/79 [00:03<00:00, 24.30it/s]
 73%|  | 58/79 [00:03<00:00, 24.52it/s]
 77%|  | 61/79 [00:03<00:00, 24.73it/s]
 81%|  | 64/79 [00:03<00:00, 24.82it/s]
 85%| | 67/79 [00:03<00:00, 24.99it/s]
 89%| | 70/79 [00:03<00:00, 24.79it/s]
 92%|| 73/79 [00:03<00:00, 25.25it/s]
 96%|| 76/79 [00:03<00:00, 25.94it/s]
100%|| 79/79 [00:03<00:00, 26.75it/s]
41it/s]
 68%|   | 54/79 [00:03<00:01, 23.89it/s]
 72%|  | 57/79 [00:03<00:00, 24.11it/s]
 76%|  | 60/79 [00:03<00:00, 24.52it/s]
 80%|  | 63/79 [00:03<00:00, 24.74it/s]
 84%| | 66/79 [00:03<00:00, 24.88it/s]
 87%| | 69/79 [00:03<00:00, 25.15it/s]
 91%| | 72/79 [00:03<00:00, 25.29it/s]
 95%|| 75/79 [00:03<00:00, 25.97it/s]
 99%|| 78/79 [00:03<00:00, 26.56it/s]
100%|| 79/79 [00:04<00:00, 19.54it/s]
88it/s]
 68%|   | 54/79 [00:03<00:01, 24.19it/s]
 72%|  | 57/79 [00:03<00:00, 24.52it/s]
 76%|  | 60/79 [00:03<00:00, 24.87it/s]
 80%|  | 63/79 [00:03<00:00, 24.62it/s]
 84%| | 66/79 [00:03<00:00, 24.86it/s]
 87%| | 69/79 [00:03<00:00, 24.75it/s]
 91%| | 72/79 [00:03<00:00, 25.12it/s]
 95%|| 75/79 [00:03<00:00, 25.68it/s]
 99%|| 78/79 [00:03<00:00, 26.21it/s]
100%|| 79/79 [00:04<00:00, 19.45it/s]
, 23.81it/s]
 70%|   | 55/79 [00:03<00:00, 24.18it/s]
 73%|  | 58/79 [00:03<00:00, 24.49it/s]
 77%|  | 61/79 [00:03<00:00, 24.48it/s]
 81%|  | 64/79 [00:03<00:00, 24.55it/s]
 85%| | 67/79 [00:03<00:00, 24.65it/s]
 89%| | 70/79 [00:03<00:00, 24.82it/s]
 92%|| 73/79 [00:03<00:00, 25.03it/s]
 96%|| 76/79 [00:03<00:00, 25.63it/s]
100%|| 79/79 [00:03<00:00, 26.44it/s]
, 23.47it/s]
 70%|   | 55/79 [00:03<00:01, 23.96it/s]
 73%|  | 58/79 [00:03<00:00, 24.07it/s]
 77%|  | 61/79 [00:03<00:00, 24.21it/s]
 81%|  | 64/79 [00:03<00:00, 24.27it/s]
 85%| | 67/79 [00:03<00:00, 24.31it/s]
 89%| | 70/79 [00:03<00:00, 24.54it/s]
 92%|| 73/79 [00:03<00:00, 24.87it/s]
 96%|| 76/79 [00:03<00:00, 25.53it/s]
100%|| 79/79 [00:03<00:00, 26.51it/s]
, 23.68it/s]
 70%|   | 55/79 [00:03<00:00, 24.12it/s]
 73%|  | 58/79 [00:03<00:00, 24.48it/s]
 77%|  | 61/79 [00:03<00:00, 24.61it/s]
 81%|  | 64/79 [00:03<00:00, 24.88it/s]
 85%| | 67/79 [00:03<00:00, 25.01it/s]
 89%| | 70/79 [00:03<00:00, 25.18it/s]
 92%|| 73/79 [00:03<00:00, 25.29it/s]
 96%|| 76/79 [00:03<00:00, 26.33it/s]
100%|| 79/79 [00:03<00:00, 26.71it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:01, 23.97it/s]
 73%|  | 58/79 [00:03<00:00, 24.27it/s]
 77%|  | 61/79 [00:03<00:00, 24.26it/s]
 81%|  | 64/79 [00:03<00:00, 24.21it/s]
 85%| | 67/79 [00:03<00:00, 24.37it/s]
 89%| | 70/79 [00:03<00:00, 24.86it/s]
 92%|| 73/79 [00:03<00:00, 24.87it/s]
 96%|| 76/79 [00:03<00:00, 25.55it/s]
100%|| 79/79 [00:04<00:00, 26.36it/s]
, 23.55it/s]
 70%|   | 55/79 [00:03<00:00, 24.24it/s]
 73%|  | 58/79 [00:03<00:00, 24.50it/s]
 77%|  | 61/79 [00:03<00:00, 24.85it/s]
 81%|  | 64/79 [00:03<00:00, 25.10it/s]
 85%| | 67/79 [00:03<00:00, 25.23it/s]
 89%| | 70/79 [00:03<00:00, 24.48it/s]
 92%|| 73/79 [00:03<00:00, 24.86it/s]
 96%|| 76/79 [00:03<00:00, 25.48it/s]
100%|| 79/79 [00:04<00:00, 26.15it/s]
10it/s]
 68%|   | 54/79 [00:03<00:01, 23.40it/s]
 72%|  | 57/79 [00:03<00:00, 24.00it/s]
 76%|  | 60/79 [00:03<00:00, 23.94it/s]
 80%|  | 63/79 [00:03<00:00, 23.89it/s]
 84%| | 66/79 [00:03<00:00, 24.06it/s]
 87%| | 69/79 [00:03<00:00, 24.35it/s]
 91%| | 72/79 [00:03<00:00, 24.39it/s]
 95%|| 75/79 [00:03<00:00, 25.27it/s]
 99%|| 78/79 [00:03<00:00, 26.02it/s]
100%|| 79/79 [00:04<00:00, 19.38it/s]
, 23.01it/s]
 70%|   | 55/79 [00:03<00:01, 23.66it/s]
 73%|  | 58/79 [00:03<00:00, 23.96it/s]
 77%|  | 61/79 [00:03<00:00, 24.13it/s]
 81%|  | 64/79 [00:03<00:00, 24.34it/s]
 85%| | 67/79 [00:03<00:00, 24.54it/s]
 89%| | 70/79 [00:03<00:00, 24.72it/s]
 92%|| 73/79 [00:03<00:00, 24.86it/s]
 96%|| 76/79 [00:03<00:00, 25.58it/s]
100%|| 79/79 [00:04<00:00, 26.27it/s]
, 23.82it/s]
 70%|   | 55/79 [00:03<00:00, 24.08it/s]
 73%|  | 58/79 [00:03<00:00, 24.30it/s]
 77%|  | 61/79 [00:03<00:00, 24.68it/s]
 81%|  | 64/79 [00:03<00:00, 24.89it/s]
 85%| | 67/79 [00:03<00:00, 25.08it/s]
 89%| | 70/79 [00:03<00:00, 25.19it/s]
 92%|| 73/79 [00:03<00:00, 25.47it/s]
 96%|| 76/79 [00:03<00:00, 26.05it/s]
100%|| 79/79 [00:04<00:00, 26.85it/s]
60it/s]
 68%|   | 54/79 [00:03<00:01, 23.80it/s]
 72%|  | 57/79 [00:03<00:00, 23.98it/s]
 76%|  | 60/79 [00:03<00:00, 24.29it/s]
 80%|  | 63/79 [00:03<00:00, 24.47it/s]
 84%| | 66/79 [00:03<00:00, 24.57it/s]
 87%| | 69/79 [00:03<00:00, 24.56it/s]
 91%| | 72/79 [00:03<00:00, 24.44it/s]
 95%|| 75/79 [00:03<00:00, 25.17it/s]
 99%|| 78/79 [00:04<00:00, 25.68it/s]
100%|| 79/79 [00:04<00:00, 19.17it/s]
, 23.67it/s]
 70%|   | 55/79 [00:03<00:00, 24.16it/s]
 73%|  | 58/79 [00:03<00:00, 24.50it/s]
 77%|  | 61/79 [00:03<00:00, 24.84it/s]
 81%|  | 64/79 [00:03<00:00, 24.61it/s]
 85%| | 67/79 [00:03<00:00, 24.67it/s]
 89%| | 70/79 [00:03<00:00, 24.98it/s]
 92%|| 73/79 [00:03<00:00, 25.05it/s]
 96%|| 76/79 [00:03<00:00, 25.82it/s]
100%|| 79/79 [00:04<00:00, 26.62it/s]
, 23.60it/s]
 70%|   | 55/79 [00:03<00:00, 24.10it/s]
 73%|  | 58/79 [00:03<00:00, 23.95it/s]
 77%|  | 61/79 [00:03<00:00, 24.09it/s]
 81%|  | 64/79 [00:03<00:00, 24.30it/s]
 85%| | 67/79 [00:03<00:00, 24.38it/s]
 89%| | 70/79 [00:03<00:00, 24.33it/s]
 92%|| 73/79 [00:03<00:00, 24.62it/s]
 96%|| 76/79 [00:03<00:00, 25.21it/s]
100%|| 79/79 [00:04<00:00, 26.17it/s]
72it/s]
 68%|   | 54/79 [00:03<00:01, 23.13it/s]
 72%|  | 57/79 [00:03<00:00, 23.34it/s]
 76%|  | 60/79 [00:03<00:00, 23.32it/s]
 80%|  | 63/79 [00:03<00:00, 23.24it/s]
 84%| | 66/79 [00:03<00:00, 23.67it/s]
 87%| | 69/79 [00:03<00:00, 23.74it/s]
 91%| | 72/79 [00:03<00:00, 24.09it/s]
 95%|| 75/79 [00:03<00:00, 25.00it/s]
 99%|| 78/79 [00:04<00:00, 25.62it/s]
100%|| 79/79 [00:04<00:00, 18.91it/s]
, 23.20it/s]
 70%|   | 55/79 [00:03<00:01, 23.75it/s]
 73%|  | 58/79 [00:03<00:00, 23.93it/s]
 77%|  | 61/79 [00:03<00:00, 24.08it/s]
 81%|  | 64/79 [00:03<00:00, 24.09it/s]
 85%| | 67/79 [00:03<00:00, 24.14it/s]
 89%| | 70/79 [00:03<00:00, 24.11it/s]
 92%|| 73/79 [00:03<00:00, 24.58it/s]
 96%|| 76/79 [00:03<00:00, 25.37it/s]
100%|| 79/79 [00:04<00:00, 26.38it/s]
, 23.48it/s]
 70%|   | 55/79 [00:03<00:00, 24.07it/s]
 73%|  | 58/79 [00:03<00:00, 24.43it/s]
 77%|  | 61/79 [00:03<00:00, 24.39it/s]
 81%|  | 64/79 [00:03<00:00, 24.29it/s]
 85%| | 67/79 [00:03<00:00, 24.63it/s]
 89%| | 70/79 [00:03<00:00, 24.32it/s]
 92%|| 73/79 [00:03<00:00, 24.75it/s]
 96%|| 76/79 [00:03<00:00, 25.41it/s]
100%|| 79/79 [00:04<00:00, 26.24it/s]
2020-06-23 15:45:51,192 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.183650 (0.026775357055664063 s / img per device, on 32 devices)
2020-06-23 15:45:51,211 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:45:51,211 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:45:51,230 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592952358138, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 13, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592952358138, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 13}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 15:45:59,895 maskrcnn_benchmark.trainer INFO: eta: 1:01:10  iter: 11020  loss: 0.5176 (0.7284)  loss_classifier: 0.1670 (0.2645)  loss_box_reg: 0.0767 (0.1178)  loss_mask: 0.2409 (0.2913)  loss_objectness: 0.0123 (0.0350)  loss_rpn_box_reg: 0.0057 (0.0198)  time: 0.1095 (0.1267)  data: 0.0015 (0.0183)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:02,114 maskrcnn_benchmark.trainer INFO: eta: 1:01:07  iter: 11040  loss: 0.5248 (0.7280)  loss_classifier: 0.1694 (0.2643)  loss_box_reg: 0.0856 (0.1177)  loss_mask: 0.2311 (0.2912)  loss_objectness: 0.0186 (0.0350)  loss_rpn_box_reg: 0.0107 (0.0198)  time: 0.1100 (0.1266)  data: 0.0015 (0.0183)  lr: 0.016000  max mem: 5140
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.56s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 15:46:04,333 maskrcnn_benchmark.trainer INFO: eta: 1:01:03  iter: 11060  loss: 0.4825 (0.7276)  loss_classifier: 0.1405 (0.2641)  loss_box_reg: 0.0686 (0.1176)  loss_mask: 0.2404 (0.2911)  loss_objectness: 0.0099 (0.0349)  loss_rpn_box_reg: 0.0062 (0.0198)  time: 0.1108 (0.1266)  data: 0.0015 (0.0183)  lr: 0.016000  max mem: 5140
DONE (t=1.42s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36995
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.58615
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.40007
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21479
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.39752
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48148
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30977
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.49061
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51398
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.32891
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.54712
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.64592
2020-06-23 15:46:06,538 maskrcnn_benchmark.trainer INFO: eta: 1:01:00  iter: 11080  loss: 0.5006 (0.7273)  loss_classifier: 0.1614 (0.2640)  loss_box_reg: 0.0775 (0.1176)  loss_mask: 0.2283 (0.2910)  loss_objectness: 0.0088 (0.0349)  loss_rpn_box_reg: 0.0079 (0.0198)  time: 0.1093 (0.1266)  data: 0.0015 (0.0182)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:08,727 maskrcnn_benchmark.trainer INFO: eta: 1:00:56  iter: 11100  loss: 0.5724 (0.7269)  loss_classifier: 0.1305 (0.2638)  loss_box_reg: 0.0852 (0.1175)  loss_mask: 0.2646 (0.2910)  loss_objectness: 0.0110 (0.0349)  loss_rpn_box_reg: 0.0094 (0.0198)  time: 0.1096 (0.1265)  data: 0.0014 (0.0182)  lr: 0.016000  max mem: 5140
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:46:10,925 maskrcnn_benchmark.trainer INFO: eta: 1:00:53  iter: 11120  loss: 0.6153 (0.7267)  loss_classifier: 0.1822 (0.2637)  loss_box_reg: 0.1024 (0.1175)  loss_mask: 0.2672 (0.2909)  loss_objectness: 0.0153 (0.0349)  loss_rpn_box_reg: 0.0124 (0.0198)  time: 0.1081 (0.1265)  data: 0.0015 (0.0182)  lr: 0.016000  max mem: 5140
DONE (t=1.50s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:46:13,144 maskrcnn_benchmark.trainer INFO: eta: 1:00:50  iter: 11140  loss: 0.5847 (0.7264)  loss_classifier: 0.1964 (0.2635)  loss_box_reg: 0.0963 (0.1175)  loss_mask: 0.2528 (0.2908)  loss_objectness: 0.0126 (0.0348)  loss_rpn_box_reg: 0.0059 (0.0198)  time: 0.1108 (0.1265)  data: 0.0015 (0.0181)  lr: 0.016000  max mem: 5140
DONE (t=2.34s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.33862
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.55382
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.35887
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15523
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36494
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49957
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29291
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.45086
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.47058
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27629
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50721
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62137
2020-06-23 15:46:14,497 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3699480317410568, segm mAP: 0.3386165269977163
:::MLLOG {"namespace": "", "time_ms": 1592952374498, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.3699480317410568, "SEGM": 0.3386165269977163}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 12}}
:::MLLOG {"namespace": "", "time_ms": 1592952374498, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 12}}
2020-06-23 15:46:15,479 maskrcnn_benchmark.trainer INFO: eta: 1:00:47  iter: 11160  loss: 0.5360 (0.7261)  loss_classifier: 0.1696 (0.2634)  loss_box_reg: 0.0736 (0.1174)  loss_mask: 0.2453 (0.2908)  loss_objectness: 0.0174 (0.0348)  loss_rpn_box_reg: 0.0070 (0.0198)  time: 0.1094 (0.1265)  data: 0.0015 (0.0181)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:17,689 maskrcnn_benchmark.trainer INFO: eta: 1:00:43  iter: 11180  loss: 0.5427 (0.7258)  loss_classifier: 0.1785 (0.2633)  loss_box_reg: 0.0949 (0.1174)  loss_mask: 0.2354 (0.2907)  loss_objectness: 0.0071 (0.0348)  loss_rpn_box_reg: 0.0073 (0.0197)  time: 0.1096 (0.1264)  data: 0.0014 (0.0181)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:19,883 maskrcnn_benchmark.trainer INFO: eta: 1:00:40  iter: 11200  loss: 0.5297 (0.7255)  loss_classifier: 0.1658 (0.2631)  loss_box_reg: 0.0891 (0.1173)  loss_mask: 0.2530 (0.2906)  loss_objectness: 0.0110 (0.0347)  loss_rpn_box_reg: 0.0088 (0.0197)  time: 0.1083 (0.1264)  data: 0.0014 (0.0181)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:22,063 maskrcnn_benchmark.trainer INFO: eta: 1:00:37  iter: 11220  loss: 0.6218 (0.7253)  loss_classifier: 0.2183 (0.2630)  loss_box_reg: 0.1024 (0.1173)  loss_mask: 0.2521 (0.2905)  loss_objectness: 0.0247 (0.0347)  loss_rpn_box_reg: 0.0102 (0.0197)  time: 0.1088 (0.1264)  data: 0.0015 (0.0180)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:24,242 maskrcnn_benchmark.trainer INFO: eta: 1:00:33  iter: 11240  loss: 0.5781 (0.7249)  loss_classifier: 0.1973 (0.2629)  loss_box_reg: 0.0839 (0.1173)  loss_mask: 0.2424 (0.2904)  loss_objectness: 0.0136 (0.0347)  loss_rpn_box_reg: 0.0081 (0.0197)  time: 0.1085 (0.1263)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:26,434 maskrcnn_benchmark.trainer INFO: eta: 1:00:30  iter: 11260  loss: 0.5607 (0.7247)  loss_classifier: 0.2027 (0.2628)  loss_box_reg: 0.0978 (0.1172)  loss_mask: 0.2404 (0.2903)  loss_objectness: 0.0143 (0.0347)  loss_rpn_box_reg: 0.0095 (0.0197)  time: 0.1093 (0.1263)  data: 0.0015 (0.0180)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:28,630 maskrcnn_benchmark.trainer INFO: eta: 1:00:26  iter: 11280  loss: 0.5494 (0.7243)  loss_classifier: 0.1736 (0.2626)  loss_box_reg: 0.0763 (0.1172)  loss_mask: 0.2180 (0.2902)  loss_objectness: 0.0140 (0.0346)  loss_rpn_box_reg: 0.0085 (0.0197)  time: 0.1090 (0.1263)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:30,825 maskrcnn_benchmark.trainer INFO: eta: 1:00:23  iter: 11300  loss: 0.5029 (0.7240)  loss_classifier: 0.1706 (0.2625)  loss_box_reg: 0.0851 (0.1171)  loss_mask: 0.2346 (0.2901)  loss_objectness: 0.0115 (0.0346)  loss_rpn_box_reg: 0.0068 (0.0197)  time: 0.1089 (0.1263)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:33,015 maskrcnn_benchmark.trainer INFO: eta: 1:00:20  iter: 11320  loss: 0.5568 (0.7237)  loss_classifier: 0.1499 (0.2623)  loss_box_reg: 0.0841 (0.1171)  loss_mask: 0.2523 (0.2901)  loss_objectness: 0.0143 (0.0346)  loss_rpn_box_reg: 0.0101 (0.0197)  time: 0.1096 (0.1262)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:35,213 maskrcnn_benchmark.trainer INFO: eta: 1:00:16  iter: 11340  loss: 0.5420 (0.7234)  loss_classifier: 0.1630 (0.2622)  loss_box_reg: 0.0851 (0.1170)  loss_mask: 0.2361 (0.2900)  loss_objectness: 0.0141 (0.0346)  loss_rpn_box_reg: 0.0061 (0.0197)  time: 0.1094 (0.1262)  data: 0.0014 (0.0179)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:37,407 maskrcnn_benchmark.trainer INFO: eta: 1:00:13  iter: 11360  loss: 0.5268 (0.7231)  loss_classifier: 0.1715 (0.2620)  loss_box_reg: 0.0799 (0.1170)  loss_mask: 0.2565 (0.2899)  loss_objectness: 0.0124 (0.0345)  loss_rpn_box_reg: 0.0056 (0.0197)  time: 0.1090 (0.1262)  data: 0.0014 (0.0178)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:39,578 maskrcnn_benchmark.trainer INFO: eta: 1:00:09  iter: 11380  loss: 0.6215 (0.7230)  loss_classifier: 0.1997 (0.2619)  loss_box_reg: 0.1010 (0.1170)  loss_mask: 0.2520 (0.2898)  loss_objectness: 0.0181 (0.0345)  loss_rpn_box_reg: 0.0106 (0.0197)  time: 0.1081 (0.1261)  data: 0.0015 (0.0178)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:41,771 maskrcnn_benchmark.trainer INFO: eta: 1:00:06  iter: 11400  loss: 0.5173 (0.7226)  loss_classifier: 0.1400 (0.2618)  loss_box_reg: 0.0833 (0.1169)  loss_mask: 0.2409 (0.2897)  loss_objectness: 0.0116 (0.0345)  loss_rpn_box_reg: 0.0076 (0.0197)  time: 0.1093 (0.1261)  data: 0.0014 (0.0178)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:43,961 maskrcnn_benchmark.trainer INFO: eta: 1:00:03  iter: 11420  loss: 0.5377 (0.7223)  loss_classifier: 0.1812 (0.2616)  loss_box_reg: 0.0774 (0.1169)  loss_mask: 0.2515 (0.2897)  loss_objectness: 0.0145 (0.0345)  loss_rpn_box_reg: 0.0074 (0.0197)  time: 0.1090 (0.1261)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:46,144 maskrcnn_benchmark.trainer INFO: eta: 0:59:59  iter: 11440  loss: 0.4873 (0.7219)  loss_classifier: 0.1511 (0.2614)  loss_box_reg: 0.0716 (0.1168)  loss_mask: 0.2278 (0.2896)  loss_objectness: 0.0133 (0.0344)  loss_rpn_box_reg: 0.0058 (0.0197)  time: 0.1083 (0.1260)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:48,344 maskrcnn_benchmark.trainer INFO: eta: 0:59:56  iter: 11460  loss: 0.4920 (0.7216)  loss_classifier: 0.1482 (0.2613)  loss_box_reg: 0.0717 (0.1167)  loss_mask: 0.2401 (0.2895)  loss_objectness: 0.0130 (0.0344)  loss_rpn_box_reg: 0.0078 (0.0197)  time: 0.1097 (0.1260)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:50,541 maskrcnn_benchmark.trainer INFO: eta: 0:59:53  iter: 11480  loss: 0.5516 (0.7212)  loss_classifier: 0.1917 (0.2611)  loss_box_reg: 0.0910 (0.1167)  loss_mask: 0.2423 (0.2894)  loss_objectness: 0.0119 (0.0344)  loss_rpn_box_reg: 0.0048 (0.0196)  time: 0.1096 (0.1260)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:52,725 maskrcnn_benchmark.trainer INFO: eta: 0:59:49  iter: 11500  loss: 0.4919 (0.7209)  loss_classifier: 0.1652 (0.2610)  loss_box_reg: 0.0824 (0.1166)  loss_mask: 0.2203 (0.2893)  loss_objectness: 0.0140 (0.0344)  loss_rpn_box_reg: 0.0067 (0.0196)  time: 0.1086 (0.1260)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:54,908 maskrcnn_benchmark.trainer INFO: eta: 0:59:46  iter: 11520  loss: 0.5463 (0.7206)  loss_classifier: 0.1786 (0.2608)  loss_box_reg: 0.0877 (0.1166)  loss_mask: 0.2416 (0.2892)  loss_objectness: 0.0147 (0.0343)  loss_rpn_box_reg: 0.0095 (0.0196)  time: 0.1089 (0.1259)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:57,106 maskrcnn_benchmark.trainer INFO: eta: 0:59:43  iter: 11540  loss: 0.5201 (0.7202)  loss_classifier: 0.1518 (0.2607)  loss_box_reg: 0.0746 (0.1165)  loss_mask: 0.2379 (0.2891)  loss_objectness: 0.0112 (0.0343)  loss_rpn_box_reg: 0.0079 (0.0196)  time: 0.1091 (0.1259)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5140
2020-06-23 15:46:59,291 maskrcnn_benchmark.trainer INFO: eta: 0:59:39  iter: 11560  loss: 0.5765 (0.7200)  loss_classifier: 0.1934 (0.2605)  loss_box_reg: 0.0956 (0.1165)  loss_mask: 0.2324 (0.2890)  loss_objectness: 0.0161 (0.0343)  loss_rpn_box_reg: 0.0070 (0.0196)  time: 0.1092 (0.1259)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5140
2020-06-23 15:47:01,475 maskrcnn_benchmark.trainer INFO: eta: 0:59:36  iter: 11580  loss: 0.4775 (0.7195)  loss_classifier: 0.1445 (0.2603)  loss_box_reg: 0.0806 (0.1164)  loss_mask: 0.2342 (0.2889)  loss_objectness: 0.0078 (0.0343)  loss_rpn_box_reg: 0.0071 (0.0196)  time: 0.1089 (0.1258)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5140
2020-06-23 15:47:03,642 maskrcnn_benchmark.trainer INFO: eta: 0:59:33  iter: 11600  loss: 0.4997 (0.7193)  loss_classifier: 0.1372 (0.2602)  loss_box_reg: 0.0842 (0.1164)  loss_mask: 0.2526 (0.2889)  loss_objectness: 0.0102 (0.0342)  loss_rpn_box_reg: 0.0067 (0.0196)  time: 0.1079 (0.1258)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5140
2020-06-23 15:47:05,810 maskrcnn_benchmark.trainer INFO: eta: 0:59:29  iter: 11620  loss: 0.5643 (0.7191)  loss_classifier: 0.1748 (0.2601)  loss_box_reg: 0.0834 (0.1163)  loss_mask: 0.2424 (0.2888)  loss_objectness: 0.0190 (0.0343)  loss_rpn_box_reg: 0.0119 (0.0196)  time: 0.1079 (0.1258)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5140
2020-06-23 15:47:08,015 maskrcnn_benchmark.trainer INFO: eta: 0:59:26  iter: 11640  loss: 0.5502 (0.7188)  loss_classifier: 0.1613 (0.2599)  loss_box_reg: 0.0951 (0.1163)  loss_mask: 0.2439 (0.2887)  loss_objectness: 0.0236 (0.0343)  loss_rpn_box_reg: 0.0083 (0.0196)  time: 0.1102 (0.1258)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5140
2020-06-23 15:47:10,195 maskrcnn_benchmark.trainer INFO: eta: 0:59:23  iter: 11660  loss: 0.5364 (0.7186)  loss_classifier: 0.1727 (0.2598)  loss_box_reg: 0.0880 (0.1163)  loss_mask: 0.2488 (0.2887)  loss_objectness: 0.0177 (0.0343)  loss_rpn_box_reg: 0.0128 (0.0196)  time: 0.1083 (0.1257)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5140
2020-06-23 15:47:12,377 maskrcnn_benchmark.trainer INFO: eta: 0:59:19  iter: 11680  loss: 0.5285 (0.7184)  loss_classifier: 0.1672 (0.2597)  loss_box_reg: 0.0926 (0.1162)  loss_mask: 0.2287 (0.2886)  loss_objectness: 0.0143 (0.0342)  loss_rpn_box_reg: 0.0059 (0.0196)  time: 0.1085 (0.1257)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5140
2020-06-23 15:47:14,561 maskrcnn_benchmark.trainer INFO: eta: 0:59:16  iter: 11700  loss: 0.5075 (0.7181)  loss_classifier: 0.1489 (0.2595)  loss_box_reg: 0.0812 (0.1162)  loss_mask: 0.2470 (0.2885)  loss_objectness: 0.0157 (0.0342)  loss_rpn_box_reg: 0.0040 (0.0196)  time: 0.1091 (0.1257)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5140
2020-06-23 15:47:16,726 maskrcnn_benchmark.trainer INFO: eta: 0:59:13  iter: 11720  loss: 0.5814 (0.7178)  loss_classifier: 0.1652 (0.2594)  loss_box_reg: 0.0852 (0.1162)  loss_mask: 0.2480 (0.2885)  loss_objectness: 0.0186 (0.0342)  loss_rpn_box_reg: 0.0082 (0.0196)  time: 0.1078 (0.1256)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5140
2020-06-23 15:47:18,891 maskrcnn_benchmark.trainer INFO: eta: 0:59:09  iter: 11740  loss: 0.4883 (0.7175)  loss_classifier: 0.1407 (0.2592)  loss_box_reg: 0.0719 (0.1161)  loss_mask: 0.2628 (0.2884)  loss_objectness: 0.0103 (0.0342)  loss_rpn_box_reg: 0.0055 (0.0195)  time: 0.1079 (0.1256)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5140
2020-06-23 15:47:21,083 maskrcnn_benchmark.trainer INFO: eta: 0:59:06  iter: 11760  loss: 0.5496 (0.7172)  loss_classifier: 0.1610 (0.2591)  loss_box_reg: 0.0811 (0.1161)  loss_mask: 0.2492 (0.2884)  loss_objectness: 0.0129 (0.0342)  loss_rpn_box_reg: 0.0113 (0.0196)  time: 0.1090 (0.1256)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5140
2020-06-23 15:47:23,265 maskrcnn_benchmark.trainer INFO: eta: 0:59:03  iter: 11780  loss: 0.5532 (0.7169)  loss_classifier: 0.1586 (0.2589)  loss_box_reg: 0.0893 (0.1160)  loss_mask: 0.2397 (0.2883)  loss_objectness: 0.0101 (0.0341)  loss_rpn_box_reg: 0.0094 (0.0196)  time: 0.1089 (0.1256)  data: 0.0015 (0.0172)  lr: 0.016000  max mem: 5140
2020-06-23 15:47:25,437 maskrcnn_benchmark.trainer INFO: eta: 0:58:59  iter: 11800  loss: 0.5789 (0.7167)  loss_classifier: 0.1844 (0.2588)  loss_box_reg: 0.0860 (0.1160)  loss_mask: 0.2485 (0.2882)  loss_objectness: 0.0159 (0.0341)  loss_rpn_box_reg: 0.0040 (0.0195)  time: 0.1088 (0.1255)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5140
2020-06-23 15:47:27,607 maskrcnn_benchmark.trainer INFO: eta: 0:58:56  iter: 11820  loss: 0.5454 (0.7164)  loss_classifier: 0.1871 (0.2587)  loss_box_reg: 0.0884 (0.1159)  loss_mask: 0.2364 (0.2881)  loss_objectness: 0.0131 (0.0341)  loss_rpn_box_reg: 0.0080 (0.0195)  time: 0.1080 (0.1255)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5140
2020-06-23 15:47:29,791 maskrcnn_benchmark.trainer INFO: eta: 0:58:53  iter: 11840  loss: 0.5188 (0.7161)  loss_classifier: 0.1703 (0.2586)  loss_box_reg: 0.0739 (0.1159)  loss_mask: 0.2492 (0.2881)  loss_objectness: 0.0141 (0.0341)  loss_rpn_box_reg: 0.0101 (0.0195)  time: 0.1094 (0.1255)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5140
2020-06-23 15:47:31,981 maskrcnn_benchmark.trainer INFO: eta: 0:58:50  iter: 11860  loss: 0.4176 (0.7158)  loss_classifier: 0.1305 (0.2584)  loss_box_reg: 0.0625 (0.1158)  loss_mask: 0.2238 (0.2880)  loss_objectness: 0.0126 (0.0340)  loss_rpn_box_reg: 0.0092 (0.0195)  time: 0.1089 (0.1254)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5140
2020-06-23 15:47:34,159 maskrcnn_benchmark.trainer INFO: eta: 0:58:46  iter: 11880  loss: 0.4739 (0.7154)  loss_classifier: 0.1518 (0.2583)  loss_box_reg: 0.0826 (0.1158)  loss_mask: 0.2206 (0.2878)  loss_objectness: 0.0153 (0.0340)  loss_rpn_box_reg: 0.0065 (0.0195)  time: 0.1086 (0.1254)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5140
2020-06-23 15:47:36,349 maskrcnn_benchmark.trainer INFO: eta: 0:58:43  iter: 11900  loss: 0.5028 (0.7151)  loss_classifier: 0.1626 (0.2581)  loss_box_reg: 0.0753 (0.1157)  loss_mask: 0.2357 (0.2878)  loss_objectness: 0.0140 (0.0340)  loss_rpn_box_reg: 0.0077 (0.0195)  time: 0.1088 (0.1254)  data: 0.0015 (0.0171)  lr: 0.016000  max mem: 5140
2020-06-23 15:47:38,556 maskrcnn_benchmark.trainer INFO: eta: 0:58:40  iter: 11920  loss: 0.5412 (0.7149)  loss_classifier: 0.1617 (0.2580)  loss_box_reg: 0.0766 (0.1157)  loss_mask: 0.2416 (0.2877)  loss_objectness: 0.0134 (0.0340)  loss_rpn_box_reg: 0.0123 (0.0195)  time: 0.1105 (0.1254)  data: 0.0015 (0.0171)  lr: 0.016000  max mem: 5140
:::MLLOG {"namespace": "", "time_ms": 1592952458654, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 13}}
:::MLLOG {"namespace": "", "time_ms": 1592952458654, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 13}}
:::MLLOG {"namespace": "", "time_ms": 1592952458654, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 13}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 15:47:38,846 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
2020-06-23 15:47:39,146 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:49,  1.58it/s]
  5%|         | 4/79 [00:00<00:34,  2.19it/s]
  9%|         | 7/79 [00:00<00:23,  3.02it/s]
 13%|        | 10/79 [00:01<00:16,  4.09it/s]
 16%|        | 13/79 [00:01<00:12,  5.47it/s]
 20%|        | 16/79 [00:01<00:08,  7.15it/s]
 24%|       | 19/79 [00:01<00:06,  9.06it/s]
 28%|       | 22/79 [00:01<00:05, 11.12it/s]
 32%|      | 25/79 [00:01<00:04, 13.31it/s]
 35%|      | 28/79 [00:01<00:03, 15.48it/s]
 39%|      | 31/79 [00:01<00:02, 17.31it/s]
 43%|     | 34/79 [00:01<00:02, 18.90it/s]
 47%|     | 37/79 [00:02<00:02, 20.34it/s]
 51%|     | 40/79 [00:02<00:01, 21.55it/s]
 54%|    | 43/79 [00:02<00:01, 22.06it/s]
 58%|    | 46/79 [00:02<00:01, 22.69it/s]
 62%|   | 49/79 [00:02<00:01, 23.08it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.29it/s]
  5%|         | 4/79 [00:00<00:41,  1.80it/s]
  9%|         | 7/79 [00:01<00:28,  2.50it/s]
 13%|        | 10/79 [00:01<00:20,  3.42it/s]
 16%|        | 13/79 [00:01<00:14,  4.63it/s]
 20%|        | 16/79 [00:01<00:10,  6.13it/s]
 24%|       | 19/79 [00:01<00:07,  7.93it/s]
 28%|       | 22/79 [00:01<00:05, 10.03it/s]
 32%|      | 25/79 [00:01<00:04, 12.27it/s]
 35%|      | 28/79 [00:01<00:03, 14.49it/s]
 39%|      | 31/79 [00:01<00:02, 16.75it/s]
 43%|     | 34/79 [00:02<00:02, 18.70it/s]
 47%|     | 37/79 [00:02<00:02, 20.41it/s]
 51%|     | 40/79 [00:02<00:01, 21.68it/s]
 54%|    | 43/79 [00:02<00:01, 22.61it/s]
 58%|    | 46/79 [00:02<00:01, 23.42it/s]
 62%|   | 49/79 [00:02<00:01, 23.64it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.27it/s]
 16%|        | 13/79 [00:01<00:14,  4.42it/s]
 20%|        | 16/79 [00:01<00:10,  5.88it/s]
 24%|       | 19/79 [00:01<00:07,  7.65it/s]
 28%|       | 22/79 [00:01<00:05,  9.67it/s]
 32%|      | 25/79 [00:01<00:04, 11.90it/s]
 35%|      | 28/79 [00:01<00:03, 14.19it/s]
 39%|      | 31/79 [00:02<00:02, 16.38it/s]
 43%|     | 34/79 [00:02<00:02, 18.40it/s]
 47%|     | 37/79 [00:02<00:02, 19.97it/s]
 51%|     | 40/79 [00:02<00:01, 21.25it/s]
 54%|    | 43/79 [00:02<00:01, 22.33it/s]
 58%|    | 46/79 [00:02<00:01, 23.07it/s]
 62%|   | 49/79 [00:02<00:01, 23.74it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:29,  2.40it/s]
 13%|        | 10/79 [00:01<00:20,  3.30it/s]
 16%|        | 13/79 [00:01<00:14,  4.46it/s]
 20%|        | 16/79 [00:01<00:10,  5.92it/s]
 24%|       | 19/79 [00:01<00:07,  7.66it/s]
 28%|       | 22/79 [00:01<00:05,  9.69it/s]
 32%|      | 25/79 [00:01<00:04, 11.87it/s]
 35%|      | 28/79 [00:01<00:03, 14.14it/s]
 39%|      | 31/79 [00:02<00:02, 16.30it/s]
 43%|     | 34/79 [00:02<00:02, 18.08it/s]
 47%|     | 37/79 [00:02<00:02, 19.63it/s]
 51%|     | 40/79 [00:02<00:01, 20.92it/s]
 54%|    | 43/79 [00:02<00:01, 21.98it/s]
 58%|    | 46/79 [00:02<00:01, 22.63it/s]
 62%|   | 49/79 [00:02<00:01, 23.46it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:15,  4.39it/s]
 20%|        | 16/79 [00:01<00:10,  5.85it/s]
 24%|       | 19/79 [00:01<00:07,  7.61it/s]
 28%|       | 22/79 [00:01<00:05,  9.66it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 13.93it/s]
 39%|      | 31/79 [00:02<00:02, 16.02it/s]
 43%|     | 34/79 [00:02<00:02, 17.97it/s]
 47%|     | 37/79 [00:02<00:02, 19.72it/s]
 51%|     | 40/79 [00:02<00:01, 21.12it/s]
 54%|    | 43/79 [00:02<00:01, 22.19it/s]
 58%|    | 46/79 [00:02<00:01, 23.17it/s]
 62%|   | 49/79 [00:02<00:01, 23.82it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:00<00:46,  1.64it/s]
  8%|         | 6/79 [00:01<00:32,  2.27it/s]
 11%|        | 9/79 [00:01<00:22,  3.13it/s]
 15%|        | 12/79 [00:01<00:15,  4.23it/s]
 19%|        | 15/79 [00:01<00:11,  5.64it/s]
 23%|       | 18/79 [00:01<00:08,  7.34it/s]
 27%|       | 21/79 [00:01<00:06,  9.30it/s]
 30%|       | 24/79 [00:01<00:04, 11.43it/s]
 34%|      | 27/79 [00:01<00:03, 13.69it/s]
 38%|      | 30/79 [00:02<00:03, 15.81it/s]
 42%|     | 33/79 [00:02<00:02, 17.81it/s]
 46%|     | 36/79 [00:02<00:02, 19.34it/s]
 49%|     | 39/79 [00:02<00:01, 20.63it/s]
 53%|    | 42/79 [00:02<00:01, 21.72it/s]
 57%|    | 45/79 [00:02<00:01, 22.51it/s]
 61%|    | 48/79 [00:02<00:01, 23.16it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.17it/s]
 32%|      | 25/79 [00:01<00:04, 11.35it/s]
 35%|      | 28/79 [00:01<00:03, 13.66it/s]
 39%|      | 31/79 [00:02<00:03, 15.91it/s]
 43%|     | 34/79 [00:02<00:02, 17.94it/s]
 47%|     | 37/79 [00:02<00:02, 19.71it/s]
 51%|     | 40/79 [00:02<00:01, 21.28it/s]
 54%|    | 43/79 [00:02<00:01, 22.07it/s]
 58%|    | 46/79 [00:02<00:01, 22.97it/s]
 62%|   | 49/79 [00:02<00:01, 23.49it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.31it/s]
 32%|      | 25/79 [00:01<00:04, 11.45it/s]
 35%|      | 28/79 [00:01<00:03, 13.72it/s]
 39%|      | 31/79 [00:02<00:03, 15.86it/s]
 43%|     | 34/79 [00:02<00:02, 17.86it/s]
 47%|     | 37/79 [00:02<00:02, 19.36it/s]
 51%|     | 40/79 [00:02<00:01, 20.95it/s]
 54%|    | 43/79 [00:02<00:01, 22.09it/s]
 58%|    | 46/79 [00:02<00:01, 22.81it/s]
 62%|   | 49/79 [00:02<00:01, 23.65it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.25it/s]
 28%|       | 22/79 [00:01<00:06,  9.17it/s]
 32%|      | 25/79 [00:01<00:04, 11.34it/s]
 35%|      | 28/79 [00:01<00:03, 13.55it/s]
 39%|      | 31/79 [00:02<00:03, 15.91it/s]
 43%|     | 34/79 [00:02<00:02, 17.70it/s]
 47%|     | 37/79 [00:02<00:02, 19.35it/s]
 51%|     | 40/79 [00:02<00:01, 20.75it/s]
 54%|    | 43/79 [00:02<00:01, 21.69it/s]
 58%|    | 46/79 [00:02<00:01, 22.55it/s]
 62%|   | 49/79 [00:02<00:01, 22.95it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.24it/s]
 28%|       | 22/79 [00:01<00:06,  9.24it/s]
 32%|      | 25/79 [00:01<00:04, 11.43it/s]
 35%|      | 28/79 [00:01<00:03, 13.71it/s]
 39%|      | 31/79 [00:02<00:03, 15.93it/s]
 43%|     | 34/79 [00:02<00:02, 17.82it/s]
 47%|     | 37/79 [00:02<00:02, 19.66it/s]
 51%|     | 40/79 [00:02<00:01, 21.01it/s]
 54%|    | 43/79 [00:02<00:01, 22.05it/s]
 58%|    | 46/79 [00:02<00:01, 22.91it/s]
 62%|   | 49/79 [00:02<00:01, 23.40it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:06,  9.49it/s]
 32%|      | 25/79 [00:01<00:04, 11.60it/s]
 35%|      | 28/79 [00:01<00:03, 13.76it/s]
 39%|      | 31/79 [00:02<00:03, 15.89it/s]
 43%|     | 34/79 [00:02<00:02, 17.73it/s]
 47%|     | 37/79 [00:02<00:02, 19.48it/s]
 51%|     | 40/79 [00:02<00:01, 20.72it/s]
 54%|    | 43/79 [00:02<00:01, 21.58it/s]
 58%|    | 46/79 [00:02<00:01, 22.28it/s]
 62%|   | 49/79 [00:02<00:01, 22.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.17it/s]
 20%|        | 16/79 [00:01<00:11,  5.57it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.43it/s]
 35%|      | 28/79 [00:01<00:03, 13.73it/s]
 39%|      | 31/79 [00:02<00:03, 15.73it/s]
 43%|     | 34/79 [00:02<00:02, 17.79it/s]
 47%|     | 37/79 [00:02<00:02, 19.30it/s]
 51%|     | 40/79 [00:02<00:01, 20.79it/s]
 54%|    | 43/79 [00:02<00:01, 21.90it/s]
 58%|    | 46/79 [00:02<00:01, 22.93it/s]
 62%|   | 49/79 [00:02<00:01, 23.49it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.49it/s]
 35%|      | 28/79 [00:01<00:03, 13.77it/s]
 39%|      | 31/79 [00:02<00:03, 15.98it/s]
 43%|     | 34/79 [00:02<00:02, 18.03it/s]
 47%|     | 37/79 [00:02<00:02, 19.68it/s]
 51%|     | 40/79 [00:02<00:01, 21.07it/s]
 54%|    | 43/79 [00:02<00:01, 22.12it/s]
 58%|    | 46/79 [00:02<00:01, 22.82it/s]
 62%|   | 49/79 [00:02<00:01, 23.40it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.50it/s]
 35%|      | 28/79 [00:01<00:03, 13.74it/s]
 39%|      | 31/79 [00:02<00:03, 15.96it/s]
 43%|     | 34/79 [00:02<00:02, 18.03it/s]
 47%|     | 37/79 [00:02<00:02, 19.65it/s]
 51%|     | 40/79 [00:02<00:01, 20.76it/s]
 54%|    | 43/79 [00:02<00:01, 21.81it/s]
 58%|    | 46/79 [00:02<00:01, 22.65it/s]
 62%|   | 49/79 [00:02<00:01, 23.21it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.26it/s]
 28%|       | 22/79 [00:01<00:06,  9.24it/s]
 32%|      | 25/79 [00:01<00:04, 11.39it/s]
 35%|      | 28/79 [00:01<00:03, 13.66it/s]
 39%|      | 31/79 [00:02<00:03, 15.84it/s]
 43%|     | 34/79 [00:02<00:02, 17.85it/s]
 47%|     | 37/79 [00:02<00:02, 19.33it/s]
 51%|     | 40/79 [00:02<00:01, 20.72it/s]
 54%|    | 43/79 [00:02<00:01, 21.81it/s]
 58%|    | 46/79 [00:02<00:01, 22.38it/s]
 62%|   | 49/79 [00:02<00:01, 22.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.26it/s]
 28%|       | 22/79 [00:01<00:06,  9.23it/s]
 32%|      | 25/79 [00:01<00:04, 11.39it/s]
 35%|      | 28/79 [00:01<00:03, 13.59it/s]
 39%|      | 31/79 [00:02<00:03, 15.72it/s]
 43%|     | 34/79 [00:02<00:02, 17.69it/s]
 47%|     | 37/79 [00:02<00:02, 19.34it/s]
 51%|     | 40/79 [00:02<00:01, 20.62it/s]
 54%|    | 43/79 [00:02<00:01, 21.48it/s]
 58%|    | 46/79 [00:02<00:01, 22.42it/s]
 62%|   | 49/79 [00:02<00:01, 23.17it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.32it/s]
 32%|      | 25/79 [00:01<00:04, 11.50it/s]
 35%|      | 28/79 [00:01<00:03, 13.66it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.56it/s]
 47%|     | 37/79 [00:02<00:02, 19.17it/s]
 51%|     | 40/79 [00:02<00:01, 20.52it/s]
 54%|    | 43/79 [00:02<00:01, 21.53it/s]
 58%|    | 46/79 [00:02<00:01, 22.44it/s]
 62%|   | 49/79 [00:02<00:01, 23.10it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.25it/s]
 32%|      | 25/79 [00:01<00:04, 11.38it/s]
 35%|      | 28/79 [00:01<00:03, 13.63it/s]
 39%|      | 31/79 [00:02<00:03, 15.74it/s]
 43%|     | 34/79 [00:02<00:02, 17.62it/s]
 47%|     | 37/79 [00:02<00:02, 19.20it/s]
 51%|     | 40/79 [00:02<00:01, 20.67it/s]
 54%|    | 43/79 [00:02<00:01, 21.77it/s]
 58%|    | 46/79 [00:02<00:01, 22.41it/s]
 62%|   | 49/79 [00:02<00:01, 22.88it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.20it/s]
 28%|       | 22/79 [00:01<00:06,  9.13it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.58it/s]
 39%|      | 31/79 [00:02<00:03, 15.73it/s]
 43%|     | 34/79 [00:02<00:02, 17.72it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.91it/s]
 54%|    | 43/79 [00:02<00:01, 21.97it/s]
 58%|    | 46/79 [00:02<00:01, 22.85it/s]
 62%|   | 49/79 [00:02<00:01, 23.49it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.34it/s]
 32%|      | 25/79 [00:01<00:04, 11.52it/s]
 35%|      | 28/79 [00:01<00:03, 13.75it/s]
 39%|      | 31/79 [00:02<00:03, 15.74it/s]
 43%|     | 34/79 [00:02<00:02, 17.67it/s]
 47%|     | 37/79 [00:02<00:02, 19.25it/s]
 51%|     | 40/79 [00:02<00:01, 20.52it/s]
 54%|    | 43/79 [00:02<00:01, 21.42it/s]
 58%|    | 46/79 [00:02<00:01, 22.35it/s]
 62%|   | 49/79 [00:02<00:01, 22.69it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.26it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.37it/s]
 35%|      | 28/79 [00:01<00:03, 13.56it/s]
 39%|      | 31/79 [00:02<00:03, 15.75it/s]
 43%|     | 34/79 [00:02<00:02, 17.66it/s]
 47%|     | 37/79 [00:02<00:02, 19.32it/s]
 51%|     | 40/79 [00:02<00:01, 20.67it/s]
 54%|    | 43/79 [00:02<00:01, 21.86it/s]
 58%|    | 46/79 [00:02<00:01, 22.35it/s]
 62%|   | 49/79 [00:02<00:01, 22.70it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.13it/s]
 32%|      | 25/79 [00:01<00:04, 11.24it/s]
 35%|      | 28/79 [00:01<00:03, 13.49it/s]
 39%|      | 31/79 [00:02<00:03, 15.62it/s]
 43%|     | 34/79 [00:02<00:02, 17.62it/s]
 47%|     | 37/79 [00:02<00:02, 19.34it/s]
 51%|     | 40/79 [00:02<00:01, 20.56it/s]
 54%|    | 43/79 [00:02<00:01, 21.73it/s]
 58%|    | 46/79 [00:02<00:01, 22.58it/s]
 62%|   | 49/79 [00:02<00:01, 23.19it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.05it/s]
 28%|       | 22/79 [00:01<00:06,  9.02it/s]
 32%|      | 25/79 [00:01<00:04, 11.17it/s]
 35%|      | 28/79 [00:01<00:03, 13.44it/s]
 39%|      | 31/79 [00:02<00:03, 15.65it/s]
 43%|     | 34/79 [00:02<00:02, 17.71it/s]
 47%|     | 37/79 [00:02<00:02, 19.52it/s]
 51%|     | 40/79 [00:02<00:01, 20.95it/s]
 54%|    | 43/79 [00:02<00:01, 22.00it/s]
 58%|    | 46/79 [00:02<00:01, 22.92it/s]
 62%|   | 49/79 [00:02<00:01, 23.23it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.39it/s]
 24%|       | 19/79 [00:01<00:08,  7.05it/s]
 28%|       | 22/79 [00:01<00:06,  9.01it/s]
 32%|      | 25/79 [00:01<00:04, 11.13it/s]
 35%|      | 28/79 [00:01<00:03, 13.36it/s]
 39%|      | 31/79 [00:02<00:03, 15.46it/s]
 43%|     | 34/79 [00:02<00:02, 17.39it/s]
 47%|     | 37/79 [00:02<00:02, 19.17it/s]
 51%|     | 40/79 [00:02<00:01, 20.34it/s]
 54%|    | 43/79 [00:02<00:01, 21.65it/s]
 58%|    | 46/79 [00:02<00:01, 22.07it/s]
 62%|   | 49/79 [00:02<00:01, 22.76it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.95it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.89it/s]
 32%|      | 25/79 [00:01<00:04, 11.05it/s]
 35%|      | 28/79 [00:02<00:03, 13.33it/s]
 39%|      | 31/79 [00:02<00:03, 15.61it/s]
 43%|     | 34/79 [00:02<00:02, 17.62it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.88it/s]
 54%|    | 43/79 [00:02<00:01, 22.02it/s]
 58%|    | 46/79 [00:02<00:01, 22.86it/s]
 62%|   | 49/79 [00:02<00:01, 23.49it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:00<00:46,  1.62it/s]
  8%|         | 6/79 [00:01<00:32,  2.25it/s]
 11%|        | 9/79 [00:01<00:22,  3.09it/s]
 15%|        | 12/79 [00:01<00:15,  4.20it/s]
 19%|        | 15/79 [00:01<00:11,  5.58it/s]
 23%|       | 18/79 [00:01<00:08,  7.26it/s]
 27%|       | 21/79 [00:01<00:06,  9.20it/s]
 30%|       | 24/79 [00:01<00:04, 11.33it/s]
 34%|      | 27/79 [00:01<00:03, 13.56it/s]
 38%|      | 30/79 [00:02<00:03, 15.49it/s]
 42%|     | 33/79 [00:02<00:02, 17.36it/s]
 46%|     | 36/79 [00:02<00:02, 18.94it/s]
 49%|     | 39/79 [00:02<00:01, 20.34it/s]
 53%|    | 42/79 [00:02<00:01, 21.42it/s]
 57%|    | 45/79 [00:02<00:01, 22.10it/s]
 61%|    | 48/79 [00:02<00:01, 22.63it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:01<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.21it/s]
 32%|      | 25/79 [00:01<00:04, 11.34it/s]
 35%|      | 28/79 [00:01<00:03, 13.48it/s]
 39%|      | 31/79 [00:02<00:03, 15.61it/s]
 43%|     | 34/79 [00:02<00:02, 17.47it/s]
 47%|     | 37/79 [00:02<00:02, 19.06it/s]
 51%|     | 40/79 [00:02<00:01, 20.12it/s]
 54%|    | 43/79 [00:02<00:01, 21.44it/s]
 58%|    | 46/79 [00:02<00:01, 22.26it/s]
 62%|   | 49/79 [00:02<00:01, 22.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.48it/s]
 24%|       | 19/79 [00:01<00:08,  7.14it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.21it/s]
 35%|      | 28/79 [00:02<00:03, 13.40it/s]
 39%|      | 31/79 [00:02<00:03, 15.56it/s]
 43%|     | 34/79 [00:02<00:02, 17.52it/s]
 47%|     | 37/79 [00:02<00:02, 19.36it/s]
 51%|     | 40/79 [00:02<00:01, 20.63it/s]
 54%|    | 43/79 [00:02<00:01, 21.57it/s]
 58%|    | 46/79 [00:02<00:01, 21.99it/s]
 62%|   | 49/79 [00:02<00:01, 22.84it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 28%|       | 22/79 [00:01<00:06,  9.14it/s]
 32%|      | 25/79 [00:01<00:04, 11.28it/s]
 35%|      | 28/79 [00:01<00:03, 13.48it/s]
 39%|      | 31/79 [00:02<00:03, 15.59it/s]
 43%|     | 34/79 [00:02<00:02, 17.50it/s]
 47%|     | 37/79 [00:02<00:02, 19.34it/s]
 51%|     | 40/79 [00:02<00:01, 20.69it/s]
 54%|    | 43/79 [00:02<00:01, 21.37it/s]
 58%|    | 46/79 [00:02<00:01, 22.18it/s]
 62%|   | 49/79 [00:02<00:01, 23.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.23it/s]
 24%|       | 19/79 [00:01<00:08,  6.87it/s]
 28%|       | 22/79 [00:01<00:06,  8.77it/s]
 32%|      | 25/79 [00:01<00:04, 10.94it/s]
 35%|      | 28/79 [00:02<00:03, 13.15it/s]
 39%|      | 31/79 [00:02<00:03, 15.40it/s]
 43%|     | 34/79 [00:02<00:02, 17.42it/s]
 47%|     | 37/79 [00:02<00:02, 19.18it/s]
 51%|     | 40/79 [00:02<00:01, 20.48it/s]
 54%|    | 43/79 [00:02<00:01, 21.39it/s]
 58%|    | 46/79 [00:02<00:01, 22.32it/s]
 62%|   | 49/79 [00:02<00:01, 22.99it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.92it/s]
 28%|       | 22/79 [00:01<00:06,  8.86it/s]
 32%|      | 25/79 [00:01<00:04, 10.99it/s]
 35%|      | 28/79 [00:02<00:03, 13.20it/s]
 39%|      | 31/79 [00:02<00:03, 15.23it/s]
 43%|     | 34/79 [00:02<00:02, 17.29it/s]
 47%|     | 37/79 [00:02<00:02, 19.06it/s]
 51%|     | 40/79 [00:02<00:01, 20.43it/s]
 54%|    | 43/79 [00:02<00:01, 21.61it/s]
 58%|    | 46/79 [00:02<00:01, 22.51it/s]
 62%|   | 49/79 [00:02<00:01, 22.92it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:17,  3.87it/s]
 20%|        | 16/79 [00:01<00:12,  5.18it/s]
 24%|       | 19/79 [00:01<00:08,  6.77it/s]
 28%|       | 22/79 [00:01<00:06,  8.64it/s]
 32%|      | 25/79 [00:01<00:05, 10.70it/s]
 35%|      | 28/79 [00:02<00:03, 12.90it/s]
 39%|      | 31/79 [00:02<00:03, 15.02it/s]
 43%|     | 34/79 [00:02<00:02, 17.03it/s]
 47%|     | 37/79 [00:02<00:02, 18.72it/s]
 51%|     | 40/79 [00:02<00:01, 20.15it/s]
 54%|    | 43/79 [00:02<00:01, 21.21it/s]
 58%|    | 46/79 [00:02<00:01, 21.98it/s]
 62%|   | 49/79 [00:02<00:01, 22.82it/s]
 66%|   | 52/79 [00:03<00:01, 23.43it/s]
 70%|   | 55/79 [00:02<00:01, 23.65it/s]
 73%|  | 58/79 [00:02<00:00, 24.03it/s]
 77%|  | 61/79 [00:03<00:00, 24.08it/s]
 81%|  | 64/79 [00:03<00:00, 24.28it/s]
 85%| | 67/79 [00:03<00:00, 24.38it/s]
 89%| | 70/79 [00:03<00:00, 24.23it/s]
 92%|| 73/79 [00:03<00:00, 24.50it/s]
 96%|| 76/79 [00:03<00:00, 25.31it/s]
100%|| 79/79 [00:03<00:00, 26.20it/s]
, 23.58it/s]
 70%|   | 55/79 [00:02<00:00, 24.11it/s]
 73%|  | 58/79 [00:03<00:00, 24.31it/s]
 77%|  | 61/79 [00:03<00:00, 24.83it/s]
 81%|  | 64/79 [00:03<00:00, 24.67it/s]
 85%| | 67/79 [00:03<00:00, 24.50it/s]
 89%| | 70/79 [00:03<00:00, 24.28it/s]
 92%|| 73/79 [00:03<00:00, 24.96it/s]
 96%|| 76/79 [00:03<00:00, 25.62it/s]
100%|| 79/79 [00:03<00:00, 26.48it/s]
, 23.95it/s]
 70%|   | 55/79 [00:02<00:00, 24.25it/s]
 73%|  | 58/79 [00:03<00:00, 24.36it/s]
 77%|  | 61/79 [00:03<00:00, 24.72it/s]
 81%|  | 64/79 [00:03<00:00, 24.35it/s]
 85%| | 67/79 [00:03<00:00, 24.52it/s]
 89%| | 70/79 [00:03<00:00, 24.55it/s]
 92%|| 73/79 [00:03<00:00, 25.08it/s]
 96%|| 76/79 [00:03<00:00, 25.76it/s]
100%|| 79/79 [00:03<00:00, 26.65it/s]
, 24.19it/s]
 70%|   | 55/79 [00:02<00:00, 24.75it/s]
 73%|  | 58/79 [00:03<00:00, 24.92it/s]
 77%|  | 61/79 [00:03<00:00, 24.87it/s]
 81%|  | 64/79 [00:03<00:00, 24.98it/s]
 85%| | 67/79 [00:03<00:00, 25.15it/s]
 89%| | 70/79 [00:03<00:00, 25.08it/s]
 92%|| 73/79 [00:03<00:00, 25.54it/s]
 96%|| 76/79 [00:03<00:00, 26.11it/s]
100%|| 79/79 [00:03<00:00, 26.90it/s]
, 23.68it/s]
 70%|   | 55/79 [00:02<00:00, 24.08it/s]
 73%|  | 58/79 [00:03<00:00, 24.20it/s]
 77%|  | 61/79 [00:03<00:00, 24.23it/s]
 81%|  | 64/79 [00:03<00:00, 24.45it/s]
 85%| | 67/79 [00:03<00:00, 24.65it/s]
 89%| | 70/79 [00:03<00:00, 24.74it/s]
 92%|| 73/79 [00:03<00:00, 24.98it/s]
 96%|| 76/79 [00:03<00:00, 25.60it/s]
100%|| 79/79 [00:03<00:00, 26.38it/s]
, 23.95it/s]
 70%|   | 55/79 [00:03<00:00, 24.33it/s]
 73%|  | 58/79 [00:03<00:00, 24.50it/s]
 77%|  | 61/79 [00:03<00:00, 24.97it/s]
 81%|  | 64/79 [00:03<00:00, 25.07it/s]
 85%| | 67/79 [00:03<00:00, 25.06it/s]
 89%| | 70/79 [00:03<00:00, 25.33it/s]
 92%|| 73/79 [00:03<00:00, 25.64it/s]
 96%|| 76/79 [00:03<00:00, 26.25it/s]
100%|| 79/79 [00:03<00:00, 27.04it/s]
, 24.17it/s]
 70%|   | 55/79 [00:03<00:00, 24.76it/s]
 73%|  | 58/79 [00:03<00:00, 24.68it/s]
 77%|  | 61/79 [00:03<00:00, 24.94it/s]
 81%|  | 64/79 [00:03<00:00, 24.99it/s]
 85%| | 67/79 [00:03<00:00, 24.95it/s]
 89%| | 70/79 [00:03<00:00, 25.22it/s]
 92%|| 73/79 [00:03<00:00, 25.23it/s]
 96%|| 76/79 [00:03<00:00, 25.95it/s]
100%|| 79/79 [00:03<00:00, 26.71it/s]
, 23.85it/s]
 70%|   | 55/79 [00:03<00:00, 24.14it/s]
 73%|  | 58/79 [00:03<00:00, 24.64it/s]
 77%|  | 61/79 [00:03<00:00, 24.91it/s]
 81%|  | 64/79 [00:03<00:00, 24.95it/s]
 85%| | 67/79 [00:03<00:00, 25.00it/s]
 89%| | 70/79 [00:03<00:00, 25.31it/s]
 92%|| 73/79 [00:03<00:00, 25.56it/s]
 96%|| 76/79 [00:03<00:00, 26.53it/s]
100%|| 79/79 [00:03<00:00, 26.85it/s]
, 23.74it/s]
 70%|   | 55/79 [00:03<00:00, 24.18it/s]
 73%|  | 58/79 [00:03<00:00, 24.50it/s]
 77%|  | 61/79 [00:03<00:00, 24.51it/s]
 81%|  | 64/79 [00:03<00:00, 24.76it/s]
 85%| | 67/79 [00:03<00:00, 24.89it/s]
 89%| | 70/79 [00:03<00:00, 24.96it/s]
 92%|| 73/79 [00:03<00:00, 25.25it/s]
 96%|| 76/79 [00:03<00:00, 25.93it/s]
100%|| 79/79 [00:03<00:00, 26.72it/s]
, 24.28it/s]
 70%|   | 55/79 [00:03<00:00, 24.55it/s]
 73%|  | 58/79 [00:03<00:00, 24.37it/s]
 77%|  | 61/79 [00:03<00:00, 24.83it/s]
 81%|  | 64/79 [00:03<00:00, 24.70it/s]
 85%| | 67/79 [00:03<00:00, 24.86it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 25.04it/s]
 96%|| 76/79 [00:03<00:00, 26.10it/s]
100%|| 79/79 [00:03<00:00, 26.40it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:01, 23.76it/s]
 73%|  | 58/79 [00:03<00:00, 24.10it/s]
 77%|  | 61/79 [00:03<00:00, 24.50it/s]
 81%|  | 64/79 [00:03<00:00, 24.73it/s]
 85%| | 67/79 [00:03<00:00, 24.96it/s]
 89%| | 70/79 [00:03<00:00, 24.79it/s]
 92%|| 73/79 [00:03<00:00, 25.07it/s]
 96%|| 76/79 [00:03<00:00, 25.76it/s]
100%|| 79/79 [00:03<00:00, 26.57it/s]
, 23.53it/s]
 70%|   | 55/79 [00:03<00:01, 23.82it/s]
 73%|  | 58/79 [00:03<00:00, 24.00it/s]
 77%|  | 61/79 [00:03<00:00, 24.20it/s]
 81%|  | 64/79 [00:03<00:00, 24.51it/s]
 85%| | 67/79 [00:03<00:00, 24.67it/s]
 89%| | 70/79 [00:03<00:00, 24.90it/s]
 92%|| 73/79 [00:03<00:00, 25.13it/s]
 96%|| 76/79 [00:03<00:00, 25.98it/s]
100%|| 79/79 [00:03<00:00, 26.88it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:01, 23.82it/s]
 73%|  | 58/79 [00:03<00:00, 24.26it/s]
 77%|  | 61/79 [00:03<00:00, 24.59it/s]
 81%|  | 64/79 [00:03<00:00, 24.67it/s]
 85%| | 67/79 [00:03<00:00, 24.67it/s]
 89%| | 70/79 [00:03<00:00, 24.90it/s]
 92%|| 73/79 [00:03<00:00, 25.00it/s]
 96%|| 76/79 [00:03<00:00, 25.64it/s]
100%|| 79/79 [00:03<00:00, 26.42it/s]
, 23.09it/s]
 70%|   | 55/79 [00:03<00:01, 23.58it/s]
 73%|  | 58/79 [00:03<00:00, 24.06it/s]
 77%|  | 61/79 [00:03<00:00, 24.16it/s]
 81%|  | 64/79 [00:03<00:00, 24.25it/s]
 85%| | 67/79 [00:03<00:00, 24.53it/s]
 89%| | 70/79 [00:03<00:00, 24.69it/s]
 92%|| 73/79 [00:03<00:00, 24.94it/s]
 96%|| 76/79 [00:03<00:00, 25.74it/s]
100%|| 79/79 [00:03<00:00, 26.66it/s]
, 23.45it/s]
 70%|   | 55/79 [00:03<00:01, 23.56it/s]
 73%|  | 58/79 [00:03<00:00, 23.70it/s]
 77%|  | 61/79 [00:03<00:00, 23.80it/s]
 81%|  | 64/79 [00:03<00:00, 23.84it/s]
 85%| | 67/79 [00:03<00:00, 24.09it/s]
 89%| | 70/79 [00:03<00:00, 24.15it/s]
 92%|| 73/79 [00:03<00:00, 24.61it/s]
 96%|| 76/79 [00:03<00:00, 25.34it/s]
100%|| 79/79 [00:03<00:00, 26.34it/s]
, 23.24it/s]
 70%|   | 55/79 [00:03<00:01, 23.91it/s]
 73%|  | 58/79 [00:03<00:00, 24.04it/s]
 77%|  | 61/79 [00:03<00:00, 24.39it/s]
 81%|  | 64/79 [00:03<00:00, 24.42it/s]
 85%| | 67/79 [00:03<00:00, 24.82it/s]
 89%| | 70/79 [00:03<00:00, 24.84it/s]
 92%|| 73/79 [00:03<00:00, 25.21it/s]
 96%|| 76/79 [00:03<00:00, 25.88it/s]
100%|| 79/79 [00:03<00:00, 26.81it/s]
, 23.27it/s]
 70%|   | 55/79 [00:03<00:01, 23.73it/s]
 73%|  | 58/79 [00:03<00:00, 24.18it/s]
 77%|  | 61/79 [00:03<00:00, 24.17it/s]
 81%|  | 64/79 [00:03<00:00, 24.14it/s]
 85%| | 67/79 [00:03<00:00, 24.40it/s]
 89%| | 70/79 [00:03<00:00, 24.44it/s]
 92%|| 73/79 [00:03<00:00, 24.98it/s]
 96%|| 76/79 [00:03<00:00, 25.68it/s]
100%|| 79/79 [00:03<00:00, 26.55it/s]
, 23.74it/s]
 70%|   | 55/79 [00:03<00:01, 23.93it/s]
 73%|  | 58/79 [00:03<00:00, 24.27it/s]
 77%|  | 61/79 [00:03<00:00, 24.47it/s]
 81%|  | 64/79 [00:03<00:00, 24.76it/s]
 85%| | 67/79 [00:03<00:00, 25.05it/s]
 89%| | 70/79 [00:03<00:00, 24.95it/s]
 92%|| 73/79 [00:03<00:00, 25.12it/s]
 96%|| 76/79 [00:03<00:00, 25.76it/s]
100%|| 79/79 [00:03<00:00, 26.47it/s]
65it/s]
 68%|   | 54/79 [00:03<00:01, 24.25it/s]
 72%|  | 57/79 [00:03<00:00, 24.15it/s]
 76%|  | 60/79 [00:03<00:00, 24.16it/s]
 80%|  | 63/79 [00:03<00:00, 24.20it/s]
 84%| | 66/79 [00:03<00:00, 24.09it/s]
 87%| | 69/79 [00:03<00:00, 24.13it/s]
 91%| | 72/79 [00:03<00:00, 24.43it/s]
 95%|| 75/79 [00:03<00:00, 25.16it/s]
 99%|| 78/79 [00:03<00:00, 25.74it/s]
100%|| 79/79 [00:04<00:00, 19.43it/s]
, 23.54it/s]
 70%|   | 55/79 [00:03<00:01, 23.68it/s]
 73%|  | 58/79 [00:03<00:00, 24.23it/s]
 77%|  | 61/79 [00:03<00:00, 24.18it/s]
 81%|  | 64/79 [00:03<00:00, 24.51it/s]
 85%| | 67/79 [00:03<00:00, 24.48it/s]
 89%| | 70/79 [00:03<00:00, 24.68it/s]
 92%|| 73/79 [00:03<00:00, 25.08it/s]
 96%|| 76/79 [00:03<00:00, 25.84it/s]
100%|| 79/79 [00:03<00:00, 26.69it/s]
, 23.83it/s]
 70%|   | 55/79 [00:03<00:00, 24.11it/s]
 73%|  | 58/79 [00:03<00:00, 24.41it/s]
 77%|  | 61/79 [00:03<00:00, 24.59it/s]
 81%|  | 64/79 [00:03<00:00, 24.70it/s]
 85%| | 67/79 [00:03<00:00, 24.90it/s]
 89%| | 70/79 [00:03<00:00, 24.74it/s]
 92%|| 73/79 [00:03<00:00, 25.05it/s]
 96%|| 76/79 [00:03<00:00, 25.82it/s]
100%|| 79/79 [00:04<00:00, 26.68it/s]
, 23.41it/s]
 70%|   | 55/79 [00:03<00:01, 23.94it/s]
 73%|  | 58/79 [00:03<00:00, 24.14it/s]
 77%|  | 61/79 [00:03<00:00, 24.15it/s]
 81%|  | 64/79 [00:03<00:00, 24.00it/s]
 85%| | 67/79 [00:03<00:00, 24.29it/s]
 89%| | 70/79 [00:03<00:00, 24.24it/s]
 92%|| 73/79 [00:03<00:00, 24.69it/s]
 96%|| 76/79 [00:03<00:00, 25.37it/s]
100%|| 79/79 [00:04<00:00, 26.21it/s]
, 24.11it/s]
 70%|   | 55/79 [00:03<00:00, 24.57it/s]
 73%|  | 58/79 [00:03<00:00, 24.76it/s]
 77%|  | 61/79 [00:03<00:00, 24.99it/s]
 81%|  | 64/79 [00:03<00:00, 24.96it/s]
 85%| | 67/79 [00:03<00:00, 25.00it/s]
 89%| | 70/79 [00:03<00:00, 24.73it/s]
 92%|| 73/79 [00:03<00:00, 25.17it/s]
 96%|| 76/79 [00:03<00:00, 25.59it/s]
100%|| 79/79 [00:03<00:00, 26.51it/s]
, 23.37it/s]
 70%|   | 55/79 [00:03<00:00, 24.02it/s]
 73%|  | 58/79 [00:03<00:00, 24.27it/s]
 77%|  | 61/79 [00:03<00:00, 24.52it/s]
 81%|  | 64/79 [00:03<00:00, 24.65it/s]
 85%| | 67/79 [00:03<00:00, 24.66it/s]
 89%| | 70/79 [00:03<00:00, 24.82it/s]
 92%|| 73/79 [00:03<00:00, 25.02it/s]
 96%|| 76/79 [00:03<00:00, 25.73it/s]
100%|| 79/79 [00:04<00:00, 26.38it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:01, 23.56it/s]
 73%|  | 58/79 [00:03<00:00, 23.87it/s]
 77%|  | 61/79 [00:03<00:00, 24.17it/s]
 81%|  | 64/79 [00:03<00:00, 24.31it/s]
 85%| | 67/79 [00:03<00:00, 24.44it/s]
 89%| | 70/79 [00:03<00:00, 24.19it/s]
 92%|| 73/79 [00:03<00:00, 24.74it/s]
 96%|| 76/79 [00:03<00:00, 25.42it/s]
100%|| 79/79 [00:04<00:00, 26.37it/s]
, 23.54it/s]
 70%|   | 55/79 [00:03<00:01, 23.71it/s]
 73%|  | 58/79 [00:03<00:00, 23.97it/s]
 77%|  | 61/79 [00:03<00:00, 24.41it/s]
 81%|  | 64/79 [00:03<00:00, 24.53it/s]
 85%| | 67/79 [00:03<00:00, 24.53it/s]
 89%| | 70/79 [00:03<00:00, 24.66it/s]
 92%|| 73/79 [00:03<00:00, 25.02it/s]
 96%|| 76/79 [00:03<00:00, 25.74it/s]
100%|| 79/79 [00:04<00:00, 26.69it/s]
, 23.12it/s]
 70%|   | 55/79 [00:03<00:01, 23.71it/s]
 73%|  | 58/79 [00:03<00:00, 24.12it/s]
 77%|  | 61/79 [00:03<00:00, 24.02it/s]
 81%|  | 64/79 [00:03<00:00, 23.76it/s]
 85%| | 67/79 [00:03<00:00, 24.20it/s]
 89%| | 70/79 [00:03<00:00, 24.18it/s]
 92%|| 73/79 [00:03<00:00, 24.73it/s]
 96%|| 76/79 [00:03<00:00, 25.35it/s]
100%|| 79/79 [00:04<00:00, 26.43it/s]
, 23.24it/s]
 70%|   | 55/79 [00:03<00:01, 23.72it/s]
 73%|  | 58/79 [00:03<00:00, 23.92it/s]
 77%|  | 61/79 [00:03<00:00, 23.95it/s]
 81%|  | 64/79 [00:03<00:00, 24.11it/s]
 85%| | 67/79 [00:03<00:00, 24.11it/s]
 89%| | 70/79 [00:03<00:00, 24.16it/s]
 92%|| 73/79 [00:03<00:00, 24.62it/s]
 96%|| 76/79 [00:03<00:00, 25.34it/s]
100%|| 79/79 [00:04<00:00, 26.31it/s]
, 23.21it/s]
 70%|   | 55/79 [00:03<00:01, 23.46it/s]
 73%|  | 58/79 [00:03<00:00, 23.76it/s]
 77%|  | 61/79 [00:03<00:00, 24.20it/s]
 81%|  | 64/79 [00:03<00:00, 24.26it/s]
 85%| | 67/79 [00:03<00:00, 24.52it/s]
 89%| | 70/79 [00:03<00:00, 24.80it/s]
 92%|| 73/79 [00:03<00:00, 25.11it/s]
 96%|| 76/79 [00:03<00:00, 25.82it/s]
100%|| 79/79 [00:04<00:00, 26.70it/s]
20it/s]
 68%|   | 54/79 [00:03<00:01, 23.69it/s]
 72%|  | 57/79 [00:03<00:00, 23.90it/s]
 76%|  | 60/79 [00:03<00:00, 24.13it/s]
 80%|  | 63/79 [00:03<00:00, 24.24it/s]
 84%| | 66/79 [00:03<00:00, 24.27it/s]
 87%| | 69/79 [00:03<00:00, 24.22it/s]
 91%| | 72/79 [00:03<00:00, 24.46it/s]
 95%|| 75/79 [00:03<00:00, 25.25it/s]
 99%|| 78/79 [00:04<00:00, 25.65it/s]
100%|| 79/79 [00:04<00:00, 19.21it/s]
, 23.36it/s]
 70%|   | 55/79 [00:03<00:01, 23.57it/s]
 73%|  | 58/79 [00:03<00:00, 23.60it/s]
 77%|  | 61/79 [00:03<00:00, 23.93it/s]
 81%|  | 64/79 [00:03<00:00, 24.02it/s]
 85%| | 67/79 [00:03<00:00, 24.02it/s]
 89%| | 70/79 [00:03<00:00, 23.94it/s]
 92%|| 73/79 [00:03<00:00, 24.33it/s]
 96%|| 76/79 [00:03<00:00, 25.09it/s]
100%|| 79/79 [00:04<00:00, 25.94it/s]
, 23.33it/s]
 70%|   | 55/79 [00:03<00:01, 23.76it/s]
 73%|  | 58/79 [00:03<00:00, 23.71it/s]
 77%|  | 61/79 [00:03<00:00, 23.76it/s]
 81%|  | 64/79 [00:03<00:00, 24.08it/s]
 85%| | 67/79 [00:03<00:00, 24.00it/s]
 89%| | 70/79 [00:03<00:00, 23.96it/s]
 92%|| 73/79 [00:03<00:00, 24.46it/s]
 96%|| 76/79 [00:04<00:00, 25.09it/s]
100%|| 79/79 [00:04<00:00, 26.07it/s]
2020-06-23 15:47:43,362 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.215037 (0.02697623748779297 s / img per device, on 32 devices)
2020-06-23 15:47:43,381 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:47:43,381 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:47:43,399 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592952470578, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 14, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592952470579, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 14}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 15:47:52,669 maskrcnn_benchmark.trainer INFO: eta: 0:59:05  iter: 11940  loss: 0.5082 (0.7145)  loss_classifier: 0.1264 (0.2578)  loss_box_reg: 0.0844 (0.1156)  loss_mask: 0.2297 (0.2876)  loss_objectness: 0.0146 (0.0340)  loss_rpn_box_reg: 0.0062 (0.0195)  time: 0.1100 (0.1263)  data: 0.0015 (0.0180)  lr: 0.016000  max mem: 5140
2020-06-23 15:47:54,855 maskrcnn_benchmark.trainer INFO: eta: 0:59:01  iter: 11960  loss: 0.5507 (0.7143)  loss_classifier: 0.1944 (0.2577)  loss_box_reg: 0.0985 (0.1156)  loss_mask: 0.2522 (0.2875)  loss_objectness: 0.0127 (0.0340)  loss_rpn_box_reg: 0.0089 (0.0195)  time: 0.1085 (0.1263)  data: 0.0015 (0.0180)  lr: 0.016000  max mem: 5140
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.58s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 15:47:57,048 maskrcnn_benchmark.trainer INFO: eta: 0:58:58  iter: 11980  loss: 0.4902 (0.7139)  loss_classifier: 0.1486 (0.2575)  loss_box_reg: 0.0795 (0.1155)  loss_mask: 0.2265 (0.2875)  loss_objectness: 0.0092 (0.0339)  loss_rpn_box_reg: 0.0069 (0.0195)  time: 0.1091 (0.1263)  data: 0.0015 (0.0180)  lr: 0.016000  max mem: 5140
DONE (t=1.43s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37079
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.58691
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.40016
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21230
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.39759
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48565
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30865
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.48934
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51418
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.32429
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.54827
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.64572
2020-06-23 15:47:59,242 maskrcnn_benchmark.trainer INFO: eta: 0:58:55  iter: 12000  loss: 0.5904 (0.7138)  loss_classifier: 0.1877 (0.2575)  loss_box_reg: 0.0877 (0.1155)  loss_mask: 0.2587 (0.2874)  loss_objectness: 0.0158 (0.0339)  loss_rpn_box_reg: 0.0091 (0.0195)  time: 0.1094 (0.1263)  data: 0.0016 (0.0179)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:01,435 maskrcnn_benchmark.trainer INFO: eta: 0:58:51  iter: 12020  loss: 0.5091 (0.7134)  loss_classifier: 0.1630 (0.2573)  loss_box_reg: 0.0678 (0.1155)  loss_mask: 0.2431 (0.2873)  loss_objectness: 0.0162 (0.0339)  loss_rpn_box_reg: 0.0047 (0.0195)  time: 0.1092 (0.1262)  data: 0.0015 (0.0179)  lr: 0.001600  max mem: 5140
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:48:03,634 maskrcnn_benchmark.trainer INFO: eta: 0:58:48  iter: 12040  loss: 0.5258 (0.7131)  loss_classifier: 0.1592 (0.2572)  loss_box_reg: 0.0534 (0.1154)  loss_mask: 0.2407 (0.2873)  loss_objectness: 0.0105 (0.0339)  loss_rpn_box_reg: 0.0060 (0.0194)  time: 0.1086 (0.1262)  data: 0.0014 (0.0179)  lr: 0.001600  max mem: 5140
DONE (t=1.53s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:48:05,827 maskrcnn_benchmark.trainer INFO: eta: 0:58:45  iter: 12060  loss: 0.5415 (0.7129)  loss_classifier: 0.1571 (0.2570)  loss_box_reg: 0.0924 (0.1154)  loss_mask: 0.2356 (0.2872)  loss_objectness: 0.0161 (0.0339)  loss_rpn_box_reg: 0.0080 (0.0194)  time: 0.1097 (0.1262)  data: 0.0014 (0.0179)  lr: 0.001600  max mem: 5140
DONE (t=2.35s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.33864
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.55396
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.36042
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15325
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36617
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49964
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29085
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.44944
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.46984
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27182
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50789
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.61621
2020-06-23 15:48:07,181 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.37078704811006186, segm mAP: 0.3386408126636147
:::MLLOG {"namespace": "", "time_ms": 1592952487181, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.37078704811006186, "SEGM": 0.3386408126636147}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 13}}
:::MLLOG {"namespace": "", "time_ms": 1592952487181, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 13}}
2020-06-23 15:48:08,183 maskrcnn_benchmark.trainer INFO: eta: 0:58:42  iter: 12080  loss: 0.5265 (0.7127)  loss_classifier: 0.1984 (0.2570)  loss_box_reg: 0.0971 (0.1153)  loss_mask: 0.2458 (0.2871)  loss_objectness: 0.0170 (0.0338)  loss_rpn_box_reg: 0.0113 (0.0194)  time: 0.1093 (0.1262)  data: 0.0016 (0.0178)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:10,374 maskrcnn_benchmark.trainer INFO: eta: 0:58:39  iter: 12100  loss: 0.5504 (0.7124)  loss_classifier: 0.1674 (0.2568)  loss_box_reg: 0.0923 (0.1153)  loss_mask: 0.2688 (0.2871)  loss_objectness: 0.0163 (0.0338)  loss_rpn_box_reg: 0.0078 (0.0194)  time: 0.1093 (0.1261)  data: 0.0015 (0.0178)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:12,563 maskrcnn_benchmark.trainer INFO: eta: 0:58:35  iter: 12120  loss: 0.5046 (0.7121)  loss_classifier: 0.1565 (0.2567)  loss_box_reg: 0.0761 (0.1152)  loss_mask: 0.2318 (0.2870)  loss_objectness: 0.0139 (0.0338)  loss_rpn_box_reg: 0.0102 (0.0194)  time: 0.1093 (0.1261)  data: 0.0015 (0.0178)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:14,753 maskrcnn_benchmark.trainer INFO: eta: 0:58:32  iter: 12140  loss: 0.4910 (0.7118)  loss_classifier: 0.1329 (0.2565)  loss_box_reg: 0.0731 (0.1152)  loss_mask: 0.2234 (0.2869)  loss_objectness: 0.0111 (0.0338)  loss_rpn_box_reg: 0.0045 (0.0194)  time: 0.1091 (0.1261)  data: 0.0014 (0.0178)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:16,945 maskrcnn_benchmark.trainer INFO: eta: 0:58:29  iter: 12160  loss: 0.6433 (0.7116)  loss_classifier: 0.1947 (0.2564)  loss_box_reg: 0.1045 (0.1151)  loss_mask: 0.2397 (0.2868)  loss_objectness: 0.0159 (0.0338)  loss_rpn_box_reg: 0.0097 (0.0194)  time: 0.1094 (0.1261)  data: 0.0016 (0.0177)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:19,138 maskrcnn_benchmark.trainer INFO: eta: 0:58:25  iter: 12180  loss: 0.5232 (0.7113)  loss_classifier: 0.1499 (0.2562)  loss_box_reg: 0.0814 (0.1151)  loss_mask: 0.2515 (0.2868)  loss_objectness: 0.0139 (0.0337)  loss_rpn_box_reg: 0.0075 (0.0194)  time: 0.1094 (0.1260)  data: 0.0015 (0.0177)  lr: 0.001600  max mem: 5140

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0


Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0
Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12183
Using dynamic loss scale of  65536.0
2020-06-23 15:48:21,340 maskrcnn_benchmark.trainer INFO: eta: 0:58:22  iter: 12200  loss: 0.5403 (0.7110)  loss_classifier: 0.1580 (0.2561)  loss_box_reg: 0.0877 (0.1151)  loss_mask: 0.2297 (0.2867)  loss_objectness: 0.0175 (0.0337)  loss_rpn_box_reg: 0.0073 (0.0194)  time: 0.1097 (0.1260)  data: 0.0014 (0.0177)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:23,538 maskrcnn_benchmark.trainer INFO: eta: 0:58:19  iter: 12220  loss: 0.5884 (0.7108)  loss_classifier: 0.1804 (0.2560)  loss_box_reg: 0.1044 (0.1151)  loss_mask: 0.2588 (0.2866)  loss_objectness: 0.0127 (0.0337)  loss_rpn_box_reg: 0.0073 (0.0194)  time: 0.1096 (0.1260)  data: 0.0015 (0.0177)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:25,729 maskrcnn_benchmark.trainer INFO: eta: 0:58:16  iter: 12240  loss: 0.5603 (0.7106)  loss_classifier: 0.1695 (0.2559)  loss_box_reg: 0.0794 (0.1150)  loss_mask: 0.2349 (0.2866)  loss_objectness: 0.0154 (0.0337)  loss_rpn_box_reg: 0.0083 (0.0194)  time: 0.1090 (0.1259)  data: 0.0014 (0.0176)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:27,945 maskrcnn_benchmark.trainer INFO: eta: 0:58:13  iter: 12260  loss: 0.5185 (0.7103)  loss_classifier: 0.1629 (0.2557)  loss_box_reg: 0.0734 (0.1150)  loss_mask: 0.2541 (0.2865)  loss_objectness: 0.0123 (0.0337)  loss_rpn_box_reg: 0.0085 (0.0194)  time: 0.1103 (0.1259)  data: 0.0015 (0.0176)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:30,147 maskrcnn_benchmark.trainer INFO: eta: 0:58:09  iter: 12280  loss: 0.4881 (0.7100)  loss_classifier: 0.1548 (0.2556)  loss_box_reg: 0.0727 (0.1149)  loss_mask: 0.2291 (0.2864)  loss_objectness: 0.0136 (0.0336)  loss_rpn_box_reg: 0.0054 (0.0194)  time: 0.1099 (0.1259)  data: 0.0014 (0.0176)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:32,343 maskrcnn_benchmark.trainer INFO: eta: 0:58:06  iter: 12300  loss: 0.5058 (0.7097)  loss_classifier: 0.1737 (0.2555)  loss_box_reg: 0.0797 (0.1149)  loss_mask: 0.2337 (0.2863)  loss_objectness: 0.0155 (0.0336)  loss_rpn_box_reg: 0.0077 (0.0194)  time: 0.1092 (0.1259)  data: 0.0015 (0.0175)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:34,523 maskrcnn_benchmark.trainer INFO: eta: 0:58:03  iter: 12320  loss: 0.6604 (0.7096)  loss_classifier: 0.2168 (0.2554)  loss_box_reg: 0.1160 (0.1149)  loss_mask: 0.2404 (0.2863)  loss_objectness: 0.0244 (0.0336)  loss_rpn_box_reg: 0.0151 (0.0194)  time: 0.1089 (0.1258)  data: 0.0017 (0.0175)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:36,722 maskrcnn_benchmark.trainer INFO: eta: 0:58:00  iter: 12340  loss: 0.5561 (0.7094)  loss_classifier: 0.1983 (0.2553)  loss_box_reg: 0.0936 (0.1148)  loss_mask: 0.2359 (0.2862)  loss_objectness: 0.0163 (0.0336)  loss_rpn_box_reg: 0.0076 (0.0194)  time: 0.1092 (0.1258)  data: 0.0015 (0.0175)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:38,895 maskrcnn_benchmark.trainer INFO: eta: 0:57:56  iter: 12360  loss: 0.5320 (0.7091)  loss_classifier: 0.1543 (0.2552)  loss_box_reg: 0.0666 (0.1148)  loss_mask: 0.2349 (0.2861)  loss_objectness: 0.0132 (0.0336)  loss_rpn_box_reg: 0.0095 (0.0194)  time: 0.1084 (0.1258)  data: 0.0015 (0.0175)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:41,073 maskrcnn_benchmark.trainer INFO: eta: 0:57:53  iter: 12380  loss: 0.5317 (0.7089)  loss_classifier: 0.1605 (0.2551)  loss_box_reg: 0.0909 (0.1148)  loss_mask: 0.2522 (0.2861)  loss_objectness: 0.0149 (0.0336)  loss_rpn_box_reg: 0.0075 (0.0194)  time: 0.1083 (0.1258)  data: 0.0015 (0.0174)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:43,270 maskrcnn_benchmark.trainer INFO: eta: 0:57:50  iter: 12400  loss: 0.5948 (0.7087)  loss_classifier: 0.1796 (0.2549)  loss_box_reg: 0.0866 (0.1147)  loss_mask: 0.2416 (0.2860)  loss_objectness: 0.0143 (0.0336)  loss_rpn_box_reg: 0.0165 (0.0194)  time: 0.1094 (0.1257)  data: 0.0015 (0.0174)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:45,436 maskrcnn_benchmark.trainer INFO: eta: 0:57:46  iter: 12420  loss: 0.5596 (0.7085)  loss_classifier: 0.1794 (0.2548)  loss_box_reg: 0.1022 (0.1147)  loss_mask: 0.2397 (0.2859)  loss_objectness: 0.0215 (0.0336)  loss_rpn_box_reg: 0.0108 (0.0194)  time: 0.1080 (0.1257)  data: 0.0015 (0.0174)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:47,626 maskrcnn_benchmark.trainer INFO: eta: 0:57:43  iter: 12440  loss: 0.5447 (0.7082)  loss_classifier: 0.1689 (0.2547)  loss_box_reg: 0.0908 (0.1147)  loss_mask: 0.2392 (0.2859)  loss_objectness: 0.0131 (0.0336)  loss_rpn_box_reg: 0.0087 (0.0194)  time: 0.1085 (0.1257)  data: 0.0015 (0.0174)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:49,815 maskrcnn_benchmark.trainer INFO: eta: 0:57:40  iter: 12460  loss: 0.5053 (0.7080)  loss_classifier: 0.1451 (0.2546)  loss_box_reg: 0.0780 (0.1146)  loss_mask: 0.2451 (0.2858)  loss_objectness: 0.0098 (0.0336)  loss_rpn_box_reg: 0.0082 (0.0194)  time: 0.1089 (0.1257)  data: 0.0015 (0.0173)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:52,005 maskrcnn_benchmark.trainer INFO: eta: 0:57:37  iter: 12480  loss: 0.5437 (0.7078)  loss_classifier: 0.1949 (0.2545)  loss_box_reg: 0.0872 (0.1146)  loss_mask: 0.2578 (0.2857)  loss_objectness: 0.0146 (0.0335)  loss_rpn_box_reg: 0.0050 (0.0194)  time: 0.1089 (0.1256)  data: 0.0015 (0.0173)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:54,206 maskrcnn_benchmark.trainer INFO: eta: 0:57:34  iter: 12500  loss: 0.4956 (0.7075)  loss_classifier: 0.1329 (0.2543)  loss_box_reg: 0.0746 (0.1145)  loss_mask: 0.2475 (0.2857)  loss_objectness: 0.0101 (0.0335)  loss_rpn_box_reg: 0.0059 (0.0194)  time: 0.1099 (0.1256)  data: 0.0014 (0.0173)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:56,414 maskrcnn_benchmark.trainer INFO: eta: 0:57:30  iter: 12520  loss: 0.4652 (0.7071)  loss_classifier: 0.1597 (0.2542)  loss_box_reg: 0.0732 (0.1145)  loss_mask: 0.2299 (0.2856)  loss_objectness: 0.0128 (0.0335)  loss_rpn_box_reg: 0.0067 (0.0194)  time: 0.1103 (0.1256)  data: 0.0015 (0.0173)  lr: 0.001600  max mem: 5140
2020-06-23 15:48:58,616 maskrcnn_benchmark.trainer INFO: eta: 0:57:27  iter: 12540  loss: 0.5875 (0.7069)  loss_classifier: 0.1923 (0.2541)  loss_box_reg: 0.0873 (0.1144)  loss_mask: 0.2702 (0.2856)  loss_objectness: 0.0211 (0.0335)  loss_rpn_box_reg: 0.0086 (0.0194)  time: 0.1085 (0.1256)  data: 0.0015 (0.0172)  lr: 0.001600  max mem: 5140
2020-06-23 15:49:00,812 maskrcnn_benchmark.trainer INFO: eta: 0:57:24  iter: 12560  loss: 0.4954 (0.7067)  loss_classifier: 0.1786 (0.2539)  loss_box_reg: 0.0678 (0.1144)  loss_mask: 0.2461 (0.2855)  loss_objectness: 0.0110 (0.0335)  loss_rpn_box_reg: 0.0075 (0.0194)  time: 0.1093 (0.1255)  data: 0.0015 (0.0172)  lr: 0.001600  max mem: 5140
2020-06-23 15:49:03,018 maskrcnn_benchmark.trainer INFO: eta: 0:57:21  iter: 12580  loss: 0.4877 (0.7064)  loss_classifier: 0.1447 (0.2538)  loss_box_reg: 0.0771 (0.1144)  loss_mask: 0.2181 (0.2854)  loss_objectness: 0.0106 (0.0335)  loss_rpn_box_reg: 0.0059 (0.0194)  time: 0.1100 (0.1255)  data: 0.0015 (0.0172)  lr: 0.001600  max mem: 5140
2020-06-23 15:49:05,198 maskrcnn_benchmark.trainer INFO: eta: 0:57:18  iter: 12600  loss: 0.5493 (0.7062)  loss_classifier: 0.1771 (0.2537)  loss_box_reg: 0.0858 (0.1143)  loss_mask: 0.2446 (0.2854)  loss_objectness: 0.0154 (0.0334)  loss_rpn_box_reg: 0.0102 (0.0194)  time: 0.1088 (0.1255)  data: 0.0015 (0.0172)  lr: 0.001600  max mem: 5140
2020-06-23 15:49:07,396 maskrcnn_benchmark.trainer INFO: eta: 0:57:14  iter: 12620  loss: 0.5584 (0.7060)  loss_classifier: 0.1833 (0.2536)  loss_box_reg: 0.1001 (0.1143)  loss_mask: 0.2664 (0.2853)  loss_objectness: 0.0141 (0.0334)  loss_rpn_box_reg: 0.0120 (0.0194)  time: 0.1098 (0.1255)  data: 0.0015 (0.0171)  lr: 0.001600  max mem: 5140
2020-06-23 15:49:09,585 maskrcnn_benchmark.trainer INFO: eta: 0:57:11  iter: 12640  loss: 0.4865 (0.7057)  loss_classifier: 0.1396 (0.2534)  loss_box_reg: 0.0773 (0.1143)  loss_mask: 0.2167 (0.2852)  loss_objectness: 0.0166 (0.0334)  loss_rpn_box_reg: 0.0067 (0.0194)  time: 0.1089 (0.1254)  data: 0.0015 (0.0171)  lr: 0.001600  max mem: 5140
2020-06-23 15:49:11,782 maskrcnn_benchmark.trainer INFO: eta: 0:57:08  iter: 12660  loss: 0.4929 (0.7054)  loss_classifier: 0.1546 (0.2533)  loss_box_reg: 0.0646 (0.1142)  loss_mask: 0.2288 (0.2852)  loss_objectness: 0.0104 (0.0334)  loss_rpn_box_reg: 0.0053 (0.0194)  time: 0.1099 (0.1254)  data: 0.0014 (0.0171)  lr: 0.001600  max mem: 5140
2020-06-23 15:49:13,970 maskrcnn_benchmark.trainer INFO: eta: 0:57:05  iter: 12680  loss: 0.5318 (0.7051)  loss_classifier: 0.1459 (0.2531)  loss_box_reg: 0.0822 (0.1142)  loss_mask: 0.2522 (0.2851)  loss_objectness: 0.0114 (0.0333)  loss_rpn_box_reg: 0.0062 (0.0193)  time: 0.1095 (0.1254)  data: 0.0016 (0.0171)  lr: 0.001600  max mem: 5140
2020-06-23 15:49:16,155 maskrcnn_benchmark.trainer INFO: eta: 0:57:02  iter: 12700  loss: 0.6074 (0.7049)  loss_classifier: 0.1836 (0.2530)  loss_box_reg: 0.1010 (0.1142)  loss_mask: 0.2429 (0.2851)  loss_objectness: 0.0143 (0.0333)  loss_rpn_box_reg: 0.0193 (0.0194)  time: 0.1087 (0.1254)  data: 0.0016 (0.0170)  lr: 0.001600  max mem: 5140
2020-06-23 15:49:18,346 maskrcnn_benchmark.trainer INFO: eta: 0:56:58  iter: 12720  loss: 0.4638 (0.7046)  loss_classifier: 0.1460 (0.2529)  loss_box_reg: 0.0642 (0.1141)  loss_mask: 0.2405 (0.2850)  loss_objectness: 0.0081 (0.0333)  loss_rpn_box_reg: 0.0092 (0.0194)  time: 0.1092 (0.1253)  data: 0.0015 (0.0170)  lr: 0.001600  max mem: 5140
2020-06-23 15:49:20,544 maskrcnn_benchmark.trainer INFO: eta: 0:56:55  iter: 12740  loss: 0.5527 (0.7044)  loss_classifier: 0.1602 (0.2528)  loss_box_reg: 0.0917 (0.1141)  loss_mask: 0.2400 (0.2849)  loss_objectness: 0.0161 (0.0333)  loss_rpn_box_reg: 0.0068 (0.0193)  time: 0.1095 (0.1253)  data: 0.0015 (0.0170)  lr: 0.001600  max mem: 5140
2020-06-23 15:49:22,735 maskrcnn_benchmark.trainer INFO: eta: 0:56:52  iter: 12760  loss: 0.6034 (0.7042)  loss_classifier: 0.1786 (0.2527)  loss_box_reg: 0.0913 (0.1141)  loss_mask: 0.2339 (0.2849)  loss_objectness: 0.0186 (0.0333)  loss_rpn_box_reg: 0.0159 (0.0194)  time: 0.1093 (0.1253)  data: 0.0015 (0.0170)  lr: 0.001600  max mem: 5140
2020-06-23 15:49:24,911 maskrcnn_benchmark.trainer INFO: eta: 0:56:49  iter: 12780  loss: 0.5327 (0.7040)  loss_classifier: 0.1679 (0.2526)  loss_box_reg: 0.0895 (0.1140)  loss_mask: 0.2336 (0.2848)  loss_objectness: 0.0105 (0.0332)  loss_rpn_box_reg: 0.0056 (0.0193)  time: 0.1087 (0.1253)  data: 0.0015 (0.0169)  lr: 0.001600  max mem: 5140
2020-06-23 15:49:27,097 maskrcnn_benchmark.trainer INFO: eta: 0:56:46  iter: 12800  loss: 0.4890 (0.7036)  loss_classifier: 0.1543 (0.2524)  loss_box_reg: 0.0831 (0.1140)  loss_mask: 0.2353 (0.2847)  loss_objectness: 0.0108 (0.0332)  loss_rpn_box_reg: 0.0036 (0.0193)  time: 0.1088 (0.1252)  data: 0.0015 (0.0169)  lr: 0.001600  max mem: 5140
2020-06-23 15:49:29,273 maskrcnn_benchmark.trainer INFO: eta: 0:56:43  iter: 12820  loss: 0.4597 (0.7033)  loss_classifier: 0.1218 (0.2523)  loss_box_reg: 0.0586 (0.1139)  loss_mask: 0.2253 (0.2847)  loss_objectness: 0.0108 (0.0332)  loss_rpn_box_reg: 0.0065 (0.0193)  time: 0.1089 (0.1252)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5140
:::MLLOG {"namespace": "", "time_ms": 1592952571253, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 14}}
:::MLLOG {"namespace": "", "time_ms": 1592952571253, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 14}}
:::MLLOG {"namespace": "", "time_ms": 1592952571253, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 14}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 15:49:31,463 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
index created!
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
2020-06-23 15:49:31,760 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:00<00:46,  1.62it/s]
  8%|         | 6/79 [00:01<00:32,  2.25it/s]
 11%|        | 9/79 [00:01<00:22,  3.10it/s]
 15%|        | 12/79 [00:01<00:15,  4.20it/s]
 19%|        | 15/79 [00:01<00:11,  5.61it/s]
 23%|       | 18/79 [00:01<00:08,  7.33it/s]
 27%|       | 21/79 [00:01<00:06,  9.31it/s]
 30%|       | 24/79 [00:01<00:04, 11.49it/s]
 34%|      | 27/79 [00:01<00:03, 13.80it/s]
 38%|      | 30/79 [00:02<00:03, 15.96it/s]
 42%|     | 33/79 [00:02<00:02, 18.00it/s]
 46%|     | 36/79 [00:02<00:02, 19.72it/s]
 49%|     | 39/79 [00:02<00:01, 21.07it/s]
 53%|    | 42/79 [00:02<00:01, 22.15it/s]
 57%|    | 45/79 [00:02<00:01, 22.89it/s]
 61%|    | 48/79 [00:02<00:01, 23.35it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.37it/s]
 32%|      | 25/79 [00:01<00:04, 11.57it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:02, 16.01it/s]
 43%|     | 34/79 [00:02<00:02, 18.06it/s]
 47%|     | 37/79 [00:02<00:02, 19.77it/s]
 51%|     | 40/79 [00:02<00:01, 21.17it/s]
 54%|    | 43/79 [00:02<00:01, 22.17it/s]
 58%|    | 46/79 [00:02<00:01, 22.99it/s]
 62%|   | 49/79 [00:02<00:01, 23.61it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  4%|         | 3/79 [00:00<00:47,  1.61it/s]
  8%|         | 6/79 [00:01<00:32,  2.23it/s]
 11%|        | 9/79 [00:01<00:22,  3.07it/s]
 15%|        | 12/79 [00:01<00:16,  4.17it/s]
 19%|        | 15/79 [00:01<00:11,  5.56it/s]
 23%|       | 18/79 [00:01<00:08,  7.29it/s]
 27%|       | 21/79 [00:01<00:06,  9.27it/s]
 30%|       | 24/79 [00:01<00:04, 11.43it/s]
 34%|      | 27/79 [00:01<00:03, 13.68it/s]
 38%|      | 30/79 [00:02<00:03, 15.80it/s]
 42%|     | 33/79 [00:02<00:02, 17.83it/s]
 46%|     | 36/79 [00:02<00:02, 19.46it/s]
 49%|     | 39/79 [00:02<00:01, 20.90it/s]
 53%|    | 42/79 [00:02<00:01, 22.01it/s]
 57%|    | 45/79 [00:02<00:01, 23.11it/s]
 61%|    | 48/79 [00:02<00:01, 23.66it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.47it/s]
 28%|       | 22/79 [00:01<00:06,  9.47it/s]
 32%|      | 25/79 [00:01<00:04, 11.69it/s]
 35%|      | 28/79 [00:01<00:03, 13.96it/s]
 39%|      | 31/79 [00:02<00:02, 16.14it/s]
 43%|     | 34/79 [00:02<00:02, 18.13it/s]
 47%|     | 37/79 [00:02<00:02, 20.08it/s]
 51%|     | 40/79 [00:02<00:01, 21.14it/s]
 54%|    | 43/79 [00:02<00:01, 22.10it/s]
 58%|    | 46/79 [00:02<00:01, 22.77it/s]
 62%|   | 49/79 [00:02<00:01, 23.55it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  4%|         | 3/79 [00:00<00:47,  1.61it/s]
  8%|         | 6/79 [00:01<00:32,  2.24it/s]
 11%|        | 9/79 [00:01<00:22,  3.08it/s]
 15%|        | 12/79 [00:01<00:16,  4.19it/s]
 19%|        | 15/79 [00:01<00:11,  5.58it/s]
 23%|       | 18/79 [00:01<00:08,  7.30it/s]
 27%|       | 21/79 [00:01<00:06,  9.22it/s]
 30%|       | 24/79 [00:01<00:04, 11.33it/s]
 34%|      | 27/79 [00:01<00:03, 13.62it/s]
 38%|      | 30/79 [00:02<00:03, 15.81it/s]
 42%|     | 33/79 [00:02<00:02, 17.87it/s]
 46%|     | 36/79 [00:02<00:02, 19.52it/s]
 49%|     | 39/79 [00:02<00:01, 20.74it/s]
 53%|    | 42/79 [00:02<00:01, 21.88it/s]
 57%|    | 45/79 [00:02<00:01, 22.68it/s]
 61%|    | 48/79 [00:02<00:01, 23.26it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.21it/s]
 28%|       | 22/79 [00:01<00:06,  9.21it/s]
 32%|      | 25/79 [00:01<00:04, 11.38it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.69it/s]
 43%|     | 34/79 [00:02<00:02, 17.79it/s]
 47%|     | 37/79 [00:02<00:02, 19.41it/s]
 51%|     | 40/79 [00:02<00:01, 20.71it/s]
 54%|    | 43/79 [00:02<00:01, 21.93it/s]
 58%|    | 46/79 [00:02<00:01, 23.03it/s]
 62%|   | 49/79 [00:02<00:01, 23.39it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:11,  5.69it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.39it/s]
 32%|      | 25/79 [00:01<00:04, 11.61it/s]
 35%|      | 28/79 [00:01<00:03, 13.71it/s]
 39%|      | 31/79 [00:02<00:03, 15.82it/s]
 43%|     | 34/79 [00:02<00:02, 17.84it/s]
 47%|     | 37/79 [00:02<00:02, 19.60it/s]
 51%|     | 40/79 [00:02<00:01, 20.58it/s]
 54%|    | 43/79 [00:02<00:01, 21.67it/s]
 58%|    | 46/79 [00:02<00:01, 22.64it/s]
 62%|   | 49/79 [00:02<00:01, 23.24it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.57it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.17it/s]
 32%|      | 25/79 [00:01<00:04, 11.31it/s]
 35%|      | 28/79 [00:01<00:03, 13.57it/s]
 39%|      | 31/79 [00:02<00:03, 15.86it/s]
 43%|     | 34/79 [00:02<00:02, 17.83it/s]
 47%|     | 37/79 [00:02<00:02, 19.55it/s]
 51%|     | 40/79 [00:02<00:01, 20.90it/s]
 54%|    | 43/79 [00:02<00:01, 22.00it/s]
 58%|    | 46/79 [00:02<00:01, 22.73it/s]
 62%|   | 49/79 [00:02<00:01, 22.99it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.24it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.35it/s]
 35%|      | 28/79 [00:01<00:03, 13.64it/s]
 39%|      | 31/79 [00:02<00:03, 15.63it/s]
 43%|     | 34/79 [00:02<00:02, 17.59it/s]
 47%|     | 37/79 [00:02<00:02, 19.17it/s]
 51%|     | 40/79 [00:02<00:01, 20.57it/s]
 54%|    | 43/79 [00:02<00:01, 21.66it/s]
 58%|    | 46/79 [00:02<00:01, 22.48it/s]
 62%|   | 49/79 [00:02<00:01, 23.29it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.24it/s]
 28%|       | 22/79 [00:01<00:06,  9.18it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.62it/s]
 43%|     | 34/79 [00:02<00:02, 17.51it/s]
 47%|     | 37/79 [00:02<00:02, 19.16it/s]
 51%|     | 40/79 [00:02<00:01, 20.65it/s]
 54%|    | 43/79 [00:02<00:01, 21.55it/s]
 58%|    | 46/79 [00:02<00:01, 22.50it/s]
 62%|   | 49/79 [00:02<00:01, 22.99it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.13it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 28%|       | 22/79 [00:01<00:06,  9.13it/s]
 32%|      | 25/79 [00:01<00:04, 11.31it/s]
 35%|      | 28/79 [00:01<00:03, 13.48it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.68it/s]
 47%|     | 37/79 [00:02<00:02, 19.43it/s]
 51%|     | 40/79 [00:02<00:01, 20.59it/s]
 54%|    | 43/79 [00:02<00:01, 21.47it/s]
 58%|    | 46/79 [00:02<00:01, 22.44it/s]
 62%|   | 49/79 [00:02<00:01, 23.05it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.09it/s]
 20%|        | 16/79 [00:01<00:11,  5.46it/s]
 24%|       | 19/79 [00:01<00:08,  7.13it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.18it/s]
 35%|      | 28/79 [00:01<00:03, 13.39it/s]
 39%|      | 31/79 [00:02<00:03, 15.60it/s]
 43%|     | 34/79 [00:02<00:02, 17.77it/s]
 47%|     | 37/79 [00:02<00:02, 19.30it/s]
 51%|     | 40/79 [00:02<00:01, 20.66it/s]
 54%|    | 43/79 [00:02<00:01, 21.69it/s]
 58%|    | 46/79 [00:02<00:01, 22.69it/s]
 62%|   | 49/79 [00:02<00:01, 23.53it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.13it/s]
 28%|       | 22/79 [00:01<00:06,  9.04it/s]
 32%|      | 25/79 [00:01<00:04, 11.23it/s]
 35%|      | 28/79 [00:01<00:03, 13.51it/s]
 39%|      | 31/79 [00:02<00:03, 15.73it/s]
 43%|     | 34/79 [00:02<00:02, 17.38it/s]
 47%|     | 37/79 [00:02<00:02, 19.06it/s]
 51%|     | 40/79 [00:02<00:01, 20.51it/s]
 54%|    | 43/79 [00:02<00:01, 21.49it/s]
 58%|    | 46/79 [00:02<00:01, 22.54it/s]
 62%|   | 49/79 [00:02<00:01, 22.94it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.02it/s]
 28%|       | 22/79 [00:01<00:06,  8.95it/s]
 32%|      | 25/79 [00:01<00:04, 11.06it/s]
 35%|      | 28/79 [00:02<00:03, 13.29it/s]
 39%|      | 31/79 [00:02<00:03, 15.50it/s]
 43%|     | 34/79 [00:02<00:02, 17.41it/s]
 47%|     | 37/79 [00:02<00:02, 18.96it/s]
 51%|     | 40/79 [00:02<00:01, 20.44it/s]
 54%|    | 43/79 [00:02<00:01, 21.63it/s]
 58%|    | 46/79 [00:02<00:01, 22.46it/s]
 62%|   | 49/79 [00:02<00:01, 23.21it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.58it/s]
 39%|      | 31/79 [00:02<00:03, 15.71it/s]
 43%|     | 34/79 [00:02<00:02, 17.61it/s]
 47%|     | 37/79 [00:02<00:02, 19.40it/s]
 51%|     | 40/79 [00:02<00:01, 20.80it/s]
 54%|    | 43/79 [00:02<00:01, 21.78it/s]
 58%|    | 46/79 [00:02<00:01, 22.56it/s]
 62%|   | 49/79 [00:02<00:01, 23.01it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  4%|         | 3/79 [00:01<00:49,  1.52it/s]
  8%|         | 6/79 [00:01<00:34,  2.12it/s]
 11%|        | 9/79 [00:01<00:23,  2.92it/s]
 15%|        | 12/79 [00:01<00:16,  3.98it/s]
 19%|        | 15/79 [00:01<00:12,  5.32it/s]
 23%|       | 18/79 [00:01<00:08,  6.97it/s]
 27%|       | 21/79 [00:01<00:06,  8.88it/s]
 30%|       | 24/79 [00:01<00:04, 11.03it/s]
 34%|      | 27/79 [00:01<00:03, 13.23it/s]
 38%|      | 30/79 [00:02<00:03, 15.40it/s]
 42%|     | 33/79 [00:02<00:02, 17.36it/s]
 46%|     | 36/79 [00:02<00:02, 19.13it/s]
 49%|     | 39/79 [00:02<00:01, 20.70it/s]
 53%|    | 42/79 [00:02<00:01, 21.63it/s]
 57%|    | 45/79 [00:02<00:01, 22.58it/s]
 61%|    | 48/79 [00:02<00:01, 23.07it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.06it/s]
 28%|       | 22/79 [00:01<00:06,  9.04it/s]
 32%|      | 25/79 [00:01<00:04, 11.17it/s]
 35%|      | 28/79 [00:01<00:03, 13.37it/s]
 39%|      | 31/79 [00:02<00:03, 15.75it/s]
 43%|     | 34/79 [00:02<00:02, 17.72it/s]
 47%|     | 37/79 [00:02<00:02, 19.53it/s]
 51%|     | 40/79 [00:02<00:01, 20.85it/s]
 54%|    | 43/79 [00:02<00:01, 21.84it/s]
 58%|    | 46/79 [00:02<00:01, 22.92it/s]
 62%|   | 49/79 [00:02<00:01, 23.50it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.97it/s]
 20%|        | 16/79 [00:01<00:11,  5.32it/s]
 24%|       | 19/79 [00:01<00:08,  6.97it/s]
 28%|       | 22/79 [00:01<00:06,  8.90it/s]
 32%|      | 25/79 [00:01<00:04, 11.05it/s]
 35%|      | 28/79 [00:01<00:03, 13.34it/s]
 39%|      | 31/79 [00:02<00:03, 15.52it/s]
 43%|     | 34/79 [00:02<00:02, 17.52it/s]
 47%|     | 37/79 [00:02<00:02, 19.27it/s]
 51%|     | 40/79 [00:02<00:01, 20.80it/s]
 54%|    | 43/79 [00:02<00:01, 21.84it/s]
 58%|    | 46/79 [00:02<00:01, 22.62it/s]
 62%|   | 49/79 [00:02<00:01, 23.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.00it/s]
 13%|        | 10/79 [00:01<00:24,  2.77it/s]
 16%|        | 13/79 [00:01<00:17,  3.78it/s]
 20%|        | 16/79 [00:01<00:12,  5.07it/s]
 24%|       | 19/79 [00:01<00:08,  6.69it/s]
 28%|       | 22/79 [00:01<00:06,  8.59it/s]
 32%|      | 25/79 [00:01<00:05, 10.69it/s]
 35%|      | 28/79 [00:02<00:03, 12.95it/s]
 39%|      | 31/79 [00:02<00:03, 15.17it/s]
 43%|     | 34/79 [00:02<00:02, 17.15it/s]
 47%|     | 37/79 [00:02<00:02, 18.87it/s]
 51%|     | 40/79 [00:02<00:01, 20.24it/s]
 54%|    | 43/79 [00:02<00:01, 21.44it/s]
 58%|    | 46/79 [00:02<00:01, 22.41it/s]
 62%|   | 49/79 [00:02<00:01, 23.17it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.24it/s]
 28%|       | 22/79 [00:01<00:06,  9.18it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.38it/s]
 39%|      | 31/79 [00:02<00:03, 15.55it/s]
 43%|     | 34/79 [00:02<00:02, 17.59it/s]
 47%|     | 37/79 [00:02<00:02, 19.03it/s]
 51%|     | 40/79 [00:02<00:01, 20.33it/s]
 54%|    | 43/79 [00:02<00:01, 21.42it/s]
 58%|    | 46/79 [00:02<00:01, 22.48it/s]
 62%|   | 49/79 [00:02<00:01, 22.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.13it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.17it/s]
 28%|       | 22/79 [00:01<00:06,  9.12it/s]
 32%|      | 25/79 [00:01<00:04, 11.35it/s]
 35%|      | 28/79 [00:01<00:03, 13.50it/s]
 39%|      | 31/79 [00:02<00:03, 15.63it/s]
 43%|     | 34/79 [00:02<00:02, 17.51it/s]
 47%|     | 37/79 [00:02<00:02, 19.34it/s]
 51%|     | 40/79 [00:02<00:01, 20.61it/s]
 54%|    | 43/79 [00:02<00:01, 21.45it/s]
 58%|    | 46/79 [00:02<00:01, 22.18it/s]
 62%|   | 49/79 [00:02<00:01, 23.06it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.15it/s]
 28%|       | 22/79 [00:01<00:06,  9.10it/s]
 32%|      | 25/79 [00:01<00:04, 11.25it/s]
 35%|      | 28/79 [00:01<00:03, 13.48it/s]
 39%|      | 31/79 [00:02<00:03, 15.52it/s]
 43%|     | 34/79 [00:02<00:02, 17.43it/s]
 47%|     | 37/79 [00:02<00:02, 19.15it/s]
 51%|     | 40/79 [00:02<00:01, 20.26it/s]
 54%|    | 43/79 [00:02<00:01, 21.14it/s]
 58%|    | 46/79 [00:02<00:01, 22.15it/s]
 62%|   | 49/79 [00:02<00:01, 22.94it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.09it/s]
 28%|       | 22/79 [00:01<00:06,  9.01it/s]
 32%|      | 25/79 [00:01<00:04, 11.10it/s]
 35%|      | 28/79 [00:01<00:03, 13.35it/s]
 39%|      | 31/79 [00:02<00:03, 15.54it/s]
 43%|     | 34/79 [00:02<00:02, 17.52it/s]
 47%|     | 37/79 [00:02<00:02, 19.14it/s]
 51%|     | 40/79 [00:02<00:01, 20.27it/s]
 54%|    | 43/79 [00:02<00:01, 21.52it/s]
 58%|    | 46/79 [00:02<00:01, 22.08it/s]
 62%|   | 49/79 [00:02<00:01, 22.72it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  3.99it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  7.02it/s]
 28%|       | 22/79 [00:01<00:06,  8.89it/s]
 32%|      | 25/79 [00:01<00:04, 11.02it/s]
 35%|      | 28/79 [00:02<00:03, 13.21it/s]
 39%|      | 31/79 [00:02<00:03, 15.37it/s]
 43%|     | 34/79 [00:02<00:02, 17.35it/s]
 47%|     | 37/79 [00:02<00:02, 19.09it/s]
 51%|     | 40/79 [00:02<00:01, 20.35it/s]
 54%|    | 43/79 [00:02<00:01, 21.55it/s]
 58%|    | 46/79 [00:02<00:01, 22.54it/s]
 62%|   | 49/79 [00:02<00:01, 23.21it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.95it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.89it/s]
 28%|       | 22/79 [00:01<00:06,  8.82it/s]
 32%|      | 25/79 [00:01<00:04, 10.91it/s]
 35%|      | 28/79 [00:02<00:03, 13.19it/s]
 39%|      | 31/79 [00:02<00:03, 15.37it/s]
 43%|     | 34/79 [00:02<00:02, 17.24it/s]
 47%|     | 37/79 [00:02<00:02, 18.95it/s]
 51%|     | 40/79 [00:02<00:01, 20.54it/s]
 54%|    | 43/79 [00:02<00:01, 21.50it/s]
 58%|    | 46/79 [00:02<00:01, 22.21it/s]
 62%|   | 49/79 [00:02<00:01, 23.00it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.46it/s]
 24%|       | 19/79 [00:01<00:08,  7.12it/s]
 28%|       | 22/79 [00:01<00:06,  9.05it/s]
 32%|      | 25/79 [00:01<00:04, 11.18it/s]
 35%|      | 28/79 [00:01<00:03, 13.35it/s]
 39%|      | 31/79 [00:02<00:03, 15.37it/s]
 43%|     | 34/79 [00:02<00:02, 17.23it/s]
 47%|     | 37/79 [00:02<00:02, 18.91it/s]
 51%|     | 40/79 [00:02<00:01, 20.07it/s]
 54%|    | 43/79 [00:02<00:01, 21.29it/s]
 58%|    | 46/79 [00:02<00:01, 21.70it/s]
 62%|   | 49/79 [00:02<00:01, 22.40it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  3.99it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  6.97it/s]
 28%|       | 22/79 [00:01<00:06,  8.91it/s]
 32%|      | 25/79 [00:01<00:04, 11.00it/s]
 35%|      | 28/79 [00:02<00:03, 13.04it/s]
 39%|      | 31/79 [00:02<00:03, 15.16it/s]
 43%|     | 34/79 [00:02<00:02, 17.16it/s]
 47%|     | 37/79 [00:02<00:02, 19.03it/s]
 51%|     | 40/79 [00:02<00:01, 20.48it/s]
 54%|    | 43/79 [00:02<00:01, 21.71it/s]
 58%|    | 46/79 [00:02<00:01, 22.47it/s]
 62%|   | 49/79 [00:02<00:01, 23.23it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.15it/s]
 24%|       | 19/79 [00:01<00:08,  6.78it/s]
 28%|       | 22/79 [00:01<00:06,  8.65it/s]
 32%|      | 25/79 [00:01<00:05, 10.77it/s]
 35%|      | 28/79 [00:02<00:03, 12.94it/s]
 39%|      | 31/79 [00:02<00:03, 15.21it/s]
 43%|     | 34/79 [00:02<00:02, 17.31it/s]
 47%|     | 37/79 [00:02<00:02, 18.94it/s]
 51%|     | 40/79 [00:02<00:01, 20.41it/s]
 54%|    | 43/79 [00:02<00:01, 21.54it/s]
 58%|    | 46/79 [00:02<00:01, 22.38it/s]
 62%|   | 49/79 [00:02<00:01, 22.99it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  4%|         | 3/79 [00:01<00:48,  1.56it/s]
  8%|         | 6/79 [00:01<00:33,  2.16it/s]
 11%|        | 9/79 [00:01<00:23,  2.97it/s]
 15%|        | 12/79 [00:01<00:16,  4.03it/s]
 19%|        | 15/79 [00:01<00:11,  5.37it/s]
 23%|       | 18/79 [00:01<00:08,  7.02it/s]
 27%|       | 21/79 [00:01<00:06,  8.92it/s]
 30%|       | 24/79 [00:01<00:05, 10.97it/s]
 34%|      | 27/79 [00:02<00:03, 13.05it/s]
 38%|      | 30/79 [00:02<00:03, 15.28it/s]
 42%|     | 33/79 [00:02<00:02, 16.95it/s]
 46%|     | 36/79 [00:02<00:02, 18.37it/s]
 49%|     | 39/79 [00:02<00:02, 19.67it/s]
 53%|    | 42/79 [00:02<00:01, 20.96it/s]
 57%|    | 45/79 [00:02<00:01, 21.36it/s]
 61%|    | 48/79 [00:02<00:01, 21.88it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.05it/s]
 28%|       | 22/79 [00:01<00:06,  8.95it/s]
 32%|      | 25/79 [00:01<00:04, 10.99it/s]
 35%|      | 28/79 [00:02<00:03, 13.14it/s]
 39%|      | 31/79 [00:02<00:03, 15.28it/s]
 43%|     | 34/79 [00:02<00:02, 17.17it/s]
 47%|     | 37/79 [00:02<00:02, 18.66it/s]
 51%|     | 40/79 [00:02<00:01, 20.09it/s]
 54%|    | 43/79 [00:02<00:01, 21.26it/s]
 58%|    | 46/79 [00:02<00:01, 21.81it/s]
 62%|   | 49/79 [00:02<00:01, 22.39it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.89it/s]
 28%|       | 22/79 [00:01<00:06,  8.78it/s]
 32%|      | 25/79 [00:01<00:04, 10.88it/s]
 35%|      | 28/79 [00:02<00:03, 13.06it/s]
 39%|      | 31/79 [00:02<00:03, 15.33it/s]
 43%|     | 34/79 [00:02<00:02, 17.26it/s]
 47%|     | 37/79 [00:02<00:02, 19.05it/s]
 51%|     | 40/79 [00:02<00:01, 20.27it/s]
 54%|    | 43/79 [00:02<00:01, 21.31it/s]
 58%|    | 46/79 [00:02<00:01, 21.93it/s]
 62%|   | 49/79 [00:02<00:01, 22.68it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.88it/s]
 32%|      | 25/79 [00:01<00:04, 10.89it/s]
 35%|      | 28/79 [00:02<00:03, 13.04it/s]
 39%|      | 31/79 [00:02<00:03, 15.20it/s]
 43%|     | 34/79 [00:02<00:02, 16.96it/s]
 47%|     | 37/79 [00:02<00:02, 18.65it/s]
 51%|     | 40/79 [00:02<00:01, 20.03it/s]
 54%|    | 43/79 [00:02<00:01, 21.13it/s]
 58%|    | 46/79 [00:02<00:01, 21.74it/s]
 62%|   | 49/79 [00:02<00:01, 22.39it/s]
 66%|   | 52/79 [00:03<00:01, 23.95it/s]
 70%|   | 55/79 [00:02<00:00, 24.40it/s]
 73%|  | 58/79 [00:03<00:00, 24.75it/s]
 77%|  | 61/79 [00:03<00:00, 25.01it/s]
 81%|  | 64/79 [00:03<00:00, 25.08it/s]
 85%| | 67/79 [00:03<00:00, 25.23it/s]
 89%| | 70/79 [00:03<00:00, 25.00it/s]
 92%|| 73/79 [00:03<00:00, 25.48it/s]
 96%|| 76/79 [00:03<00:00, 26.05it/s]
100%|| 79/79 [00:03<00:00, 26.72it/s]
, 24.11it/s]
 70%|   | 55/79 [00:02<00:00, 24.43it/s]
 73%|  | 58/79 [00:03<00:00, 24.63it/s]
 77%|  | 61/79 [00:03<00:00, 25.21it/s]
 81%|  | 64/79 [00:03<00:00, 24.66it/s]
 85%| | 67/79 [00:03<00:00, 24.78it/s]
 89%| | 70/79 [00:03<00:00, 24.76it/s]
 92%|| 73/79 [00:03<00:00, 25.18it/s]
 96%|| 76/79 [00:03<00:00, 25.81it/s]
100%|| 79/79 [00:03<00:00, 26.74it/s]
24it/s]
 68%|   | 54/79 [00:02<00:01, 24.52it/s]
 72%|  | 57/79 [00:03<00:00, 24.77it/s]
 76%|  | 60/79 [00:03<00:00, 25.10it/s]
 80%|  | 63/79 [00:03<00:00, 25.26it/s]
 84%| | 66/79 [00:03<00:00, 25.50it/s]
 87%| | 69/79 [00:03<00:00, 25.60it/s]
 91%| | 72/79 [00:03<00:00, 25.37it/s]
 95%|| 75/79 [00:03<00:00, 25.89it/s]
 99%|| 78/79 [00:03<00:00, 26.19it/s]
100%|| 79/79 [00:04<00:00, 19.73it/s]
, 23.66it/s]
 70%|   | 55/79 [00:03<00:00, 24.24it/s]
 73%|  | 58/79 [00:03<00:00, 24.50it/s]
 77%|  | 61/79 [00:03<00:00, 24.59it/s]
 81%|  | 64/79 [00:03<00:00, 24.72it/s]
 85%| | 67/79 [00:03<00:00, 24.85it/s]
 89%| | 70/79 [00:03<00:00, 25.01it/s]
 92%|| 73/79 [00:03<00:00, 25.28it/s]
 96%|| 76/79 [00:03<00:00, 25.94it/s]
100%|| 79/79 [00:03<00:00, 26.76it/s]
, 24.11it/s]
 70%|   | 55/79 [00:03<00:00, 24.32it/s]
 73%|  | 58/79 [00:03<00:00, 24.67it/s]
 77%|  | 61/79 [00:03<00:00, 24.95it/s]
 81%|  | 64/79 [00:03<00:00, 24.92it/s]
 85%| | 67/79 [00:03<00:00, 24.86it/s]
 89%| | 70/79 [00:03<00:00, 25.08it/s]
 92%|| 73/79 [00:03<00:00, 25.24it/s]
 96%|| 76/79 [00:03<00:00, 25.93it/s]
100%|| 79/79 [00:03<00:00, 26.86it/s]
99it/s]
 68%|   | 54/79 [00:02<00:01, 24.12it/s]
 72%|  | 57/79 [00:03<00:00, 24.44it/s]
 76%|  | 60/79 [00:03<00:00, 24.74it/s]
 80%|  | 63/79 [00:03<00:00, 24.65it/s]
 84%| | 66/79 [00:03<00:00, 24.73it/s]
 87%| | 69/79 [00:03<00:00, 24.86it/s]
 91%| | 72/79 [00:03<00:00, 24.78it/s]
 95%|| 75/79 [00:03<00:00, 25.51it/s]
 99%|| 78/79 [00:03<00:00, 25.96it/s]
100%|| 79/79 [00:04<00:00, 19.49it/s]
, 23.51it/s]
 70%|   | 55/79 [00:03<00:00, 24.23it/s]
 73%|  | 58/79 [00:03<00:00, 24.01it/s]
 77%|  | 61/79 [00:03<00:00, 23.81it/s]
 81%|  | 64/79 [00:03<00:00, 24.32it/s]
 85%| | 67/79 [00:03<00:00, 24.58it/s]
 89%| | 70/79 [00:03<00:00, 24.43it/s]
 92%|| 73/79 [00:03<00:00, 24.89it/s]
 96%|| 76/79 [00:03<00:00, 25.70it/s]
100%|| 79/79 [00:03<00:00, 26.60it/s]
70it/s]
 68%|   | 54/79 [00:03<00:01, 23.98it/s]
 72%|  | 57/79 [00:03<00:00, 24.21it/s]
 76%|  | 60/79 [00:03<00:00, 24.62it/s]
 80%|  | 63/79 [00:03<00:00, 25.03it/s]
 84%| | 66/79 [00:03<00:00, 25.22it/s]
 87%| | 69/79 [00:03<00:00, 25.63it/s]
 91%| | 72/79 [00:03<00:00, 25.12it/s]
 95%|| 75/79 [00:03<00:00, 26.18it/s]
 99%|| 78/79 [00:03<00:00, 26.40it/s]
100%|| 79/79 [00:04<00:00, 19.55it/s]
, 23.67it/s]
 70%|   | 55/79 [00:03<00:00, 24.20it/s]
 73%|  | 58/79 [00:03<00:00, 24.50it/s]
 77%|  | 61/79 [00:03<00:00, 24.76it/s]
 81%|  | 64/79 [00:03<00:00, 24.73it/s]
 85%| | 67/79 [00:03<00:00, 24.93it/s]
 89%| | 70/79 [00:03<00:00, 25.20it/s]
 92%|| 73/79 [00:03<00:00, 25.36it/s]
 96%|| 76/79 [00:03<00:00, 26.02it/s]
100%|| 79/79 [00:03<00:00, 26.87it/s]
, 23.41it/s]
 70%|   | 55/79 [00:03<00:01, 23.72it/s]
 73%|  | 58/79 [00:03<00:00, 24.35it/s]
 77%|  | 61/79 [00:03<00:00, 24.51it/s]
 81%|  | 64/79 [00:03<00:00, 24.67it/s]
 85%| | 67/79 [00:03<00:00, 24.78it/s]
 89%| | 70/79 [00:03<00:00, 24.78it/s]
 92%|| 73/79 [00:03<00:00, 25.09it/s]
 96%|| 76/79 [00:03<00:00, 25.82it/s]
100%|| 79/79 [00:03<00:00, 26.74it/s]
, 23.50it/s]
 70%|   | 55/79 [00:03<00:00, 24.21it/s]
 73%|  | 58/79 [00:03<00:00, 24.54it/s]
 77%|  | 61/79 [00:03<00:00, 24.82it/s]
 81%|  | 64/79 [00:03<00:00, 24.86it/s]
 85%| | 67/79 [00:03<00:00, 24.92it/s]
 89%| | 70/79 [00:03<00:00, 24.70it/s]
 92%|| 73/79 [00:03<00:00, 25.21it/s]
 96%|| 76/79 [00:03<00:00, 25.84it/s]
100%|| 79/79 [00:03<00:00, 26.64it/s]
, 23.58it/s]
 70%|   | 55/79 [00:03<00:01, 23.70it/s]
 73%|  | 58/79 [00:03<00:00, 23.93it/s]
 77%|  | 61/79 [00:03<00:00, 24.06it/s]
 81%|  | 64/79 [00:03<00:00, 24.09it/s]
 85%| | 67/79 [00:03<00:00, 24.39it/s]
 89%| | 70/79 [00:03<00:00, 24.46it/s]
 92%|| 73/79 [00:03<00:00, 24.82it/s]
 96%|| 76/79 [00:03<00:00, 25.50it/s]
100%|| 79/79 [00:04<00:00, 26.43it/s]
, 23.69it/s]
 70%|   | 55/79 [00:03<00:01, 23.91it/s]
 73%|  | 58/79 [00:03<00:00, 24.27it/s]
 77%|  | 61/79 [00:03<00:00, 24.37it/s]
 81%|  | 64/79 [00:03<00:00, 24.70it/s]
 85%| | 67/79 [00:03<00:00, 24.88it/s]
 89%| | 70/79 [00:03<00:00, 25.01it/s]
 92%|| 73/79 [00:03<00:00, 25.24it/s]
 96%|| 76/79 [00:03<00:00, 25.84it/s]
100%|| 79/79 [00:03<00:00, 26.52it/s]
, 23.38it/s]
 70%|   | 55/79 [00:03<00:01, 23.58it/s]
 73%|  | 58/79 [00:03<00:00, 23.60it/s]
 77%|  | 61/79 [00:03<00:00, 24.05it/s]
 81%|  | 64/79 [00:03<00:00, 24.13it/s]
 85%| | 67/79 [00:03<00:00, 24.14it/s]
 89%| | 70/79 [00:03<00:00, 24.29it/s]
 92%|| 73/79 [00:03<00:00, 24.84it/s]
 96%|| 76/79 [00:03<00:00, 25.67it/s]
100%|| 79/79 [00:04<00:00, 26.64it/s]
, 23.58it/s]
 70%|   | 55/79 [00:03<00:00, 24.06it/s]
 73%|  | 58/79 [00:03<00:00, 23.95it/s]
 77%|  | 61/79 [00:03<00:00, 23.79it/s]
 81%|  | 64/79 [00:03<00:00, 23.88it/s]
 85%| | 67/79 [00:03<00:00, 23.98it/s]
 89%| | 70/79 [00:03<00:00, 23.93it/s]
 92%|| 73/79 [00:03<00:00, 24.49it/s]
 96%|| 76/79 [00:03<00:00, 25.27it/s]
100%|| 79/79 [00:04<00:00, 26.20it/s]
, 23.15it/s]
 70%|   | 55/79 [00:03<00:01, 23.47it/s]
 73%|  | 58/79 [00:03<00:00, 23.65it/s]
 77%|  | 61/79 [00:03<00:00, 23.95it/s]
 81%|  | 64/79 [00:03<00:00, 24.12it/s]
 85%| | 67/79 [00:03<00:00, 24.37it/s]
 89%| | 70/79 [00:03<00:00, 24.62it/s]
 92%|| 73/79 [00:03<00:00, 24.97it/s]
 96%|| 76/79 [00:03<00:00, 25.85it/s]
100%|| 79/79 [00:04<00:00, 26.79it/s]
, 23.66it/s]
 70%|   | 55/79 [00:03<00:00, 24.29it/s]
 73%|  | 58/79 [00:03<00:00, 24.21it/s]
 77%|  | 61/79 [00:03<00:00, 24.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.62it/s]
 85%| | 67/79 [00:03<00:00, 24.63it/s]
 89%| | 70/79 [00:03<00:00, 24.71it/s]
 92%|| 73/79 [00:03<00:00, 24.98it/s]
 96%|| 76/79 [00:03<00:00, 25.75it/s]
100%|| 79/79 [00:04<00:00, 26.50it/s]
, 23.72it/s]
 70%|   | 55/79 [00:03<00:01, 24.00it/s]
 73%|  | 58/79 [00:03<00:00, 24.46it/s]
 77%|  | 61/79 [00:03<00:00, 24.63it/s]
 81%|  | 64/79 [00:03<00:00, 24.56it/s]
 85%| | 67/79 [00:03<00:00, 24.69it/s]
 89%| | 70/79 [00:03<00:00, 24.79it/s]
 92%|| 73/79 [00:03<00:00, 25.00it/s]
 96%|| 76/79 [00:03<00:00, 26.09it/s]
100%|| 79/79 [00:04<00:00, 26.54it/s]
, 23.26it/s]
 70%|   | 55/79 [00:03<00:01, 23.14it/s]
 73%|  | 58/79 [00:03<00:00, 23.56it/s]
 77%|  | 61/79 [00:03<00:00, 23.96it/s]
 81%|  | 64/79 [00:03<00:00, 24.18it/s]
 85%| | 67/79 [00:03<00:00, 24.29it/s]
 89%| | 70/79 [00:03<00:00, 24.15it/s]
 92%|| 73/79 [00:03<00:00, 24.81it/s]
 96%|| 76/79 [00:03<00:00, 25.54it/s]
100%|| 79/79 [00:04<00:00, 26.47it/s]
, 23.29it/s]
 70%|   | 55/79 [00:03<00:01, 23.46it/s]
 73%|  | 58/79 [00:03<00:00, 23.71it/s]
 77%|  | 61/79 [00:03<00:00, 24.07it/s]
 81%|  | 64/79 [00:03<00:00, 24.18it/s]
 85%| | 67/79 [00:03<00:00, 24.26it/s]
 89%| | 70/79 [00:03<00:00, 24.29it/s]
 92%|| 73/79 [00:03<00:00, 24.95it/s]
 96%|| 76/79 [00:03<00:00, 25.74it/s]
100%|| 79/79 [00:04<00:00, 26.64it/s]
61it/s]
 68%|   | 54/79 [00:03<00:01, 24.04it/s]
 72%|  | 57/79 [00:03<00:00, 24.14it/s]
 76%|  | 60/79 [00:03<00:00, 24.30it/s]
 80%|  | 63/79 [00:03<00:00, 24.70it/s]
 84%| | 66/79 [00:03<00:00, 24.33it/s]
 87%| | 69/79 [00:03<00:00, 24.24it/s]
 91%| | 72/79 [00:03<00:00, 24.65it/s]
 95%|| 75/79 [00:03<00:00, 25.36it/s]
 99%|| 78/79 [00:04<00:00, 25.99it/s]
100%|| 79/79 [00:04<00:00, 19.29it/s]
, 23.59it/s]
 70%|   | 55/79 [00:03<00:01, 23.84it/s]
 73%|  | 58/79 [00:03<00:00, 24.07it/s]
 77%|  | 61/79 [00:03<00:00, 24.34it/s]
 81%|  | 64/79 [00:03<00:00, 24.65it/s]
 85%| | 67/79 [00:03<00:00, 24.99it/s]
 89%| | 70/79 [00:03<00:00, 25.06it/s]
 92%|| 73/79 [00:03<00:00, 25.42it/s]
 96%|| 76/79 [00:03<00:00, 26.00it/s]
100%|| 79/79 [00:04<00:00, 26.61it/s]
, 22.76it/s]
 70%|   | 55/79 [00:03<00:01, 23.09it/s]
 73%|  | 58/79 [00:03<00:00, 23.33it/s]
 77%|  | 61/79 [00:03<00:00, 23.49it/s]
 81%|  | 64/79 [00:03<00:00, 23.57it/s]
 85%| | 67/79 [00:03<00:00, 23.87it/s]
 89%| | 70/79 [00:03<00:00, 24.09it/s]
 92%|| 73/79 [00:03<00:00, 24.58it/s]
 96%|| 76/79 [00:03<00:00, 25.40it/s]
100%|| 79/79 [00:04<00:00, 26.34it/s]
, 23.46it/s]
 70%|   | 55/79 [00:03<00:01, 23.86it/s]
 73%|  | 58/79 [00:03<00:00, 24.05it/s]
 77%|  | 61/79 [00:03<00:00, 24.17it/s]
 81%|  | 64/79 [00:03<00:00, 24.09it/s]
 85%| | 67/79 [00:03<00:00, 24.55it/s]
 89%| | 70/79 [00:03<00:00, 23.98it/s]
 92%|| 73/79 [00:03<00:00, 24.38it/s]
 96%|| 76/79 [00:03<00:00, 25.03it/s]
100%|| 79/79 [00:04<00:00, 26.12it/s]
, 23.64it/s]
 70%|   | 55/79 [00:03<00:01, 23.95it/s]
 73%|  | 58/79 [00:03<00:00, 24.13it/s]
 77%|  | 61/79 [00:03<00:00, 24.23it/s]
 81%|  | 64/79 [00:03<00:00, 24.33it/s]
 85%| | 67/79 [00:03<00:00, 24.29it/s]
 89%| | 70/79 [00:03<00:00, 24.29it/s]
 92%|| 73/79 [00:03<00:00, 24.96it/s]
 96%|| 76/79 [00:03<00:00, 25.66it/s]
100%|| 79/79 [00:04<00:00, 26.62it/s]
, 23.76it/s]
 70%|   | 55/79 [00:03<00:00, 24.18it/s]
 73%|  | 58/79 [00:03<00:00, 24.53it/s]
 77%|  | 61/79 [00:03<00:00, 24.59it/s]
 81%|  | 64/79 [00:03<00:00, 24.65it/s]
 85%| | 67/79 [00:03<00:00, 24.18it/s]
 89%| | 70/79 [00:03<00:00, 24.42it/s]
 92%|| 73/79 [00:03<00:00, 24.35it/s]
 96%|| 76/79 [00:03<00:00, 25.09it/s]
100%|| 79/79 [00:04<00:00, 25.96it/s]
, 23.09it/s]
 70%|   | 55/79 [00:03<00:01, 23.69it/s]
 73%|  | 58/79 [00:03<00:00, 23.67it/s]
 77%|  | 61/79 [00:03<00:00, 23.98it/s]
 81%|  | 64/79 [00:03<00:00, 23.92it/s]
 85%| | 67/79 [00:03<00:00, 24.10it/s]
 89%| | 70/79 [00:03<00:00, 24.19it/s]
 92%|| 73/79 [00:03<00:00, 24.65it/s]
 96%|| 76/79 [00:03<00:00, 25.31it/s]
100%|| 79/79 [00:04<00:00, 26.25it/s]
, 23.07it/s]
 70%|   | 55/79 [00:03<00:01, 23.52it/s]
 73%|  | 58/79 [00:03<00:00, 23.57it/s]
 77%|  | 61/79 [00:03<00:00, 23.81it/s]
 81%|  | 64/79 [00:03<00:00, 24.12it/s]
 85%| | 67/79 [00:03<00:00, 24.35it/s]
 89%| | 70/79 [00:03<00:00, 24.38it/s]
 92%|| 73/79 [00:03<00:00, 24.70it/s]
 96%|| 76/79 [00:03<00:00, 25.52it/s]
100%|| 79/79 [00:04<00:00, 26.22it/s]
, 23.00it/s]
 70%|   | 55/79 [00:03<00:01, 23.67it/s]
 73%|  | 58/79 [00:03<00:00, 23.71it/s]
 77%|  | 61/79 [00:03<00:00, 23.70it/s]
 81%|  | 64/79 [00:03<00:00, 23.83it/s]
 85%| | 67/79 [00:03<00:00, 24.02it/s]
 89%| | 70/79 [00:03<00:00, 23.77it/s]
 92%|| 73/79 [00:03<00:00, 24.41it/s]
 96%|| 76/79 [00:03<00:00, 25.17it/s]
100%|| 79/79 [00:04<00:00, 26.08it/s]
, 23.23it/s]
 70%|   | 55/79 [00:03<00:01, 23.59it/s]
 73%|  | 58/79 [00:03<00:00, 23.81it/s]
 77%|  | 61/79 [00:03<00:00, 23.86it/s]
 81%|  | 64/79 [00:03<00:00, 24.05it/s]
 85%| | 67/79 [00:03<00:00, 24.09it/s]
 89%| | 70/79 [00:03<00:00, 24.09it/s]
 92%|| 73/79 [00:03<00:00, 24.69it/s]
 96%|| 76/79 [00:03<00:00, 25.38it/s]
100%|| 79/79 [00:04<00:00, 26.36it/s]
, 22.92it/s]
 70%|   | 55/79 [00:03<00:01, 23.31it/s]
 73%|  | 58/79 [00:03<00:00, 23.55it/s]
 77%|  | 61/79 [00:03<00:00, 23.82it/s]
 81%|  | 64/79 [00:03<00:00, 23.95it/s]
 85%| | 67/79 [00:03<00:00, 24.23it/s]
 89%| | 70/79 [00:03<00:00, 24.47it/s]
 92%|| 73/79 [00:03<00:00, 24.87it/s]
 96%|| 76/79 [00:03<00:00, 25.60it/s]
100%|| 79/79 [00:04<00:00, 26.47it/s]
31it/s]
 68%|   | 54/79 [00:03<00:01, 23.05it/s]
 72%|  | 57/79 [00:03<00:00, 23.10it/s]
 76%|  | 60/79 [00:03<00:00, 23.14it/s]
 80%|  | 63/79 [00:03<00:00, 23.10it/s]
 84%| | 66/79 [00:03<00:00, 23.68it/s]
 87%| | 69/79 [00:03<00:00, 23.47it/s]
 91%| | 72/79 [00:03<00:00, 23.64it/s]
 95%|| 75/79 [00:04<00:00, 24.62it/s]
 99%|| 78/79 [00:04<00:00, 25.39it/s]
100%|| 79/79 [00:04<00:00, 18.62it/s]
2020-06-23 15:49:36,005 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.245538 (0.027171446228027345 s / img per device, on 32 devices)
2020-06-23 15:49:36,024 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:49:36,024 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:49:36,042 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592952582577, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 15, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592952582578, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 15}}
2020-06-23 15:49:42,797 maskrcnn_benchmark.trainer INFO: eta: 0:57:03  iter: 12840  loss: 0.5705 (0.7032)  loss_classifier: 0.1957 (0.2522)  loss_box_reg: 0.0877 (0.1139)  loss_mask: 0.2670 (0.2846)  loss_objectness: 0.0127 (0.0331)  loss_rpn_box_reg: 0.0057 (0.0193)  time: 0.1111 (0.1261)  data: 0.0015 (0.0178)  lr: 0.001600  max mem: 5140
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 15:49:45,005 maskrcnn_benchmark.trainer INFO: eta: 0:57:00  iter: 12860  loss: 0.5463 (0.7030)  loss_classifier: 0.1786 (0.2521)  loss_box_reg: 0.0896 (0.1139)  loss_mask: 0.2272 (0.2845)  loss_objectness: 0.0195 (0.0331)  loss_rpn_box_reg: 0.0137 (0.0193)  time: 0.1103 (0.1260)  data: 0.0016 (0.0177)  lr: 0.001600  max mem: 5140
2020-06-23 15:49:47,209 maskrcnn_benchmark.trainer INFO: eta: 0:56:57  iter: 12880  loss: 0.5257 (0.7028)  loss_classifier: 0.1811 (0.2520)  loss_box_reg: 0.0855 (0.1139)  loss_mask: 0.2406 (0.2845)  loss_objectness: 0.0196 (0.0331)  loss_rpn_box_reg: 0.0098 (0.0193)  time: 0.1102 (0.1260)  data: 0.0015 (0.0177)  lr: 0.001600  max mem: 5140
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.52s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.36s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37587
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.59091
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.40737
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21681
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.40344
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49166
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.31257
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.49157
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51502
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.32907
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.54808
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.64937
2020-06-23 15:49:49,399 maskrcnn_benchmark.trainer INFO: eta: 0:56:54  iter: 12900  loss: 0.5363 (0.7025)  loss_classifier: 0.1661 (0.2519)  loss_box_reg: 0.0874 (0.1138)  loss_mask: 0.2492 (0.2844)  loss_objectness: 0.0134 (0.0331)  loss_rpn_box_reg: 0.0061 (0.0193)  time: 0.1092 (0.1260)  data: 0.0016 (0.0177)  lr: 0.001600  max mem: 5140
2020-06-23 15:49:51,596 maskrcnn_benchmark.trainer INFO: eta: 0:56:51  iter: 12920  loss: 0.5897 (0.7023)  loss_classifier: 0.1359 (0.2518)  loss_box_reg: 0.0904 (0.1138)  loss_mask: 0.2487 (0.2844)  loss_objectness: 0.0154 (0.0331)  loss_rpn_box_reg: 0.0065 (0.0193)  time: 0.1087 (0.1260)  data: 0.0016 (0.0177)  lr: 0.001600  max mem: 5140
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:49:53,801 maskrcnn_benchmark.trainer INFO: eta: 0:56:47  iter: 12940  loss: 0.5826 (0.7022)  loss_classifier: 0.1832 (0.2517)  loss_box_reg: 0.0953 (0.1138)  loss_mask: 0.2647 (0.2843)  loss_objectness: 0.0170 (0.0331)  loss_rpn_box_reg: 0.0070 (0.0193)  time: 0.1098 (0.1259)  data: 0.0015 (0.0176)  lr: 0.001600  max mem: 5140
DONE (t=1.35s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:49:56,002 maskrcnn_benchmark.trainer INFO: eta: 0:56:44  iter: 12960  loss: 0.5590 (0.7020)  loss_classifier: 0.1724 (0.2516)  loss_box_reg: 0.0926 (0.1138)  loss_mask: 0.2339 (0.2842)  loss_objectness: 0.0150 (0.0331)  loss_rpn_box_reg: 0.0090 (0.0193)  time: 0.1093 (0.1259)  data: 0.0016 (0.0176)  lr: 0.001600  max mem: 5140
DONE (t=2.22s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.34223
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.55852
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.36328
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15838
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36858
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.51005
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29393
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.45020
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.46951
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27820
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50533
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62249
2020-06-23 15:49:57,658 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.37586861165914615, segm mAP: 0.3422257947103047
:::MLLOG {"namespace": "", "time_ms": 1592952597659, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.37586861165914615, "SEGM": 0.3422257947103047}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 14}}
:::MLLOG {"namespace": "", "time_ms": 1592952597659, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 14}}
2020-06-23 15:49:58,312 maskrcnn_benchmark.trainer INFO: eta: 0:56:41  iter: 12980  loss: 0.5648 (0.7017)  loss_classifier: 0.1715 (0.2514)  loss_box_reg: 0.0986 (0.1137)  loss_mask: 0.2590 (0.2842)  loss_objectness: 0.0136 (0.0330)  loss_rpn_box_reg: 0.0068 (0.0193)  time: 0.1088 (0.1259)  data: 0.0015 (0.0176)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:00,502 maskrcnn_benchmark.trainer INFO: eta: 0:56:38  iter: 13000  loss: 0.4696 (0.7014)  loss_classifier: 0.1451 (0.2513)  loss_box_reg: 0.0711 (0.1137)  loss_mask: 0.2342 (0.2841)  loss_objectness: 0.0079 (0.0330)  loss_rpn_box_reg: 0.0048 (0.0193)  time: 0.1093 (0.1259)  data: 0.0015 (0.0176)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:02,700 maskrcnn_benchmark.trainer INFO: eta: 0:56:35  iter: 13020  loss: 0.6056 (0.7013)  loss_classifier: 0.1894 (0.2512)  loss_box_reg: 0.1026 (0.1137)  loss_mask: 0.2674 (0.2841)  loss_objectness: 0.0151 (0.0330)  loss_rpn_box_reg: 0.0075 (0.0193)  time: 0.1095 (0.1258)  data: 0.0015 (0.0175)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:04,918 maskrcnn_benchmark.trainer INFO: eta: 0:56:32  iter: 13040  loss: 0.6241 (0.7011)  loss_classifier: 0.1838 (0.2511)  loss_box_reg: 0.1037 (0.1136)  loss_mask: 0.2499 (0.2841)  loss_objectness: 0.0218 (0.0330)  loss_rpn_box_reg: 0.0118 (0.0193)  time: 0.1103 (0.1258)  data: 0.0015 (0.0175)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:07,116 maskrcnn_benchmark.trainer INFO: eta: 0:56:29  iter: 13060  loss: 0.5636 (0.7009)  loss_classifier: 0.1689 (0.2510)  loss_box_reg: 0.0996 (0.1136)  loss_mask: 0.2595 (0.2840)  loss_objectness: 0.0088 (0.0330)  loss_rpn_box_reg: 0.0068 (0.0193)  time: 0.1090 (0.1258)  data: 0.0015 (0.0175)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:09,324 maskrcnn_benchmark.trainer INFO: eta: 0:56:25  iter: 13080  loss: 0.5713 (0.7008)  loss_classifier: 0.1813 (0.2510)  loss_box_reg: 0.0866 (0.1136)  loss_mask: 0.2498 (0.2840)  loss_objectness: 0.0183 (0.0330)  loss_rpn_box_reg: 0.0152 (0.0193)  time: 0.1110 (0.1258)  data: 0.0016 (0.0175)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:11,514 maskrcnn_benchmark.trainer INFO: eta: 0:56:22  iter: 13100  loss: 0.4837 (0.7006)  loss_classifier: 0.1450 (0.2508)  loss_box_reg: 0.0699 (0.1136)  loss_mask: 0.2487 (0.2839)  loss_objectness: 0.0097 (0.0329)  loss_rpn_box_reg: 0.0064 (0.0193)  time: 0.1088 (0.1258)  data: 0.0015 (0.0174)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:13,725 maskrcnn_benchmark.trainer INFO: eta: 0:56:19  iter: 13120  loss: 0.4788 (0.7003)  loss_classifier: 0.1334 (0.2507)  loss_box_reg: 0.0793 (0.1135)  loss_mask: 0.2310 (0.2838)  loss_objectness: 0.0122 (0.0329)  loss_rpn_box_reg: 0.0053 (0.0193)  time: 0.1100 (0.1257)  data: 0.0014 (0.0174)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:15,932 maskrcnn_benchmark.trainer INFO: eta: 0:56:16  iter: 13140  loss: 0.5027 (0.7000)  loss_classifier: 0.1637 (0.2506)  loss_box_reg: 0.0790 (0.1135)  loss_mask: 0.2274 (0.2838)  loss_objectness: 0.0087 (0.0329)  loss_rpn_box_reg: 0.0080 (0.0193)  time: 0.1097 (0.1257)  data: 0.0015 (0.0174)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:18,136 maskrcnn_benchmark.trainer INFO: eta: 0:56:13  iter: 13160  loss: 0.4564 (0.6997)  loss_classifier: 0.1517 (0.2504)  loss_box_reg: 0.0644 (0.1134)  loss_mask: 0.2376 (0.2837)  loss_objectness: 0.0101 (0.0329)  loss_rpn_box_reg: 0.0060 (0.0193)  time: 0.1100 (0.1257)  data: 0.0014 (0.0174)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:20,340 maskrcnn_benchmark.trainer INFO: eta: 0:56:10  iter: 13180  loss: 0.4774 (0.6994)  loss_classifier: 0.1537 (0.2503)  loss_box_reg: 0.0660 (0.1134)  loss_mask: 0.2366 (0.2836)  loss_objectness: 0.0094 (0.0328)  loss_rpn_box_reg: 0.0065 (0.0193)  time: 0.1099 (0.1257)  data: 0.0014 (0.0173)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:22,531 maskrcnn_benchmark.trainer INFO: eta: 0:56:06  iter: 13200  loss: 0.4657 (0.6991)  loss_classifier: 0.1429 (0.2502)  loss_box_reg: 0.0924 (0.1134)  loss_mask: 0.2262 (0.2835)  loss_objectness: 0.0124 (0.0328)  loss_rpn_box_reg: 0.0058 (0.0192)  time: 0.1095 (0.1256)  data: 0.0015 (0.0173)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:24,726 maskrcnn_benchmark.trainer INFO: eta: 0:56:03  iter: 13220  loss: 0.5239 (0.6989)  loss_classifier: 0.1881 (0.2501)  loss_box_reg: 0.0791 (0.1133)  loss_mask: 0.2348 (0.2835)  loss_objectness: 0.0131 (0.0328)  loss_rpn_box_reg: 0.0082 (0.0192)  time: 0.1092 (0.1256)  data: 0.0015 (0.0173)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:26,919 maskrcnn_benchmark.trainer INFO: eta: 0:56:00  iter: 13240  loss: 0.5124 (0.6987)  loss_classifier: 0.1566 (0.2500)  loss_box_reg: 0.1017 (0.1133)  loss_mask: 0.2443 (0.2834)  loss_objectness: 0.0149 (0.0328)  loss_rpn_box_reg: 0.0073 (0.0192)  time: 0.1093 (0.1256)  data: 0.0015 (0.0173)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:29,106 maskrcnn_benchmark.trainer INFO: eta: 0:55:57  iter: 13260  loss: 0.4288 (0.6984)  loss_classifier: 0.1322 (0.2498)  loss_box_reg: 0.0602 (0.1132)  loss_mask: 0.2200 (0.2833)  loss_objectness: 0.0082 (0.0327)  loss_rpn_box_reg: 0.0058 (0.0192)  time: 0.1091 (0.1256)  data: 0.0015 (0.0172)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:31,302 maskrcnn_benchmark.trainer INFO: eta: 0:55:54  iter: 13280  loss: 0.5218 (0.6982)  loss_classifier: 0.1484 (0.2497)  loss_box_reg: 0.0806 (0.1132)  loss_mask: 0.2360 (0.2833)  loss_objectness: 0.0143 (0.0327)  loss_rpn_box_reg: 0.0107 (0.0192)  time: 0.1088 (0.1255)  data: 0.0015 (0.0172)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:33,491 maskrcnn_benchmark.trainer INFO: eta: 0:55:51  iter: 13300  loss: 0.5406 (0.6979)  loss_classifier: 0.1561 (0.2496)  loss_box_reg: 0.0869 (0.1132)  loss_mask: 0.2472 (0.2832)  loss_objectness: 0.0157 (0.0327)  loss_rpn_box_reg: 0.0071 (0.0192)  time: 0.1092 (0.1255)  data: 0.0015 (0.0172)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:35,696 maskrcnn_benchmark.trainer INFO: eta: 0:55:48  iter: 13320  loss: 0.4649 (0.6977)  loss_classifier: 0.1542 (0.2495)  loss_box_reg: 0.0712 (0.1131)  loss_mask: 0.2472 (0.2832)  loss_objectness: 0.0107 (0.0327)  loss_rpn_box_reg: 0.0052 (0.0192)  time: 0.1098 (0.1255)  data: 0.0015 (0.0172)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:37,891 maskrcnn_benchmark.trainer INFO: eta: 0:55:44  iter: 13340  loss: 0.5550 (0.6975)  loss_classifier: 0.1759 (0.2494)  loss_box_reg: 0.0887 (0.1131)  loss_mask: 0.2576 (0.2831)  loss_objectness: 0.0175 (0.0327)  loss_rpn_box_reg: 0.0097 (0.0192)  time: 0.1088 (0.1255)  data: 0.0015 (0.0171)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:40,088 maskrcnn_benchmark.trainer INFO: eta: 0:55:41  iter: 13360  loss: 0.4818 (0.6972)  loss_classifier: 0.1591 (0.2493)  loss_box_reg: 0.0722 (0.1131)  loss_mask: 0.2239 (0.2831)  loss_objectness: 0.0113 (0.0327)  loss_rpn_box_reg: 0.0053 (0.0192)  time: 0.1100 (0.1254)  data: 0.0015 (0.0171)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:42,280 maskrcnn_benchmark.trainer INFO: eta: 0:55:38  iter: 13380  loss: 0.5334 (0.6970)  loss_classifier: 0.1918 (0.2492)  loss_box_reg: 0.0894 (0.1130)  loss_mask: 0.2302 (0.2830)  loss_objectness: 0.0175 (0.0326)  loss_rpn_box_reg: 0.0088 (0.0192)  time: 0.1099 (0.1254)  data: 0.0015 (0.0171)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:44,464 maskrcnn_benchmark.trainer INFO: eta: 0:55:35  iter: 13400  loss: 0.4456 (0.6967)  loss_classifier: 0.1386 (0.2490)  loss_box_reg: 0.0741 (0.1130)  loss_mask: 0.2344 (0.2829)  loss_objectness: 0.0101 (0.0326)  loss_rpn_box_reg: 0.0054 (0.0191)  time: 0.1092 (0.1254)  data: 0.0015 (0.0171)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:46,666 maskrcnn_benchmark.trainer INFO: eta: 0:55:32  iter: 13420  loss: 0.5591 (0.6965)  loss_classifier: 0.1867 (0.2489)  loss_box_reg: 0.0955 (0.1130)  loss_mask: 0.2504 (0.2829)  loss_objectness: 0.0168 (0.0326)  loss_rpn_box_reg: 0.0063 (0.0191)  time: 0.1096 (0.1254)  data: 0.0017 (0.0171)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:48,852 maskrcnn_benchmark.trainer INFO: eta: 0:55:29  iter: 13440  loss: 0.5301 (0.6963)  loss_classifier: 0.1740 (0.2488)  loss_box_reg: 0.0957 (0.1129)  loss_mask: 0.2315 (0.2828)  loss_objectness: 0.0117 (0.0326)  loss_rpn_box_reg: 0.0078 (0.0191)  time: 0.1091 (0.1253)  data: 0.0015 (0.0170)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:51,053 maskrcnn_benchmark.trainer INFO: eta: 0:55:26  iter: 13460  loss: 0.4977 (0.6960)  loss_classifier: 0.1527 (0.2487)  loss_box_reg: 0.0736 (0.1129)  loss_mask: 0.2450 (0.2827)  loss_objectness: 0.0104 (0.0325)  loss_rpn_box_reg: 0.0051 (0.0191)  time: 0.1084 (0.1253)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:53,242 maskrcnn_benchmark.trainer INFO: eta: 0:55:23  iter: 13480  loss: 0.4807 (0.6957)  loss_classifier: 0.1536 (0.2486)  loss_box_reg: 0.0779 (0.1128)  loss_mask: 0.2074 (0.2826)  loss_objectness: 0.0117 (0.0325)  loss_rpn_box_reg: 0.0046 (0.0191)  time: 0.1092 (0.1253)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:55,441 maskrcnn_benchmark.trainer INFO: eta: 0:55:19  iter: 13500  loss: 0.5248 (0.6954)  loss_classifier: 0.1536 (0.2485)  loss_box_reg: 0.0749 (0.1128)  loss_mask: 0.2174 (0.2826)  loss_objectness: 0.0134 (0.0325)  loss_rpn_box_reg: 0.0066 (0.0191)  time: 0.1100 (0.1253)  data: 0.0015 (0.0170)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:57,646 maskrcnn_benchmark.trainer INFO: eta: 0:55:16  iter: 13520  loss: 0.6300 (0.6952)  loss_classifier: 0.2247 (0.2484)  loss_box_reg: 0.0966 (0.1128)  loss_mask: 0.2392 (0.2825)  loss_objectness: 0.0183 (0.0325)  loss_rpn_box_reg: 0.0113 (0.0191)  time: 0.1103 (0.1253)  data: 0.0015 (0.0169)  lr: 0.001600  max mem: 5140
2020-06-23 15:50:59,848 maskrcnn_benchmark.trainer INFO: eta: 0:55:13  iter: 13540  loss: 0.5222 (0.6950)  loss_classifier: 0.1626 (0.2483)  loss_box_reg: 0.0895 (0.1128)  loss_mask: 0.2215 (0.2824)  loss_objectness: 0.0141 (0.0325)  loss_rpn_box_reg: 0.0048 (0.0191)  time: 0.1095 (0.1252)  data: 0.0016 (0.0169)  lr: 0.001600  max mem: 5140
2020-06-23 15:51:02,044 maskrcnn_benchmark.trainer INFO: eta: 0:55:10  iter: 13560  loss: 0.4331 (0.6947)  loss_classifier: 0.1403 (0.2482)  loss_box_reg: 0.0602 (0.1127)  loss_mask: 0.2043 (0.2823)  loss_objectness: 0.0086 (0.0324)  loss_rpn_box_reg: 0.0042 (0.0191)  time: 0.1093 (0.1252)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5140
2020-06-23 15:51:04,247 maskrcnn_benchmark.trainer INFO: eta: 0:55:07  iter: 13580  loss: 0.5810 (0.6945)  loss_classifier: 0.1783 (0.2481)  loss_box_reg: 0.0884 (0.1127)  loss_mask: 0.2565 (0.2823)  loss_objectness: 0.0105 (0.0324)  loss_rpn_box_reg: 0.0059 (0.0191)  time: 0.1096 (0.1252)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5140
2020-06-23 15:51:06,424 maskrcnn_benchmark.trainer INFO: eta: 0:55:04  iter: 13600  loss: 0.4913 (0.6942)  loss_classifier: 0.1571 (0.2480)  loss_box_reg: 0.0673 (0.1126)  loss_mask: 0.2219 (0.2822)  loss_objectness: 0.0122 (0.0324)  loss_rpn_box_reg: 0.0063 (0.0191)  time: 0.1083 (0.1252)  data: 0.0015 (0.0168)  lr: 0.001600  max mem: 5140
2020-06-23 15:51:08,595 maskrcnn_benchmark.trainer INFO: eta: 0:55:01  iter: 13620  loss: 0.5804 (0.6940)  loss_classifier: 0.1798 (0.2479)  loss_box_reg: 0.0952 (0.1126)  loss_mask: 0.2367 (0.2821)  loss_objectness: 0.0140 (0.0324)  loss_rpn_box_reg: 0.0082 (0.0191)  time: 0.1075 (0.1251)  data: 0.0015 (0.0168)  lr: 0.001600  max mem: 5140
2020-06-23 15:51:10,796 maskrcnn_benchmark.trainer INFO: eta: 0:54:58  iter: 13640  loss: 0.5387 (0.6939)  loss_classifier: 0.1818 (0.2478)  loss_box_reg: 0.0939 (0.1126)  loss_mask: 0.2473 (0.2821)  loss_objectness: 0.0138 (0.0324)  loss_rpn_box_reg: 0.0066 (0.0191)  time: 0.1098 (0.1251)  data: 0.0015 (0.0168)  lr: 0.001600  max mem: 5140
2020-06-23 15:51:12,999 maskrcnn_benchmark.trainer INFO: eta: 0:54:55  iter: 13660  loss: 0.5050 (0.6936)  loss_classifier: 0.1650 (0.2477)  loss_box_reg: 0.0715 (0.1125)  loss_mask: 0.2332 (0.2820)  loss_objectness: 0.0132 (0.0323)  loss_rpn_box_reg: 0.0099 (0.0191)  time: 0.1099 (0.1251)  data: 0.0015 (0.0168)  lr: 0.001600  max mem: 5140
2020-06-23 15:51:15,204 maskrcnn_benchmark.trainer INFO: eta: 0:54:52  iter: 13680  loss: 0.4566 (0.6934)  loss_classifier: 0.1682 (0.2476)  loss_box_reg: 0.0818 (0.1125)  loss_mask: 0.2297 (0.2820)  loss_objectness: 0.0097 (0.0323)  loss_rpn_box_reg: 0.0050 (0.0190)  time: 0.1095 (0.1251)  data: 0.0015 (0.0168)  lr: 0.001600  max mem: 5140
2020-06-23 15:51:17,419 maskrcnn_benchmark.trainer INFO: eta: 0:54:48  iter: 13700  loss: 0.5536 (0.6932)  loss_classifier: 0.1758 (0.2475)  loss_box_reg: 0.0753 (0.1125)  loss_mask: 0.2338 (0.2819)  loss_objectness: 0.0182 (0.0323)  loss_rpn_box_reg: 0.0065 (0.0190)  time: 0.1105 (0.1251)  data: 0.0015 (0.0167)  lr: 0.001600  max mem: 5140
2020-06-23 15:51:19,610 maskrcnn_benchmark.trainer INFO: eta: 0:54:45  iter: 13720  loss: 0.4389 (0.6929)  loss_classifier: 0.1453 (0.2474)  loss_box_reg: 0.0618 (0.1124)  loss_mask: 0.2180 (0.2818)  loss_objectness: 0.0156 (0.0323)  loss_rpn_box_reg: 0.0067 (0.0190)  time: 0.1091 (0.1250)  data: 0.0015 (0.0167)  lr: 0.001600  max mem: 5140
2020-06-23 15:51:21,792 maskrcnn_benchmark.trainer INFO: eta: 0:54:42  iter: 13740  loss: 0.5566 (0.6927)  loss_classifier: 0.1807 (0.2473)  loss_box_reg: 0.0909 (0.1124)  loss_mask: 0.2400 (0.2817)  loss_objectness: 0.0193 (0.0323)  loss_rpn_box_reg: 0.0107 (0.0190)  time: 0.1089 (0.1250)  data: 0.0015 (0.0167)  lr: 0.001600  max mem: 5140
:::MLLOG {"namespace": "", "time_ms": 1592952683438, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 15}}
:::MLLOG {"namespace": "", "time_ms": 1592952683438, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 15}}
:::MLLOG {"namespace": "", "time_ms": 1592952683439, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 15}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
2020-06-23 15:51:23,646 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
index created!
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
2020-06-23 15:51:23,947 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
index created!
Done (t=0.28s)
Done (t=0.27s)
creating index...
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:57,  1.35it/s]
  4%|         | 3/79 [00:00<00:40,  1.87it/s]
  8%|         | 6/79 [00:00<00:28,  2.59it/s]
 11%|        | 9/79 [00:01<00:19,  3.53it/s]
 15%|        | 12/79 [00:01<00:14,  4.76it/s]
 19%|        | 15/79 [00:01<00:10,  6.28it/s]
 23%|       | 18/79 [00:01<00:07,  8.09it/s]
 27%|       | 21/79 [00:01<00:05, 10.18it/s]
 30%|       | 24/79 [00:01<00:04, 12.39it/s]
 34%|      | 27/79 [00:01<00:03, 14.63it/s]
 38%|      | 30/79 [00:01<00:02, 16.67it/s]
 42%|     | 33/79 [00:02<00:02, 18.64it/s]
 46%|     | 36/79 [00:02<00:02, 20.25it/s]
 49%|     | 39/79 [00:02<00:01, 21.35it/s]
 53%|    | 42/79 [00:02<00:01, 22.35it/s]
 57%|    | 45/79 [00:02<00:01, 23.14it/s]
 61%|    | 48/79 [00:02<00:01, 23.82it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:59,  1.31it/s]
  5%|         | 4/79 [00:00<00:41,  1.82it/s]
  9%|         | 7/79 [00:01<00:28,  2.52it/s]
 13%|        | 10/79 [00:01<00:19,  3.46it/s]
 16%|        | 13/79 [00:01<00:14,  4.67it/s]
 20%|        | 16/79 [00:01<00:10,  6.17it/s]
 24%|       | 19/79 [00:01<00:07,  7.99it/s]
 28%|       | 22/79 [00:01<00:05, 10.03it/s]
 32%|      | 25/79 [00:01<00:04, 12.31it/s]
 35%|      | 28/79 [00:01<00:03, 14.52it/s]
 39%|      | 31/79 [00:01<00:02, 16.62it/s]
 43%|     | 34/79 [00:02<00:02, 18.55it/s]
 47%|     | 37/79 [00:02<00:02, 20.37it/s]
 51%|     | 40/79 [00:02<00:01, 21.35it/s]
 54%|    | 43/79 [00:02<00:01, 22.50it/s]
 58%|    | 46/79 [00:02<00:01, 23.28it/s]
 62%|   | 49/79 [00:02<00:01, 23.70it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.24it/s]
 16%|        | 13/79 [00:01<00:15,  4.39it/s]
 20%|        | 16/79 [00:01<00:10,  5.83it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.57it/s]
 32%|      | 25/79 [00:01<00:04, 11.77it/s]
 35%|      | 28/79 [00:01<00:03, 14.07it/s]
 39%|      | 31/79 [00:02<00:02, 16.26it/s]
 43%|     | 34/79 [00:02<00:02, 18.25it/s]
 47%|     | 37/79 [00:02<00:02, 20.03it/s]
 51%|     | 40/79 [00:02<00:01, 21.25it/s]
 54%|    | 43/79 [00:02<00:01, 22.34it/s]
 58%|    | 46/79 [00:02<00:01, 23.19it/s]
 62%|   | 49/79 [00:02<00:01, 23.86it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  4%|         | 3/79 [00:00<00:47,  1.60it/s]
  8%|         | 6/79 [00:01<00:32,  2.23it/s]
 11%|        | 9/79 [00:01<00:22,  3.06it/s]
 15%|        | 12/79 [00:01<00:16,  4.15it/s]
 19%|        | 15/79 [00:01<00:11,  5.55it/s]
 23%|       | 18/79 [00:01<00:08,  7.24it/s]
 27%|       | 21/79 [00:01<00:06,  9.19it/s]
 30%|       | 24/79 [00:01<00:04, 11.35it/s]
 34%|      | 27/79 [00:01<00:03, 13.67it/s]
 38%|      | 30/79 [00:02<00:03, 15.73it/s]
 42%|     | 33/79 [00:02<00:02, 17.64it/s]
 46%|     | 36/79 [00:02<00:02, 19.35it/s]
 49%|     | 39/79 [00:02<00:01, 20.73it/s]
 53%|    | 42/79 [00:02<00:01, 21.82it/s]
 57%|    | 45/79 [00:02<00:01, 22.65it/s]
 61%|    | 48/79 [00:02<00:01, 23.51it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.86it/s]
 24%|       | 19/79 [00:01<00:07,  7.59it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.80it/s]
 35%|      | 28/79 [00:01<00:03, 13.94it/s]
 39%|      | 31/79 [00:02<00:03, 15.90it/s]
 43%|     | 34/79 [00:02<00:02, 17.87it/s]
 47%|     | 37/79 [00:02<00:02, 19.63it/s]
 51%|     | 40/79 [00:02<00:01, 20.68it/s]
 54%|    | 43/79 [00:02<00:01, 21.63it/s]
 58%|    | 46/79 [00:02<00:01, 22.39it/s]
 62%|   | 49/79 [00:02<00:01, 23.12it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.71it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.41it/s]
 32%|      | 25/79 [00:01<00:04, 11.53it/s]
 35%|      | 28/79 [00:01<00:03, 13.81it/s]
 39%|      | 31/79 [00:02<00:03, 15.92it/s]
 43%|     | 34/79 [00:02<00:02, 17.92it/s]
 47%|     | 37/79 [00:02<00:02, 19.60it/s]
 51%|     | 40/79 [00:02<00:01, 20.86it/s]
 54%|    | 43/79 [00:02<00:01, 21.93it/s]
 58%|    | 46/79 [00:02<00:01, 22.83it/s]
 62%|   | 49/79 [00:02<00:01, 23.51it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  4%|         | 3/79 [00:00<00:47,  1.59it/s]
  8%|         | 6/79 [00:01<00:33,  2.21it/s]
 11%|        | 9/79 [00:01<00:23,  3.04it/s]
 15%|        | 12/79 [00:01<00:16,  4.13it/s]
 19%|        | 15/79 [00:01<00:11,  5.51it/s]
 23%|       | 18/79 [00:01<00:08,  7.21it/s]
 27%|       | 21/79 [00:01<00:06,  9.18it/s]
 30%|       | 24/79 [00:01<00:04, 11.33it/s]
 34%|      | 27/79 [00:01<00:03, 13.56it/s]
 38%|      | 30/79 [00:02<00:03, 15.75it/s]
 42%|     | 33/79 [00:02<00:02, 17.71it/s]
 46%|     | 36/79 [00:02<00:02, 19.44it/s]
 49%|     | 39/79 [00:02<00:01, 20.85it/s]
 53%|    | 42/79 [00:02<00:01, 22.06it/s]
 57%|    | 45/79 [00:02<00:01, 22.83it/s]
 61%|    | 48/79 [00:02<00:01, 23.41it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.76it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:06,  9.47it/s]
 32%|      | 25/79 [00:01<00:04, 11.56it/s]
 35%|      | 28/79 [00:01<00:03, 13.76it/s]
 39%|      | 31/79 [00:02<00:03, 15.87it/s]
 43%|     | 34/79 [00:02<00:02, 17.75it/s]
 47%|     | 37/79 [00:02<00:02, 19.40it/s]
 51%|     | 40/79 [00:02<00:01, 20.72it/s]
 54%|    | 43/79 [00:02<00:01, 21.85it/s]
 58%|    | 46/79 [00:02<00:01, 22.53it/s]
 62%|   | 49/79 [00:02<00:01, 23.13it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.17it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.69it/s]
 39%|      | 31/79 [00:02<00:03, 15.98it/s]
 43%|     | 34/79 [00:02<00:02, 18.00it/s]
 47%|     | 37/79 [00:02<00:02, 19.81it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 22.07it/s]
 58%|    | 46/79 [00:02<00:01, 22.97it/s]
 62%|   | 49/79 [00:02<00:01, 23.81it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.09it/s]
 32%|      | 25/79 [00:01<00:04, 11.27it/s]
 35%|      | 28/79 [00:01<00:03, 13.62it/s]
 39%|      | 31/79 [00:02<00:03, 15.73it/s]
 43%|     | 34/79 [00:02<00:02, 17.90it/s]
 47%|     | 37/79 [00:02<00:02, 19.61it/s]
 51%|     | 40/79 [00:02<00:01, 21.00it/s]
 54%|    | 43/79 [00:02<00:01, 22.38it/s]
 58%|    | 46/79 [00:02<00:01, 23.37it/s]
 62%|   | 49/79 [00:02<00:01, 23.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  4%|         | 3/79 [00:00<00:45,  1.68it/s]
  8%|         | 6/79 [00:01<00:31,  2.32it/s]
 11%|        | 9/79 [00:01<00:21,  3.19it/s]
 15%|        | 12/79 [00:01<00:15,  4.32it/s]
 19%|        | 15/79 [00:01<00:11,  5.74it/s]
 23%|       | 18/79 [00:01<00:08,  7.41it/s]
 27%|       | 21/79 [00:01<00:06,  9.38it/s]
 30%|       | 24/79 [00:01<00:04, 11.53it/s]
 34%|      | 27/79 [00:01<00:03, 13.72it/s]
 38%|      | 30/79 [00:02<00:03, 15.79it/s]
 42%|     | 33/79 [00:02<00:02, 17.64it/s]
 46%|     | 36/79 [00:02<00:02, 19.35it/s]
 49%|     | 39/79 [00:02<00:01, 20.69it/s]
 53%|    | 42/79 [00:02<00:01, 21.59it/s]
 57%|    | 45/79 [00:02<00:01, 22.29it/s]
 61%|    | 48/79 [00:02<00:01, 22.75it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.36it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:05,  9.51it/s]
 32%|      | 25/79 [00:01<00:04, 11.71it/s]
 35%|      | 28/79 [00:01<00:03, 13.95it/s]
 39%|      | 31/79 [00:02<00:02, 16.16it/s]
 43%|     | 34/79 [00:02<00:02, 17.93it/s]
 47%|     | 37/79 [00:02<00:02, 19.47it/s]
 51%|     | 40/79 [00:02<00:01, 20.93it/s]
 54%|    | 43/79 [00:02<00:01, 21.88it/s]
 58%|    | 46/79 [00:02<00:01, 22.70it/s]
 62%|   | 49/79 [00:02<00:01, 23.17it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.25it/s]
 32%|      | 25/79 [00:01<00:04, 11.42it/s]
 35%|      | 28/79 [00:01<00:03, 13.66it/s]
 39%|      | 31/79 [00:02<00:03, 15.89it/s]
 43%|     | 34/79 [00:02<00:02, 17.99it/s]
 47%|     | 37/79 [00:02<00:02, 19.61it/s]
 51%|     | 40/79 [00:02<00:01, 20.74it/s]
 54%|    | 43/79 [00:02<00:01, 21.90it/s]
 58%|    | 46/79 [00:02<00:01, 22.79it/s]
 62%|   | 49/79 [00:02<00:01, 23.20it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.36it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:08,  7.50it/s]
 28%|       | 22/79 [00:01<00:06,  9.48it/s]
 32%|      | 25/79 [00:01<00:04, 11.60it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:03, 15.94it/s]
 43%|     | 34/79 [00:02<00:02, 17.81it/s]
 47%|     | 37/79 [00:02<00:02, 19.61it/s]
 51%|     | 40/79 [00:02<00:01, 20.68it/s]
 54%|    | 43/79 [00:02<00:01, 21.58it/s]
 58%|    | 46/79 [00:02<00:01, 22.18it/s]
 62%|   | 49/79 [00:02<00:01, 22.94it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:01<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.32it/s]
 32%|      | 25/79 [00:01<00:04, 11.39it/s]
 35%|      | 28/79 [00:01<00:03, 13.56it/s]
 39%|      | 31/79 [00:02<00:03, 15.76it/s]
 43%|     | 34/79 [00:02<00:02, 17.69it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.96it/s]
 54%|    | 43/79 [00:02<00:01, 22.13it/s]
 58%|    | 46/79 [00:02<00:01, 23.06it/s]
 62%|   | 49/79 [00:02<00:01, 23.70it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.33it/s]
 24%|       | 19/79 [00:01<00:08,  6.97it/s]
 28%|       | 22/79 [00:01<00:06,  8.91it/s]
 32%|      | 25/79 [00:01<00:04, 11.05it/s]
 35%|      | 28/79 [00:02<00:03, 13.29it/s]
 39%|      | 31/79 [00:02<00:03, 15.52it/s]
 43%|     | 34/79 [00:02<00:02, 17.52it/s]
 47%|     | 37/79 [00:02<00:02, 19.23it/s]
 51%|     | 40/79 [00:02<00:01, 20.69it/s]
 54%|    | 43/79 [00:02<00:01, 21.86it/s]
 58%|    | 46/79 [00:02<00:01, 22.72it/s]
 62%|   | 49/79 [00:02<00:01, 23.56it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.10it/s]
 32%|      | 25/79 [00:01<00:04, 11.24it/s]
 35%|      | 28/79 [00:01<00:03, 13.49it/s]
 39%|      | 31/79 [00:02<00:03, 15.57it/s]
 43%|     | 34/79 [00:02<00:02, 17.56it/s]
 47%|     | 37/79 [00:02<00:02, 19.34it/s]
 51%|     | 40/79 [00:02<00:01, 20.64it/s]
 54%|    | 43/79 [00:02<00:01, 21.66it/s]
 58%|    | 46/79 [00:02<00:01, 22.49it/s]
 62%|   | 49/79 [00:02<00:01, 23.18it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.13it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 28%|       | 22/79 [00:01<00:06,  9.12it/s]
 32%|      | 25/79 [00:01<00:04, 11.25it/s]
 35%|      | 28/79 [00:01<00:03, 13.52it/s]
 39%|      | 31/79 [00:02<00:03, 15.54it/s]
 43%|     | 34/79 [00:02<00:02, 17.58it/s]
 47%|     | 37/79 [00:02<00:02, 19.24it/s]
 51%|     | 40/79 [00:02<00:01, 20.74it/s]
 54%|    | 43/79 [00:02<00:01, 21.85it/s]
 58%|    | 46/79 [00:02<00:01, 22.85it/s]
 62%|   | 49/79 [00:02<00:01, 23.40it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:01<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.33it/s]
 35%|      | 28/79 [00:01<00:03, 13.56it/s]
 39%|      | 31/79 [00:02<00:03, 15.73it/s]
 43%|     | 34/79 [00:02<00:02, 17.59it/s]
 47%|     | 37/79 [00:02<00:02, 19.12it/s]
 51%|     | 40/79 [00:02<00:01, 20.42it/s]
 54%|    | 43/79 [00:02<00:01, 21.40it/s]
 58%|    | 46/79 [00:02<00:01, 22.32it/s]
 62%|   | 49/79 [00:02<00:01, 22.95it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  4%|         | 3/79 [00:01<00:51,  1.46it/s]
  8%|         | 6/79 [00:01<00:35,  2.04it/s]
 11%|        | 9/79 [00:01<00:24,  2.81it/s]
 15%|        | 12/79 [00:01<00:17,  3.84it/s]
 19%|        | 15/79 [00:01<00:12,  5.15it/s]
 23%|       | 18/79 [00:01<00:09,  6.77it/s]
 27%|       | 21/79 [00:01<00:06,  8.68it/s]
 30%|       | 24/79 [00:01<00:05, 10.80it/s]
 34%|      | 27/79 [00:02<00:03, 13.03it/s]
 38%|      | 30/79 [00:02<00:03, 15.28it/s]
 42%|     | 33/79 [00:02<00:02, 17.27it/s]
 46%|     | 36/79 [00:02<00:02, 18.87it/s]
 49%|     | 39/79 [00:02<00:01, 20.36it/s]
 53%|    | 42/79 [00:02<00:01, 21.64it/s]
 57%|    | 45/79 [00:02<00:01, 22.23it/s]
 61%|    | 48/79 [00:02<00:01, 23.00it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:12,  5.25it/s]
 24%|       | 19/79 [00:01<00:08,  6.90it/s]
 28%|       | 22/79 [00:01<00:06,  8.83it/s]
 32%|      | 25/79 [00:01<00:04, 11.00it/s]
 35%|      | 28/79 [00:02<00:03, 13.13it/s]
 39%|      | 31/79 [00:02<00:03, 15.29it/s]
 43%|     | 34/79 [00:02<00:02, 17.36it/s]
 47%|     | 37/79 [00:02<00:02, 18.94it/s]
 51%|     | 40/79 [00:02<00:01, 20.57it/s]
 54%|    | 43/79 [00:02<00:01, 21.80it/s]
 58%|    | 46/79 [00:02<00:01, 22.34it/s]
 62%|   | 49/79 [00:02<00:01, 23.24it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.08it/s]
 28%|       | 22/79 [00:01<00:06,  9.03it/s]
 32%|      | 25/79 [00:01<00:04, 11.20it/s]
 35%|      | 28/79 [00:02<00:03, 13.31it/s]
 39%|      | 31/79 [00:02<00:03, 15.49it/s]
 43%|     | 34/79 [00:02<00:02, 17.49it/s]
 47%|     | 37/79 [00:02<00:02, 19.26it/s]
 51%|     | 40/79 [00:02<00:01, 20.49it/s]
 54%|    | 43/79 [00:02<00:01, 21.51it/s]
 58%|    | 46/79 [00:02<00:01, 22.37it/s]
 62%|   | 49/79 [00:02<00:01, 22.97it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:11,  5.25it/s]
 24%|       | 19/79 [00:01<00:08,  6.88it/s]
 28%|       | 22/79 [00:01<00:06,  8.80it/s]
 32%|      | 25/79 [00:01<00:04, 10.92it/s]
 35%|      | 28/79 [00:02<00:03, 13.17it/s]
 39%|      | 31/79 [00:02<00:03, 15.25it/s]
 43%|     | 34/79 [00:02<00:02, 17.18it/s]
 47%|     | 37/79 [00:02<00:02, 18.80it/s]
 51%|     | 40/79 [00:02<00:01, 20.21it/s]
 54%|    | 43/79 [00:02<00:01, 21.32it/s]
 58%|    | 46/79 [00:02<00:01, 22.05it/s]
 62%|   | 49/79 [00:02<00:01, 22.87it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.18it/s]
 24%|       | 19/79 [00:01<00:08,  6.80it/s]
 28%|       | 22/79 [00:01<00:06,  8.73it/s]
 32%|      | 25/79 [00:01<00:04, 10.87it/s]
 35%|      | 28/79 [00:02<00:03, 13.15it/s]
 39%|      | 31/79 [00:02<00:03, 15.26it/s]
 43%|     | 34/79 [00:02<00:02, 17.17it/s]
 47%|     | 37/79 [00:02<00:02, 18.85it/s]
 51%|     | 40/79 [00:02<00:01, 20.32it/s]
 54%|    | 43/79 [00:02<00:01, 21.18it/s]
 58%|    | 46/79 [00:02<00:01, 22.14it/s]
 62%|   | 49/79 [00:02<00:01, 22.57it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.00it/s]
  5%|         | 4/79 [00:01<00:53,  1.41it/s]
  9%|         | 7/79 [00:01<00:36,  1.96it/s]
 13%|        | 10/79 [00:01<00:25,  2.71it/s]
 16%|        | 13/79 [00:01<00:17,  3.71it/s]
 20%|        | 16/79 [00:01<00:12,  4.98it/s]
 24%|       | 19/79 [00:01<00:09,  6.55it/s]
 28%|       | 22/79 [00:01<00:06,  8.42it/s]
 32%|      | 25/79 [00:01<00:05, 10.51it/s]
 35%|      | 28/79 [00:02<00:03, 12.76it/s]
 39%|      | 31/79 [00:02<00:03, 14.95it/s]
 43%|     | 34/79 [00:02<00:02, 17.09it/s]
 47%|     | 37/79 [00:02<00:02, 18.92it/s]
 51%|     | 40/79 [00:02<00:01, 20.45it/s]
 54%|    | 43/79 [00:02<00:01, 21.55it/s]
 58%|    | 46/79 [00:02<00:01, 22.58it/s]
 62%|   | 49/79 [00:02<00:01, 23.30it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:12,  5.24it/s]
 24%|       | 19/79 [00:01<00:08,  6.87it/s]
 28%|       | 22/79 [00:01<00:06,  8.79it/s]
 32%|      | 25/79 [00:01<00:04, 10.90it/s]
 35%|      | 28/79 [00:02<00:03, 13.11it/s]
 39%|      | 31/79 [00:02<00:03, 15.27it/s]
 43%|     | 34/79 [00:02<00:02, 17.26it/s]
 47%|     | 37/79 [00:02<00:02, 18.89it/s]
 51%|     | 40/79 [00:02<00:01, 20.43it/s]
 54%|    | 43/79 [00:02<00:01, 21.63it/s]
 58%|    | 46/79 [00:02<00:01, 22.27it/s]
 62%|   | 49/79 [00:02<00:01, 22.95it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  4%|         | 3/79 [00:01<00:51,  1.47it/s]
  8%|         | 6/79 [00:01<00:35,  2.04it/s]
 11%|        | 9/79 [00:01<00:24,  2.82it/s]
 15%|        | 12/79 [00:01<00:17,  3.84it/s]
 19%|        | 15/79 [00:01<00:12,  5.14it/s]
 23%|       | 18/79 [00:01<00:09,  6.77it/s]
 27%|       | 21/79 [00:01<00:06,  8.68it/s]
 30%|       | 24/79 [00:01<00:05, 10.74it/s]
 34%|      | 27/79 [00:02<00:04, 12.94it/s]
 38%|      | 30/79 [00:02<00:03, 15.03it/s]
 42%|     | 33/79 [00:02<00:02, 17.07it/s]
 46%|     | 36/79 [00:02<00:02, 18.62it/s]
 49%|     | 39/79 [00:02<00:02, 19.96it/s]
 53%|    | 42/79 [00:02<00:01, 21.23it/s]
 57%|    | 45/79 [00:02<00:01, 22.46it/s]
 61%|    | 48/79 [00:02<00:01, 23.05it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.80it/s]
 16%|        | 13/79 [00:01<00:17,  3.82it/s]
 20%|        | 16/79 [00:01<00:12,  5.11it/s]
 24%|       | 19/79 [00:01<00:08,  6.72it/s]
 28%|       | 22/79 [00:01<00:06,  8.62it/s]
 32%|      | 25/79 [00:01<00:05, 10.72it/s]
 35%|      | 28/79 [00:02<00:03, 12.94it/s]
 39%|      | 31/79 [00:02<00:03, 15.16it/s]
 43%|     | 34/79 [00:02<00:02, 17.17it/s]
 47%|     | 37/79 [00:02<00:02, 19.04it/s]
 51%|     | 40/79 [00:02<00:01, 20.50it/s]
 54%|    | 43/79 [00:02<00:01, 21.41it/s]
 58%|    | 46/79 [00:02<00:01, 22.16it/s]
 62%|   | 49/79 [00:02<00:01, 22.80it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  7.01it/s]
 28%|       | 22/79 [00:01<00:06,  8.91it/s]
 32%|      | 25/79 [00:01<00:04, 10.93it/s]
 35%|      | 28/79 [00:02<00:03, 13.05it/s]
 39%|      | 31/79 [00:02<00:03, 15.17it/s]
 43%|     | 34/79 [00:02<00:02, 17.15it/s]
 47%|     | 37/79 [00:02<00:02, 18.67it/s]
 51%|     | 40/79 [00:02<00:01, 20.07it/s]
 54%|    | 43/79 [00:02<00:01, 21.08it/s]
 58%|    | 46/79 [00:02<00:01, 21.75it/s]
 62%|   | 49/79 [00:02<00:01, 22.29it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.89it/s]
 20%|        | 16/79 [00:01<00:12,  5.19it/s]
 24%|       | 19/79 [00:01<00:08,  6.81it/s]
 28%|       | 22/79 [00:01<00:06,  8.70it/s]
 32%|      | 25/79 [00:01<00:05, 10.78it/s]
 35%|      | 28/79 [00:02<00:03, 12.95it/s]
 39%|      | 31/79 [00:02<00:03, 15.11it/s]
 43%|     | 34/79 [00:02<00:02, 16.94it/s]
 47%|     | 37/79 [00:02<00:02, 18.68it/s]
 51%|     | 40/79 [00:02<00:01, 20.14it/s]
 54%|    | 43/79 [00:02<00:01, 21.41it/s]
 58%|    | 46/79 [00:02<00:01, 22.21it/s]
 62%|   | 49/79 [00:02<00:01, 22.73it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:20,  1.03s/it]
  5%|         | 4/79 [00:01<00:55,  1.36it/s]
  9%|         | 7/79 [00:01<00:37,  1.90it/s]
 13%|        | 10/79 [00:01<00:26,  2.63it/s]
 16%|        | 13/79 [00:01<00:18,  3.60it/s]
 20%|        | 16/79 [00:01<00:13,  4.85it/s]
 24%|       | 19/79 [00:01<00:09,  6.39it/s]
 28%|       | 22/79 [00:01<00:06,  8.20it/s]
 32%|      | 25/79 [00:01<00:05, 10.28it/s]
 35%|      | 28/79 [00:02<00:04, 12.49it/s]
 39%|      | 31/79 [00:02<00:03, 14.81it/s]
 43%|     | 34/79 [00:02<00:02, 16.98it/s]
 47%|     | 37/79 [00:02<00:02, 18.84it/s]
 51%|     | 40/79 [00:02<00:01, 20.30it/s]
 54%|    | 43/79 [00:02<00:01, 21.57it/s]
 58%|    | 46/79 [00:02<00:01, 22.41it/s]
 62%|   | 49/79 [00:02<00:01, 23.31it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:18,  1.01s/it]
  5%|         | 4/79 [00:01<00:53,  1.39it/s]
  9%|         | 7/79 [00:01<00:37,  1.94it/s]
 13%|        | 10/79 [00:01<00:25,  2.67it/s]
 16%|        | 13/79 [00:01<00:18,  3.65it/s]
 20%|        | 16/79 [00:01<00:12,  4.90it/s]
 24%|       | 19/79 [00:01<00:09,  6.45it/s]
 28%|       | 22/79 [00:01<00:06,  8.30it/s]
 32%|      | 25/79 [00:01<00:05, 10.46it/s]
 35%|      | 28/79 [00:02<00:04, 12.55it/s]
 39%|      | 31/79 [00:02<00:03, 14.68it/s]
 43%|     | 34/79 [00:02<00:02, 16.69it/s]
 47%|     | 37/79 [00:02<00:02, 18.65it/s]
 51%|     | 40/79 [00:02<00:01, 19.89it/s]
 54%|    | 43/79 [00:02<00:01, 21.15it/s]
 58%|    | 46/79 [00:02<00:01, 21.54it/s]
 62%|   | 49/79 [00:02<00:01, 22.42it/s]
 66%|   | 52/79 [00:03<00:0127it/s]
 68%|   | 54/79 [00:02<00:01, 24.41it/s]
 72%|  | 57/79 [00:03<00:00, 24.75it/s]
 76%|  | 60/79 [00:03<00:00, 24.60it/s]
 80%|  | 63/79 [00:03<00:00, 24.78it/s]
 84%| | 66/79 [00:03<00:00, 24.92it/s]
 87%| | 69/79 [00:03<00:00, 25.05it/s]
 91%| | 72/79 [00:03<00:00, 24.93it/s]
 95%|| 75/79 [00:03<00:00, 25.59it/s]
 99%|| 78/79 [00:03<00:00, 26.00it/s]
100%|| 79/79 [00:03<00:00, 20.19it/s]
, 24.08it/s]
 70%|   | 55/79 [00:02<00:00, 24.43it/s]
 73%|  | 58/79 [00:03<00:00, 25.01it/s]
 77%|  | 61/79 [00:03<00:00, 24.79it/s]
 81%|  | 64/79 [00:03<00:00, 25.02it/s]
 85%| | 67/79 [00:03<00:00, 25.17it/s]
 89%| | 70/79 [00:03<00:00, 25.18it/s]
 92%|| 73/79 [00:03<00:00, 25.41it/s]
 96%|| 76/79 [00:03<00:00, 26.02it/s]
100%|| 79/79 [00:03<00:00, 26.81it/s]
, 24.23it/s]
 70%|   | 55/79 [00:02<00:00, 24.40it/s]
 73%|  | 58/79 [00:03<00:00, 24.61it/s]
 77%|  | 61/79 [00:03<00:00, 24.53it/s]
 81%|  | 64/79 [00:03<00:00, 24.57it/s]
 85%| | 67/79 [00:03<00:00, 24.76it/s]
 89%| | 70/79 [00:03<00:00, 24.82it/s]
 92%|| 73/79 [00:03<00:00, 25.36it/s]
 96%|| 76/79 [00:03<00:00, 26.02it/s]
100%|| 79/79 [00:03<00:00, 26.84it/s]
, 23.81it/s]
 70%|   | 55/79 [00:03<00:00, 24.61it/s]
 73%|  | 58/79 [00:03<00:00, 24.81it/s]
 77%|  | 61/79 [00:03<00:00, 25.18it/s]
 81%|  | 64/79 [00:03<00:00, 25.07it/s]
 85%| | 67/79 [00:03<00:00, 25.23it/s]
 89%| | 70/79 [00:03<00:00, 25.04it/s]
 92%|| 73/79 [00:03<00:00, 25.47it/s]
 96%|| 76/79 [00:03<00:00, 26.04it/s]
100%|| 79/79 [00:03<00:00, 26.87it/s]
, 24.44it/s]
 70%|   | 55/79 [00:03<00:00, 24.76it/s]
 73%|  | 58/79 [00:03<00:00, 24.83it/s]
 77%|  | 61/79 [00:03<00:00, 24.95it/s]
 81%|  | 64/79 [00:03<00:00, 25.10it/s]
 85%| | 67/79 [00:03<00:00, 25.10it/s]
 89%| | 70/79 [00:03<00:00, 25.21it/s]
 92%|| 73/79 [00:03<00:00, 25.57it/s]
 96%|| 76/79 [00:03<00:00, 26.17it/s]
100%|| 79/79 [00:03<00:00, 27.03it/s]
, 23.59it/s]
 70%|   | 55/79 [00:03<00:01, 23.92it/s]
 73%|  | 58/79 [00:03<00:00, 24.29it/s]
 77%|  | 61/79 [00:03<00:00, 24.47it/s]
 81%|  | 64/79 [00:03<00:00, 24.44it/s]
 85%| | 67/79 [00:03<00:00, 24.38it/s]
 89%| | 70/79 [00:03<00:00, 24.37it/s]
 92%|| 73/79 [00:03<00:00, 24.72it/s]
 96%|| 76/79 [00:03<00:00, 25.38it/s]
100%|| 79/79 [00:03<00:00, 26.20it/s]
, 24.02it/s]
 70%|   | 55/79 [00:03<00:00, 24.22it/s]
 73%|  | 58/79 [00:03<00:00, 24.10it/s]
 77%|  | 61/79 [00:03<00:00, 24.36it/s]
 81%|  | 64/79 [00:03<00:00, 24.48it/s]
 85%| | 67/79 [00:03<00:00, 24.65it/s]
 89%| | 70/79 [00:03<00:00, 24.81it/s]
 92%|| 73/79 [00:03<00:00, 25.08it/s]
 96%|| 76/79 [00:03<00:00, 25.60it/s]
100%|| 79/79 [00:03<00:00, 26.47it/s]
, 23.57it/s]
 70%|   | 55/79 [00:03<00:00, 24.17it/s]
 73%|  | 58/79 [00:03<00:00, 24.16it/s]
 77%|  | 61/79 [00:03<00:00, 24.50it/s]
 81%|  | 64/79 [00:03<00:00, 24.54it/s]
 85%| | 67/79 [00:03<00:00, 24.90it/s]
 89%| | 70/79 [00:03<00:00, 25.13it/s]
 92%|| 73/79 [00:03<00:00, 25.44it/s]
 96%|| 76/79 [00:03<00:00, 26.06it/s]
100%|| 79/79 [00:03<00:00, 26.83it/s]
, 23.80it/s]
 70%|   | 55/79 [00:03<00:00, 24.32it/s]
 73%|  | 58/79 [00:03<00:00, 24.62it/s]
 77%|  | 61/79 [00:03<00:00, 24.65it/s]
 81%|  | 64/79 [00:03<00:00, 24.79it/s]
 85%| | 67/79 [00:03<00:00, 24.93it/s]
 89%| | 70/79 [00:03<00:00, 25.23it/s]
 92%|| 73/79 [00:03<00:00, 25.36it/s]
 96%|| 76/79 [00:03<00:00, 25.93it/s]
100%|| 79/79 [00:04<00:00, 26.70it/s]
, 24.20it/s]
 70%|   | 55/79 [00:03<00:00, 24.81it/s]
 73%|  | 58/79 [00:03<00:00, 24.93it/s]
 77%|  | 61/79 [00:03<00:00, 24.93it/s]
 81%|  | 64/79 [00:03<00:00, 24.99it/s]
 85%| | 67/79 [00:03<00:00, 25.09it/s]
 89%| | 70/79 [00:03<00:00, 25.00it/s]
 92%|| 73/79 [00:03<00:00, 25.41it/s]
 96%|| 76/79 [00:03<00:00, 25.97it/s]
100%|| 79/79 [00:03<00:00, 26.81it/s]
, 23.61it/s]
 70%|   | 55/79 [00:03<00:01, 23.98it/s]
 73%|  | 58/79 [00:03<00:00, 24.23it/s]
 77%|  | 61/79 [00:03<00:00, 24.59it/s]
 81%|  | 64/79 [00:03<00:00, 24.53it/s]
 85%| | 67/79 [00:03<00:00, 24.78it/s]
 89%| | 70/79 [00:03<00:00, 24.94it/s]
 92%|| 73/79 [00:03<00:00, 25.21it/s]
 96%|| 76/79 [00:03<00:00, 25.86it/s]
100%|| 79/79 [00:03<00:00, 26.82it/s]
, 23.70it/s]
 70%|   | 55/79 [00:03<00:00, 24.01it/s]
 73%|  | 58/79 [00:03<00:00, 24.24it/s]
 77%|  | 61/79 [00:03<00:00, 24.50it/s]
 81%|  | 64/79 [00:03<00:00, 24.43it/s]
 85%| | 67/79 [00:03<00:00, 24.52it/s]
 89%| | 70/79 [00:03<00:00, 24.15it/s]
 92%|| 73/79 [00:03<00:00, 24.69it/s]
 96%|| 76/79 [00:03<00:00, 25.22it/s]
100%|| 79/79 [00:03<00:00, 26.27it/s]
92it/s]
 68%|   | 54/79 [00:03<00:01, 24.15it/s]
 72%|  | 57/79 [00:03<00:00, 24.25it/s]
 76%|  | 60/79 [00:03<00:00, 24.55it/s]
 80%|  | 63/79 [00:03<00:00, 24.74it/s]
 84%| | 66/79 [00:03<00:00, 24.55it/s]
 87%| | 69/79 [00:03<00:00, 24.42it/s]
 91%| | 72/79 [00:03<00:00, 24.66it/s]
 95%|| 75/79 [00:03<00:00, 25.41it/s]
 99%|| 78/79 [00:03<00:00, 26.02it/s]
100%|| 79/79 [00:04<00:00, 19.47it/s]
, 23.30it/s]
 70%|   | 55/79 [00:03<00:01, 23.73it/s]
 73%|  | 58/79 [00:03<00:00, 23.89it/s]
 77%|  | 61/79 [00:03<00:00, 24.05it/s]
 81%|  | 64/79 [00:03<00:00, 24.07it/s]
 85%| | 67/79 [00:03<00:00, 23.95it/s]
 89%| | 70/79 [00:03<00:00, 24.04it/s]
 92%|| 73/79 [00:03<00:00, 24.54it/s]
 96%|| 76/79 [00:03<00:00, 25.24it/s]
100%|| 79/79 [00:04<00:00, 26.23it/s]
, 23.92it/s]
 70%|   | 55/79 [00:03<00:00, 24.15it/s]
 73%|  | 58/79 [00:03<00:00, 24.21it/s]
 77%|  | 61/79 [00:03<00:00, 24.55it/s]
 81%|  | 64/79 [00:03<00:00, 24.50it/s]
 85%| | 67/79 [00:03<00:00, 24.56it/s]
 89%| | 70/79 [00:03<00:00, 24.66it/s]
 92%|| 73/79 [00:03<00:00, 24.98it/s]
 96%|| 76/79 [00:03<00:00, 25.74it/s]
100%|| 79/79 [00:04<00:00, 26.61it/s]
, 23.96it/s]
 70%|   | 55/79 [00:03<00:00, 24.50it/s]
 73%|  | 58/79 [00:03<00:00, 24.78it/s]
 77%|  | 61/79 [00:03<00:00, 25.02it/s]
 81%|  | 64/79 [00:03<00:00, 25.18it/s]
 85%| | 67/79 [00:03<00:00, 25.04it/s]
 89%| | 70/79 [00:03<00:00, 25.04it/s]
 92%|| 73/79 [00:03<00:00, 25.03it/s]
 96%|| 76/79 [00:03<00:00, 25.78it/s]
100%|| 79/79 [00:04<00:00, 26.60it/s]
07it/s]
 68%|   | 54/79 [00:03<00:01, 24.13it/s]
 72%|  | 57/79 [00:03<00:00, 24.34it/s]
 76%|  | 60/79 [00:03<00:00, 24.59it/s]
 80%|  | 63/79 [00:03<00:00, 24.34it/s]
 84%| | 66/79 [00:03<00:00, 24.27it/s]
 87%| | 69/79 [00:03<00:00, 24.33it/s]
 91%| | 72/79 [00:03<00:00, 24.36it/s]
 95%|| 75/79 [00:03<00:00, 25.22it/s]
 99%|| 78/79 [00:03<00:00, 25.75it/s]
100%|| 79/79 [00:04<00:00, 19.32it/s]
, 23.33it/s]
 70%|   | 55/79 [00:03<00:01, 23.69it/s]
 73%|  | 58/79 [00:03<00:00, 24.04it/s]
 77%|  | 61/79 [00:03<00:00, 23.98it/s]
 81%|  | 64/79 [00:03<00:00, 24.08it/s]
 85%| | 67/79 [00:03<00:00, 24.31it/s]
 89%| | 70/79 [00:03<00:00, 24.54it/s]
 92%|| 73/79 [00:03<00:00, 24.80it/s]
 96%|| 76/79 [00:03<00:00, 25.70it/s]
100%|| 79/79 [00:04<00:00, 26.67it/s]
, 23.44it/s]
 70%|   | 55/79 [00:03<00:01, 23.81it/s]
 73%|  | 58/79 [00:03<00:00, 23.96it/s]
 77%|  | 61/79 [00:03<00:00, 24.41it/s]
 81%|  | 64/79 [00:03<00:00, 24.46it/s]
 85%| | 67/79 [00:03<00:00, 24.60it/s]
 89%| | 70/79 [00:03<00:00, 24.42it/s]
 92%|| 73/79 [00:03<00:00, 24.77it/s]
 96%|| 76/79 [00:03<00:00, 25.87it/s]
100%|| 79/79 [00:04<00:00, 26.22it/s]
05it/s]
 68%|   | 54/79 [00:03<00:01, 23.09it/s]
 72%|  | 57/79 [00:03<00:00, 23.39it/s]
 76%|  | 60/79 [00:03<00:00, 23.76it/s]
 80%|  | 63/79 [00:03<00:00, 23.86it/s]
 84%| | 66/79 [00:03<00:00, 23.78it/s]
 87%| | 69/79 [00:03<00:00, 23.53it/s]
 91%| | 72/79 [00:03<00:00, 24.04it/s]
 95%|| 75/79 [00:03<00:00, 24.90it/s]
 99%|| 78/79 [00:04<00:00, 25.66it/s]
100%|| 79/79 [00:04<00:00, 19.21it/s]
, 23.60it/s]
 70%|   | 55/79 [00:03<00:01, 23.88it/s]
 73%|  | 58/79 [00:03<00:00, 24.28it/s]
 77%|  | 61/79 [00:03<00:00, 24.48it/s]
 81%|  | 64/79 [00:03<00:00, 24.76it/s]
 85%| | 67/79 [00:03<00:00, 24.85it/s]
 89%| | 70/79 [00:03<00:00, 24.97it/s]
 92%|| 73/79 [00:03<00:00, 25.32it/s]
 96%|| 76/79 [00:03<00:00, 26.37it/s]
100%|| 79/79 [00:04<00:00, 26.76it/s]
, 23.78it/s]
 70%|   | 55/79 [00:03<00:00, 24.25it/s]
 73%|  | 58/79 [00:03<00:00, 24.61it/s]
 77%|  | 61/79 [00:03<00:00, 24.75it/s]
 81%|  | 64/79 [00:03<00:00, 24.84it/s]
 85%| | 67/79 [00:03<00:00, 24.94it/s]
 89%| | 70/79 [00:03<00:00, 24.79it/s]
 92%|| 73/79 [00:03<00:00, 25.24it/s]
 96%|| 76/79 [00:03<00:00, 25.81it/s]
100%|| 79/79 [00:04<00:00, 26.57it/s]
, 23.29it/s]
 70%|   | 55/79 [00:03<00:01, 23.79it/s]
 73%|  | 58/79 [00:03<00:00, 24.34it/s]
 77%|  | 61/79 [00:03<00:00, 24.33it/s]
 81%|  | 64/79 [00:03<00:00, 23.98it/s]
 85%| | 67/79 [00:03<00:00, 24.37it/s]
 89%| | 70/79 [00:03<00:00, 24.42it/s]
 92%|| 73/79 [00:03<00:00, 24.69it/s]
 96%|| 76/79 [00:03<00:00, 25.37it/s]
100%|| 79/79 [00:04<00:00, 26.19it/s]
, 23.27it/s]
 70%|   | 55/79 [00:03<00:01, 23.73it/s]
 73%|  | 58/79 [00:03<00:00, 24.13it/s]
 77%|  | 61/79 [00:03<00:00, 24.27it/s]
 81%|  | 64/79 [00:03<00:00, 24.27it/s]
 85%| | 67/79 [00:03<00:00, 24.46it/s]
 89%| | 70/79 [00:03<00:00, 24.43it/s]
 92%|| 73/79 [00:03<00:00, 24.84it/s]
 96%|| 76/79 [00:03<00:00, 25.62it/s]
100%|| 79/79 [00:04<00:00, 26.57it/s]
60it/s]
 68%|   | 54/79 [00:03<00:01, 23.87it/s]
 72%|  | 57/79 [00:03<00:00, 24.17it/s]
 76%|  | 60/79 [00:03<00:00, 24.33it/s]
 80%|  | 63/79 [00:03<00:00, 24.37it/s]
 84%| | 66/79 [00:03<00:00, 24.75it/s]
 87%| | 69/79 [00:03<00:00, 24.58it/s]
 91%| | 72/79 [00:03<00:00, 24.74it/s]
 95%|| 75/79 [00:03<00:00, 25.48it/s]
 99%|| 78/79 [00:04<00:00, 26.01it/s]
100%|| 79/79 [00:04<00:00, 18.97it/s]
, 23.27it/s]
 70%|   | 55/79 [00:03<00:00, 24.10it/s]
 73%|  | 58/79 [00:03<00:00, 24.22it/s]
 77%|  | 61/79 [00:03<00:00, 24.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.89it/s]
 85%| | 67/79 [00:03<00:00, 25.16it/s]
 89%| | 70/79 [00:03<00:00, 25.18it/s]
 92%|| 73/79 [00:03<00:00, 25.30it/s]
 96%|| 76/79 [00:04<00:00, 25.85it/s]
100%|| 79/79 [00:04<00:00, 26.55it/s]
60it/s]
 68%|   | 54/79 [00:03<00:01, 24.00it/s]
 72%|  | 57/79 [00:03<00:00, 24.29it/s]
 76%|  | 60/79 [00:03<00:00, 24.60it/s]
 80%|  | 63/79 [00:03<00:00, 24.70it/s]
 84%| | 66/79 [00:03<00:00, 24.85it/s]
 87%| | 69/79 [00:03<00:00, 24.99it/s]
 91%| | 72/79 [00:03<00:00, 24.81it/s]
 95%|| 75/79 [00:03<00:00, 25.49it/s]
 99%|| 78/79 [00:04<00:00, 25.92it/s]
100%|| 79/79 [00:04<00:00, 18.89it/s]
, 23.37it/s]
 70%|   | 55/79 [00:03<00:01, 23.48it/s]
 73%|  | 58/79 [00:03<00:00, 23.89it/s]
 77%|  | 61/79 [00:03<00:00, 23.83it/s]
 81%|  | 64/79 [00:03<00:00, 23.98it/s]
 85%| | 67/79 [00:03<00:00, 24.11it/s]
 89%| | 70/79 [00:03<00:00, 24.18it/s]
 92%|| 73/79 [00:03<00:00, 24.77it/s]
 96%|| 76/79 [00:03<00:00, 25.53it/s]
100%|| 79/79 [00:04<00:00, 26.45it/s]
, 22.84it/s]
 70%|   | 55/79 [00:03<00:01, 23.15it/s]
 73%|  | 58/79 [00:03<00:00, 23.59it/s]
 77%|  | 61/79 [00:03<00:00, 23.96it/s]
 81%|  | 64/79 [00:03<00:00, 24.18it/s]
 85%| | 67/79 [00:03<00:00, 24.51it/s]
 89%| | 70/79 [00:03<00:00, 24.12it/s]
 92%|| 73/79 [00:03<00:00, 24.63it/s]
 96%|| 76/79 [00:03<00:00, 25.41it/s]
100%|| 79/79 [00:04<00:00, 26.34it/s]
, 23.03it/s]
 70%|   | 55/79 [00:03<00:01, 23.28it/s]
 73%|  | 58/79 [00:03<00:00, 23.61it/s]
 77%|  | 61/79 [00:03<00:00, 23.81it/s]
 81%|  | 64/79 [00:03<00:00, 24.13it/s]
 85%| | 67/79 [00:03<00:00, 24.53it/s]
 89%| | 70/79 [00:03<00:00, 24.91it/s]
 92%|| 73/79 [00:03<00:00, 25.05it/s]
 96%|| 76/79 [00:03<00:00, 25.77it/s]
100%|| 79/79 [00:04<00:00, 26.63it/s]
, 22.93it/s]
 70%|   | 55/79 [00:03<00:01, 23.34it/s]
 73%|  | 58/79 [00:03<00:00, 23.64it/s]
 77%|  | 61/79 [00:03<00:00, 23.55it/s]
 81%|  | 64/79 [00:03<00:00, 23.76it/s]
 85%| | 67/79 [00:03<00:00, 23.64it/s]
 89%| | 70/79 [00:03<00:00, 23.55it/s]
 92%|| 73/79 [00:03<00:00, 24.20it/s]
 96%|| 76/79 [00:04<00:00, 25.16it/s]
100%|| 79/79 [00:04<00:00, 26.22it/s]
, 23.07it/s]
 70%|   | 55/79 [00:03<00:01, 23.51it/s]
 73%|  | 58/79 [00:03<00:00, 23.61it/s]
 77%|  | 61/79 [00:03<00:00, 23.92it/s]
 81%|  | 64/79 [00:03<00:00, 24.22it/s]
 85%| | 67/79 [00:03<00:00, 24.36it/s]
 89%| | 70/79 [00:03<00:00, 24.39it/s]
 92%|| 73/79 [00:03<00:00, 24.75it/s]
 96%|| 76/79 [00:04<00:00, 25.60it/s]
100%|| 79/79 [00:04<00:00, 26.25it/s]
2020-06-23 15:51:28,225 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.277575 (0.027376483154296874 s / img per device, on 32 devices)
2020-06-23 15:51:28,243 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:51:28,244 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:51:28,262 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592952694858, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 16, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592952694859, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 16}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 15:51:35,420 maskrcnn_benchmark.trainer INFO: eta: 0:55:01  iter: 13760  loss: 0.5370 (0.6925)  loss_classifier: 0.1577 (0.2472)  loss_box_reg: 0.0740 (0.1123)  loss_mask: 0.2299 (0.2817)  loss_objectness: 0.0120 (0.0323)  loss_rpn_box_reg: 0.0048 (0.0190)  time: 0.1101 (0.1258)  data: 0.0014 (0.0175)  lr: 0.001600  max mem: 5140
2020-06-23 15:51:37,625 maskrcnn_benchmark.trainer INFO: eta: 0:54:58  iter: 13780  loss: 0.5318 (0.6923)  loss_classifier: 0.1586 (0.2471)  loss_box_reg: 0.0766 (0.1123)  loss_mask: 0.2438 (0.2816)  loss_objectness: 0.0135 (0.0322)  loss_rpn_box_reg: 0.0066 (0.0190)  time: 0.1102 (0.1258)  data: 0.0015 (0.0175)  lr: 0.001600  max mem: 5140
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 15:51:39,815 maskrcnn_benchmark.trainer INFO: eta: 0:54:55  iter: 13800  loss: 0.5101 (0.6921)  loss_classifier: 0.1541 (0.2470)  loss_box_reg: 0.0783 (0.1123)  loss_mask: 0.2361 (0.2816)  loss_objectness: 0.0108 (0.0322)  loss_rpn_box_reg: 0.0071 (0.0190)  time: 0.1086 (0.1258)  data: 0.0015 (0.0175)  lr: 0.001600  max mem: 5140
DONE (t=0.53s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.38s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37690
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.59195
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.40836
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21756
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.40561
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49641
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.31230
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.49299
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51682
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.33242
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.54999
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.65386
2020-06-23 15:51:42,004 maskrcnn_benchmark.trainer INFO: eta: 0:54:52  iter: 13820  loss: 0.4983 (0.6919)  loss_classifier: 0.1542 (0.2469)  loss_box_reg: 0.0814 (0.1122)  loss_mask: 0.2547 (0.2815)  loss_objectness: 0.0133 (0.0322)  loss_rpn_box_reg: 0.0066 (0.0190)  time: 0.1090 (0.1257)  data: 0.0015 (0.0174)  lr: 0.001600  max mem: 5140
2020-06-23 15:51:44,200 maskrcnn_benchmark.trainer INFO: eta: 0:54:48  iter: 13840  loss: 0.5156 (0.6916)  loss_classifier: 0.1639 (0.2468)  loss_box_reg: 0.0745 (0.1122)  loss_mask: 0.2419 (0.2815)  loss_objectness: 0.0123 (0.0322)  loss_rpn_box_reg: 0.0087 (0.0190)  time: 0.1095 (0.1257)  data: 0.0015 (0.0174)  lr: 0.001600  max mem: 5140
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:51:46,397 maskrcnn_benchmark.trainer INFO: eta: 0:54:45  iter: 13860  loss: 0.4907 (0.6914)  loss_classifier: 0.1531 (0.2466)  loss_box_reg: 0.0708 (0.1122)  loss_mask: 0.2467 (0.2814)  loss_objectness: 0.0126 (0.0322)  loss_rpn_box_reg: 0.0056 (0.0190)  time: 0.1099 (0.1257)  data: 0.0014 (0.0174)  lr: 0.001600  max mem: 5140
DONE (t=1.39s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:51:48,598 maskrcnn_benchmark.trainer INFO: eta: 0:54:42  iter: 13880  loss: 0.5484 (0.6912)  loss_classifier: 0.1734 (0.2466)  loss_box_reg: 0.0894 (0.1121)  loss_mask: 0.2401 (0.2813)  loss_objectness: 0.0132 (0.0321)  loss_rpn_box_reg: 0.0058 (0.0190)  time: 0.1099 (0.1257)  data: 0.0015 (0.0174)  lr: 0.001600  max mem: 5140
DONE (t=2.25s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.34302
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.55970
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.36268
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15780
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36928
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.51149
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29370
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.45145
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.47095
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27834
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50753
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62620
2020-06-23 15:51:50,261 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.37690346255569673, segm mAP: 0.3430150559271143
:::MLLOG {"namespace": "", "time_ms": 1592952710261, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.37690346255569673, "SEGM": 0.3430150559271143}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 15}}
:::MLLOG {"namespace": "", "time_ms": 1592952710261, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 15}}
2020-06-23 15:51:50,915 maskrcnn_benchmark.trainer INFO: eta: 0:54:39  iter: 13900  loss: 0.5484 (0.6910)  loss_classifier: 0.1731 (0.2465)  loss_box_reg: 0.0860 (0.1121)  loss_mask: 0.2423 (0.2813)  loss_objectness: 0.0211 (0.0322)  loss_rpn_box_reg: 0.0079 (0.0190)  time: 0.1086 (0.1257)  data: 0.0016 (0.0173)  lr: 0.001600  max mem: 5140
2020-06-23 15:51:53,113 maskrcnn_benchmark.trainer INFO: eta: 0:54:36  iter: 13920  loss: 0.4832 (0.6908)  loss_classifier: 0.1473 (0.2463)  loss_box_reg: 0.0689 (0.1121)  loss_mask: 0.2326 (0.2812)  loss_objectness: 0.0095 (0.0321)  loss_rpn_box_reg: 0.0072 (0.0190)  time: 0.1088 (0.1256)  data: 0.0014 (0.0173)  lr: 0.001600  max mem: 5140
2020-06-23 15:51:55,291 maskrcnn_benchmark.trainer INFO: eta: 0:54:33  iter: 13940  loss: 0.4434 (0.6905)  loss_classifier: 0.1360 (0.2462)  loss_box_reg: 0.0684 (0.1120)  loss_mask: 0.2198 (0.2812)  loss_objectness: 0.0085 (0.0321)  loss_rpn_box_reg: 0.0058 (0.0190)  time: 0.1086 (0.1256)  data: 0.0014 (0.0173)  lr: 0.001600  max mem: 5201
2020-06-23 15:51:57,497 maskrcnn_benchmark.trainer INFO: eta: 0:54:30  iter: 13960  loss: 0.4748 (0.6902)  loss_classifier: 0.1566 (0.2461)  loss_box_reg: 0.0835 (0.1120)  loss_mask: 0.2437 (0.2811)  loss_objectness: 0.0113 (0.0321)  loss_rpn_box_reg: 0.0070 (0.0190)  time: 0.1098 (0.1256)  data: 0.0014 (0.0173)  lr: 0.001600  max mem: 5201
2020-06-23 15:51:59,698 maskrcnn_benchmark.trainer INFO: eta: 0:54:27  iter: 13980  loss: 0.4684 (0.6900)  loss_classifier: 0.1412 (0.2460)  loss_box_reg: 0.0823 (0.1119)  loss_mask: 0.2410 (0.2810)  loss_objectness: 0.0103 (0.0321)  loss_rpn_box_reg: 0.0060 (0.0190)  time: 0.1098 (0.1256)  data: 0.0014 (0.0172)  lr: 0.001600  max mem: 5201
2020-06-23 15:52:01,896 maskrcnn_benchmark.trainer INFO: eta: 0:54:24  iter: 14000  loss: 0.4378 (0.6897)  loss_classifier: 0.1351 (0.2458)  loss_box_reg: 0.0624 (0.1119)  loss_mask: 0.2253 (0.2809)  loss_objectness: 0.0137 (0.0321)  loss_rpn_box_reg: 0.0077 (0.0190)  time: 0.1100 (0.1256)  data: 0.0014 (0.0172)  lr: 0.001600  max mem: 5201
2020-06-23 15:52:04,078 maskrcnn_benchmark.trainer INFO: eta: 0:54:21  iter: 14020  loss: 0.5228 (0.6895)  loss_classifier: 0.1911 (0.2457)  loss_box_reg: 0.0801 (0.1118)  loss_mask: 0.2336 (0.2809)  loss_objectness: 0.0103 (0.0320)  loss_rpn_box_reg: 0.0084 (0.0189)  time: 0.1089 (0.1255)  data: 0.0014 (0.0172)  lr: 0.001600  max mem: 5201
2020-06-23 15:52:06,299 maskrcnn_benchmark.trainer INFO: eta: 0:54:18  iter: 14040  loss: 0.4742 (0.6892)  loss_classifier: 0.1362 (0.2456)  loss_box_reg: 0.0820 (0.1118)  loss_mask: 0.2391 (0.2808)  loss_objectness: 0.0097 (0.0320)  loss_rpn_box_reg: 0.0063 (0.0189)  time: 0.1104 (0.1255)  data: 0.0014 (0.0172)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:08,504 maskrcnn_benchmark.trainer INFO: eta: 0:54:15  iter: 14060  loss: 0.5319 (0.6889)  loss_classifier: 0.1367 (0.2455)  loss_box_reg: 0.0787 (0.1118)  loss_mask: 0.2327 (0.2808)  loss_objectness: 0.0108 (0.0320)  loss_rpn_box_reg: 0.0074 (0.0189)  time: 0.1098 (0.1255)  data: 0.0014 (0.0172)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:10,693 maskrcnn_benchmark.trainer INFO: eta: 0:54:12  iter: 14080  loss: 0.4455 (0.6886)  loss_classifier: 0.1300 (0.2453)  loss_box_reg: 0.0610 (0.1117)  loss_mask: 0.2009 (0.2807)  loss_objectness: 0.0089 (0.0320)  loss_rpn_box_reg: 0.0047 (0.0189)  time: 0.1089 (0.1255)  data: 0.0014 (0.0171)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:12,898 maskrcnn_benchmark.trainer INFO: eta: 0:54:08  iter: 14100  loss: 0.4988 (0.6884)  loss_classifier: 0.1709 (0.2452)  loss_box_reg: 0.0822 (0.1117)  loss_mask: 0.2374 (0.2806)  loss_objectness: 0.0187 (0.0320)  loss_rpn_box_reg: 0.0079 (0.0189)  time: 0.1096 (0.1254)  data: 0.0014 (0.0171)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:15,094 maskrcnn_benchmark.trainer INFO: eta: 0:54:05  iter: 14120  loss: 0.5277 (0.6882)  loss_classifier: 0.1619 (0.2451)  loss_box_reg: 0.0786 (0.1116)  loss_mask: 0.2482 (0.2806)  loss_objectness: 0.0227 (0.0319)  loss_rpn_box_reg: 0.0084 (0.0189)  time: 0.1095 (0.1254)  data: 0.0015 (0.0171)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:17,278 maskrcnn_benchmark.trainer INFO: eta: 0:54:02  iter: 14140  loss: 0.4197 (0.6879)  loss_classifier: 0.1449 (0.2450)  loss_box_reg: 0.0687 (0.1116)  loss_mask: 0.2240 (0.2805)  loss_objectness: 0.0100 (0.0319)  loss_rpn_box_reg: 0.0059 (0.0189)  time: 0.1088 (0.1254)  data: 0.0014 (0.0171)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:19,460 maskrcnn_benchmark.trainer INFO: eta: 0:53:59  iter: 14160  loss: 0.5855 (0.6877)  loss_classifier: 0.1545 (0.2449)  loss_box_reg: 0.0983 (0.1116)  loss_mask: 0.2447 (0.2804)  loss_objectness: 0.0148 (0.0319)  loss_rpn_box_reg: 0.0060 (0.0189)  time: 0.1086 (0.1254)  data: 0.0015 (0.0170)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:21,656 maskrcnn_benchmark.trainer INFO: eta: 0:53:56  iter: 14180  loss: 0.5648 (0.6875)  loss_classifier: 0.1815 (0.2448)  loss_box_reg: 0.0710 (0.1115)  loss_mask: 0.2513 (0.2804)  loss_objectness: 0.0177 (0.0319)  loss_rpn_box_reg: 0.0095 (0.0189)  time: 0.1097 (0.1254)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:23,847 maskrcnn_benchmark.trainer INFO: eta: 0:53:53  iter: 14200  loss: 0.6327 (0.6874)  loss_classifier: 0.2233 (0.2448)  loss_box_reg: 0.0931 (0.1115)  loss_mask: 0.2369 (0.2803)  loss_objectness: 0.0173 (0.0319)  loss_rpn_box_reg: 0.0112 (0.0189)  time: 0.1090 (0.1253)  data: 0.0016 (0.0170)  lr: 0.001600  max mem: 5211

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0

Grad overflow on iteration  14206
Using dynamic loss scale of  131072.0
2020-06-23 15:52:26,034 maskrcnn_benchmark.trainer INFO: eta: 0:53:50  iter: 14220  loss: 0.5424 (0.6872)  loss_classifier: 0.1726 (0.2447)  loss_box_reg: 0.0887 (0.1115)  loss_mask: 0.2399 (0.2802)  loss_objectness: 0.0131 (0.0319)  loss_rpn_box_reg: 0.0075 (0.0189)  time: 0.1093 (0.1253)  data: 0.0015 (0.0170)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:28,208 maskrcnn_benchmark.trainer INFO: eta: 0:53:47  iter: 14240  loss: 0.4521 (0.6869)  loss_classifier: 0.1369 (0.2446)  loss_box_reg: 0.0662 (0.1114)  loss_mask: 0.2030 (0.2802)  loss_objectness: 0.0092 (0.0318)  loss_rpn_box_reg: 0.0078 (0.0189)  time: 0.1090 (0.1253)  data: 0.0015 (0.0170)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:30,396 maskrcnn_benchmark.trainer INFO: eta: 0:53:44  iter: 14260  loss: 0.4952 (0.6867)  loss_classifier: 0.1541 (0.2445)  loss_box_reg: 0.0751 (0.1114)  loss_mask: 0.2310 (0.2801)  loss_objectness: 0.0095 (0.0318)  loss_rpn_box_reg: 0.0046 (0.0189)  time: 0.1093 (0.1253)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:32,581 maskrcnn_benchmark.trainer INFO: eta: 0:53:41  iter: 14280  loss: 0.5203 (0.6864)  loss_classifier: 0.1696 (0.2443)  loss_box_reg: 0.0811 (0.1113)  loss_mask: 0.2376 (0.2800)  loss_objectness: 0.0121 (0.0318)  loss_rpn_box_reg: 0.0060 (0.0189)  time: 0.1092 (0.1252)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:34,762 maskrcnn_benchmark.trainer INFO: eta: 0:53:38  iter: 14300  loss: 0.6377 (0.6863)  loss_classifier: 0.2149 (0.2443)  loss_box_reg: 0.1159 (0.1113)  loss_mask: 0.2673 (0.2800)  loss_objectness: 0.0185 (0.0318)  loss_rpn_box_reg: 0.0075 (0.0189)  time: 0.1087 (0.1252)  data: 0.0016 (0.0169)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:36,932 maskrcnn_benchmark.trainer INFO: eta: 0:53:34  iter: 14320  loss: 0.5582 (0.6862)  loss_classifier: 0.2102 (0.2443)  loss_box_reg: 0.0923 (0.1113)  loss_mask: 0.2395 (0.2800)  loss_objectness: 0.0146 (0.0318)  loss_rpn_box_reg: 0.0066 (0.0189)  time: 0.1084 (0.1252)  data: 0.0015 (0.0169)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:39,116 maskrcnn_benchmark.trainer INFO: eta: 0:53:31  iter: 14340  loss: 0.5053 (0.6860)  loss_classifier: 0.1726 (0.2442)  loss_box_reg: 0.0801 (0.1113)  loss_mask: 0.2445 (0.2799)  loss_objectness: 0.0080 (0.0317)  loss_rpn_box_reg: 0.0110 (0.0189)  time: 0.1088 (0.1252)  data: 0.0015 (0.0169)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:41,308 maskrcnn_benchmark.trainer INFO: eta: 0:53:28  iter: 14360  loss: 0.5318 (0.6858)  loss_classifier: 0.1798 (0.2441)  loss_box_reg: 0.0934 (0.1113)  loss_mask: 0.2503 (0.2799)  loss_objectness: 0.0189 (0.0318)  loss_rpn_box_reg: 0.0087 (0.0189)  time: 0.1087 (0.1251)  data: 0.0015 (0.0168)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:43,495 maskrcnn_benchmark.trainer INFO: eta: 0:53:25  iter: 14380  loss: 0.4784 (0.6856)  loss_classifier: 0.1328 (0.2439)  loss_box_reg: 0.0677 (0.1113)  loss_mask: 0.2424 (0.2798)  loss_objectness: 0.0068 (0.0317)  loss_rpn_box_reg: 0.0062 (0.0188)  time: 0.1094 (0.1251)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5211

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0


Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0
Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0


Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0
Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0

Grad overflow on iteration  14381
Using dynamic loss scale of  65536.0
2020-06-23 15:52:45,676 maskrcnn_benchmark.trainer INFO: eta: 0:53:22  iter: 14400  loss: 0.5296 (0.6854)  loss_classifier: 0.2107 (0.2439)  loss_box_reg: 0.0905 (0.1112)  loss_mask: 0.2482 (0.2798)  loss_objectness: 0.0126 (0.0317)  loss_rpn_box_reg: 0.0081 (0.0188)  time: 0.1088 (0.1251)  data: 0.0015 (0.0168)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:47,853 maskrcnn_benchmark.trainer INFO: eta: 0:53:19  iter: 14420  loss: 0.6022 (0.6854)  loss_classifier: 0.2154 (0.2438)  loss_box_reg: 0.1026 (0.1112)  loss_mask: 0.2693 (0.2798)  loss_objectness: 0.0150 (0.0317)  loss_rpn_box_reg: 0.0108 (0.0188)  time: 0.1085 (0.1251)  data: 0.0015 (0.0168)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:50,042 maskrcnn_benchmark.trainer INFO: eta: 0:53:16  iter: 14440  loss: 0.5241 (0.6851)  loss_classifier: 0.1724 (0.2437)  loss_box_reg: 0.0771 (0.1112)  loss_mask: 0.2428 (0.2797)  loss_objectness: 0.0101 (0.0317)  loss_rpn_box_reg: 0.0060 (0.0188)  time: 0.1101 (0.1251)  data: 0.0015 (0.0167)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:52,242 maskrcnn_benchmark.trainer INFO: eta: 0:53:13  iter: 14460  loss: 0.5997 (0.6850)  loss_classifier: 0.2028 (0.2437)  loss_box_reg: 0.0967 (0.1112)  loss_mask: 0.2566 (0.2797)  loss_objectness: 0.0142 (0.0317)  loss_rpn_box_reg: 0.0069 (0.0188)  time: 0.1094 (0.1250)  data: 0.0015 (0.0167)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:54,412 maskrcnn_benchmark.trainer INFO: eta: 0:53:10  iter: 14480  loss: 0.5812 (0.6849)  loss_classifier: 0.1750 (0.2436)  loss_box_reg: 0.0952 (0.1112)  loss_mask: 0.2561 (0.2796)  loss_objectness: 0.0142 (0.0316)  loss_rpn_box_reg: 0.0089 (0.0188)  time: 0.1085 (0.1250)  data: 0.0015 (0.0167)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:56,608 maskrcnn_benchmark.trainer INFO: eta: 0:53:07  iter: 14500  loss: 0.4962 (0.6847)  loss_classifier: 0.1847 (0.2435)  loss_box_reg: 0.0849 (0.1111)  loss_mask: 0.2395 (0.2796)  loss_objectness: 0.0163 (0.0316)  loss_rpn_box_reg: 0.0071 (0.0188)  time: 0.1096 (0.1250)  data: 0.0015 (0.0167)  lr: 0.001600  max mem: 5211
2020-06-23 15:52:58,806 maskrcnn_benchmark.trainer INFO: eta: 0:53:04  iter: 14520  loss: 0.5227 (0.6845)  loss_classifier: 0.1411 (0.2434)  loss_box_reg: 0.0850 (0.1111)  loss_mask: 0.2490 (0.2795)  loss_objectness: 0.0137 (0.0316)  loss_rpn_box_reg: 0.0067 (0.0188)  time: 0.1098 (0.1250)  data: 0.0014 (0.0167)  lr: 0.001600  max mem: 5211
2020-06-23 15:53:00,999 maskrcnn_benchmark.trainer INFO: eta: 0:53:01  iter: 14540  loss: 0.5473 (0.6843)  loss_classifier: 0.1705 (0.2433)  loss_box_reg: 0.0981 (0.1111)  loss_mask: 0.2518 (0.2795)  loss_objectness: 0.0126 (0.0316)  loss_rpn_box_reg: 0.0066 (0.0188)  time: 0.1091 (0.1250)  data: 0.0015 (0.0166)  lr: 0.001600  max mem: 5211
2020-06-23 15:53:03,204 maskrcnn_benchmark.trainer INFO: eta: 0:52:58  iter: 14560  loss: 0.5687 (0.6841)  loss_classifier: 0.1693 (0.2432)  loss_box_reg: 0.0918 (0.1111)  loss_mask: 0.2512 (0.2795)  loss_objectness: 0.0165 (0.0316)  loss_rpn_box_reg: 0.0102 (0.0188)  time: 0.1093 (0.1249)  data: 0.0015 (0.0166)  lr: 0.001600  max mem: 5211
2020-06-23 15:53:05,399 maskrcnn_benchmark.trainer INFO: eta: 0:52:55  iter: 14580  loss: 0.4730 (0.6839)  loss_classifier: 0.1173 (0.2431)  loss_box_reg: 0.0671 (0.1110)  loss_mask: 0.2251 (0.2794)  loss_objectness: 0.0066 (0.0316)  loss_rpn_box_reg: 0.0051 (0.0188)  time: 0.1095 (0.1249)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5211
2020-06-23 15:53:07,618 maskrcnn_benchmark.trainer INFO: eta: 0:52:52  iter: 14600  loss: 0.4973 (0.6837)  loss_classifier: 0.1507 (0.2430)  loss_box_reg: 0.0783 (0.1110)  loss_mask: 0.2698 (0.2794)  loss_objectness: 0.0108 (0.0315)  loss_rpn_box_reg: 0.0066 (0.0188)  time: 0.1100 (0.1249)  data: 0.0015 (0.0166)  lr: 0.001600  max mem: 5211
2020-06-23 15:53:09,813 maskrcnn_benchmark.trainer INFO: eta: 0:52:49  iter: 14620  loss: 0.5768 (0.6835)  loss_classifier: 0.1795 (0.2429)  loss_box_reg: 0.1104 (0.1110)  loss_mask: 0.2444 (0.2793)  loss_objectness: 0.0124 (0.0315)  loss_rpn_box_reg: 0.0045 (0.0188)  time: 0.1097 (0.1249)  data: 0.0015 (0.0166)  lr: 0.001600  max mem: 5211
2020-06-23 15:53:12,011 maskrcnn_benchmark.trainer INFO: eta: 0:52:46  iter: 14640  loss: 0.4870 (0.6833)  loss_classifier: 0.1523 (0.2428)  loss_box_reg: 0.0744 (0.1110)  loss_mask: 0.2398 (0.2793)  loss_objectness: 0.0115 (0.0315)  loss_rpn_box_reg: 0.0071 (0.0188)  time: 0.1092 (0.1249)  data: 0.0016 (0.0165)  lr: 0.001600  max mem: 5211
2020-06-23 15:53:14,199 maskrcnn_benchmark.trainer INFO: eta: 0:52:43  iter: 14660  loss: 0.5416 (0.6832)  loss_classifier: 0.1960 (0.2428)  loss_box_reg: 0.0921 (0.1109)  loss_mask: 0.2498 (0.2792)  loss_objectness: 0.0131 (0.0315)  loss_rpn_box_reg: 0.0067 (0.0188)  time: 0.1094 (0.1248)  data: 0.0015 (0.0165)  lr: 0.001600  max mem: 5211
:::MLLOG {"namespace": "", "time_ms": 1592952795528, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 16}}
:::MLLOG {"namespace": "", "time_ms": 1592952795529, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 16}}
:::MLLOG {"namespace": "", "time_ms": 1592952795529, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 16}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
2020-06-23 15:53:15,751 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
Done (t=0.28s)
creating index...
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
2020-06-23 15:53:16,049 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:57,  1.35it/s]
  4%|         | 3/79 [00:00<00:40,  1.87it/s]
  8%|         | 6/79 [00:00<00:28,  2.58it/s]
 11%|        | 9/79 [00:01<00:19,  3.53it/s]
 15%|        | 12/79 [00:01<00:14,  4.74it/s]
 19%|        | 15/79 [00:01<00:10,  6.27it/s]
 23%|       | 18/79 [00:01<00:07,  8.08it/s]
 27%|       | 21/79 [00:01<00:05, 10.11it/s]
 30%|       | 24/79 [00:01<00:04, 12.27it/s]
 34%|      | 27/79 [00:01<00:03, 14.55it/s]
 38%|      | 30/79 [00:01<00:02, 16.52it/s]
 42%|     | 33/79 [00:02<00:02, 18.31it/s]
 46%|     | 36/79 [00:02<00:02, 19.97it/s]
 49%|     | 39/79 [00:02<00:01, 21.25it/s]
 53%|    | 42/79 [00:02<00:01, 22.22it/s]
 57%|    | 45/79 [00:02<00:01, 22.93it/s]
 61%|    | 48/79 [00:02<00:01, 23.50it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:58,  1.33it/s]
  5%|         | 4/79 [00:00<00:40,  1.85it/s]
  9%|         | 7/79 [00:01<00:28,  2.56it/s]
 13%|        | 10/79 [00:01<00:19,  3.50it/s]
 16%|        | 13/79 [00:01<00:13,  4.72it/s]
 20%|        | 16/79 [00:01<00:10,  6.23it/s]
 24%|       | 19/79 [00:01<00:07,  8.06it/s]
 28%|       | 22/79 [00:01<00:05, 10.12it/s]
 32%|      | 25/79 [00:01<00:04, 12.34it/s]
 35%|      | 28/79 [00:01<00:03, 14.60it/s]
 39%|      | 31/79 [00:01<00:02, 16.71it/s]
 43%|     | 34/79 [00:02<00:02, 18.68it/s]
 47%|     | 37/79 [00:02<00:02, 20.17it/s]
 51%|     | 40/79 [00:02<00:01, 21.39it/s]
 54%|    | 43/79 [00:02<00:01, 22.53it/s]
 58%|    | 46/79 [00:02<00:01, 23.48it/s]
 62%|   | 49/79 [00:02<00:01, 23.94it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.57it/s]
 28%|       | 22/79 [00:01<00:05,  9.53it/s]
 32%|      | 25/79 [00:01<00:04, 11.74it/s]
 35%|      | 28/79 [00:01<00:03, 14.08it/s]
 39%|      | 31/79 [00:02<00:02, 16.39it/s]
 43%|     | 34/79 [00:02<00:02, 18.48it/s]
 47%|     | 37/79 [00:02<00:02, 20.16it/s]
 51%|     | 40/79 [00:02<00:01, 21.39it/s]
 54%|    | 43/79 [00:02<00:01, 22.55it/s]
 58%|    | 46/79 [00:02<00:01, 23.32it/s]
 62%|   | 49/79 [00:02<00:01, 23.67it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  4%|         | 3/79 [00:00<00:46,  1.65it/s]
  8%|         | 6/79 [00:01<00:32,  2.28it/s]
 11%|        | 9/79 [00:01<00:22,  3.13it/s]
 15%|        | 12/79 [00:01<00:15,  4.25it/s]
 19%|        | 15/79 [00:01<00:11,  5.66it/s]
 23%|       | 18/79 [00:01<00:08,  7.40it/s]
 27%|       | 21/79 [00:01<00:06,  9.37it/s]
 30%|       | 24/79 [00:01<00:04, 11.55it/s]
 34%|      | 27/79 [00:01<00:03, 13.83it/s]
 38%|      | 30/79 [00:02<00:03, 15.97it/s]
 42%|     | 33/79 [00:02<00:02, 18.10it/s]
 46%|     | 36/79 [00:02<00:02, 19.87it/s]
 49%|     | 39/79 [00:02<00:01, 21.32it/s]
 53%|    | 42/79 [00:02<00:01, 22.36it/s]
 57%|    | 45/79 [00:02<00:01, 23.37it/s]
 61%|    | 48/79 [00:02<00:01, 23.85it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.26it/s]
  4%|         | 3/79 [00:00<00:43,  1.75it/s]
  8%|         | 6/79 [00:01<00:30,  2.41it/s]
 11%|        | 9/79 [00:01<00:21,  3.31it/s]
 15%|        | 12/79 [00:01<00:14,  4.47it/s]
 19%|        | 15/79 [00:01<00:10,  5.92it/s]
 23%|       | 18/79 [00:01<00:07,  7.65it/s]
 27%|       | 21/79 [00:01<00:06,  9.61it/s]
 30%|       | 24/79 [00:01<00:04, 11.79it/s]
 34%|      | 27/79 [00:01<00:03, 13.95it/s]
 38%|      | 30/79 [00:02<00:03, 16.08it/s]
 42%|     | 33/79 [00:02<00:02, 17.99it/s]
 46%|     | 36/79 [00:02<00:02, 19.74it/s]
 49%|     | 39/79 [00:02<00:01, 20.83it/s]
 53%|    | 42/79 [00:02<00:01, 21.86it/s]
 57%|    | 45/79 [00:02<00:01, 22.40it/s]
 61%|    | 48/79 [00:02<00:01, 23.04it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.46it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.54it/s]
 35%|      | 28/79 [00:01<00:03, 13.74it/s]
 39%|      | 31/79 [00:02<00:03, 15.94it/s]
 43%|     | 34/79 [00:02<00:02, 17.94it/s]
 47%|     | 37/79 [00:02<00:02, 19.42it/s]
 51%|     | 40/79 [00:02<00:01, 20.86it/s]
 54%|    | 43/79 [00:02<00:01, 22.00it/s]
 58%|    | 46/79 [00:02<00:01, 23.02it/s]
 62%|   | 49/79 [00:02<00:01, 23.38it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.44it/s]
 32%|      | 25/79 [00:01<00:04, 11.60it/s]
 35%|      | 28/79 [00:01<00:03, 13.84it/s]
 39%|      | 31/79 [00:02<00:02, 16.04it/s]
 43%|     | 34/79 [00:02<00:02, 17.91it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.84it/s]
 54%|    | 43/79 [00:02<00:01, 22.05it/s]
 58%|    | 46/79 [00:02<00:01, 22.75it/s]
 62%|   | 49/79 [00:02<00:01, 23.55it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 28%|       | 22/79 [00:01<00:06,  9.17it/s]
 32%|      | 25/79 [00:01<00:04, 11.39it/s]
 35%|      | 28/79 [00:01<00:03, 13.60it/s]
 39%|      | 31/79 [00:02<00:03, 15.88it/s]
 43%|     | 34/79 [00:02<00:02, 17.88it/s]
 47%|     | 37/79 [00:02<00:02, 19.72it/s]
 51%|     | 40/79 [00:02<00:01, 21.05it/s]
 54%|    | 43/79 [00:02<00:01, 22.12it/s]
 58%|    | 46/79 [00:02<00:01, 23.05it/s]
 62%|   | 49/79 [00:02<00:01, 23.69it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:01<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.23it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.31it/s]
 32%|      | 25/79 [00:01<00:04, 11.52it/s]
 35%|      | 28/79 [00:01<00:03, 13.75it/s]
 39%|      | 31/79 [00:02<00:03, 15.84it/s]
 43%|     | 34/79 [00:02<00:02, 17.72it/s]
 47%|     | 37/79 [00:02<00:02, 19.30it/s]
 51%|     | 40/79 [00:02<00:01, 20.78it/s]
 54%|    | 43/79 [00:02<00:01, 21.46it/s]
 58%|    | 46/79 [00:02<00:01, 22.56it/s]
 62%|   | 49/79 [00:02<00:01, 22.98it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.20it/s]
 28%|       | 22/79 [00:01<00:06,  9.16it/s]
 32%|      | 25/79 [00:01<00:04, 11.31it/s]
 35%|      | 28/79 [00:01<00:03, 13.58it/s]
 39%|      | 31/79 [00:02<00:03, 15.77it/s]
 43%|     | 34/79 [00:02<00:02, 17.74it/s]
 47%|     | 37/79 [00:02<00:02, 19.60it/s]
 51%|     | 40/79 [00:02<00:01, 20.89it/s]
 54%|    | 43/79 [00:02<00:01, 21.95it/s]
 58%|    | 46/79 [00:02<00:01, 22.65it/s]
 62%|   | 49/79 [00:02<00:01, 23.37it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.28it/s]
 32%|      | 25/79 [00:01<00:04, 11.39it/s]
 35%|      | 28/79 [00:01<00:03, 13.66it/s]
 39%|      | 31/79 [00:02<00:03, 15.84it/s]
 43%|     | 34/79 [00:02<00:02, 17.56it/s]
 47%|     | 37/79 [00:02<00:02, 19.06it/s]
 51%|     | 40/79 [00:02<00:01, 20.48it/s]
 54%|    | 43/79 [00:02<00:01, 21.62it/s]
 58%|    | 46/79 [00:02<00:01, 22.57it/s]
 62%|   | 49/79 [00:02<00:01, 23.02it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.57it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.22it/s]
 32%|      | 25/79 [00:01<00:04, 11.42it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.82it/s]
 43%|     | 34/79 [00:02<00:02, 17.80it/s]
 47%|     | 37/79 [00:02<00:02, 19.60it/s]
 51%|     | 40/79 [00:02<00:01, 20.85it/s]
 54%|    | 43/79 [00:02<00:01, 21.70it/s]
 58%|    | 46/79 [00:02<00:01, 22.54it/s]
 62%|   | 49/79 [00:02<00:01, 23.12it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:01<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.48it/s]
 35%|      | 28/79 [00:01<00:03, 13.50it/s]
 39%|      | 31/79 [00:02<00:03, 15.68it/s]
 43%|     | 34/79 [00:02<00:02, 17.58it/s]
 47%|     | 37/79 [00:02<00:02, 19.38it/s]
 51%|     | 40/79 [00:02<00:01, 20.82it/s]
 54%|    | 43/79 [00:02<00:01, 22.20it/s]
 58%|    | 46/79 [00:02<00:01, 22.82it/s]
 62%|   | 49/79 [00:02<00:01, 23.59it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.15it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.31it/s]
 35%|      | 28/79 [00:01<00:03, 13.62it/s]
 39%|      | 31/79 [00:02<00:03, 15.84it/s]
 43%|     | 34/79 [00:02<00:02, 17.91it/s]
 47%|     | 37/79 [00:02<00:02, 19.65it/s]
 51%|     | 40/79 [00:02<00:01, 21.10it/s]
 54%|    | 43/79 [00:02<00:01, 22.32it/s]
 58%|    | 46/79 [00:02<00:01, 23.11it/s]
 62%|   | 49/79 [00:02<00:01, 23.58it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.23it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.28it/s]
 35%|      | 28/79 [00:01<00:03, 13.55it/s]
 39%|      | 31/79 [00:02<00:03, 15.75it/s]
 43%|     | 34/79 [00:02<00:02, 17.69it/s]
 47%|     | 37/79 [00:02<00:02, 19.46it/s]
 51%|     | 40/79 [00:02<00:01, 20.67it/s]
 54%|    | 43/79 [00:02<00:01, 21.94it/s]
 58%|    | 46/79 [00:02<00:01, 22.55it/s]
 62%|   | 49/79 [00:02<00:01, 23.20it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.39it/s]
 24%|       | 19/79 [00:01<00:08,  7.06it/s]
 28%|       | 22/79 [00:01<00:06,  9.01it/s]
 32%|      | 25/79 [00:01<00:04, 11.15it/s]
 35%|      | 28/79 [00:01<00:03, 13.44it/s]
 39%|      | 31/79 [00:02<00:03, 15.53it/s]
 43%|     | 34/79 [00:02<00:02, 17.52it/s]
 47%|     | 37/79 [00:02<00:02, 19.23it/s]
 51%|     | 40/79 [00:02<00:01, 20.64it/s]
 54%|    | 43/79 [00:02<00:01, 22.02it/s]
 58%|    | 46/79 [00:02<00:01, 22.77it/s]
 62%|   | 49/79 [00:02<00:01, 23.20it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  4%|         | 3/79 [00:01<00:50,  1.52it/s]
  8%|         | 6/79 [00:01<00:34,  2.11it/s]
 11%|        | 9/79 [00:01<00:24,  2.91it/s]
 15%|        | 12/79 [00:01<00:16,  3.96it/s]
 19%|        | 15/79 [00:01<00:12,  5.30it/s]
 23%|       | 18/79 [00:01<00:08,  6.95it/s]
 27%|       | 21/79 [00:01<00:06,  8.88it/s]
 30%|       | 24/79 [00:01<00:04, 11.01it/s]
 34%|      | 27/79 [00:01<00:03, 13.24it/s]
 38%|      | 30/79 [00:02<00:03, 15.34it/s]
 42%|     | 33/79 [00:02<00:02, 17.30it/s]
 46%|     | 36/79 [00:02<00:02, 18.99it/s]
 49%|     | 39/79 [00:02<00:01, 20.27it/s]
 53%|    | 42/79 [00:02<00:01, 21.37it/s]
 57%|    | 45/79 [00:02<00:01, 22.28it/s]
 61%|    | 48/79 [00:02<00:01, 22.89it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:00<00:46,  1.62it/s]
  8%|         | 6/79 [00:01<00:32,  2.25it/s]
 11%|        | 9/79 [00:01<00:22,  3.09it/s]
 15%|        | 12/79 [00:01<00:16,  4.18it/s]
 19%|        | 15/79 [00:01<00:11,  5.56it/s]
 23%|       | 18/79 [00:01<00:08,  7.24it/s]
 27%|       | 21/79 [00:01<00:06,  9.22it/s]
 30%|       | 24/79 [00:01<00:04, 11.26it/s]
 34%|      | 27/79 [00:01<00:03, 13.45it/s]
 38%|      | 30/79 [00:02<00:03, 15.40it/s]
 42%|     | 33/79 [00:02<00:02, 17.28it/s]
 46%|     | 36/79 [00:02<00:02, 18.86it/s]
 49%|     | 39/79 [00:02<00:01, 20.01it/s]
 53%|    | 42/79 [00:02<00:01, 21.01it/s]
 57%|    | 45/79 [00:02<00:01, 22.18it/s]
 61%|    | 48/79 [00:02<00:01, 22.70it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  4%|         | 3/79 [00:01<00:49,  1.53it/s]
  8%|         | 6/79 [00:01<00:34,  2.13it/s]
 11%|        | 9/79 [00:01<00:23,  2.93it/s]
 15%|        | 12/79 [00:01<00:16,  3.99it/s]
 19%|        | 15/79 [00:01<00:11,  5.35it/s]
 23%|       | 18/79 [00:01<00:08,  6.96it/s]
 27%|       | 21/79 [00:01<00:06,  8.90it/s]
 30%|       | 24/79 [00:01<00:04, 11.05it/s]
 34%|      | 27/79 [00:01<00:03, 13.20it/s]
 38%|      | 30/79 [00:02<00:03, 15.30it/s]
 42%|     | 33/79 [00:02<00:02, 17.34it/s]
 46%|     | 36/79 [00:02<00:02, 19.11it/s]
 49%|     | 39/79 [00:02<00:01, 20.57it/s]
 53%|    | 42/79 [00:02<00:01, 21.52it/s]
 57%|    | 45/79 [00:02<00:01, 22.43it/s]
 61%|    | 48/79 [00:02<00:01, 23.26it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.45it/s]
 35%|      | 28/79 [00:01<00:03, 13.60it/s]
 39%|      | 31/79 [00:02<00:03, 15.73it/s]
 43%|     | 34/79 [00:02<00:02, 17.54it/s]
 47%|     | 37/79 [00:02<00:02, 19.04it/s]
 51%|     | 40/79 [00:02<00:01, 20.21it/s]
 54%|    | 43/79 [00:02<00:01, 21.12it/s]
 58%|    | 46/79 [00:02<00:01, 21.90it/s]
 62%|   | 49/79 [00:02<00:01, 22.57it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.27it/s]
 24%|       | 19/79 [00:01<00:08,  6.91it/s]
 28%|       | 22/79 [00:01<00:06,  8.88it/s]
 32%|      | 25/79 [00:01<00:04, 10.99it/s]
 35%|      | 28/79 [00:02<00:03, 13.27it/s]
 39%|      | 31/79 [00:02<00:03, 15.47it/s]
 43%|     | 34/79 [00:02<00:02, 17.56it/s]
 47%|     | 37/79 [00:02<00:02, 19.18it/s]
 51%|     | 40/79 [00:02<00:01, 20.76it/s]
 54%|    | 43/79 [00:02<00:01, 21.89it/s]
 58%|    | 46/79 [00:02<00:01, 22.50it/s]
 62%|   | 49/79 [00:02<00:01, 23.36it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.13it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.15it/s]
 28%|       | 22/79 [00:01<00:06,  9.11it/s]
 32%|      | 25/79 [00:01<00:04, 11.22it/s]
 35%|      | 28/79 [00:01<00:03, 13.38it/s]
 39%|      | 31/79 [00:02<00:03, 15.44it/s]
 43%|     | 34/79 [00:02<00:02, 17.46it/s]
 47%|     | 37/79 [00:02<00:02, 19.17it/s]
 51%|     | 40/79 [00:02<00:01, 20.25it/s]
 54%|    | 43/79 [00:02<00:01, 21.25it/s]
 58%|    | 46/79 [00:02<00:01, 22.25it/s]
 62%|   | 49/79 [00:02<00:01, 23.06it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.14it/s]
 28%|       | 22/79 [00:01<00:06,  9.05it/s]
 32%|      | 25/79 [00:01<00:04, 11.14it/s]
 35%|      | 28/79 [00:01<00:03, 13.34it/s]
 39%|      | 31/79 [00:02<00:03, 15.48it/s]
 43%|     | 34/79 [00:02<00:02, 17.45it/s]
 47%|     | 37/79 [00:02<00:02, 19.11it/s]
 51%|     | 40/79 [00:02<00:01, 20.59it/s]
 54%|    | 43/79 [00:02<00:01, 21.63it/s]
 58%|    | 46/79 [00:02<00:01, 22.27it/s]
 62%|   | 49/79 [00:02<00:01, 23.01it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.32it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.86it/s]
 32%|      | 25/79 [00:01<00:04, 10.93it/s]
 35%|      | 28/79 [00:02<00:03, 13.18it/s]
 39%|      | 31/79 [00:02<00:03, 15.31it/s]
 43%|     | 34/79 [00:02<00:02, 17.33it/s]
 47%|     | 37/79 [00:02<00:02, 19.02it/s]
 51%|     | 40/79 [00:02<00:01, 20.43it/s]
 54%|    | 43/79 [00:02<00:01, 21.56it/s]
 58%|    | 46/79 [00:02<00:01, 22.37it/s]
 62%|   | 49/79 [00:02<00:01, 23.17it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  4%|         | 3/79 [00:01<00:49,  1.55it/s]
  8%|         | 6/79 [00:01<00:33,  2.15it/s]
 11%|        | 9/79 [00:01<00:23,  2.96it/s]
 15%|        | 12/79 [00:01<00:16,  4.02it/s]
 19%|        | 15/79 [00:01<00:11,  5.36it/s]
 23%|       | 18/79 [00:01<00:08,  7.03it/s]
 27%|       | 21/79 [00:01<00:06,  8.94it/s]
 30%|       | 24/79 [00:01<00:04, 11.04it/s]
 34%|      | 27/79 [00:02<00:03, 13.21it/s]
 38%|      | 30/79 [00:02<00:03, 15.38it/s]
 42%|     | 33/79 [00:02<00:02, 17.29it/s]
 46%|     | 36/79 [00:02<00:02, 18.95it/s]
 49%|     | 39/79 [00:02<00:01, 20.07it/s]
 53%|    | 42/79 [00:02<00:01, 21.51it/s]
 57%|    | 45/79 [00:02<00:01, 22.35it/s]
 61%|    | 48/79 [00:02<00:01, 22.88it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.03it/s]
 32%|      | 25/79 [00:01<00:04, 11.15it/s]
 35%|      | 28/79 [00:01<00:03, 13.34it/s]
 39%|      | 31/79 [00:02<00:03, 15.51it/s]
 43%|     | 34/79 [00:02<00:02, 17.33it/s]
 47%|     | 37/79 [00:02<00:02, 19.01it/s]
 51%|     | 40/79 [00:02<00:01, 20.43it/s]
 54%|    | 43/79 [00:02<00:01, 21.45it/s]
 58%|    | 46/79 [00:02<00:01, 22.32it/s]
 62%|   | 49/79 [00:02<00:01, 22.80it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:11,  5.25it/s]
 24%|       | 19/79 [00:01<00:08,  6.90it/s]
 28%|       | 22/79 [00:01<00:06,  8.81it/s]
 32%|      | 25/79 [00:01<00:04, 10.94it/s]
 35%|      | 28/79 [00:02<00:03, 13.14it/s]
 39%|      | 31/79 [00:02<00:03, 15.38it/s]
 43%|     | 34/79 [00:02<00:02, 17.35it/s]
 47%|     | 37/79 [00:02<00:02, 19.00it/s]
 51%|     | 40/79 [00:02<00:01, 20.54it/s]
 54%|    | 43/79 [00:02<00:01, 21.74it/s]
 58%|    | 46/79 [00:02<00:01, 22.39it/s]
 62%|   | 49/79 [00:02<00:01, 23.20it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.13it/s]
 28%|       | 22/79 [00:01<00:06,  9.05it/s]
 32%|      | 25/79 [00:01<00:04, 11.15it/s]
 35%|      | 28/79 [00:02<00:03, 13.36it/s]
 39%|      | 31/79 [00:02<00:03, 15.56it/s]
 43%|     | 34/79 [00:02<00:02, 17.43it/s]
 47%|     | 37/79 [00:02<00:02, 19.14it/s]
 51%|     | 40/79 [00:02<00:01, 20.46it/s]
 54%|    | 43/79 [00:02<00:01, 21.44it/s]
 58%|    | 46/79 [00:02<00:01, 21.82it/s]
 62%|   | 49/79 [00:02<00:01, 22.46it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.82it/s]
 16%|        | 13/79 [00:01<00:17,  3.84it/s]
 20%|        | 16/79 [00:01<00:12,  5.15it/s]
 24%|       | 19/79 [00:01<00:08,  6.75it/s]
 28%|       | 22/79 [00:01<00:06,  8.63it/s]
 32%|      | 25/79 [00:01<00:05, 10.74it/s]
 35%|      | 28/79 [00:02<00:03, 12.97it/s]
 39%|      | 31/79 [00:02<00:03, 15.11it/s]
 43%|     | 34/79 [00:02<00:02, 17.05it/s]
 47%|     | 37/79 [00:02<00:02, 18.75it/s]
 51%|     | 40/79 [00:02<00:01, 20.26it/s]
 54%|    | 43/79 [00:02<00:01, 21.32it/s]
 58%|    | 46/79 [00:02<00:01, 22.17it/s]
 62%|   | 49/79 [00:02<00:01, 22.91it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.85it/s]
 20%|        | 16/79 [00:01<00:12,  5.14it/s]
 24%|       | 19/79 [00:01<00:08,  6.74it/s]
 28%|       | 22/79 [00:01<00:06,  8.61it/s]
 32%|      | 25/79 [00:01<00:05, 10.69it/s]
 35%|      | 28/79 [00:02<00:03, 12.83it/s]
 39%|      | 31/79 [00:02<00:03, 14.93it/s]
 43%|     | 34/79 [00:02<00:02, 16.83it/s]
 47%|     | 37/79 [00:02<00:02, 18.69it/s]
 51%|     | 40/79 [00:02<00:01, 20.28it/s]
 54%|    | 43/79 [00:02<00:01, 21.51it/s]
 58%|    | 46/79 [00:02<00:01, 22.53it/s]
 62%|   | 49/79 [00:02<00:01, 23.23it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:35,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.17it/s]
 24%|       | 19/79 [00:01<00:08,  6.76it/s]
 28%|       | 22/79 [00:01<00:06,  8.60it/s]
 32%|      | 25/79 [00:01<00:05, 10.72it/s]
 35%|      | 28/79 [00:02<00:03, 12.88it/s]
 39%|      | 31/79 [00:02<00:03, 15.02it/s]
 43%|     | 34/79 [00:02<00:02, 17.04it/s]
 47%|     | 37/79 [00:02<00:02, 18.87it/s]
 51%|     | 40/79 [00:02<00:01, 20.18it/s]
 54%|    | 43/79 [00:02<00:01, 21.34it/s]
 58%|    | 46/79 [00:02<00:01, 22.13it/s]
 62%|   | 49/79 [00:02<00:01, 23.12it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:35,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.87it/s]
 20%|        | 16/79 [00:01<00:12,  5.17it/s]
 24%|       | 19/79 [00:01<00:08,  6.77it/s]
 28%|       | 22/79 [00:01<00:06,  8.69it/s]
 32%|      | 25/79 [00:01<00:05, 10.78it/s]
 35%|      | 28/79 [00:02<00:03, 12.98it/s]
 39%|      | 31/79 [00:02<00:03, 15.00it/s]
 43%|     | 34/79 [00:02<00:02, 17.00it/s]
 47%|     | 37/79 [00:02<00:02, 18.81it/s]
 51%|     | 40/79 [00:02<00:01, 19.88it/s]
 54%|    | 43/79 [00:02<00:01, 21.09it/s]
 58%|    | 46/79 [00:02<00:01, 21.59it/s]
 62%|   | 49/79 [00:02<00:01, 22.39it/s]
 66%|   | 52/79 [00:03<00:01, 24.18it/s]
 70%|   | 55/79 [00:02<00:00, 24.49it/s]
 73%|  | 58/79 [00:03<00:00, 24.77it/s]
 77%|  | 61/79 [00:03<00:00, 24.82it/s]
 81%|  | 64/79 [00:03<00:00, 24.41it/s]
 85%| | 67/79 [00:03<00:00, 24.76it/s]
 89%| | 70/79 [00:03<00:00, 24.75it/s]
 92%|| 73/79 [00:03<00:00, 25.08it/s]
 96%|| 76/79 [00:03<00:00, 25.82it/s]
100%|| 79/79 [00:03<00:00, 26.71it/s]
96it/s]
 68%|   | 54/79 [00:02<00:01, 23.93it/s]
 72%|  | 57/79 [00:03<00:00, 24.01it/s]
 76%|  | 60/79 [00:03<00:00, 24.09it/s]
 80%|  | 63/79 [00:03<00:00, 24.20it/s]
 84%| | 66/79 [00:03<00:00, 24.21it/s]
 87%| | 69/79 [00:03<00:00, 24.36it/s]
 91%| | 72/79 [00:03<00:00, 24.33it/s]
 95%|| 75/79 [00:03<00:00, 25.11it/s]
 99%|| 78/79 [00:03<00:00, 25.67it/s]
100%|| 79/79 [00:03<00:00, 19.89it/s]
, 24.11it/s]
 70%|   | 55/79 [00:02<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 24.69it/s]
 77%|  | 61/79 [00:03<00:00, 24.80it/s]
 81%|  | 64/79 [00:03<00:00, 24.85it/s]
 85%| | 67/79 [00:03<00:00, 25.04it/s]
 89%| | 70/79 [00:03<00:00, 25.30it/s]
 92%|| 73/79 [00:03<00:00, 25.37it/s]
 96%|| 76/79 [00:03<00:00, 25.98it/s]
100%|| 79/79 [00:03<00:00, 26.77it/s]
, 24.12it/s]
 70%|   | 55/79 [00:03<00:00, 24.48it/s]
 73%|  | 58/79 [00:03<00:00, 24.83it/s]
 77%|  | 61/79 [00:03<00:00, 25.22it/s]
 81%|  | 64/79 [00:03<00:00, 25.37it/s]
 85%| | 67/79 [00:03<00:00, 25.39it/s]
 89%| | 70/79 [00:03<00:00, 25.16it/s]
 92%|| 73/79 [00:03<00:00, 25.49it/s]
 96%|| 76/79 [00:03<00:00, 26.05it/s]
100%|| 79/79 [00:03<00:00, 26.82it/s]
, 23.55it/s]
 70%|   | 55/79 [00:03<00:01, 23.92it/s]
 73%|  | 58/79 [00:03<00:00, 24.22it/s]
 77%|  | 61/79 [00:03<00:00, 24.61it/s]
 81%|  | 64/79 [00:03<00:00, 24.83it/s]
 85%| | 67/79 [00:03<00:00, 25.02it/s]
 89%| | 70/79 [00:03<00:00, 24.93it/s]
 92%|| 73/79 [00:03<00:00, 25.38it/s]
 96%|| 76/79 [00:03<00:00, 25.98it/s]
100%|| 79/79 [00:03<00:00, 26.76it/s]
28it/s]
 68%|   | 54/79 [00:02<00:01, 24.68it/s]
 72%|  | 57/79 [00:03<00:00, 25.06it/s]
 76%|  | 60/79 [00:03<00:00, 25.10it/s]
 80%|  | 63/79 [00:03<00:00, 25.27it/s]
 84%| | 66/79 [00:03<00:00, 24.98it/s]
 87%| | 69/79 [00:03<00:00, 25.17it/s]
 91%| | 72/79 [00:03<00:00, 24.94it/s]
 95%|| 75/79 [00:03<00:00, 26.01it/s]
 99%|| 78/79 [00:03<00:00, 26.26it/s]
100%|| 79/79 [00:04<00:00, 19.62it/s]
, 23.55it/s]
 70%|   | 55/79 [00:03<00:01, 23.79it/s]
 73%|  | 58/79 [00:03<00:00, 24.28it/s]
 77%|  | 61/79 [00:03<00:00, 24.39it/s]
 81%|  | 64/79 [00:03<00:00, 24.51it/s]
 85%| | 67/79 [00:03<00:00, 24.74it/s]
 89%| | 70/79 [00:03<00:00, 24.82it/s]
 92%|| 73/79 [00:03<00:00, 25.10it/s]
 96%|| 76/79 [00:03<00:00, 25.82it/s]
100%|| 79/79 [00:03<00:00, 26.70it/s]
, 23.86it/s]
 70%|   | 55/79 [00:03<00:00, 24.28it/s]
 73%|  | 58/79 [00:03<00:00, 24.47it/s]
 77%|  | 61/79 [00:03<00:00, 24.43it/s]
 81%|  | 64/79 [00:03<00:00, 24.69it/s]
 85%| | 67/79 [00:03<00:00, 24.74it/s]
 89%| | 70/79 [00:03<00:00, 24.85it/s]
 92%|| 73/79 [00:03<00:00, 25.04it/s]
 96%|| 76/79 [00:03<00:00, 25.67it/s]
100%|| 79/79 [00:03<00:00, 26.50it/s]
66it/s]
 68%|   | 54/79 [00:02<00:01, 24.21it/s]
 72%|  | 57/79 [00:03<00:00, 24.40it/s]
 76%|  | 60/79 [00:03<00:00, 24.31it/s]
 80%|  | 63/79 [00:03<00:00, 24.48it/s]
 84%| | 66/79 [00:03<00:00, 24.63it/s]
 87%| | 69/79 [00:03<00:00, 24.69it/s]
 91%| | 72/79 [00:03<00:00, 24.79it/s]
 95%|| 75/79 [00:03<00:00, 25.55it/s]
 99%|| 78/79 [00:03<00:00, 26.12it/s]
100%|| 79/79 [00:04<00:00, 19.62it/s]
, 23.49it/s]
 70%|   | 55/79 [00:03<00:01, 23.97it/s]
 73%|  | 58/79 [00:03<00:00, 24.16it/s]
 77%|  | 61/79 [00:03<00:00, 24.52it/s]
 81%|  | 64/79 [00:03<00:00, 24.65it/s]
 85%| | 67/79 [00:03<00:00, 24.78it/s]
 89%| | 70/79 [00:03<00:00, 24.88it/s]
 92%|| 73/79 [00:03<00:00, 25.23it/s]
 96%|| 76/79 [00:03<00:00, 25.96it/s]
100%|| 79/79 [00:03<00:00, 26.82it/s]
, 23.92it/s]
 70%|   | 55/79 [00:03<00:00, 24.41it/s]
 73%|  | 58/79 [00:03<00:00, 24.42it/s]
 77%|  | 61/79 [00:03<00:00, 24.70it/s]
 81%|  | 64/79 [00:03<00:00, 24.94it/s]
 85%| | 67/79 [00:03<00:00, 25.16it/s]
 89%| | 70/79 [00:03<00:00, 25.11it/s]
 92%|| 73/79 [00:03<00:00, 25.33it/s]
 96%|| 76/79 [00:03<00:00, 26.00it/s]
100%|| 79/79 [00:03<00:00, 26.89it/s]
, 23.90it/s]
 70%|   | 55/79 [00:03<00:00, 24.14it/s]
 73%|  | 58/79 [00:03<00:00, 24.51it/s]
 77%|  | 61/79 [00:03<00:00, 24.75it/s]
 81%|  | 64/79 [00:03<00:00, 24.85it/s]
 85%| | 67/79 [00:03<00:00, 25.20it/s]
 89%| | 70/79 [00:03<00:00, 24.94it/s]
 92%|| 73/79 [00:03<00:00, 25.30it/s]
 96%|| 76/79 [00:03<00:00, 25.88it/s]
100%|| 79/79 [00:03<00:00, 26.71it/s]
, 24.10it/s]
 70%|   | 55/79 [00:03<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 24.79it/s]
 77%|  | 61/79 [00:03<00:00, 24.79it/s]
 81%|  | 64/79 [00:03<00:00, 24.93it/s]
 85%| | 67/79 [00:03<00:00, 25.11it/s]
 89%| | 70/79 [00:03<00:00, 25.07it/s]
 92%|| 73/79 [00:03<00:00, 25.48it/s]
 96%|| 76/79 [00:03<00:00, 26.01it/s]
100%|| 79/79 [00:03<00:00, 26.85it/s]
, 23.74it/s]
 70%|   | 55/79 [00:03<00:00, 24.07it/s]
 73%|  | 58/79 [00:03<00:00, 24.34it/s]
 77%|  | 61/79 [00:03<00:00, 24.66it/s]
 81%|  | 64/79 [00:03<00:00, 24.67it/s]
 85%| | 67/79 [00:03<00:00, 24.80it/s]
 89%| | 70/79 [00:03<00:00, 24.91it/s]
 92%|| 73/79 [00:03<00:00, 25.42it/s]
 96%|| 76/79 [00:03<00:00, 25.98it/s]
100%|| 79/79 [00:03<00:00, 26.76it/s]
, 23.80it/s]
 70%|   | 55/79 [00:03<00:01, 23.91it/s]
 73%|  | 58/79 [00:03<00:00, 24.29it/s]
 77%|  | 61/79 [00:03<00:00, 24.47it/s]
 81%|  | 64/79 [00:03<00:00, 24.42it/s]
 85%| | 67/79 [00:03<00:00, 24.48it/s]
 89%| | 70/79 [00:03<00:00, 24.53it/s]
 92%|| 73/79 [00:03<00:00, 24.72it/s]
 96%|| 76/79 [00:03<00:00, 25.58it/s]
100%|| 79/79 [00:03<00:00, 26.50it/s]
, 24.18it/s]
 70%|   | 55/79 [00:03<00:00, 24.67it/s]
 73%|  | 58/79 [00:03<00:00, 24.72it/s]
 77%|  | 61/79 [00:03<00:00, 25.01it/s]
 81%|  | 64/79 [00:03<00:00, 25.30it/s]
 85%| | 67/79 [00:03<00:00, 25.01it/s]
 89%| | 70/79 [00:03<00:00, 24.89it/s]
 92%|| 73/79 [00:03<00:00, 25.02it/s]
 96%|| 76/79 [00:03<00:00, 25.71it/s]
100%|| 79/79 [00:04<00:00, 26.51it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:01, 23.65it/s]
 73%|  | 58/79 [00:03<00:00, 23.87it/s]
 77%|  | 61/79 [00:03<00:00, 24.01it/s]
 81%|  | 64/79 [00:03<00:00, 23.97it/s]
 85%| | 67/79 [00:03<00:00, 24.19it/s]
 89%| | 70/79 [00:03<00:00, 24.24it/s]
 92%|| 73/79 [00:03<00:00, 24.76it/s]
 96%|| 76/79 [00:03<00:00, 25.50it/s]
100%|| 79/79 [00:04<00:00, 26.42it/s]
, 22.87it/s]
 70%|   | 55/79 [00:03<00:01, 23.39it/s]
 73%|  | 58/79 [00:03<00:00, 23.70it/s]
 77%|  | 61/79 [00:03<00:00, 23.69it/s]
 81%|  | 64/79 [00:03<00:00, 23.67it/s]
 85%| | 67/79 [00:03<00:00, 23.92it/s]
 89%| | 70/79 [00:03<00:00, 23.96it/s]
 92%|| 73/79 [00:03<00:00, 24.29it/s]
 96%|| 76/79 [00:03<00:00, 25.32it/s]
100%|| 79/79 [00:04<00:00, 26.37it/s]
60it/s]
 68%|   | 54/79 [00:03<00:01, 23.94it/s]
 72%|  | 57/79 [00:03<00:00, 24.24it/s]
 76%|  | 60/79 [00:03<00:00, 24.56it/s]
 80%|  | 63/79 [00:03<00:00, 24.46it/s]
 84%| | 66/79 [00:03<00:00, 24.62it/s]
 87%| | 69/79 [00:03<00:00, 24.74it/s]
 91%| | 72/79 [00:03<00:00, 24.84it/s]
 95%|| 75/79 [00:03<00:00, 25.42it/s]
 99%|| 78/79 [00:04<00:00, 26.31it/s]
100%|| 79/79 [00:04<00:00, 19.27it/s]
56it/s]
 68%|   | 54/79 [00:03<00:01, 23.64it/s]
 72%|  | 57/79 [00:03<00:00, 24.00it/s]
 76%|  | 60/79 [00:03<00:00, 24.31it/s]
 80%|  | 63/79 [00:03<00:00, 24.33it/s]
 84%| | 66/79 [00:03<00:00, 24.70it/s]
 87%| | 69/79 [00:03<00:00, 24.58it/s]
 91%| | 72/79 [00:03<00:00, 24.73it/s]
 95%|| 75/79 [00:03<00:00, 25.53it/s]
 99%|| 78/79 [00:04<00:00, 26.53it/s]
100%|| 79/79 [00:04<00:00, 19.17it/s]
24it/s]
 68%|   | 54/79 [00:03<00:01, 23.64it/s]
 72%|  | 57/79 [00:03<00:00, 24.13it/s]
 76%|  | 60/79 [00:03<00:00, 24.43it/s]
 80%|  | 63/79 [00:03<00:00, 24.58it/s]
 84%| | 66/79 [00:03<00:00, 24.62it/s]
 87%| | 69/79 [00:03<00:00, 24.84it/s]
 91%| | 72/79 [00:03<00:00, 24.75it/s]
 95%|| 75/79 [00:03<00:00, 25.46it/s]
 99%|| 78/79 [00:04<00:00, 25.94it/s]
100%|| 79/79 [00:04<00:00, 19.17it/s]
, 23.48it/s]
 70%|   | 55/79 [00:03<00:01, 23.48it/s]
 73%|  | 58/79 [00:03<00:00, 24.07it/s]
 77%|  | 61/79 [00:03<00:00, 24.31it/s]
 81%|  | 64/79 [00:03<00:00, 24.53it/s]
 85%| | 67/79 [00:03<00:00, 24.54it/s]
 89%| | 70/79 [00:03<00:00, 24.67it/s]
 92%|| 73/79 [00:03<00:00, 25.04it/s]
 96%|| 76/79 [00:03<00:00, 25.71it/s]
100%|| 79/79 [00:04<00:00, 26.43it/s]
, 23.39it/s]
 70%|   | 55/79 [00:03<00:01, 23.90it/s]
 73%|  | 58/79 [00:03<00:00, 24.00it/s]
 77%|  | 61/79 [00:03<00:00, 24.19it/s]
 81%|  | 64/79 [00:03<00:00, 24.23it/s]
 85%| | 67/79 [00:03<00:00, 24.09it/s]
 89%| | 70/79 [00:03<00:00, 24.07it/s]
 92%|| 73/79 [00:03<00:00, 24.61it/s]
 96%|| 76/79 [00:03<00:00, 25.33it/s]
100%|| 79/79 [00:04<00:00, 26.23it/s]
, 23.68it/s]
 70%|   | 55/79 [00:03<00:00, 24.21it/s]
 73%|  | 58/79 [00:03<00:00, 24.52it/s]
 77%|  | 61/79 [00:03<00:00, 24.72it/s]
 81%|  | 64/79 [00:03<00:00, 24.61it/s]
 85%| | 67/79 [00:03<00:00, 24.97it/s]
 89%| | 70/79 [00:03<00:00, 24.78it/s]
 92%|| 73/79 [00:03<00:00, 25.13it/s]
 96%|| 76/79 [00:03<00:00, 25.77it/s]
100%|| 79/79 [00:04<00:00, 26.77it/s]
, 23.63it/s]
 70%|   | 55/79 [00:03<00:01, 23.96it/s]
 73%|  | 58/79 [00:03<00:00, 24.17it/s]
 77%|  | 61/79 [00:03<00:00, 23.95it/s]
 81%|  | 64/79 [00:03<00:00, 24.15it/s]
 85%| | 67/79 [00:03<00:00, 24.11it/s]
 89%| | 70/79 [00:03<00:00, 24.13it/s]
 92%|| 73/79 [00:03<00:00, 24.57it/s]
 96%|| 76/79 [00:03<00:00, 25.24it/s]
100%|| 79/79 [00:04<00:00, 26.22it/s]
, 23.72it/s]
 70%|   | 55/79 [00:03<00:00, 24.02it/s]
 73%|  | 58/79 [00:03<00:00, 24.36it/s]
 77%|  | 61/79 [00:03<00:00, 24.30it/s]
 81%|  | 64/79 [00:03<00:00, 24.36it/s]
 85%| | 67/79 [00:03<00:00, 24.47it/s]
 89%| | 70/79 [00:03<00:00, 24.07it/s]
 92%|| 73/79 [00:03<00:00, 24.62it/s]
 96%|| 76/79 [00:03<00:00, 25.19it/s]
100%|| 79/79 [00:04<00:00, 26.25it/s]
, 23.30it/s]
 70%|   | 55/79 [00:03<00:01, 23.70it/s]
 73%|  | 58/79 [00:03<00:00, 24.00it/s]
 77%|  | 61/79 [00:03<00:00, 24.15it/s]
 81%|  | 64/79 [00:03<00:00, 24.12it/s]
 85%| | 67/79 [00:03<00:00, 24.44it/s]
 89%| | 70/79 [00:03<00:00, 24.49it/s]
 92%|| 73/79 [00:03<00:00, 24.75it/s]
 96%|| 76/79 [00:03<00:00, 25.41it/s]
100%|| 79/79 [00:04<00:00, 26.23it/s]
25it/s]
 68%|   | 54/79 [00:03<00:01, 23.78it/s]
 72%|  | 57/79 [00:03<00:00, 24.01it/s]
 76%|  | 60/79 [00:03<00:00, 24.24it/s]
 80%|  | 63/79 [00:03<00:00, 23.74it/s]
 84%| | 66/79 [00:03<00:00, 24.20it/s]
 87%| | 69/79 [00:03<00:00, 24.08it/s]
 91%| | 72/79 [00:03<00:00, 24.38it/s]
 95%|| 75/79 [00:03<00:00, 25.22it/s]
 99%|| 78/79 [00:04<00:00, 25.90it/s]
100%|| 79/79 [00:04<00:00, 18.99it/s]
, 23.27it/s]
 70%|   | 55/79 [00:03<00:01, 23.70it/s]
 73%|  | 58/79 [00:03<00:00, 23.85it/s]
 77%|  | 61/79 [00:03<00:00, 24.35it/s]
 81%|  | 64/79 [00:03<00:00, 24.44it/s]
 85%| | 67/79 [00:03<00:00, 24.60it/s]
 89%| | 70/79 [00:03<00:00, 24.65it/s]
 92%|| 73/79 [00:03<00:00, 24.85it/s]
 96%|| 76/79 [00:03<00:00, 25.54it/s]
100%|| 79/79 [00:04<00:00, 26.32it/s]
, 23.59it/s]
 70%|   | 55/79 [00:03<00:01, 23.67it/s]
 73%|  | 58/79 [00:03<00:00, 23.79it/s]
 77%|  | 61/79 [00:03<00:00, 24.13it/s]
 81%|  | 64/79 [00:03<00:00, 24.25it/s]
 85%| | 67/79 [00:03<00:00, 24.56it/s]
 89%| | 70/79 [00:03<00:00, 24.84it/s]
 92%|| 73/79 [00:03<00:00, 25.05it/s]
 96%|| 76/79 [00:03<00:00, 25.72it/s]
100%|| 79/79 [00:04<00:00, 26.60it/s]
, 22.87it/s]
 70%|   | 55/79 [00:03<00:01, 23.39it/s]
 73%|  | 58/79 [00:03<00:00, 23.40it/s]
 77%|  | 61/79 [00:03<00:00, 23.34it/s]
 81%|  | 64/79 [00:03<00:00, 23.54it/s]
 85%| | 67/79 [00:03<00:00, 23.72it/s]
 89%| | 70/79 [00:03<00:00, 23.52it/s]
 92%|| 73/79 [00:03<00:00, 24.20it/s]
 96%|| 76/79 [00:03<00:00, 25.02it/s]
100%|| 79/79 [00:04<00:00, 26.09it/s]
, 22.94it/s]
 70%|   | 55/79 [00:03<00:01, 23.38it/s]
 73%|  | 58/79 [00:03<00:00, 23.54it/s]
 77%|  | 61/79 [00:03<00:00, 23.74it/s]
 81%|  | 64/79 [00:03<00:00, 24.02it/s]
 85%| | 67/79 [00:03<00:00, 24.28it/s]
 89%| | 70/79 [00:03<00:00, 24.40it/s]
 92%|| 73/79 [00:03<00:00, 24.60it/s]
 96%|| 76/79 [00:04<00:00, 25.46it/s]
100%|| 79/79 [00:04<00:00, 26.18it/s]
2020-06-23 15:53:20,255 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.205829 (0.026917308044433593 s / img per device, on 32 devices)
2020-06-23 15:53:20,274 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:53:20,274 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:53:20,292 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592952806847, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 17, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592952806848, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 17}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 15:53:27,723 maskrcnn_benchmark.trainer INFO: eta: 0:52:59  iter: 14680  loss: 0.5302 (0.6830)  loss_classifier: 0.1713 (0.2427)  loss_box_reg: 0.0938 (0.1109)  loss_mask: 0.2356 (0.2792)  loss_objectness: 0.0141 (0.0315)  loss_rpn_box_reg: 0.0081 (0.0187)  time: 0.1105 (0.1256)  data: 0.0015 (0.0173)  lr: 0.001600  max mem: 5211
2020-06-23 15:53:29,923 maskrcnn_benchmark.trainer INFO: eta: 0:52:56  iter: 14700  loss: 0.5236 (0.6828)  loss_classifier: 0.1450 (0.2426)  loss_box_reg: 0.0891 (0.1109)  loss_mask: 0.2419 (0.2792)  loss_objectness: 0.0109 (0.0315)  loss_rpn_box_reg: 0.0115 (0.0187)  time: 0.1094 (0.1256)  data: 0.0014 (0.0172)  lr: 0.001600  max mem: 5211
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 15:53:32,121 maskrcnn_benchmark.trainer INFO: eta: 0:52:53  iter: 14720  loss: 0.5571 (0.6826)  loss_classifier: 0.1671 (0.2425)  loss_box_reg: 0.0865 (0.1108)  loss_mask: 0.2334 (0.2791)  loss_objectness: 0.0095 (0.0314)  loss_rpn_box_reg: 0.0056 (0.0187)  time: 0.1090 (0.1255)  data: 0.0014 (0.0172)  lr: 0.001600  max mem: 5211
DONE (t=0.52s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.38s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37691
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.59133
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.40879
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21866
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.40552
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49515
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.31292
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.49273
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51624
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.33100
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.54987
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.65371
2020-06-23 15:53:34,305 maskrcnn_benchmark.trainer INFO: eta: 0:52:50  iter: 14740  loss: 0.5020 (0.6824)  loss_classifier: 0.1596 (0.2424)  loss_box_reg: 0.0822 (0.1108)  loss_mask: 0.2348 (0.2790)  loss_objectness: 0.0126 (0.0314)  loss_rpn_box_reg: 0.0064 (0.0187)  time: 0.1089 (0.1255)  data: 0.0014 (0.0172)  lr: 0.001600  max mem: 5211
2020-06-23 15:53:36,494 maskrcnn_benchmark.trainer INFO: eta: 0:52:47  iter: 14760  loss: 0.4456 (0.6821)  loss_classifier: 0.1392 (0.2423)  loss_box_reg: 0.0655 (0.1108)  loss_mask: 0.2115 (0.2790)  loss_objectness: 0.0090 (0.0314)  loss_rpn_box_reg: 0.0061 (0.0187)  time: 0.1094 (0.1255)  data: 0.0014 (0.0172)  lr: 0.001600  max mem: 5211
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:53:38,711 maskrcnn_benchmark.trainer INFO: eta: 0:52:44  iter: 14780  loss: 0.5524 (0.6819)  loss_classifier: 0.1923 (0.2422)  loss_box_reg: 0.0921 (0.1108)  loss_mask: 0.2338 (0.2789)  loss_objectness: 0.0126 (0.0314)  loss_rpn_box_reg: 0.0103 (0.0187)  time: 0.1102 (0.1255)  data: 0.0015 (0.0172)  lr: 0.001600  max mem: 5211
DONE (t=1.37s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:53:40,910 maskrcnn_benchmark.trainer INFO: eta: 0:52:41  iter: 14800  loss: 0.5507 (0.6818)  loss_classifier: 0.1641 (0.2421)  loss_box_reg: 0.0831 (0.1107)  loss_mask: 0.2558 (0.2789)  loss_objectness: 0.0146 (0.0314)  loss_rpn_box_reg: 0.0099 (0.0187)  time: 0.1099 (0.1255)  data: 0.0015 (0.0171)  lr: 0.001600  max mem: 5211
DONE (t=2.23s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.34266
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.56025
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.36438
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15811
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36931
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.51164
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29400
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.45099
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.47045
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27711
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50715
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62481
2020-06-23 15:53:42,027 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3769111059075919, segm mAP: 0.34266318797091777
:::MLLOG {"namespace": "", "time_ms": 1592952822027, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.3769111059075919, "SEGM": 0.34266318797091777}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 16}}
:::MLLOG {"namespace": "", "time_ms": 1592952822028, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 16}}
2020-06-23 15:53:43,234 maskrcnn_benchmark.trainer INFO: eta: 0:52:38  iter: 14820  loss: 0.4863 (0.6815)  loss_classifier: 0.1503 (0.2420)  loss_box_reg: 0.0797 (0.1107)  loss_mask: 0.2380 (0.2788)  loss_objectness: 0.0169 (0.0313)  loss_rpn_box_reg: 0.0077 (0.0187)  time: 0.1099 (0.1254)  data: 0.0015 (0.0171)  lr: 0.001600  max mem: 5211
2020-06-23 15:53:45,431 maskrcnn_benchmark.trainer INFO: eta: 0:52:35  iter: 14840  loss: 0.4878 (0.6813)  loss_classifier: 0.1704 (0.2419)  loss_box_reg: 0.0928 (0.1107)  loss_mask: 0.2268 (0.2787)  loss_objectness: 0.0093 (0.0313)  loss_rpn_box_reg: 0.0061 (0.0187)  time: 0.1094 (0.1254)  data: 0.0015 (0.0171)  lr: 0.001600  max mem: 5211
2020-06-23 15:53:47,625 maskrcnn_benchmark.trainer INFO: eta: 0:52:32  iter: 14860  loss: 0.5720 (0.6811)  loss_classifier: 0.1401 (0.2418)  loss_box_reg: 0.0940 (0.1106)  loss_mask: 0.2594 (0.2787)  loss_objectness: 0.0174 (0.0313)  loss_rpn_box_reg: 0.0093 (0.0187)  time: 0.1093 (0.1254)  data: 0.0015 (0.0171)  lr: 0.001600  max mem: 5211
2020-06-23 15:53:49,799 maskrcnn_benchmark.trainer INFO: eta: 0:52:29  iter: 14880  loss: 0.4801 (0.6809)  loss_classifier: 0.1575 (0.2417)  loss_box_reg: 0.0782 (0.1106)  loss_mask: 0.2375 (0.2786)  loss_objectness: 0.0117 (0.0313)  loss_rpn_box_reg: 0.0073 (0.0187)  time: 0.1084 (0.1254)  data: 0.0014 (0.0171)  lr: 0.001600  max mem: 5211
2020-06-23 15:53:51,993 maskrcnn_benchmark.trainer INFO: eta: 0:52:26  iter: 14900  loss: 0.5626 (0.6807)  loss_classifier: 0.1811 (0.2416)  loss_box_reg: 0.0998 (0.1106)  loss_mask: 0.2585 (0.2786)  loss_objectness: 0.0141 (0.0313)  loss_rpn_box_reg: 0.0059 (0.0187)  time: 0.1092 (0.1254)  data: 0.0015 (0.0170)  lr: 0.001600  max mem: 5211
2020-06-23 15:53:54,184 maskrcnn_benchmark.trainer INFO: eta: 0:52:23  iter: 14920  loss: 0.4426 (0.6805)  loss_classifier: 0.1462 (0.2415)  loss_box_reg: 0.0701 (0.1105)  loss_mask: 0.2237 (0.2785)  loss_objectness: 0.0113 (0.0312)  loss_rpn_box_reg: 0.0066 (0.0186)  time: 0.1092 (0.1253)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5211
2020-06-23 15:53:56,378 maskrcnn_benchmark.trainer INFO: eta: 0:52:20  iter: 14940  loss: 0.5581 (0.6803)  loss_classifier: 0.1723 (0.2414)  loss_box_reg: 0.0832 (0.1105)  loss_mask: 0.2354 (0.2785)  loss_objectness: 0.0127 (0.0312)  loss_rpn_box_reg: 0.0064 (0.0186)  time: 0.1085 (0.1253)  data: 0.0015 (0.0170)  lr: 0.001600  max mem: 5211
2020-06-23 15:53:58,561 maskrcnn_benchmark.trainer INFO: eta: 0:52:17  iter: 14960  loss: 0.5592 (0.6801)  loss_classifier: 0.1691 (0.2413)  loss_box_reg: 0.0784 (0.1105)  loss_mask: 0.2527 (0.2785)  loss_objectness: 0.0125 (0.0312)  loss_rpn_box_reg: 0.0069 (0.0186)  time: 0.1090 (0.1253)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:00,746 maskrcnn_benchmark.trainer INFO: eta: 0:52:14  iter: 14980  loss: 0.4706 (0.6799)  loss_classifier: 0.1636 (0.2412)  loss_box_reg: 0.0790 (0.1105)  loss_mask: 0.2268 (0.2784)  loss_objectness: 0.0125 (0.0312)  loss_rpn_box_reg: 0.0063 (0.0186)  time: 0.1082 (0.1253)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:02,945 maskrcnn_benchmark.trainer INFO: eta: 0:52:11  iter: 15000  loss: 0.5178 (0.6797)  loss_classifier: 0.1620 (0.2411)  loss_box_reg: 0.0804 (0.1104)  loss_mask: 0.2445 (0.2783)  loss_objectness: 0.0089 (0.0312)  loss_rpn_box_reg: 0.0058 (0.0186)  time: 0.1096 (0.1253)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:05,132 maskrcnn_benchmark.trainer INFO: eta: 0:52:08  iter: 15020  loss: 0.5005 (0.6795)  loss_classifier: 0.1500 (0.2410)  loss_box_reg: 0.0841 (0.1104)  loss_mask: 0.2186 (0.2783)  loss_objectness: 0.0131 (0.0312)  loss_rpn_box_reg: 0.0077 (0.0186)  time: 0.1092 (0.1252)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:07,321 maskrcnn_benchmark.trainer INFO: eta: 0:52:05  iter: 15040  loss: 0.4902 (0.6793)  loss_classifier: 0.1601 (0.2409)  loss_box_reg: 0.0911 (0.1104)  loss_mask: 0.2295 (0.2782)  loss_objectness: 0.0165 (0.0312)  loss_rpn_box_reg: 0.0071 (0.0186)  time: 0.1089 (0.1252)  data: 0.0013 (0.0169)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:09,531 maskrcnn_benchmark.trainer INFO: eta: 0:52:02  iter: 15060  loss: 0.4724 (0.6791)  loss_classifier: 0.1479 (0.2408)  loss_box_reg: 0.0736 (0.1103)  loss_mask: 0.2145 (0.2782)  loss_objectness: 0.0098 (0.0311)  loss_rpn_box_reg: 0.0066 (0.0186)  time: 0.1106 (0.1252)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:11,735 maskrcnn_benchmark.trainer INFO: eta: 0:51:59  iter: 15080  loss: 0.5751 (0.6790)  loss_classifier: 0.2002 (0.2408)  loss_box_reg: 0.0901 (0.1103)  loss_mask: 0.2322 (0.2781)  loss_objectness: 0.0251 (0.0312)  loss_rpn_box_reg: 0.0082 (0.0186)  time: 0.1097 (0.1252)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:13,929 maskrcnn_benchmark.trainer INFO: eta: 0:51:56  iter: 15100  loss: 0.5300 (0.6788)  loss_classifier: 0.1704 (0.2407)  loss_box_reg: 0.0698 (0.1103)  loss_mask: 0.2297 (0.2780)  loss_objectness: 0.0166 (0.0312)  loss_rpn_box_reg: 0.0077 (0.0186)  time: 0.1088 (0.1252)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:16,117 maskrcnn_benchmark.trainer INFO: eta: 0:51:53  iter: 15120  loss: 0.5339 (0.6786)  loss_classifier: 0.1601 (0.2406)  loss_box_reg: 0.1013 (0.1102)  loss_mask: 0.2429 (0.2780)  loss_objectness: 0.0108 (0.0311)  loss_rpn_box_reg: 0.0066 (0.0186)  time: 0.1094 (0.1251)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:18,305 maskrcnn_benchmark.trainer INFO: eta: 0:51:50  iter: 15140  loss: 0.4811 (0.6784)  loss_classifier: 0.1427 (0.2405)  loss_box_reg: 0.0806 (0.1102)  loss_mask: 0.2299 (0.2779)  loss_objectness: 0.0140 (0.0311)  loss_rpn_box_reg: 0.0055 (0.0186)  time: 0.1084 (0.1251)  data: 0.0013 (0.0168)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:20,500 maskrcnn_benchmark.trainer INFO: eta: 0:51:47  iter: 15160  loss: 0.5271 (0.6783)  loss_classifier: 0.1552 (0.2404)  loss_box_reg: 0.0857 (0.1102)  loss_mask: 0.2517 (0.2779)  loss_objectness: 0.0184 (0.0311)  loss_rpn_box_reg: 0.0117 (0.0186)  time: 0.1091 (0.1251)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:22,711 maskrcnn_benchmark.trainer INFO: eta: 0:51:44  iter: 15180  loss: 0.4724 (0.6780)  loss_classifier: 0.1456 (0.2403)  loss_box_reg: 0.0705 (0.1102)  loss_mask: 0.2353 (0.2778)  loss_objectness: 0.0089 (0.0311)  loss_rpn_box_reg: 0.0062 (0.0186)  time: 0.1106 (0.1251)  data: 0.0014 (0.0167)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:24,905 maskrcnn_benchmark.trainer INFO: eta: 0:51:41  iter: 15200  loss: 0.4619 (0.6778)  loss_classifier: 0.1544 (0.2403)  loss_box_reg: 0.0709 (0.1101)  loss_mask: 0.2264 (0.2778)  loss_objectness: 0.0130 (0.0311)  loss_rpn_box_reg: 0.0069 (0.0186)  time: 0.1094 (0.1250)  data: 0.0014 (0.0167)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:27,108 maskrcnn_benchmark.trainer INFO: eta: 0:51:38  iter: 15220  loss: 0.5426 (0.6777)  loss_classifier: 0.1726 (0.2402)  loss_box_reg: 0.1089 (0.1101)  loss_mask: 0.2431 (0.2777)  loss_objectness: 0.0127 (0.0310)  loss_rpn_box_reg: 0.0090 (0.0186)  time: 0.1093 (0.1250)  data: 0.0015 (0.0167)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:29,305 maskrcnn_benchmark.trainer INFO: eta: 0:51:35  iter: 15240  loss: 0.5031 (0.6775)  loss_classifier: 0.1384 (0.2401)  loss_box_reg: 0.0695 (0.1101)  loss_mask: 0.2486 (0.2777)  loss_objectness: 0.0099 (0.0310)  loss_rpn_box_reg: 0.0093 (0.0186)  time: 0.1092 (0.1250)  data: 0.0014 (0.0167)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:31,489 maskrcnn_benchmark.trainer INFO: eta: 0:51:32  iter: 15260  loss: 0.4815 (0.6773)  loss_classifier: 0.1558 (0.2400)  loss_box_reg: 0.0730 (0.1101)  loss_mask: 0.2259 (0.2776)  loss_objectness: 0.0121 (0.0310)  loss_rpn_box_reg: 0.0048 (0.0186)  time: 0.1088 (0.1250)  data: 0.0013 (0.0167)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:33,688 maskrcnn_benchmark.trainer INFO: eta: 0:51:29  iter: 15280  loss: 0.5677 (0.6771)  loss_classifier: 0.2057 (0.2399)  loss_box_reg: 0.1009 (0.1101)  loss_mask: 0.2400 (0.2776)  loss_objectness: 0.0137 (0.0310)  loss_rpn_box_reg: 0.0083 (0.0186)  time: 0.1096 (0.1250)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:35,876 maskrcnn_benchmark.trainer INFO: eta: 0:51:26  iter: 15300  loss: 0.5408 (0.6770)  loss_classifier: 0.1474 (0.2398)  loss_box_reg: 0.0786 (0.1100)  loss_mask: 0.2452 (0.2775)  loss_objectness: 0.0136 (0.0310)  loss_rpn_box_reg: 0.0123 (0.0186)  time: 0.1083 (0.1249)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:38,070 maskrcnn_benchmark.trainer INFO: eta: 0:51:23  iter: 15320  loss: 0.5312 (0.6768)  loss_classifier: 0.1589 (0.2398)  loss_box_reg: 0.0915 (0.1100)  loss_mask: 0.2200 (0.2775)  loss_objectness: 0.0135 (0.0310)  loss_rpn_box_reg: 0.0069 (0.0186)  time: 0.1095 (0.1249)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:40,257 maskrcnn_benchmark.trainer INFO: eta: 0:51:20  iter: 15340  loss: 0.4684 (0.6766)  loss_classifier: 0.1458 (0.2397)  loss_box_reg: 0.0825 (0.1100)  loss_mask: 0.2417 (0.2774)  loss_objectness: 0.0088 (0.0310)  loss_rpn_box_reg: 0.0069 (0.0185)  time: 0.1092 (0.1249)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:42,434 maskrcnn_benchmark.trainer INFO: eta: 0:51:17  iter: 15360  loss: 0.5250 (0.6764)  loss_classifier: 0.1890 (0.2396)  loss_box_reg: 0.0847 (0.1100)  loss_mask: 0.2240 (0.2774)  loss_objectness: 0.0096 (0.0309)  loss_rpn_box_reg: 0.0057 (0.0185)  time: 0.1083 (0.1249)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:44,616 maskrcnn_benchmark.trainer INFO: eta: 0:51:14  iter: 15380  loss: 0.5052 (0.6762)  loss_classifier: 0.1547 (0.2395)  loss_box_reg: 0.0859 (0.1099)  loss_mask: 0.2417 (0.2773)  loss_objectness: 0.0100 (0.0309)  loss_rpn_box_reg: 0.0061 (0.0185)  time: 0.1085 (0.1249)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:46,795 maskrcnn_benchmark.trainer INFO: eta: 0:51:11  iter: 15400  loss: 0.4814 (0.6760)  loss_classifier: 0.1241 (0.2394)  loss_box_reg: 0.0646 (0.1099)  loss_mask: 0.2241 (0.2773)  loss_objectness: 0.0129 (0.0309)  loss_rpn_box_reg: 0.0072 (0.0185)  time: 0.1081 (0.1248)  data: 0.0014 (0.0165)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:48,993 maskrcnn_benchmark.trainer INFO: eta: 0:51:08  iter: 15420  loss: 0.5606 (0.6758)  loss_classifier: 0.2026 (0.2393)  loss_box_reg: 0.1042 (0.1099)  loss_mask: 0.2344 (0.2772)  loss_objectness: 0.0125 (0.0309)  loss_rpn_box_reg: 0.0073 (0.0185)  time: 0.1098 (0.1248)  data: 0.0014 (0.0165)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:51,171 maskrcnn_benchmark.trainer INFO: eta: 0:51:05  iter: 15440  loss: 0.4729 (0.6756)  loss_classifier: 0.1708 (0.2392)  loss_box_reg: 0.0819 (0.1098)  loss_mask: 0.2234 (0.2772)  loss_objectness: 0.0089 (0.0309)  loss_rpn_box_reg: 0.0049 (0.0185)  time: 0.1086 (0.1248)  data: 0.0013 (0.0165)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:53,349 maskrcnn_benchmark.trainer INFO: eta: 0:51:02  iter: 15460  loss: 0.5603 (0.6755)  loss_classifier: 0.1510 (0.2391)  loss_box_reg: 0.0890 (0.1098)  loss_mask: 0.2419 (0.2771)  loss_objectness: 0.0163 (0.0309)  loss_rpn_box_reg: 0.0128 (0.0185)  time: 0.1084 (0.1248)  data: 0.0014 (0.0165)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:55,528 maskrcnn_benchmark.trainer INFO: eta: 0:50:59  iter: 15480  loss: 0.5471 (0.6753)  loss_classifier: 0.1604 (0.2391)  loss_box_reg: 0.0813 (0.1098)  loss_mask: 0.2417 (0.2771)  loss_objectness: 0.0197 (0.0309)  loss_rpn_box_reg: 0.0094 (0.0185)  time: 0.1087 (0.1248)  data: 0.0014 (0.0165)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:57,735 maskrcnn_benchmark.trainer INFO: eta: 0:50:56  iter: 15500  loss: 0.5197 (0.6751)  loss_classifier: 0.1462 (0.2390)  loss_box_reg: 0.0831 (0.1098)  loss_mask: 0.2328 (0.2771)  loss_objectness: 0.0128 (0.0308)  loss_rpn_box_reg: 0.0058 (0.0185)  time: 0.1092 (0.1247)  data: 0.0014 (0.0164)  lr: 0.001600  max mem: 5211
2020-06-23 15:54:59,935 maskrcnn_benchmark.trainer INFO: eta: 0:50:53  iter: 15520  loss: 0.5331 (0.6750)  loss_classifier: 0.1386 (0.2389)  loss_box_reg: 0.0896 (0.1097)  loss_mask: 0.2457 (0.2770)  loss_objectness: 0.0106 (0.0308)  loss_rpn_box_reg: 0.0124 (0.0185)  time: 0.1099 (0.1247)  data: 0.0014 (0.0164)  lr: 0.001600  max mem: 5211
2020-06-23 15:55:02,126 maskrcnn_benchmark.trainer INFO: eta: 0:50:50  iter: 15540  loss: 0.5592 (0.6748)  loss_classifier: 0.1852 (0.2388)  loss_box_reg: 0.0859 (0.1097)  loss_mask: 0.2406 (0.2770)  loss_objectness: 0.0105 (0.0308)  loss_rpn_box_reg: 0.0071 (0.0185)  time: 0.1091 (0.1247)  data: 0.0014 (0.0164)  lr: 0.001600  max mem: 5211
2020-06-23 15:55:04,348 maskrcnn_benchmark.trainer INFO: eta: 0:50:47  iter: 15560  loss: 0.5373 (0.6746)  loss_classifier: 0.1596 (0.2387)  loss_box_reg: 0.0929 (0.1097)  loss_mask: 0.2325 (0.2769)  loss_objectness: 0.0129 (0.0308)  loss_rpn_box_reg: 0.0068 (0.0185)  time: 0.1105 (0.1247)  data: 0.0015 (0.0164)  lr: 0.001600  max mem: 5211
2020-06-23 15:55:06,532 maskrcnn_benchmark.trainer INFO: eta: 0:50:44  iter: 15580  loss: 0.5024 (0.6745)  loss_classifier: 0.1712 (0.2387)  loss_box_reg: 0.0937 (0.1097)  loss_mask: 0.2466 (0.2769)  loss_objectness: 0.0148 (0.0308)  loss_rpn_box_reg: 0.0067 (0.0185)  time: 0.1093 (0.1247)  data: 0.0015 (0.0164)  lr: 0.001600  max mem: 5211

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0

Grad overflow on iteration  15588
Using dynamic loss scale of  65536.0
:::MLLOG {"namespace": "", "time_ms": 1592952907517, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 17}}
:::MLLOG {"namespace": "", "time_ms": 1592952907518, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 17}}
:::MLLOG {"namespace": "", "time_ms": 1592952907518, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 17}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 15:55:07,750 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
index created!
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
index created!
2020-06-23 15:55:08,048 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:53,  1.47it/s]
  5%|         | 4/79 [00:00<00:36,  2.04it/s]
  9%|         | 7/79 [00:00<00:25,  2.82it/s]
 13%|        | 10/79 [00:01<00:17,  3.84it/s]
 16%|        | 13/79 [00:01<00:12,  5.16it/s]
 20%|        | 16/79 [00:01<00:09,  6.77it/s]
 24%|       | 19/79 [00:01<00:06,  8.63it/s]
 28%|       | 22/79 [00:01<00:05, 10.76it/s]
 32%|      | 25/79 [00:01<00:04, 13.01it/s]
 35%|      | 28/79 [00:01<00:03, 15.23it/s]
 39%|      | 31/79 [00:01<00:02, 17.27it/s]
 43%|     | 34/79 [00:02<00:02, 19.13it/s]
 47%|     | 37/79 [00:02<00:02, 20.59it/s]
 51%|     | 40/79 [00:02<00:01, 21.70it/s]
 54%|    | 43/79 [00:02<00:01, 22.71it/s]
 58%|    | 46/79 [00:02<00:01, 23.57it/s]
 62%|   | 49/79 [00:02<00:01, 24.08it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.27it/s]
  5%|         | 4/79 [00:00<00:42,  1.77it/s]
  9%|         | 7/79 [00:01<00:29,  2.46it/s]
 13%|        | 10/79 [00:01<00:20,  3.36it/s]
 16%|        | 13/79 [00:01<00:14,  4.55it/s]
 20%|        | 16/79 [00:01<00:10,  6.01it/s]
 24%|       | 19/79 [00:01<00:07,  7.80it/s]
 28%|       | 22/79 [00:01<00:05,  9.81it/s]
 32%|      | 25/79 [00:01<00:04, 12.04it/s]
 35%|      | 28/79 [00:01<00:03, 14.31it/s]
 39%|      | 31/79 [00:02<00:02, 16.43it/s]
 43%|     | 34/79 [00:02<00:02, 18.35it/s]
 47%|     | 37/79 [00:02<00:02, 20.16it/s]
 51%|     | 40/79 [00:02<00:01, 21.04it/s]
 54%|    | 43/79 [00:02<00:01, 22.28it/s]
 58%|    | 46/79 [00:02<00:01, 23.00it/s]
 62%|   | 49/79 [00:02<00:01, 23.51it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:00<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.26it/s]
 28%|       | 22/79 [00:01<00:06,  9.28it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:03, 15.93it/s]
 43%|     | 34/79 [00:02<00:02, 18.03it/s]
 47%|     | 37/79 [00:02<00:02, 19.74it/s]
 51%|     | 40/79 [00:02<00:01, 21.21it/s]
 54%|    | 43/79 [00:02<00:01, 22.41it/s]
 58%|    | 46/79 [00:02<00:01, 23.29it/s]
 62%|   | 49/79 [00:02<00:01, 23.91it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  4%|         | 3/79 [00:00<00:44,  1.71it/s]
  8%|         | 6/79 [00:01<00:30,  2.37it/s]
 11%|        | 9/79 [00:01<00:21,  3.26it/s]
 15%|        | 12/79 [00:01<00:15,  4.41it/s]
 19%|        | 15/79 [00:01<00:10,  5.86it/s]
 23%|       | 18/79 [00:01<00:07,  7.63it/s]
 27%|       | 21/79 [00:01<00:06,  9.58it/s]
 30%|       | 24/79 [00:01<00:04, 11.74it/s]
 34%|      | 27/79 [00:01<00:03, 13.98it/s]
 38%|      | 30/79 [00:02<00:03, 16.17it/s]
 42%|     | 33/79 [00:02<00:02, 17.98it/s]
 46%|     | 36/79 [00:02<00:02, 19.61it/s]
 49%|     | 39/79 [00:02<00:01, 20.96it/s]
 53%|    | 42/79 [00:02<00:01, 22.13it/s]
 57%|    | 45/79 [00:02<00:01, 22.71it/s]
 61%|    | 48/79 [00:02<00:01, 23.24it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  4%|         | 3/79 [00:00<00:45,  1.68it/s]
  8%|         | 6/79 [00:01<00:31,  2.33it/s]
 11%|        | 9/79 [00:01<00:21,  3.20it/s]
 15%|        | 12/79 [00:01<00:15,  4.33it/s]
 19%|        | 15/79 [00:01<00:11,  5.75it/s]
 23%|       | 18/79 [00:01<00:08,  7.46it/s]
 27%|       | 21/79 [00:01<00:06,  9.45it/s]
 30%|       | 24/79 [00:01<00:04, 11.60it/s]
 34%|      | 27/79 [00:01<00:03, 13.83it/s]
 38%|      | 30/79 [00:02<00:03, 15.98it/s]
 42%|     | 33/79 [00:02<00:02, 17.74it/s]
 46%|     | 36/79 [00:02<00:02, 19.46it/s]
 49%|     | 39/79 [00:02<00:01, 20.66it/s]
 53%|    | 42/79 [00:02<00:01, 21.87it/s]
 57%|    | 45/79 [00:02<00:01, 22.49it/s]
 61%|    | 48/79 [00:02<00:01, 23.22it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  4%|         | 3/79 [00:00<00:44,  1.71it/s]
  8%|         | 6/79 [00:01<00:30,  2.36it/s]
 11%|        | 9/79 [00:01<00:21,  3.24it/s]
 15%|        | 12/79 [00:01<00:15,  4.38it/s]
 19%|        | 15/79 [00:01<00:10,  5.83it/s]
 23%|       | 18/79 [00:01<00:08,  7.56it/s]
 27%|       | 21/79 [00:01<00:06,  9.58it/s]
 30%|       | 24/79 [00:01<00:04, 11.71it/s]
 34%|      | 27/79 [00:01<00:03, 13.89it/s]
 38%|      | 30/79 [00:02<00:03, 16.04it/s]
 42%|     | 33/79 [00:02<00:02, 17.97it/s]
 46%|     | 36/79 [00:02<00:02, 19.43it/s]
 49%|     | 39/79 [00:02<00:01, 20.66it/s]
 53%|    | 42/79 [00:02<00:01, 21.69it/s]
 57%|    | 45/79 [00:02<00:01, 22.59it/s]
 61%|    | 48/79 [00:02<00:01, 23.22it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.36it/s]
 28%|       | 22/79 [00:01<00:06,  9.35it/s]
 32%|      | 25/79 [00:01<00:04, 11.49it/s]
 35%|      | 28/79 [00:01<00:03, 13.74it/s]
 39%|      | 31/79 [00:02<00:03, 15.93it/s]
 43%|     | 34/79 [00:02<00:02, 17.94it/s]
 47%|     | 37/79 [00:02<00:02, 19.64it/s]
 51%|     | 40/79 [00:02<00:01, 21.14it/s]
 54%|    | 43/79 [00:02<00:01, 22.22it/s]
 58%|    | 46/79 [00:02<00:01, 23.07it/s]
 62%|   | 49/79 [00:02<00:01, 23.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.53it/s]
 28%|       | 22/79 [00:01<00:05,  9.51it/s]
 32%|      | 25/79 [00:01<00:04, 11.67it/s]
 35%|      | 28/79 [00:01<00:03, 13.95it/s]
 39%|      | 31/79 [00:02<00:03, 15.86it/s]
 43%|     | 34/79 [00:02<00:02, 17.76it/s]
 47%|     | 37/79 [00:02<00:02, 19.27it/s]
 51%|     | 40/79 [00:02<00:01, 20.71it/s]
 54%|    | 43/79 [00:02<00:01, 21.61it/s]
 58%|    | 46/79 [00:02<00:01, 22.53it/s]
 62%|   | 49/79 [00:02<00:01, 23.17it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.17it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.26it/s]
 28%|       | 22/79 [00:01<00:06,  9.18it/s]
 32%|      | 25/79 [00:01<00:04, 11.31it/s]
 35%|      | 28/79 [00:01<00:03, 13.55it/s]
 39%|      | 31/79 [00:02<00:03, 15.78it/s]
 43%|     | 34/79 [00:02<00:02, 17.71it/s]
 47%|     | 37/79 [00:02<00:02, 19.50it/s]
 51%|     | 40/79 [00:02<00:01, 20.83it/s]
 54%|    | 43/79 [00:02<00:01, 21.88it/s]
 58%|    | 46/79 [00:02<00:01, 22.33it/s]
 62%|   | 49/79 [00:02<00:01, 22.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.09it/s]
 28%|       | 22/79 [00:01<00:06,  9.06it/s]
 32%|      | 25/79 [00:01<00:04, 11.23it/s]
 35%|      | 28/79 [00:01<00:03, 13.57it/s]
 39%|      | 31/79 [00:02<00:03, 15.81it/s]
 43%|     | 34/79 [00:02<00:02, 17.87it/s]
 47%|     | 37/79 [00:02<00:02, 19.75it/s]
 51%|     | 40/79 [00:02<00:01, 21.09it/s]
 54%|    | 43/79 [00:02<00:01, 22.08it/s]
 58%|    | 46/79 [00:02<00:01, 22.95it/s]
 62%|   | 49/79 [00:02<00:01, 23.70it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.33it/s]
 35%|      | 28/79 [00:01<00:03, 13.55it/s]
 39%|      | 31/79 [00:02<00:03, 15.72it/s]
 43%|     | 34/79 [00:02<00:02, 17.66it/s]
 47%|     | 37/79 [00:02<00:02, 19.35it/s]
 51%|     | 40/79 [00:02<00:01, 20.84it/s]
 54%|    | 43/79 [00:02<00:01, 21.68it/s]
 58%|    | 46/79 [00:02<00:01, 22.43it/s]
 62%|   | 49/79 [00:02<00:01, 22.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.36it/s]
 28%|       | 22/79 [00:01<00:06,  9.34it/s]
 32%|      | 25/79 [00:01<00:04, 11.51it/s]
 35%|      | 28/79 [00:01<00:03, 13.77it/s]
 39%|      | 31/79 [00:02<00:03, 15.86it/s]
 43%|     | 34/79 [00:02<00:02, 17.74it/s]
 47%|     | 37/79 [00:02<00:02, 19.32it/s]
 51%|     | 40/79 [00:02<00:01, 20.72it/s]
 54%|    | 43/79 [00:02<00:01, 21.63it/s]
 58%|    | 46/79 [00:02<00:01, 22.57it/s]
 62%|   | 49/79 [00:02<00:01, 22.88it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.48it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.04it/s]
 32%|      | 25/79 [00:01<00:04, 11.19it/s]
 35%|      | 28/79 [00:01<00:03, 13.47it/s]
 39%|      | 31/79 [00:02<00:03, 15.75it/s]
 43%|     | 34/79 [00:02<00:02, 17.71it/s]
 47%|     | 37/79 [00:02<00:02, 19.28it/s]
 51%|     | 40/79 [00:02<00:01, 20.65it/s]
 54%|    | 43/79 [00:02<00:01, 21.82it/s]
 58%|    | 46/79 [00:02<00:01, 22.67it/s]
 62%|   | 49/79 [00:02<00:01, 23.02it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.08it/s]
  4%|         | 3/79 [00:01<00:50,  1.51it/s]
  8%|         | 6/79 [00:01<00:34,  2.11it/s]
 11%|        | 9/79 [00:01<00:24,  2.90it/s]
 15%|        | 12/79 [00:01<00:16,  3.95it/s]
 19%|        | 15/79 [00:01<00:12,  5.30it/s]
 23%|       | 18/79 [00:01<00:08,  6.95it/s]
 27%|       | 21/79 [00:01<00:06,  8.87it/s]
 30%|       | 24/79 [00:01<00:04, 11.06it/s]
 34%|      | 27/79 [00:01<00:03, 13.31it/s]
 38%|      | 30/79 [00:02<00:03, 15.53it/s]
 42%|     | 33/79 [00:02<00:02, 17.52it/s]
 46%|     | 36/79 [00:02<00:02, 19.35it/s]
 49%|     | 39/79 [00:02<00:01, 20.74it/s]
 53%|    | 42/79 [00:02<00:01, 21.95it/s]
 57%|    | 45/79 [00:02<00:01, 22.96it/s]
 61%|    | 48/79 [00:02<00:01, 23.55it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.36it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.43it/s]
 35%|      | 28/79 [00:01<00:03, 13.68it/s]
 39%|      | 31/79 [00:02<00:03, 15.78it/s]
 43%|     | 34/79 [00:02<00:02, 17.50it/s]
 47%|     | 37/79 [00:02<00:02, 19.17it/s]
 51%|     | 40/79 [00:02<00:01, 20.54it/s]
 54%|    | 43/79 [00:02<00:01, 21.52it/s]
 58%|    | 46/79 [00:02<00:01, 22.28it/s]
 62%|   | 49/79 [00:02<00:01, 22.80it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.05it/s]
 28%|       | 22/79 [00:01<00:06,  8.97it/s]
 32%|      | 25/79 [00:01<00:04, 11.12it/s]
 35%|      | 28/79 [00:01<00:03, 13.34it/s]
 39%|      | 31/79 [00:02<00:03, 15.54it/s]
 43%|     | 34/79 [00:02<00:02, 17.50it/s]
 47%|     | 37/79 [00:02<00:02, 19.09it/s]
 51%|     | 40/79 [00:02<00:01, 20.62it/s]
 54%|    | 43/79 [00:02<00:01, 21.79it/s]
 58%|    | 46/79 [00:02<00:01, 22.25it/s]
 62%|   | 49/79 [00:02<00:01, 23.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.22it/s]
 32%|      | 25/79 [00:01<00:04, 11.30it/s]
 35%|      | 28/79 [00:01<00:03, 13.47it/s]
 39%|      | 31/79 [00:02<00:03, 15.56it/s]
 43%|     | 34/79 [00:02<00:02, 17.51it/s]
 47%|     | 37/79 [00:02<00:02, 19.15it/s]
 51%|     | 40/79 [00:02<00:01, 20.36it/s]
 54%|    | 43/79 [00:02<00:01, 21.67it/s]
 58%|    | 46/79 [00:02<00:01, 22.28it/s]
 62%|   | 49/79 [00:02<00:01, 22.97it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.19it/s]
 35%|      | 28/79 [00:01<00:03, 13.38it/s]
 39%|      | 31/79 [00:02<00:03, 15.44it/s]
 43%|     | 34/79 [00:02<00:02, 17.31it/s]
 47%|     | 37/79 [00:02<00:02, 18.88it/s]
 51%|     | 40/79 [00:02<00:01, 20.29it/s]
 54%|    | 43/79 [00:02<00:01, 21.29it/s]
 58%|    | 46/79 [00:02<00:01, 22.10it/s]
 62%|   | 49/79 [00:02<00:01, 22.56it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.95it/s]
 20%|        | 16/79 [00:01<00:11,  5.30it/s]
 24%|       | 19/79 [00:01<00:08,  6.93it/s]
 28%|       | 22/79 [00:01<00:06,  8.85it/s]
 32%|      | 25/79 [00:01<00:04, 11.02it/s]
 35%|      | 28/79 [00:02<00:03, 13.23it/s]
 39%|      | 31/79 [00:02<00:03, 15.43it/s]
 43%|     | 34/79 [00:02<00:02, 17.39it/s]
 47%|     | 37/79 [00:02<00:02, 19.07it/s]
 51%|     | 40/79 [00:02<00:01, 20.67it/s]
 54%|    | 43/79 [00:02<00:01, 21.78it/s]
 58%|    | 46/79 [00:02<00:01, 22.62it/s]
 62%|   | 49/79 [00:02<00:01, 23.58it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.04it/s]
 35%|      | 28/79 [00:02<00:03, 13.21it/s]
 39%|      | 31/79 [00:02<00:03, 15.28it/s]
 43%|     | 34/79 [00:02<00:02, 17.17it/s]
 47%|     | 37/79 [00:02<00:02, 18.99it/s]
 51%|     | 40/79 [00:02<00:01, 20.12it/s]
 54%|    | 43/79 [00:02<00:01, 21.33it/s]
 58%|    | 46/79 [00:02<00:01, 21.79it/s]
 62%|   | 49/79 [00:02<00:01, 22.49it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.84it/s]
 28%|       | 22/79 [00:01<00:06,  8.73it/s]
 32%|      | 25/79 [00:01<00:05, 10.80it/s]
 35%|      | 28/79 [00:02<00:03, 13.07it/s]
 39%|      | 31/79 [00:02<00:03, 15.24it/s]
 43%|     | 34/79 [00:02<00:02, 17.39it/s]
 47%|     | 37/79 [00:02<00:02, 19.06it/s]
 51%|     | 40/79 [00:02<00:01, 20.56it/s]
 54%|    | 43/79 [00:02<00:01, 21.62it/s]
 58%|    | 46/79 [00:02<00:01, 22.56it/s]
 62%|   | 49/79 [00:02<00:01, 23.46it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  4%|         | 3/79 [00:00<00:47,  1.59it/s]
  8%|         | 6/79 [00:01<00:32,  2.21it/s]
 11%|        | 9/79 [00:01<00:23,  3.04it/s]
 15%|        | 12/79 [00:01<00:16,  4.12it/s]
 19%|        | 15/79 [00:01<00:11,  5.50it/s]
 23%|       | 18/79 [00:01<00:08,  7.18it/s]
 27%|       | 21/79 [00:01<00:06,  9.02it/s]
 30%|       | 24/79 [00:01<00:04, 11.04it/s]
 34%|      | 27/79 [00:01<00:03, 13.20it/s]
 38%|      | 30/79 [00:02<00:03, 15.29it/s]
 42%|     | 33/79 [00:02<00:02, 17.18it/s]
 46%|     | 36/79 [00:02<00:02, 18.74it/s]
 49%|     | 39/79 [00:02<00:01, 20.18it/s]
 53%|    | 42/79 [00:02<00:01, 21.21it/s]
 57%|    | 45/79 [00:02<00:01, 21.90it/s]
 61%|    | 48/79 [00:02<00:01, 22.29it/s]
 65%|   | 51/79 [00:02<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.48it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.09it/s]
 32%|      | 25/79 [00:01<00:04, 11.21it/s]
 35%|      | 28/79 [00:02<00:03, 13.31it/s]
 39%|      | 31/79 [00:02<00:03, 15.46it/s]
 43%|     | 34/79 [00:02<00:02, 17.53it/s]
 47%|     | 37/79 [00:02<00:02, 18.74it/s]
 51%|     | 40/79 [00:02<00:01, 20.14it/s]
 54%|    | 43/79 [00:02<00:01, 21.31it/s]
 58%|    | 46/79 [00:02<00:01, 22.25it/s]
 62%|   | 49/79 [00:02<00:01, 22.82it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.02it/s]
 32%|      | 25/79 [00:01<00:04, 11.12it/s]
 35%|      | 28/79 [00:01<00:03, 13.33it/s]
 39%|      | 31/79 [00:02<00:03, 15.46it/s]
 43%|     | 34/79 [00:02<00:02, 17.46it/s]
 47%|     | 37/79 [00:02<00:02, 18.93it/s]
 51%|     | 40/79 [00:02<00:01, 20.28it/s]
 54%|    | 43/79 [00:02<00:01, 21.30it/s]
 58%|    | 46/79 [00:02<00:01, 22.24it/s]
 62%|   | 49/79 [00:02<00:01, 22.77it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.80it/s]
 16%|        | 13/79 [00:01<00:17,  3.82it/s]
 20%|        | 16/79 [00:01<00:12,  5.12it/s]
 24%|       | 19/79 [00:01<00:08,  6.73it/s]
 28%|       | 22/79 [00:01<00:06,  8.63it/s]
 32%|      | 25/79 [00:01<00:05, 10.75it/s]
 35%|      | 28/79 [00:02<00:03, 12.96it/s]
 39%|      | 31/79 [00:02<00:03, 15.15it/s]
 43%|     | 34/79 [00:02<00:02, 17.09it/s]
 47%|     | 37/79 [00:02<00:02, 18.97it/s]
 51%|     | 40/79 [00:02<00:01, 20.20it/s]
 54%|    | 43/79 [00:02<00:01, 21.39it/s]
 58%|    | 46/79 [00:02<00:01, 22.10it/s]
 62%|   | 49/79 [00:02<00:01, 22.89it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.30it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.85it/s]
 32%|      | 25/79 [00:01<00:04, 10.98it/s]
 35%|      | 28/79 [00:02<00:03, 13.22it/s]
 39%|      | 31/79 [00:02<00:03, 15.39it/s]
 43%|     | 34/79 [00:02<00:02, 17.35it/s]
 47%|     | 37/79 [00:02<00:02, 19.02it/s]
 51%|     | 40/79 [00:02<00:01, 20.52it/s]
 54%|    | 43/79 [00:02<00:01, 21.70it/s]
 58%|    | 46/79 [00:02<00:01, 22.42it/s]
 62%|   | 49/79 [00:02<00:01, 23.18it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  4%|         | 3/79 [00:01<00:49,  1.54it/s]
  8%|         | 6/79 [00:01<00:34,  2.14it/s]
 11%|        | 9/79 [00:01<00:23,  2.94it/s]
 15%|        | 12/79 [00:01<00:16,  4.00it/s]
 19%|        | 15/79 [00:01<00:11,  5.34it/s]
 23%|       | 18/79 [00:01<00:08,  6.98it/s]
 27%|       | 21/79 [00:01<00:06,  8.88it/s]
 30%|       | 24/79 [00:01<00:05, 10.94it/s]
 34%|      | 27/79 [00:02<00:04, 12.92it/s]
 38%|      | 30/79 [00:02<00:03, 15.02it/s]
 42%|     | 33/79 [00:02<00:02, 16.96it/s]
 46%|     | 36/79 [00:02<00:02, 18.58it/s]
 49%|     | 39/79 [00:02<00:01, 20.12it/s]
 53%|    | 42/79 [00:02<00:01, 21.31it/s]
 57%|    | 45/79 [00:02<00:01, 22.12it/s]
 61%|    | 48/79 [00:02<00:01, 22.62it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.01it/s]
  5%|         | 4/79 [00:01<00:52,  1.42it/s]
  9%|         | 7/79 [00:01<00:36,  1.98it/s]
 13%|        | 10/79 [00:01<00:25,  2.74it/s]
 16%|        | 13/79 [00:01<00:17,  3.74it/s]
 20%|        | 16/79 [00:01<00:12,  5.01it/s]
 24%|       | 19/79 [00:01<00:09,  6.60it/s]
 28%|       | 22/79 [00:01<00:06,  8.47it/s]
 32%|      | 25/79 [00:01<00:05, 10.60it/s]
 35%|      | 28/79 [00:02<00:03, 12.77it/s]
 39%|      | 31/79 [00:02<00:03, 15.02it/s]
 43%|     | 34/79 [00:02<00:02, 16.91it/s]
 47%|     | 37/79 [00:02<00:02, 18.81it/s]
 51%|     | 40/79 [00:02<00:01, 20.47it/s]
 54%|    | 43/79 [00:02<00:01, 21.78it/s]
 58%|    | 46/79 [00:02<00:01, 22.76it/s]
 62%|   | 49/79 [00:02<00:01, 23.44it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.89it/s]
 20%|        | 16/79 [00:01<00:12,  5.23it/s]
 24%|       | 19/79 [00:01<00:08,  6.82it/s]
 28%|       | 22/79 [00:01<00:06,  8.68it/s]
 32%|      | 25/79 [00:01<00:04, 10.81it/s]
 35%|      | 28/79 [00:02<00:03, 13.02it/s]
 39%|      | 31/79 [00:02<00:03, 15.27it/s]
 43%|     | 34/79 [00:02<00:02, 17.30it/s]
 47%|     | 37/79 [00:02<00:02, 18.91it/s]
 51%|     | 40/79 [00:02<00:01, 20.42it/s]
 54%|    | 43/79 [00:02<00:01, 21.63it/s]
 58%|    | 46/79 [00:02<00:01, 22.08it/s]
 62%|   | 49/79 [00:02<00:01, 22.68it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.82it/s]
 28%|       | 22/79 [00:01<00:06,  8.72it/s]
 32%|      | 25/79 [00:01<00:05, 10.80it/s]
 35%|      | 28/79 [00:02<00:03, 13.00it/s]
 39%|      | 31/79 [00:02<00:03, 14.92it/s]
 43%|     | 34/79 [00:02<00:02, 16.94it/s]
 47%|     | 37/79 [00:02<00:02, 18.80it/s]
 51%|     | 40/79 [00:02<00:01, 19.95it/s]
 54%|    | 43/79 [00:02<00:01, 20.95it/s]
 58%|    | 46/79 [00:02<00:01, 21.93it/s]
 62%|   | 49/79 [00:02<00:01, 22.71it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.80it/s]
 16%|        | 13/79 [00:01<00:17,  3.81it/s]
 20%|        | 16/79 [00:01<00:12,  5.11it/s]
 24%|       | 19/79 [00:01<00:08,  6.71it/s]
 28%|       | 22/79 [00:01<00:06,  8.62it/s]
 32%|      | 25/79 [00:01<00:05, 10.76it/s]
 35%|      | 28/79 [00:02<00:03, 12.95it/s]
 39%|      | 31/79 [00:02<00:03, 15.06it/s]
 43%|     | 34/79 [00:02<00:02, 17.01it/s]
 47%|     | 37/79 [00:02<00:02, 18.81it/s]
 51%|     | 40/79 [00:02<00:01, 20.13it/s]
 54%|    | 43/79 [00:02<00:01, 21.25it/s]
 58%|    | 46/79 [00:02<00:01, 21.78it/s]
 62%|   | 49/79 [00:02<00:01, 22.65it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.82it/s]
 16%|        | 13/79 [00:01<00:17,  3.85it/s]
 20%|        | 16/79 [00:01<00:12,  5.16it/s]
 24%|       | 19/79 [00:01<00:08,  6.75it/s]
 28%|       | 22/79 [00:01<00:06,  8.62it/s]
 32%|      | 25/79 [00:01<00:05, 10.72it/s]
 35%|      | 28/79 [00:02<00:03, 12.93it/s]
 39%|      | 31/79 [00:02<00:03, 15.15it/s]
 43%|     | 34/79 [00:02<00:02, 17.17it/s]
 47%|     | 37/79 [00:02<00:02, 19.05it/s]
 51%|     | 40/79 [00:02<00:01, 20.46it/s]
 54%|    | 43/79 [00:02<00:01, 21.34it/s]
 58%|    | 46/79 [00:02<00:01, 22.24it/s]
 62%|   | 49/79 [00:02<00:01, 22.94it/s]
 66%|   | 52/79 [00:03<00:01, 24.23it/s]
 70%|   | 55/79 [00:02<00:00, 24.29it/s]
 73%|  | 58/79 [00:02<00:00, 24.65it/s]
 77%|  | 61/79 [00:03<00:00, 24.67it/s]
 81%|  | 64/79 [00:03<00:00, 24.47it/s]
 85%| | 67/79 [00:03<00:00, 24.67it/s]
 89%| | 70/79 [00:03<00:00, 24.76it/s]
 92%|| 73/79 [00:03<00:00, 25.15it/s]
 96%|| 76/79 [00:03<00:00, 25.88it/s]
100%|| 79/79 [00:03<00:00, 26.72it/s]
, 23.77it/s]
 70%|   | 55/79 [00:02<00:00, 24.42it/s]
 73%|  | 58/79 [00:03<00:00, 24.68it/s]
 77%|  | 61/79 [00:03<00:00, 24.55it/s]
 81%|  | 64/79 [00:03<00:00, 24.79it/s]
 85%| | 67/79 [00:03<00:00, 24.96it/s]
 89%| | 70/79 [00:03<00:00, 24.96it/s]
 92%|| 73/79 [00:03<00:00, 25.28it/s]
 96%|| 76/79 [00:03<00:00, 25.92it/s]
100%|| 79/79 [00:03<00:00, 26.71it/s]
, 24.50it/s]
 70%|   | 55/79 [00:02<00:00, 24.85it/s]
 73%|  | 58/79 [00:03<00:00, 24.98it/s]
 77%|  | 61/79 [00:03<00:00, 25.33it/s]
 81%|  | 64/79 [00:03<00:00, 25.56it/s]
 85%| | 67/79 [00:03<00:00, 25.41it/s]
 89%| | 70/79 [00:03<00:00, 25.49it/s]
 92%|| 73/79 [00:03<00:00, 25.80it/s]
 96%|| 76/79 [00:03<00:00, 26.34it/s]
100%|| 79/79 [00:03<00:00, 27.12it/s]
, 24.30it/s]
 70%|   | 55/79 [00:03<00:00, 24.64it/s]
 73%|  | 58/79 [00:03<00:00, 24.92it/s]
 77%|  | 61/79 [00:03<00:00, 25.13it/s]
 81%|  | 64/79 [00:03<00:00, 25.17it/s]
 85%| | 67/79 [00:03<00:00, 25.36it/s]
 89%| | 70/79 [00:03<00:00, 24.82it/s]
 92%|| 73/79 [00:03<00:00, 25.23it/s]
 96%|| 76/79 [00:03<00:00, 25.63it/s]
100%|| 79/79 [00:03<00:00, 26.57it/s]
58it/s]
 68%|   | 54/79 [00:02<00:01, 24.00it/s]
 72%|  | 57/79 [00:03<00:00, 24.48it/s]
 76%|  | 60/79 [00:03<00:00, 24.45it/s]
 80%|  | 63/79 [00:03<00:00, 24.84it/s]
 84%| | 66/79 [00:03<00:00, 24.98it/s]
 87%| | 69/79 [00:03<00:00, 25.09it/s]
 91%| | 72/79 [00:03<00:00, 25.16it/s]
 95%|| 75/79 [00:03<00:00, 25.78it/s]
 99%|| 78/79 [00:03<00:00, 26.18it/s]
100%|| 79/79 [00:04<00:00, 19.66it/s]
, 23.17it/s]
 70%|   | 55/79 [00:03<00:01, 23.65it/s]
 73%|  | 58/79 [00:03<00:00, 23.82it/s]
 77%|  | 61/79 [00:03<00:00, 24.31it/s]
 81%|  | 64/79 [00:03<00:00, 24.53it/s]
 85%| | 67/79 [00:03<00:00, 24.51it/s]
 89%| | 70/79 [00:03<00:00, 24.62it/s]
 92%|| 73/79 [00:03<00:00, 25.10it/s]
 96%|| 76/79 [00:03<00:00, 25.84it/s]
100%|| 79/79 [00:03<00:00, 26.70it/s]
, 24.06it/s]
 70%|   | 55/79 [00:03<00:00, 24.40it/s]
 73%|  | 58/79 [00:03<00:00, 24.63it/s]
 77%|  | 61/79 [00:03<00:00, 24.87it/s]
 81%|  | 64/79 [00:03<00:00, 25.15it/s]
 85%| | 67/79 [00:03<00:00, 25.09it/s]
 89%| | 70/79 [00:03<00:00, 25.26it/s]
 92%|| 73/79 [00:03<00:00, 25.53it/s]
 96%|| 76/79 [00:03<00:00, 26.11it/s]
100%|| 79/79 [00:03<00:00, 26.84it/s]
73it/s]
 68%|   | 54/79 [00:02<00:01, 24.06it/s]
 72%|  | 57/79 [00:03<00:00, 24.54it/s]
 76%|  | 60/79 [00:03<00:00, 24.47it/s]
 80%|  | 63/79 [00:03<00:00, 24.74it/s]
 84%| | 66/79 [00:03<00:00, 24.70it/s]
 87%| | 69/79 [00:03<00:00, 24.96it/s]
 91%| | 72/79 [00:03<00:00, 25.07it/s]
 95%|| 75/79 [00:03<00:00, 25.77it/s]
 99%|| 78/79 [00:03<00:00, 26.36it/s]
100%|| 79/79 [00:04<00:00, 19.61it/s]
81it/s]
 68%|   | 54/79 [00:02<00:01, 24.31it/s]
 72%|  | 57/79 [00:03<00:00, 24.30it/s]
 76%|  | 60/79 [00:03<00:00, 24.34it/s]
 80%|  | 63/79 [00:03<00:00, 24.64it/s]
 84%| | 66/79 [00:03<00:00, 24.94it/s]
 87%| | 69/79 [00:03<00:00, 24.75it/s]
 91%| | 72/79 [00:03<00:00, 24.54it/s]
 95%|| 75/79 [00:03<00:00, 25.75it/s]
 99%|| 78/79 [00:03<00:00, 26.09it/s]
100%|| 79/79 [00:04<00:00, 19.61it/s]
, 23.37it/s]
 70%|   | 55/79 [00:03<00:01, 23.80it/s]
 73%|  | 58/79 [00:03<00:00, 24.53it/s]
 77%|  | 61/79 [00:03<00:00, 24.43it/s]
 81%|  | 64/79 [00:03<00:00, 24.59it/s]
 85%| | 67/79 [00:03<00:00, 24.73it/s]
 89%| | 70/79 [00:03<00:00, 24.89it/s]
 92%|| 73/79 [00:03<00:00, 25.24it/s]
 96%|| 76/79 [00:03<00:00, 25.92it/s]
100%|| 79/79 [00:03<00:00, 26.77it/s]
, 23.36it/s]
 70%|   | 55/79 [00:03<00:00, 24.03it/s]
 73%|  | 58/79 [00:03<00:00, 23.92it/s]
 77%|  | 61/79 [00:03<00:00, 24.02it/s]
 81%|  | 64/79 [00:03<00:00, 24.25it/s]
 85%| | 67/79 [00:03<00:00, 24.40it/s]
 89%| | 70/79 [00:03<00:00, 24.49it/s]
 92%|| 73/79 [00:03<00:00, 24.61it/s]
 96%|| 76/79 [00:03<00:00, 25.35it/s]
100%|| 79/79 [00:04<00:00, 26.32it/s]
, 23.63it/s]
 70%|   | 55/79 [00:03<00:01, 23.94it/s]
 73%|  | 58/79 [00:03<00:00, 24.31it/s]
 77%|  | 61/79 [00:03<00:00, 24.10it/s]
 81%|  | 64/79 [00:03<00:00, 24.46it/s]
 85%| | 67/79 [00:03<00:00, 24.51it/s]
 89%| | 70/79 [00:03<00:00, 24.58it/s]
 92%|| 73/79 [00:03<00:00, 25.10it/s]
 96%|| 76/79 [00:03<00:00, 25.83it/s]
100%|| 79/79 [00:04<00:00, 26.65it/s]
, 23.50it/s]
 70%|   | 55/79 [00:03<00:01, 23.65it/s]
 73%|  | 58/79 [00:03<00:00, 23.86it/s]
 77%|  | 61/79 [00:03<00:00, 23.68it/s]
 81%|  | 64/79 [00:03<00:00, 24.03it/s]
 85%| | 67/79 [00:03<00:00, 24.27it/s]
 89%| | 70/79 [00:03<00:00, 24.34it/s]
 92%|| 73/79 [00:03<00:00, 24.85it/s]
 96%|| 76/79 [00:03<00:00, 25.53it/s]
100%|| 79/79 [00:04<00:00, 26.41it/s]
, 23.67it/s]
 70%|   | 55/79 [00:03<00:00, 24.17it/s]
 73%|  | 58/79 [00:03<00:00, 24.33it/s]
 77%|  | 61/79 [00:03<00:00, 24.60it/s]
 81%|  | 64/79 [00:03<00:00, 24.52it/s]
 85%| | 67/79 [00:03<00:00, 24.80it/s]
 89%| | 70/79 [00:03<00:00, 24.89it/s]
 92%|| 73/79 [00:03<00:00, 25.27it/s]
 96%|| 76/79 [00:03<00:00, 25.84it/s]
100%|| 79/79 [00:04<00:00, 26.81it/s]
, 23.42it/s]
 70%|   | 55/79 [00:03<00:00, 24.08it/s]
 73%|  | 58/79 [00:03<00:00, 24.29it/s]
 77%|  | 61/79 [00:03<00:00, 24.51it/s]
 81%|  | 64/79 [00:03<00:00, 24.80it/s]
 85%| | 67/79 [00:03<00:00, 24.98it/s]
 89%| | 70/79 [00:03<00:00, 24.53it/s]
 92%|| 73/79 [00:03<00:00, 24.92it/s]
 96%|| 76/79 [00:03<00:00, 25.61it/s]
100%|| 79/79 [00:04<00:00, 26.37it/s]
, 23.59it/s]
 70%|   | 55/79 [00:03<00:00, 24.11it/s]
 73%|  | 58/79 [00:03<00:00, 24.57it/s]
 77%|  | 61/79 [00:03<00:00, 24.93it/s]
 81%|  | 64/79 [00:03<00:00, 25.06it/s]
 85%| | 67/79 [00:03<00:00, 24.97it/s]
 89%| | 70/79 [00:03<00:00, 25.15it/s]
 92%|| 73/79 [00:03<00:00, 25.29it/s]
 96%|| 76/79 [00:03<00:00, 25.80it/s]
100%|| 79/79 [00:04<00:00, 26.52it/s]
14it/s]
 68%|   | 54/79 [00:03<00:01, 24.21it/s]
 72%|  | 57/79 [00:03<00:00, 24.45it/s]
 76%|  | 60/79 [00:03<00:00, 24.82it/s]
 80%|  | 63/79 [00:03<00:00, 24.52it/s]
 84%| | 66/79 [00:03<00:00, 24.77it/s]
 87%| | 69/79 [00:03<00:00, 24.64it/s]
 91%| | 72/79 [00:03<00:00, 24.97it/s]
 95%|| 75/79 [00:03<00:00, 25.62it/s]
 99%|| 78/79 [00:03<00:00, 26.19it/s]
100%|| 79/79 [00:04<00:00, 19.39it/s]
, 23.27it/s]
 70%|   | 55/79 [00:03<00:01, 23.59it/s]
 73%|  | 58/79 [00:03<00:00, 23.94it/s]
 77%|  | 61/79 [00:03<00:00, 24.04it/s]
 81%|  | 64/79 [00:03<00:00, 24.14it/s]
 85%| | 67/79 [00:03<00:00, 24.16it/s]
 89%| | 70/79 [00:03<00:00, 24.23it/s]
 92%|| 73/79 [00:03<00:00, 24.79it/s]
 96%|| 76/79 [00:03<00:00, 25.44it/s]
100%|| 79/79 [00:04<00:00, 26.26it/s]
, 23.80it/s]
 70%|   | 55/79 [00:03<00:00, 24.39it/s]
 73%|  | 58/79 [00:03<00:00, 24.22it/s]
 77%|  | 61/79 [00:03<00:00, 24.57it/s]
 81%|  | 64/79 [00:03<00:00, 24.38it/s]
 85%| | 67/79 [00:03<00:00, 24.68it/s]
 89%| | 70/79 [00:03<00:00, 24.89it/s]
 92%|| 73/79 [00:03<00:00, 25.10it/s]
 96%|| 76/79 [00:03<00:00, 25.64it/s]
100%|| 79/79 [00:04<00:00, 26.50it/s]
, 23.19it/s]
 70%|   | 55/79 [00:03<00:01, 23.76it/s]
 73%|  | 58/79 [00:03<00:00, 23.82it/s]
 77%|  | 61/79 [00:03<00:00, 24.00it/s]
 81%|  | 64/79 [00:03<00:00, 24.37it/s]
 85%| | 67/79 [00:03<00:00, 24.53it/s]
 89%| | 70/79 [00:03<00:00, 24.55it/s]
 92%|| 73/79 [00:03<00:00, 24.81it/s]
 96%|| 76/79 [00:03<00:00, 25.62it/s]
100%|| 79/79 [00:04<00:00, 26.35it/s]
, 23.48it/s]
 70%|   | 55/79 [00:03<00:01, 24.00it/s]
 73%|  | 58/79 [00:03<00:00, 24.32it/s]
 77%|  | 61/79 [00:03<00:00, 24.64it/s]
 81%|  | 64/79 [00:03<00:00, 24.48it/s]
 85%| | 67/79 [00:03<00:00, 24.61it/s]
 89%| | 70/79 [00:03<00:00, 24.94it/s]
 92%|| 73/79 [00:03<00:00, 25.08it/s]
 96%|| 76/79 [00:03<00:00, 26.19it/s]
100%|| 79/79 [00:04<00:00, 26.60it/s]
, 23.24it/s]
 70%|   | 55/79 [00:03<00:01, 23.26it/s]
 73%|  | 58/79 [00:03<00:00, 23.64it/s]
 77%|  | 61/79 [00:03<00:00, 23.86it/s]
 81%|  | 64/79 [00:03<00:00, 23.95it/s]
 85%| | 67/79 [00:03<00:00, 24.15it/s]
 89%| | 70/79 [00:03<00:00, 24.07it/s]
 92%|| 73/79 [00:03<00:00, 24.63it/s]
 96%|| 76/79 [00:03<00:00, 25.42it/s]
100%|| 79/79 [00:04<00:00, 26.40it/s]
, 23.17it/s]
 70%|   | 55/79 [00:03<00:01, 23.50it/s]
 73%|  | 58/79 [00:03<00:00, 23.76it/s]
 77%|  | 61/79 [00:03<00:00, 24.05it/s]
 81%|  | 64/79 [00:03<00:00, 24.01it/s]
 85%| | 67/79 [00:03<00:00, 24.07it/s]
 89%| | 70/79 [00:03<00:00, 24.30it/s]
 92%|| 73/79 [00:03<00:00, 24.81it/s]
 96%|| 76/79 [00:03<00:00, 25.47it/s]
100%|| 79/79 [00:04<00:00, 26.34it/s]
, 24.15it/s]
 70%|   | 55/79 [00:03<00:00, 24.29it/s]
 73%|  | 58/79 [00:03<00:00, 24.54it/s]
 77%|  | 61/79 [00:03<00:00, 24.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.48it/s]
 85%| | 67/79 [00:03<00:00, 24.60it/s]
 89%| | 70/79 [00:03<00:00, 24.37it/s]
 92%|| 73/79 [00:03<00:00, 24.50it/s]
 96%|| 76/79 [00:03<00:00, 25.23it/s]
100%|| 79/79 [00:04<00:00, 26.06it/s]
, 23.75it/s]
 70%|   | 55/79 [00:03<00:01, 23.81it/s]
 73%|  | 58/79 [00:03<00:00, 24.05it/s]
 77%|  | 61/79 [00:03<00:00, 24.42it/s]
 81%|  | 64/79 [00:03<00:00, 24.66it/s]
 85%| | 67/79 [00:03<00:00, 25.02it/s]
 89%| | 70/79 [00:03<00:00, 25.33it/s]
 92%|| 73/79 [00:03<00:00, 25.52it/s]
 96%|| 76/79 [00:03<00:00, 26.10it/s]
100%|| 79/79 [00:04<00:00, 26.90it/s]
, 23.50it/s]
 70%|   | 55/79 [00:03<00:01, 23.90it/s]
 73%|  | 58/79 [00:03<00:00, 24.18it/s]
 77%|  | 61/79 [00:03<00:00, 24.62it/s]
 81%|  | 64/79 [00:03<00:00, 24.68it/s]
 85%| | 67/79 [00:03<00:00, 24.69it/s]
 89%| | 70/79 [00:03<00:00, 24.26it/s]
 92%|| 73/79 [00:03<00:00, 25.09it/s]
 96%|| 76/79 [00:03<00:00, 25.72it/s]
100%|| 79/79 [00:04<00:00, 26.63it/s]
, 23.39it/s]
 70%|   | 55/79 [00:03<00:00, 24.01it/s]
 73%|  | 58/79 [00:03<00:00, 23.89it/s]
 77%|  | 61/79 [00:03<00:00, 24.21it/s]
 81%|  | 64/79 [00:03<00:00, 24.64it/s]
 85%| | 67/79 [00:03<00:00, 24.25it/s]
 89%| | 70/79 [00:03<00:00, 24.40it/s]
 92%|| 73/79 [00:03<00:00, 25.00it/s]
 96%|| 76/79 [00:03<00:00, 25.78it/s]
100%|| 79/79 [00:04<00:00, 26.62it/s]
, 23.85it/s]
 70%|   | 55/79 [00:03<00:01, 23.97it/s]
 73%|  | 58/79 [00:03<00:00, 24.26it/s]
 77%|  | 61/79 [00:03<00:00, 24.24it/s]
 81%|  | 64/79 [00:03<00:00, 24.33it/s]
 85%| | 67/79 [00:03<00:00, 24.33it/s]
 89%| | 70/79 [00:03<00:00, 24.51it/s]
 92%|| 73/79 [00:03<00:00, 24.64it/s]
 96%|| 76/79 [00:03<00:00, 25.46it/s]
100%|| 79/79 [00:04<00:00, 26.25it/s]
, 22.97it/s]
 70%|   | 55/79 [00:03<00:01, 23.45it/s]
 73%|  | 58/79 [00:03<00:00, 23.69it/s]
 77%|  | 61/79 [00:03<00:00, 23.99it/s]
 81%|  | 64/79 [00:03<00:00, 24.18it/s]
 85%| | 67/79 [00:03<00:00, 24.27it/s]
 89%| | 70/79 [00:03<00:00, 24.22it/s]
 92%|| 73/79 [00:03<00:00, 24.66it/s]
 96%|| 76/79 [00:03<00:00, 25.34it/s]
100%|| 79/79 [00:04<00:00, 26.08it/s]
, 23.18it/s]
 70%|   | 55/79 [00:03<00:01, 23.35it/s]
 73%|  | 58/79 [00:03<00:00, 23.88it/s]
 77%|  | 61/79 [00:03<00:00, 23.95it/s]
 81%|  | 64/79 [00:03<00:00, 24.01it/s]
 85%| | 67/79 [00:03<00:00, 24.16it/s]
 89%| | 70/79 [00:03<00:00, 24.17it/s]
 92%|| 73/79 [00:03<00:00, 24.40it/s]
 96%|| 76/79 [00:04<00:00, 25.19it/s]
100%|| 79/79 [00:04<00:00, 26.03it/s]
01it/s]
 68%|   | 54/79 [00:03<00:01, 23.54it/s]
 72%|  | 57/79 [00:03<00:00, 23.81it/s]
 76%|  | 60/79 [00:03<00:00, 24.05it/s]
 80%|  | 63/79 [00:03<00:00, 24.21it/s]
 84%| | 66/79 [00:03<00:00, 24.40it/s]
 87%| | 69/79 [00:03<00:00, 24.70it/s]
 91%| | 72/79 [00:03<00:00, 24.86it/s]
 95%|| 75/79 [00:03<00:00, 25.56it/s]
 99%|| 78/79 [00:04<00:00, 26.51it/s]
100%|| 79/79 [00:04<00:00, 19.01it/s]
83it/s]
 68%|   | 54/79 [00:03<00:01, 23.13it/s]
 72%|  | 57/79 [00:03<00:00, 23.27it/s]
 76%|  | 60/79 [00:03<00:00, 23.43it/s]
 80%|  | 63/79 [00:03<00:00, 23.69it/s]
 84%| | 66/79 [00:03<00:00, 23.71it/s]
 87%| | 69/79 [00:03<00:00, 23.72it/s]
 91%| | 72/79 [00:03<00:00, 23.78it/s]
 95%|| 75/79 [00:03<00:00, 24.62it/s]
 99%|| 78/79 [00:04<00:00, 25.23it/s]
100%|| 79/79 [00:04<00:00, 18.86it/s]
2020-06-23 15:55:12,235 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.186948 (0.026796469116210937 s / img per device, on 32 devices)
2020-06-23 15:55:12,254 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 15:55:12,254 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 15:55:12,272 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592952918727, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 18, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592952918728, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 18}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 15:55:19,960 maskrcnn_benchmark.trainer INFO: eta: 0:50:59  iter: 15600  loss: 0.6057 (0.6745)  loss_classifier: 0.1803 (0.2386)  loss_box_reg: 0.1037 (0.1097)  loss_mask: 0.2761 (0.2769)  loss_objectness: 0.0109 (0.0308)  loss_rpn_box_reg: 0.0103 (0.0185)  time: 0.1109 (0.1254)  data: 0.0016 (0.0171)  lr: 0.001600  max mem: 5211
2020-06-23 15:55:22,164 maskrcnn_benchmark.trainer INFO: eta: 0:50:56  iter: 15620  loss: 0.4250 (0.6743)  loss_classifier: 0.1450 (0.2386)  loss_box_reg: 0.0667 (0.1097)  loss_mask: 0.2244 (0.2768)  loss_objectness: 0.0086 (0.0308)  loss_rpn_box_reg: 0.0064 (0.0185)  time: 0.1098 (0.1254)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5211
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.51s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 15:55:24,358 maskrcnn_benchmark.trainer INFO: eta: 0:50:53  iter: 15640  loss: 0.6156 (0.6741)  loss_classifier: 0.1978 (0.2385)  loss_box_reg: 0.0932 (0.1097)  loss_mask: 0.2464 (0.2768)  loss_objectness: 0.0122 (0.0307)  loss_rpn_box_reg: 0.0071 (0.0185)  time: 0.1103 (0.1253)  data: 0.0015 (0.0170)  lr: 0.001600  max mem: 5211
DONE (t=1.35s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37806
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.59223
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.41231
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21709
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.40632
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49526
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.31357
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.49314
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51651
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.32770
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.55032
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.65365
2020-06-23 15:55:26,552 maskrcnn_benchmark.trainer INFO: eta: 0:50:50  iter: 15660  loss: 0.5138 (0.6740)  loss_classifier: 0.1655 (0.2384)  loss_box_reg: 0.1015 (0.1097)  loss_mask: 0.2396 (0.2767)  loss_objectness: 0.0134 (0.0307)  loss_rpn_box_reg: 0.0068 (0.0185)  time: 0.1099 (0.1253)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5211
2020-06-23 15:55:28,748 maskrcnn_benchmark.trainer INFO: eta: 0:50:47  iter: 15680  loss: 0.5389 (0.6738)  loss_classifier: 0.1604 (0.2383)  loss_box_reg: 0.0791 (0.1096)  loss_mask: 0.2277 (0.2767)  loss_objectness: 0.0109 (0.0307)  loss_rpn_box_reg: 0.0083 (0.0185)  time: 0.1088 (0.1253)  data: 0.0015 (0.0170)  lr: 0.001600  max mem: 5211
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 15:55:30,949 maskrcnn_benchmark.trainer INFO: eta: 0:50:44  iter: 15700  loss: 0.4401 (0.6735)  loss_classifier: 0.1454 (0.2382)  loss_box_reg: 0.0595 (0.1096)  loss_mask: 0.2170 (0.2766)  loss_objectness: 0.0088 (0.0307)  loss_rpn_box_reg: 0.0046 (0.0185)  time: 0.1099 (0.1253)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5211
DONE (t=1.35s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 15:55:33,140 maskrcnn_benchmark.trainer INFO: eta: 0:50:41  iter: 15720  loss: 0.4914 (0.6733)  loss_classifier: 0.1518 (0.2381)  loss_box_reg: 0.0754 (0.1095)  loss_mask: 0.2377 (0.2765)  loss_objectness: 0.0127 (0.0307)  loss_rpn_box_reg: 0.0076 (0.0184)  time: 0.1093 (0.1253)  data: 0.0015 (0.0169)  lr: 0.001600  max mem: 5211
DONE (t=2.21s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.34342
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.55968
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.36457
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15742
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37003
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.51269
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29472
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.45151
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.47070
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27484
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50683
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62587
2020-06-23 15:55:33,709 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3780557313473833, segm mAP: 0.3434241654851166
:::MLLOG {"namespace": "", "time_ms": 1592952933709, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.3780557313473833, "SEGM": 0.3434241654851166}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 17}}
:::MLLOG {"namespace": "", "time_ms": 1592952933709, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 17}}
2020-06-23 15:55:33,710 maskrcnn_benchmark.trainer INFO: Target mAP reached, exiting...
&&&& MLPERF METRIC THROUGHPUT=1021.8458 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.8180 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.7355 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.7636 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.8204 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.9865 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.7915 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.7311 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.8071 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.8031 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.7775 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.9131 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.8496 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.8500 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.8551 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.8391 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.8240 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.8654 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.7896 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1022.0540 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.7428 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.8792 iterations / s
2020-06-23 15:55:33,865 maskrcnn_benchmark.trainer INFO: Total training time: 0:32:49.709104 (0.0492 s / it)
&&&& MLPERF METRIC THROUGHPUT=1021.8228 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.8267 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.8439 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.8094 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.7783 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.8199 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.8711 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.9466 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.7782 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1021.8800 iterations / s
&&&& MLPERF METRIC TIME= 2008.1532008647919
&&&& MLPERF METRIC TIME= 2008.3949739933014
&&&& MLPERF METRIC TIME= 2008.325044631958
&&&& MLPERF METRIC TIME= 2008.1168076992035
&&&& MLPERF METRIC TIME= 2008.1204874515533
&&&& MLPERF METRIC TIME= 2008.2913081645966
&&&& MLPERF METRIC TIME= 2008.4123117923737
&&&& MLPERF METRIC TIME= 2008.2307357788086
&&&& MLPERF METRIC TIME= 2008.2209367752075
&&&& MLPERF METRIC TIME= 2008.4081449508667
&&&& MLPERF METRIC TIME= 2008.1464278697968
&&&& MLPERF METRIC TIME= 2008.174718618393
&&&& MLPERF METRIC TIME= 2008.4090161323547
&&&& MLPERF METRIC TIME= 2008.132323026657
&&&& MLPERF METRIC TIME= 2008.2975420951843
&&&& MLPERF METRIC TIME= 2008.4037699699402
&&&& MLPERF METRIC TIME= 2008.5050919055939
&&&& MLPERF METRIC TIME= 2008.1888048648834
&&&& MLPERF METRIC TIME= 2008.1950130462646
&&&& MLPERF METRIC TIME= 2008.4911472797394
&&&& MLPERF METRIC TIME= 2008.271223783493
&&&& MLPERF METRIC TIME= 2008.4078042507172
&&&& MLPERF METRIC TIME= 2008.45880651474
&&&& MLPERF METRIC TIME= 2008.48490858078
&&&& MLPERF METRIC TIME= 2008.2398099899292
&&&& MLPERF METRIC TIME= 2008.1789739131927
&&&& MLPERF METRIC TIME= 2008.3177073001862
&&&& MLPERF METRIC TIME= 2008.1918227672577
&&&& MLPERF METRIC TIME= 2008.249930858612
&&&& MLPERF METRIC TIME= 2008.3344521522522
&&&& MLPERF METRIC TIME= 2008.331467628479
:::MLLOG {"namespace": "", "time_ms": 1592952936380, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 360, "status": "success"}}
&&&& MLPERF METRIC TIME= 2008.9618835449219
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
ENDING TIMING RUN AT 2020-06-23 03:55:40 PM
RESULT,OBJECT_DETECTION,,2015,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:40 PM
RESULT,OBJECT_DETECTION,,2015,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:40 PM
RESULT,OBJECT_DETECTION,,2015,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:40 PM
RESULT,OBJECT_DETECTION,,2015,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:40 PM
RESULT,OBJECT_DETECTION,,2015,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:40 PM
RESULT,OBJECT_DETECTION,,2015,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:41 PM
RESULT,OBJECT_DETECTION,,2016,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:42 PM
RESULT,OBJECT_DETECTION,,2017,nvidia,2020-06-23 03:22:05 PM
ENDING TIMING RUN AT 2020-06-23 03:55:42 PM
RESULT,OBJECT_DETECTION,,2017,nvidia,2020-06-23 03:22:05 PM
