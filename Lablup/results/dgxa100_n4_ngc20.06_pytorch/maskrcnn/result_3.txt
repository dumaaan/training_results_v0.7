+ echo 'Beginning trial 5 of 5'
Beginning trial 5 of 5
+ srun --ntasks=4 --container-name=object_detection python -c '
from mlperf_logging.mllog import constants
from maskrcnn_benchmark.utils.mlperf_logger import mlperf_submission_log
mlperf_submission_log(constants.MASKRCNN)'
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
:::MLLOG {"namespace": "", "time_ms": 1592957873212, "event_type": "POINT_IN_TIME", "key": "submission_benchmark", "value": "maskrcnn", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 73}}
:::MLLOG {"namespace": "", "time_ms": 1592957873250, "event_type": "POINT_IN_TIME", "key": "submission_org", "value": "NVIDIA", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 78}}
:::MLLOG {"namespace": "", "time_ms": 1592957873250, "event_type": "POINT_IN_TIME", "key": "submission_division", "value": "closed", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 82}}
:::MLLOG {"namespace": "", "time_ms": 1592957873250, "event_type": "POINT_IN_TIME", "key": "submission_status", "value": "onprem", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 86}}
:::MLLOG {"namespace": "", "time_ms": 1592957873250, "event_type": "POINT_IN_TIME", "key": "submission_platform", "value": "4xNVIDIA DGX A100", "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 90}}
+ '[' 1 -eq 1 ']'
+ srun --ntasks=4 bash -c 'echo -n '\''Clearing cache on '\'' && hostname && sync && sudo /sbin/sysctl vm.drop_caches=3'
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
Clearing cache on luna-0208
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
Clearing cache on luna-0205
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
Clearing cache on luna-0206
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
Clearing cache on luna-0207
vm.drop_caches = 3
vm.drop_caches = 3
vm.drop_caches = 3
vm.drop_caches = 3
+ srun --ntasks=4 --container-name=object_detection python -c '
from mlperf_logging.mllog import constants
from maskrcnn_benchmark.utils.mlperf_logger import log_event
log_event(key=constants.CACHE_CLEAR, value=True, stack_offset=1)'
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
:::MLLOG {"namespace": "", "time_ms": 1592957878177, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
:::MLLOG {"namespace": "", "time_ms": 1592957878184, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
:::MLLOG {"namespace": "", "time_ms": 1592957878194, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
:::MLLOG {"namespace": "", "time_ms": 1592957878310, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/utils/mlperf_logger.py", "lineno": 51}}
+ srun --mpi=none --ntasks=32 --ntasks-per-node=8 --container-name=object_detection --container-mounts=/raid/datasets/coco/coco-2017:/data,/lustre/fsw/mlperf-ci/14126173/results:/results ./run_and_time.sh
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: pyxis: reusing existing container filesystem
slurmstepd: pyxis: starting container ...
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
++ ls /data
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 4 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 5 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ ln -sTf /data/coco2017 /coco
++ ls /data
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 0 ']'
++ ls /data
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
+ '[' 32 -gt 4 ']'
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
running benchmark
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
+ echo 'running benchmark'
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 2 ']'
++ ls /data
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
coco2017
+ echo coco2017
+ declare -a CMD
++ ls /data
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ '[' -n 0 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
+ echo 'running benchmark'
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
++ ls /data
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
+ echo coco2017
+ '[' -n 4 ']'
coco2017
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ declare -a CMD
+ '[' -n 5 ']'
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 7 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 3 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
++ ls /data
+ echo coco2017
coco2017
+ echo coco2017
+ declare -a CMD
+ declare -a CMD
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 7 ']'
+ '[' -n 1 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ '[' -n 1 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
++ ls /data
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 6 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 2 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 3 ']'
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 4 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
coco2017
+ echo coco2017
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
+ declare -a CMD
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ ln -sTf /data/coco2017 /coco
+ '[' -n 7 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
+ echo 'running benchmark'
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
+ echo 'running benchmark'
running benchmark
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 2 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
++ ls /data
++ ls /data
++ ls /data
++ ls /data
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 1 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 5 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 0 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 3 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 6 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
+ declare -a CMD
+ '[' -n 6 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
slurmstepd: task_p_pre_launch: Using sched_affinity for tasks
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ ln -sTf /data/coco2017 /coco
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 1 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ ln -sTf /data/coco2017 /coco
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
++ ls /data
coco2017
+ echo coco2017
+ declare -a CMD
++ ls /data
+ '[' -n 3 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
++ ls /data
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
STARTING TIMING RUN AT 2020-06-23 05:18:00 PM
running benchmark
+ echo 'running benchmark'
+ DATASET_DIR=/data
+ ln -sTf /data/coco2017 /coco
++ ls /data
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 0 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
coco2017
+ echo coco2017
+ declare -a CMD
+ declare -a CMD
+ echo coco2017
+ '[' -n 4 ']'
+ '[' -n 5 ']'
coco2017
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ declare -a CMD
+ '[' -n 2 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ echo coco2017
coco2017
+ declare -a CMD
+ '[' -n 7 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
++ ls /data
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
coco2017
+ echo coco2017
+ declare -a CMD
+ '[' -n 6 ']'
+ '[' 32 -gt 4 ']'
+ CMD=('./bind.sh' '--cpu=exclusive' '--' 'python' '-u')
+ ./bind.sh --cpu=exclusive -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=16-31,144-159 --membind=1 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=32-47,160-175 --membind=2 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=48-63,176-191 --membind=3 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=80-95,208-223 --membind=5 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=0-15,128-143 --membind=0 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=64-79,192-207 --membind=4 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=96-111,224-239 --membind=6 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
+ exec numactl --physcpubind=112-127,240-255 --membind=7 -- python -u tools/train_mlperf.py --config-file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml DTYPE float16 PATHS_CATALOG maskrcnn_benchmark/config/paths_catalog_dbcluster.py MODEL.WEIGHT /coco/models/R-50.pkl DISABLE_REDUCED_LOGGING True SOLVER.BASE_LR 0.16 SOLVER.MAX_ITER 40000 SOLVER.WARMUP_FACTOR 0.000256 SOLVER.WARMUP_ITERS 625 SOLVER.WARMUP_METHOD mlperf_linear SOLVER.STEPS '(9000,12000)' SOLVER.IMS_PER_BATCH 128 TEST.IMS_PER_BATCH 64 MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 4000 NHWC True
:::MLLOG {"namespace": "", "time_ms": 1592957881894, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957881914, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957881924, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957881950, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957881989, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957881992, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882008, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882027, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882036, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882080, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882080, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882124, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882151, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882141, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882154, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882171, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882179, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882180, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882180, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882181, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882185, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882190, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882192, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882191, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882205, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882221, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882221, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882276, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882340, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882368, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882367, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957882370, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 264}}
:::MLLOG {"namespace": "", "time_ms": 1592957890162, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3183226, "metadata": {"file": "tools/train_mlperf.py", "lineno": 318}}
2020-06-23 17:18:10,170 maskrcnn_benchmark INFO: Using 32 GPUs
2020-06-23 17:18:10,170 maskrcnn_benchmark INFO: Namespace(config_file='configs/e2e_mask_rcnn_R_50_FPN_1x.yaml', distributed=True, local_rank=0, opts=['DTYPE', 'float16', 'PATHS_CATALOG', 'maskrcnn_benchmark/config/paths_catalog_dbcluster.py', 'MODEL.WEIGHT', '/coco/models/R-50.pkl', 'DISABLE_REDUCED_LOGGING', 'True', 'SOLVER.BASE_LR', '0.16', 'SOLVER.MAX_ITER', '40000', 'SOLVER.WARMUP_FACTOR', '0.000256', 'SOLVER.WARMUP_ITERS', '625', 'SOLVER.WARMUP_METHOD', 'mlperf_linear', 'SOLVER.STEPS', '(9000,12000)', 'SOLVER.IMS_PER_BATCH', '128', 'TEST.IMS_PER_BATCH', '64', 'MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN', '4000', 'NHWC', 'True'], seed=3183226)
2020-06-23 17:18:10,171 maskrcnn_benchmark INFO: Worker 0: Setting seed 587772181
2020-06-23 17:18:10,171 maskrcnn_benchmark INFO: Collecting env info (might take some time)
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
2020-06-23 17:18:22,353 maskrcnn_benchmark INFO:
PyTorch version: 1.6.0a0+9907a3e
Is debug build: No
CUDA used to build PyTorch: 11.0

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.14.0

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration:
GPU 0: A100-SXM4-40GB
GPU 1: A100-SXM4-40GB
GPU 2: A100-SXM4-40GB
GPU 3: A100-SXM4-40GB
GPU 4: A100-SXM4-40GB
GPU 5: A100-SXM4-40GB
GPU 6: A100-SXM4-40GB
GPU 7: A100-SXM4-40GB

Nvidia driver version: 450.36.06
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_adv_infer.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_adv_train.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_cnn_infer.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_cnn_train.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_ops_infer.so.8.0.1
/usr/lib/x86_64-linux-gnu/libcudnn_ops_train.so.8.0.1

Versions of relevant libraries:
[pip] msgpack-numpy==0.4.3.2
[pip] numpy==1.17.4
[pip] pytorch-transformers==1.1.0
[pip] torch==1.6.0a0+9907a3e
[pip] torchtext==0.6.0
[pip] torchvision==0.7.0a0
[conda] magma-cuda110             2.5.2                         5    local
[conda] mkl                       2019.1                      144
[conda] mkl-include               2019.1                      144
[conda] msgpack-numpy             0.4.3.2                  py36_0
[conda] nomkl                     3.0                           0
[conda] numpy                     1.17.4           py36hd5be1e1_0
[conda] numpy-base                1.17.4           py36h2f8d375_0
[conda] pytorch-transformers      1.1.0                    pypi_0    pypi
[conda] torch                     1.6.0a0+9907a3e          pypi_0    pypi
[conda] torchtext                 0.6.0                    pypi_0    pypi
[conda] torchvision               0.7.0a0                  pypi_0    pypi
        Pillow (7.1.1)
2020-06-23 17:18:22,353 maskrcnn_benchmark INFO: Loaded configuration file configs/e2e_mask_rcnn_R_50_FPN_1x.yaml
2020-06-23 17:18:22,353 maskrcnn_benchmark INFO:
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "catalog://ImageNetPretrained/MSRA/R-50"
  BACKBONE:
    CONV_BODY: "R-50-FPN"
    OUT_CHANNELS: 256
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
  ROI_MASK_HEAD:
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    FEATURE_EXTRACTOR: "MaskRCNNFPNFeatureExtractor"
    PREDICTOR: "MaskRCNNC4Predictor"
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
  MASK_ON: True
DATASETS:
  TRAIN: ("coco_2017_train",)
  TEST: ("coco_2017_val",)
DATALOADER:
  SIZE_DIVISIBILITY: 32
SOLVER:
  BASE_LR: 0.02
  WEIGHT_DECAY: 0.0001
  STEPS: (60000, 80000)
  MAX_ITER: 90000

2020-06-23 17:18:22,353 maskrcnn_benchmark INFO: Running with config:
AMP_VERBOSE: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 4
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('coco_2017_val',)
  TRAIN: ('coco_2017_train',)
DISABLE_REDUCED_LOGGING: True
DTYPE: float16
INPUT:
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (800,)
  PIXEL_MEAN: [102.9801, 115.9465, 122.7717]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MLPERF:
  MIN_BBOX_MAP: 0.377
  MIN_SEGM_MAP: 0.339
MODEL:
  BACKBONE:
    CONV_BODY: R-50-FPN
    FREEZE_CONV_BODY_AT: 2
    OUT_CHANNELS: 256
    USE_GN: False
  CLS_AGNOSTIC_BBOX_REG: False
  DEVICE: cuda
  FPN:
    USE_GN: False
    USE_RELU: False
  GROUP_NORM:
    DIM_PER_GP: -1
    EPSILON: 1e-05
    NUM_GROUPS: 32
  KEYPOINT_ON: False
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    NUM_GROUPS: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 64
  RETINANET:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDES: (8, 16, 32, 64, 128)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BBOX_REG_BETA: 0.11
    BBOX_REG_WEIGHT: 4.0
    BG_IOU_THRESHOLD: 0.4
    FG_IOU_THRESHOLD: 0.5
    INFERENCE_TH: 0.05
    LOSS_ALPHA: 0.25
    LOSS_GAMMA: 2.0
    NMS_TH: 0.4
    NUM_CLASSES: 81
    NUM_CONVS: 4
    OCTAVE: 2.0
    PRE_NMS_TOP_N: 1000
    PRIOR_PROB: 0.01
    SCALES_PER_OCTAVE: 3
    STRADDLE_THRESH: 0
    USE_C5: True
  RETINANET_ON: False
  ROI_BOX_HEAD:
    CONV_HEAD_DIM: 256
    DILATION: 1
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 81
    NUM_STACKED_CONVS: 4
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
    USE_GN: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_KEYPOINT_HEAD:
    CONV_LAYERS: (512, 512, 512, 512, 512, 512, 512, 512)
    FEATURE_EXTRACTOR: KeypointRCNNFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_SCALES: (0.0625,)
    PREDICTOR: KeypointRCNNPredictor
    RESOLUTION: 14
    SHARE_BOX_FEATURE_EXTRACTOR: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    DILATION: 1
    FEATURE_EXTRACTOR: MaskRCNNFPNFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 28
    SHARE_BOX_FEATURE_EXTRACTOR: False
    USE_GN: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 4000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 2000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: /coco/models/R-50.pkl
NHWC: True
OUTPUT_DIR: .
PATHS_CATALOG: maskrcnn_benchmark/config/paths_catalog_dbcluster.py
PER_EPOCH_EVAL: True
SAVE_CHECKPOINTS: False
SOLVER:
  BASE_LR: 0.16
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 2500
  GAMMA: 0.1
  IMS_PER_BATCH: 128
  MAX_ITER: 40000
  MOMENTUM: 0.9
  STEPS: (9000, 12000)
  WARMUP_FACTOR: 0.000256
  WARMUP_ITERS: 625
  WARMUP_METHOD: mlperf_linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  DETECTIONS_PER_IMG: 100
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 64
:::MLLOG {"namespace": "", "time_ms": 1592957902355, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 128, "metadata": {"file": "tools/train_mlperf.py", "lineno": 156}}
:::MLLOG {"namespace": "", "time_ms": 1592957902355, "event_type": "POINT_IN_TIME", "key": "num_image_candidates", "value": 4000, "metadata": {"file": "tools/train_mlperf.py", "lineno": 157}}
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
:::MLLOG {"namespace": "", "time_ms": 1592957906064, "event_type": "POINT_IN_TIME", "key": "opt_name", "value": "sgd_with_momentum", "metadata": {"file": "tools/train_mlperf.py", "lineno": 171}}
:::MLLOG {"namespace": "", "time_ms": 1592957906064, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.16, "metadata": {"file": "tools/train_mlperf.py", "lineno": 172}}
:::MLLOG {"namespace": "", "time_ms": 1592957906064, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 625, "metadata": {"file": "tools/train_mlperf.py", "lineno": 173}}
:::MLLOG {"namespace": "", "time_ms": 1592957906064, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0.000256, "metadata": {"file": "tools/train_mlperf.py", "lineno": 174}}
:::MLLOG {"namespace": "", "time_ms": 1592957906064, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_factor", "value": 0.1, "metadata": {"file": "tools/train_mlperf.py", "lineno": 175}}
:::MLLOG {"namespace": "", "time_ms": 1592957906064, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [9000, 12000], "metadata": {"file": "tools/train_mlperf.py", "lineno": 176}}
:::MLLOG {"namespace": "", "time_ms": 1592957906064, "event_type": "POINT_IN_TIME", "key": "min_image_size", "value": 800, "metadata": {"file": "tools/train_mlperf.py", "lineno": 177}}
:::MLLOG {"namespace": "", "time_ms": 1592957906064, "event_type": "POINT_IN_TIME", "key": "max_image_size", "value": 1333, "metadata": {"file": "tools/train_mlperf.py", "lineno": 178}}
2020-06-23 17:18:26,073 maskrcnn_benchmark.utils.checkpoint INFO: Loading checkpoint from /coco/models/R-50.pkl
2020-06-23 17:18:26,115 maskrcnn_benchmark.utils.c2_model_loading INFO: Remapping C2 weights
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: conv1_b              mapped name: conv1.bias
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: conv1_w              mapped name: conv1.weight
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: fc1000_b             mapped name: fc1000.bias
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: fc1000_w             mapped name: fc1000.weight
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_b     mapped name: layer1.0.downsample.0.bias
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_bn_b  mapped name: layer1.0.downsample.1.bias
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_bn_s  mapped name: layer1.0.downsample.1.weight
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch1_w     mapped name: layer1.0.downsample.0.weight
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_b    mapped name: layer1.0.conv1.bias
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_bn_b mapped name: layer1.0.bn1.bias
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_bn_s mapped name: layer1.0.bn1.weight
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2a_w    mapped name: layer1.0.conv1.weight
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_b    mapped name: layer1.0.conv2.bias
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_bn_b mapped name: layer1.0.bn2.bias
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_bn_s mapped name: layer1.0.bn2.weight
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2b_w    mapped name: layer1.0.conv2.weight
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_b    mapped name: layer1.0.conv3.bias
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_bn_b mapped name: layer1.0.bn3.bias
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_bn_s mapped name: layer1.0.bn3.weight
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_0_branch2c_w    mapped name: layer1.0.conv3.weight
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_b    mapped name: layer1.1.conv1.bias
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_bn_b mapped name: layer1.1.bn1.bias
2020-06-23 17:18:26,116 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_bn_s mapped name: layer1.1.bn1.weight
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2a_w    mapped name: layer1.1.conv1.weight
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_b    mapped name: layer1.1.conv2.bias
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_bn_b mapped name: layer1.1.bn2.bias
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_bn_s mapped name: layer1.1.bn2.weight
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2b_w    mapped name: layer1.1.conv2.weight
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_b    mapped name: layer1.1.conv3.bias
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_bn_b mapped name: layer1.1.bn3.bias
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_bn_s mapped name: layer1.1.bn3.weight
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_1_branch2c_w    mapped name: layer1.1.conv3.weight
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_b    mapped name: layer1.2.conv1.bias
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_bn_b mapped name: layer1.2.bn1.bias
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_bn_s mapped name: layer1.2.bn1.weight
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2a_w    mapped name: layer1.2.conv1.weight
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_b    mapped name: layer1.2.conv2.bias
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_bn_b mapped name: layer1.2.bn2.bias
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_bn_s mapped name: layer1.2.bn2.weight
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2b_w    mapped name: layer1.2.conv2.weight
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_b    mapped name: layer1.2.conv3.bias
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_bn_b mapped name: layer1.2.bn3.bias
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_bn_s mapped name: layer1.2.bn3.weight
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res2_2_branch2c_w    mapped name: layer1.2.conv3.weight
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_b     mapped name: layer2.0.downsample.0.bias
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_bn_b  mapped name: layer2.0.downsample.1.bias
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_bn_s  mapped name: layer2.0.downsample.1.weight
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch1_w     mapped name: layer2.0.downsample.0.weight
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_b    mapped name: layer2.0.conv1.bias
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_bn_b mapped name: layer2.0.bn1.bias
2020-06-23 17:18:26,117 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_bn_s mapped name: layer2.0.bn1.weight
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2a_w    mapped name: layer2.0.conv1.weight
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_b    mapped name: layer2.0.conv2.bias
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_bn_b mapped name: layer2.0.bn2.bias
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_bn_s mapped name: layer2.0.bn2.weight
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2b_w    mapped name: layer2.0.conv2.weight
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_b    mapped name: layer2.0.conv3.bias
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_bn_b mapped name: layer2.0.bn3.bias
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_bn_s mapped name: layer2.0.bn3.weight
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_0_branch2c_w    mapped name: layer2.0.conv3.weight
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_b    mapped name: layer2.1.conv1.bias
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_bn_b mapped name: layer2.1.bn1.bias
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_bn_s mapped name: layer2.1.bn1.weight
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2a_w    mapped name: layer2.1.conv1.weight
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_b    mapped name: layer2.1.conv2.bias
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_bn_b mapped name: layer2.1.bn2.bias
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_bn_s mapped name: layer2.1.bn2.weight
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2b_w    mapped name: layer2.1.conv2.weight
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_b    mapped name: layer2.1.conv3.bias
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_bn_b mapped name: layer2.1.bn3.bias
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_bn_s mapped name: layer2.1.bn3.weight
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_1_branch2c_w    mapped name: layer2.1.conv3.weight
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_b    mapped name: layer2.2.conv1.bias
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_bn_b mapped name: layer2.2.bn1.bias
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_bn_s mapped name: layer2.2.bn1.weight
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2a_w    mapped name: layer2.2.conv1.weight
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_b    mapped name: layer2.2.conv2.bias
2020-06-23 17:18:26,118 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_bn_b mapped name: layer2.2.bn2.bias
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_bn_s mapped name: layer2.2.bn2.weight
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2b_w    mapped name: layer2.2.conv2.weight
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_b    mapped name: layer2.2.conv3.bias
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_bn_b mapped name: layer2.2.bn3.bias
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_bn_s mapped name: layer2.2.bn3.weight
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_2_branch2c_w    mapped name: layer2.2.conv3.weight
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_b    mapped name: layer2.3.conv1.bias
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_bn_b mapped name: layer2.3.bn1.bias
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_bn_s mapped name: layer2.3.bn1.weight
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2a_w    mapped name: layer2.3.conv1.weight
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_b    mapped name: layer2.3.conv2.bias
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_bn_b mapped name: layer2.3.bn2.bias
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_bn_s mapped name: layer2.3.bn2.weight
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2b_w    mapped name: layer2.3.conv2.weight
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_b    mapped name: layer2.3.conv3.bias
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_bn_b mapped name: layer2.3.bn3.bias
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_bn_s mapped name: layer2.3.bn3.weight
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res3_3_branch2c_w    mapped name: layer2.3.conv3.weight
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_b     mapped name: layer3.0.downsample.0.bias
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_bn_b  mapped name: layer3.0.downsample.1.bias
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_bn_s  mapped name: layer3.0.downsample.1.weight
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch1_w     mapped name: layer3.0.downsample.0.weight
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_b    mapped name: layer3.0.conv1.bias
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_bn_b mapped name: layer3.0.bn1.bias
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_bn_s mapped name: layer3.0.bn1.weight
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2a_w    mapped name: layer3.0.conv1.weight
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_b    mapped name: layer3.0.conv2.bias
2020-06-23 17:18:26,119 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_bn_b mapped name: layer3.0.bn2.bias
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_bn_s mapped name: layer3.0.bn2.weight
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2b_w    mapped name: layer3.0.conv2.weight
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_b    mapped name: layer3.0.conv3.bias
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_bn_b mapped name: layer3.0.bn3.bias
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_bn_s mapped name: layer3.0.bn3.weight
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_0_branch2c_w    mapped name: layer3.0.conv3.weight
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_b    mapped name: layer3.1.conv1.bias
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_bn_b mapped name: layer3.1.bn1.bias
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_bn_s mapped name: layer3.1.bn1.weight
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2a_w    mapped name: layer3.1.conv1.weight
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_b    mapped name: layer3.1.conv2.bias
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_bn_b mapped name: layer3.1.bn2.bias
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_bn_s mapped name: layer3.1.bn2.weight
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2b_w    mapped name: layer3.1.conv2.weight
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_b    mapped name: layer3.1.conv3.bias
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_bn_b mapped name: layer3.1.bn3.bias
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_bn_s mapped name: layer3.1.bn3.weight
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_1_branch2c_w    mapped name: layer3.1.conv3.weight
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_b    mapped name: layer3.2.conv1.bias
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_bn_b mapped name: layer3.2.bn1.bias
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_bn_s mapped name: layer3.2.bn1.weight
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2a_w    mapped name: layer3.2.conv1.weight
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_b    mapped name: layer3.2.conv2.bias
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_bn_b mapped name: layer3.2.bn2.bias
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_bn_s mapped name: layer3.2.bn2.weight
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2b_w    mapped name: layer3.2.conv2.weight
2020-06-23 17:18:26,120 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_b    mapped name: layer3.2.conv3.bias
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_bn_b mapped name: layer3.2.bn3.bias
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_bn_s mapped name: layer3.2.bn3.weight
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_2_branch2c_w    mapped name: layer3.2.conv3.weight
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_b    mapped name: layer3.3.conv1.bias
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_bn_b mapped name: layer3.3.bn1.bias
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_bn_s mapped name: layer3.3.bn1.weight
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2a_w    mapped name: layer3.3.conv1.weight
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_b    mapped name: layer3.3.conv2.bias
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_bn_b mapped name: layer3.3.bn2.bias
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_bn_s mapped name: layer3.3.bn2.weight
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2b_w    mapped name: layer3.3.conv2.weight
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_b    mapped name: layer3.3.conv3.bias
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_bn_b mapped name: layer3.3.bn3.bias
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_bn_s mapped name: layer3.3.bn3.weight
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_3_branch2c_w    mapped name: layer3.3.conv3.weight
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_b    mapped name: layer3.4.conv1.bias
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_bn_b mapped name: layer3.4.bn1.bias
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_bn_s mapped name: layer3.4.bn1.weight
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2a_w    mapped name: layer3.4.conv1.weight
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_b    mapped name: layer3.4.conv2.bias
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_bn_b mapped name: layer3.4.bn2.bias
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_bn_s mapped name: layer3.4.bn2.weight
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2b_w    mapped name: layer3.4.conv2.weight
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_b    mapped name: layer3.4.conv3.bias
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_bn_b mapped name: layer3.4.bn3.bias
2020-06-23 17:18:26,121 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_bn_s mapped name: layer3.4.bn3.weight
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_4_branch2c_w    mapped name: layer3.4.conv3.weight
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_b    mapped name: layer3.5.conv1.bias
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_bn_b mapped name: layer3.5.bn1.bias
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_bn_s mapped name: layer3.5.bn1.weight
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2a_w    mapped name: layer3.5.conv1.weight
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_b    mapped name: layer3.5.conv2.bias
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_bn_b mapped name: layer3.5.bn2.bias
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_bn_s mapped name: layer3.5.bn2.weight
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2b_w    mapped name: layer3.5.conv2.weight
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_b    mapped name: layer3.5.conv3.bias
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_bn_b mapped name: layer3.5.bn3.bias
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_bn_s mapped name: layer3.5.bn3.weight
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res4_5_branch2c_w    mapped name: layer3.5.conv3.weight
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_b     mapped name: layer4.0.downsample.0.bias
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_bn_b  mapped name: layer4.0.downsample.1.bias
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_bn_s  mapped name: layer4.0.downsample.1.weight
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch1_w     mapped name: layer4.0.downsample.0.weight
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_b    mapped name: layer4.0.conv1.bias
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_bn_b mapped name: layer4.0.bn1.bias
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_bn_s mapped name: layer4.0.bn1.weight
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2a_w    mapped name: layer4.0.conv1.weight
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_b    mapped name: layer4.0.conv2.bias
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_bn_b mapped name: layer4.0.bn2.bias
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_bn_s mapped name: layer4.0.bn2.weight
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2b_w    mapped name: layer4.0.conv2.weight
2020-06-23 17:18:26,122 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_b    mapped name: layer4.0.conv3.bias
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_bn_b mapped name: layer4.0.bn3.bias
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_bn_s mapped name: layer4.0.bn3.weight
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_0_branch2c_w    mapped name: layer4.0.conv3.weight
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_b    mapped name: layer4.1.conv1.bias
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_bn_b mapped name: layer4.1.bn1.bias
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_bn_s mapped name: layer4.1.bn1.weight
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2a_w    mapped name: layer4.1.conv1.weight
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_b    mapped name: layer4.1.conv2.bias
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_bn_b mapped name: layer4.1.bn2.bias
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_bn_s mapped name: layer4.1.bn2.weight
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2b_w    mapped name: layer4.1.conv2.weight
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_b    mapped name: layer4.1.conv3.bias
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_bn_b mapped name: layer4.1.bn3.bias
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_bn_s mapped name: layer4.1.bn3.weight
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_1_branch2c_w    mapped name: layer4.1.conv3.weight
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_b    mapped name: layer4.2.conv1.bias
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_bn_b mapped name: layer4.2.bn1.bias
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_bn_s mapped name: layer4.2.bn1.weight
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2a_w    mapped name: layer4.2.conv1.weight
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_b    mapped name: layer4.2.conv2.bias
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_bn_b mapped name: layer4.2.bn2.bias
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_bn_s mapped name: layer4.2.bn2.weight
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2b_w    mapped name: layer4.2.conv2.weight
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_b    mapped name: layer4.2.conv3.bias
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_bn_b mapped name: layer4.2.bn3.bias
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_bn_s mapped name: layer4.2.bn3.weight
2020-06-23 17:18:26,123 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res5_2_branch2c_w    mapped name: layer4.2.conv3.weight
2020-06-23 17:18:26,124 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res_conv1_bn_b       mapped name: bn1.bias
2020-06-23 17:18:26,124 maskrcnn_benchmark.utils.c2_model_loading INFO: C2 name: res_conv1_bn_s       mapped name: bn1.weight
2020-06-23 17:18:26,137 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn1.bias                   loaded from layer1.0.bn1.bias            of shape (64,)
2020-06-23 17:18:26,137 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn1.weight                 loaded from layer1.0.bn1.weight          of shape (64,)
2020-06-23 17:18:26,137 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn2.bias                   loaded from layer1.0.bn2.bias            of shape (64,)
2020-06-23 17:18:26,137 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn2.weight                 loaded from layer1.0.bn2.weight          of shape (64,)
2020-06-23 17:18:26,137 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn3.bias                   loaded from layer1.0.bn3.bias            of shape (256,)
2020-06-23 17:18:26,137 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.bn3.weight                 loaded from layer1.0.bn3.weight          of shape (256,)
2020-06-23 17:18:26,137 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.conv1.weight               loaded from layer1.0.conv1.weight        of shape (64, 64, 1, 1)
2020-06-23 17:18:26,137 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.conv2.weight               loaded from layer1.0.conv2.weight        of shape (64, 64, 3, 3)
2020-06-23 17:18:26,137 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.conv3.weight               loaded from layer1.0.conv3.weight        of shape (256, 64, 1, 1)
2020-06-23 17:18:26,137 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.downsample.0.weight        loaded from layer1.0.downsample.0.weight of shape (256, 64, 1, 1)
2020-06-23 17:18:26,137 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.downsample.1.bias          loaded from layer1.0.downsample.1.bias   of shape (256,)
2020-06-23 17:18:26,137 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.0.downsample.1.weight        loaded from layer1.0.downsample.1.weight of shape (256,)
2020-06-23 17:18:26,137 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn1.bias                   loaded from layer1.1.bn1.bias            of shape (64,)
2020-06-23 17:18:26,137 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn1.weight                 loaded from layer1.1.bn1.weight          of shape (64,)
2020-06-23 17:18:26,137 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn2.bias                   loaded from layer1.1.bn2.bias            of shape (64,)
2020-06-23 17:18:26,137 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn2.weight                 loaded from layer1.1.bn2.weight          of shape (64,)
2020-06-23 17:18:26,137 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn3.bias                   loaded from layer1.1.bn3.bias            of shape (256,)
2020-06-23 17:18:26,137 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.bn3.weight                 loaded from layer1.1.bn3.weight          of shape (256,)
2020-06-23 17:18:26,137 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.conv1.weight               loaded from layer1.1.conv1.weight        of shape (64, 256, 1, 1)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.conv2.weight               loaded from layer1.1.conv2.weight        of shape (64, 64, 3, 3)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.1.conv3.weight               loaded from layer1.1.conv3.weight        of shape (256, 64, 1, 1)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn1.bias                   loaded from layer1.2.bn1.bias            of shape (64,)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn1.weight                 loaded from layer1.2.bn1.weight          of shape (64,)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn2.bias                   loaded from layer1.2.bn2.bias            of shape (64,)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn2.weight                 loaded from layer1.2.bn2.weight          of shape (64,)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn3.bias                   loaded from layer1.2.bn3.bias            of shape (256,)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.bn3.weight                 loaded from layer1.2.bn3.weight          of shape (256,)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.conv1.weight               loaded from layer1.2.conv1.weight        of shape (64, 256, 1, 1)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.conv2.weight               loaded from layer1.2.conv2.weight        of shape (64, 64, 3, 3)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer1.2.conv3.weight               loaded from layer1.2.conv3.weight        of shape (256, 64, 1, 1)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn1.bias                   loaded from layer2.0.bn1.bias            of shape (128,)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn1.weight                 loaded from layer2.0.bn1.weight          of shape (128,)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn2.bias                   loaded from layer2.0.bn2.bias            of shape (128,)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn2.weight                 loaded from layer2.0.bn2.weight          of shape (128,)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn3.bias                   loaded from layer2.0.bn3.bias            of shape (512,)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.bn3.weight                 loaded from layer2.0.bn3.weight          of shape (512,)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.conv1.weight               loaded from layer2.0.conv1.weight        of shape (128, 256, 1, 1)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.conv2.weight               loaded from layer2.0.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.conv3.weight               loaded from layer2.0.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 17:18:26,138 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.downsample.0.weight        loaded from layer2.0.downsample.0.weight of shape (512, 256, 1, 1)
2020-06-23 17:18:26,139 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.downsample.1.bias          loaded from layer2.0.downsample.1.bias   of shape (512,)
2020-06-23 17:18:26,139 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.0.downsample.1.weight        loaded from layer2.0.downsample.1.weight of shape (512,)
2020-06-23 17:18:26,139 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn1.bias                   loaded from layer2.1.bn1.bias            of shape (128,)
2020-06-23 17:18:26,139 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn1.weight                 loaded from layer2.1.bn1.weight          of shape (128,)
2020-06-23 17:18:26,139 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn2.bias                   loaded from layer2.1.bn2.bias            of shape (128,)
2020-06-23 17:18:26,139 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn2.weight                 loaded from layer2.1.bn2.weight          of shape (128,)
2020-06-23 17:18:26,139 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn3.bias                   loaded from layer2.1.bn3.bias            of shape (512,)
2020-06-23 17:18:26,139 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.bn3.weight                 loaded from layer2.1.bn3.weight          of shape (512,)
2020-06-23 17:18:26,139 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.conv1.weight               loaded from layer2.1.conv1.weight        of shape (128, 512, 1, 1)
2020-06-23 17:18:26,139 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.conv2.weight               loaded from layer2.1.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 17:18:26,139 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.1.conv3.weight               loaded from layer2.1.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 17:18:26,139 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn1.bias                   loaded from layer2.2.bn1.bias            of shape (128,)
2020-06-23 17:18:26,139 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn1.weight                 loaded from layer2.2.bn1.weight          of shape (128,)
2020-06-23 17:18:26,139 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn2.bias                   loaded from layer2.2.bn2.bias            of shape (128,)
2020-06-23 17:18:26,139 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn2.weight                 loaded from layer2.2.bn2.weight          of shape (128,)
2020-06-23 17:18:26,139 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn3.bias                   loaded from layer2.2.bn3.bias            of shape (512,)
2020-06-23 17:18:26,139 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.bn3.weight                 loaded from layer2.2.bn3.weight          of shape (512,)
2020-06-23 17:18:26,139 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.conv1.weight               loaded from layer2.2.conv1.weight        of shape (128, 512, 1, 1)
2020-06-23 17:18:26,140 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.conv2.weight               loaded from layer2.2.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 17:18:26,140 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.2.conv3.weight               loaded from layer2.2.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 17:18:26,140 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn1.bias                   loaded from layer2.3.bn1.bias            of shape (128,)
2020-06-23 17:18:26,140 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn1.weight                 loaded from layer2.3.bn1.weight          of shape (128,)
2020-06-23 17:18:26,140 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn2.bias                   loaded from layer2.3.bn2.bias            of shape (128,)
2020-06-23 17:18:26,140 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn2.weight                 loaded from layer2.3.bn2.weight          of shape (128,)
2020-06-23 17:18:26,140 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn3.bias                   loaded from layer2.3.bn3.bias            of shape (512,)
2020-06-23 17:18:26,140 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.bn3.weight                 loaded from layer2.3.bn3.weight          of shape (512,)
2020-06-23 17:18:26,140 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.conv1.weight               loaded from layer2.3.conv1.weight        of shape (128, 512, 1, 1)
2020-06-23 17:18:26,140 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.conv2.weight               loaded from layer2.3.conv2.weight        of shape (128, 128, 3, 3)
2020-06-23 17:18:26,140 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer2.3.conv3.weight               loaded from layer2.3.conv3.weight        of shape (512, 128, 1, 1)
2020-06-23 17:18:26,140 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn1.bias                   loaded from layer3.0.bn1.bias            of shape (256,)
2020-06-23 17:18:26,140 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn1.weight                 loaded from layer3.0.bn1.weight          of shape (256,)
2020-06-23 17:18:26,140 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn2.bias                   loaded from layer3.0.bn2.bias            of shape (256,)
2020-06-23 17:18:26,140 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn2.weight                 loaded from layer3.0.bn2.weight          of shape (256,)
2020-06-23 17:18:26,140 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn3.bias                   loaded from layer3.0.bn3.bias            of shape (1024,)
2020-06-23 17:18:26,140 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.bn3.weight                 loaded from layer3.0.bn3.weight          of shape (1024,)
2020-06-23 17:18:26,140 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.conv1.weight               loaded from layer3.0.conv1.weight        of shape (256, 512, 1, 1)
2020-06-23 17:18:26,141 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.conv2.weight               loaded from layer3.0.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 17:18:26,141 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.conv3.weight               loaded from layer3.0.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 17:18:26,141 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.downsample.0.weight        loaded from layer3.0.downsample.0.weight of shape (1024, 512, 1, 1)
2020-06-23 17:18:26,141 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.downsample.1.bias          loaded from layer3.0.downsample.1.bias   of shape (1024,)
2020-06-23 17:18:26,141 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.0.downsample.1.weight        loaded from layer3.0.downsample.1.weight of shape (1024,)
2020-06-23 17:18:26,141 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn1.bias                   loaded from layer3.1.bn1.bias            of shape (256,)
2020-06-23 17:18:26,141 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn1.weight                 loaded from layer3.1.bn1.weight          of shape (256,)
2020-06-23 17:18:26,141 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn2.bias                   loaded from layer3.1.bn2.bias            of shape (256,)
2020-06-23 17:18:26,141 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn2.weight                 loaded from layer3.1.bn2.weight          of shape (256,)
2020-06-23 17:18:26,141 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn3.bias                   loaded from layer3.1.bn3.bias            of shape (1024,)
2020-06-23 17:18:26,141 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.bn3.weight                 loaded from layer3.1.bn3.weight          of shape (1024,)
2020-06-23 17:18:26,141 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.conv1.weight               loaded from layer3.1.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 17:18:26,142 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.conv2.weight               loaded from layer3.1.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 17:18:26,142 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.1.conv3.weight               loaded from layer3.1.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 17:18:26,142 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn1.bias                   loaded from layer3.2.bn1.bias            of shape (256,)
2020-06-23 17:18:26,142 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn1.weight                 loaded from layer3.2.bn1.weight          of shape (256,)
2020-06-23 17:18:26,142 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn2.bias                   loaded from layer3.2.bn2.bias            of shape (256,)
2020-06-23 17:18:26,142 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn2.weight                 loaded from layer3.2.bn2.weight          of shape (256,)
2020-06-23 17:18:26,142 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn3.bias                   loaded from layer3.2.bn3.bias            of shape (1024,)
2020-06-23 17:18:26,142 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.bn3.weight                 loaded from layer3.2.bn3.weight          of shape (1024,)
2020-06-23 17:18:26,142 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.conv1.weight               loaded from layer3.2.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 17:18:26,143 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.conv2.weight               loaded from layer3.2.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 17:18:26,143 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.2.conv3.weight               loaded from layer3.2.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 17:18:26,143 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn1.bias                   loaded from layer3.3.bn1.bias            of shape (256,)
2020-06-23 17:18:26,143 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn1.weight                 loaded from layer3.3.bn1.weight          of shape (256,)
2020-06-23 17:18:26,143 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn2.bias                   loaded from layer3.3.bn2.bias            of shape (256,)
2020-06-23 17:18:26,143 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn2.weight                 loaded from layer3.3.bn2.weight          of shape (256,)
2020-06-23 17:18:26,143 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn3.bias                   loaded from layer3.3.bn3.bias            of shape (1024,)
2020-06-23 17:18:26,143 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.bn3.weight                 loaded from layer3.3.bn3.weight          of shape (1024,)
2020-06-23 17:18:26,143 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.conv1.weight               loaded from layer3.3.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 17:18:26,143 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.conv2.weight               loaded from layer3.3.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 17:18:26,143 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.3.conv3.weight               loaded from layer3.3.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 17:18:26,143 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn1.bias                   loaded from layer3.4.bn1.bias            of shape (256,)
2020-06-23 17:18:26,143 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn1.weight                 loaded from layer3.4.bn1.weight          of shape (256,)
2020-06-23 17:18:26,144 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn2.bias                   loaded from layer3.4.bn2.bias            of shape (256,)
2020-06-23 17:18:26,144 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn2.weight                 loaded from layer3.4.bn2.weight          of shape (256,)
2020-06-23 17:18:26,144 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn3.bias                   loaded from layer3.4.bn3.bias            of shape (1024,)
2020-06-23 17:18:26,144 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.bn3.weight                 loaded from layer3.4.bn3.weight          of shape (1024,)
2020-06-23 17:18:26,144 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.conv1.weight               loaded from layer3.4.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 17:18:26,144 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.conv2.weight               loaded from layer3.4.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 17:18:26,144 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.4.conv3.weight               loaded from layer3.4.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 17:18:26,144 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn1.bias                   loaded from layer3.5.bn1.bias            of shape (256,)
2020-06-23 17:18:26,144 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn1.weight                 loaded from layer3.5.bn1.weight          of shape (256,)
2020-06-23 17:18:26,144 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn2.bias                   loaded from layer3.5.bn2.bias            of shape (256,)
2020-06-23 17:18:26,144 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn2.weight                 loaded from layer3.5.bn2.weight          of shape (256,)
2020-06-23 17:18:26,144 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn3.bias                   loaded from layer3.5.bn3.bias            of shape (1024,)
2020-06-23 17:18:26,144 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.bn3.weight                 loaded from layer3.5.bn3.weight          of shape (1024,)
2020-06-23 17:18:26,144 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.conv1.weight               loaded from layer3.5.conv1.weight        of shape (256, 1024, 1, 1)
2020-06-23 17:18:26,145 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.conv2.weight               loaded from layer3.5.conv2.weight        of shape (256, 256, 3, 3)
2020-06-23 17:18:26,145 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer3.5.conv3.weight               loaded from layer3.5.conv3.weight        of shape (1024, 256, 1, 1)
2020-06-23 17:18:26,145 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn1.bias                   loaded from layer4.0.bn1.bias            of shape (512,)
2020-06-23 17:18:26,145 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn1.weight                 loaded from layer4.0.bn1.weight          of shape (512,)
2020-06-23 17:18:26,145 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn2.bias                   loaded from layer4.0.bn2.bias            of shape (512,)
2020-06-23 17:18:26,145 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn2.weight                 loaded from layer4.0.bn2.weight          of shape (512,)
2020-06-23 17:18:26,145 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn3.bias                   loaded from layer4.0.bn3.bias            of shape (2048,)
2020-06-23 17:18:26,145 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.bn3.weight                 loaded from layer4.0.bn3.weight          of shape (2048,)
2020-06-23 17:18:26,145 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.conv1.weight               loaded from layer4.0.conv1.weight        of shape (512, 1024, 1, 1)
2020-06-23 17:18:26,147 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.conv2.weight               loaded from layer4.0.conv2.weight        of shape (512, 512, 3, 3)
2020-06-23 17:18:26,147 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.conv3.weight               loaded from layer4.0.conv3.weight        of shape (2048, 512, 1, 1)
2020-06-23 17:18:26,147 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.downsample.0.weight        loaded from layer4.0.downsample.0.weight of shape (2048, 1024, 1, 1)
2020-06-23 17:18:26,147 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.downsample.1.bias          loaded from layer4.0.downsample.1.bias   of shape (2048,)
2020-06-23 17:18:26,147 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.0.downsample.1.weight        loaded from layer4.0.downsample.1.weight of shape (2048,)
2020-06-23 17:18:26,147 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn1.bias                   loaded from layer4.1.bn1.bias            of shape (512,)
2020-06-23 17:18:26,148 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn1.weight                 loaded from layer4.1.bn1.weight          of shape (512,)
2020-06-23 17:18:26,148 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn2.bias                   loaded from layer4.1.bn2.bias            of shape (512,)
2020-06-23 17:18:26,148 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn2.weight                 loaded from layer4.1.bn2.weight          of shape (512,)
2020-06-23 17:18:26,148 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn3.bias                   loaded from layer4.1.bn3.bias            of shape (2048,)
2020-06-23 17:18:26,148 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.bn3.weight                 loaded from layer4.1.bn3.weight          of shape (2048,)
2020-06-23 17:18:26,148 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.conv1.weight               loaded from layer4.1.conv1.weight        of shape (512, 2048, 1, 1)
2020-06-23 17:18:26,151 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.conv2.weight               loaded from layer4.1.conv2.weight        of shape (512, 512, 3, 3)
2020-06-23 17:18:26,151 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.1.conv3.weight               loaded from layer4.1.conv3.weight        of shape (2048, 512, 1, 1)
2020-06-23 17:18:26,151 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn1.bias                   loaded from layer4.2.bn1.bias            of shape (512,)
2020-06-23 17:18:26,151 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn1.weight                 loaded from layer4.2.bn1.weight          of shape (512,)
2020-06-23 17:18:26,151 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn2.bias                   loaded from layer4.2.bn2.bias            of shape (512,)
2020-06-23 17:18:26,151 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn2.weight                 loaded from layer4.2.bn2.weight          of shape (512,)
2020-06-23 17:18:26,151 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn3.bias                   loaded from layer4.2.bn3.bias            of shape (2048,)
2020-06-23 17:18:26,151 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.bn3.weight                 loaded from layer4.2.bn3.weight          of shape (2048,)
2020-06-23 17:18:26,152 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.conv1.weight               loaded from layer4.2.conv1.weight        of shape (512, 2048, 1, 1)
2020-06-23 17:18:26,155 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.conv2.weight               loaded from layer4.2.conv2.weight        of shape (512, 512, 3, 3)
2020-06-23 17:18:26,155 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.layer4.2.conv3.weight               loaded from layer4.2.conv3.weight        of shape (2048, 512, 1, 1)
2020-06-23 17:18:26,155 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.stem.bn1.bias                       loaded from bn1.bias                     of shape (64,)
2020-06-23 17:18:26,155 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.stem.bn1.weight                     loaded from bn1.weight                   of shape (64,)
2020-06-23 17:18:26,155 maskrcnn_benchmark.utils.model_serialization INFO: module.backbone.body.stem.conv1.weight                   loaded from conv1.weight                 of shape (64, 3, 7, 7)
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/jit/_recursive.py:160: UserWarning: 'downsample' was found in ScriptModule constants,  but it is a non-constant submodule. Consider removing it.
  " but it is a non-constant {}. Consider removing it.".format(name, hint))
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
/opt/conda/lib/python3.6/site-packages/torch/nn/modules/conv.py:1009: UserWarning: _ConvTransposeMixin is a deprecated internal class. Please consider using public APIs.
  "_ConvTransposeMixin is a deprecated internal class. "
:::MLLOG {"namespace": "", "time_ms": 1592957908634, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 205}}
:::MLLOG {"namespace": "", "time_ms": 1592957908697, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 207}}
2020-06-23 17:18:28,697 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
Done (t=6.83s)
creating index...
Done (t=6.84s)
creating index...
Done (t=6.87s)
creating index...
Done (t=6.86s)
creating index...
Done (t=6.90s)
creating index...
Done (t=7.01s)
creating index...
Done (t=7.00s)
creating index...
Done (t=7.01s)
creating index...
Done (t=7.04s)
creating index...
Done (t=7.05s)
creating index...
Done (t=7.07s)
creating index...
Done (t=7.07s)
creating index...
Done (t=7.08s)
creating index...
Done (t=7.10s)
creating index...
Done (t=7.09s)
creating index...
Done (t=7.10s)
creating index...
Done (t=7.09s)
creating index...
Done (t=7.12s)
creating index...
Done (t=7.14s)
creating index...
Done (t=7.15s)
creating index...
Done (t=7.16s)
creating index...
Done (t=7.22s)
creating index...
Done (t=7.29s)
creating index...
Done (t=7.32s)
creating index...
Done (t=7.34s)
creating index...
Done (t=7.34s)
creating index...
Done (t=7.34s)
creating index...
index created!
index created!
index created!
Done (t=7.39s)
creating index...
index created!
index created!
Done (t=7.41s)
creating index...
Done (t=7.43s)
creating index...
Done (t=7.44s)
creating index...
Done (t=7.51s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
:::MLLOG {"namespace": "", "time_ms": 1592957918309, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 40000, "metadata": {"file": "tools/train_mlperf.py", "lineno": 217}}
2020-06-23 17:18:38,309 maskrcnn_benchmark.trainer INFO: Start training
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/structures/bounding_box.py:223: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  item = torch.nonzero(item).squeeze(1)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
:::MLLOG {"namespace": "", "time_ms": 1592957919443, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 130, "first_epoch_num": 1, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592957919444, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 131, "epoch_num": 1}}
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/opt/conda/lib/python3.6/site-packages/torch/optim/lr_scheduler.py:123: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)
/workspace/object_detection/maskrcnn_benchmark/modeling/poolers.py:126: UserWarning: This overload of nonzero is deprecated:
	nonzero(Tensor input, *, Tensor out)
Consider using one of the following signatures instead:
	nonzero(Tensor input, *, bool as_tuple) (Triggered internally at  ../torch/csrc/utils/python_arg_parser.cpp:760.)
  idx_in_level = torch.nonzero(levels == level).squeeze(1)


Grad overflow on iteration  0

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536
Using dynamic loss scale of  65536



Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536


Grad overflow on iteration  0
Using dynamic loss scale of  65536
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536
Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536

Grad overflow on iteration  0
Using dynamic loss scale of  65536


Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1

Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0



Grad overflow on iteration  1

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0


Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0


Grad overflow on iteration  1
Using dynamic loss scale of  32768.0


Grad overflow on iteration  1
Grad overflow on iteration  1

Grad overflow on iteration  1
Grad overflow on iteration  1
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1

Grad overflow on iteration  1

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  1

Using dynamic loss scale of  32768.0
Grad overflow on iteration  1
Using dynamic loss scale of  32768.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2


Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0


Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2

Grad overflow on iteration  2

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0


Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Grad overflow on iteration  2
Using dynamic loss scale of  16384.0


Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Grad overflow on iteration  2

Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Using dynamic loss scale of  16384.0

Grad overflow on iteration  2
Grad overflow on iteration  2


Grad overflow on iteration  2
Using dynamic loss scale of  16384.0
Grad overflow on iteration  2

Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0
Using dynamic loss scale of  16384.0
Grad overflow on iteration  2
Using dynamic loss scale of  16384.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0



Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Grad overflow on iteration  3

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  3
Using dynamic loss scale of  8192.0

Grad overflow on iteration  4

Grad overflow on iteration  4

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0


Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Grad overflow on iteration  4

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0


Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0
Grad overflow on iteration  4

Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Grad overflow on iteration  4

Grad overflow on iteration  4

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0


Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Grad overflow on iteration  4

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  4
Using dynamic loss scale of  4096.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0


Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Grad overflow on iteration  5
Using dynamic loss scale of  2048.0


Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Grad overflow on iteration  5
Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5


Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Grad overflow on iteration  5



Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Grad overflow on iteration  5
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0

Grad overflow on iteration  5
Using dynamic loss scale of  2048.0


Grad overflow on iteration  6

Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0



Grad overflow on iteration  6
Using dynamic loss scale of  1024.0


Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Grad overflow on iteration  6

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0
Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0


Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Grad overflow on iteration  6

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0


Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0


Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Grad overflow on iteration  6

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
Using dynamic loss scale of  1024.0

Grad overflow on iteration  6
Using dynamic loss scale of  1024.0
2020-06-23 17:18:45,583 maskrcnn_benchmark.trainer INFO: eta: 4:02:17  iter: 20  loss: 2.2962 (3.7494)  loss_classifier: 1.2664 (2.1608)  loss_box_reg: 0.0126 (0.0214)  loss_mask: 0.8614 (1.0638)  loss_objectness: 0.5386 (0.4775)  loss_rpn_box_reg: 0.0143 (0.0260)  time: 0.1036 (0.3636)  data: 0.0013 (0.0580)  lr: 0.005120  max mem: 4237
2020-06-23 17:18:47,659 maskrcnn_benchmark.trainer INFO: eta: 2:35:39  iter: 40  loss: 1.3294 (2.5476)  loss_classifier: 0.3387 (1.2793)  loss_box_reg: 0.0813 (0.0560)  loss_mask: 0.6929 (0.8769)  loss_objectness: 0.1123 (0.3131)  loss_rpn_box_reg: 0.0155 (0.0222)  time: 0.1032 (0.2337)  data: 0.0013 (0.0297)  lr: 0.010240  max mem: 4305
2020-06-23 17:18:49,718 maskrcnn_benchmark.trainer INFO: eta: 2:06:33  iter: 60  loss: 1.3021 (2.1506)  loss_classifier: 0.3634 (0.9761)  loss_box_reg: 0.0819 (0.0702)  loss_mask: 0.6751 (0.8084)  loss_objectness: 0.1319 (0.2671)  loss_rpn_box_reg: 0.0163 (0.0287)  time: 0.1032 (0.1901)  data: 0.0014 (0.0203)  lr: 0.015360  max mem: 4312
2020-06-23 17:18:51,792 maskrcnn_benchmark.trainer INFO: eta: 1:52:06  iter: 80  loss: 1.3075 (1.9484)  loss_classifier: 0.3891 (0.8296)  loss_box_reg: 0.0998 (0.0772)  loss_mask: 0.6616 (0.7718)  loss_objectness: 0.1297 (0.2378)  loss_rpn_box_reg: 0.0168 (0.0321)  time: 0.1028 (0.1685)  data: 0.0015 (0.0156)  lr: 0.020480  max mem: 4406
2020-06-23 17:18:53,831 maskrcnn_benchmark.trainer INFO: eta: 1:43:12  iter: 100  loss: 1.2247 (1.8153)  loss_classifier: 0.3258 (0.7401)  loss_box_reg: 0.1035 (0.0851)  loss_mask: 0.6393 (0.7462)  loss_objectness: 0.0869 (0.2114)  loss_rpn_box_reg: 0.0235 (0.0325)  time: 0.1012 (0.1552)  data: 0.0014 (0.0127)  lr: 0.025600  max mem: 4406
2020-06-23 17:18:55,911 maskrcnn_benchmark.trainer INFO: eta: 1:37:28  iter: 120  loss: 1.3667 (1.7499)  loss_classifier: 0.4769 (0.7003)  loss_box_reg: 0.1613 (0.0996)  loss_mask: 0.6255 (0.7262)  loss_objectness: 0.0727 (0.1916)  loss_rpn_box_reg: 0.0191 (0.0322)  time: 0.1042 (0.1467)  data: 0.0014 (0.0109)  lr: 0.030720  max mem: 4483
2020-06-23 17:18:58,017 maskrcnn_benchmark.trainer INFO: eta: 1:33:30  iter: 140  loss: 1.3783 (1.7114)  loss_classifier: 0.4989 (0.6834)  loss_box_reg: 0.1786 (0.1148)  loss_mask: 0.5926 (0.7069)  loss_objectness: 0.0583 (0.1749)  loss_rpn_box_reg: 0.0169 (0.0314)  time: 0.1049 (0.1408)  data: 0.0014 (0.0096)  lr: 0.035840  max mem: 4520
2020-06-23 17:19:00,115 maskrcnn_benchmark.trainer INFO: eta: 1:30:29  iter: 160  loss: 1.4903 (1.6826)  loss_classifier: 0.6148 (0.6691)  loss_box_reg: 0.2074 (0.1286)  loss_mask: 0.5385 (0.6868)  loss_objectness: 0.0642 (0.1666)  loss_rpn_box_reg: 0.0203 (0.0314)  time: 0.1049 (0.1363)  data: 0.0015 (0.0085)  lr: 0.040960  max mem: 4806
2020-06-23 17:19:02,206 maskrcnn_benchmark.trainer INFO: eta: 1:28:06  iter: 180  loss: 1.3098 (1.6380)  loss_classifier: 0.4828 (0.6495)  loss_box_reg: 0.1949 (0.1359)  loss_mask: 0.5271 (0.6680)  loss_objectness: 0.0525 (0.1545)  loss_rpn_box_reg: 0.0117 (0.0301)  time: 0.1039 (0.1327)  data: 0.0013 (0.0078)  lr: 0.046080  max mem: 4806
2020-06-23 17:19:04,302 maskrcnn_benchmark.trainer INFO: eta: 1:26:12  iter: 200  loss: 1.3441 (1.6093)  loss_classifier: 0.5222 (0.6402)  loss_box_reg: 0.1974 (0.1443)  loss_mask: 0.5056 (0.6508)  loss_objectness: 0.0471 (0.1445)  loss_rpn_box_reg: 0.0121 (0.0296)  time: 0.1040 (0.1300)  data: 0.0014 (0.0071)  lr: 0.051200  max mem: 4806
2020-06-23 17:19:06,406 maskrcnn_benchmark.trainer INFO: eta: 1:24:40  iter: 220  loss: 1.4407 (1.5933)  loss_classifier: 0.5882 (0.6382)  loss_box_reg: 0.2157 (0.1526)  loss_mask: 0.4914 (0.6360)  loss_objectness: 0.0541 (0.1370)  loss_rpn_box_reg: 0.0147 (0.0294)  time: 0.1045 (0.1277)  data: 0.0014 (0.0066)  lr: 0.056320  max mem: 4806
2020-06-23 17:19:08,543 maskrcnn_benchmark.trainer INFO: eta: 1:23:28  iter: 240  loss: 1.3478 (1.5747)  loss_classifier: 0.5904 (0.6326)  loss_box_reg: 0.2348 (0.1596)  loss_mask: 0.4603 (0.6221)  loss_objectness: 0.0500 (0.1311)  loss_rpn_box_reg: 0.0152 (0.0293)  time: 0.1060 (0.1260)  data: 0.0014 (0.0062)  lr: 0.061440  max mem: 4806
2020-06-23 17:19:10,674 maskrcnn_benchmark.trainer INFO: eta: 1:22:26  iter: 260  loss: 1.3870 (1.5545)  loss_classifier: 0.5107 (0.6235)  loss_box_reg: 0.1998 (0.1631)  loss_mask: 0.4985 (0.6126)  loss_objectness: 0.0501 (0.1261)  loss_rpn_box_reg: 0.0159 (0.0293)  time: 0.1060 (0.1245)  data: 0.0015 (0.0058)  lr: 0.066560  max mem: 4806
2020-06-23 17:19:12,791 maskrcnn_benchmark.trainer INFO: eta: 1:21:31  iter: 280  loss: 1.3122 (1.5340)  loss_classifier: 0.5221 (0.6178)  loss_box_reg: 0.2074 (0.1659)  loss_mask: 0.4504 (0.6013)  loss_objectness: 0.0376 (0.1207)  loss_rpn_box_reg: 0.0133 (0.0283)  time: 0.1055 (0.1231)  data: 0.0013 (0.0055)  lr: 0.071680  max mem: 4806
2020-06-23 17:19:14,892 maskrcnn_benchmark.trainer INFO: eta: 1:20:40  iter: 300  loss: 1.2188 (1.5154)  loss_classifier: 0.4923 (0.6108)  loss_box_reg: 0.1906 (0.1680)  loss_mask: 0.4417 (0.5908)  loss_objectness: 0.0519 (0.1172)  loss_rpn_box_reg: 0.0175 (0.0285)  time: 0.1051 (0.1219)  data: 0.0014 (0.0052)  lr: 0.076800  max mem: 4806
2020-06-23 17:19:16,999 maskrcnn_benchmark.trainer INFO: eta: 1:19:57  iter: 320  loss: 1.1340 (1.4956)  loss_classifier: 0.4763 (0.6032)  loss_box_reg: 0.1771 (0.1697)  loss_mask: 0.4284 (0.5810)  loss_objectness: 0.0526 (0.1135)  loss_rpn_box_reg: 0.0117 (0.0282)  time: 0.1054 (0.1209)  data: 0.0015 (0.0050)  lr: 0.081920  max mem: 5047
2020-06-23 17:19:19,108 maskrcnn_benchmark.trainer INFO: eta: 1:19:18  iter: 340  loss: 1.1436 (1.4754)  loss_classifier: 0.4248 (0.5939)  loss_box_reg: 0.2064 (0.1710)  loss_mask: 0.4404 (0.5723)  loss_objectness: 0.0504 (0.1100)  loss_rpn_box_reg: 0.0140 (0.0281)  time: 0.1051 (0.1200)  data: 0.0014 (0.0048)  lr: 0.087040  max mem: 5047
2020-06-23 17:19:21,206 maskrcnn_benchmark.trainer INFO: eta: 1:18:43  iter: 360  loss: 1.1252 (1.4550)  loss_classifier: 0.3624 (0.5845)  loss_box_reg: 0.1761 (0.1711)  loss_mask: 0.3869 (0.5624)  loss_objectness: 0.0405 (0.1076)  loss_rpn_box_reg: 0.0131 (0.0294)  time: 0.1034 (0.1192)  data: 0.0014 (0.0046)  lr: 0.092160  max mem: 5047
2020-06-23 17:19:23,309 maskrcnn_benchmark.trainer INFO: eta: 1:18:11  iter: 380  loss: 1.0498 (1.4357)  loss_classifier: 0.3933 (0.5758)  loss_box_reg: 0.1746 (0.1710)  loss_mask: 0.4129 (0.5551)  loss_objectness: 0.0389 (0.1046)  loss_rpn_box_reg: 0.0139 (0.0293)  time: 0.1050 (0.1184)  data: 0.0014 (0.0044)  lr: 0.097280  max mem: 5047
2020-06-23 17:19:25,414 maskrcnn_benchmark.trainer INFO: eta: 1:17:43  iter: 400  loss: 1.0947 (1.4184)  loss_classifier: 0.4397 (0.5685)  loss_box_reg: 0.1838 (0.1705)  loss_mask: 0.4172 (0.5481)  loss_objectness: 0.0448 (0.1021)  loss_rpn_box_reg: 0.0107 (0.0291)  time: 0.1048 (0.1178)  data: 0.0014 (0.0043)  lr: 0.102400  max mem: 5047
2020-06-23 17:19:27,534 maskrcnn_benchmark.trainer INFO: eta: 1:17:18  iter: 420  loss: 1.0827 (1.4022)  loss_classifier: 0.4326 (0.5619)  loss_box_reg: 0.1741 (0.1707)  loss_mask: 0.4101 (0.5414)  loss_objectness: 0.0349 (0.0996)  loss_rpn_box_reg: 0.0104 (0.0285)  time: 0.1054 (0.1172)  data: 0.0014 (0.0041)  lr: 0.107520  max mem: 5047
2020-06-23 17:19:29,660 maskrcnn_benchmark.trainer INFO: eta: 1:16:56  iter: 440  loss: 0.9449 (1.3841)  loss_classifier: 0.3407 (0.5538)  loss_box_reg: 0.1310 (0.1701)  loss_mask: 0.3968 (0.5350)  loss_objectness: 0.0293 (0.0972)  loss_rpn_box_reg: 0.0083 (0.0279)  time: 0.1061 (0.1167)  data: 0.0013 (0.0040)  lr: 0.112640  max mem: 5047
2020-06-23 17:19:31,782 maskrcnn_benchmark.trainer INFO: eta: 1:16:36  iter: 460  loss: 0.9951 (1.3696)  loss_classifier: 0.4020 (0.5482)  loss_box_reg: 0.1603 (0.1699)  loss_mask: 0.3726 (0.5283)  loss_objectness: 0.0454 (0.0952)  loss_rpn_box_reg: 0.0197 (0.0278)  time: 0.1057 (0.1162)  data: 0.0014 (0.0039)  lr: 0.117760  max mem: 5047
2020-06-23 17:19:33,893 maskrcnn_benchmark.trainer INFO: eta: 1:16:16  iter: 480  loss: 0.9669 (1.3534)  loss_classifier: 0.3318 (0.5405)  loss_box_reg: 0.1454 (0.1688)  loss_mask: 0.3673 (0.5229)  loss_objectness: 0.0279 (0.0931)  loss_rpn_box_reg: 0.0224 (0.0280)  time: 0.1054 (0.1158)  data: 0.0014 (0.0038)  lr: 0.122880  max mem: 5047
2020-06-23 17:19:36,000 maskrcnn_benchmark.trainer INFO: eta: 1:15:57  iter: 500  loss: 0.9544 (1.3377)  loss_classifier: 0.3456 (0.5331)  loss_box_reg: 0.1292 (0.1682)  loss_mask: 0.3982 (0.5170)  loss_objectness: 0.0342 (0.0915)  loss_rpn_box_reg: 0.0135 (0.0279)  time: 0.1049 (0.1154)  data: 0.0013 (0.0037)  lr: 0.128000  max mem: 5047
2020-06-23 17:19:38,107 maskrcnn_benchmark.trainer INFO: eta: 1:15:39  iter: 520  loss: 0.9329 (1.3244)  loss_classifier: 0.3682 (0.5270)  loss_box_reg: 0.1603 (0.1682)  loss_mask: 0.3671 (0.5110)  loss_objectness: 0.0338 (0.0904)  loss_rpn_box_reg: 0.0117 (0.0279)  time: 0.1047 (0.1150)  data: 0.0014 (0.0036)  lr: 0.133120  max mem: 5047
2020-06-23 17:19:40,223 maskrcnn_benchmark.trainer INFO: eta: 1:15:24  iter: 540  loss: 1.0061 (1.3103)  loss_classifier: 0.3532 (0.5204)  loss_box_reg: 0.1377 (0.1671)  loss_mask: 0.3636 (0.5053)  loss_objectness: 0.0386 (0.0894)  loss_rpn_box_reg: 0.0124 (0.0281)  time: 0.1057 (0.1147)  data: 0.0014 (0.0035)  lr: 0.138240  max mem: 5047
2020-06-23 17:19:42,334 maskrcnn_benchmark.trainer INFO: eta: 1:15:09  iter: 560  loss: 0.9139 (1.2959)  loss_classifier: 0.3517 (0.5144)  loss_box_reg: 0.1329 (0.1661)  loss_mask: 0.3592 (0.4999)  loss_objectness: 0.0379 (0.0878)  loss_rpn_box_reg: 0.0139 (0.0277)  time: 0.1045 (0.1143)  data: 0.0014 (0.0035)  lr: 0.143360  max mem: 5047
2020-06-23 17:19:44,438 maskrcnn_benchmark.trainer INFO: eta: 1:14:54  iter: 580  loss: 0.9759 (1.2853)  loss_classifier: 0.3959 (0.5104)  loss_box_reg: 0.1575 (0.1658)  loss_mask: 0.3542 (0.4951)  loss_objectness: 0.0318 (0.0866)  loss_rpn_box_reg: 0.0126 (0.0275)  time: 0.1040 (0.1140)  data: 0.0014 (0.0034)  lr: 0.148480  max mem: 5047
2020-06-23 17:19:46,554 maskrcnn_benchmark.trainer INFO: eta: 1:14:41  iter: 600  loss: 0.9985 (1.2766)  loss_classifier: 0.3814 (0.5066)  loss_box_reg: 0.1886 (0.1660)  loss_mask: 0.3561 (0.4909)  loss_objectness: 0.0529 (0.0858)  loss_rpn_box_reg: 0.0193 (0.0274)  time: 0.1051 (0.1137)  data: 0.0014 (0.0033)  lr: 0.153600  max mem: 5047
2020-06-23 17:19:48,664 maskrcnn_benchmark.trainer INFO: eta: 1:14:28  iter: 620  loss: 0.9100 (1.2657)  loss_classifier: 0.3159 (0.5014)  loss_box_reg: 0.1386 (0.1653)  loss_mask: 0.3610 (0.4870)  loss_objectness: 0.0357 (0.0848)  loss_rpn_box_reg: 0.0082 (0.0272)  time: 0.1056 (0.1135)  data: 0.0014 (0.0033)  lr: 0.158720  max mem: 5047
2020-06-23 17:19:50,789 maskrcnn_benchmark.trainer INFO: eta: 1:14:17  iter: 640  loss: 0.9513 (1.2560)  loss_classifier: 0.3434 (0.4968)  loss_box_reg: 0.1461 (0.1652)  loss_mask: 0.3489 (0.4824)  loss_objectness: 0.0508 (0.0840)  loss_rpn_box_reg: 0.0171 (0.0276)  time: 0.1061 (0.1132)  data: 0.0014 (0.0032)  lr: 0.160000  max mem: 5047
2020-06-23 17:19:52,911 maskrcnn_benchmark.trainer INFO: eta: 1:14:06  iter: 660  loss: 0.8339 (1.2446)  loss_classifier: 0.2890 (0.4909)  loss_box_reg: 0.1441 (0.1644)  loss_mask: 0.3448 (0.4786)  loss_objectness: 0.0263 (0.0830)  loss_rpn_box_reg: 0.0106 (0.0277)  time: 0.1060 (0.1130)  data: 0.0014 (0.0032)  lr: 0.160000  max mem: 5047
2020-06-23 17:19:55,025 maskrcnn_benchmark.trainer INFO: eta: 1:13:55  iter: 680  loss: 0.9618 (1.2363)  loss_classifier: 0.3446 (0.4868)  loss_box_reg: 0.1586 (0.1643)  loss_mask: 0.3492 (0.4752)  loss_objectness: 0.0401 (0.0824)  loss_rpn_box_reg: 0.0122 (0.0276)  time: 0.1060 (0.1128)  data: 0.0014 (0.0031)  lr: 0.160000  max mem: 5047
2020-06-23 17:19:57,129 maskrcnn_benchmark.trainer INFO: eta: 1:13:45  iter: 700  loss: 1.1461 (1.2319)  loss_classifier: 0.4120 (0.4847)  loss_box_reg: 0.2043 (0.1653)  loss_mask: 0.3628 (0.4721)  loss_objectness: 0.0629 (0.0821)  loss_rpn_box_reg: 0.0170 (0.0277)  time: 0.1053 (0.1126)  data: 0.0015 (0.0031)  lr: 0.160000  max mem: 5047
2020-06-23 17:19:59,249 maskrcnn_benchmark.trainer INFO: eta: 1:13:35  iter: 720  loss: 1.0156 (1.2269)  loss_classifier: 0.3939 (0.4829)  loss_box_reg: 0.1706 (0.1653)  loss_mask: 0.3567 (0.4692)  loss_objectness: 0.0501 (0.0817)  loss_rpn_box_reg: 0.0144 (0.0278)  time: 0.1059 (0.1124)  data: 0.0014 (0.0030)  lr: 0.160000  max mem: 5047
2020-06-23 17:20:01,372 maskrcnn_benchmark.trainer INFO: eta: 1:13:26  iter: 740  loss: 0.9826 (1.2202)  loss_classifier: 0.3717 (0.4805)  loss_box_reg: 0.1596 (0.1653)  loss_mask: 0.3581 (0.4661)  loss_objectness: 0.0379 (0.0808)  loss_rpn_box_reg: 0.0150 (0.0275)  time: 0.1057 (0.1122)  data: 0.0014 (0.0030)  lr: 0.160000  max mem: 5047
2020-06-23 17:20:03,482 maskrcnn_benchmark.trainer INFO: eta: 1:13:17  iter: 760  loss: 0.8402 (1.2103)  loss_classifier: 0.3346 (0.4767)  loss_box_reg: 0.1343 (0.1646)  loss_mask: 0.2983 (0.4619)  loss_objectness: 0.0412 (0.0798)  loss_rpn_box_reg: 0.0157 (0.0274)  time: 0.1054 (0.1121)  data: 0.0014 (0.0029)  lr: 0.160000  max mem: 5047
2020-06-23 17:20:05,596 maskrcnn_benchmark.trainer INFO: eta: 1:13:08  iter: 780  loss: 0.8801 (1.2028)  loss_classifier: 0.2963 (0.4735)  loss_box_reg: 0.1478 (0.1643)  loss_mask: 0.3349 (0.4590)  loss_objectness: 0.0281 (0.0789)  loss_rpn_box_reg: 0.0070 (0.0270)  time: 0.1055 (0.1119)  data: 0.0014 (0.0029)  lr: 0.160000  max mem: 5047
2020-06-23 17:20:07,718 maskrcnn_benchmark.trainer INFO: eta: 1:13:00  iter: 800  loss: 0.7635 (1.1939)  loss_classifier: 0.3360 (0.4696)  loss_box_reg: 0.1184 (0.1636)  loss_mask: 0.3297 (0.4557)  loss_objectness: 0.0222 (0.0781)  loss_rpn_box_reg: 0.0083 (0.0269)  time: 0.1057 (0.1118)  data: 0.0014 (0.0029)  lr: 0.160000  max mem: 5047
2020-06-23 17:20:09,828 maskrcnn_benchmark.trainer INFO: eta: 1:12:52  iter: 820  loss: 0.8326 (1.1845)  loss_classifier: 0.3232 (0.4656)  loss_box_reg: 0.1384 (0.1628)  loss_mask: 0.2973 (0.4521)  loss_objectness: 0.0289 (0.0773)  loss_rpn_box_reg: 0.0096 (0.0267)  time: 0.1054 (0.1116)  data: 0.0014 (0.0028)  lr: 0.160000  max mem: 5047
2020-06-23 17:20:11,957 maskrcnn_benchmark.trainer INFO: eta: 1:12:45  iter: 840  loss: 0.8887 (1.1788)  loss_classifier: 0.3054 (0.4630)  loss_box_reg: 0.1429 (0.1624)  loss_mask: 0.3520 (0.4502)  loss_objectness: 0.0424 (0.0767)  loss_rpn_box_reg: 0.0142 (0.0266)  time: 0.1056 (0.1115)  data: 0.0014 (0.0028)  lr: 0.160000  max mem: 5047
2020-06-23 17:20:14,084 maskrcnn_benchmark.trainer INFO: eta: 1:12:38  iter: 860  loss: 0.8413 (1.1712)  loss_classifier: 0.2968 (0.4595)  loss_box_reg: 0.1434 (0.1619)  loss_mask: 0.3324 (0.4475)  loss_objectness: 0.0299 (0.0757)  loss_rpn_box_reg: 0.0106 (0.0266)  time: 0.1056 (0.1114)  data: 0.0014 (0.0028)  lr: 0.160000  max mem: 5047
2020-06-23 17:20:16,223 maskrcnn_benchmark.trainer INFO: eta: 1:12:32  iter: 880  loss: 0.8222 (1.1653)  loss_classifier: 0.3082 (0.4569)  loss_box_reg: 0.1303 (0.1615)  loss_mask: 0.3111 (0.4449)  loss_objectness: 0.0329 (0.0754)  loss_rpn_box_reg: 0.0109 (0.0266)  time: 0.1053 (0.1113)  data: 0.0014 (0.0027)  lr: 0.160000  max mem: 5047
2020-06-23 17:20:18,341 maskrcnn_benchmark.trainer INFO: eta: 1:12:25  iter: 900  loss: 0.8042 (1.1584)  loss_classifier: 0.3389 (0.4538)  loss_box_reg: 0.1335 (0.1609)  loss_mask: 0.3228 (0.4423)  loss_objectness: 0.0368 (0.0749)  loss_rpn_box_reg: 0.0114 (0.0265)  time: 0.1055 (0.1111)  data: 0.0014 (0.0027)  lr: 0.160000  max mem: 5047
:::MLLOG {"namespace": "", "time_ms": 1592958022847, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592958022848, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592958022848, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 1}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 17:20:23,026 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
index created!
creating index...
Done (t=0.30s)
creating index...
Done (t=0.30s)
creating index...
index created!
Done (t=0.30s)
creating index...
index created!
Done (t=0.30s)
creating index...
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
index created!
Done (t=0.30s)
creating index...
Done (t=0.31s)
creating index...
Done (t=0.31s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
:::MLLOG {"namespace": "", "time_ms": 1592958023348, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 1, "metadata": {"file": "/workspace/object_detection/maskrcnn_benchmark/engine/tester.py", "lineno": 35}}
2020-06-23 17:20:23,349 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 11%|        | 9/79 [00:01<00:22,  3.07it/s]
 15%|        | 12/79 [00:01<00:16,  4.17it/s]
 19%|        | 15/79 [00:01<00:11,  5.55it/s]
 23%|       | 18/79 [00:01<00:08,  7.22it/s]
 27%|       | 21/79 [00:01<00:06,  9.22it/s]
 30%|       | 24/79 [00:01<00:04, 11.43it/s]
 34%|      | 27/79 [00:01<00:03, 13.68it/s]
 38%|      | 30/79 [00:02<00:03, 15.96it/s]
 42%|     | 33/79 [00:02<00:02, 17.91it/s]
 46%|     | 36/79 [00:02<00:02, 19.81it/s]
 49%|     | 39/79 [00:02<00:01, 21.26it/s]
 53%|    | 42/79 [00:02<00:01, 22.34it/s]
 57%|    | 45/79 [00:02<00:01, 23.20it/s]
 61%|    | 48/79 [00:02<00:01, 23.70it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.34it/s]
 28%|       | 22/79 [00:01<00:06,  9.33it/s]
 32%|      | 25/79 [00:01<00:04, 11.56it/s]
 35%|      | 28/79 [00:01<00:03, 13.81it/s]
 39%|      | 31/79 [00:02<00:03, 15.91it/s]
 43%|     | 34/79 [00:02<00:02, 18.00it/s]
 47%|     | 37/79 [00:02<00:02, 19.77it/s]
 51%|     | 40/79 [00:02<00:01, 21.22it/s]
 54%|    | 43/79 [00:02<00:01, 22.22it/s]
 58%|    | 46/79 [00:02<00:01, 23.03it/s]
 62%|   | 49/79 [00:02<00:01, 23.74it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.34it/s]
 32%|      | 25/79 [00:01<00:04, 11.48it/s]
 35%|      | 28/79 [00:01<00:03, 13.76it/s]
 39%|      | 31/79 [00:02<00:03, 16.00it/s]
 43%|     | 34/79 [00:02<00:02, 17.98it/s]
 47%|     | 37/79 [00:02<00:02, 19.55it/s]
 51%|     | 40/79 [00:02<00:01, 20.95it/s]
 54%|    | 43/79 [00:02<00:01, 22.19it/s]
 58%|    | 46/79 [00:02<00:01, 23.04it/s]
 62%|   | 49/79 [00:02<00:01, 23.71it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.36it/s]
 28%|       | 22/79 [00:01<00:06,  9.33it/s]
 32%|      | 25/79 [00:01<00:04, 11.52it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:03, 15.86it/s]
 43%|     | 34/79 [00:02<00:02, 17.79it/s]
 47%|     | 37/79 [00:02<00:02, 19.50it/s]
 51%|     | 40/79 [00:02<00:01, 21.01it/s]
 54%|    | 43/79 [00:02<00:01, 22.12it/s]
 58%|    | 46/79 [00:02<00:01, 22.90it/s]
 62%|   | 49/79 [00:02<00:01, 23.81it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.52it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:02, 16.06it/s]
 43%|     | 34/79 [00:02<00:02, 18.09it/s]
 47%|     | 37/79 [00:02<00:02, 19.98it/s]
 51%|     | 40/79 [00:02<00:01, 21.19it/s]
 54%|    | 43/79 [00:02<00:01, 22.35it/s]
 58%|    | 46/79 [00:02<00:01, 22.96it/s]
 62%|   | 49/79 [00:02<00:01, 23.71it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 28%|       | 22/79 [00:01<00:06,  9.21it/s]
 32%|      | 25/79 [00:01<00:04, 11.36it/s]
 35%|      | 28/79 [00:01<00:03, 13.74it/s]
 39%|      | 31/79 [00:02<00:03, 16.00it/s]
 43%|     | 34/79 [00:02<00:02, 18.15it/s]
 47%|     | 37/79 [00:02<00:02, 19.72it/s]
 51%|     | 40/79 [00:02<00:01, 21.37it/s]
 54%|    | 43/79 [00:02<00:01, 22.68it/s]
 58%|    | 46/79 [00:02<00:01, 23.81it/s]
 62%|   | 49/79 [00:02<00:01, 24.61it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.17it/s]
 20%|        | 16/79 [00:01<00:11,  5.57it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.25it/s]
 32%|      | 25/79 [00:01<00:04, 11.43it/s]
 35%|      | 28/79 [00:01<00:03, 13.69it/s]
 39%|      | 31/79 [00:02<00:03, 15.89it/s]
 43%|     | 34/79 [00:02<00:02, 17.74it/s]
 47%|     | 37/79 [00:02<00:02, 19.44it/s]
 51%|     | 40/79 [00:02<00:01, 20.82it/s]
 54%|    | 43/79 [00:02<00:01, 21.97it/s]
 58%|    | 46/79 [00:02<00:01, 23.14it/s]
 62%|   | 49/79 [00:02<00:01, 23.65it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:00<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.24it/s]
 28%|       | 22/79 [00:01<00:06,  9.21it/s]
 32%|      | 25/79 [00:01<00:04, 11.09it/s]
 35%|      | 28/79 [00:01<00:03, 13.35it/s]
 39%|      | 31/79 [00:02<00:03, 15.43it/s]
 43%|     | 34/79 [00:02<00:02, 17.40it/s]
 47%|     | 37/79 [00:02<00:02, 19.35it/s]
 51%|     | 40/79 [00:02<00:01, 20.78it/s]
 54%|    | 43/79 [00:02<00:01, 21.89it/s]
 58%|    | 46/79 [00:02<00:01, 22.88it/s]
 62%|   | 49/79 [00:02<00:01, 23.76it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.07it/s]
 32%|      | 25/79 [00:01<00:04, 11.18it/s]
 35%|      | 28/79 [00:01<00:03, 13.50it/s]
 39%|      | 31/79 [00:02<00:03, 15.73it/s]
 43%|     | 34/79 [00:02<00:02, 17.78it/s]
 47%|     | 37/79 [00:02<00:02, 19.42it/s]
 51%|     | 40/79 [00:02<00:01, 20.96it/s]
 54%|    | 43/79 [00:02<00:01, 22.08it/s]
 58%|    | 46/79 [00:02<00:01, 22.97it/s]
 62%|   | 49/79 [00:02<00:01, 23.61it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.20it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.50it/s]
 39%|      | 31/79 [00:02<00:03, 15.69it/s]
 43%|     | 34/79 [00:02<00:02, 17.68it/s]
 47%|     | 37/79 [00:02<00:02, 19.43it/s]
 51%|     | 40/79 [00:02<00:01, 20.95it/s]
 54%|    | 43/79 [00:02<00:01, 22.08it/s]
 58%|    | 46/79 [00:02<00:01, 23.04it/s]
 62%|   | 49/79 [00:02<00:01, 23.72it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.09it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.39it/s]
 39%|      | 31/79 [00:02<00:03, 15.59it/s]
 43%|     | 34/79 [00:02<00:02, 17.63it/s]
 47%|     | 37/79 [00:02<00:02, 19.61it/s]
 51%|     | 40/79 [00:02<00:01, 20.93it/s]
 54%|    | 43/79 [00:02<00:01, 22.06it/s]
 58%|    | 46/79 [00:02<00:01, 22.92it/s]
 62%|   | 49/79 [00:02<00:01, 23.55it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.36it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.96it/s]
 32%|      | 25/79 [00:01<00:04, 11.11it/s]
 35%|      | 28/79 [00:01<00:03, 13.40it/s]
 39%|      | 31/79 [00:02<00:03, 15.64it/s]
 43%|     | 34/79 [00:02<00:02, 17.63it/s]
 47%|     | 37/79 [00:02<00:02, 19.50it/s]
 51%|     | 40/79 [00:02<00:01, 20.79it/s]
 54%|    | 43/79 [00:02<00:01, 21.91it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.40it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.09it/s]
 20%|        | 16/79 [00:01<00:11,  5.45it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.07it/s]
 32%|      | 25/79 [00:01<00:04, 11.19it/s]
 35%|      | 28/79 [00:01<00:03, 13.50it/s]
 39%|      | 31/79 [00:02<00:03, 15.77it/s]
 43%|     | 34/79 [00:02<00:02, 17.86it/s]
 47%|     | 37/79 [00:02<00:02, 19.65it/s]
 51%|     | 40/79 [00:02<00:01, 21.05it/s]
 54%|    | 43/79 [00:02<00:01, 22.01it/s]
 58%|    | 46/79 [00:02<00:01, 22.69it/s]
 62%|   | 49/79 [00:02<00:01, 23.48it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.96it/s]
 32%|      | 25/79 [00:01<00:04, 11.13it/s]
 35%|      | 28/79 [00:01<00:03, 13.42it/s]
 39%|      | 31/79 [00:02<00:03, 15.66it/s]
 43%|     | 34/79 [00:02<00:02, 17.57it/s]
 47%|     | 37/79 [00:02<00:02, 19.34it/s]
 51%|     | 40/79 [00:02<00:01, 20.63it/s]
 54%|    | 43/79 [00:02<00:01, 21.74it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.73it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.14it/s]
 28%|       | 22/79 [00:01<00:06,  9.06it/s]
 32%|      | 25/79 [00:01<00:04, 11.21it/s]
 35%|      | 28/79 [00:01<00:03, 13.48it/s]
 39%|      | 31/79 [00:02<00:03, 15.65it/s]
 43%|     | 34/79 [00:02<00:02, 17.62it/s]
 47%|     | 37/79 [00:02<00:02, 19.64it/s]
 51%|     | 40/79 [00:02<00:01, 20.78it/s]
 54%|    | 43/79 [00:02<00:01, 21.72it/s]
 58%|    | 46/79 [00:02<00:01, 22.29it/s]
 62%|   | 49/79 [00:02<00:01, 23.18it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.32it/s]
 24%|       | 19/79 [00:01<00:08,  6.95it/s]
 28%|       | 22/79 [00:01<00:06,  8.90it/s]
 32%|      | 25/79 [00:01<00:04, 11.03it/s]
 35%|      | 28/79 [00:01<00:03, 13.28it/s]
 39%|      | 31/79 [00:02<00:03, 15.54it/s]
 43%|     | 34/79 [00:02<00:02, 17.76it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.97it/s]
 54%|    | 43/79 [00:02<00:01, 22.00it/s]
 58%|    | 46/79 [00:02<00:01, 22.87it/s]
 62%|   | 49/79 [00:02<00:01, 23.18it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.90it/s]
 32%|      | 25/79 [00:01<00:04, 10.83it/s]
 35%|      | 28/79 [00:02<00:03, 13.09it/s]
 39%|      | 31/79 [00:02<00:03, 15.47it/s]
 43%|     | 34/79 [00:02<00:02, 17.50it/s]
 47%|     | 37/79 [00:02<00:02, 19.46it/s]
 51%|     | 40/79 [00:02<00:01, 20.86it/s]
 54%|    | 43/79 [00:02<00:01, 22.12it/s]
 58%|    | 46/79 [00:02<00:01, 22.91it/s]
 62%|   | 49/79 [00:02<00:01, 23.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  3.99it/s]
 20%|        | 16/79 [00:01<00:11,  5.36it/s]
 24%|       | 19/79 [00:01<00:08,  7.02it/s]
 28%|       | 22/79 [00:01<00:06,  8.99it/s]
 32%|      | 25/79 [00:01<00:04, 11.09it/s]
 35%|      | 28/79 [00:01<00:03, 13.43it/s]
 39%|      | 31/79 [00:02<00:03, 15.64it/s]
 43%|     | 34/79 [00:02<00:02, 17.66it/s]
 47%|     | 37/79 [00:02<00:02, 19.13it/s]
 51%|     | 40/79 [00:02<00:01, 20.70it/s]
 54%|    | 43/79 [00:02<00:01, 21.84it/s]
 58%|    | 46/79 [00:02<00:01, 22.65it/s]
 62%|   | 49/79 [00:02<00:01, 23.52it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  7.01it/s]
 28%|       | 22/79 [00:01<00:06,  8.95it/s]
 32%|      | 25/79 [00:01<00:04, 11.13it/s]
 35%|      | 28/79 [00:02<00:03, 13.24it/s]
 39%|      | 31/79 [00:02<00:03, 15.44it/s]
 43%|     | 34/79 [00:02<00:02, 17.48it/s]
 47%|     | 37/79 [00:02<00:02, 19.24it/s]
 51%|     | 40/79 [00:02<00:01, 20.65it/s]
 54%|    | 43/79 [00:02<00:01, 22.00it/s]
 58%|    | 46/79 [00:02<00:01, 22.98it/s]
 62%|   | 49/79 [00:02<00:01, 23.73it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.87it/s]
 20%|        | 16/79 [00:01<00:12,  5.17it/s]
 24%|       | 19/79 [00:01<00:08,  6.79it/s]
 28%|       | 22/79 [00:01<00:06,  8.72it/s]
 32%|      | 25/79 [00:01<00:04, 10.91it/s]
 35%|      | 28/79 [00:02<00:03, 13.30it/s]
 39%|      | 31/79 [00:02<00:03, 15.35it/s]
 43%|     | 34/79 [00:02<00:02, 17.60it/s]
 47%|     | 37/79 [00:02<00:02, 19.44it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 22.39it/s]
 58%|    | 46/79 [00:02<00:01, 23.31it/s]
 62%|   | 49/79 [00:02<00:01, 23.34it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:17,  3.88it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.84it/s]
 28%|       | 22/79 [00:01<00:06,  8.80it/s]
 32%|      | 25/79 [00:01<00:04, 10.92it/s]
 35%|      | 28/79 [00:02<00:03, 13.21it/s]
 39%|      | 31/79 [00:02<00:03, 15.46it/s]
 43%|     | 34/79 [00:02<00:02, 17.50it/s]
 47%|     | 37/79 [00:02<00:02, 19.39it/s]
 51%|     | 40/79 [00:02<00:01, 20.92it/s]
 54%|    | 43/79 [00:02<00:01, 22.17it/s]
 58%|    | 46/79 [00:02<00:01, 23.01it/s]
 62%|   | 49/79 [00:02<00:01, 23.68it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  7.01it/s]
 28%|       | 22/79 [00:01<00:06,  8.94it/s]
 32%|      | 25/79 [00:01<00:04, 11.08it/s]
 35%|      | 28/79 [00:02<00:03, 13.23it/s]
 39%|      | 31/79 [00:02<00:03, 15.56it/s]
 43%|     | 34/79 [00:02<00:02, 17.49it/s]
 47%|     | 37/79 [00:02<00:02, 19.14it/s]
 51%|     | 40/79 [00:02<00:01, 20.47it/s]
 54%|    | 43/79 [00:02<00:01, 21.84it/s]
 58%|    | 46/79 [00:02<00:01, 22.58it/s]
 62%|   | 49/79 [00:02<00:01, 23.47it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.95it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.93it/s]
 28%|       | 22/79 [00:01<00:06,  8.80it/s]
 32%|      | 25/79 [00:01<00:04, 10.95it/s]
 35%|      | 28/79 [00:02<00:03, 13.16it/s]
 39%|      | 31/79 [00:02<00:03, 15.23it/s]
 43%|     | 34/79 [00:02<00:02, 17.35it/s]
 47%|     | 37/79 [00:02<00:02, 19.05it/s]
 51%|     | 40/79 [00:02<00:01, 20.61it/s]
 54%|    | 43/79 [00:02<00:01, 21.50it/s]
 58%|    | 46/79 [00:02<00:01, 22.58it/s]
 62%|   | 49/79 [00:02<00:01, 22.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.93it/s]
 20%|        | 16/79 [00:01<00:12,  5.25it/s]
 24%|       | 19/79 [00:01<00:08,  6.88it/s]
 28%|       | 22/79 [00:01<00:06,  8.78it/s]
 32%|      | 25/79 [00:01<00:04, 10.93it/s]
 35%|      | 28/79 [00:02<00:03, 13.14it/s]
 39%|      | 31/79 [00:02<00:03, 15.25it/s]
 43%|     | 34/79 [00:02<00:02, 17.07it/s]
 47%|     | 37/79 [00:02<00:02, 19.06it/s]
 51%|     | 40/79 [00:02<00:01, 20.58it/s]
 54%|    | 43/79 [00:02<00:01, 21.79it/s]
 58%|    | 46/79 [00:02<00:01, 22.54it/s]
 62%|   | 49/79 [00:02<00:01, 23.26it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.92it/s]
 28%|       | 22/79 [00:01<00:06,  8.84it/s]
 32%|      | 25/79 [00:01<00:04, 10.96it/s]
 35%|      | 28/79 [00:02<00:03, 13.19it/s]
 39%|      | 31/79 [00:02<00:03, 15.28it/s]
 43%|     | 34/79 [00:02<00:02, 17.04it/s]
 47%|     | 37/79 [00:02<00:02, 18.64it/s]
 51%|     | 40/79 [00:02<00:01, 19.98it/s]
 54%|    | 43/79 [00:02<00:01, 21.15it/s]
 58%|    | 46/79 [00:02<00:01, 21.88it/s]
 62%|   | 49/79 [00:02<00:01, 22.52it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.03it/s]
  5%|         | 4/79 [00:01<00:52,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.01it/s]
 13%|        | 10/79 [00:01<00:24,  2.77it/s]
 16%|        | 13/79 [00:01<00:17,  3.78it/s]
 20%|        | 16/79 [00:01<00:12,  5.10it/s]
 24%|       | 19/79 [00:01<00:08,  6.68it/s]
 28%|       | 22/79 [00:01<00:06,  8.52it/s]
 32%|      | 25/79 [00:01<00:05, 10.66it/s]
 35%|      | 28/79 [00:02<00:03, 12.86it/s]
 39%|      | 31/79 [00:02<00:03, 14.99it/s]
 43%|     | 34/79 [00:02<00:02, 17.12it/s]
 47%|     | 37/79 [00:02<00:02, 18.92it/s]
 51%|     | 40/79 [00:02<00:01, 20.43it/s]
 54%|    | 43/79 [00:02<00:01, 21.81it/s]
 58%|    | 46/79 [00:02<00:01, 22.58it/s]
 62%|   | 49/79 [00:02<00:01, 23.29it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:19,  1.02s/it]
  5%|         | 4/79 [00:01<00:54,  1.37it/s]
  9%|         | 7/79 [00:01<00:37,  1.92it/s]
 13%|        | 10/79 [00:01<00:26,  2.65it/s]
 16%|        | 13/79 [00:01<00:18,  3.62it/s]
 20%|        | 16/79 [00:01<00:12,  4.87it/s]
 24%|       | 19/79 [00:01<00:09,  6.43it/s]
 28%|       | 22/79 [00:01<00:06,  8.30it/s]
 32%|      | 25/79 [00:01<00:05, 10.43it/s]
 35%|      | 28/79 [00:02<00:04, 12.62it/s]
 39%|      | 31/79 [00:02<00:03, 14.88it/s]
 43%|     | 34/79 [00:02<00:02, 16.91it/s]
 47%|     | 37/79 [00:02<00:02, 18.81it/s]
 51%|     | 40/79 [00:02<00:01, 20.15it/s]
 54%|    | 43/79 [00:02<00:01, 21.29it/s]
 58%|    | 46/79 [00:02<00:01, 22.13it/s]
 62%|   | 49/79 [00:02<00:01, 22.82it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.81it/s]
 16%|        | 13/79 [00:01<00:17,  3.82it/s]
 20%|        | 16/79 [00:01<00:12,  5.13it/s]
 24%|       | 19/79 [00:01<00:08,  6.72it/s]
 28%|       | 22/79 [00:01<00:06,  8.64it/s]
 32%|      | 25/79 [00:01<00:05, 10.69it/s]
 35%|      | 28/79 [00:02<00:03, 12.87it/s]
 39%|      | 31/79 [00:02<00:03, 15.08it/s]
 43%|     | 34/79 [00:02<00:02, 16.99it/s]
 47%|     | 37/79 [00:02<00:02, 18.83it/s]
 51%|     | 40/79 [00:02<00:01, 20.34it/s]
 54%|    | 43/79 [00:02<00:01, 21.03it/s]
 58%|    | 46/79 [00:02<00:01, 21.74it/s]
 62%|   | 49/79 [00:02<00:01, 22.25it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  4%|         | 3/79 [00:01<00:50,  1.50it/s]
  8%|         | 6/79 [00:01<00:35,  2.08it/s]
 11%|        | 9/79 [00:01<00:24,  2.87it/s]
 15%|        | 12/79 [00:01<00:17,  3.90it/s]
 19%|        | 15/79 [00:01<00:12,  5.20it/s]
 23%|       | 18/79 [00:01<00:08,  6.81it/s]
 27%|       | 21/79 [00:01<00:06,  8.70it/s]
 30%|       | 24/79 [00:01<00:05, 10.74it/s]
 34%|      | 27/79 [00:02<00:04, 12.91it/s]
 38%|      | 30/79 [00:02<00:03, 14.94it/s]
 42%|     | 33/79 [00:02<00:02, 17.00it/s]
 46%|     | 36/79 [00:02<00:02, 18.34it/s]
 49%|     | 39/79 [00:02<00:02, 19.70it/s]
 53%|    | 42/79 [00:02<00:01, 20.51it/s]
 57%|    | 45/79 [00:02<00:01, 21.45it/s]
 61%|    | 48/79 [00:02<00:01, 22.19it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:51,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.01it/s]
 13%|        | 10/79 [00:01<00:24,  2.78it/s]
 16%|        | 13/79 [00:01<00:17,  3.79it/s]
 20%|        | 16/79 [00:01<00:12,  5.07it/s]
 24%|       | 19/79 [00:01<00:08,  6.67it/s]
 28%|       | 22/79 [00:01<00:06,  8.54it/s]
 32%|      | 25/79 [00:01<00:05, 10.58it/s]
 35%|      | 28/79 [00:02<00:03, 12.78it/s]
 39%|      | 31/79 [00:02<00:03, 14.93it/s]
 43%|     | 34/79 [00:02<00:02, 16.95it/s]
 47%|     | 37/79 [00:02<00:02, 18.56it/s]
 51%|     | 40/79 [00:02<00:01, 19.84it/s]
 54%|    | 43/79 [00:02<00:01, 21.16it/s]
 58%|    | 46/79 [00:02<00:01, 21.89it/s]
 62%|   | 49/79 [00:02<00:01, 22.58it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:17,  1.00it/s]
  5%|         | 4/79 [00:01<00:53,  1.41it/s]
  9%|         | 7/79 [00:01<00:36,  1.96it/s]
 13%|        | 10/79 [00:01<00:25,  2.70it/s]
 16%|        | 13/79 [00:01<00:17,  3.68it/s]
 20%|        | 16/79 [00:01<00:12,  4.94it/s]
 24%|       | 19/79 [00:01<00:09,  6.47it/s]
 28%|       | 22/79 [00:01<00:06,  8.28it/s]
 32%|      | 25/79 [00:01<00:05, 10.32it/s]
 35%|      | 28/79 [00:02<00:04, 12.50it/s]
 39%|      | 31/79 [00:02<00:03, 14.63it/s]
 43%|     | 34/79 [00:02<00:02, 16.43it/s]
 47%|     | 37/79 [00:02<00:02, 18.08it/s]
 51%|     | 40/79 [00:02<00:01, 19.57it/s]
 54%|    | 43/79 [00:02<00:01, 20.74it/s]
 58%|    | 46/79 [00:02<00:01, 21.63it/s]
 62%|   | 49/79 [00:02<00:01, 22.55it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:19,  1.02s/it]
  5%|         | 4/79 [00:01<00:54,  1.38it/s]
  9%|         | 7/79 [00:01<00:37,  1.92it/s]
 13%|        | 10/79 [00:01<00:26,  2.65it/s]
 16%|        | 13/79 [00:01<00:18,  3.61it/s]
 20%|        | 16/79 [00:01<00:12,  4.86it/s]
 24%|       | 19/79 [00:01<00:09,  6.37it/s]
 28%|       | 22/79 [00:01<00:07,  8.14it/s]
 32%|      | 25/79 [00:02<00:05, 10.19it/s]
 35%|      | 28/79 [00:02<00:04, 12.32it/s]
 39%|      | 31/79 [00:02<00:03, 14.63it/s]
 43%|     | 34/79 [00:02<00:02, 16.73it/s]
 47%|     | 37/79 [00:02<00:02, 18.46it/s]
 51%|     | 40/79 [00:02<00:01, 20.04it/s]
 54%|    | 43/79 [00:02<00:01, 21.24it/s]
 58%|    | 46/79 [00:02<00:01, 22.07it/s]
 62%|   | 49/79 [00:02<00:01, 22.60it/s]
 66%|   | 52/79 [00:03<00:01, 24.23it/s]
 70%|   | 55/79 [00:02<00:00, 24.59it/s]
 73%|  | 58/79 [00:03<00:00, 25.04it/s]
 77%|  | 61/79 [00:03<00:00, 25.17it/s]
 81%|  | 64/79 [00:03<00:00, 25.24it/s]
 85%| | 67/79 [00:03<00:00, 24.97it/s]
 89%| | 70/79 [00:03<00:00, 25.06it/s]
 92%|| 73/79 [00:03<00:00, 25.39it/s]
 96%|| 76/79 [00:03<00:00, 26.16it/s]
100%|| 79/79 [00:03<00:00, 27.17it/s]
, 24.27it/s]
 70%|   | 55/79 [00:02<00:00, 24.37it/s]
 73%|  | 58/79 [00:03<00:00, 24.86it/s]
 77%|  | 61/79 [00:03<00:00, 24.77it/s]
 81%|  | 64/79 [00:03<00:00, 25.09it/s]
 85%| | 67/79 [00:03<00:00, 25.35it/s]
 89%| | 70/79 [00:03<00:00, 25.54it/s]
 92%|| 73/79 [00:03<00:00, 25.73it/s]
 96%|| 76/79 [00:03<00:00, 26.46it/s]
100%|| 79/79 [00:03<00:00, 27.32it/s]
, 23.72it/s]
 70%|   | 55/79 [00:03<00:00, 24.14it/s]
 73%|  | 58/79 [00:03<00:00, 24.16it/s]
 77%|  | 61/79 [00:03<00:00, 24.82it/s]
 81%|  | 64/79 [00:03<00:00, 24.76it/s]
 85%| | 67/79 [00:03<00:00, 24.88it/s]
 89%| | 70/79 [00:03<00:00, 24.89it/s]
 92%|| 73/79 [00:03<00:00, 25.36it/s]
 96%|| 76/79 [00:03<00:00, 26.15it/s]
100%|| 79/79 [00:03<00:00, 27.14it/s]
, 24.07it/s]
 70%|   | 55/79 [00:03<00:00, 24.18it/s]
 73%|  | 58/79 [00:03<00:00, 24.69it/s]
 77%|  | 61/79 [00:03<00:00, 24.86it/s]
 81%|  | 64/79 [00:03<00:00, 25.08it/s]
 85%| | 67/79 [00:03<00:00, 25.22it/s]
 89%| | 70/79 [00:03<00:00, 25.26it/s]
 92%|| 73/79 [00:03<00:00, 25.57it/s]
 96%|| 76/79 [00:03<00:00, 26.74it/s]
100%|| 79/79 [00:03<00:00, 27.19it/s]
, 24.26it/s]
 70%|   | 55/79 [00:03<00:00, 24.81it/s]
 73%|  | 58/79 [00:03<00:00, 24.96it/s]
 77%|  | 61/79 [00:03<00:00, 25.28it/s]
 81%|  | 64/79 [00:03<00:00, 25.39it/s]
 85%| | 67/79 [00:03<00:00, 25.48it/s]
 89%| | 70/79 [00:03<00:00, 25.02it/s]
 92%|| 73/79 [00:03<00:00, 25.61it/s]
 96%|| 76/79 [00:03<00:00, 26.10it/s]
100%|| 79/79 [00:03<00:00, 27.13it/s]
79it/s]
 68%|   | 54/79 [00:02<00:01, 24.20it/s]
 72%|  | 57/79 [00:03<00:00, 24.30it/s]
 76%|  | 60/79 [00:03<00:00, 24.32it/s]
 80%|  | 63/79 [00:03<00:00, 24.52it/s]
 84%| | 66/79 [00:03<00:00, 24.78it/s]
 87%| | 69/79 [00:03<00:00, 24.63it/s]
 91%| | 72/79 [00:03<00:00, 24.70it/s]
 95%|| 75/79 [00:03<00:00, 25.58it/s]
 99%|| 78/79 [00:03<00:00, 26.68it/s]
100%|| 79/79 [00:04<00:00, 19.57it/s]
, 24.21it/s]
 70%|   | 55/79 [00:03<00:00, 24.62it/s]
 73%|  | 58/79 [00:03<00:00, 24.87it/s]
 77%|  | 61/79 [00:03<00:00, 24.90it/s]
 81%|  | 64/79 [00:03<00:00, 24.84it/s]
 85%| | 67/79 [00:03<00:00, 25.02it/s]
 89%| | 70/79 [00:03<00:00, 24.81it/s]
 92%|| 73/79 [00:03<00:00, 25.42it/s]
 96%|| 76/79 [00:03<00:00, 26.02it/s]
100%|| 79/79 [00:04<00:00, 19.50it/s]
, 23.88it/s]
 70%|   | 55/79 [00:03<00:00, 24.04it/s]
 73%|  | 58/79 [00:03<00:00, 24.57it/s]
 77%|  | 61/79 [00:03<00:00, 24.47it/s]
 81%|  | 64/79 [00:03<00:00, 24.82it/s]
 85%| | 67/79 [00:03<00:00, 24.83it/s]
 89%| | 70/79 [00:03<00:00, 25.07it/s]
 92%|| 73/79 [00:03<00:00, 25.21it/s]
 96%|| 76/79 [00:03<00:00, 25.96it/s]
100%|| 79/79 [00:03<00:00, 26.80it/s]
, 23.83it/s]
 70%|   | 55/79 [00:03<00:00, 24.32it/s]
 73%|  | 58/79 [00:03<00:00, 24.75it/s]
 77%|  | 61/79 [00:03<00:00, 24.64it/s]
 81%|  | 64/79 [00:03<00:00, 24.54it/s]
 85%| | 67/79 [00:03<00:00, 24.80it/s]
 89%| | 70/79 [00:03<00:00, 24.87it/s]
 92%|| 73/79 [00:03<00:00, 25.06it/s]
 96%|| 76/79 [00:03<00:00, 25.86it/s]
100%|| 79/79 [00:03<00:00, 26.67it/s]
, 23.72it/s]
 70%|   | 55/79 [00:03<00:00, 24.46it/s]
 73%|  | 58/79 [00:03<00:00, 24.60it/s]
 77%|  | 61/79 [00:03<00:00, 25.00it/s]
 81%|  | 64/79 [00:03<00:00, 24.93it/s]
 85%| | 67/79 [00:03<00:00, 25.24it/s]
 89%| | 70/79 [00:03<00:00, 25.20it/s]
 92%|| 73/79 [00:03<00:00, 25.33it/s]
 96%|| 76/79 [00:03<00:00, 25.89it/s]
100%|| 79/79 [00:04<00:00, 26.70it/s]
, 22.94it/s]
 70%|   | 55/79 [00:03<00:01, 23.26it/s]
 73%|  | 58/79 [00:03<00:00, 23.31it/s]
 77%|  | 61/79 [00:03<00:00, 23.65it/s]
 81%|  | 64/79 [00:03<00:00, 23.92it/s]
 85%| | 67/79 [00:03<00:00, 23.71it/s]
 89%| | 70/79 [00:03<00:00, 23.82it/s]
 92%|| 73/79 [00:03<00:00, 24.48it/s]
 96%|| 76/79 [00:04<00:00, 25.27it/s]
100%|| 79/79 [00:04<00:00, 26.23it/s]
, 22.95it/s]
 70%|   | 55/79 [00:03<00:01, 23.20it/s]
 73%|  | 58/79 [00:03<00:00, 23.86it/s]
 77%|  | 61/79 [00:03<00:00, 24.06it/s]
 81%|  | 64/79 [00:03<00:00, 24.16it/s]
 85%| | 67/79 [00:03<00:00, 23.92it/s]
 89%| | 70/79 [00:03<00:00, 24.15it/s]
 92%|| 73/79 [00:03<00:00, 24.54it/s]
 96%|| 76/79 [00:04<00:00, 25.35it/s]
100%|| 79/79 [00:04<00:00, 26.36it/s]
, 22.75it/s]
 70%|   | 55/79 [00:03<00:01, 23.51it/s]
 73%|  | 58/79 [00:03<00:00, 23.44it/s]
 77%|  | 61/79 [00:03<00:00, 23.82it/s]
 81%|  | 64/79 [00:03<00:00, 24.09it/s]
 85%| | 67/79 [00:03<00:00, 24.44it/s]
 89%| | 70/79 [00:03<00:00, 24.28it/s]
 92%|| 73/79 [00:03<00:00, 24.51it/s]
 96%|| 76/79 [00:04<00:00, 25.22it/s]
100%|| 79/79 [00:04<00:00, 26.07it/s]
, 24.25it/s]
 70%|   | 55/79 [00:02<00:00, 24.46it/s]
 73%|  | 58/79 [00:03<00:00, 24.72it/s]
 77%|  | 61/79 [00:03<00:00, 24.62it/s]
 81%|  | 64/79 [00:03<00:00, 24.87it/s]
 85%| | 67/79 [00:03<00:00, 24.97it/s]
 89%| | 70/79 [00:03<00:00, 25.20it/s]
 92%|| 73/79 [00:03<00:00, 25.39it/s]
 96%|| 76/79 [00:03<00:00, 26.13it/s]
100%|| 79/79 [00:04<00:00,  8.66it/s]
, 24.81it/s]
 70%|   | 55/79 [00:02<00:00, 25.26it/s]
 73%|  | 58/79 [00:03<00:00, 25.45it/s]
 77%|  | 61/79 [00:03<00:00, 25.46it/s]
 81%|  | 64/79 [00:03<00:00, 25.28it/s]
 85%| | 67/79 [00:03<00:00, 25.55it/s]
 89%| | 70/79 [00:03<00:00, 25.49it/s]
 92%|| 73/79 [00:03<00:00, 25.76it/s]
 96%|| 76/79 [00:03<00:00, 26.31it/s]
100%|| 79/79 [00:04<00:00,  8.56it/s]
, 24.34it/s]
 70%|   | 55/79 [00:03<00:00, 24.85it/s]
 73%|  | 58/79 [00:03<00:00, 25.16it/s]
 77%|  | 61/79 [00:03<00:00, 25.27it/s]
 81%|  | 64/79 [00:03<00:00, 25.34it/s]
 85%| | 67/79 [00:03<00:00, 25.32it/s]
 89%| | 70/79 [00:03<00:00, 25.26it/s]
 92%|| 73/79 [00:03<00:00, 25.72it/s]
 96%|| 76/79 [00:03<00:00, 26.37it/s]
100%|| 79/79 [00:04<00:00,  8.73it/s]
, 24.22it/s]
 70%|   | 55/79 [00:03<00:00, 24.19it/s]
 73%|  | 58/79 [00:03<00:00, 24.63it/s]
 77%|  | 61/79 [00:03<00:00, 24.69it/s]
 81%|  | 64/79 [00:03<00:00, 24.82it/s]
 85%| | 67/79 [00:03<00:00, 24.80it/s]
 89%| | 70/79 [00:03<00:00, 24.71it/s]
 92%|| 73/79 [00:03<00:00, 25.01it/s]
 96%|| 76/79 [00:03<00:00, 25.93it/s]
100%|| 79/79 [00:04<00:00,  8.64it/s]
, 24.20it/s]
 70%|   | 55/79 [00:03<00:00, 24.61it/s]
 73%|  | 58/79 [00:03<00:00, 24.77it/s]
 77%|  | 61/79 [00:03<00:00, 24.92it/s]
 81%|  | 64/79 [00:03<00:00, 24.96it/s]
 85%| | 67/79 [00:03<00:00, 25.11it/s]
 89%| | 70/79 [00:03<00:00, 25.12it/s]
 92%|| 73/79 [00:03<00:00, 25.57it/s]
 96%|| 76/79 [00:03<00:00, 26.14it/s]
100%|| 79/79 [00:04<00:00,  8.68it/s]
, 23.73it/s]
 70%|   | 55/79 [00:03<00:01, 23.78it/s]
 73%|  | 58/79 [00:03<00:00, 24.28it/s]
 77%|  | 61/79 [00:03<00:00, 24.40it/s]
 81%|  | 64/79 [00:03<00:00, 24.63it/s]
 85%| | 67/79 [00:03<00:00, 24.60it/s]
 89%| | 70/79 [00:03<00:00, 24.54it/s]
 92%|| 73/79 [00:03<00:00, 24.93it/s]
 96%|| 76/79 [00:03<00:00, 25.82it/s]
100%|| 79/79 [00:04<00:00,  8.72it/s]
, 23.37it/s]
 70%|   | 55/79 [00:03<00:01, 23.97it/s]
 73%|  | 58/79 [00:03<00:00, 24.59it/s]
 77%|  | 61/79 [00:03<00:00, 25.13it/s]
 81%|  | 64/79 [00:03<00:00, 25.13it/s]
 85%| | 67/79 [00:03<00:00, 25.23it/s]
 89%| | 70/79 [00:03<00:00, 25.27it/s]
 92%|| 73/79 [00:03<00:00, 25.64it/s]
 96%|| 76/79 [00:03<00:00, 26.38it/s]
100%|| 79/79 [00:04<00:00,  8.70it/s]
, 24.23it/s]
 70%|   | 55/79 [00:03<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 25.01it/s]
 77%|  | 61/79 [00:03<00:00, 25.30it/s]
 81%|  | 64/79 [00:03<00:00, 25.70it/s]
 85%| | 67/79 [00:03<00:00, 25.57it/s]
 89%| | 70/79 [00:03<00:00, 26.00it/s]
 92%|| 73/79 [00:03<00:00, 25.96it/s]
 96%|| 76/79 [00:03<00:00, 26.78it/s]
100%|| 79/79 [00:04<00:00,  8.69it/s]
, 23.91it/s]
 70%|   | 55/79 [00:03<00:00, 24.64it/s]
 73%|  | 58/79 [00:03<00:00, 24.75it/s]
 77%|  | 61/79 [00:03<00:00, 25.04it/s]
 81%|  | 64/79 [00:03<00:00, 25.42it/s]
 85%| | 67/79 [00:03<00:00, 25.19it/s]
 89%| | 70/79 [00:03<00:00, 25.12it/s]
 92%|| 73/79 [00:03<00:00, 25.42it/s]
 96%|| 76/79 [00:03<00:00, 26.25it/s]
100%|| 79/79 [00:04<00:00,  8.68it/s]
, 24.18it/s]
 70%|   | 55/79 [00:03<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 24.71it/s]
 77%|  | 61/79 [00:03<00:00, 24.98it/s]
 81%|  | 64/79 [00:03<00:00, 25.45it/s]
 85%| | 67/79 [00:03<00:00, 25.14it/s]
 89%| | 70/79 [00:03<00:00, 25.28it/s]
 92%|| 73/79 [00:03<00:00, 25.81it/s]
 96%|| 76/79 [00:03<00:00, 26.34it/s]
100%|| 79/79 [00:04<00:00,  8.67it/s]
, 24.09it/s]
 70%|   | 55/79 [00:03<00:00, 24.30it/s]
 73%|  | 58/79 [00:03<00:00, 24.60it/s]
 77%|  | 61/79 [00:03<00:00, 24.59it/s]
 81%|  | 64/79 [00:03<00:00, 24.64it/s]
 85%| | 67/79 [00:03<00:00, 24.97it/s]
 89%| | 70/79 [00:03<00:00, 25.18it/s]
 92%|| 73/79 [00:03<00:00, 25.71it/s]
 96%|| 76/79 [00:03<00:00, 26.46it/s]
100%|| 79/79 [00:04<00:00,  8.78it/s]
, 24.21it/s]
 70%|   | 55/79 [00:03<00:00, 24.87it/s]
 73%|  | 58/79 [00:03<00:00, 25.27it/s]
 77%|  | 61/79 [00:03<00:00, 25.43it/s]
 81%|  | 64/79 [00:03<00:00, 25.86it/s]
 85%| | 67/79 [00:03<00:00, 25.73it/s]
 89%| | 70/79 [00:03<00:00, 25.70it/s]
 92%|| 73/79 [00:03<00:00, 26.23it/s]
 96%|| 76/79 [00:03<00:00, 26.75it/s]
100%|| 79/79 [00:04<00:00,  8.62it/s]
, 23.84it/s]
 70%|   | 55/79 [00:03<00:01, 23.89it/s]
 73%|  | 58/79 [00:03<00:00, 24.18it/s]
 77%|  | 61/79 [00:03<00:00, 24.55it/s]
 81%|  | 64/79 [00:03<00:00, 24.82it/s]
 85%| | 67/79 [00:03<00:00, 24.99it/s]
 89%| | 70/79 [00:03<00:00, 25.03it/s]
 92%|| 73/79 [00:03<00:00, 25.24it/s]
 96%|| 76/79 [00:04<00:00,  8.50it/s]
100%|| 79/79 [00:04<00:00, 10.70it/s]
, 23.42it/s]
 70%|   | 55/79 [00:03<00:01, 23.55it/s]
 73%|  | 58/79 [00:03<00:00, 23.90it/s]
 77%|  | 61/79 [00:03<00:00, 24.38it/s]
 81%|  | 64/79 [00:03<00:00, 24.77it/s]
 85%| | 67/79 [00:03<00:00, 25.31it/s]
 89%| | 70/79 [00:03<00:00, 25.23it/s]
 92%|| 73/79 [00:03<00:00, 25.65it/s]
 96%|| 76/79 [00:03<00:00, 26.17it/s]
100%|| 79/79 [00:04<00:00,  8.65it/s]
, 23.31it/s]
 70%|   | 55/79 [00:03<00:01, 23.56it/s]
 73%|  | 58/79 [00:03<00:00, 23.49it/s]
 77%|  | 61/79 [00:03<00:00, 23.81it/s]
 81%|  | 64/79 [00:03<00:00, 24.03it/s]
 85%| | 67/79 [00:03<00:00, 24.47it/s]
 89%| | 70/79 [00:03<00:00, 25.07it/s]
 92%|| 73/79 [00:03<00:00, 25.66it/s]
 96%|| 76/79 [00:03<00:00, 26.43it/s]
100%|| 79/79 [00:04<00:00,  8.73it/s]
, 22.78it/s]
 70%|   | 55/79 [00:03<00:01, 23.11it/s]
 73%|  | 58/79 [00:03<00:00, 23.62it/s]
 77%|  | 61/79 [00:03<00:00, 23.75it/s]
 81%|  | 64/79 [00:03<00:00, 24.17it/s]
 85%| | 67/79 [00:03<00:00, 24.50it/s]
 89%| | 70/79 [00:03<00:00, 24.46it/s]
 92%|| 73/79 [00:03<00:00, 24.97it/s]
 96%|| 76/79 [00:03<00:00, 25.80it/s]
100%|| 79/79 [00:04<00:00,  8.46it/s]
, 23.79it/s]
 70%|   | 55/79 [00:03<00:00, 24.07it/s]
 73%|  | 58/79 [00:03<00:00, 24.33it/s]
 77%|  | 61/79 [00:03<00:00, 24.64it/s]
 81%|  | 64/79 [00:03<00:00, 25.23it/s]
 85%| | 67/79 [00:03<00:00, 25.05it/s]
 89%| | 70/79 [00:03<00:00, 25.20it/s]
 92%|| 73/79 [00:03<00:00, 25.38it/s]
 96%|| 76/79 [00:03<00:00, 26.14it/s]
100%|| 79/79 [00:04<00:00,  8.42it/s]
73it/s]
 68%|   | 54/79 [00:03<00:01, 23.25it/s]
 72%|  | 57/79 [00:03<00:00, 23.70it/s]
 76%|  | 60/79 [00:03<00:00, 23.89it/s]
 80%|  | 63/79 [00:03<00:00, 24.15it/s]
 84%| | 66/79 [00:03<00:00, 24.39it/s]
 87%| | 69/79 [00:03<00:00, 24.51it/s]
 91%| | 72/79 [00:03<00:00, 24.35it/s]
 95%|| 75/79 [00:04<00:00, 25.18it/s]
 99%|| 78/79 [00:04<00:00, 25.74it/s]
100%|| 79/79 [00:05<00:00, 15.76it/s]
, 23.05it/s]
 70%|   | 55/79 [00:03<00:01, 23.18it/s]
 73%|  | 58/79 [00:03<00:00, 23.08it/s]
 77%|  | 61/79 [00:03<00:00, 23.17it/s]
 81%|  | 64/79 [00:03<00:00, 23.71it/s]
 85%| | 67/79 [00:03<00:00, 23.55it/s]
 89%| | 70/79 [00:03<00:00, 23.59it/s]
 92%|| 73/79 [00:03<00:00, 24.15it/s]
 96%|| 76/79 [00:04<00:00, 25.03it/s]
100%|| 79/79 [00:05<00:00,  8.36it/s]
2020-06-23 17:20:28,429 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:05.079808 (0.03251077117919922 s / img per device, on 32 devices)
2020-06-23 17:20:28,450 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:20:28,451 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:20:28,472 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592958040645, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 2, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592958040645, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 2}}
2020-06-23 17:20:40,984 maskrcnn_benchmark.trainer INFO: eta: 1:26:50  iter: 920  loss: 1.0149 (1.1563)  loss_classifier: 0.3351 (0.4525)  loss_box_reg: 0.1496 (0.1612)  loss_mask: 0.3388 (0.4401)  loss_objectness: 0.0401 (0.0749)  loss_rpn_box_reg: 0.0240 (0.0276)  time: 0.1075 (0.1333)  data: 0.0015 (0.0220)  lr: 0.160000  max mem: 5047
Evaluating predictions
creating index...
2020-06-23 17:20:43,165 maskrcnn_benchmark.trainer INFO: eta: 1:26:28  iter: 940  loss: 0.8169 (1.1501)  loss_classifier: 0.3177 (0.4502)  loss_box_reg: 0.1355 (0.1609)  loss_mask: 0.3120 (0.4374)  loss_objectness: 0.0342 (0.0742)  loss_rpn_box_reg: 0.0153 (0.0274)  time: 0.1078 (0.1328)  data: 0.0014 (0.0216)  lr: 0.160000  max mem: 5047
2020-06-23 17:20:45,320 maskrcnn_benchmark.trainer INFO: eta: 1:26:05  iter: 960  loss: 0.8402 (1.1452)  loss_classifier: 0.3278 (0.4480)  loss_box_reg: 0.1420 (0.1607)  loss_mask: 0.3416 (0.4352)  loss_objectness: 0.0264 (0.0737)  loss_rpn_box_reg: 0.0100 (0.0275)  time: 0.1067 (0.1323)  data: 0.0014 (0.0212)  lr: 0.160000  max mem: 5047
2020-06-23 17:20:47,463 maskrcnn_benchmark.trainer INFO: eta: 1:25:42  iter: 980  loss: 0.8484 (1.1394)  loss_classifier: 0.2994 (0.4453)  loss_box_reg: 0.1257 (0.1603)  loss_mask: 0.3138 (0.4331)  loss_objectness: 0.0279 (0.0732)  loss_rpn_box_reg: 0.0166 (0.0275)  time: 0.1067 (0.1318)  data: 0.0014 (0.0208)  lr: 0.160000  max mem: 5047
2020-06-23 17:20:49,592 maskrcnn_benchmark.trainer INFO: eta: 1:25:19  iter: 1000  loss: 0.7794 (1.1327)  loss_classifier: 0.2908 (0.4427)  loss_box_reg: 0.1169 (0.1598)  loss_mask: 0.3017 (0.4305)  loss_objectness: 0.0259 (0.0725)  loss_rpn_box_reg: 0.0111 (0.0273)  time: 0.1060 (0.1313)  data: 0.0014 (0.0204)  lr: 0.160000  max mem: 5047
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 17:20:51,717 maskrcnn_benchmark.trainer INFO: eta: 1:24:58  iter: 1020  loss: 0.8622 (1.1275)  loss_classifier: 0.3431 (0.4407)  loss_box_reg: 0.1477 (0.1596)  loss_mask: 0.3193 (0.4283)  loss_objectness: 0.0270 (0.0718)  loss_rpn_box_reg: 0.0126 (0.0271)  time: 0.1056 (0.1308)  data: 0.0014 (0.0200)  lr: 0.160000  max mem: 5047
DONE (t=1.04s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.94s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.15725
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.32379
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.13256
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.08088
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.18065
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.19809
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.17690
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.29748
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.31541
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.16185
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.34680
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.40963
2020-06-23 17:20:53,869 maskrcnn_benchmark.trainer INFO: eta: 1:24:38  iter: 1040  loss: 0.7728 (1.1213)  loss_classifier: 0.2416 (0.4380)  loss_box_reg: 0.1199 (0.1590)  loss_mask: 0.3309 (0.4263)  loss_objectness: 0.0250 (0.0712)  loss_rpn_box_reg: 0.0061 (0.0268)  time: 0.1070 (0.1303)  data: 0.0014 (0.0197)  lr: 0.160000  max mem: 5047
2020-06-23 17:20:55,995 maskrcnn_benchmark.trainer INFO: eta: 1:24:17  iter: 1060  loss: 0.8608 (1.1167)  loss_classifier: 0.2617 (0.4357)  loss_box_reg: 0.1405 (0.1589)  loss_mask: 0.3456 (0.4247)  loss_objectness: 0.0287 (0.0706)  loss_rpn_box_reg: 0.0150 (0.0267)  time: 0.1064 (0.1299)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 5047
2020-06-23 17:20:58,128 maskrcnn_benchmark.trainer INFO: eta: 1:23:58  iter: 1080  loss: 0.8676 (1.1122)  loss_classifier: 0.3138 (0.4336)  loss_box_reg: 0.1351 (0.1586)  loss_mask: 0.3393 (0.4233)  loss_objectness: 0.0249 (0.0700)  loss_rpn_box_reg: 0.0105 (0.0266)  time: 0.1058 (0.1295)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:00,278 maskrcnn_benchmark.trainer INFO: eta: 1:23:40  iter: 1100  loss: 0.8897 (1.1080)  loss_classifier: 0.3391 (0.4319)  loss_box_reg: 0.1346 (0.1583)  loss_mask: 0.3187 (0.4217)  loss_objectness: 0.0315 (0.0695)  loss_rpn_box_reg: 0.0150 (0.0266)  time: 0.1070 (0.1291)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:02,417 maskrcnn_benchmark.trainer INFO: eta: 1:23:22  iter: 1120  loss: 0.7978 (1.1040)  loss_classifier: 0.2906 (0.4297)  loss_box_reg: 0.1294 (0.1581)  loss_mask: 0.3193 (0.4201)  loss_objectness: 0.0299 (0.0694)  loss_rpn_box_reg: 0.0090 (0.0267)  time: 0.1065 (0.1287)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5047
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:21:04,560 maskrcnn_benchmark.trainer INFO: eta: 1:23:05  iter: 1140  loss: 0.9069 (1.1006)  loss_classifier: 0.3616 (0.4283)  loss_box_reg: 0.1483 (0.1580)  loss_mask: 0.3184 (0.4188)  loss_objectness: 0.0411 (0.0689)  loss_rpn_box_reg: 0.0141 (0.0266)  time: 0.1067 (0.1283)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5047
DONE (t=3.19s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:21:06,677 maskrcnn_benchmark.trainer INFO: eta: 1:22:47  iter: 1160  loss: 0.8171 (1.0954)  loss_classifier: 0.2723 (0.4259)  loss_box_reg: 0.1333 (0.1576)  loss_mask: 0.3142 (0.4169)  loss_objectness: 0.0344 (0.0685)  loss_rpn_box_reg: 0.0167 (0.0265)  time: 0.1050 (0.1279)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:08,799 maskrcnn_benchmark.trainer INFO: eta: 1:22:30  iter: 1180  loss: 0.7694 (1.0905)  loss_classifier: 0.2815 (0.4236)  loss_box_reg: 0.1170 (0.1571)  loss_mask: 0.3065 (0.4154)  loss_objectness: 0.0318 (0.0680)  loss_rpn_box_reg: 0.0118 (0.0264)  time: 0.1054 (0.1275)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5047
DONE (t=3.49s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.16310
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.30679
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.15943
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.05838
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.18491
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.24650
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.18532
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.29741
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.31268
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.14479
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.34942
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.42307
2020-06-23 17:21:10,334 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.15724742026495958, segm mAP: 0.16310049253048706
:::MLLOG {"namespace": "", "time_ms": 1592958070335, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.15724742026495958, "SEGM": 0.16310049253048706}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592958070335, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 1}}
2020-06-23 17:21:11,183 maskrcnn_benchmark.trainer INFO: eta: 1:22:22  iter: 1200  loss: 0.9109 (1.0863)  loss_classifier: 0.3256 (0.4221)  loss_box_reg: 0.1593 (0.1568)  loss_mask: 0.3182 (0.4138)  loss_objectness: 0.0292 (0.0674)  loss_rpn_box_reg: 0.0118 (0.0262)  time: 0.1060 (0.1274)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:13,299 maskrcnn_benchmark.trainer INFO: eta: 1:22:06  iter: 1220  loss: 0.8401 (1.0822)  loss_classifier: 0.3065 (0.4203)  loss_box_reg: 0.1278 (0.1565)  loss_mask: 0.3233 (0.4122)  loss_objectness: 0.0305 (0.0670)  loss_rpn_box_reg: 0.0122 (0.0262)  time: 0.1055 (0.1270)  data: 0.0013 (0.0170)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:15,430 maskrcnn_benchmark.trainer INFO: eta: 1:21:51  iter: 1240  loss: 0.7707 (1.0781)  loss_classifier: 0.2878 (0.4187)  loss_box_reg: 0.1362 (0.1563)  loss_mask: 0.3063 (0.4106)  loss_objectness: 0.0286 (0.0664)  loss_rpn_box_reg: 0.0117 (0.0261)  time: 0.1060 (0.1267)  data: 0.0014 (0.0167)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:17,592 maskrcnn_benchmark.trainer INFO: eta: 1:21:37  iter: 1260  loss: 0.6771 (1.0726)  loss_classifier: 0.2230 (0.4161)  loss_box_reg: 0.1163 (0.1558)  loss_mask: 0.3100 (0.4090)  loss_objectness: 0.0223 (0.0659)  loss_rpn_box_reg: 0.0095 (0.0258)  time: 0.1074 (0.1264)  data: 0.0014 (0.0165)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:19,718 maskrcnn_benchmark.trainer INFO: eta: 1:21:22  iter: 1280  loss: 0.8317 (1.0681)  loss_classifier: 0.3005 (0.4143)  loss_box_reg: 0.1412 (0.1556)  loss_mask: 0.2946 (0.4072)  loss_objectness: 0.0243 (0.0654)  loss_rpn_box_reg: 0.0092 (0.0256)  time: 0.1066 (0.1261)  data: 0.0015 (0.0162)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:21,855 maskrcnn_benchmark.trainer INFO: eta: 1:21:08  iter: 1300  loss: 0.8462 (1.0652)  loss_classifier: 0.3170 (0.4130)  loss_box_reg: 0.1337 (0.1556)  loss_mask: 0.3149 (0.4057)  loss_objectness: 0.0317 (0.0651)  loss_rpn_box_reg: 0.0175 (0.0257)  time: 0.1069 (0.1258)  data: 0.0014 (0.0160)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:24,000 maskrcnn_benchmark.trainer INFO: eta: 1:20:55  iter: 1320  loss: 0.7498 (1.0607)  loss_classifier: 0.2596 (0.4109)  loss_box_reg: 0.1143 (0.1552)  loss_mask: 0.3160 (0.4044)  loss_objectness: 0.0278 (0.0646)  loss_rpn_box_reg: 0.0064 (0.0256)  time: 0.1063 (0.1255)  data: 0.0013 (0.0158)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:26,132 maskrcnn_benchmark.trainer INFO: eta: 1:20:41  iter: 1340  loss: 0.8042 (1.0570)  loss_classifier: 0.3162 (0.4095)  loss_box_reg: 0.1227 (0.1548)  loss_mask: 0.2942 (0.4029)  loss_objectness: 0.0331 (0.0642)  loss_rpn_box_reg: 0.0102 (0.0255)  time: 0.1062 (0.1252)  data: 0.0014 (0.0156)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:28,275 maskrcnn_benchmark.trainer INFO: eta: 1:20:28  iter: 1360  loss: 0.8752 (1.0546)  loss_classifier: 0.3349 (0.4087)  loss_box_reg: 0.1510 (0.1548)  loss_mask: 0.3134 (0.4016)  loss_objectness: 0.0358 (0.0639)  loss_rpn_box_reg: 0.0202 (0.0255)  time: 0.1080 (0.1250)  data: 0.0014 (0.0154)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:30,412 maskrcnn_benchmark.trainer INFO: eta: 1:20:16  iter: 1380  loss: 0.8259 (1.0515)  loss_classifier: 0.2958 (0.4073)  loss_box_reg: 0.1257 (0.1546)  loss_mask: 0.3001 (0.4004)  loss_objectness: 0.0383 (0.0636)  loss_rpn_box_reg: 0.0157 (0.0257)  time: 0.1068 (0.1247)  data: 0.0015 (0.0152)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:32,545 maskrcnn_benchmark.trainer INFO: eta: 1:20:03  iter: 1400  loss: 0.7594 (1.0483)  loss_classifier: 0.2918 (0.4062)  loss_box_reg: 0.1212 (0.1543)  loss_mask: 0.3021 (0.3989)  loss_objectness: 0.0244 (0.0633)  loss_rpn_box_reg: 0.0106 (0.0257)  time: 0.1067 (0.1245)  data: 0.0014 (0.0150)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:34,683 maskrcnn_benchmark.trainer INFO: eta: 1:19:51  iter: 1420  loss: 0.7524 (1.0453)  loss_classifier: 0.2961 (0.4052)  loss_box_reg: 0.1236 (0.1539)  loss_mask: 0.3200 (0.3977)  loss_objectness: 0.0243 (0.0630)  loss_rpn_box_reg: 0.0164 (0.0255)  time: 0.1069 (0.1242)  data: 0.0014 (0.0148)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:36,840 maskrcnn_benchmark.trainer INFO: eta: 1:19:40  iter: 1440  loss: 0.7221 (1.0420)  loss_classifier: 0.2683 (0.4036)  loss_box_reg: 0.1285 (0.1536)  loss_mask: 0.2946 (0.3965)  loss_objectness: 0.0263 (0.0628)  loss_rpn_box_reg: 0.0129 (0.0255)  time: 0.1072 (0.1240)  data: 0.0014 (0.0146)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:38,978 maskrcnn_benchmark.trainer INFO: eta: 1:19:29  iter: 1460  loss: 0.7833 (1.0386)  loss_classifier: 0.2619 (0.4020)  loss_box_reg: 0.1470 (0.1533)  loss_mask: 0.3161 (0.3954)  loss_objectness: 0.0243 (0.0624)  loss_rpn_box_reg: 0.0117 (0.0254)  time: 0.1067 (0.1237)  data: 0.0014 (0.0144)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:41,119 maskrcnn_benchmark.trainer INFO: eta: 1:19:17  iter: 1480  loss: 0.7382 (1.0355)  loss_classifier: 0.2776 (0.4008)  loss_box_reg: 0.1344 (0.1532)  loss_mask: 0.3096 (0.3942)  loss_objectness: 0.0277 (0.0621)  loss_rpn_box_reg: 0.0085 (0.0253)  time: 0.1066 (0.1235)  data: 0.0014 (0.0142)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:43,278 maskrcnn_benchmark.trainer INFO: eta: 1:19:07  iter: 1500  loss: 0.7359 (1.0319)  loss_classifier: 0.2750 (0.3993)  loss_box_reg: 0.1151 (0.1528)  loss_mask: 0.3007 (0.3930)  loss_objectness: 0.0192 (0.0616)  loss_rpn_box_reg: 0.0103 (0.0251)  time: 0.1068 (0.1233)  data: 0.0014 (0.0141)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:45,431 maskrcnn_benchmark.trainer INFO: eta: 1:18:57  iter: 1520  loss: 0.7894 (1.0292)  loss_classifier: 0.3099 (0.3982)  loss_box_reg: 0.1158 (0.1526)  loss_mask: 0.3178 (0.3921)  loss_objectness: 0.0330 (0.0613)  loss_rpn_box_reg: 0.0107 (0.0251)  time: 0.1076 (0.1231)  data: 0.0014 (0.0139)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:47,570 maskrcnn_benchmark.trainer INFO: eta: 1:18:46  iter: 1540  loss: 0.8367 (1.0269)  loss_classifier: 0.3248 (0.3971)  loss_box_reg: 0.1454 (0.1525)  loss_mask: 0.3315 (0.3913)  loss_objectness: 0.0302 (0.0610)  loss_rpn_box_reg: 0.0154 (0.0250)  time: 0.1073 (0.1229)  data: 0.0015 (0.0137)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:49,710 maskrcnn_benchmark.trainer INFO: eta: 1:18:36  iter: 1560  loss: 0.8472 (1.0245)  loss_classifier: 0.3012 (0.3962)  loss_box_reg: 0.1501 (0.1524)  loss_mask: 0.3157 (0.3902)  loss_objectness: 0.0348 (0.0607)  loss_rpn_box_reg: 0.0126 (0.0250)  time: 0.1067 (0.1227)  data: 0.0014 (0.0136)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:51,855 maskrcnn_benchmark.trainer INFO: eta: 1:18:26  iter: 1580  loss: 0.8024 (1.0218)  loss_classifier: 0.2826 (0.3950)  loss_box_reg: 0.1465 (0.1523)  loss_mask: 0.3097 (0.3893)  loss_objectness: 0.0303 (0.0603)  loss_rpn_box_reg: 0.0098 (0.0248)  time: 0.1067 (0.1225)  data: 0.0014 (0.0134)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:53,975 maskrcnn_benchmark.trainer INFO: eta: 1:18:15  iter: 1600  loss: 0.7697 (1.0192)  loss_classifier: 0.2715 (0.3937)  loss_box_reg: 0.1194 (0.1521)  loss_mask: 0.3266 (0.3884)  loss_objectness: 0.0298 (0.0602)  loss_rpn_box_reg: 0.0094 (0.0248)  time: 0.1054 (0.1223)  data: 0.0014 (0.0133)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:56,118 maskrcnn_benchmark.trainer INFO: eta: 1:18:06  iter: 1620  loss: 0.7764 (1.0169)  loss_classifier: 0.2856 (0.3927)  loss_box_reg: 0.1400 (0.1520)  loss_mask: 0.3073 (0.3876)  loss_objectness: 0.0263 (0.0598)  loss_rpn_box_reg: 0.0092 (0.0248)  time: 0.1065 (0.1221)  data: 0.0014 (0.0131)  lr: 0.160000  max mem: 5047
2020-06-23 17:21:58,253 maskrcnn_benchmark.trainer INFO: eta: 1:17:56  iter: 1640  loss: 0.8098 (1.0149)  loss_classifier: 0.2783 (0.3916)  loss_box_reg: 0.1297 (0.1518)  loss_mask: 0.3207 (0.3866)  loss_objectness: 0.0290 (0.0598)  loss_rpn_box_reg: 0.0108 (0.0251)  time: 0.1068 (0.1219)  data: 0.0014 (0.0130)  lr: 0.160000  max mem: 5047
2020-06-23 17:22:00,387 maskrcnn_benchmark.trainer INFO: eta: 1:17:47  iter: 1660  loss: 0.7528 (1.0117)  loss_classifier: 0.2575 (0.3901)  loss_box_reg: 0.1194 (0.1515)  loss_mask: 0.3214 (0.3858)  loss_objectness: 0.0271 (0.0595)  loss_rpn_box_reg: 0.0076 (0.0249)  time: 0.1059 (0.1217)  data: 0.0014 (0.0129)  lr: 0.160000  max mem: 5047
2020-06-23 17:22:02,524 maskrcnn_benchmark.trainer INFO: eta: 1:17:37  iter: 1680  loss: 0.8308 (1.0092)  loss_classifier: 0.2959 (0.3890)  loss_box_reg: 0.1353 (0.1513)  loss_mask: 0.3111 (0.3850)  loss_objectness: 0.0289 (0.0591)  loss_rpn_box_reg: 0.0115 (0.0248)  time: 0.1059 (0.1216)  data: 0.0014 (0.0127)  lr: 0.160000  max mem: 5047
2020-06-23 17:22:04,667 maskrcnn_benchmark.trainer INFO: eta: 1:17:29  iter: 1700  loss: 0.7276 (1.0069)  loss_classifier: 0.2860 (0.3881)  loss_box_reg: 0.1231 (0.1510)  loss_mask: 0.3056 (0.3842)  loss_objectness: 0.0303 (0.0589)  loss_rpn_box_reg: 0.0140 (0.0248)  time: 0.1066 (0.1214)  data: 0.0014 (0.0126)  lr: 0.160000  max mem: 5047
2020-06-23 17:22:06,812 maskrcnn_benchmark.trainer INFO: eta: 1:17:20  iter: 1720  loss: 0.8824 (1.0050)  loss_classifier: 0.3258 (0.3872)  loss_box_reg: 0.1404 (0.1510)  loss_mask: 0.3092 (0.3833)  loss_objectness: 0.0270 (0.0587)  loss_rpn_box_reg: 0.0109 (0.0248)  time: 0.1068 (0.1212)  data: 0.0015 (0.0125)  lr: 0.160000  max mem: 5047
2020-06-23 17:22:08,960 maskrcnn_benchmark.trainer INFO: eta: 1:17:11  iter: 1740  loss: 0.8982 (1.0031)  loss_classifier: 0.3082 (0.3864)  loss_box_reg: 0.1452 (0.1509)  loss_mask: 0.3247 (0.3825)  loss_objectness: 0.0338 (0.0585)  loss_rpn_box_reg: 0.0115 (0.0248)  time: 0.1070 (0.1211)  data: 0.0015 (0.0123)  lr: 0.160000  max mem: 5047
2020-06-23 17:22:11,116 maskrcnn_benchmark.trainer INFO: eta: 1:17:03  iter: 1760  loss: 0.7686 (1.0013)  loss_classifier: 0.3112 (0.3856)  loss_box_reg: 0.1369 (0.1509)  loss_mask: 0.2907 (0.3816)  loss_objectness: 0.0298 (0.0584)  loss_rpn_box_reg: 0.0126 (0.0248)  time: 0.1085 (0.1209)  data: 0.0014 (0.0122)  lr: 0.160000  max mem: 5047
2020-06-23 17:22:13,269 maskrcnn_benchmark.trainer INFO: eta: 1:16:55  iter: 1780  loss: 0.8945 (0.9997)  loss_classifier: 0.3300 (0.3850)  loss_box_reg: 0.1599 (0.1508)  loss_mask: 0.3167 (0.3810)  loss_objectness: 0.0318 (0.0581)  loss_rpn_box_reg: 0.0138 (0.0248)  time: 0.1067 (0.1208)  data: 0.0015 (0.0121)  lr: 0.160000  max mem: 5047
2020-06-23 17:22:15,412 maskrcnn_benchmark.trainer INFO: eta: 1:16:47  iter: 1800  loss: 0.6768 (0.9968)  loss_classifier: 0.2565 (0.3837)  loss_box_reg: 0.0925 (0.1505)  loss_mask: 0.2884 (0.3799)  loss_objectness: 0.0325 (0.0579)  loss_rpn_box_reg: 0.0131 (0.0247)  time: 0.1069 (0.1206)  data: 0.0014 (0.0120)  lr: 0.160000  max mem: 5047
2020-06-23 17:22:17,560 maskrcnn_benchmark.trainer INFO: eta: 1:16:39  iter: 1820  loss: 0.7544 (0.9947)  loss_classifier: 0.2538 (0.3829)  loss_box_reg: 0.1215 (0.1503)  loss_mask: 0.2885 (0.3791)  loss_objectness: 0.0241 (0.0576)  loss_rpn_box_reg: 0.0077 (0.0249)  time: 0.1075 (0.1205)  data: 0.0014 (0.0119)  lr: 0.160000  max mem: 5047
:::MLLOG {"namespace": "", "time_ms": 1592958139627, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1592958139627, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1592958139627, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 2}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 17:22:19,857 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.30s)
index created!
creating index...
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.30s)
index created!
creating index...
index created!
Done (t=0.30s)
2020-06-23 17:22:20,187 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
creating index...
index created!
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:55,  1.40it/s]
  5%|         | 4/79 [00:00<00:38,  1.94it/s]
  8%|         | 6/79 [00:00<00:27,  2.66it/s]
 11%|        | 9/79 [00:01<00:19,  3.65it/s]
 15%|        | 12/79 [00:01<00:13,  4.92it/s]
 19%|        | 15/79 [00:01<00:09,  6.51it/s]
 23%|       | 18/79 [00:01<00:07,  8.41it/s]
 27%|       | 21/79 [00:01<00:05, 10.51it/s]
 30%|       | 24/79 [00:01<00:04, 12.81it/s]
 34%|      | 27/79 [00:01<00:03, 15.17it/s]
 38%|      | 30/79 [00:01<00:02, 17.33it/s]
 42%|     | 33/79 [00:01<00:02, 19.22it/s]
 46%|     | 36/79 [00:02<00:02, 20.88it/s]
 49%|     | 39/79 [00:02<00:01, 22.19it/s]
 53%|    | 42/79 [00:02<00:01, 23.21it/s]
 57%|    | 45/79 [00:02<00:01, 23.74it/s]
 61%|    | 48/79 [00:02<00:01, 24.32it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.29it/s]
  5%|         | 4/79 [00:00<00:41,  1.79it/s]
  9%|         | 7/79 [00:01<00:29,  2.48it/s]
 13%|        | 10/79 [00:01<00:20,  3.40it/s]
 16%|        | 13/79 [00:01<00:14,  4.60it/s]
 20%|        | 16/79 [00:01<00:10,  6.13it/s]
 24%|       | 19/79 [00:01<00:07,  7.94it/s]
 28%|       | 22/79 [00:01<00:05, 10.02it/s]
 32%|      | 25/79 [00:01<00:04, 12.31it/s]
 35%|      | 28/79 [00:01<00:03, 14.63it/s]
 39%|      | 31/79 [00:01<00:02, 16.94it/s]
 43%|     | 34/79 [00:02<00:02, 18.81it/s]
 47%|     | 37/79 [00:02<00:02, 20.47it/s]
 51%|     | 40/79 [00:02<00:01, 21.94it/s]
 54%|    | 43/79 [00:02<00:01, 23.16it/s]
 58%|    | 46/79 [00:02<00:01, 23.93it/s]
 62%|   | 49/79 [00:02<00:01, 24.50it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.64it/s]
 28%|       | 22/79 [00:01<00:05,  9.72it/s]
 32%|      | 25/79 [00:01<00:04, 11.98it/s]
 35%|      | 28/79 [00:01<00:03, 14.34it/s]
 39%|      | 31/79 [00:01<00:02, 16.56it/s]
 43%|     | 34/79 [00:02<00:02, 18.66it/s]
 47%|     | 37/79 [00:02<00:02, 20.32it/s]
 51%|     | 40/79 [00:02<00:01, 21.73it/s]
 54%|    | 43/79 [00:02<00:01, 23.04it/s]
 58%|    | 46/79 [00:02<00:01, 23.90it/s]
 62%|   | 49/79 [00:02<00:01, 24.27it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.30it/s]
  5%|         | 4/79 [00:00<00:41,  1.80it/s]
  9%|         | 7/79 [00:01<00:28,  2.50it/s]
 13%|        | 10/79 [00:01<00:20,  3.43it/s]
 16%|        | 13/79 [00:01<00:14,  4.64it/s]
 20%|        | 16/79 [00:01<00:10,  6.14it/s]
 24%|       | 19/79 [00:01<00:07,  7.98it/s]
 28%|       | 22/79 [00:01<00:05, 10.06it/s]
 32%|      | 25/79 [00:01<00:04, 12.36it/s]
 35%|      | 28/79 [00:01<00:03, 14.67it/s]
 39%|      | 31/79 [00:01<00:02, 16.92it/s]
 43%|     | 34/79 [00:02<00:02, 18.94it/s]
 47%|     | 37/79 [00:02<00:02, 20.64it/s]
 51%|     | 40/79 [00:02<00:01, 21.83it/s]
 54%|    | 43/79 [00:02<00:01, 22.95it/s]
 58%|    | 46/79 [00:02<00:01, 23.77it/s]
 62%|   | 49/79 [00:02<00:01, 24.31it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:29,  2.40it/s]
 13%|        | 10/79 [00:01<00:20,  3.30it/s]
 16%|        | 13/79 [00:01<00:14,  4.47it/s]
 20%|        | 16/79 [00:01<00:10,  5.94it/s]
 24%|       | 19/79 [00:01<00:07,  7.71it/s]
 28%|       | 22/79 [00:01<00:05,  9.76it/s]
 32%|      | 25/79 [00:01<00:04, 11.98it/s]
 35%|      | 28/79 [00:01<00:03, 14.27it/s]
 39%|      | 31/79 [00:01<00:02, 16.53it/s]
 43%|     | 34/79 [00:02<00:02, 18.43it/s]
 47%|     | 37/79 [00:02<00:02, 20.08it/s]
 51%|     | 40/79 [00:02<00:01, 21.49it/s]
 54%|    | 43/79 [00:02<00:01, 22.71it/s]
 58%|    | 46/79 [00:02<00:01, 23.52it/s]
 62%|   | 49/79 [00:02<00:01, 23.86it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.43it/s]
 20%|        | 16/79 [00:01<00:10,  5.90it/s]
 24%|       | 19/79 [00:01<00:07,  7.67it/s]
 28%|       | 22/79 [00:01<00:05,  9.75it/s]
 32%|      | 25/79 [00:01<00:04, 11.97it/s]
 35%|      | 28/79 [00:01<00:03, 14.29it/s]
 39%|      | 31/79 [00:01<00:02, 16.63it/s]
 43%|     | 34/79 [00:02<00:02, 18.63it/s]
 47%|     | 37/79 [00:02<00:02, 20.48it/s]
 51%|     | 40/79 [00:02<00:01, 21.69it/s]
 54%|    | 43/79 [00:02<00:01, 22.87it/s]
 58%|    | 46/79 [00:02<00:01, 23.38it/s]
 62%|   | 49/79 [00:02<00:01, 23.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.24it/s]
 16%|        | 13/79 [00:01<00:15,  4.40it/s]
 20%|        | 16/79 [00:01<00:10,  5.84it/s]
 24%|       | 19/79 [00:01<00:07,  7.60it/s]
 28%|       | 22/79 [00:01<00:05,  9.63it/s]
 32%|      | 25/79 [00:01<00:04, 11.85it/s]
 35%|      | 28/79 [00:01<00:03, 14.15it/s]
 39%|      | 31/79 [00:02<00:02, 16.35it/s]
 43%|     | 34/79 [00:02<00:02, 18.37it/s]
 47%|     | 37/79 [00:02<00:02, 20.07it/s]
 51%|     | 40/79 [00:02<00:01, 21.38it/s]
 54%|    | 43/79 [00:02<00:01, 22.56it/s]
 58%|    | 46/79 [00:02<00:01, 23.43it/s]
 62%|   | 49/79 [00:02<00:01, 24.19it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.82it/s]
 24%|       | 19/79 [00:01<00:07,  7.57it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.77it/s]
 35%|      | 28/79 [00:01<00:03, 14.04it/s]
 39%|      | 31/79 [00:02<00:02, 16.19it/s]
 43%|     | 34/79 [00:02<00:02, 18.04it/s]
 47%|     | 37/79 [00:02<00:02, 19.69it/s]
 51%|     | 40/79 [00:02<00:01, 21.01it/s]
 54%|    | 43/79 [00:02<00:01, 22.01it/s]
 58%|    | 46/79 [00:02<00:01, 22.77it/s]
 62%|   | 49/79 [00:02<00:01, 23.50it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.71it/s]
 24%|       | 19/79 [00:01<00:08,  7.43it/s]
 28%|       | 22/79 [00:01<00:06,  9.46it/s]
 32%|      | 25/79 [00:01<00:04, 11.65it/s]
 35%|      | 28/79 [00:01<00:03, 14.00it/s]
 39%|      | 31/79 [00:02<00:02, 16.25it/s]
 43%|     | 34/79 [00:02<00:02, 18.30it/s]
 47%|     | 37/79 [00:02<00:02, 19.96it/s]
 51%|     | 40/79 [00:02<00:01, 21.62it/s]
 54%|    | 43/79 [00:02<00:01, 22.80it/s]
 58%|    | 46/79 [00:02<00:01, 23.66it/s]
 62%|   | 49/79 [00:02<00:01, 24.36it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.41it/s]
 32%|      | 25/79 [00:01<00:04, 11.63it/s]
 35%|      | 28/79 [00:01<00:03, 13.90it/s]
 39%|      | 31/79 [00:02<00:02, 16.14it/s]
 43%|     | 34/79 [00:02<00:02, 18.13it/s]
 47%|     | 37/79 [00:02<00:02, 19.96it/s]
 51%|     | 40/79 [00:02<00:01, 21.38it/s]
 54%|    | 43/79 [00:02<00:01, 22.78it/s]
 58%|    | 46/79 [00:02<00:01, 23.62it/s]
 62%|   | 49/79 [00:02<00:01, 24.26it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.62it/s]
 32%|      | 25/79 [00:01<00:04, 11.85it/s]
 35%|      | 28/79 [00:01<00:03, 14.19it/s]
 39%|      | 31/79 [00:02<00:02, 16.30it/s]
 43%|     | 34/79 [00:02<00:02, 18.32it/s]
 47%|     | 37/79 [00:02<00:02, 19.90it/s]
 51%|     | 40/79 [00:02<00:01, 21.29it/s]
 54%|    | 43/79 [00:02<00:01, 22.37it/s]
 58%|    | 46/79 [00:02<00:01, 23.43it/s]
 62%|   | 49/79 [00:02<00:01, 24.05it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.33it/s]
 28%|       | 22/79 [00:01<00:06,  9.33it/s]
 32%|      | 25/79 [00:01<00:04, 11.53it/s]
 35%|      | 28/79 [00:01<00:03, 13.86it/s]
 39%|      | 31/79 [00:02<00:02, 16.07it/s]
 43%|     | 34/79 [00:02<00:02, 18.21it/s]
 47%|     | 37/79 [00:02<00:02, 19.81it/s]
 51%|     | 40/79 [00:02<00:01, 21.37it/s]
 54%|    | 43/79 [00:02<00:01, 22.65it/s]
 58%|    | 46/79 [00:02<00:01, 23.65it/s]
 62%|   | 49/79 [00:02<00:01, 24.32it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:15,  4.39it/s]
 20%|        | 16/79 [00:01<00:10,  5.83it/s]
 24%|       | 19/79 [00:01<00:07,  7.59it/s]
 28%|       | 22/79 [00:01<00:05,  9.66it/s]
 32%|      | 25/79 [00:01<00:04, 11.82it/s]
 35%|      | 28/79 [00:01<00:03, 14.08it/s]
 39%|      | 31/79 [00:02<00:02, 16.31it/s]
 43%|     | 34/79 [00:02<00:02, 18.40it/s]
 47%|     | 37/79 [00:02<00:02, 20.10it/s]
 51%|     | 40/79 [00:02<00:01, 21.28it/s]
 54%|    | 43/79 [00:02<00:01, 22.26it/s]
 58%|    | 46/79 [00:02<00:01, 23.11it/s]
 62%|   | 49/79 [00:02<00:01, 23.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:00<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.13it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.21it/s]
 28%|       | 22/79 [00:01<00:06,  9.22it/s]
 32%|      | 25/79 [00:01<00:04, 11.40it/s]
 35%|      | 28/79 [00:01<00:03, 13.75it/s]
 39%|      | 31/79 [00:02<00:03, 15.99it/s]
 43%|     | 34/79 [00:02<00:02, 18.12it/s]
 47%|     | 37/79 [00:02<00:02, 19.84it/s]
 51%|     | 40/79 [00:02<00:01, 21.51it/s]
 54%|    | 43/79 [00:02<00:01, 22.66it/s]
 58%|    | 46/79 [00:02<00:01, 23.41it/s]
 62%|   | 49/79 [00:02<00:01, 23.97it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.78it/s]
 24%|       | 19/79 [00:01<00:08,  7.50it/s]
 28%|       | 22/79 [00:01<00:06,  9.47it/s]
 32%|      | 25/79 [00:01<00:04, 11.66it/s]
 35%|      | 28/79 [00:01<00:03, 13.91it/s]
 39%|      | 31/79 [00:02<00:03, 15.93it/s]
 43%|     | 34/79 [00:02<00:02, 17.82it/s]
 47%|     | 37/79 [00:02<00:02, 19.39it/s]
 51%|     | 40/79 [00:02<00:01, 20.81it/s]
 54%|    | 43/79 [00:02<00:01, 21.76it/s]
 58%|    | 46/79 [00:02<00:01, 22.46it/s]
 62%|   | 49/79 [00:02<00:01, 23.42it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:15,  4.39it/s]
 20%|        | 16/79 [00:01<00:10,  5.84it/s]
 24%|       | 19/79 [00:01<00:07,  7.57it/s]
 28%|       | 22/79 [00:01<00:05,  9.59it/s]
 32%|      | 25/79 [00:01<00:04, 11.63it/s]
 35%|      | 28/79 [00:01<00:03, 13.78it/s]
 39%|      | 31/79 [00:02<00:03, 15.87it/s]
 43%|     | 34/79 [00:02<00:02, 17.73it/s]
 47%|     | 37/79 [00:02<00:02, 19.60it/s]
 51%|     | 40/79 [00:02<00:01, 21.11it/s]
 54%|    | 43/79 [00:02<00:01, 22.17it/s]
 58%|    | 46/79 [00:02<00:01, 23.17it/s]
 62%|   | 49/79 [00:02<00:01, 23.88it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.28it/s]
 32%|      | 25/79 [00:01<00:04, 11.45it/s]
 35%|      | 28/79 [00:01<00:03, 13.73it/s]
 39%|      | 31/79 [00:02<00:02, 16.01it/s]
 43%|     | 34/79 [00:02<00:02, 18.04it/s]
 47%|     | 37/79 [00:02<00:02, 19.80it/s]
 51%|     | 40/79 [00:02<00:01, 21.13it/s]
 54%|    | 43/79 [00:02<00:01, 22.30it/s]
 58%|    | 46/79 [00:02<00:01, 23.05it/s]
 62%|   | 49/79 [00:02<00:01, 23.70it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.39it/s]
 35%|      | 28/79 [00:01<00:03, 13.68it/s]
 39%|      | 31/79 [00:02<00:02, 16.02it/s]
 43%|     | 34/79 [00:02<00:02, 18.06it/s]
 47%|     | 37/79 [00:02<00:02, 19.94it/s]
 51%|     | 40/79 [00:02<00:01, 21.24it/s]
 54%|    | 43/79 [00:02<00:01, 22.47it/s]
 58%|    | 46/79 [00:02<00:01, 23.39it/s]
 62%|   | 49/79 [00:02<00:01, 24.02it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.31it/s]
 32%|      | 25/79 [00:01<00:04, 11.50it/s]
 35%|      | 28/79 [00:01<00:03, 13.78it/s]
 39%|      | 31/79 [00:02<00:03, 15.95it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.87it/s]
 51%|     | 40/79 [00:02<00:01, 20.89it/s]
 54%|    | 43/79 [00:02<00:01, 21.82it/s]
 58%|    | 46/79 [00:02<00:01, 22.86it/s]
 62%|   | 49/79 [00:02<00:01, 23.69it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.30it/s]
 28%|       | 22/79 [00:01<00:06,  9.25it/s]
 32%|      | 25/79 [00:01<00:04, 11.44it/s]
 35%|      | 28/79 [00:01<00:03, 13.65it/s]
 39%|      | 31/79 [00:02<00:03, 15.86it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.58it/s]
 51%|     | 40/79 [00:02<00:01, 21.04it/s]
 54%|    | 43/79 [00:02<00:01, 22.14it/s]
 58%|    | 46/79 [00:02<00:01, 22.97it/s]
 62%|   | 49/79 [00:02<00:01, 23.53it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.41it/s]
 35%|      | 28/79 [00:01<00:03, 13.62it/s]
 39%|      | 31/79 [00:02<00:03, 15.72it/s]
 43%|     | 34/79 [00:02<00:02, 17.61it/s]
 47%|     | 37/79 [00:02<00:02, 19.44it/s]
 51%|     | 40/79 [00:02<00:01, 20.86it/s]
 54%|    | 43/79 [00:02<00:01, 21.72it/s]
 58%|    | 46/79 [00:02<00:01, 22.59it/s]
 62%|   | 49/79 [00:02<00:01, 23.61it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.12it/s]
 28%|       | 22/79 [00:01<00:06,  9.06it/s]
 32%|      | 25/79 [00:01<00:04, 11.23it/s]
 35%|      | 28/79 [00:01<00:03, 13.46it/s]
 39%|      | 31/79 [00:02<00:03, 15.67it/s]
 43%|     | 34/79 [00:02<00:02, 17.62it/s]
 47%|     | 37/79 [00:02<00:02, 19.37it/s]
 51%|     | 40/79 [00:02<00:01, 20.80it/s]
 54%|    | 43/79 [00:02<00:01, 22.08it/s]
 58%|    | 46/79 [00:02<00:01, 22.95it/s]
 62%|   | 49/79 [00:02<00:01, 23.53it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.09it/s]
 20%|        | 16/79 [00:01<00:11,  5.46it/s]
 24%|       | 19/79 [00:01<00:08,  7.13it/s]
 28%|       | 22/79 [00:01<00:06,  9.09it/s]
 32%|      | 25/79 [00:01<00:04, 11.23it/s]
 35%|      | 28/79 [00:01<00:03, 13.50it/s]
 39%|      | 31/79 [00:02<00:03, 15.61it/s]
 43%|     | 34/79 [00:02<00:02, 17.55it/s]
 47%|     | 37/79 [00:02<00:02, 19.18it/s]
 51%|     | 40/79 [00:02<00:01, 20.73it/s]
 54%|    | 43/79 [00:02<00:01, 21.98it/s]
 58%|    | 46/79 [00:02<00:01, 22.56it/s]
 62%|   | 49/79 [00:02<00:01, 23.21it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.26it/s]
 28%|       | 22/79 [00:01<00:06,  9.25it/s]
 32%|      | 25/79 [00:01<00:04, 11.40it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.82it/s]
 43%|     | 34/79 [00:02<00:02, 17.75it/s]
 47%|     | 37/79 [00:02<00:02, 19.34it/s]
 51%|     | 40/79 [00:02<00:01, 20.70it/s]
 54%|    | 43/79 [00:02<00:01, 21.99it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.70it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.13it/s]
 28%|       | 22/79 [00:01<00:06,  9.04it/s]
 32%|      | 25/79 [00:01<00:04, 11.18it/s]
 35%|      | 28/79 [00:01<00:03, 13.41it/s]
 39%|      | 31/79 [00:02<00:03, 15.58it/s]
 43%|     | 34/79 [00:02<00:02, 17.57it/s]
 47%|     | 37/79 [00:02<00:02, 19.41it/s]
 51%|     | 40/79 [00:02<00:01, 20.79it/s]
 54%|    | 43/79 [00:02<00:01, 21.80it/s]
 58%|    | 46/79 [00:02<00:01, 22.67it/s]
 62%|   | 49/79 [00:02<00:01, 23.15it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  4%|         | 3/79 [00:00<00:46,  1.64it/s]
  8%|         | 6/79 [00:01<00:32,  2.27it/s]
 11%|        | 9/79 [00:01<00:22,  3.12it/s]
 15%|        | 12/79 [00:01<00:15,  4.22it/s]
 19%|        | 15/79 [00:01<00:11,  5.61it/s]
 23%|       | 18/79 [00:01<00:08,  7.30it/s]
 27%|       | 21/79 [00:01<00:06,  9.24it/s]
 30%|       | 24/79 [00:01<00:04, 11.37it/s]
 34%|      | 27/79 [00:01<00:03, 13.54it/s]
 38%|      | 30/79 [00:02<00:03, 15.48it/s]
 42%|     | 33/79 [00:02<00:02, 17.30it/s]
 46%|     | 36/79 [00:02<00:02, 18.93it/s]
 49%|     | 39/79 [00:02<00:01, 20.15it/s]
 53%|    | 42/79 [00:02<00:01, 21.00it/s]
 57%|    | 45/79 [00:02<00:01, 21.94it/s]
 61%|    | 48/79 [00:02<00:01, 22.77it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.02it/s]
 32%|      | 25/79 [00:01<00:04, 11.15it/s]
 35%|      | 28/79 [00:01<00:03, 13.34it/s]
 39%|      | 31/79 [00:02<00:03, 15.49it/s]
 43%|     | 34/79 [00:02<00:02, 17.52it/s]
 47%|     | 37/79 [00:02<00:02, 19.15it/s]
 51%|     | 40/79 [00:02<00:01, 20.49it/s]
 54%|    | 43/79 [00:02<00:01, 21.67it/s]
 58%|    | 46/79 [00:02<00:01, 22.62it/s]
 62%|   | 49/79 [00:02<00:01, 23.25it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.95it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.92it/s]
 28%|       | 22/79 [00:01<00:06,  8.81it/s]
 32%|      | 25/79 [00:01<00:04, 10.96it/s]
 35%|      | 28/79 [00:02<00:03, 13.14it/s]
 39%|      | 31/79 [00:02<00:03, 15.36it/s]
 43%|     | 34/79 [00:02<00:02, 17.44it/s]
 47%|     | 37/79 [00:02<00:02, 19.07it/s]
 51%|     | 40/79 [00:02<00:01, 20.53it/s]
 54%|    | 43/79 [00:02<00:01, 21.55it/s]
 58%|    | 46/79 [00:02<00:01, 22.50it/s]
 62%|   | 49/79 [00:02<00:01, 23.18it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.10it/s]
 32%|      | 25/79 [00:01<00:04, 11.21it/s]
 35%|      | 28/79 [00:01<00:03, 13.37it/s]
 39%|      | 31/79 [00:02<00:03, 15.54it/s]
 43%|     | 34/79 [00:02<00:02, 17.46it/s]
 47%|     | 37/79 [00:02<00:02, 19.04it/s]
 51%|     | 40/79 [00:02<00:01, 20.34it/s]
 54%|    | 43/79 [00:02<00:01, 21.47it/s]
 58%|    | 46/79 [00:02<00:01, 21.84it/s]
 62%|   | 49/79 [00:02<00:01, 22.26it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.24it/s]
 24%|       | 19/79 [00:01<00:08,  6.90it/s]
 28%|       | 22/79 [00:01<00:06,  8.80it/s]
 32%|      | 25/79 [00:01<00:04, 10.97it/s]
 35%|      | 28/79 [00:02<00:03, 13.21it/s]
 39%|      | 31/79 [00:02<00:03, 15.34it/s]
 43%|     | 34/79 [00:02<00:02, 17.30it/s]
 47%|     | 37/79 [00:02<00:02, 19.00it/s]
 51%|     | 40/79 [00:02<00:01, 20.35it/s]
 54%|    | 43/79 [00:02<00:01, 21.34it/s]
 58%|    | 46/79 [00:02<00:01, 22.45it/s]
 62%|   | 49/79 [00:02<00:01, 22.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  3.99it/s]
 20%|        | 16/79 [00:01<00:11,  5.33it/s]
 24%|       | 19/79 [00:01<00:08,  6.96it/s]
 28%|       | 22/79 [00:01<00:06,  8.86it/s]
 32%|      | 25/79 [00:01<00:04, 10.96it/s]
 35%|      | 28/79 [00:02<00:03, 13.20it/s]
 39%|      | 31/79 [00:02<00:03, 15.34it/s]
 43%|     | 34/79 [00:02<00:02, 17.24it/s]
 47%|     | 37/79 [00:02<00:02, 18.92it/s]
 51%|     | 40/79 [00:02<00:01, 20.24it/s]
 54%|    | 43/79 [00:02<00:01, 21.58it/s]
 58%|    | 46/79 [00:02<00:01, 22.05it/s]
 62%|   | 49/79 [00:02<00:01, 22.69it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.92it/s]
 28%|       | 22/79 [00:01<00:06,  8.85it/s]
 32%|      | 25/79 [00:01<00:05, 10.80it/s]
 35%|      | 28/79 [00:02<00:03, 12.96it/s]
 39%|      | 31/79 [00:02<00:03, 15.11it/s]
 43%|     | 34/79 [00:02<00:02, 17.07it/s]
 47%|     | 37/79 [00:02<00:02, 18.77it/s]
 51%|     | 40/79 [00:02<00:01, 20.15it/s]
 54%|    | 43/79 [00:02<00:01, 21.06it/s]
 58%|    | 46/79 [00:02<00:01, 22.09it/s]
 62%|   | 49/79 [00:02<00:01, 22.78it/s]
 66%|   | 52/79 [00:03<00:0182it/s]
 68%|   | 54/79 [00:02<00:00, 25.19it/s]
 72%|  | 57/79 [00:02<00:00, 25.79it/s]
 76%|  | 60/79 [00:03<00:00, 25.74it/s]
 80%|  | 63/79 [00:03<00:00, 25.76it/s]
 84%| | 66/79 [00:03<00:00, 25.83it/s]
 87%| | 69/79 [00:03<00:00, 25.86it/s]
 91%| | 72/79 [00:03<00:00, 25.98it/s]
 95%|| 75/79 [00:03<00:00, 26.64it/s]
 99%|| 78/79 [00:03<00:00, 26.93it/s]
100%|| 79/79 [00:03<00:00, 20.81it/s]
, 24.89it/s]
 70%|   | 55/79 [00:02<00:00, 25.33it/s]
 73%|  | 58/79 [00:03<00:00, 25.12it/s]
 77%|  | 61/79 [00:03<00:00, 25.44it/s]
 81%|  | 64/79 [00:03<00:00, 25.42it/s]
 85%| | 67/79 [00:03<00:00, 25.57it/s]
 89%| | 70/79 [00:03<00:00, 25.39it/s]
 92%|| 73/79 [00:03<00:00, 25.89it/s]
 96%|| 76/79 [00:03<00:00, 26.36it/s]
100%|| 79/79 [00:03<00:00, 27.30it/s]
, 24.84it/s]
 70%|   | 55/79 [00:02<00:00, 25.17it/s]
 73%|  | 58/79 [00:03<00:00, 25.39it/s]
 77%|  | 61/79 [00:03<00:00, 25.47it/s]
 81%|  | 64/79 [00:03<00:00, 25.50it/s]
 85%| | 67/79 [00:03<00:00, 25.63it/s]
 89%| | 70/79 [00:03<00:00, 25.72it/s]
 92%|| 73/79 [00:03<00:00, 25.74it/s]
 96%|| 76/79 [00:03<00:00, 26.42it/s]
100%|| 79/79 [00:03<00:00, 27.11it/s]
, 24.68it/s]
 70%|   | 55/79 [00:02<00:00, 25.02it/s]
 73%|  | 58/79 [00:02<00:00, 25.54it/s]
 77%|  | 61/79 [00:03<00:00, 25.42it/s]
 81%|  | 64/79 [00:03<00:00, 25.52it/s]
 85%| | 67/79 [00:03<00:00, 25.71it/s]
 89%| | 70/79 [00:03<00:00, 25.80it/s]
 92%|| 73/79 [00:03<00:00, 26.02it/s]
 96%|| 76/79 [00:03<00:00, 26.50it/s]
100%|| 79/79 [00:03<00:00, 27.31it/s]
, 24.65it/s]
 70%|   | 55/79 [00:02<00:00, 24.80it/s]
 73%|  | 58/79 [00:03<00:00, 25.22it/s]
 77%|  | 61/79 [00:03<00:00, 25.35it/s]
 81%|  | 64/79 [00:03<00:00, 25.65it/s]
 85%| | 67/79 [00:03<00:00, 25.65it/s]
 89%| | 70/79 [00:03<00:00, 25.85it/s]
 92%|| 73/79 [00:03<00:00, 26.21it/s]
 96%|| 76/79 [00:03<00:00, 26.86it/s]
100%|| 79/79 [00:03<00:00, 27.59it/s]
, 24.54it/s]
 70%|   | 55/79 [00:02<00:00, 24.78it/s]
 73%|  | 58/79 [00:03<00:00, 25.01it/s]
 77%|  | 61/79 [00:03<00:00, 25.34it/s]
 81%|  | 64/79 [00:03<00:00, 25.45it/s]
 85%| | 67/79 [00:03<00:00, 25.90it/s]
 89%| | 70/79 [00:03<00:00, 26.08it/s]
 92%|| 73/79 [00:03<00:00, 26.33it/s]
 96%|| 76/79 [00:03<00:00, 26.89it/s]
100%|| 79/79 [00:03<00:00, 27.71it/s]
, 24.26it/s]
 70%|   | 55/79 [00:02<00:00, 24.76it/s]
 73%|  | 58/79 [00:03<00:00, 24.91it/s]
 77%|  | 61/79 [00:03<00:00, 24.98it/s]
 81%|  | 64/79 [00:03<00:00, 25.03it/s]
 85%| | 67/79 [00:03<00:00, 25.08it/s]
 89%| | 70/79 [00:03<00:00, 25.09it/s]
 92%|| 73/79 [00:03<00:00, 25.61it/s]
 96%|| 76/79 [00:03<00:00, 26.31it/s]
100%|| 79/79 [00:03<00:00, 27.25it/s]
, 24.20it/s]
 70%|   | 55/79 [00:02<00:00, 24.45it/s]
 73%|  | 58/79 [00:03<00:00, 24.75it/s]
 77%|  | 61/79 [00:03<00:00, 24.76it/s]
 81%|  | 64/79 [00:03<00:00, 24.81it/s]
 85%| | 67/79 [00:03<00:00, 25.20it/s]
 89%| | 70/79 [00:03<00:00, 25.00it/s]
 92%|| 73/79 [00:03<00:00, 25.42it/s]
 96%|| 76/79 [00:03<00:00, 26.09it/s]
100%|| 79/79 [00:03<00:00, 20.05it/s]
, 23.26it/s]
 70%|   | 55/79 [00:02<00:01, 23.86it/s]
 73%|  | 58/79 [00:03<00:00, 24.21it/s]
 77%|  | 61/79 [00:03<00:00, 24.45it/s]
 81%|  | 64/79 [00:03<00:00, 24.28it/s]
 85%| | 67/79 [00:03<00:00, 24.59it/s]
 89%| | 70/79 [00:03<00:00, 24.96it/s]
 92%|| 73/79 [00:03<00:00, 25.39it/s]
 96%|| 76/79 [00:03<00:00, 26.18it/s]
100%|| 79/79 [00:03<00:00, 27.16it/s]
, 24.77it/s]
 70%|   | 55/79 [00:02<00:00, 25.14it/s]
 73%|  | 58/79 [00:03<00:00, 25.44it/s]
 77%|  | 61/79 [00:03<00:00, 25.51it/s]
 81%|  | 64/79 [00:03<00:00, 25.26it/s]
 85%| | 67/79 [00:03<00:00, 25.44it/s]
 89%| | 70/79 [00:03<00:00, 25.46it/s]
 92%|| 73/79 [00:03<00:00, 25.77it/s]
 96%|| 76/79 [00:03<00:00, 26.28it/s]
100%|| 79/79 [00:03<00:00, 27.02it/s]
, 24.73it/s]
 70%|   | 55/79 [00:02<00:00, 24.92it/s]
 73%|  | 58/79 [00:03<00:00, 24.90it/s]
 77%|  | 61/79 [00:03<00:00, 25.04it/s]
 81%|  | 64/79 [00:03<00:00, 25.03it/s]
 85%| | 67/79 [00:03<00:00, 25.05it/s]
 89%| | 70/79 [00:03<00:00, 25.25it/s]
 92%|| 73/79 [00:03<00:00, 25.55it/s]
 96%|| 76/79 [00:03<00:00, 26.10it/s]
100%|| 79/79 [00:03<00:00, 27.11it/s]
, 24.05it/s]
 70%|   | 55/79 [00:02<00:00, 24.40it/s]
 73%|  | 58/79 [00:03<00:00, 24.76it/s]
 77%|  | 61/79 [00:03<00:00, 24.85it/s]
 81%|  | 64/79 [00:03<00:00, 25.01it/s]
 85%| | 67/79 [00:03<00:00, 25.08it/s]
 89%| | 70/79 [00:03<00:00, 25.27it/s]
 92%|| 73/79 [00:03<00:00, 25.62it/s]
 97%|| 77/79 [00:03<00:00, 26.66it/s]
100%|| 79/79 [00:03<00:00, 19.78it/s]
, 24.58it/s]
 70%|   | 55/79 [00:02<00:00, 25.16it/s]
 73%|  | 58/79 [00:03<00:00, 25.29it/s]
 77%|  | 61/79 [00:03<00:00, 25.54it/s]
 81%|  | 64/79 [00:03<00:00, 25.59it/s]
 85%| | 67/79 [00:03<00:00, 25.58it/s]
 89%| | 70/79 [00:03<00:00, 25.64it/s]
 92%|| 73/79 [00:03<00:00, 25.77it/s]
 96%|| 76/79 [00:03<00:00, 26.52it/s]
100%|| 79/79 [00:03<00:00, 27.28it/s]
, 24.34it/s]
 70%|   | 55/79 [00:02<00:00, 24.77it/s]
 73%|  | 58/79 [00:03<00:00, 25.09it/s]
 77%|  | 61/79 [00:03<00:00, 25.10it/s]
 81%|  | 64/79 [00:03<00:00, 25.18it/s]
 85%| | 67/79 [00:03<00:00, 25.41it/s]
 89%| | 70/79 [00:03<00:00, 25.50it/s]
 92%|| 73/79 [00:03<00:00, 25.77it/s]
 96%|| 76/79 [00:03<00:00, 26.40it/s]
100%|| 79/79 [00:03<00:00, 27.21it/s]
, 24.19it/s]
 70%|   | 55/79 [00:03<00:00, 24.61it/s]
 73%|  | 58/79 [00:03<00:00, 25.06it/s]
 77%|  | 61/79 [00:03<00:00, 25.19it/s]
 81%|  | 64/79 [00:03<00:00, 25.39it/s]
 85%| | 67/79 [00:03<00:00, 25.53it/s]
 89%| | 70/79 [00:03<00:00, 25.87it/s]
 92%|| 73/79 [00:03<00:00, 25.92it/s]
 96%|| 76/79 [00:03<00:00, 26.69it/s]
100%|| 79/79 [00:03<00:00, 27.49it/s]
, 23.78it/s]
 70%|   | 55/79 [00:02<00:00, 24.28it/s]
 73%|  | 58/79 [00:03<00:00, 24.50it/s]
 77%|  | 61/79 [00:03<00:00, 24.75it/s]
 81%|  | 64/79 [00:03<00:00, 24.72it/s]
 85%| | 67/79 [00:03<00:00, 24.88it/s]
 89%| | 70/79 [00:03<00:00, 24.76it/s]
 92%|| 73/79 [00:03<00:00, 25.18it/s]
 96%|| 76/79 [00:03<00:00, 25.97it/s]
100%|| 79/79 [00:03<00:00, 26.92it/s]
, 24.53it/s]
 70%|   | 55/79 [00:02<00:00, 25.00it/s]
 73%|  | 58/79 [00:03<00:00, 25.11it/s]
 77%|  | 61/79 [00:03<00:00, 25.17it/s]
 81%|  | 64/79 [00:03<00:00, 25.02it/s]
 85%| | 67/79 [00:03<00:00, 25.10it/s]
 89%| | 70/79 [00:03<00:00, 25.00it/s]
 92%|| 73/79 [00:03<00:00, 25.54it/s]
 96%|| 76/79 [00:03<00:00, 26.24it/s]
100%|| 79/79 [00:03<00:00, 27.19it/s]
, 23.71it/s]
 70%|   | 55/79 [00:03<00:00, 24.08it/s]
 73%|  | 58/79 [00:03<00:00, 24.20it/s]
 77%|  | 61/79 [00:03<00:00, 24.51it/s]
 81%|  | 64/79 [00:03<00:00, 24.43it/s]
 85%| | 67/79 [00:03<00:00, 24.50it/s]
 89%| | 70/79 [00:03<00:00, 24.72it/s]
 92%|| 73/79 [00:03<00:00, 25.23it/s]
 96%|| 76/79 [00:03<00:00, 26.03it/s]
100%|| 79/79 [00:03<00:00, 27.00it/s]
, 23.99it/s]
 70%|   | 55/79 [00:03<00:00, 24.32it/s]
 73%|  | 58/79 [00:03<00:00, 24.55it/s]
 77%|  | 61/79 [00:03<00:00, 24.94it/s]
 81%|  | 64/79 [00:03<00:00, 24.86it/s]
 85%| | 67/79 [00:03<00:00, 24.79it/s]
 89%| | 70/79 [00:03<00:00, 24.47it/s]
 92%|| 73/79 [00:03<00:00, 25.16it/s]
 96%|| 76/79 [00:03<00:00, 25.77it/s]
100%|| 79/79 [00:03<00:00, 26.83it/s]
, 23.94it/s]
 70%|   | 55/79 [00:03<00:00, 24.18it/s]
 73%|  | 58/79 [00:03<00:00, 24.57it/s]
 77%|  | 61/79 [00:03<00:00, 24.72it/s]
 81%|  | 64/79 [00:03<00:00, 24.85it/s]
 85%| | 67/79 [00:03<00:00, 24.99it/s]
 89%| | 70/79 [00:03<00:00, 25.07it/s]
 92%|| 73/79 [00:03<00:00, 25.44it/s]
 96%|| 76/79 [00:03<00:00, 26.00it/s]
100%|| 79/79 [00:03<00:00, 26.76it/s]
, 24.13it/s]
 70%|   | 55/79 [00:03<00:00, 24.35it/s]
 73%|  | 58/79 [00:03<00:00, 24.86it/s]
 77%|  | 61/79 [00:03<00:00, 24.77it/s]
 81%|  | 64/79 [00:03<00:00, 24.85it/s]
 85%| | 67/79 [00:03<00:00, 25.14it/s]
 89%| | 70/79 [00:03<00:00, 25.23it/s]
 92%|| 73/79 [00:03<00:00, 25.44it/s]
 96%|| 76/79 [00:03<00:00, 26.10it/s]
100%|| 79/79 [00:03<00:00, 26.89it/s]
, 24.06it/s]
 70%|   | 55/79 [00:03<00:00, 24.56it/s]
 73%|  | 58/79 [00:03<00:00, 24.82it/s]
 77%|  | 61/79 [00:03<00:00, 24.78it/s]
 81%|  | 64/79 [00:03<00:00, 24.92it/s]
 85%| | 67/79 [00:03<00:00, 25.16it/s]
 89%| | 70/79 [00:03<00:00, 25.09it/s]
 92%|| 73/79 [00:03<00:00, 25.73it/s]
 96%|| 76/79 [00:03<00:00, 26.17it/s]
100%|| 79/79 [00:03<00:00, 27.16it/s]
, 23.77it/s]
 70%|   | 55/79 [00:03<00:00, 24.19it/s]
 73%|  | 58/79 [00:03<00:00, 24.54it/s]
 77%|  | 61/79 [00:03<00:00, 24.68it/s]
 81%|  | 64/79 [00:03<00:00, 24.32it/s]
 85%| | 67/79 [00:03<00:00, 24.69it/s]
 89%| | 70/79 [00:03<00:00, 25.05it/s]
 92%|| 73/79 [00:03<00:00, 24.93it/s]
 96%|| 76/79 [00:03<00:00, 25.71it/s]
100%|| 79/79 [00:03<00:00, 26.56it/s]
, 23.88it/s]
 70%|   | 55/79 [00:03<00:00, 24.39it/s]
 73%|  | 58/79 [00:03<00:00, 24.55it/s]
 77%|  | 61/79 [00:03<00:00, 24.63it/s]
 81%|  | 64/79 [00:03<00:00, 24.84it/s]
 85%| | 67/79 [00:03<00:00, 24.82it/s]
 89%| | 70/79 [00:03<00:00, 25.00it/s]
 92%|| 73/79 [00:03<00:00, 25.10it/s]
 96%|| 76/79 [00:03<00:00, 25.67it/s]
100%|| 79/79 [00:03<00:00, 26.54it/s]
, 23.55it/s]
 70%|   | 55/79 [00:03<00:01, 23.74it/s]
 73%|  | 58/79 [00:03<00:00, 23.96it/s]
 77%|  | 61/79 [00:03<00:00, 24.37it/s]
 81%|  | 64/79 [00:03<00:00, 24.71it/s]
 85%| | 67/79 [00:03<00:00, 24.66it/s]
 89%| | 70/79 [00:03<00:00, 24.74it/s]
 92%|| 73/79 [00:03<00:00, 25.01it/s]
 96%|| 76/79 [00:03<00:00, 25.91it/s]
100%|| 79/79 [00:04<00:00, 26.11it/s]
, 23.73it/s]
 70%|   | 55/79 [00:03<00:00, 24.40it/s]
 73%|  | 58/79 [00:03<00:00, 24.70it/s]
 77%|  | 61/79 [00:03<00:00, 25.02it/s]
 81%|  | 64/79 [00:03<00:00, 25.16it/s]
 85%| | 67/79 [00:03<00:00, 25.42it/s]
 89%| | 70/79 [00:03<00:00, 25.14it/s]
 92%|| 73/79 [00:03<00:00, 25.53it/s]
 96%|| 76/79 [00:03<00:00, 25.99it/s]
100%|| 79/79 [00:03<00:00, 26.70it/s]
, 23.53it/s]
 70%|   | 55/79 [00:03<00:00, 24.28it/s]
 73%|  | 58/79 [00:03<00:00, 24.42it/s]
 77%|  | 61/79 [00:03<00:00, 24.75it/s]
 81%|  | 64/79 [00:03<00:00, 25.05it/s]
 85%| | 67/79 [00:03<00:00, 25.22it/s]
 89%| | 70/79 [00:03<00:00, 25.03it/s]
 92%|| 73/79 [00:03<00:00, 25.31it/s]
 96%|| 76/79 [00:03<00:00, 25.79it/s]
100%|| 79/79 [00:04<00:00, 26.45it/s]
, 23.47it/s]
 70%|   | 55/79 [00:03<00:01, 23.74it/s]
 73%|  | 58/79 [00:03<00:00, 24.36it/s]
 77%|  | 61/79 [00:03<00:00, 24.59it/s]
 81%|  | 64/79 [00:03<00:00, 24.72it/s]
 85%| | 67/79 [00:03<00:00, 24.93it/s]
 89%| | 70/79 [00:03<00:00, 25.07it/s]
 92%|| 73/79 [00:03<00:00, 25.41it/s]
 96%|| 76/79 [00:03<00:00, 26.09it/s]
100%|| 79/79 [00:04<00:00, 26.81it/s]
17it/s]
 68%|   | 54/79 [00:03<00:01, 23.31it/s]
 72%|  | 57/79 [00:03<00:00, 23.45it/s]
 76%|  | 60/79 [00:03<00:00, 23.94it/s]
 80%|  | 63/79 [00:03<00:00, 24.09it/s]
 84%| | 66/79 [00:03<00:00, 24.11it/s]
 87%| | 69/79 [00:03<00:00, 24.14it/s]
 91%| | 72/79 [00:03<00:00, 24.34it/s]
 95%|| 75/79 [00:03<00:00, 25.15it/s]
 99%|| 78/79 [00:04<00:00, 25.73it/s]
100%|| 79/79 [00:04<00:00, 19.11it/s]
, 23.32it/s]
 70%|   | 55/79 [00:03<00:01, 23.83it/s]
 73%|  | 58/79 [00:03<00:00, 24.04it/s]
 77%|  | 61/79 [00:03<00:00, 24.31it/s]
 81%|  | 64/79 [00:03<00:00, 24.64it/s]
 85%| | 67/79 [00:03<00:00, 24.75it/s]
 89%| | 70/79 [00:03<00:00, 24.71it/s]
 92%|| 73/79 [00:03<00:00, 24.92it/s]
 96%|| 76/79 [00:03<00:00, 25.81it/s]
100%|| 79/79 [00:04<00:00, 26.48it/s]
, 23.17it/s]
 70%|   | 55/79 [00:03<00:01, 23.48it/s]
 73%|  | 58/79 [00:03<00:00, 23.90it/s]
 77%|  | 61/79 [00:03<00:00, 24.16it/s]
 81%|  | 64/79 [00:03<00:00, 24.10it/s]
 85%| | 67/79 [00:03<00:00, 24.16it/s]
 89%| | 70/79 [00:03<00:00, 24.39it/s]
 92%|| 73/79 [00:03<00:00, 24.84it/s]
 96%|| 76/79 [00:03<00:00, 25.54it/s]
100%|| 79/79 [00:04<00:00, 26.47it/s]
, 22.61it/s]
 70%|   | 55/79 [00:03<00:01, 22.80it/s]
 73%|  | 58/79 [00:03<00:00, 23.25it/s]
 77%|  | 61/79 [00:03<00:00, 23.33it/s]
 81%|  | 64/79 [00:03<00:00, 23.62it/s]
 85%| | 67/79 [00:03<00:00, 23.93it/s]
 89%| | 70/79 [00:03<00:00, 24.12it/s]
 92%|| 73/79 [00:03<00:00, 24.41it/s]
 96%|| 76/79 [00:03<00:00, 25.22it/s]
100%|| 79/79 [00:04<00:00, 26.22it/s]
2020-06-23 17:22:24,343 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.156002 (0.026598410034179686 s / img per device, on 32 devices)
2020-06-23 17:22:24,364 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:22:24,364 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:22:24,385 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592958155034, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 3, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592958155034, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 3}}
2020-06-23 17:22:35,675 maskrcnn_benchmark.trainer INFO: eta: 1:22:02  iter: 1840  loss: 0.8436 (0.9929)  loss_classifier: 0.2795 (0.3819)  loss_box_reg: 0.1232 (0.1501)  loss_mask: 0.3189 (0.3784)  loss_objectness: 0.0336 (0.0575)  loss_rpn_box_reg: 0.0107 (0.0250)  time: 0.1083 (0.1290)  data: 0.0015 (0.0201)  lr: 0.160000  max mem: 5047
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:22:37,837 maskrcnn_benchmark.trainer INFO: eta: 1:21:51  iter: 1860  loss: 0.7261 (0.9903)  loss_classifier: 0.2688 (0.3807)  loss_box_reg: 0.1211 (0.1498)  loss_mask: 0.3180 (0.3778)  loss_objectness: 0.0219 (0.0572)  loss_rpn_box_reg: 0.0089 (0.0248)  time: 0.1072 (0.1288)  data: 0.0014 (0.0199)  lr: 0.160000  max mem: 5047
2020-06-23 17:22:39,988 maskrcnn_benchmark.trainer INFO: eta: 1:21:40  iter: 1880  loss: 0.7791 (0.9878)  loss_classifier: 0.2690 (0.3797)  loss_box_reg: 0.1352 (0.1496)  loss_mask: 0.2996 (0.3769)  loss_objectness: 0.0189 (0.0568)  loss_rpn_box_reg: 0.0116 (0.0248)  time: 0.1072 (0.1286)  data: 0.0014 (0.0197)  lr: 0.160000  max mem: 5047
2020-06-23 17:22:42,158 maskrcnn_benchmark.trainer INFO: eta: 1:21:29  iter: 1900  loss: 0.7715 (0.9857)  loss_classifier: 0.2847 (0.3787)  loss_box_reg: 0.1360 (0.1495)  loss_mask: 0.3195 (0.3763)  loss_objectness: 0.0274 (0.0566)  loss_rpn_box_reg: 0.0078 (0.0247)  time: 0.1084 (0.1283)  data: 0.0014 (0.0195)  lr: 0.160000  max mem: 5047
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 17:22:44,299 maskrcnn_benchmark.trainer INFO: eta: 1:21:18  iter: 1920  loss: 0.9238 (0.9848)  loss_classifier: 0.3095 (0.3778)  loss_box_reg: 0.1251 (0.1494)  loss_mask: 0.3464 (0.3760)  loss_objectness: 0.0390 (0.0567)  loss_rpn_box_reg: 0.0198 (0.0249)  time: 0.1065 (0.1281)  data: 0.0014 (0.0193)  lr: 0.160000  max mem: 5047
DONE (t=0.92s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.94s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22143
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.41426
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.21799
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11465
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.24672
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.28359
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.22015
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.36071
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.38098
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19840
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.41128
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48929
2020-06-23 17:22:46,447 maskrcnn_benchmark.trainer INFO: eta: 1:21:08  iter: 1940  loss: 0.7528 (0.9827)  loss_classifier: 0.2691 (0.3769)  loss_box_reg: 0.1130 (0.1491)  loss_mask: 0.3069 (0.3753)  loss_objectness: 0.0405 (0.0567)  loss_rpn_box_reg: 0.0108 (0.0248)  time: 0.1067 (0.1279)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5047
2020-06-23 17:22:48,593 maskrcnn_benchmark.trainer INFO: eta: 1:20:57  iter: 1960  loss: 0.8043 (0.9811)  loss_classifier: 0.2801 (0.3762)  loss_box_reg: 0.1369 (0.1491)  loss_mask: 0.3138 (0.3746)  loss_objectness: 0.0287 (0.0564)  loss_rpn_box_reg: 0.0136 (0.0248)  time: 0.1076 (0.1277)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5047
2020-06-23 17:22:50,739 maskrcnn_benchmark.trainer INFO: eta: 1:20:47  iter: 1980  loss: 0.7801 (0.9791)  loss_classifier: 0.2963 (0.3754)  loss_box_reg: 0.1236 (0.1489)  loss_mask: 0.2900 (0.3739)  loss_objectness: 0.0276 (0.0562)  loss_rpn_box_reg: 0.0109 (0.0247)  time: 0.1067 (0.1275)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5047
2020-06-23 17:22:52,896 maskrcnn_benchmark.trainer INFO: eta: 1:20:37  iter: 2000  loss: 0.7273 (0.9771)  loss_classifier: 0.2727 (0.3746)  loss_box_reg: 0.1305 (0.1488)  loss_mask: 0.2947 (0.3731)  loss_objectness: 0.0244 (0.0559)  loss_rpn_box_reg: 0.0135 (0.0247)  time: 0.1069 (0.1273)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5047
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:22:55,050 maskrcnn_benchmark.trainer INFO: eta: 1:20:27  iter: 2020  loss: 0.7367 (0.9747)  loss_classifier: 0.2615 (0.3736)  loss_box_reg: 0.1282 (0.1486)  loss_mask: 0.2769 (0.3723)  loss_objectness: 0.0178 (0.0556)  loss_rpn_box_reg: 0.0114 (0.0246)  time: 0.1080 (0.1271)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5047
DONE (t=2.64s)
2020-06-23 17:22:57,189 maskrcnn_benchmark.trainer INFO: eta: 1:20:17  iter: 2040  loss: 0.7190 (0.9724)  loss_classifier: 0.2535 (0.3726)  loss_box_reg: 0.1118 (0.1484)  loss_mask: 0.2761 (0.3715)  loss_objectness: 0.0281 (0.0554)  loss_rpn_box_reg: 0.0109 (0.0246)  time: 0.1059 (0.1269)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5047
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:22:59,327 maskrcnn_benchmark.trainer INFO: eta: 1:20:07  iter: 2060  loss: 0.6950 (0.9702)  loss_classifier: 0.2532 (0.3717)  loss_box_reg: 0.1123 (0.1481)  loss_mask: 0.2733 (0.3707)  loss_objectness: 0.0282 (0.0552)  loss_rpn_box_reg: 0.0134 (0.0245)  time: 0.1067 (0.1267)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5047
DONE (t=3.28s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21748
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.38554
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.22477
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.08292
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.23625
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.32320
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.21962
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.34640
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36340
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.17129
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.39365
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48588
2020-06-23 17:23:01,007 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.22142809131660565, segm mAP: 0.21748061816700057
:::MLLOG {"namespace": "", "time_ms": 1592958181007, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.22142809131660565, "SEGM": 0.21748061816700057}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1592958181008, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 2}}
2020-06-23 17:23:01,642 maskrcnn_benchmark.trainer INFO: eta: 1:20:00  iter: 2080  loss: 0.6993 (0.9687)  loss_classifier: 0.2495 (0.3710)  loss_box_reg: 0.1156 (0.1481)  loss_mask: 0.3150 (0.3701)  loss_objectness: 0.0279 (0.0550)  loss_rpn_box_reg: 0.0124 (0.0245)  time: 0.1066 (0.1266)  data: 0.0015 (0.0180)  lr: 0.160000  max mem: 5047
2020-06-23 17:23:03,792 maskrcnn_benchmark.trainer INFO: eta: 1:19:51  iter: 2100  loss: 0.7895 (0.9669)  loss_classifier: 0.2760 (0.3701)  loss_box_reg: 0.1416 (0.1480)  loss_mask: 0.3198 (0.3696)  loss_objectness: 0.0274 (0.0548)  loss_rpn_box_reg: 0.0110 (0.0245)  time: 0.1063 (0.1264)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5047
2020-06-23 17:23:05,931 maskrcnn_benchmark.trainer INFO: eta: 1:19:41  iter: 2120  loss: 0.7426 (0.9645)  loss_classifier: 0.2834 (0.3690)  loss_box_reg: 0.1171 (0.1477)  loss_mask: 0.2807 (0.3687)  loss_objectness: 0.0233 (0.0545)  loss_rpn_box_reg: 0.0081 (0.0245)  time: 0.1063 (0.1262)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5047
2020-06-23 17:23:08,086 maskrcnn_benchmark.trainer INFO: eta: 1:19:32  iter: 2140  loss: 0.6357 (0.9622)  loss_classifier: 0.2549 (0.3682)  loss_box_reg: 0.0987 (0.1473)  loss_mask: 0.2579 (0.3679)  loss_objectness: 0.0199 (0.0543)  loss_rpn_box_reg: 0.0088 (0.0245)  time: 0.1072 (0.1261)  data: 0.0013 (0.0175)  lr: 0.160000  max mem: 5047
2020-06-23 17:23:10,241 maskrcnn_benchmark.trainer INFO: eta: 1:19:23  iter: 2160  loss: 0.8499 (0.9609)  loss_classifier: 0.3211 (0.3677)  loss_box_reg: 0.1533 (0.1473)  loss_mask: 0.2934 (0.3673)  loss_objectness: 0.0332 (0.0542)  loss_rpn_box_reg: 0.0192 (0.0245)  time: 0.1080 (0.1259)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5047
2020-06-23 17:23:12,396 maskrcnn_benchmark.trainer INFO: eta: 1:19:14  iter: 2180  loss: 0.7782 (0.9596)  loss_classifier: 0.2940 (0.3671)  loss_box_reg: 0.1376 (0.1472)  loss_mask: 0.2999 (0.3667)  loss_objectness: 0.0336 (0.0541)  loss_rpn_box_reg: 0.0163 (0.0245)  time: 0.1072 (0.1257)  data: 0.0015 (0.0172)  lr: 0.160000  max mem: 5047
2020-06-23 17:23:14,536 maskrcnn_benchmark.trainer INFO: eta: 1:19:06  iter: 2200  loss: 0.7873 (0.9579)  loss_classifier: 0.2631 (0.3662)  loss_box_reg: 0.1283 (0.1470)  loss_mask: 0.3254 (0.3663)  loss_objectness: 0.0260 (0.0539)  loss_rpn_box_reg: 0.0128 (0.0244)  time: 0.1069 (0.1256)  data: 0.0014 (0.0171)  lr: 0.160000  max mem: 5047
2020-06-23 17:23:16,643 maskrcnn_benchmark.trainer INFO: eta: 1:18:56  iter: 2220  loss: 0.7624 (0.9559)  loss_classifier: 0.2387 (0.3654)  loss_box_reg: 0.1218 (0.1468)  loss_mask: 0.2880 (0.3656)  loss_objectness: 0.0335 (0.0538)  loss_rpn_box_reg: 0.0087 (0.0243)  time: 0.1048 (0.1254)  data: 0.0014 (0.0169)  lr: 0.160000  max mem: 5047
2020-06-23 17:23:18,794 maskrcnn_benchmark.trainer INFO: eta: 1:18:48  iter: 2240  loss: 0.7708 (0.9543)  loss_classifier: 0.2616 (0.3646)  loss_box_reg: 0.1199 (0.1466)  loss_mask: 0.2923 (0.3650)  loss_objectness: 0.0295 (0.0538)  loss_rpn_box_reg: 0.0106 (0.0243)  time: 0.1076 (0.1252)  data: 0.0014 (0.0168)  lr: 0.160000  max mem: 5047
2020-06-23 17:23:20,944 maskrcnn_benchmark.trainer INFO: eta: 1:18:39  iter: 2260  loss: 0.7985 (0.9526)  loss_classifier: 0.2779 (0.3637)  loss_box_reg: 0.1282 (0.1463)  loss_mask: 0.2976 (0.3644)  loss_objectness: 0.0305 (0.0538)  loss_rpn_box_reg: 0.0093 (0.0243)  time: 0.1071 (0.1251)  data: 0.0014 (0.0167)  lr: 0.160000  max mem: 5047
2020-06-23 17:23:23,069 maskrcnn_benchmark.trainer INFO: eta: 1:18:30  iter: 2280  loss: 0.6693 (0.9506)  loss_classifier: 0.2422 (0.3629)  loss_box_reg: 0.1152 (0.1462)  loss_mask: 0.2852 (0.3637)  loss_objectness: 0.0237 (0.0536)  loss_rpn_box_reg: 0.0125 (0.0243)  time: 0.1059 (0.1249)  data: 0.0014 (0.0165)  lr: 0.160000  max mem: 5047
2020-06-23 17:23:25,207 maskrcnn_benchmark.trainer INFO: eta: 1:18:22  iter: 2300  loss: 0.8518 (0.9501)  loss_classifier: 0.3405 (0.3625)  loss_box_reg: 0.1448 (0.1462)  loss_mask: 0.2914 (0.3632)  loss_objectness: 0.0225 (0.0538)  loss_rpn_box_reg: 0.0155 (0.0244)  time: 0.1065 (0.1247)  data: 0.0014 (0.0164)  lr: 0.160000  max mem: 5047
2020-06-23 17:23:27,336 maskrcnn_benchmark.trainer INFO: eta: 1:18:14  iter: 2320  loss: 0.7297 (0.9488)  loss_classifier: 0.2832 (0.3619)  loss_box_reg: 0.1229 (0.1461)  loss_mask: 0.3208 (0.3627)  loss_objectness: 0.0224 (0.0537)  loss_rpn_box_reg: 0.0077 (0.0243)  time: 0.1061 (0.1246)  data: 0.0015 (0.0163)  lr: 0.160000  max mem: 5047
2020-06-23 17:23:29,472 maskrcnn_benchmark.trainer INFO: eta: 1:18:05  iter: 2340  loss: 0.6524 (0.9470)  loss_classifier: 0.2726 (0.3612)  loss_box_reg: 0.1014 (0.1459)  loss_mask: 0.2917 (0.3621)  loss_objectness: 0.0190 (0.0536)  loss_rpn_box_reg: 0.0102 (0.0243)  time: 0.1063 (0.1244)  data: 0.0014 (0.0161)  lr: 0.160000  max mem: 5047
2020-06-23 17:23:31,601 maskrcnn_benchmark.trainer INFO: eta: 1:17:57  iter: 2360  loss: 0.7172 (0.9453)  loss_classifier: 0.2723 (0.3605)  loss_box_reg: 0.1248 (0.1457)  loss_mask: 0.2961 (0.3615)  loss_objectness: 0.0222 (0.0533)  loss_rpn_box_reg: 0.0066 (0.0242)  time: 0.1056 (0.1243)  data: 0.0014 (0.0160)  lr: 0.160000  max mem: 5047
2020-06-23 17:23:33,757 maskrcnn_benchmark.trainer INFO: eta: 1:17:50  iter: 2380  loss: 0.6860 (0.9434)  loss_classifier: 0.2665 (0.3597)  loss_box_reg: 0.1136 (0.1455)  loss_mask: 0.2576 (0.3609)  loss_objectness: 0.0186 (0.0531)  loss_rpn_box_reg: 0.0081 (0.0241)  time: 0.1063 (0.1241)  data: 0.0014 (0.0159)  lr: 0.160000  max mem: 5155
2020-06-23 17:23:35,902 maskrcnn_benchmark.trainer INFO: eta: 1:17:42  iter: 2400  loss: 0.7730 (0.9420)  loss_classifier: 0.2879 (0.3591)  loss_box_reg: 0.1217 (0.1454)  loss_mask: 0.3148 (0.3606)  loss_objectness: 0.0250 (0.0529)  loss_rpn_box_reg: 0.0129 (0.0241)  time: 0.1075 (0.1240)  data: 0.0014 (0.0158)  lr: 0.160000  max mem: 5155
2020-06-23 17:23:38,050 maskrcnn_benchmark.trainer INFO: eta: 1:17:34  iter: 2420  loss: 0.7443 (0.9404)  loss_classifier: 0.2647 (0.3585)  loss_box_reg: 0.1071 (0.1452)  loss_mask: 0.2807 (0.3600)  loss_objectness: 0.0219 (0.0528)  loss_rpn_box_reg: 0.0111 (0.0240)  time: 0.1072 (0.1239)  data: 0.0013 (0.0156)  lr: 0.160000  max mem: 5155
2020-06-23 17:23:40,198 maskrcnn_benchmark.trainer INFO: eta: 1:17:27  iter: 2440  loss: 0.7426 (0.9387)  loss_classifier: 0.2726 (0.3578)  loss_box_reg: 0.1201 (0.1449)  loss_mask: 0.3022 (0.3594)  loss_objectness: 0.0277 (0.0526)  loss_rpn_box_reg: 0.0126 (0.0240)  time: 0.1071 (0.1237)  data: 0.0013 (0.0155)  lr: 0.160000  max mem: 5155
2020-06-23 17:23:42,357 maskrcnn_benchmark.trainer INFO: eta: 1:17:19  iter: 2460  loss: 0.6746 (0.9370)  loss_classifier: 0.2686 (0.3570)  loss_box_reg: 0.1147 (0.1448)  loss_mask: 0.2981 (0.3589)  loss_objectness: 0.0209 (0.0524)  loss_rpn_box_reg: 0.0097 (0.0239)  time: 0.1073 (0.1236)  data: 0.0013 (0.0154)  lr: 0.160000  max mem: 5155
2020-06-23 17:23:44,506 maskrcnn_benchmark.trainer INFO: eta: 1:17:12  iter: 2480  loss: 0.7653 (0.9356)  loss_classifier: 0.2776 (0.3563)  loss_box_reg: 0.1253 (0.1446)  loss_mask: 0.3006 (0.3585)  loss_objectness: 0.0298 (0.0523)  loss_rpn_box_reg: 0.0086 (0.0239)  time: 0.1065 (0.1235)  data: 0.0014 (0.0153)  lr: 0.160000  max mem: 5155
2020-06-23 17:23:46,666 maskrcnn_benchmark.trainer INFO: eta: 1:17:05  iter: 2500  loss: 0.7738 (0.9345)  loss_classifier: 0.2782 (0.3558)  loss_box_reg: 0.1171 (0.1445)  loss_mask: 0.2870 (0.3580)  loss_objectness: 0.0254 (0.0523)  loss_rpn_box_reg: 0.0094 (0.0239)  time: 0.1076 (0.1233)  data: 0.0014 (0.0152)  lr: 0.160000  max mem: 5155
2020-06-23 17:23:48,800 maskrcnn_benchmark.trainer INFO: eta: 1:16:57  iter: 2520  loss: 0.7015 (0.9327)  loss_classifier: 0.1994 (0.3548)  loss_box_reg: 0.0966 (0.1442)  loss_mask: 0.2988 (0.3576)  loss_objectness: 0.0189 (0.0522)  loss_rpn_box_reg: 0.0127 (0.0239)  time: 0.1066 (0.1232)  data: 0.0014 (0.0151)  lr: 0.160000  max mem: 5155
2020-06-23 17:23:50,945 maskrcnn_benchmark.trainer INFO: eta: 1:16:50  iter: 2540  loss: 0.7498 (0.9313)  loss_classifier: 0.2633 (0.3543)  loss_box_reg: 0.1293 (0.1441)  loss_mask: 0.2933 (0.3571)  loss_objectness: 0.0209 (0.0520)  loss_rpn_box_reg: 0.0095 (0.0239)  time: 0.1075 (0.1231)  data: 0.0014 (0.0150)  lr: 0.160000  max mem: 5155
2020-06-23 17:23:53,097 maskrcnn_benchmark.trainer INFO: eta: 1:16:43  iter: 2560  loss: 0.7441 (0.9302)  loss_classifier: 0.2892 (0.3538)  loss_box_reg: 0.1169 (0.1440)  loss_mask: 0.3123 (0.3567)  loss_objectness: 0.0209 (0.0518)  loss_rpn_box_reg: 0.0099 (0.0238)  time: 0.1070 (0.1230)  data: 0.0014 (0.0149)  lr: 0.160000  max mem: 5155
2020-06-23 17:23:55,240 maskrcnn_benchmark.trainer INFO: eta: 1:16:36  iter: 2580  loss: 0.7516 (0.9291)  loss_classifier: 0.2764 (0.3533)  loss_box_reg: 0.1358 (0.1440)  loss_mask: 0.2897 (0.3562)  loss_objectness: 0.0240 (0.0517)  loss_rpn_box_reg: 0.0099 (0.0238)  time: 0.1063 (0.1228)  data: 0.0014 (0.0148)  lr: 0.160000  max mem: 5155
2020-06-23 17:23:57,398 maskrcnn_benchmark.trainer INFO: eta: 1:16:29  iter: 2600  loss: 0.7902 (0.9282)  loss_classifier: 0.2605 (0.3530)  loss_box_reg: 0.1296 (0.1440)  loss_mask: 0.3025 (0.3559)  loss_objectness: 0.0310 (0.0516)  loss_rpn_box_reg: 0.0105 (0.0238)  time: 0.1076 (0.1227)  data: 0.0014 (0.0147)  lr: 0.160000  max mem: 5155
2020-06-23 17:23:59,547 maskrcnn_benchmark.trainer INFO: eta: 1:16:23  iter: 2620  loss: 0.7593 (0.9269)  loss_classifier: 0.2604 (0.3525)  loss_box_reg: 0.1305 (0.1438)  loss_mask: 0.2852 (0.3553)  loss_objectness: 0.0299 (0.0515)  loss_rpn_box_reg: 0.0169 (0.0238)  time: 0.1066 (0.1226)  data: 0.0014 (0.0146)  lr: 0.160000  max mem: 5155
2020-06-23 17:24:01,686 maskrcnn_benchmark.trainer INFO: eta: 1:16:16  iter: 2640  loss: 0.7533 (0.9254)  loss_classifier: 0.2547 (0.3518)  loss_box_reg: 0.1196 (0.1437)  loss_mask: 0.2969 (0.3549)  loss_objectness: 0.0215 (0.0513)  loss_rpn_box_reg: 0.0088 (0.0237)  time: 0.1068 (0.1225)  data: 0.0013 (0.0145)  lr: 0.160000  max mem: 5155
2020-06-23 17:24:03,872 maskrcnn_benchmark.trainer INFO: eta: 1:16:10  iter: 2660  loss: 0.7430 (0.9244)  loss_classifier: 0.2732 (0.3514)  loss_box_reg: 0.1310 (0.1436)  loss_mask: 0.2838 (0.3545)  loss_objectness: 0.0324 (0.0512)  loss_rpn_box_reg: 0.0096 (0.0237)  time: 0.1101 (0.1224)  data: 0.0015 (0.0144)  lr: 0.160000  max mem: 5155
2020-06-23 17:24:06,023 maskrcnn_benchmark.trainer INFO: eta: 1:16:03  iter: 2680  loss: 0.7518 (0.9235)  loss_classifier: 0.2810 (0.3510)  loss_box_reg: 0.1325 (0.1436)  loss_mask: 0.3020 (0.3541)  loss_objectness: 0.0280 (0.0511)  loss_rpn_box_reg: 0.0099 (0.0237)  time: 0.1070 (0.1223)  data: 0.0014 (0.0143)  lr: 0.160000  max mem: 5155
2020-06-23 17:24:08,161 maskrcnn_benchmark.trainer INFO: eta: 1:15:56  iter: 2700  loss: 0.6121 (0.9220)  loss_classifier: 0.2392 (0.3504)  loss_box_reg: 0.1050 (0.1433)  loss_mask: 0.3029 (0.3536)  loss_objectness: 0.0241 (0.0510)  loss_rpn_box_reg: 0.0070 (0.0237)  time: 0.1068 (0.1222)  data: 0.0014 (0.0142)  lr: 0.160000  max mem: 5155
2020-06-23 17:24:10,320 maskrcnn_benchmark.trainer INFO: eta: 1:15:50  iter: 2720  loss: 0.7816 (0.9208)  loss_classifier: 0.3201 (0.3499)  loss_box_reg: 0.1303 (0.1433)  loss_mask: 0.2926 (0.3532)  loss_objectness: 0.0261 (0.0508)  loss_rpn_box_reg: 0.0106 (0.0236)  time: 0.1079 (0.1221)  data: 0.0015 (0.0141)  lr: 0.160000  max mem: 5155
2020-06-23 17:24:12,468 maskrcnn_benchmark.trainer INFO: eta: 1:15:44  iter: 2740  loss: 0.7518 (0.9196)  loss_classifier: 0.2849 (0.3494)  loss_box_reg: 0.1297 (0.1432)  loss_mask: 0.2883 (0.3528)  loss_objectness: 0.0354 (0.0507)  loss_rpn_box_reg: 0.0110 (0.0236)  time: 0.1068 (0.1220)  data: 0.0014 (0.0140)  lr: 0.160000  max mem: 5155
:::MLLOG {"namespace": "", "time_ms": 1592958254215, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1592958254215, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1592958254215, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 3}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 17:24:14,471 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.30s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.30s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.31s)
creating index...
index created!
index created!
index created!
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!
2020-06-23 17:24:14,790 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:48,  1.62it/s]
  5%|         | 4/79 [00:00<00:33,  2.25it/s]
  9%|         | 7/79 [00:00<00:23,  3.09it/s]
 13%|        | 10/79 [00:00<00:16,  4.20it/s]
 16%|        | 13/79 [00:01<00:11,  5.59it/s]
 20%|        | 16/79 [00:01<00:08,  7.32it/s]
 24%|       | 19/79 [00:01<00:06,  9.30it/s]
 28%|       | 22/79 [00:01<00:04, 11.47it/s]
 32%|      | 25/79 [00:01<00:03, 13.80it/s]
 35%|      | 28/79 [00:01<00:03, 16.10it/s]
 39%|      | 31/79 [00:01<00:02, 18.17it/s]
 43%|     | 34/79 [00:01<00:02, 19.87it/s]
 47%|     | 37/79 [00:02<00:01, 21.46it/s]
 51%|     | 40/79 [00:02<00:01, 22.59it/s]
 54%|    | 43/79 [00:02<00:01, 23.53it/s]
 58%|    | 46/79 [00:02<00:01, 24.08it/s]
 62%|   | 49/79 [00:02<00:01, 24.75it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.27it/s]
  5%|         | 4/79 [00:00<00:42,  1.77it/s]
  9%|         | 7/79 [00:01<00:29,  2.46it/s]
 13%|        | 10/79 [00:01<00:20,  3.38it/s]
 16%|        | 13/79 [00:01<00:14,  4.58it/s]
 20%|        | 16/79 [00:01<00:10,  6.08it/s]
 24%|       | 19/79 [00:01<00:07,  7.90it/s]
 28%|       | 22/79 [00:01<00:05, 10.00it/s]
 32%|      | 25/79 [00:01<00:04, 12.27it/s]
 35%|      | 28/79 [00:01<00:03, 14.62it/s]
 39%|      | 31/79 [00:01<00:02, 16.82it/s]
 43%|     | 34/79 [00:02<00:02, 18.74it/s]
 47%|     | 37/79 [00:02<00:02, 20.48it/s]
 51%|     | 40/79 [00:02<00:01, 22.00it/s]
 54%|    | 43/79 [00:02<00:01, 23.05it/s]
 58%|    | 46/79 [00:02<00:01, 23.72it/s]
 62%|   | 49/79 [00:02<00:01, 24.57it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.45it/s]
 20%|        | 16/79 [00:01<00:10,  5.95it/s]
 24%|       | 19/79 [00:01<00:07,  7.70it/s]
 28%|       | 22/79 [00:01<00:05,  9.79it/s]
 32%|      | 25/79 [00:01<00:04, 12.12it/s]
 35%|      | 28/79 [00:01<00:03, 14.49it/s]
 39%|      | 31/79 [00:01<00:02, 16.71it/s]
 43%|     | 34/79 [00:02<00:02, 18.81it/s]
 47%|     | 37/79 [00:02<00:02, 20.60it/s]
 51%|     | 40/79 [00:02<00:01, 22.03it/s]
 54%|    | 43/79 [00:02<00:01, 23.30it/s]
 58%|    | 46/79 [00:02<00:01, 24.02it/s]
 62%|   | 49/79 [00:02<00:01, 24.50it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.27it/s]
  5%|         | 4/79 [00:00<00:42,  1.78it/s]
  9%|         | 7/79 [00:01<00:29,  2.46it/s]
 13%|        | 10/79 [00:01<00:20,  3.38it/s]
 16%|        | 13/79 [00:01<00:14,  4.58it/s]
 20%|        | 16/79 [00:01<00:10,  6.08it/s]
 24%|       | 19/79 [00:01<00:07,  7.89it/s]
 28%|       | 22/79 [00:01<00:05,  9.98it/s]
 32%|      | 25/79 [00:01<00:04, 12.19it/s]
 35%|      | 28/79 [00:01<00:03, 14.49it/s]
 39%|      | 31/79 [00:01<00:02, 16.56it/s]
 43%|     | 34/79 [00:02<00:02, 18.54it/s]
 47%|     | 37/79 [00:02<00:02, 20.02it/s]
 51%|     | 40/79 [00:02<00:01, 21.31it/s]
 54%|    | 43/79 [00:02<00:01, 22.42it/s]
 58%|    | 46/79 [00:02<00:01, 23.47it/s]
 62%|   | 49/79 [00:02<00:01, 24.05it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.24it/s]
  4%|         | 3/79 [00:00<00:44,  1.72it/s]
  8%|         | 6/79 [00:01<00:30,  2.38it/s]
 11%|        | 9/79 [00:01<00:21,  3.26it/s]
 15%|        | 12/79 [00:01<00:15,  4.42it/s]
 19%|        | 15/79 [00:01<00:10,  5.86it/s]
 23%|       | 18/79 [00:01<00:08,  7.62it/s]
 27%|       | 21/79 [00:01<00:05,  9.67it/s]
 30%|       | 24/79 [00:01<00:04, 11.90it/s]
 34%|      | 27/79 [00:01<00:03, 14.21it/s]
 38%|      | 30/79 [00:01<00:02, 16.53it/s]
 42%|     | 33/79 [00:02<00:02, 18.53it/s]
 46%|     | 36/79 [00:02<00:02, 20.20it/s]
 49%|     | 39/79 [00:02<00:01, 21.63it/s]
 53%|    | 42/79 [00:02<00:01, 22.66it/s]
 57%|    | 45/79 [00:02<00:01, 23.53it/s]
 61%|    | 48/79 [00:02<00:01, 24.04it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.43it/s]
 13%|        | 10/79 [00:01<00:20,  3.33it/s]
 16%|        | 13/79 [00:01<00:14,  4.51it/s]
 20%|        | 16/79 [00:01<00:10,  6.00it/s]
 24%|       | 19/79 [00:01<00:07,  7.78it/s]
 28%|       | 22/79 [00:01<00:05,  9.82it/s]
 32%|      | 25/79 [00:01<00:04, 12.09it/s]
 35%|      | 28/79 [00:01<00:03, 14.37it/s]
 39%|      | 31/79 [00:01<00:02, 16.49it/s]
 43%|     | 34/79 [00:02<00:02, 18.45it/s]
 47%|     | 37/79 [00:02<00:02, 20.11it/s]
 51%|     | 40/79 [00:02<00:01, 21.49it/s]
 54%|    | 43/79 [00:02<00:01, 22.56it/s]
 58%|    | 46/79 [00:02<00:01, 23.38it/s]
 62%|   | 49/79 [00:02<00:01, 24.16it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:30,  2.40it/s]
 13%|        | 10/79 [00:01<00:20,  3.29it/s]
 16%|        | 13/79 [00:01<00:14,  4.45it/s]
 20%|        | 16/79 [00:01<00:10,  5.90it/s]
 24%|       | 19/79 [00:01<00:07,  7.66it/s]
 28%|       | 22/79 [00:01<00:05,  9.70it/s]
 32%|      | 25/79 [00:01<00:04, 11.88it/s]
 35%|      | 28/79 [00:01<00:03, 14.16it/s]
 39%|      | 31/79 [00:02<00:02, 16.34it/s]
 43%|     | 34/79 [00:02<00:02, 18.46it/s]
 47%|     | 37/79 [00:02<00:02, 20.05it/s]
 51%|     | 40/79 [00:02<00:01, 21.36it/s]
 54%|    | 43/79 [00:02<00:01, 22.71it/s]
 58%|    | 46/79 [00:02<00:01, 23.60it/s]
 62%|   | 49/79 [00:02<00:01, 23.83it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.56it/s]
 28%|       | 22/79 [00:01<00:05,  9.57it/s]
 32%|      | 25/79 [00:01<00:04, 11.75it/s]
 35%|      | 28/79 [00:01<00:03, 14.03it/s]
 39%|      | 31/79 [00:02<00:02, 16.30it/s]
 43%|     | 34/79 [00:02<00:02, 18.35it/s]
 47%|     | 37/79 [00:02<00:02, 19.98it/s]
 51%|     | 40/79 [00:02<00:01, 21.45it/s]
 54%|    | 43/79 [00:02<00:01, 22.51it/s]
 58%|    | 46/79 [00:02<00:01, 23.36it/s]
 62%|   | 49/79 [00:02<00:01, 23.76it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.74it/s]
  9%|         | 7/79 [00:01<00:29,  2.41it/s]
 13%|        | 10/79 [00:01<00:20,  3.30it/s]
 16%|        | 13/79 [00:01<00:14,  4.47it/s]
 20%|        | 16/79 [00:01<00:10,  5.93it/s]
 24%|       | 19/79 [00:01<00:07,  7.70it/s]
 28%|       | 22/79 [00:01<00:05,  9.66it/s]
 32%|      | 25/79 [00:01<00:04, 11.83it/s]
 35%|      | 28/79 [00:01<00:03, 14.13it/s]
 39%|      | 31/79 [00:02<00:02, 16.35it/s]
 43%|     | 34/79 [00:02<00:02, 18.23it/s]
 47%|     | 37/79 [00:02<00:02, 19.93it/s]
 51%|     | 40/79 [00:02<00:01, 21.23it/s]
 54%|    | 43/79 [00:02<00:01, 22.21it/s]
 58%|    | 46/79 [00:02<00:01, 22.82it/s]
 62%|   | 49/79 [00:02<00:01, 23.25it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:43,  1.74it/s]
  9%|         | 7/79 [00:01<00:29,  2.42it/s]
 13%|        | 10/79 [00:01<00:20,  3.32it/s]
 16%|        | 13/79 [00:01<00:14,  4.48it/s]
 20%|        | 16/79 [00:01<00:10,  5.95it/s]
 24%|       | 19/79 [00:01<00:07,  7.74it/s]
 28%|       | 22/79 [00:01<00:05,  9.76it/s]
 32%|      | 25/79 [00:01<00:04, 11.98it/s]
 35%|      | 28/79 [00:01<00:03, 13.96it/s]
 39%|      | 31/79 [00:02<00:02, 16.11it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.67it/s]
 51%|     | 40/79 [00:02<00:01, 21.00it/s]
 54%|    | 43/79 [00:02<00:01, 22.38it/s]
 58%|    | 46/79 [00:02<00:01, 23.06it/s]
 62%|   | 49/79 [00:02<00:01, 23.65it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.43it/s]
 20%|        | 16/79 [00:01<00:10,  5.90it/s]
 24%|       | 19/79 [00:01<00:07,  7.67it/s]
 28%|       | 22/79 [00:01<00:05,  9.70it/s]
 32%|      | 25/79 [00:01<00:04, 11.76it/s]
 35%|      | 28/79 [00:01<00:03, 14.07it/s]
 39%|      | 31/79 [00:02<00:02, 16.32it/s]
 43%|     | 34/79 [00:02<00:02, 18.26it/s]
 47%|     | 37/79 [00:02<00:02, 20.13it/s]
 51%|     | 40/79 [00:02<00:01, 21.30it/s]
 54%|    | 43/79 [00:02<00:01, 22.30it/s]
 58%|    | 46/79 [00:02<00:01, 23.09it/s]
 62%|   | 49/79 [00:02<00:01, 23.53it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.43it/s]
 13%|        | 10/79 [00:01<00:20,  3.33it/s]
 16%|        | 13/79 [00:01<00:14,  4.50it/s]
 20%|        | 16/79 [00:01<00:10,  5.98it/s]
 24%|       | 19/79 [00:01<00:07,  7.74it/s]
 28%|       | 22/79 [00:01<00:05,  9.74it/s]
 32%|      | 25/79 [00:01<00:04, 11.90it/s]
 35%|      | 28/79 [00:01<00:03, 14.14it/s]
 39%|      | 31/79 [00:02<00:02, 16.28it/s]
 43%|     | 34/79 [00:02<00:02, 18.21it/s]
 47%|     | 37/79 [00:02<00:02, 19.93it/s]
 51%|     | 40/79 [00:02<00:01, 21.25it/s]
 54%|    | 43/79 [00:02<00:01, 22.26it/s]
 58%|    | 46/79 [00:02<00:01, 23.07it/s]
 62%|   | 49/79 [00:02<00:01, 23.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.62it/s]
 28%|       | 22/79 [00:01<00:05,  9.66it/s]
 32%|      | 25/79 [00:01<00:04, 11.88it/s]
 35%|      | 28/79 [00:01<00:03, 14.17it/s]
 39%|      | 31/79 [00:02<00:02, 16.22it/s]
 43%|     | 34/79 [00:02<00:02, 18.23it/s]
 47%|     | 37/79 [00:02<00:02, 19.79it/s]
 51%|     | 40/79 [00:02<00:01, 21.35it/s]
 54%|    | 43/79 [00:02<00:01, 22.22it/s]
 58%|    | 46/79 [00:02<00:01, 22.96it/s]
 62%|   | 49/79 [00:02<00:01, 23.59it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.47it/s]
 28%|       | 22/79 [00:01<00:06,  9.50it/s]
 32%|      | 25/79 [00:01<00:04, 11.69it/s]
 35%|      | 28/79 [00:01<00:03, 13.95it/s]
 39%|      | 31/79 [00:02<00:02, 16.16it/s]
 43%|     | 34/79 [00:02<00:02, 18.14it/s]
 47%|     | 37/79 [00:02<00:02, 19.90it/s]
 51%|     | 40/79 [00:02<00:01, 21.16it/s]
 54%|    | 43/79 [00:02<00:01, 22.31it/s]
 58%|    | 46/79 [00:02<00:01, 23.18it/s]
 62%|   | 49/79 [00:02<00:01, 24.03it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.54it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.77it/s]
 35%|      | 28/79 [00:01<00:03, 14.06it/s]
 39%|      | 31/79 [00:02<00:02, 16.33it/s]
 43%|     | 34/79 [00:02<00:02, 18.35it/s]
 47%|     | 37/79 [00:02<00:02, 20.22it/s]
 51%|     | 40/79 [00:02<00:01, 21.41it/s]
 54%|    | 43/79 [00:02<00:01, 22.47it/s]
 58%|    | 46/79 [00:02<00:01, 23.06it/s]
 62%|   | 49/79 [00:02<00:01, 23.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.24it/s]
 16%|        | 13/79 [00:01<00:15,  4.39it/s]
 20%|        | 16/79 [00:01<00:10,  5.82it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.56it/s]
 32%|      | 25/79 [00:01<00:04, 11.75it/s]
 35%|      | 28/79 [00:01<00:03, 13.97it/s]
 39%|      | 31/79 [00:02<00:02, 16.09it/s]
 43%|     | 34/79 [00:02<00:02, 18.10it/s]
 47%|     | 37/79 [00:02<00:02, 19.89it/s]
 51%|     | 40/79 [00:02<00:01, 21.14it/s]
 54%|    | 43/79 [00:02<00:01, 22.25it/s]
 58%|    | 46/79 [00:02<00:01, 23.08it/s]
 62%|   | 49/79 [00:02<00:01, 23.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.28it/s]
  5%|         | 4/79 [00:00<00:42,  1.78it/s]
  9%|         | 7/79 [00:01<00:29,  2.46it/s]
 13%|        | 10/79 [00:01<00:20,  3.38it/s]
 16%|        | 13/79 [00:01<00:14,  4.57it/s]
 20%|        | 16/79 [00:01<00:10,  6.05it/s]
 24%|       | 19/79 [00:01<00:07,  7.85it/s]
 28%|       | 22/79 [00:01<00:05,  9.92it/s]
 32%|      | 25/79 [00:01<00:04, 12.10it/s]
 35%|      | 28/79 [00:01<00:03, 14.32it/s]
 39%|      | 31/79 [00:01<00:02, 16.46it/s]
 43%|     | 34/79 [00:02<00:02, 18.35it/s]
 47%|     | 37/79 [00:02<00:02, 19.92it/s]
 51%|     | 40/79 [00:02<00:01, 21.11it/s]
 54%|    | 43/79 [00:02<00:01, 22.07it/s]
 58%|    | 46/79 [00:02<00:01, 22.84it/s]
 62%|   | 49/79 [00:02<00:01, 23.53it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.50it/s]
 35%|      | 28/79 [00:01<00:03, 13.72it/s]
 39%|      | 31/79 [00:02<00:03, 15.93it/s]
 43%|     | 34/79 [00:02<00:02, 18.03it/s]
 47%|     | 37/79 [00:02<00:02, 19.85it/s]
 51%|     | 40/79 [00:02<00:01, 21.40it/s]
 54%|    | 43/79 [00:02<00:01, 22.35it/s]
 58%|    | 46/79 [00:02<00:01, 23.36it/s]
 62%|   | 49/79 [00:02<00:01, 24.05it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.37it/s]
 32%|      | 25/79 [00:01<00:04, 11.54it/s]
 35%|      | 28/79 [00:01<00:03, 13.78it/s]
 39%|      | 31/79 [00:02<00:03, 15.96it/s]
 43%|     | 34/79 [00:02<00:02, 17.86it/s]
 47%|     | 37/79 [00:02<00:02, 19.74it/s]
 51%|     | 40/79 [00:02<00:01, 21.19it/s]
 54%|    | 43/79 [00:02<00:01, 22.33it/s]
 58%|    | 46/79 [00:02<00:01, 22.56it/s]
 62%|   | 49/79 [00:02<00:01, 23.16it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.45it/s]
 35%|      | 28/79 [00:01<00:03, 13.70it/s]
 39%|      | 31/79 [00:02<00:02, 16.01it/s]
 43%|     | 34/79 [00:02<00:02, 17.94it/s]
 47%|     | 37/79 [00:02<00:02, 19.80it/s]
 51%|     | 40/79 [00:02<00:01, 21.07it/s]
 54%|    | 43/79 [00:02<00:01, 22.46it/s]
 58%|    | 46/79 [00:02<00:01, 23.23it/s]
 62%|   | 49/79 [00:02<00:01, 23.84it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.24it/s]
  4%|         | 3/79 [00:00<00:44,  1.72it/s]
  8%|         | 6/79 [00:01<00:30,  2.38it/s]
 11%|        | 9/79 [00:01<00:21,  3.26it/s]
 15%|        | 12/79 [00:01<00:15,  4.42it/s]
 19%|        | 15/79 [00:01<00:10,  5.85it/s]
 23%|       | 18/79 [00:01<00:08,  7.55it/s]
 27%|       | 21/79 [00:01<00:06,  9.50it/s]
 30%|       | 24/79 [00:01<00:04, 11.66it/s]
 34%|      | 27/79 [00:01<00:03, 13.84it/s]
 38%|      | 30/79 [00:02<00:03, 15.80it/s]
 42%|     | 33/79 [00:02<00:02, 17.63it/s]
 46%|     | 36/79 [00:02<00:02, 19.54it/s]
 49%|     | 39/79 [00:02<00:01, 20.59it/s]
 53%|    | 42/79 [00:02<00:01, 21.62it/s]
 57%|    | 45/79 [00:02<00:01, 22.38it/s]
 61%|    | 48/79 [00:02<00:01, 23.19it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  4%|         | 3/79 [00:00<00:45,  1.66it/s]
  8%|         | 6/79 [00:01<00:31,  2.30it/s]
 11%|        | 9/79 [00:01<00:22,  3.15it/s]
 15%|        | 12/79 [00:01<00:15,  4.28it/s]
 19%|        | 15/79 [00:01<00:11,  5.69it/s]
 23%|       | 18/79 [00:01<00:08,  7.41it/s]
 27%|       | 21/79 [00:01<00:06,  9.35it/s]
 30%|       | 24/79 [00:01<00:04, 11.54it/s]
 34%|      | 27/79 [00:01<00:03, 13.74it/s]
 38%|      | 30/79 [00:02<00:03, 15.73it/s]
 42%|     | 33/79 [00:02<00:02, 17.79it/s]
 46%|     | 36/79 [00:02<00:02, 19.23it/s]
 49%|     | 39/79 [00:02<00:01, 20.42it/s]
 53%|    | 42/79 [00:02<00:01, 21.34it/s]
 57%|    | 45/79 [00:02<00:01, 22.29it/s]
 61%|    | 48/79 [00:02<00:01, 23.04it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.41it/s]
 35%|      | 28/79 [00:01<00:03, 13.73it/s]
 39%|      | 31/79 [00:02<00:03, 15.93it/s]
 43%|     | 34/79 [00:02<00:02, 17.91it/s]
 47%|     | 37/79 [00:02<00:02, 19.42it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 22.19it/s]
 58%|    | 46/79 [00:02<00:01, 23.10it/s]
 62%|   | 49/79 [00:02<00:01, 23.76it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.56it/s]
 35%|      | 28/79 [00:01<00:03, 13.77it/s]
 39%|      | 31/79 [00:02<00:03, 15.87it/s]
 43%|     | 34/79 [00:02<00:02, 17.82it/s]
 47%|     | 37/79 [00:02<00:02, 19.15it/s]
 51%|     | 40/79 [00:02<00:01, 20.54it/s]
 54%|    | 43/79 [00:02<00:01, 21.49it/s]
 58%|    | 46/79 [00:02<00:01, 22.42it/s]
 62%|   | 49/79 [00:02<00:01, 22.86it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.25it/s]
 28%|       | 22/79 [00:01<00:06,  9.24it/s]
 32%|      | 25/79 [00:01<00:04, 11.35it/s]
 35%|      | 28/79 [00:01<00:03, 13.58it/s]
 39%|      | 31/79 [00:02<00:03, 15.74it/s]
 43%|     | 34/79 [00:02<00:02, 17.89it/s]
 47%|     | 37/79 [00:02<00:02, 19.27it/s]
 51%|     | 40/79 [00:02<00:01, 20.63it/s]
 54%|    | 43/79 [00:02<00:01, 21.79it/s]
 58%|    | 46/79 [00:02<00:01, 22.55it/s]
 62%|   | 49/79 [00:02<00:01, 23.34it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.39it/s]
 32%|      | 25/79 [00:01<00:04, 11.54it/s]
 35%|      | 28/79 [00:01<00:03, 13.80it/s]
 39%|      | 31/79 [00:02<00:03, 15.96it/s]
 43%|     | 34/79 [00:02<00:02, 17.78it/s]
 47%|     | 37/79 [00:02<00:02, 19.19it/s]
 51%|     | 40/79 [00:02<00:01, 20.53it/s]
 54%|    | 43/79 [00:02<00:01, 21.52it/s]
 58%|    | 46/79 [00:02<00:01, 22.47it/s]
 62%|   | 49/79 [00:02<00:01, 23.08it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.38it/s]
 35%|      | 28/79 [00:01<00:03, 13.54it/s]
 39%|      | 31/79 [00:02<00:03, 15.80it/s]
 43%|     | 34/79 [00:02<00:02, 17.75it/s]
 47%|     | 37/79 [00:02<00:02, 19.31it/s]
 51%|     | 40/79 [00:02<00:01, 20.52it/s]
 54%|    | 43/79 [00:02<00:01, 21.65it/s]
 58%|    | 46/79 [00:02<00:01, 22.29it/s]
 62%|   | 49/79 [00:02<00:01, 22.73it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  4%|         | 3/79 [00:00<00:47,  1.60it/s]
  8%|         | 6/79 [00:01<00:32,  2.22it/s]
 11%|        | 9/79 [00:01<00:22,  3.05it/s]
 15%|        | 12/79 [00:01<00:16,  4.15it/s]
 19%|        | 15/79 [00:01<00:11,  5.53it/s]
 23%|       | 18/79 [00:01<00:08,  7.19it/s]
 27%|       | 21/79 [00:01<00:06,  9.14it/s]
 30%|       | 24/79 [00:01<00:04, 11.30it/s]
 34%|      | 27/79 [00:01<00:03, 13.42it/s]
 38%|      | 30/79 [00:02<00:03, 15.54it/s]
 42%|     | 33/79 [00:02<00:02, 17.48it/s]
 46%|     | 36/79 [00:02<00:02, 19.24it/s]
 49%|     | 39/79 [00:02<00:01, 20.43it/s]
 53%|    | 42/79 [00:02<00:01, 21.44it/s]
 57%|    | 45/79 [00:02<00:01, 22.36it/s]
 61%|    | 48/79 [00:02<00:01, 23.08it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.21it/s]
 28%|       | 22/79 [00:01<00:06,  9.18it/s]
 32%|      | 25/79 [00:01<00:04, 11.33it/s]
 35%|      | 28/79 [00:01<00:03, 13.55it/s]
 39%|      | 31/79 [00:02<00:03, 15.66it/s]
 43%|     | 34/79 [00:02<00:02, 17.54it/s]
 47%|     | 37/79 [00:02<00:02, 19.33it/s]
 51%|     | 40/79 [00:02<00:01, 20.54it/s]
 54%|    | 43/79 [00:02<00:01, 21.74it/s]
 58%|    | 46/79 [00:02<00:01, 22.28it/s]
 62%|   | 49/79 [00:02<00:01, 22.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.42it/s]
 28%|       | 22/79 [00:01<00:06,  9.41it/s]
 32%|      | 25/79 [00:01<00:04, 11.49it/s]
 35%|      | 28/79 [00:01<00:03, 13.68it/s]
 39%|      | 31/79 [00:02<00:03, 15.82it/s]
 43%|     | 34/79 [00:02<00:02, 17.75it/s]
 47%|     | 37/79 [00:02<00:02, 19.11it/s]
 51%|     | 40/79 [00:02<00:01, 20.16it/s]
 54%|    | 43/79 [00:02<00:01, 21.37it/s]
 58%|    | 46/79 [00:02<00:01, 22.16it/s]
 62%|   | 49/79 [00:02<00:01, 22.60it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.25it/s]
 24%|       | 19/79 [00:01<00:08,  6.87it/s]
 28%|       | 22/79 [00:01<00:06,  8.75it/s]
 32%|      | 25/79 [00:01<00:04, 10.92it/s]
 35%|      | 28/79 [00:02<00:03, 13.12it/s]
 39%|      | 31/79 [00:02<00:03, 15.38it/s]
 43%|     | 34/79 [00:02<00:02, 17.50it/s]
 47%|     | 37/79 [00:02<00:02, 19.19it/s]
 51%|     | 40/79 [00:02<00:01, 20.73it/s]
 54%|    | 43/79 [00:02<00:01, 21.73it/s]
 58%|    | 46/79 [00:02<00:01, 22.65it/s]
 62%|   | 49/79 [00:02<00:01, 23.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.26it/s]
 16%|        | 13/79 [00:01<00:14,  4.42it/s]
 20%|        | 16/79 [00:01<00:10,  5.87it/s]
 24%|       | 19/79 [00:01<00:07,  7.62it/s]
 28%|       | 22/79 [00:01<00:05,  9.60it/s]
 32%|      | 25/79 [00:01<00:04, 10.96it/s]
 35%|      | 28/79 [00:01<00:03, 13.24it/s]
 39%|      | 31/79 [00:02<00:03, 15.44it/s]
 43%|     | 34/79 [00:02<00:03, 14.91it/s]
 47%|     | 37/79 [00:02<00:02, 16.11it/s]
 51%|     | 40/79 [00:02<00:02, 18.12it/s]
 54%|    | 43/79 [00:02<00:01, 19.97it/s]
 58%|    | 46/79 [00:02<00:01, 21.39it/s]
 62%|   | 49/79 [00:02<00:01, 22.41it/s]
 66%|   | 52/79 [00:03<00:01, 25.21it/s]
 70%|   | 55/79 [00:02<00:00, 25.06it/s]
 73%|  | 58/79 [00:02<00:00, 25.28it/s]
 77%|  | 61/79 [00:02<00:00, 25.43it/s]
 81%|  | 64/79 [00:03<00:00, 25.49it/s]
 85%| | 67/79 [00:03<00:00, 25.39it/s]
 89%| | 70/79 [00:03<00:00, 25.57it/s]
 92%|| 73/79 [00:03<00:00, 25.94it/s]
 97%|| 77/79 [00:03<00:00, 26.91it/s]
100%|| 79/79 [00:03<00:00, 21.20it/s]
, 24.39it/s]
 70%|   | 55/79 [00:02<00:00, 24.91it/s]
 73%|  | 58/79 [00:03<00:00, 25.00it/s]
 77%|  | 61/79 [00:03<00:00, 25.48it/s]
 81%|  | 64/79 [00:03<00:00, 25.49it/s]
 85%| | 67/79 [00:03<00:00, 25.58it/s]
 89%| | 70/79 [00:03<00:00, 25.67it/s]
 92%|| 73/79 [00:03<00:00, 26.06it/s]
 96%|| 76/79 [00:03<00:00, 26.69it/s]
100%|| 79/79 [00:03<00:00, 27.52it/s]
, 24.82it/s]
 70%|   | 55/79 [00:02<00:00, 24.90it/s]
 73%|  | 58/79 [00:03<00:00, 25.34it/s]
 77%|  | 61/79 [00:03<00:00, 25.72it/s]
 81%|  | 64/79 [00:03<00:00, 25.64it/s]
 85%| | 67/79 [00:03<00:00, 25.98it/s]
 89%| | 70/79 [00:03<00:00, 25.69it/s]
 92%|| 73/79 [00:03<00:00, 25.91it/s]
 96%|| 76/79 [00:03<00:00, 26.55it/s]
100%|| 79/79 [00:03<00:00, 20.45it/s]
, 25.15it/s]
 70%|   | 55/79 [00:02<00:00, 25.36it/s]
 73%|  | 58/79 [00:02<00:00, 25.66it/s]
 77%|  | 61/79 [00:03<00:00, 25.60it/s]
 81%|  | 64/79 [00:03<00:00, 25.35it/s]
 85%| | 67/79 [00:03<00:00, 25.63it/s]
 89%| | 70/79 [00:03<00:00, 25.57it/s]
 92%|| 73/79 [00:03<00:00, 25.91it/s]
 96%|| 76/79 [00:03<00:00, 26.41it/s]
100%|| 79/79 [00:03<00:00, 27.10it/s]
, 24.30it/s]
 70%|   | 55/79 [00:02<00:00, 24.49it/s]
 73%|  | 58/79 [00:03<00:00, 24.41it/s]
 77%|  | 61/79 [00:03<00:00, 24.51it/s]
 81%|  | 64/79 [00:03<00:00, 24.80it/s]
 85%| | 67/79 [00:03<00:00, 25.12it/s]
 89%| | 70/79 [00:03<00:00, 25.26it/s]
 92%|| 73/79 [00:03<00:00, 25.65it/s]
 96%|| 76/79 [00:03<00:00, 26.19it/s]
100%|| 79/79 [00:03<00:00, 27.20it/s]
, 24.47it/s]
 70%|   | 55/79 [00:02<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 24.71it/s]
 77%|  | 61/79 [00:03<00:00, 24.54it/s]
 81%|  | 64/79 [00:03<00:00, 24.57it/s]
 85%| | 67/79 [00:03<00:00, 24.59it/s]
 89%| | 70/79 [00:03<00:00, 24.74it/s]
 92%|| 73/79 [00:03<00:00, 25.14it/s]
 96%|| 76/79 [00:03<00:00, 25.70it/s]
100%|| 79/79 [00:03<00:00, 26.63it/s]
, 24.34it/s]
 70%|   | 55/79 [00:02<00:00, 24.66it/s]
 73%|  | 58/79 [00:03<00:00, 25.01it/s]
 77%|  | 61/79 [00:03<00:00, 25.21it/s]
 81%|  | 64/79 [00:03<00:00, 25.46it/s]
 85%| | 67/79 [00:03<00:00, 25.67it/s]
 89%| | 70/79 [00:03<00:00, 25.74it/s]
 92%|| 73/79 [00:03<00:00, 26.07it/s]
 96%|| 76/79 [00:03<00:00, 26.58it/s]
100%|| 79/79 [00:03<00:00, 27.30it/s]
, 24.17it/s]
 70%|   | 55/79 [00:02<00:00, 24.76it/s]
 73%|  | 58/79 [00:03<00:00, 25.04it/s]
 77%|  | 61/79 [00:03<00:00, 25.27it/s]
 81%|  | 64/79 [00:03<00:00, 25.29it/s]
 85%| | 67/79 [00:03<00:00, 25.48it/s]
 89%| | 70/79 [00:03<00:00, 25.37it/s]
 92%|| 73/79 [00:03<00:00, 25.76it/s]
 96%|| 76/79 [00:03<00:00, 26.37it/s]
100%|| 79/79 [00:03<00:00, 27.32it/s]
, 24.06it/s]
 70%|   | 55/79 [00:02<00:00, 24.69it/s]
 73%|  | 58/79 [00:03<00:00, 24.82it/s]
 77%|  | 61/79 [00:03<00:00, 24.82it/s]
 81%|  | 64/79 [00:03<00:00, 24.94it/s]
 85%| | 67/79 [00:03<00:00, 25.28it/s]
 89%| | 70/79 [00:03<00:00, 25.11it/s]
 92%|| 73/79 [00:03<00:00, 25.43it/s]
 96%|| 76/79 [00:03<00:00, 26.21it/s]
100%|| 79/79 [00:03<00:00, 27.17it/s]
, 24.66it/s]
 70%|   | 55/79 [00:02<00:00, 25.19it/s]
 73%|  | 58/79 [00:03<00:00, 25.84it/s]
 77%|  | 61/79 [00:03<00:00, 25.80it/s]
 81%|  | 64/79 [00:03<00:00, 25.77it/s]
 85%| | 67/79 [00:03<00:00, 25.85it/s]
 89%| | 70/79 [00:03<00:00, 25.58it/s]
 92%|| 73/79 [00:03<00:00, 25.97it/s]
 96%|| 76/79 [00:03<00:00, 26.32it/s]
100%|| 79/79 [00:03<00:00, 27.26it/s]
50it/s]
 68%|   | 54/79 [00:02<00:01, 24.74it/s]
 72%|  | 57/79 [00:03<00:00, 24.72it/s]
 76%|  | 60/79 [00:03<00:00, 24.68it/s]
 80%|  | 63/79 [00:03<00:00, 25.05it/s]
 84%| | 66/79 [00:03<00:00, 25.28it/s]
 87%| | 69/79 [00:03<00:00, 25.19it/s]
 91%| | 72/79 [00:03<00:00, 25.30it/s]
 95%|| 75/79 [00:03<00:00, 26.04it/s]
 99%|| 78/79 [00:03<00:00, 27.01it/s]
100%|| 79/79 [00:03<00:00, 20.01it/s]
, 23.64it/s]
 70%|   | 55/79 [00:03<00:01, 23.98it/s]
 73%|  | 58/79 [00:03<00:00, 24.32it/s]
 77%|  | 61/79 [00:03<00:00, 24.76it/s]
 81%|  | 64/79 [00:03<00:00, 24.96it/s]
 85%| | 67/79 [00:03<00:00, 25.32it/s]
 89%| | 70/79 [00:03<00:00, 25.51it/s]
 92%|| 73/79 [00:03<00:00, 25.89it/s]
 96%|| 76/79 [00:03<00:00, 26.53it/s]
100%|| 79/79 [00:03<00:00, 27.43it/s]
, 24.41it/s]
 70%|   | 55/79 [00:02<00:00, 24.44it/s]
 73%|  | 58/79 [00:03<00:00, 24.79it/s]
 77%|  | 61/79 [00:03<00:00, 25.05it/s]
 81%|  | 64/79 [00:03<00:00, 25.22it/s]
 85%| | 67/79 [00:03<00:00, 25.33it/s]
 89%| | 70/79 [00:03<00:00, 25.59it/s]
 92%|| 73/79 [00:03<00:00, 25.92it/s]
 96%|| 76/79 [00:03<00:00, 26.59it/s]
100%|| 79/79 [00:03<00:00, 27.35it/s]
, 24.26it/s]
 70%|   | 55/79 [00:02<00:00, 24.68it/s]
 73%|  | 58/79 [00:03<00:00, 24.85it/s]
 77%|  | 61/79 [00:03<00:00, 25.06it/s]
 81%|  | 64/79 [00:03<00:00, 24.96it/s]
 85%| | 67/79 [00:03<00:00, 25.23it/s]
 89%| | 70/79 [00:03<00:00, 25.22it/s]
 92%|| 73/79 [00:03<00:00, 25.79it/s]
 96%|| 76/79 [00:03<00:00, 26.21it/s]
100%|| 79/79 [00:03<00:00, 27.19it/s]
, 23.91it/s]
 70%|   | 55/79 [00:02<00:00, 24.31it/s]
 73%|  | 58/79 [00:03<00:00, 24.68it/s]
 77%|  | 61/79 [00:03<00:00, 24.75it/s]
 81%|  | 64/79 [00:03<00:00, 24.91it/s]
 85%| | 67/79 [00:03<00:00, 24.91it/s]
 89%| | 70/79 [00:03<00:00, 25.26it/s]
 92%|| 73/79 [00:03<00:00, 25.29it/s]
 96%|| 76/79 [00:03<00:00, 26.17it/s]
100%|| 79/79 [00:03<00:00, 27.14it/s]
, 24.29it/s]
 70%|   | 55/79 [00:02<00:00, 24.55it/s]
 73%|  | 58/79 [00:03<00:00, 24.90it/s]
 77%|  | 61/79 [00:03<00:00, 25.08it/s]
 81%|  | 64/79 [00:03<00:00, 25.23it/s]
 85%| | 67/79 [00:03<00:00, 25.09it/s]
 89%| | 70/79 [00:03<00:00, 25.18it/s]
 92%|| 73/79 [00:03<00:00, 25.64it/s]
 96%|| 76/79 [00:03<00:00, 26.24it/s]
100%|| 79/79 [00:03<00:00, 27.18it/s]
, 23.82it/s]
 70%|   | 55/79 [00:02<00:01, 23.94it/s]
 73%|  | 58/79 [00:03<00:00, 24.30it/s]
 77%|  | 61/79 [00:03<00:00, 24.38it/s]
 81%|  | 64/79 [00:03<00:00, 24.73it/s]
 85%| | 67/79 [00:03<00:00, 24.48it/s]
 89%| | 70/79 [00:03<00:00, 24.68it/s]
 92%|| 73/79 [00:03<00:00, 25.07it/s]
 96%|| 76/79 [00:03<00:00, 25.90it/s]
100%|| 79/79 [00:03<00:00, 26.78it/s]
, 24.09it/s]
 70%|   | 55/79 [00:02<00:00, 24.59it/s]
 73%|  | 58/79 [00:03<00:00, 24.76it/s]
 77%|  | 61/79 [00:03<00:00, 24.82it/s]
 81%|  | 64/79 [00:03<00:00, 24.86it/s]
 85%| | 67/79 [00:03<00:00, 24.82it/s]
 89%| | 70/79 [00:03<00:00, 24.89it/s]
 92%|| 73/79 [00:03<00:00, 25.46it/s]
 96%|| 76/79 [00:03<00:00, 26.16it/s]
100%|| 79/79 [00:03<00:00, 19.94it/s]
, 24.09it/s]
 70%|   | 55/79 [00:02<00:00, 24.35it/s]
 73%|  | 58/79 [00:03<00:00, 24.28it/s]
 77%|  | 61/79 [00:03<00:00, 24.35it/s]
 81%|  | 64/79 [00:03<00:00, 24.49it/s]
 85%| | 67/79 [00:03<00:00, 24.55it/s]
 89%| | 70/79 [00:03<00:00, 24.53it/s]
 92%|| 73/79 [00:03<00:00, 24.66it/s]
 96%|| 76/79 [00:03<00:00, 25.71it/s]
100%|| 79/79 [00:03<00:00, 26.05it/s]
, 24.10it/s]
 70%|   | 55/79 [00:03<00:00, 24.49it/s]
 73%|  | 58/79 [00:03<00:00, 24.71it/s]
 77%|  | 61/79 [00:03<00:00, 24.62it/s]
 81%|  | 64/79 [00:03<00:00, 24.80it/s]
 85%| | 67/79 [00:03<00:00, 25.09it/s]
 89%| | 70/79 [00:03<00:00, 24.94it/s]
 92%|| 73/79 [00:03<00:00, 25.37it/s]
 96%|| 76/79 [00:03<00:00, 26.19it/s]
100%|| 79/79 [00:03<00:00, 27.12it/s]
, 23.84it/s]
 70%|   | 55/79 [00:03<00:00, 24.15it/s]
 73%|  | 58/79 [00:03<00:00, 24.27it/s]
 77%|  | 61/79 [00:03<00:00, 24.46it/s]
 81%|  | 64/79 [00:03<00:00, 24.57it/s]
 85%| | 67/79 [00:03<00:00, 24.75it/s]
 89%| | 70/79 [00:03<00:00, 24.90it/s]
 92%|| 73/79 [00:03<00:00, 25.07it/s]
 96%|| 76/79 [00:03<00:00, 25.97it/s]
100%|| 79/79 [00:03<00:00, 26.89it/s]
, 23.23it/s]
 70%|   | 55/79 [00:03<00:01, 23.63it/s]
 73%|  | 58/79 [00:03<00:00, 24.20it/s]
 77%|  | 61/79 [00:03<00:00, 24.30it/s]
 81%|  | 64/79 [00:03<00:00, 24.57it/s]
 85%| | 67/79 [00:03<00:00, 24.72it/s]
 89%| | 70/79 [00:03<00:00, 24.77it/s]
 92%|| 73/79 [00:03<00:00, 25.07it/s]
 96%|| 76/79 [00:03<00:00, 25.82it/s]
100%|| 79/79 [00:03<00:00, 26.65it/s]
66it/s]
 68%|   | 54/79 [00:03<00:01, 23.94it/s]
 72%|  | 57/79 [00:03<00:00, 24.31it/s]
 76%|  | 60/79 [00:03<00:00, 24.33it/s]
 80%|  | 63/79 [00:03<00:00, 24.43it/s]
 84%| | 66/79 [00:03<00:00, 24.44it/s]
 87%| | 69/79 [00:03<00:00, 24.58it/s]
 91%| | 72/79 [00:03<00:00, 24.78it/s]
 95%|| 75/79 [00:03<00:00, 25.66it/s]
 99%|| 78/79 [00:03<00:00, 26.31it/s]
100%|| 79/79 [00:04<00:00, 19.56it/s]
, 24.30it/s]
 70%|   | 55/79 [00:03<00:00, 24.70it/s]
 73%|  | 58/79 [00:03<00:00, 24.71it/s]
 77%|  | 61/79 [00:03<00:00, 24.82it/s]
 81%|  | 64/79 [00:03<00:00, 25.13it/s]
 85%| | 67/79 [00:03<00:00, 25.23it/s]
 89%| | 70/79 [00:03<00:00, 25.19it/s]
 92%|| 73/79 [00:03<00:00, 25.55it/s]
 96%|| 76/79 [00:03<00:00, 26.06it/s]
100%|| 79/79 [00:03<00:00, 27.03it/s]
, 23.50it/s]
 70%|   | 55/79 [00:03<00:01, 23.85it/s]
 73%|  | 58/79 [00:03<00:00, 24.10it/s]
 77%|  | 61/79 [00:03<00:00, 24.39it/s]
 81%|  | 64/79 [00:03<00:00, 24.62it/s]
 85%| | 67/79 [00:03<00:00, 24.64it/s]
 89%| | 70/79 [00:03<00:00, 24.55it/s]
 92%|| 73/79 [00:03<00:00, 24.94it/s]
 96%|| 76/79 [00:03<00:00, 25.83it/s]
100%|| 79/79 [00:03<00:00, 26.49it/s]
, 23.55it/s]
 70%|   | 55/79 [00:03<00:01, 23.91it/s]
 73%|  | 58/79 [00:03<00:00, 24.26it/s]
 77%|  | 61/79 [00:03<00:00, 24.45it/s]
 81%|  | 64/79 [00:03<00:00, 24.49it/s]
 85%| | 67/79 [00:03<00:00, 24.68it/s]
 89%| | 70/79 [00:03<00:00, 24.76it/s]
 92%|| 73/79 [00:03<00:00, 25.18it/s]
 96%|| 76/79 [00:03<00:00, 25.77it/s]
100%|| 79/79 [00:03<00:00, 26.67it/s]
47it/s]
 68%|   | 54/79 [00:03<00:01, 23.71it/s]
 72%|  | 57/79 [00:03<00:00, 24.01it/s]
 76%|  | 60/79 [00:03<00:00, 24.54it/s]
 80%|  | 63/79 [00:03<00:00, 24.57it/s]
 84%| | 66/79 [00:03<00:00, 24.71it/s]
 87%| | 69/79 [00:03<00:00, 24.77it/s]
 91%| | 72/79 [00:03<00:00, 24.78it/s]
 95%|| 75/79 [00:03<00:00, 25.51it/s]
 99%|| 78/79 [00:03<00:00, 25.92it/s]
100%|| 79/79 [00:04<00:00, 19.41it/s]
, 23.07it/s]
 70%|   | 55/79 [00:03<00:01, 23.45it/s]
 73%|  | 58/79 [00:03<00:00, 23.52it/s]
 77%|  | 61/79 [00:03<00:00, 23.50it/s]
 81%|  | 64/79 [00:03<00:00, 23.76it/s]
 85%| | 67/79 [00:03<00:00, 24.05it/s]
 89%| | 70/79 [00:03<00:00, 24.09it/s]
 92%|| 73/79 [00:03<00:00, 24.56it/s]
 96%|| 76/79 [00:03<00:00, 25.37it/s]
100%|| 79/79 [00:04<00:00, 26.32it/s]
50it/s]
 68%|   | 54/79 [00:03<00:01, 23.86it/s]
 72%|  | 57/79 [00:03<00:00, 24.09it/s]
 76%|  | 60/79 [00:03<00:00, 24.47it/s]
 80%|  | 63/79 [00:03<00:00, 24.42it/s]
 84%| | 66/79 [00:03<00:00, 24.72it/s]
 87%| | 69/79 [00:03<00:00, 24.75it/s]
 91%| | 72/79 [00:03<00:00, 25.01it/s]
 95%|| 75/79 [00:03<00:00, 25.45it/s]
 99%|| 78/79 [00:03<00:00, 26.31it/s]
100%|| 79/79 [00:04<00:00, 19.28it/s]
, 22.49it/s]
 70%|   | 55/79 [00:03<00:01, 23.23it/s]
 73%|  | 58/79 [00:03<00:00, 23.42it/s]
 77%|  | 61/79 [00:03<00:00, 23.28it/s]
 81%|  | 64/79 [00:03<00:00, 23.41it/s]
 85%| | 67/79 [00:03<00:00, 23.81it/s]
 89%| | 70/79 [00:03<00:00, 23.97it/s]
 92%|| 73/79 [00:03<00:00, 24.32it/s]
 96%|| 76/79 [00:03<00:00, 25.14it/s]
100%|| 79/79 [00:04<00:00, 26.12it/s]
, 23.45it/s]
 70%|   | 55/79 [00:03<00:01, 23.95it/s]
 73%|  | 58/79 [00:03<00:00, 24.11it/s]
 77%|  | 61/79 [00:03<00:00, 24.29it/s]
 81%|  | 64/79 [00:03<00:00, 24.56it/s]
 85%| | 67/79 [00:03<00:00, 24.70it/s]
 89%| | 70/79 [00:03<00:00, 24.68it/s]
 92%|| 73/79 [00:03<00:00, 24.78it/s]
 96%|| 76/79 [00:03<00:00, 25.38it/s]
100%|| 79/79 [00:04<00:00, 26.15it/s]
, 23.26it/s]
 70%|   | 55/79 [00:03<00:01, 23.79it/s]
 73%|  | 58/79 [00:03<00:00, 24.30it/s]
 77%|  | 61/79 [00:03<00:00, 24.27it/s]
 81%|  | 64/79 [00:03<00:00, 24.36it/s]
 85%| | 67/79 [00:03<00:00, 24.78it/s]
 89%| | 70/79 [00:03<00:00, 24.76it/s]
 92%|| 73/79 [00:03<00:00, 25.28it/s]
 96%|| 76/79 [00:03<00:00, 26.00it/s]
100%|| 79/79 [00:04<00:00, 26.81it/s]
2020-06-23 17:24:18,953 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.162239 (0.026638328552246095 s / img per device, on 32 devices)
2020-06-23 17:24:18,974 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:24:18,974 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:24:18,995 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592958269317, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 4, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592958269318, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 4}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:24:30,290 maskrcnn_benchmark.trainer INFO: eta: 1:19:09  iter: 2760  loss: 0.7536 (0.9184)  loss_classifier: 0.2872 (0.3488)  loss_box_reg: 0.1257 (0.1431)  loss_mask: 0.2933 (0.3524)  loss_objectness: 0.0242 (0.0506)  loss_rpn_box_reg: 0.0117 (0.0235)  time: 0.1082 (0.1275)  data: 0.0014 (0.0194)  lr: 0.160000  max mem: 5155
2020-06-23 17:24:32,472 maskrcnn_benchmark.trainer INFO: eta: 1:19:01  iter: 2780  loss: 0.6894 (0.9168)  loss_classifier: 0.2625 (0.3481)  loss_box_reg: 0.1132 (0.1429)  loss_mask: 0.2886 (0.3519)  loss_objectness: 0.0233 (0.0504)  loss_rpn_box_reg: 0.0106 (0.0234)  time: 0.1089 (0.1274)  data: 0.0014 (0.0192)  lr: 0.160000  max mem: 5155
2020-06-23 17:24:34,634 maskrcnn_benchmark.trainer INFO: eta: 1:18:53  iter: 2800  loss: 0.7176 (0.9153)  loss_classifier: 0.2513 (0.3475)  loss_box_reg: 0.1143 (0.1427)  loss_mask: 0.2880 (0.3513)  loss_objectness: 0.0203 (0.0503)  loss_rpn_box_reg: 0.0113 (0.0234)  time: 0.1081 (0.1273)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5155
2020-06-23 17:24:36,786 maskrcnn_benchmark.trainer INFO: eta: 1:18:46  iter: 2820  loss: 0.7241 (0.9146)  loss_classifier: 0.3222 (0.3472)  loss_box_reg: 0.1248 (0.1427)  loss_mask: 0.2901 (0.3510)  loss_objectness: 0.0256 (0.0502)  loss_rpn_box_reg: 0.0143 (0.0234)  time: 0.1074 (0.1271)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.92s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 17:24:38,928 maskrcnn_benchmark.trainer INFO: eta: 1:18:38  iter: 2840  loss: 0.6398 (0.9133)  loss_classifier: 0.2229 (0.3466)  loss_box_reg: 0.1089 (0.1426)  loss_mask: 0.2969 (0.3506)  loss_objectness: 0.0214 (0.0501)  loss_rpn_box_reg: 0.0080 (0.0234)  time: 0.1066 (0.1270)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5155
DONE (t=1.94s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.25211
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.45182
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.25778
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.14134
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.27677
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.32743
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.24174
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.39934
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.42073
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24856
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.45580
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.52825
2020-06-23 17:24:41,080 maskrcnn_benchmark.trainer INFO: eta: 1:18:30  iter: 2860  loss: 0.6576 (0.9118)  loss_classifier: 0.2122 (0.3459)  loss_box_reg: 0.1169 (0.1424)  loss_mask: 0.2796 (0.3502)  loss_objectness: 0.0219 (0.0500)  loss_rpn_box_reg: 0.0073 (0.0233)  time: 0.1070 (0.1268)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5155
2020-06-23 17:24:43,234 maskrcnn_benchmark.trainer INFO: eta: 1:18:23  iter: 2880  loss: 0.8540 (0.9111)  loss_classifier: 0.2730 (0.3455)  loss_box_reg: 0.1216 (0.1423)  loss_mask: 0.3033 (0.3499)  loss_objectness: 0.0274 (0.0501)  loss_rpn_box_reg: 0.0118 (0.0233)  time: 0.1065 (0.1267)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5155
2020-06-23 17:24:45,389 maskrcnn_benchmark.trainer INFO: eta: 1:18:16  iter: 2900  loss: 0.6702 (0.9092)  loss_classifier: 0.2392 (0.3449)  loss_box_reg: 0.0842 (0.1419)  loss_mask: 0.2588 (0.3492)  loss_objectness: 0.0146 (0.0499)  loss_rpn_box_reg: 0.0083 (0.0232)  time: 0.1080 (0.1266)  data: 0.0013 (0.0185)  lr: 0.160000  max mem: 5155
2020-06-23 17:24:47,550 maskrcnn_benchmark.trainer INFO: eta: 1:18:08  iter: 2920  loss: 0.6796 (0.9078)  loss_classifier: 0.2591 (0.3444)  loss_box_reg: 0.1035 (0.1417)  loss_mask: 0.2735 (0.3487)  loss_objectness: 0.0202 (0.0498)  loss_rpn_box_reg: 0.0070 (0.0232)  time: 0.1069 (0.1265)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:24:49,720 maskrcnn_benchmark.trainer INFO: eta: 1:18:01  iter: 2940  loss: 0.7280 (0.9067)  loss_classifier: 0.2781 (0.3439)  loss_box_reg: 0.1233 (0.1416)  loss_mask: 0.2805 (0.3484)  loss_objectness: 0.0223 (0.0497)  loss_rpn_box_reg: 0.0082 (0.0231)  time: 0.1080 (0.1263)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5155
DONE (t=2.51s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:24:51,850 maskrcnn_benchmark.trainer INFO: eta: 1:17:54  iter: 2960  loss: 0.7086 (0.9059)  loss_classifier: 0.2538 (0.3436)  loss_box_reg: 0.1313 (0.1416)  loss_mask: 0.3042 (0.3480)  loss_objectness: 0.0256 (0.0495)  loss_rpn_box_reg: 0.0080 (0.0231)  time: 0.1066 (0.1262)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5155
DONE (t=3.19s).
Accumulating evaluation results...
DONE (t=0.00s).
2020-06-23 17:24:53,997 maskrcnn_benchmark.trainer INFO: eta: 1:17:47  iter: 2980  loss: 0.7407 (0.9048)  loss_classifier: 0.2725 (0.3431)  loss_box_reg: 0.1091 (0.1414)  loss_mask: 0.3065 (0.3477)  loss_objectness: 0.0212 (0.0494)  loss_rpn_box_reg: 0.0109 (0.0231)  time: 0.1059 (0.1261)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5155
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.24411
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.42797
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.25173
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.09955
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.26525
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.36348
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.24072
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.38212
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.39982
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21344
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.44069
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.52944
2020-06-23 17:24:54,506 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.2521071226152858, segm mAP: 0.24411209673308704
:::MLLOG {"namespace": "", "time_ms": 1592958294506, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.2521071226152858, "SEGM": 0.24411209673308704}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1592958294506, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 3}}
2020-06-23 17:24:56,309 maskrcnn_benchmark.trainer INFO: eta: 1:17:41  iter: 3000  loss: 0.7711 (0.9036)  loss_classifier: 0.2045 (0.3425)  loss_box_reg: 0.1066 (0.1412)  loss_mask: 0.2890 (0.3473)  loss_objectness: 0.0298 (0.0495)  loss_rpn_box_reg: 0.0152 (0.0231)  time: 0.1061 (0.1260)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5155
2020-06-23 17:24:58,444 maskrcnn_benchmark.trainer INFO: eta: 1:17:34  iter: 3020  loss: 0.6498 (0.9023)  loss_classifier: 0.2291 (0.3420)  loss_box_reg: 0.1030 (0.1411)  loss_mask: 0.2763 (0.3467)  loss_objectness: 0.0226 (0.0494)  loss_rpn_box_reg: 0.0104 (0.0231)  time: 0.1066 (0.1259)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:00,578 maskrcnn_benchmark.trainer INFO: eta: 1:17:27  iter: 3040  loss: 0.7543 (0.9011)  loss_classifier: 0.2511 (0.3414)  loss_box_reg: 0.1003 (0.1409)  loss_mask: 0.2860 (0.3465)  loss_objectness: 0.0218 (0.0493)  loss_rpn_box_reg: 0.0057 (0.0230)  time: 0.1063 (0.1257)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:02,745 maskrcnn_benchmark.trainer INFO: eta: 1:17:20  iter: 3060  loss: 0.6206 (0.8993)  loss_classifier: 0.2050 (0.3405)  loss_box_reg: 0.1098 (0.1406)  loss_mask: 0.2669 (0.3460)  loss_objectness: 0.0165 (0.0491)  loss_rpn_box_reg: 0.0047 (0.0229)  time: 0.1082 (0.1256)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:04,893 maskrcnn_benchmark.trainer INFO: eta: 1:17:13  iter: 3080  loss: 0.6265 (0.8979)  loss_classifier: 0.2171 (0.3399)  loss_box_reg: 0.0991 (0.1404)  loss_mask: 0.2700 (0.3456)  loss_objectness: 0.0227 (0.0490)  loss_rpn_box_reg: 0.0119 (0.0229)  time: 0.1074 (0.1255)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:07,038 maskrcnn_benchmark.trainer INFO: eta: 1:17:07  iter: 3100  loss: 0.7342 (0.8967)  loss_classifier: 0.2738 (0.3394)  loss_box_reg: 0.1188 (0.1403)  loss_mask: 0.2856 (0.3453)  loss_objectness: 0.0237 (0.0489)  loss_rpn_box_reg: 0.0071 (0.0229)  time: 0.1070 (0.1254)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:09,186 maskrcnn_benchmark.trainer INFO: eta: 1:17:00  iter: 3120  loss: 0.7358 (0.8957)  loss_classifier: 0.2293 (0.3388)  loss_box_reg: 0.1091 (0.1401)  loss_mask: 0.3011 (0.3449)  loss_objectness: 0.0278 (0.0489)  loss_rpn_box_reg: 0.0111 (0.0230)  time: 0.1074 (0.1253)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:11,322 maskrcnn_benchmark.trainer INFO: eta: 1:16:53  iter: 3140  loss: 0.7682 (0.8951)  loss_classifier: 0.2701 (0.3385)  loss_box_reg: 0.1413 (0.1401)  loss_mask: 0.2966 (0.3446)  loss_objectness: 0.0241 (0.0488)  loss_rpn_box_reg: 0.0136 (0.0229)  time: 0.1066 (0.1252)  data: 0.0015 (0.0172)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:13,464 maskrcnn_benchmark.trainer INFO: eta: 1:16:46  iter: 3160  loss: 0.7170 (0.8940)  loss_classifier: 0.2460 (0.3381)  loss_box_reg: 0.0961 (0.1399)  loss_mask: 0.2934 (0.3444)  loss_objectness: 0.0340 (0.0488)  loss_rpn_box_reg: 0.0087 (0.0229)  time: 0.1064 (0.1250)  data: 0.0014 (0.0171)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:15,598 maskrcnn_benchmark.trainer INFO: eta: 1:16:40  iter: 3180  loss: 0.7221 (0.8929)  loss_classifier: 0.2752 (0.3376)  loss_box_reg: 0.1280 (0.1398)  loss_mask: 0.2809 (0.3439)  loss_objectness: 0.0276 (0.0487)  loss_rpn_box_reg: 0.0127 (0.0229)  time: 0.1063 (0.1249)  data: 0.0015 (0.0170)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:17,715 maskrcnn_benchmark.trainer INFO: eta: 1:16:33  iter: 3200  loss: 0.8321 (0.8924)  loss_classifier: 0.2986 (0.3374)  loss_box_reg: 0.1428 (0.1398)  loss_mask: 0.2965 (0.3436)  loss_objectness: 0.0251 (0.0486)  loss_rpn_box_reg: 0.0147 (0.0229)  time: 0.1062 (0.1248)  data: 0.0014 (0.0169)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:19,864 maskrcnn_benchmark.trainer INFO: eta: 1:16:26  iter: 3220  loss: 0.7195 (0.8916)  loss_classifier: 0.2442 (0.3370)  loss_box_reg: 0.1090 (0.1397)  loss_mask: 0.2966 (0.3434)  loss_objectness: 0.0270 (0.0486)  loss_rpn_box_reg: 0.0135 (0.0229)  time: 0.1066 (0.1247)  data: 0.0014 (0.0168)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:21,992 maskrcnn_benchmark.trainer INFO: eta: 1:16:20  iter: 3240  loss: 0.6779 (0.8906)  loss_classifier: 0.2435 (0.3366)  loss_box_reg: 0.1065 (0.1396)  loss_mask: 0.2988 (0.3431)  loss_objectness: 0.0200 (0.0485)  loss_rpn_box_reg: 0.0076 (0.0229)  time: 0.1064 (0.1246)  data: 0.0013 (0.0167)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:24,148 maskrcnn_benchmark.trainer INFO: eta: 1:16:13  iter: 3260  loss: 0.6995 (0.8896)  loss_classifier: 0.2649 (0.3361)  loss_box_reg: 0.1126 (0.1395)  loss_mask: 0.2776 (0.3428)  loss_objectness: 0.0207 (0.0484)  loss_rpn_box_reg: 0.0148 (0.0229)  time: 0.1069 (0.1245)  data: 0.0014 (0.0166)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:26,292 maskrcnn_benchmark.trainer INFO: eta: 1:16:07  iter: 3280  loss: 0.6517 (0.8884)  loss_classifier: 0.2023 (0.3356)  loss_box_reg: 0.1087 (0.1393)  loss_mask: 0.2859 (0.3423)  loss_objectness: 0.0216 (0.0483)  loss_rpn_box_reg: 0.0093 (0.0228)  time: 0.1058 (0.1244)  data: 0.0013 (0.0165)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:28,418 maskrcnn_benchmark.trainer INFO: eta: 1:16:00  iter: 3300  loss: 0.7307 (0.8874)  loss_classifier: 0.2760 (0.3352)  loss_box_reg: 0.1276 (0.1393)  loss_mask: 0.2936 (0.3420)  loss_objectness: 0.0235 (0.0481)  loss_rpn_box_reg: 0.0104 (0.0228)  time: 0.1057 (0.1243)  data: 0.0014 (0.0164)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:30,559 maskrcnn_benchmark.trainer INFO: eta: 1:15:54  iter: 3320  loss: 0.6722 (0.8859)  loss_classifier: 0.2328 (0.3346)  loss_box_reg: 0.0879 (0.1390)  loss_mask: 0.2525 (0.3416)  loss_objectness: 0.0181 (0.0480)  loss_rpn_box_reg: 0.0069 (0.0228)  time: 0.1071 (0.1242)  data: 0.0014 (0.0163)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:32,704 maskrcnn_benchmark.trainer INFO: eta: 1:15:48  iter: 3340  loss: 0.7750 (0.8855)  loss_classifier: 0.2355 (0.3343)  loss_box_reg: 0.1231 (0.1390)  loss_mask: 0.3071 (0.3413)  loss_objectness: 0.0288 (0.0481)  loss_rpn_box_reg: 0.0147 (0.0228)  time: 0.1070 (0.1241)  data: 0.0014 (0.0163)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:34,860 maskrcnn_benchmark.trainer INFO: eta: 1:15:42  iter: 3360  loss: 0.6000 (0.8842)  loss_classifier: 0.1763 (0.3337)  loss_box_reg: 0.0988 (0.1388)  loss_mask: 0.2850 (0.3410)  loss_objectness: 0.0214 (0.0480)  loss_rpn_box_reg: 0.0073 (0.0227)  time: 0.1075 (0.1240)  data: 0.0013 (0.0162)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:37,012 maskrcnn_benchmark.trainer INFO: eta: 1:15:36  iter: 3380  loss: 0.7193 (0.8833)  loss_classifier: 0.2343 (0.3333)  loss_box_reg: 0.1006 (0.1387)  loss_mask: 0.3078 (0.3408)  loss_objectness: 0.0263 (0.0479)  loss_rpn_box_reg: 0.0124 (0.0227)  time: 0.1076 (0.1239)  data: 0.0014 (0.0161)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:39,141 maskrcnn_benchmark.trainer INFO: eta: 1:15:30  iter: 3400  loss: 0.6729 (0.8822)  loss_classifier: 0.2335 (0.3328)  loss_box_reg: 0.0941 (0.1385)  loss_mask: 0.2824 (0.3404)  loss_objectness: 0.0271 (0.0478)  loss_rpn_box_reg: 0.0103 (0.0227)  time: 0.1064 (0.1238)  data: 0.0014 (0.0160)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:41,279 maskrcnn_benchmark.trainer INFO: eta: 1:15:24  iter: 3420  loss: 0.6521 (0.8810)  loss_classifier: 0.2339 (0.3322)  loss_box_reg: 0.0974 (0.1383)  loss_mask: 0.2764 (0.3401)  loss_objectness: 0.0235 (0.0477)  loss_rpn_box_reg: 0.0094 (0.0226)  time: 0.1068 (0.1237)  data: 0.0013 (0.0159)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:43,415 maskrcnn_benchmark.trainer INFO: eta: 1:15:17  iter: 3440  loss: 0.7279 (0.8803)  loss_classifier: 0.3067 (0.3321)  loss_box_reg: 0.1174 (0.1382)  loss_mask: 0.2712 (0.3398)  loss_objectness: 0.0218 (0.0476)  loss_rpn_box_reg: 0.0100 (0.0226)  time: 0.1061 (0.1236)  data: 0.0014 (0.0158)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:45,551 maskrcnn_benchmark.trainer INFO: eta: 1:15:11  iter: 3460  loss: 0.6219 (0.8791)  loss_classifier: 0.2274 (0.3315)  loss_box_reg: 0.0873 (0.1381)  loss_mask: 0.2590 (0.3394)  loss_objectness: 0.0251 (0.0476)  loss_rpn_box_reg: 0.0126 (0.0226)  time: 0.1069 (0.1235)  data: 0.0013 (0.0157)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:47,690 maskrcnn_benchmark.trainer INFO: eta: 1:15:05  iter: 3480  loss: 0.6355 (0.8783)  loss_classifier: 0.2509 (0.3312)  loss_box_reg: 0.0969 (0.1379)  loss_mask: 0.2639 (0.3390)  loss_objectness: 0.0161 (0.0475)  loss_rpn_box_reg: 0.0090 (0.0226)  time: 0.1067 (0.1234)  data: 0.0014 (0.0157)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:49,824 maskrcnn_benchmark.trainer INFO: eta: 1:15:00  iter: 3500  loss: 0.7968 (0.8777)  loss_classifier: 0.3017 (0.3309)  loss_box_reg: 0.1137 (0.1379)  loss_mask: 0.3139 (0.3389)  loss_objectness: 0.0255 (0.0474)  loss_rpn_box_reg: 0.0133 (0.0226)  time: 0.1065 (0.1233)  data: 0.0014 (0.0156)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:51,962 maskrcnn_benchmark.trainer INFO: eta: 1:14:54  iter: 3520  loss: 0.8057 (0.8774)  loss_classifier: 0.2985 (0.3309)  loss_box_reg: 0.1311 (0.1378)  loss_mask: 0.2923 (0.3387)  loss_objectness: 0.0351 (0.0474)  loss_rpn_box_reg: 0.0160 (0.0226)  time: 0.1068 (0.1232)  data: 0.0015 (0.0155)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:54,110 maskrcnn_benchmark.trainer INFO: eta: 1:14:48  iter: 3540  loss: 0.6448 (0.8762)  loss_classifier: 0.2059 (0.3303)  loss_box_reg: 0.0904 (0.1376)  loss_mask: 0.2741 (0.3384)  loss_objectness: 0.0249 (0.0473)  loss_rpn_box_reg: 0.0107 (0.0226)  time: 0.1073 (0.1231)  data: 0.0014 (0.0154)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:56,274 maskrcnn_benchmark.trainer INFO: eta: 1:14:42  iter: 3560  loss: 0.7374 (0.8754)  loss_classifier: 0.2676 (0.3299)  loss_box_reg: 0.1130 (0.1375)  loss_mask: 0.2696 (0.3381)  loss_objectness: 0.0257 (0.0473)  loss_rpn_box_reg: 0.0071 (0.0226)  time: 0.1076 (0.1230)  data: 0.0014 (0.0153)  lr: 0.160000  max mem: 5155
2020-06-23 17:25:58,402 maskrcnn_benchmark.trainer INFO: eta: 1:14:37  iter: 3580  loss: 0.6898 (0.8745)  loss_classifier: 0.2431 (0.3295)  loss_box_reg: 0.1096 (0.1374)  loss_mask: 0.2806 (0.3378)  loss_objectness: 0.0222 (0.0472)  loss_rpn_box_reg: 0.0102 (0.0226)  time: 0.1059 (0.1229)  data: 0.0014 (0.0153)  lr: 0.160000  max mem: 5155
2020-06-23 17:26:00,569 maskrcnn_benchmark.trainer INFO: eta: 1:14:31  iter: 3600  loss: 0.6951 (0.8738)  loss_classifier: 0.2428 (0.3292)  loss_box_reg: 0.1158 (0.1373)  loss_mask: 0.2797 (0.3375)  loss_objectness: 0.0227 (0.0472)  loss_rpn_box_reg: 0.0112 (0.0226)  time: 0.1079 (0.1228)  data: 0.0014 (0.0152)  lr: 0.160000  max mem: 5155
2020-06-23 17:26:02,712 maskrcnn_benchmark.trainer INFO: eta: 1:14:26  iter: 3620  loss: 0.6891 (0.8728)  loss_classifier: 0.2400 (0.3288)  loss_box_reg: 0.1126 (0.1371)  loss_mask: 0.2822 (0.3372)  loss_objectness: 0.0299 (0.0471)  loss_rpn_box_reg: 0.0130 (0.0226)  time: 0.1071 (0.1228)  data: 0.0014 (0.0151)  lr: 0.160000  max mem: 5155
2020-06-23 17:26:04,843 maskrcnn_benchmark.trainer INFO: eta: 1:14:20  iter: 3640  loss: 0.7981 (0.8725)  loss_classifier: 0.2943 (0.3286)  loss_box_reg: 0.1376 (0.1372)  loss_mask: 0.3195 (0.3370)  loss_objectness: 0.0298 (0.0471)  loss_rpn_box_reg: 0.0134 (0.0226)  time: 0.1065 (0.1227)  data: 0.0015 (0.0150)  lr: 0.160000  max mem: 5155
2020-06-23 17:26:06,990 maskrcnn_benchmark.trainer INFO: eta: 1:14:14  iter: 3660  loss: 0.6366 (0.8715)  loss_classifier: 0.2459 (0.3283)  loss_box_reg: 0.1014 (0.1370)  loss_mask: 0.2795 (0.3367)  loss_objectness: 0.0202 (0.0470)  loss_rpn_box_reg: 0.0087 (0.0226)  time: 0.1069 (0.1226)  data: 0.0014 (0.0150)  lr: 0.160000  max mem: 5155
:::MLLOG {"namespace": "", "time_ms": 1592958368403, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1592958368403, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1592958368404, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 4}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 17:26:08,665 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.30s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.30s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.30s)
creating index...
Done (t=0.30s)
creating index...
index created!
index created!
index created!
index created!
index created!
2020-06-23 17:26:08,980 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:58,  1.33it/s]
  5%|         | 4/79 [00:00<00:40,  1.86it/s]
  9%|         | 7/79 [00:00<00:27,  2.58it/s]
 13%|        | 10/79 [00:01<00:19,  3.53it/s]
 16%|        | 13/79 [00:01<00:13,  4.75it/s]
 20%|        | 16/79 [00:01<00:10,  6.28it/s]
 24%|       | 19/79 [00:01<00:07,  8.13it/s]
 28%|       | 22/79 [00:01<00:05, 10.25it/s]
 32%|      | 25/79 [00:01<00:04, 12.50it/s]
 35%|      | 28/79 [00:01<00:03, 14.79it/s]
 39%|      | 31/79 [00:01<00:02, 16.94it/s]
 43%|     | 34/79 [00:02<00:02, 18.96it/s]
 47%|     | 37/79 [00:02<00:02, 20.44it/s]
 51%|     | 40/79 [00:02<00:01, 21.72it/s]
 54%|    | 43/79 [00:02<00:01, 22.97it/s]
 58%|    | 46/79 [00:02<00:01, 23.68it/s]
 62%|   | 49/79 [00:02<00:01, 24.05it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.29it/s]
  5%|         | 4/79 [00:00<00:41,  1.79it/s]
  9%|         | 7/79 [00:01<00:28,  2.49it/s]
 13%|        | 10/79 [00:01<00:20,  3.41it/s]
 16%|        | 13/79 [00:01<00:14,  4.62it/s]
 20%|        | 16/79 [00:01<00:10,  6.13it/s]
 24%|       | 19/79 [00:01<00:07,  7.95it/s]
 28%|       | 22/79 [00:01<00:05, 10.01it/s]
 32%|      | 25/79 [00:01<00:04, 12.28it/s]
 35%|      | 28/79 [00:01<00:03, 14.66it/s]
 39%|      | 31/79 [00:01<00:02, 16.63it/s]
 43%|     | 34/79 [00:02<00:02, 18.57it/s]
 47%|     | 37/79 [00:02<00:02, 20.43it/s]
 51%|     | 40/79 [00:02<00:01, 21.69it/s]
 54%|    | 43/79 [00:02<00:01, 22.63it/s]
 58%|    | 46/79 [00:02<00:01, 23.28it/s]
 62%|   | 49/79 [00:02<00:01, 23.99it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.83it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.60it/s]
 32%|      | 25/79 [00:01<00:04, 11.85it/s]
 35%|      | 28/79 [00:01<00:03, 14.17it/s]
 39%|      | 31/79 [00:02<00:02, 16.41it/s]
 43%|     | 34/79 [00:02<00:02, 18.33it/s]
 47%|     | 37/79 [00:02<00:02, 20.18it/s]
 51%|     | 40/79 [00:02<00:01, 21.47it/s]
 54%|    | 43/79 [00:02<00:01, 22.55it/s]
 58%|    | 46/79 [00:02<00:01, 23.09it/s]
 62%|   | 49/79 [00:02<00:01, 24.01it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:14,  4.40it/s]
 20%|        | 16/79 [00:01<00:10,  5.85it/s]
 24%|       | 19/79 [00:01<00:07,  7.61it/s]
 28%|       | 22/79 [00:01<00:05,  9.66it/s]
 32%|      | 25/79 [00:01<00:04, 11.88it/s]
 35%|      | 28/79 [00:01<00:03, 14.14it/s]
 39%|      | 31/79 [00:02<00:02, 16.35it/s]
 43%|     | 34/79 [00:02<00:02, 18.39it/s]
 47%|     | 37/79 [00:02<00:02, 20.07it/s]
 51%|     | 40/79 [00:02<00:01, 21.54it/s]
 54%|    | 43/79 [00:02<00:01, 22.57it/s]
 58%|    | 46/79 [00:02<00:01, 23.50it/s]
 62%|   | 49/79 [00:02<00:01, 24.29it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.76it/s]
 24%|       | 19/79 [00:01<00:08,  7.50it/s]
 28%|       | 22/79 [00:01<00:05,  9.54it/s]
 32%|      | 25/79 [00:01<00:04, 11.84it/s]
 35%|      | 28/79 [00:01<00:03, 14.13it/s]
 39%|      | 31/79 [00:02<00:02, 16.42it/s]
 43%|     | 34/79 [00:02<00:02, 18.53it/s]
 47%|     | 37/79 [00:02<00:02, 20.44it/s]
 51%|     | 40/79 [00:02<00:01, 21.69it/s]
 54%|    | 43/79 [00:02<00:01, 23.11it/s]
 58%|    | 46/79 [00:02<00:01, 23.72it/s]
 62%|   | 49/79 [00:02<00:01, 24.30it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  4%|         | 3/79 [00:00<00:44,  1.72it/s]
  8%|         | 6/79 [00:01<00:30,  2.38it/s]
 11%|        | 9/79 [00:01<00:21,  3.27it/s]
 15%|        | 12/79 [00:01<00:15,  4.43it/s]
 19%|        | 15/79 [00:01<00:10,  5.90it/s]
 23%|       | 18/79 [00:01<00:07,  7.67it/s]
 27%|       | 21/79 [00:01<00:05,  9.67it/s]
 30%|       | 24/79 [00:01<00:04, 11.93it/s]
 34%|      | 27/79 [00:01<00:03, 14.11it/s]
 38%|      | 30/79 [00:01<00:02, 16.34it/s]
 42%|     | 33/79 [00:02<00:02, 18.29it/s]
 46%|     | 36/79 [00:02<00:02, 20.03it/s]
 49%|     | 39/79 [00:02<00:01, 21.15it/s]
 53%|    | 42/79 [00:02<00:01, 22.31it/s]
 57%|    | 45/79 [00:02<00:01, 22.89it/s]
 61%|    | 48/79 [00:02<00:01, 23.66it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.84it/s]
 24%|       | 19/79 [00:01<00:07,  7.59it/s]
 28%|       | 22/79 [00:01<00:05,  9.65it/s]
 32%|      | 25/79 [00:01<00:04, 11.83it/s]
 35%|      | 28/79 [00:01<00:03, 14.15it/s]
 39%|      | 31/79 [00:01<00:02, 16.42it/s]
 43%|     | 34/79 [00:02<00:02, 18.42it/s]
 47%|     | 37/79 [00:02<00:02, 19.97it/s]
 51%|     | 40/79 [00:02<00:01, 21.61it/s]
 54%|    | 43/79 [00:02<00:01, 22.74it/s]
 58%|    | 46/79 [00:02<00:01, 23.67it/s]
 62%|   | 49/79 [00:02<00:01, 24.35it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  4%|         | 3/79 [00:00<00:48,  1.58it/s]
  8%|         | 6/79 [00:01<00:33,  2.20it/s]
 11%|        | 9/79 [00:01<00:23,  3.03it/s]
 15%|        | 12/79 [00:01<00:16,  4.12it/s]
 19%|        | 15/79 [00:01<00:11,  5.51it/s]
 23%|       | 18/79 [00:01<00:08,  7.22it/s]
 27%|       | 21/79 [00:01<00:06,  9.21it/s]
 30%|       | 24/79 [00:01<00:04, 11.41it/s]
 34%|      | 27/79 [00:01<00:03, 13.80it/s]
 38%|      | 30/79 [00:02<00:03, 16.04it/s]
 42%|     | 33/79 [00:02<00:02, 17.85it/s]
 46%|     | 36/79 [00:02<00:02, 19.72it/s]
 49%|     | 39/79 [00:02<00:01, 21.21it/s]
 53%|    | 42/79 [00:02<00:01, 22.77it/s]
 57%|    | 45/79 [00:02<00:01, 23.37it/s]
 61%|    | 48/79 [00:02<00:01, 24.18it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:29,  2.40it/s]
 13%|        | 10/79 [00:01<00:20,  3.30it/s]
 16%|        | 13/79 [00:01<00:14,  4.47it/s]
 20%|        | 16/79 [00:01<00:10,  5.93it/s]
 24%|       | 19/79 [00:01<00:07,  7.72it/s]
 28%|       | 22/79 [00:01<00:05,  9.74it/s]
 32%|      | 25/79 [00:01<00:04, 11.99it/s]
 35%|      | 28/79 [00:01<00:03, 14.25it/s]
 39%|      | 31/79 [00:01<00:02, 16.43it/s]
 43%|     | 34/79 [00:02<00:02, 18.45it/s]
 47%|     | 37/79 [00:02<00:02, 20.25it/s]
 51%|     | 40/79 [00:02<00:01, 21.62it/s]
 54%|    | 43/79 [00:02<00:01, 22.76it/s]
 58%|    | 46/79 [00:02<00:01, 23.50it/s]
 62%|   | 49/79 [00:02<00:01, 24.25it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.61it/s]
 32%|      | 25/79 [00:01<00:04, 11.83it/s]
 35%|      | 28/79 [00:01<00:03, 14.15it/s]
 39%|      | 31/79 [00:02<00:02, 16.32it/s]
 43%|     | 34/79 [00:02<00:02, 18.38it/s]
 47%|     | 37/79 [00:02<00:02, 20.13it/s]
 51%|     | 40/79 [00:02<00:01, 21.47it/s]
 54%|    | 43/79 [00:02<00:01, 22.64it/s]
 58%|    | 46/79 [00:02<00:01, 23.52it/s]
 62%|   | 49/79 [00:02<00:01, 24.33it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.78it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:05,  9.54it/s]
 32%|      | 25/79 [00:01<00:04, 11.71it/s]
 35%|      | 28/79 [00:01<00:03, 14.03it/s]
 39%|      | 31/79 [00:02<00:02, 16.14it/s]
 43%|     | 34/79 [00:02<00:02, 18.17it/s]
 47%|     | 37/79 [00:02<00:02, 19.75it/s]
 51%|     | 40/79 [00:02<00:01, 21.22it/s]
 54%|    | 43/79 [00:02<00:01, 22.28it/s]
 58%|    | 46/79 [00:02<00:01, 23.24it/s]
 62%|   | 49/79 [00:02<00:01, 23.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.71it/s]
 24%|       | 19/79 [00:01<00:08,  7.46it/s]
 28%|       | 22/79 [00:01<00:06,  9.47it/s]
 32%|      | 25/79 [00:01<00:04, 11.59it/s]
 35%|      | 28/79 [00:01<00:03, 13.78it/s]
 39%|      | 31/79 [00:02<00:03, 15.96it/s]
 43%|     | 34/79 [00:02<00:02, 17.92it/s]
 47%|     | 37/79 [00:02<00:02, 19.80it/s]
 51%|     | 40/79 [00:02<00:01, 21.23it/s]
 54%|    | 43/79 [00:02<00:01, 22.49it/s]
 58%|    | 46/79 [00:02<00:01, 23.40it/s]
 62%|   | 49/79 [00:02<00:01, 24.31it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  4%|         | 3/79 [00:00<00:45,  1.67it/s]
  8%|         | 6/79 [00:01<00:31,  2.31it/s]
 11%|        | 9/79 [00:01<00:22,  3.17it/s]
 15%|        | 12/79 [00:01<00:15,  4.30it/s]
 19%|        | 15/79 [00:01<00:11,  5.73it/s]
 23%|       | 18/79 [00:01<00:08,  7.44it/s]
 27%|       | 21/79 [00:01<00:06,  9.43it/s]
 30%|       | 24/79 [00:01<00:04, 11.62it/s]
 34%|      | 27/79 [00:01<00:03, 13.84it/s]
 38%|      | 30/79 [00:02<00:03, 16.01it/s]
 42%|     | 33/79 [00:02<00:02, 17.86it/s]
 46%|     | 36/79 [00:02<00:02, 19.58it/s]
 49%|     | 39/79 [00:02<00:01, 21.03it/s]
 53%|    | 42/79 [00:02<00:01, 22.09it/s]
 57%|    | 45/79 [00:02<00:01, 22.82it/s]
 61%|    | 48/79 [00:02<00:01, 23.39it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.78it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:05,  9.53it/s]
 32%|      | 25/79 [00:01<00:04, 11.72it/s]
 35%|      | 28/79 [00:01<00:03, 14.05it/s]
 39%|      | 31/79 [00:02<00:02, 16.20it/s]
 43%|     | 34/79 [00:02<00:02, 18.23it/s]
 47%|     | 37/79 [00:02<00:02, 19.72it/s]
 51%|     | 40/79 [00:02<00:01, 21.25it/s]
 54%|    | 43/79 [00:02<00:01, 22.42it/s]
 58%|    | 46/79 [00:02<00:01, 23.18it/s]
 62%|   | 49/79 [00:02<00:01, 23.70it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.48it/s]
 28%|       | 22/79 [00:01<00:06,  9.47it/s]
 32%|      | 25/79 [00:01<00:04, 11.63it/s]
 35%|      | 28/79 [00:01<00:03, 13.90it/s]
 39%|      | 31/79 [00:02<00:02, 16.11it/s]
 43%|     | 34/79 [00:02<00:02, 18.12it/s]
 47%|     | 37/79 [00:02<00:02, 19.73it/s]
 51%|     | 40/79 [00:02<00:01, 21.19it/s]
 54%|    | 43/79 [00:02<00:01, 22.26it/s]
 58%|    | 46/79 [00:02<00:01, 23.17it/s]
 62%|   | 49/79 [00:02<00:01, 23.59it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.47it/s]
 28%|       | 22/79 [00:01<00:06,  9.48it/s]
 32%|      | 25/79 [00:01<00:04, 11.66it/s]
 35%|      | 28/79 [00:01<00:03, 13.86it/s]
 39%|      | 31/79 [00:02<00:02, 16.11it/s]
 43%|     | 34/79 [00:02<00:02, 18.09it/s]
 47%|     | 37/79 [00:02<00:02, 19.87it/s]
 51%|     | 40/79 [00:02<00:01, 20.94it/s]
 54%|    | 43/79 [00:02<00:01, 21.95it/s]
 58%|    | 46/79 [00:02<00:01, 22.60it/s]
 62%|   | 49/79 [00:02<00:01, 23.25it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  9.01it/s]
 32%|      | 25/79 [00:01<00:04, 11.21it/s]
 35%|      | 28/79 [00:01<00:03, 13.49it/s]
 39%|      | 31/79 [00:02<00:03, 15.80it/s]
 43%|     | 34/79 [00:02<00:02, 17.91it/s]
 47%|     | 37/79 [00:02<00:02, 19.83it/s]
 51%|     | 40/79 [00:02<00:01, 21.13it/s]
 54%|    | 43/79 [00:02<00:01, 22.29it/s]
 58%|    | 46/79 [00:02<00:01, 23.02it/s]
 62%|   | 49/79 [00:02<00:01, 23.68it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.44it/s]
 32%|      | 25/79 [00:01<00:04, 11.52it/s]
 35%|      | 28/79 [00:01<00:03, 13.75it/s]
 39%|      | 31/79 [00:02<00:02, 16.01it/s]
 43%|     | 34/79 [00:02<00:02, 17.96it/s]
 47%|     | 37/79 [00:02<00:02, 19.75it/s]
 51%|     | 40/79 [00:02<00:01, 21.17it/s]
 54%|    | 43/79 [00:02<00:01, 22.08it/s]
 58%|    | 46/79 [00:02<00:01, 22.87it/s]
 62%|   | 49/79 [00:02<00:01, 23.40it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.46it/s]
 28%|       | 22/79 [00:01<00:06,  9.44it/s]
 32%|      | 25/79 [00:01<00:04, 11.62it/s]
 35%|      | 28/79 [00:01<00:03, 13.84it/s]
 39%|      | 31/79 [00:02<00:03, 15.92it/s]
 43%|     | 34/79 [00:02<00:02, 17.90it/s]
 47%|     | 37/79 [00:02<00:02, 19.69it/s]
 51%|     | 40/79 [00:02<00:01, 20.85it/s]
 54%|    | 43/79 [00:02<00:01, 22.06it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.55it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.22it/s]
 35%|      | 28/79 [00:01<00:03, 13.50it/s]
 39%|      | 31/79 [00:02<00:03, 15.67it/s]
 43%|     | 34/79 [00:02<00:02, 17.69it/s]
 47%|     | 37/79 [00:02<00:02, 19.27it/s]
 51%|     | 40/79 [00:02<00:01, 20.83it/s]
 54%|    | 43/79 [00:02<00:01, 22.26it/s]
 58%|    | 46/79 [00:02<00:01, 22.96it/s]
 62%|   | 49/79 [00:02<00:01, 23.61it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:06,  9.49it/s]
 32%|      | 25/79 [00:01<00:04, 11.64it/s]
 35%|      | 28/79 [00:01<00:03, 13.91it/s]
 39%|      | 31/79 [00:02<00:02, 16.02it/s]
 43%|     | 34/79 [00:02<00:02, 18.08it/s]
 47%|     | 37/79 [00:02<00:02, 19.84it/s]
 51%|     | 40/79 [00:02<00:01, 20.97it/s]
 54%|    | 43/79 [00:02<00:01, 22.02it/s]
 58%|    | 46/79 [00:02<00:01, 22.73it/s]
 62%|   | 49/79 [00:02<00:01, 23.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.53it/s]
 35%|      | 28/79 [00:01<00:03, 13.70it/s]
 39%|      | 31/79 [00:02<00:03, 15.78it/s]
 43%|     | 34/79 [00:02<00:02, 17.76it/s]
 47%|     | 37/79 [00:02<00:02, 19.50it/s]
 51%|     | 40/79 [00:02<00:01, 20.78it/s]
 54%|    | 43/79 [00:02<00:01, 21.82it/s]
 58%|    | 46/79 [00:02<00:01, 22.37it/s]
 62%|   | 49/79 [00:02<00:01, 23.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.04it/s]
 32%|      | 25/79 [00:01<00:04, 11.21it/s]
 35%|      | 28/79 [00:01<00:03, 13.51it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.88it/s]
 47%|     | 37/79 [00:02<00:02, 19.70it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 22.17it/s]
 58%|    | 46/79 [00:02<00:01, 23.02it/s]
 62%|   | 49/79 [00:02<00:01, 23.43it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.33it/s]
 28%|       | 22/79 [00:01<00:06,  9.28it/s]
 32%|      | 25/79 [00:01<00:04, 11.40it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.80it/s]
 43%|     | 34/79 [00:02<00:02, 17.81it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.76it/s]
 54%|    | 43/79 [00:02<00:01, 21.90it/s]
 58%|    | 46/79 [00:02<00:01, 22.77it/s]
 62%|   | 49/79 [00:02<00:01, 23.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:00<00:46,  1.63it/s]
  8%|         | 6/79 [00:01<00:32,  2.26it/s]
 11%|        | 9/79 [00:01<00:22,  3.11it/s]
 15%|        | 12/79 [00:01<00:15,  4.22it/s]
 19%|        | 15/79 [00:01<00:11,  5.62it/s]
 23%|       | 18/79 [00:01<00:08,  7.34it/s]
 27%|       | 21/79 [00:01<00:06,  9.31it/s]
 30%|       | 24/79 [00:01<00:04, 11.44it/s]
 34%|      | 27/79 [00:01<00:03, 13.64it/s]
 38%|      | 30/79 [00:02<00:03, 15.65it/s]
 42%|     | 33/79 [00:02<00:02, 17.56it/s]
 46%|     | 36/79 [00:02<00:02, 19.11it/s]
 49%|     | 39/79 [00:02<00:01, 20.43it/s]
 53%|    | 42/79 [00:02<00:01, 21.40it/s]
 57%|    | 45/79 [00:02<00:01, 22.30it/s]
 61%|    | 48/79 [00:02<00:01, 22.66it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.48it/s]
 24%|       | 19/79 [00:01<00:08,  7.17it/s]
 28%|       | 22/79 [00:01<00:06,  9.18it/s]
 32%|      | 25/79 [00:01<00:04, 11.29it/s]
 35%|      | 28/79 [00:01<00:03, 13.56it/s]
 39%|      | 31/79 [00:02<00:03, 15.75it/s]
 43%|     | 34/79 [00:02<00:02, 17.90it/s]
 47%|     | 37/79 [00:02<00:02, 19.43it/s]
 51%|     | 40/79 [00:02<00:01, 20.83it/s]
 54%|    | 43/79 [00:02<00:01, 22.00it/s]
 58%|    | 46/79 [00:02<00:01, 22.78it/s]
 62%|   | 49/79 [00:02<00:01, 23.33it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.13it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.21it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.36it/s]
 35%|      | 28/79 [00:01<00:03, 13.59it/s]
 39%|      | 31/79 [00:02<00:03, 15.72it/s]
 43%|     | 34/79 [00:02<00:02, 17.71it/s]
 47%|     | 37/79 [00:02<00:02, 19.44it/s]
 51%|     | 40/79 [00:02<00:01, 20.82it/s]
 54%|    | 43/79 [00:02<00:01, 21.76it/s]
 58%|    | 46/79 [00:02<00:01, 22.78it/s]
 62%|   | 49/79 [00:02<00:01, 23.64it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.20it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.29it/s]
 35%|      | 28/79 [00:01<00:03, 13.49it/s]
 39%|      | 31/79 [00:02<00:03, 15.55it/s]
 43%|     | 34/79 [00:02<00:02, 17.38it/s]
 47%|     | 37/79 [00:02<00:02, 19.07it/s]
 51%|     | 40/79 [00:02<00:01, 20.12it/s]
 54%|    | 43/79 [00:02<00:01, 21.32it/s]
 58%|    | 46/79 [00:02<00:01, 21.92it/s]
 62%|   | 49/79 [00:02<00:01, 22.66it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  4%|         | 3/79 [00:00<00:46,  1.63it/s]
  8%|         | 6/79 [00:01<00:32,  2.26it/s]
 11%|        | 9/79 [00:01<00:22,  3.11it/s]
 15%|        | 12/79 [00:01<00:15,  4.21it/s]
 19%|        | 15/79 [00:01<00:11,  5.61it/s]
 23%|       | 18/79 [00:01<00:08,  7.33it/s]
 27%|       | 21/79 [00:01<00:06,  9.27it/s]
 30%|       | 24/79 [00:01<00:04, 11.40it/s]
 34%|      | 27/79 [00:01<00:03, 13.62it/s]
 38%|      | 30/79 [00:02<00:03, 15.72it/s]
 42%|     | 33/79 [00:02<00:02, 17.59it/s]
 46%|     | 36/79 [00:02<00:02, 19.05it/s]
 49%|     | 39/79 [00:02<00:01, 20.45it/s]
 53%|    | 42/79 [00:02<00:01, 21.55it/s]
 57%|    | 45/79 [00:02<00:01, 22.47it/s]
 61%|    | 48/79 [00:02<00:01, 22.88it/s]
 65%|   | 51/79 [00:02<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.46it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.00it/s]
 32%|      | 25/79 [00:01<00:04, 11.06it/s]
 35%|      | 28/79 [00:02<00:03, 13.18it/s]
 39%|      | 31/79 [00:02<00:03, 15.28it/s]
 43%|     | 34/79 [00:02<00:02, 17.16it/s]
 47%|     | 37/79 [00:02<00:02, 18.88it/s]
 51%|     | 40/79 [00:02<00:01, 20.27it/s]
 54%|    | 43/79 [00:02<00:01, 21.56it/s]
 58%|    | 46/79 [00:02<00:01, 22.66it/s]
 62%|   | 49/79 [00:02<00:01, 23.37it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.21it/s]
 28%|       | 22/79 [00:01<00:06,  9.11it/s]
 32%|      | 25/79 [00:01<00:04, 11.20it/s]
 35%|      | 28/79 [00:01<00:03, 13.41it/s]
 39%|      | 31/79 [00:02<00:03, 15.51it/s]
 43%|     | 34/79 [00:02<00:02, 17.26it/s]
 47%|     | 37/79 [00:02<00:02, 18.81it/s]
 51%|     | 40/79 [00:02<00:01, 20.20it/s]
 54%|    | 43/79 [00:02<00:01, 21.08it/s]
 58%|    | 46/79 [00:02<00:01, 21.79it/s]
 62%|   | 49/79 [00:02<00:01, 22.36it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.93it/s]
 20%|        | 16/79 [00:01<00:12,  5.25it/s]
 24%|       | 19/79 [00:01<00:08,  6.89it/s]
 28%|       | 22/79 [00:01<00:06,  8.76it/s]
 32%|      | 25/79 [00:01<00:04, 10.88it/s]
 35%|      | 28/79 [00:02<00:03, 13.01it/s]
 39%|      | 31/79 [00:02<00:03, 15.25it/s]
 43%|     | 34/79 [00:02<00:02, 17.26it/s]
 47%|     | 37/79 [00:02<00:02, 18.83it/s]
 51%|     | 40/79 [00:02<00:01, 20.27it/s]
 54%|    | 43/79 [00:02<00:01, 21.38it/s]
 58%|    | 46/79 [00:02<00:01, 22.13it/s]
 62%|   | 49/79 [00:02<00:01, 22.76it/s]
 66%|   | 52/79 [00:03<00:01, 24.61it/s]
 70%|   | 55/79 [00:02<00:00, 24.96it/s]
 73%|  | 58/79 [00:02<00:00, 25.10it/s]
 77%|  | 61/79 [00:03<00:00, 25.31it/s]
 81%|  | 64/79 [00:03<00:00, 25.30it/s]
 85%| | 67/79 [00:03<00:00, 25.58it/s]
 89%| | 70/79 [00:03<00:00, 25.61it/s]
 92%|| 73/79 [00:03<00:00, 25.82it/s]
 96%|| 76/79 [00:03<00:00, 26.26it/s]
100%|| 79/79 [00:03<00:00, 27.21it/s]
, 24.62it/s]
 70%|   | 55/79 [00:02<00:00, 24.89it/s]
 73%|  | 58/79 [00:03<00:00, 25.36it/s]
 77%|  | 61/79 [00:03<00:00, 25.37it/s]
 81%|  | 64/79 [00:03<00:00, 25.55it/s]
 85%| | 67/79 [00:03<00:00, 25.60it/s]
 89%| | 70/79 [00:03<00:00, 25.84it/s]
 92%|| 73/79 [00:03<00:00, 26.05it/s]
 96%|| 76/79 [00:03<00:00, 27.07it/s]
100%|| 79/79 [00:03<00:00, 27.42it/s]
, 24.70it/s]
 70%|   | 55/79 [00:02<00:00, 24.95it/s]
 73%|  | 58/79 [00:03<00:00, 25.33it/s]
 77%|  | 61/79 [00:03<00:00, 25.59it/s]
 81%|  | 64/79 [00:03<00:00, 25.59it/s]
 85%| | 67/79 [00:03<00:00, 25.45it/s]
 89%| | 70/79 [00:03<00:00, 25.39it/s]
 92%|| 73/79 [00:03<00:00, 25.83it/s]
 96%|| 76/79 [00:03<00:00, 26.37it/s]
100%|| 79/79 [00:03<00:00, 27.22it/s]
, 24.62it/s]
 70%|   | 55/79 [00:02<00:00, 24.73it/s]
 73%|  | 58/79 [00:03<00:00, 25.03it/s]
 77%|  | 61/79 [00:03<00:00, 25.57it/s]
 81%|  | 64/79 [00:03<00:00, 25.42it/s]
 85%| | 67/79 [00:03<00:00, 25.85it/s]
 89%| | 70/79 [00:03<00:00, 25.62it/s]
 92%|| 73/79 [00:03<00:00, 25.92it/s]
 96%|| 76/79 [00:03<00:00, 26.51it/s]
100%|| 79/79 [00:03<00:00, 27.45it/s]
, 24.75it/s]
 70%|   | 55/79 [00:02<00:00, 25.13it/s]
 73%|  | 58/79 [00:03<00:00, 25.34it/s]
 77%|  | 61/79 [00:03<00:00, 25.35it/s]
 81%|  | 64/79 [00:03<00:00, 25.12it/s]
 85%| | 67/79 [00:03<00:00, 25.46it/s]
 89%| | 70/79 [00:03<00:00, 25.36it/s]
 92%|| 73/79 [00:03<00:00, 25.78it/s]
 96%|| 76/79 [00:03<00:00, 26.13it/s]
100%|| 79/79 [00:03<00:00, 27.15it/s]
, 24.70it/s]
 70%|   | 55/79 [00:02<00:00, 25.10it/s]
 73%|  | 58/79 [00:03<00:00, 25.07it/s]
 77%|  | 61/79 [00:03<00:00, 25.31it/s]
 81%|  | 64/79 [00:03<00:00, 25.39it/s]
 85%| | 67/79 [00:03<00:00, 25.53it/s]
 89%| | 70/79 [00:03<00:00, 25.57it/s]
 92%|| 73/79 [00:03<00:00, 25.85it/s]
 96%|| 76/79 [00:03<00:00, 26.29it/s]
100%|| 79/79 [00:03<00:00, 27.17it/s]
, 24.89it/s]
 70%|   | 55/79 [00:02<00:00, 25.09it/s]
 73%|  | 58/79 [00:03<00:00, 25.53it/s]
 77%|  | 61/79 [00:03<00:00, 25.61it/s]
 81%|  | 64/79 [00:03<00:00, 25.86it/s]
 85%| | 67/79 [00:03<00:00, 25.97it/s]
 89%| | 70/79 [00:03<00:00, 26.31it/s]
 92%|| 73/79 [00:03<00:00, 26.42it/s]
 96%|| 76/79 [00:03<00:00, 26.98it/s]
100%|| 79/79 [00:03<00:00, 27.61it/s]
20it/s]
 68%|   | 54/79 [00:02<00:01, 24.58it/s]
 72%|  | 57/79 [00:03<00:00, 25.07it/s]
 76%|  | 60/79 [00:03<00:00, 25.24it/s]
 80%|  | 63/79 [00:03<00:00, 25.15it/s]
 84%| | 66/79 [00:03<00:00, 25.45it/s]
 87%| | 69/79 [00:03<00:00, 25.49it/s]
 91%| | 72/79 [00:03<00:00, 25.54it/s]
 95%|| 75/79 [00:03<00:00, 26.20it/s]
 99%|| 78/79 [00:03<00:00, 26.76it/s]
100%|| 79/79 [00:03<00:00, 20.06it/s]
, 24.44it/s]
 70%|   | 55/79 [00:02<00:00, 25.08it/s]
 73%|  | 58/79 [00:03<00:00, 25.29it/s]
 77%|  | 61/79 [00:03<00:00, 25.37it/s]
 81%|  | 64/79 [00:03<00:00, 25.46it/s]
 85%| | 67/79 [00:03<00:00, 25.61it/s]
 89%| | 70/79 [00:03<00:00, 25.42it/s]
 92%|| 73/79 [00:03<00:00, 25.88it/s]
 96%|| 76/79 [00:03<00:00, 26.50it/s]
100%|| 79/79 [00:03<00:00, 27.38it/s]
87it/s]
 68%|   | 54/79 [00:02<00:00, 25.03it/s]
 72%|  | 57/79 [00:03<00:00, 25.30it/s]
 76%|  | 60/79 [00:03<00:00, 25.26it/s]
 80%|  | 63/79 [00:03<00:00, 25.34it/s]
 84%| | 66/79 [00:03<00:00, 25.23it/s]
 87%| | 69/79 [00:03<00:00, 25.29it/s]
 91%| | 72/79 [00:03<00:00, 25.08it/s]
 95%|| 75/79 [00:03<00:00, 25.88it/s]
 99%|| 78/79 [00:03<00:00, 26.38it/s]
100%|| 79/79 [00:03<00:00, 19.95it/s]
, 24.69it/s]
 70%|   | 55/79 [00:02<00:00, 25.03it/s]
 73%|  | 58/79 [00:03<00:00, 25.16it/s]
 77%|  | 61/79 [00:03<00:00, 25.25it/s]
 81%|  | 64/79 [00:03<00:00, 25.21it/s]
 85%| | 67/79 [00:03<00:00, 25.50it/s]
 89%| | 70/79 [00:03<00:00, 24.83it/s]
 92%|| 73/79 [00:03<00:00, 25.44it/s]
 96%|| 76/79 [00:03<00:00, 25.95it/s]
100%|| 79/79 [00:03<00:00, 26.90it/s]
, 24.07it/s]
 70%|   | 55/79 [00:02<00:00, 24.30it/s]
 73%|  | 58/79 [00:03<00:00, 24.33it/s]
 77%|  | 61/79 [00:03<00:00, 24.76it/s]
 81%|  | 64/79 [00:03<00:00, 24.82it/s]
 85%| | 67/79 [00:03<00:00, 24.78it/s]
 89%| | 70/79 [00:03<00:00, 24.93it/s]
 92%|| 73/79 [00:03<00:00, 25.42it/s]
 96%|| 76/79 [00:03<00:00, 26.20it/s]
100%|| 79/79 [00:03<00:00, 27.13it/s]
, 24.06it/s]
 70%|   | 55/79 [00:02<00:00, 24.24it/s]
 73%|  | 58/79 [00:03<00:00, 24.43it/s]
 77%|  | 61/79 [00:03<00:00, 24.36it/s]
 81%|  | 64/79 [00:03<00:00, 24.44it/s]
 85%| | 67/79 [00:03<00:00, 24.48it/s]
 89%| | 70/79 [00:03<00:00, 24.45it/s]
 92%|| 73/79 [00:03<00:00, 24.96it/s]
 96%|| 76/79 [00:03<00:00, 25.60it/s]
100%|| 79/79 [00:03<00:00, 26.45it/s]
, 24.07it/s]
 70%|   | 55/79 [00:02<00:00, 24.24it/s]
 73%|  | 58/79 [00:03<00:00, 24.58it/s]
 77%|  | 61/79 [00:03<00:00, 24.79it/s]
 81%|  | 64/79 [00:03<00:00, 25.00it/s]
 85%| | 67/79 [00:03<00:00, 25.12it/s]
 89%| | 70/79 [00:03<00:00, 25.12it/s]
 92%|| 73/79 [00:03<00:00, 25.51it/s]
 96%|| 76/79 [00:03<00:00, 26.06it/s]
100%|| 79/79 [00:03<00:00, 26.86it/s]
, 24.11it/s]
 70%|   | 55/79 [00:03<00:00, 24.48it/s]
 73%|  | 58/79 [00:03<00:00, 24.99it/s]
 77%|  | 61/79 [00:03<00:00, 25.15it/s]
 81%|  | 64/79 [00:03<00:00, 25.44it/s]
 85%| | 67/79 [00:03<00:00, 25.36it/s]
 89%| | 70/79 [00:03<00:00, 25.62it/s]
 92%|| 73/79 [00:03<00:00, 26.05it/s]
 96%|| 76/79 [00:03<00:00, 26.61it/s]
100%|| 79/79 [00:03<00:00, 27.31it/s]
, 23.93it/s]
 70%|   | 55/79 [00:03<00:00, 24.22it/s]
 73%|  | 58/79 [00:03<00:00, 24.67it/s]
 77%|  | 61/79 [00:03<00:00, 24.73it/s]
 81%|  | 64/79 [00:03<00:00, 25.03it/s]
 85%| | 67/79 [00:03<00:00, 25.05it/s]
 89%| | 70/79 [00:03<00:00, 25.12it/s]
 92%|| 73/79 [00:03<00:00, 25.36it/s]
 96%|| 76/79 [00:03<00:00, 25.98it/s]
100%|| 79/79 [00:03<00:00, 26.79it/s]
38it/s]
 68%|   | 54/79 [00:02<00:01, 23.85it/s]
 72%|  | 57/79 [00:03<00:00, 23.58it/s]
 76%|  | 60/79 [00:03<00:00, 23.84it/s]
 80%|  | 63/79 [00:03<00:00, 24.25it/s]
 84%| | 66/79 [00:03<00:00, 24.56it/s]
 87%| | 69/79 [00:03<00:00, 24.40it/s]
 91%| | 72/79 [00:03<00:00, 24.70it/s]
 95%|| 75/79 [00:03<00:00, 25.52it/s]
 99%|| 78/79 [00:03<00:00, 26.43it/s]
100%|| 79/79 [00:04<00:00, 19.57it/s]
, 23.86it/s]
 70%|   | 55/79 [00:03<00:00, 24.28it/s]
 73%|  | 58/79 [00:03<00:00, 24.53it/s]
 77%|  | 61/79 [00:03<00:00, 24.66it/s]
 81%|  | 64/79 [00:03<00:00, 24.81it/s]
 85%| | 67/79 [00:03<00:00, 25.09it/s]
 89%| | 70/79 [00:03<00:00, 25.00it/s]
 92%|| 73/79 [00:03<00:00, 25.10it/s]
 96%|| 76/79 [00:03<00:00, 25.94it/s]
100%|| 79/79 [00:03<00:00, 26.83it/s]
, 23.82it/s]
 70%|   | 55/79 [00:03<00:00, 24.33it/s]
 73%|  | 58/79 [00:03<00:00, 24.50it/s]
 77%|  | 61/79 [00:03<00:00, 24.68it/s]
 81%|  | 64/79 [00:03<00:00, 24.82it/s]
 85%| | 67/79 [00:03<00:00, 25.06it/s]
 89%| | 70/79 [00:03<00:00, 24.96it/s]
 92%|| 73/79 [00:03<00:00, 25.08it/s]
 96%|| 76/79 [00:03<00:00, 25.59it/s]
100%|| 79/79 [00:03<00:00, 26.42it/s]
, 23.50it/s]
 70%|   | 55/79 [00:03<00:00, 24.06it/s]
 73%|  | 58/79 [00:03<00:00, 24.27it/s]
 77%|  | 61/79 [00:03<00:00, 24.26it/s]
 81%|  | 64/79 [00:03<00:00, 24.36it/s]
 85%| | 67/79 [00:03<00:00, 24.45it/s]
 89%| | 70/79 [00:03<00:00, 24.50it/s]
 92%|| 73/79 [00:03<00:00, 25.06it/s]
 96%|| 76/79 [00:03<00:00, 25.84it/s]
100%|| 79/79 [00:03<00:00, 26.91it/s]
, 23.28it/s]
 70%|   | 55/79 [00:03<00:01, 23.47it/s]
 73%|  | 58/79 [00:03<00:00, 23.94it/s]
 77%|  | 61/79 [00:03<00:00, 24.15it/s]
 81%|  | 64/79 [00:03<00:00, 24.15it/s]
 85%| | 67/79 [00:03<00:00, 24.41it/s]
 89%| | 70/79 [00:03<00:00, 24.74it/s]
 92%|| 73/79 [00:03<00:00, 25.12it/s]
 96%|| 76/79 [00:03<00:00, 25.94it/s]
100%|| 79/79 [00:03<00:00, 26.96it/s]
, 23.93it/s]
 70%|   | 55/79 [00:03<00:00, 24.11it/s]
 73%|  | 58/79 [00:03<00:00, 24.29it/s]
 77%|  | 61/79 [00:03<00:00, 24.34it/s]
 81%|  | 64/79 [00:03<00:00, 24.53it/s]
 85%| | 67/79 [00:03<00:00, 24.68it/s]
 89%| | 70/79 [00:03<00:00, 24.61it/s]
 92%|| 73/79 [00:03<00:00, 24.99it/s]
 96%|| 76/79 [00:03<00:00, 25.58it/s]
100%|| 79/79 [00:03<00:00, 26.39it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:01, 23.92it/s]
 73%|  | 58/79 [00:03<00:00, 24.04it/s]
 77%|  | 61/79 [00:03<00:00, 23.96it/s]
 81%|  | 64/79 [00:03<00:00, 24.29it/s]
 85%| | 67/79 [00:03<00:00, 24.22it/s]
 89%| | 70/79 [00:03<00:00, 24.41it/s]
 92%|| 73/79 [00:03<00:00, 24.84it/s]
 96%|| 76/79 [00:03<00:00, 25.60it/s]
100%|| 79/79 [00:03<00:00, 26.60it/s]
, 23.99it/s]
 70%|   | 55/79 [00:03<00:00, 24.49it/s]
 73%|  | 58/79 [00:03<00:00, 24.93it/s]
 77%|  | 61/79 [00:03<00:00, 25.08it/s]
 81%|  | 64/79 [00:03<00:00, 24.62it/s]
 85%| | 67/79 [00:03<00:00, 24.78it/s]
 89%| | 70/79 [00:03<00:00, 25.02it/s]
 92%|| 73/79 [00:03<00:00, 24.78it/s]
 96%|| 76/79 [00:03<00:00, 25.47it/s]
100%|| 79/79 [00:03<00:00, 26.36it/s]
, 23.61it/s]
 70%|   | 55/79 [00:03<00:00, 24.06it/s]
 73%|  | 58/79 [00:03<00:00, 24.22it/s]
 77%|  | 61/79 [00:03<00:00, 24.46it/s]
 81%|  | 64/79 [00:03<00:00, 24.59it/s]
 85%| | 67/79 [00:03<00:00, 24.79it/s]
 89%| | 70/79 [00:03<00:00, 24.91it/s]
 92%|| 73/79 [00:03<00:00, 24.77it/s]
 96%|| 76/79 [00:03<00:00, 25.67it/s]
100%|| 79/79 [00:03<00:00, 25.88it/s]
12it/s]
 68%|   | 54/79 [00:03<00:01, 23.47it/s]
 72%|  | 57/79 [00:03<00:00, 24.00it/s]
 76%|  | 60/79 [00:03<00:00, 24.16it/s]
 80%|  | 63/79 [00:03<00:00, 24.12it/s]
 84%| | 66/79 [00:03<00:00, 24.31it/s]
 87%| | 69/79 [00:03<00:00, 24.62it/s]
 91%| | 72/79 [00:03<00:00, 24.56it/s]
 95%|| 75/79 [00:03<00:00, 25.36it/s]
 99%|| 78/79 [00:03<00:00, 25.92it/s]
100%|| 79/79 [00:04<00:00, 19.34it/s]
, 23.15it/s]
 70%|   | 55/79 [00:03<00:01, 23.63it/s]
 73%|  | 58/79 [00:03<00:00, 23.99it/s]
 77%|  | 61/79 [00:03<00:00, 24.20it/s]
 81%|  | 64/79 [00:03<00:00, 24.40it/s]
 85%| | 67/79 [00:03<00:00, 24.49it/s]
 89%| | 70/79 [00:03<00:00, 24.45it/s]
 92%|| 73/79 [00:03<00:00, 24.62it/s]
 96%|| 76/79 [00:03<00:00, 25.57it/s]
100%|| 79/79 [00:04<00:00, 26.27it/s]
41it/s]
 68%|   | 54/79 [00:03<00:01, 23.18it/s]
 72%|  | 57/79 [00:03<00:00, 23.54it/s]
 76%|  | 60/79 [00:03<00:00, 23.99it/s]
 80%|  | 63/79 [00:03<00:00, 24.30it/s]
 84%| | 66/79 [00:03<00:00, 24.59it/s]
 87%| | 69/79 [00:03<00:00, 24.69it/s]
 91%| | 72/79 [00:03<00:00, 24.56it/s]
 95%|| 75/79 [00:03<00:00, 25.30it/s]
 99%|| 78/79 [00:04<00:00, 25.74it/s]
100%|| 79/79 [00:04<00:00, 19.14it/s]
, 23.57it/s]
 70%|   | 55/79 [00:03<00:00, 24.01it/s]
 73%|  | 58/79 [00:03<00:00, 24.25it/s]
 77%|  | 61/79 [00:03<00:00, 23.83it/s]
 81%|  | 64/79 [00:03<00:00, 23.66it/s]
 85%| | 67/79 [00:03<00:00, 23.96it/s]
 89%| | 70/79 [00:03<00:00, 24.36it/s]
 92%|| 73/79 [00:03<00:00, 24.68it/s]
 96%|| 76/79 [00:03<00:00, 25.36it/s]
100%|| 79/79 [00:04<00:00, 26.26it/s]
, 22.90it/s]
 70%|   | 55/79 [00:03<00:01, 23.36it/s]
 73%|  | 58/79 [00:03<00:00, 23.63it/s]
 77%|  | 61/79 [00:03<00:00, 23.81it/s]
 81%|  | 64/79 [00:03<00:00, 24.08it/s]
 85%| | 67/79 [00:03<00:00, 24.26it/s]
 89%| | 70/79 [00:03<00:00, 24.40it/s]
 92%|| 73/79 [00:03<00:00, 24.90it/s]
 96%|| 76/79 [00:03<00:00, 25.56it/s]
100%|| 79/79 [00:04<00:00, 26.45it/s]
, 22.97it/s]
 70%|   | 55/79 [00:03<00:01, 23.55it/s]
 73%|  | 58/79 [00:03<00:00, 23.13it/s]
 77%|  | 61/79 [00:03<00:00, 23.69it/s]
 81%|  | 64/79 [00:03<00:00, 24.06it/s]
 85%| | 67/79 [00:03<00:00, 24.32it/s]
 89%| | 70/79 [00:03<00:00, 24.33it/s]
 92%|| 73/79 [00:03<00:00, 24.64it/s]
 96%|| 76/79 [00:03<00:00, 25.25it/s]
100%|| 79/79 [00:04<00:00, 26.04it/s]
, 23.72it/s]
 70%|   | 55/79 [00:03<00:01, 23.49it/s]
 73%|  | 58/79 [00:03<00:00, 23.54it/s]
 77%|  | 61/79 [00:03<00:00, 23.48it/s]
 81%|  | 64/79 [00:03<00:00, 23.45it/s]
 85%| | 67/79 [00:03<00:00, 23.54it/s]
 89%| | 70/79 [00:03<00:00, 23.72it/s]
 92%|| 73/79 [00:03<00:00, 21.83it/s]
 96%|| 76/79 [00:04<00:00, 20.33it/s]
100%|| 79/79 [00:04<00:00, 19.58it/s]
2020-06-23 17:26:13,219 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.239008 (0.027129653930664063 s / img per device, on 32 devices)
2020-06-23 17:26:13,241 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:26:13,241 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:26:13,262 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592958384535, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 5, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592958384535, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 5}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:26:25,850 maskrcnn_benchmark.trainer INFO: eta: 1:16:54  iter: 3680  loss: 0.6868 (0.8710)  loss_classifier: 0.2438 (0.3279)  loss_box_reg: 0.1186 (0.1369)  loss_mask: 0.2972 (0.3366)  loss_objectness: 0.0223 (0.0470)  loss_rpn_box_reg: 0.0134 (0.0226)  time: 0.1088 (0.1270)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 5155
2020-06-23 17:26:28,025 maskrcnn_benchmark.trainer INFO: eta: 1:16:48  iter: 3700  loss: 0.6827 (0.8701)  loss_classifier: 0.2552 (0.3275)  loss_box_reg: 0.0945 (0.1368)  loss_mask: 0.2931 (0.3364)  loss_objectness: 0.0190 (0.0469)  loss_rpn_box_reg: 0.0104 (0.0226)  time: 0.1086 (0.1269)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 5155
2020-06-23 17:26:30,188 maskrcnn_benchmark.trainer INFO: eta: 1:16:42  iter: 3720  loss: 0.6890 (0.8695)  loss_classifier: 0.2650 (0.3272)  loss_box_reg: 0.1181 (0.1367)  loss_mask: 0.2952 (0.3361)  loss_objectness: 0.0244 (0.0469)  loss_rpn_box_reg: 0.0120 (0.0226)  time: 0.1081 (0.1268)  data: 0.0015 (0.0191)  lr: 0.160000  max mem: 5155
2020-06-23 17:26:32,344 maskrcnn_benchmark.trainer INFO: eta: 1:16:35  iter: 3740  loss: 0.6314 (0.8684)  loss_classifier: 0.1989 (0.3266)  loss_box_reg: 0.1018 (0.1366)  loss_mask: 0.2678 (0.3358)  loss_objectness: 0.0204 (0.0468)  loss_rpn_box_reg: 0.0098 (0.0226)  time: 0.1073 (0.1267)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.98s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 17:26:34,484 maskrcnn_benchmark.trainer INFO: eta: 1:16:29  iter: 3760  loss: 0.6425 (0.8673)  loss_classifier: 0.1833 (0.3260)  loss_box_reg: 0.0889 (0.1364)  loss_mask: 0.2724 (0.3354)  loss_objectness: 0.0281 (0.0468)  loss_rpn_box_reg: 0.0099 (0.0226)  time: 0.1067 (0.1266)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5155
DONE (t=1.96s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.26501
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.46458
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.27090
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.14965
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.29326
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.33967
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25078
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.41014
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.43267
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.25276
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.46997
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.54342
2020-06-23 17:26:36,630 maskrcnn_benchmark.trainer INFO: eta: 1:16:23  iter: 3780  loss: 0.6273 (0.8663)  loss_classifier: 0.2465 (0.3256)  loss_box_reg: 0.1137 (0.1363)  loss_mask: 0.2668 (0.3351)  loss_objectness: 0.0254 (0.0467)  loss_rpn_box_reg: 0.0087 (0.0226)  time: 0.1062 (0.1265)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5155
2020-06-23 17:26:38,759 maskrcnn_benchmark.trainer INFO: eta: 1:16:16  iter: 3800  loss: 0.7186 (0.8658)  loss_classifier: 0.2640 (0.3254)  loss_box_reg: 0.1236 (0.1362)  loss_mask: 0.2964 (0.3350)  loss_objectness: 0.0219 (0.0466)  loss_rpn_box_reg: 0.0100 (0.0226)  time: 0.1064 (0.1264)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5155
2020-06-23 17:26:40,906 maskrcnn_benchmark.trainer INFO: eta: 1:16:10  iter: 3820  loss: 0.6944 (0.8650)  loss_classifier: 0.2713 (0.3251)  loss_box_reg: 0.1110 (0.1361)  loss_mask: 0.2714 (0.3346)  loss_objectness: 0.0256 (0.0465)  loss_rpn_box_reg: 0.0102 (0.0226)  time: 0.1069 (0.1263)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5155
2020-06-23 17:26:43,063 maskrcnn_benchmark.trainer INFO: eta: 1:16:04  iter: 3840  loss: 0.7023 (0.8642)  loss_classifier: 0.2455 (0.3247)  loss_box_reg: 0.1139 (0.1360)  loss_mask: 0.2883 (0.3344)  loss_objectness: 0.0207 (0.0464)  loss_rpn_box_reg: 0.0111 (0.0226)  time: 0.1086 (0.1262)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:26:45,192 maskrcnn_benchmark.trainer INFO: eta: 1:15:58  iter: 3860  loss: 0.6849 (0.8634)  loss_classifier: 0.2420 (0.3244)  loss_box_reg: 0.1174 (0.1359)  loss_mask: 0.2701 (0.3341)  loss_objectness: 0.0248 (0.0464)  loss_rpn_box_reg: 0.0105 (0.0226)  time: 0.1061 (0.1261)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5155
2020-06-23 17:26:47,333 maskrcnn_benchmark.trainer INFO: eta: 1:15:52  iter: 3880  loss: 0.6592 (0.8625)  loss_classifier: 0.2523 (0.3240)  loss_box_reg: 0.1051 (0.1358)  loss_mask: 0.2534 (0.3337)  loss_objectness: 0.0212 (0.0464)  loss_rpn_box_reg: 0.0116 (0.0226)  time: 0.1071 (0.1260)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5155
DONE (t=2.86s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:26:49,480 maskrcnn_benchmark.trainer INFO: eta: 1:15:46  iter: 3900  loss: 0.6962 (0.8617)  loss_classifier: 0.2310 (0.3236)  loss_box_reg: 0.1064 (0.1357)  loss_mask: 0.2557 (0.3334)  loss_objectness: 0.0261 (0.0463)  loss_rpn_box_reg: 0.0104 (0.0226)  time: 0.1074 (0.1259)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5155
DONE (t=3.30s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.25643
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.43992
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.26511
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.10396
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.28003
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.37917
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.24823
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.39382
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.41354
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22229
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.45527
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.53922
2020-06-23 17:26:51,624 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.2650112851992828, segm mAP: 0.2564292440265727
:::MLLOG {"namespace": "", "time_ms": 1592958411625, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.2650112851992828, "SEGM": 0.2564292440265727}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1592958411625, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 4}}
2020-06-23 17:26:51,837 maskrcnn_benchmark.trainer INFO: eta: 1:15:42  iter: 3920  loss: 0.7169 (0.8612)  loss_classifier: 0.2818 (0.3234)  loss_box_reg: 0.1196 (0.1357)  loss_mask: 0.2811 (0.3332)  loss_objectness: 0.0309 (0.0463)  loss_rpn_box_reg: 0.0165 (0.0226)  time: 0.1079 (0.1259)  data: 0.0016 (0.0182)  lr: 0.160000  max mem: 5155
2020-06-23 17:26:53,985 maskrcnn_benchmark.trainer INFO: eta: 1:15:36  iter: 3940  loss: 0.7709 (0.8606)  loss_classifier: 0.2519 (0.3232)  loss_box_reg: 0.1210 (0.1356)  loss_mask: 0.2946 (0.3330)  loss_objectness: 0.0315 (0.0462)  loss_rpn_box_reg: 0.0084 (0.0226)  time: 0.1065 (0.1258)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5155
2020-06-23 17:26:56,148 maskrcnn_benchmark.trainer INFO: eta: 1:15:30  iter: 3960  loss: 0.6892 (0.8600)  loss_classifier: 0.2691 (0.3229)  loss_box_reg: 0.1001 (0.1356)  loss_mask: 0.2878 (0.3327)  loss_objectness: 0.0242 (0.0462)  loss_rpn_box_reg: 0.0079 (0.0226)  time: 0.1083 (0.1257)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5155
2020-06-23 17:26:58,297 maskrcnn_benchmark.trainer INFO: eta: 1:15:24  iter: 3980  loss: 0.6268 (0.8590)  loss_classifier: 0.2357 (0.3225)  loss_box_reg: 0.0971 (0.1354)  loss_mask: 0.2859 (0.3325)  loss_objectness: 0.0132 (0.0460)  loss_rpn_box_reg: 0.0094 (0.0225)  time: 0.1074 (0.1256)  data: 0.0013 (0.0179)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:00,444 maskrcnn_benchmark.trainer INFO: eta: 1:15:19  iter: 4000  loss: 0.7333 (0.8582)  loss_classifier: 0.2345 (0.3222)  loss_box_reg: 0.1086 (0.1353)  loss_mask: 0.2673 (0.3322)  loss_objectness: 0.0341 (0.0460)  loss_rpn_box_reg: 0.0141 (0.0225)  time: 0.1069 (0.1255)  data: 0.0013 (0.0179)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:02,614 maskrcnn_benchmark.trainer INFO: eta: 1:15:13  iter: 4020  loss: 0.7405 (0.8577)  loss_classifier: 0.2463 (0.3220)  loss_box_reg: 0.1140 (0.1353)  loss_mask: 0.2926 (0.3320)  loss_objectness: 0.0287 (0.0460)  loss_rpn_box_reg: 0.0113 (0.0225)  time: 0.1076 (0.1254)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:04,765 maskrcnn_benchmark.trainer INFO: eta: 1:15:07  iter: 4040  loss: 0.6957 (0.8569)  loss_classifier: 0.2318 (0.3217)  loss_box_reg: 0.1008 (0.1351)  loss_mask: 0.2948 (0.3317)  loss_objectness: 0.0197 (0.0459)  loss_rpn_box_reg: 0.0131 (0.0225)  time: 0.1066 (0.1254)  data: 0.0013 (0.0177)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:06,918 maskrcnn_benchmark.trainer INFO: eta: 1:15:02  iter: 4060  loss: 0.7233 (0.8563)  loss_classifier: 0.2593 (0.3214)  loss_box_reg: 0.1022 (0.1350)  loss_mask: 0.2723 (0.3315)  loss_objectness: 0.0308 (0.0458)  loss_rpn_box_reg: 0.0118 (0.0225)  time: 0.1080 (0.1253)  data: 0.0015 (0.0176)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:09,040 maskrcnn_benchmark.trainer INFO: eta: 1:14:56  iter: 4080  loss: 0.6454 (0.8554)  loss_classifier: 0.2003 (0.3209)  loss_box_reg: 0.0959 (0.1349)  loss_mask: 0.2825 (0.3312)  loss_objectness: 0.0266 (0.0458)  loss_rpn_box_reg: 0.0101 (0.0226)  time: 0.1059 (0.1252)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:11,154 maskrcnn_benchmark.trainer INFO: eta: 1:14:50  iter: 4100  loss: 0.7104 (0.8549)  loss_classifier: 0.2536 (0.3207)  loss_box_reg: 0.1252 (0.1349)  loss_mask: 0.2923 (0.3311)  loss_objectness: 0.0215 (0.0457)  loss_rpn_box_reg: 0.0079 (0.0225)  time: 0.1057 (0.1251)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:13,293 maskrcnn_benchmark.trainer INFO: eta: 1:14:44  iter: 4120  loss: 0.6848 (0.8543)  loss_classifier: 0.2310 (0.3204)  loss_box_reg: 0.1313 (0.1349)  loss_mask: 0.2746 (0.3309)  loss_objectness: 0.0229 (0.0456)  loss_rpn_box_reg: 0.0083 (0.0225)  time: 0.1069 (0.1250)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:15,440 maskrcnn_benchmark.trainer INFO: eta: 1:14:39  iter: 4140  loss: 0.7232 (0.8538)  loss_classifier: 0.2444 (0.3202)  loss_box_reg: 0.1182 (0.1348)  loss_mask: 0.2950 (0.3307)  loss_objectness: 0.0244 (0.0455)  loss_rpn_box_reg: 0.0109 (0.0225)  time: 0.1071 (0.1249)  data: 0.0015 (0.0173)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:17,595 maskrcnn_benchmark.trainer INFO: eta: 1:14:33  iter: 4160  loss: 0.7134 (0.8532)  loss_classifier: 0.2466 (0.3200)  loss_box_reg: 0.1095 (0.1348)  loss_mask: 0.2861 (0.3305)  loss_objectness: 0.0254 (0.0455)  loss_rpn_box_reg: 0.0147 (0.0225)  time: 0.1075 (0.1248)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:19,740 maskrcnn_benchmark.trainer INFO: eta: 1:14:28  iter: 4180  loss: 0.6631 (0.8525)  loss_classifier: 0.2283 (0.3197)  loss_box_reg: 0.1162 (0.1347)  loss_mask: 0.2711 (0.3302)  loss_objectness: 0.0198 (0.0454)  loss_rpn_box_reg: 0.0114 (0.0225)  time: 0.1066 (0.1247)  data: 0.0014 (0.0171)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:21,912 maskrcnn_benchmark.trainer INFO: eta: 1:14:23  iter: 4200  loss: 0.8762 (0.8523)  loss_classifier: 0.3512 (0.3197)  loss_box_reg: 0.1421 (0.1347)  loss_mask: 0.2929 (0.3300)  loss_objectness: 0.0264 (0.0454)  loss_rpn_box_reg: 0.0160 (0.0225)  time: 0.1076 (0.1247)  data: 0.0015 (0.0171)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:24,059 maskrcnn_benchmark.trainer INFO: eta: 1:14:17  iter: 4220  loss: 0.6756 (0.8517)  loss_classifier: 0.2425 (0.3194)  loss_box_reg: 0.1136 (0.1346)  loss_mask: 0.2889 (0.3298)  loss_objectness: 0.0182 (0.0453)  loss_rpn_box_reg: 0.0104 (0.0225)  time: 0.1066 (0.1246)  data: 0.0014 (0.0170)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:26,205 maskrcnn_benchmark.trainer INFO: eta: 1:14:12  iter: 4240  loss: 0.6683 (0.8509)  loss_classifier: 0.2262 (0.3190)  loss_box_reg: 0.1092 (0.1345)  loss_mask: 0.2727 (0.3296)  loss_objectness: 0.0211 (0.0453)  loss_rpn_box_reg: 0.0104 (0.0225)  time: 0.1065 (0.1245)  data: 0.0015 (0.0169)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:28,353 maskrcnn_benchmark.trainer INFO: eta: 1:14:06  iter: 4260  loss: 0.6803 (0.8501)  loss_classifier: 0.2151 (0.3186)  loss_box_reg: 0.0957 (0.1344)  loss_mask: 0.2874 (0.3294)  loss_objectness: 0.0199 (0.0452)  loss_rpn_box_reg: 0.0104 (0.0224)  time: 0.1069 (0.1244)  data: 0.0014 (0.0169)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:30,492 maskrcnn_benchmark.trainer INFO: eta: 1:14:01  iter: 4280  loss: 0.6791 (0.8494)  loss_classifier: 0.2307 (0.3183)  loss_box_reg: 0.1189 (0.1344)  loss_mask: 0.2972 (0.3292)  loss_objectness: 0.0183 (0.0452)  loss_rpn_box_reg: 0.0081 (0.0224)  time: 0.1060 (0.1243)  data: 0.0014 (0.0168)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:32,644 maskrcnn_benchmark.trainer INFO: eta: 1:13:56  iter: 4300  loss: 0.7479 (0.8492)  loss_classifier: 0.3139 (0.3182)  loss_box_reg: 0.1365 (0.1344)  loss_mask: 0.2657 (0.3290)  loss_objectness: 0.0277 (0.0451)  loss_rpn_box_reg: 0.0136 (0.0225)  time: 0.1074 (0.1243)  data: 0.0014 (0.0167)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:34,789 maskrcnn_benchmark.trainer INFO: eta: 1:13:50  iter: 4320  loss: 0.6813 (0.8486)  loss_classifier: 0.2694 (0.3180)  loss_box_reg: 0.1132 (0.1343)  loss_mask: 0.2762 (0.3288)  loss_objectness: 0.0172 (0.0451)  loss_rpn_box_reg: 0.0072 (0.0225)  time: 0.1076 (0.1242)  data: 0.0014 (0.0166)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:36,919 maskrcnn_benchmark.trainer INFO: eta: 1:13:45  iter: 4340  loss: 0.7274 (0.8479)  loss_classifier: 0.2255 (0.3176)  loss_box_reg: 0.0952 (0.1342)  loss_mask: 0.2734 (0.3286)  loss_objectness: 0.0254 (0.0450)  loss_rpn_box_reg: 0.0100 (0.0225)  time: 0.1057 (0.1241)  data: 0.0014 (0.0166)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:39,064 maskrcnn_benchmark.trainer INFO: eta: 1:13:40  iter: 4360  loss: 0.6691 (0.8472)  loss_classifier: 0.2150 (0.3172)  loss_box_reg: 0.0981 (0.1341)  loss_mask: 0.2856 (0.3284)  loss_objectness: 0.0266 (0.0450)  loss_rpn_box_reg: 0.0114 (0.0226)  time: 0.1066 (0.1240)  data: 0.0013 (0.0165)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:41,212 maskrcnn_benchmark.trainer INFO: eta: 1:13:35  iter: 4380  loss: 0.7492 (0.8467)  loss_classifier: 0.2776 (0.3170)  loss_box_reg: 0.1211 (0.1340)  loss_mask: 0.2710 (0.3281)  loss_objectness: 0.0367 (0.0450)  loss_rpn_box_reg: 0.0144 (0.0226)  time: 0.1078 (0.1239)  data: 0.0014 (0.0164)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:43,351 maskrcnn_benchmark.trainer INFO: eta: 1:13:29  iter: 4400  loss: 0.6557 (0.8459)  loss_classifier: 0.2252 (0.3166)  loss_box_reg: 0.0961 (0.1339)  loss_mask: 0.2695 (0.3279)  loss_objectness: 0.0251 (0.0449)  loss_rpn_box_reg: 0.0074 (0.0226)  time: 0.1072 (0.1239)  data: 0.0013 (0.0164)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:45,496 maskrcnn_benchmark.trainer INFO: eta: 1:13:24  iter: 4420  loss: 0.6859 (0.8453)  loss_classifier: 0.2573 (0.3164)  loss_box_reg: 0.1243 (0.1338)  loss_mask: 0.2811 (0.3277)  loss_objectness: 0.0185 (0.0449)  loss_rpn_box_reg: 0.0090 (0.0225)  time: 0.1072 (0.1238)  data: 0.0014 (0.0163)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:47,638 maskrcnn_benchmark.trainer INFO: eta: 1:13:19  iter: 4440  loss: 0.6765 (0.8449)  loss_classifier: 0.2574 (0.3162)  loss_box_reg: 0.1208 (0.1338)  loss_mask: 0.2712 (0.3276)  loss_objectness: 0.0406 (0.0449)  loss_rpn_box_reg: 0.0165 (0.0225)  time: 0.1068 (0.1237)  data: 0.0014 (0.0162)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:49,801 maskrcnn_benchmark.trainer INFO: eta: 1:13:14  iter: 4460  loss: 0.6596 (0.8443)  loss_classifier: 0.2434 (0.3159)  loss_box_reg: 0.1073 (0.1337)  loss_mask: 0.2750 (0.3273)  loss_objectness: 0.0280 (0.0448)  loss_rpn_box_reg: 0.0115 (0.0225)  time: 0.1067 (0.1237)  data: 0.0014 (0.0162)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:51,961 maskrcnn_benchmark.trainer INFO: eta: 1:13:09  iter: 4480  loss: 0.7199 (0.8437)  loss_classifier: 0.2425 (0.3157)  loss_box_reg: 0.1092 (0.1336)  loss_mask: 0.2768 (0.3271)  loss_objectness: 0.0284 (0.0448)  loss_rpn_box_reg: 0.0116 (0.0225)  time: 0.1068 (0.1236)  data: 0.0014 (0.0161)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:54,126 maskrcnn_benchmark.trainer INFO: eta: 1:13:04  iter: 4500  loss: 0.6492 (0.8430)  loss_classifier: 0.2330 (0.3154)  loss_box_reg: 0.1054 (0.1335)  loss_mask: 0.2774 (0.3269)  loss_objectness: 0.0152 (0.0447)  loss_rpn_box_reg: 0.0082 (0.0225)  time: 0.1081 (0.1235)  data: 0.0014 (0.0160)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:56,309 maskrcnn_benchmark.trainer INFO: eta: 1:13:00  iter: 4520  loss: 0.6472 (0.8422)  loss_classifier: 0.2113 (0.3150)  loss_box_reg: 0.0931 (0.1334)  loss_mask: 0.2809 (0.3266)  loss_objectness: 0.0221 (0.0446)  loss_rpn_box_reg: 0.0077 (0.0225)  time: 0.1076 (0.1235)  data: 0.0013 (0.0160)  lr: 0.160000  max mem: 5155
2020-06-23 17:27:58,448 maskrcnn_benchmark.trainer INFO: eta: 1:12:54  iter: 4540  loss: 0.8211 (0.8421)  loss_classifier: 0.3054 (0.3150)  loss_box_reg: 0.1276 (0.1334)  loss_mask: 0.2943 (0.3265)  loss_objectness: 0.0286 (0.0446)  loss_rpn_box_reg: 0.0150 (0.0225)  time: 0.1063 (0.1234)  data: 0.0014 (0.0159)  lr: 0.160000  max mem: 5155
2020-06-23 17:28:00,604 maskrcnn_benchmark.trainer INFO: eta: 1:12:50  iter: 4560  loss: 0.6404 (0.8414)  loss_classifier: 0.2220 (0.3147)  loss_box_reg: 0.1063 (0.1334)  loss_mask: 0.2474 (0.3263)  loss_objectness: 0.0246 (0.0445)  loss_rpn_box_reg: 0.0088 (0.0225)  time: 0.1071 (0.1233)  data: 0.0013 (0.0158)  lr: 0.160000  max mem: 5155
2020-06-23 17:28:02,765 maskrcnn_benchmark.trainer INFO: eta: 1:12:45  iter: 4580  loss: 0.5983 (0.8404)  loss_classifier: 0.2146 (0.3143)  loss_box_reg: 0.0917 (0.1332)  loss_mask: 0.2715 (0.3260)  loss_objectness: 0.0152 (0.0444)  loss_rpn_box_reg: 0.0065 (0.0224)  time: 0.1065 (0.1232)  data: 0.0013 (0.0158)  lr: 0.160000  max mem: 5155
:::MLLOG {"namespace": "", "time_ms": 1592958483827, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1592958483827, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1592958483827, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 5}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 17:28:04,070 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 17:28:04,383 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:57,  1.36it/s]
  4%|         | 3/79 [00:00<00:40,  1.87it/s]
  8%|         | 6/79 [00:00<00:28,  2.60it/s]
 11%|        | 9/79 [00:01<00:19,  3.56it/s]
 15%|        | 12/79 [00:01<00:13,  4.79it/s]
 19%|        | 15/79 [00:01<00:10,  6.35it/s]
 23%|       | 18/79 [00:01<00:07,  8.22it/s]
 27%|       | 21/79 [00:01<00:05, 10.34it/s]
 30%|       | 24/79 [00:01<00:04, 12.57it/s]
 34%|      | 27/79 [00:01<00:03, 14.84it/s]
 38%|      | 30/79 [00:01<00:02, 16.91it/s]
 42%|     | 33/79 [00:02<00:02, 18.80it/s]
 46%|     | 36/79 [00:02<00:02, 20.35it/s]
 49%|     | 39/79 [00:02<00:01, 21.70it/s]
 53%|    | 42/79 [00:02<00:01, 22.71it/s]
 57%|    | 45/79 [00:02<00:01, 23.68it/s]
 61%|    | 48/79 [00:02<00:01, 24.31it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:59,  1.31it/s]
  4%|         | 3/79 [00:00<00:41,  1.82it/s]
  8%|         | 6/79 [00:00<00:28,  2.52it/s]
 11%|        | 9/79 [00:01<00:20,  3.46it/s]
 15%|        | 12/79 [00:01<00:14,  4.65it/s]
 19%|        | 15/79 [00:01<00:10,  6.18it/s]
 23%|       | 18/79 [00:01<00:07,  8.00it/s]
 27%|       | 21/79 [00:01<00:05, 10.07it/s]
 30%|       | 24/79 [00:01<00:04, 12.32it/s]
 34%|      | 27/79 [00:01<00:03, 14.60it/s]
 38%|      | 30/79 [00:01<00:02, 16.84it/s]
 42%|     | 33/79 [00:02<00:02, 18.77it/s]
 46%|     | 36/79 [00:02<00:02, 20.44it/s]
 49%|     | 39/79 [00:02<00:01, 21.54it/s]
 53%|    | 42/79 [00:02<00:01, 22.66it/s]
 57%|    | 45/79 [00:02<00:01, 23.31it/s]
 61%|    | 48/79 [00:02<00:01, 23.75it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.29it/s]
  4%|         | 3/79 [00:00<00:42,  1.79it/s]
  8%|         | 6/79 [00:01<00:29,  2.47it/s]
 11%|        | 9/79 [00:01<00:20,  3.39it/s]
 15%|        | 12/79 [00:01<00:14,  4.58it/s]
 19%|        | 15/79 [00:01<00:10,  6.08it/s]
 23%|       | 18/79 [00:01<00:07,  7.89it/s]
 27%|       | 21/79 [00:01<00:05,  9.96it/s]
 30%|       | 24/79 [00:01<00:04, 11.73it/s]
 34%|      | 27/79 [00:01<00:03, 14.02it/s]
 38%|      | 30/79 [00:01<00:02, 16.35it/s]
 42%|     | 33/79 [00:02<00:02, 18.36it/s]
 46%|     | 36/79 [00:02<00:02, 20.17it/s]
 49%|     | 39/79 [00:02<00:01, 21.67it/s]
 53%|    | 42/79 [00:02<00:01, 22.75it/s]
 57%|    | 45/79 [00:02<00:01, 23.71it/s]
 61%|    | 48/79 [00:02<00:01, 24.36it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.26it/s]
  4%|         | 3/79 [00:00<00:43,  1.74it/s]
  8%|         | 6/79 [00:01<00:30,  2.41it/s]
 11%|        | 9/79 [00:01<00:21,  3.31it/s]
 15%|        | 12/79 [00:01<00:14,  4.48it/s]
 19%|        | 15/79 [00:01<00:10,  5.95it/s]
 23%|       | 18/79 [00:01<00:07,  7.72it/s]
 27%|       | 21/79 [00:01<00:05,  9.78it/s]
 30%|       | 24/79 [00:01<00:04, 12.04it/s]
 34%|      | 27/79 [00:01<00:03, 14.30it/s]
 38%|      | 30/79 [00:01<00:02, 16.48it/s]
 42%|     | 33/79 [00:02<00:02, 18.48it/s]
 46%|     | 36/79 [00:02<00:02, 20.21it/s]
 49%|     | 39/79 [00:02<00:01, 21.49it/s]
 53%|    | 42/79 [00:02<00:01, 22.75it/s]
 57%|    | 45/79 [00:02<00:01, 23.61it/s]
 61%|    | 48/79 [00:02<00:01, 24.20it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:43,  1.74it/s]
  9%|         | 7/79 [00:01<00:29,  2.42it/s]
 13%|        | 10/79 [00:01<00:20,  3.32it/s]
 16%|        | 13/79 [00:01<00:14,  4.49it/s]
 20%|        | 16/79 [00:01<00:10,  5.98it/s]
 24%|       | 19/79 [00:01<00:07,  7.77it/s]
 28%|       | 22/79 [00:01<00:05,  9.83it/s]
 32%|      | 25/79 [00:01<00:04, 11.93it/s]
 35%|      | 28/79 [00:01<00:03, 14.17it/s]
 39%|      | 31/79 [00:02<00:02, 16.35it/s]
 43%|     | 34/79 [00:02<00:02, 18.20it/s]
 47%|     | 37/79 [00:02<00:02, 20.07it/s]
 51%|     | 40/79 [00:02<00:01, 21.49it/s]
 54%|    | 43/79 [00:02<00:01, 22.56it/s]
 58%|    | 46/79 [00:02<00:01, 23.64it/s]
 62%|   | 49/79 [00:02<00:01, 24.36it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:05,  9.50it/s]
 32%|      | 25/79 [00:01<00:04, 11.75it/s]
 35%|      | 28/79 [00:01<00:03, 14.03it/s]
 39%|      | 31/79 [00:02<00:02, 16.18it/s]
 43%|     | 34/79 [00:02<00:02, 18.10it/s]
 47%|     | 37/79 [00:02<00:02, 19.87it/s]
 51%|     | 40/79 [00:02<00:01, 21.11it/s]
 54%|    | 43/79 [00:02<00:01, 22.09it/s]
 58%|    | 46/79 [00:02<00:01, 22.95it/s]
 62%|   | 49/79 [00:02<00:01, 23.83it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.42it/s]
 28%|       | 22/79 [00:01<00:06,  9.45it/s]
 32%|      | 25/79 [00:01<00:04, 11.69it/s]
 35%|      | 28/79 [00:01<00:03, 14.01it/s]
 39%|      | 31/79 [00:02<00:02, 16.37it/s]
 43%|     | 34/79 [00:02<00:02, 18.41it/s]
 47%|     | 37/79 [00:02<00:02, 20.29it/s]
 51%|     | 40/79 [00:02<00:01, 21.57it/s]
 54%|    | 43/79 [00:02<00:01, 22.72it/s]
 58%|    | 46/79 [00:02<00:01, 23.57it/s]
 62%|   | 49/79 [00:02<00:01, 24.19it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:11,  5.71it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.45it/s]
 32%|      | 25/79 [00:01<00:04, 11.67it/s]
 35%|      | 28/79 [00:01<00:03, 13.95it/s]
 39%|      | 31/79 [00:02<00:02, 16.13it/s]
 43%|     | 34/79 [00:02<00:02, 18.13it/s]
 47%|     | 37/79 [00:02<00:02, 19.87it/s]
 51%|     | 40/79 [00:02<00:01, 21.18it/s]
 54%|    | 43/79 [00:02<00:01, 22.33it/s]
 58%|    | 46/79 [00:02<00:01, 23.27it/s]
 62%|   | 49/79 [00:02<00:01, 24.08it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.82it/s]
 24%|       | 19/79 [00:01<00:07,  7.59it/s]
 28%|       | 22/79 [00:01<00:05,  9.56it/s]
 32%|      | 25/79 [00:01<00:04, 11.80it/s]
 35%|      | 28/79 [00:01<00:03, 14.07it/s]
 39%|      | 31/79 [00:02<00:02, 16.34it/s]
 43%|     | 34/79 [00:02<00:02, 18.25it/s]
 47%|     | 37/79 [00:02<00:02, 20.05it/s]
 51%|     | 40/79 [00:02<00:01, 21.24it/s]
 54%|    | 43/79 [00:02<00:01, 22.37it/s]
 58%|    | 46/79 [00:02<00:01, 22.89it/s]
 62%|   | 49/79 [00:02<00:01, 23.58it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:42,  1.74it/s]
  9%|         | 7/79 [00:01<00:29,  2.42it/s]
 13%|        | 10/79 [00:01<00:20,  3.32it/s]
 16%|        | 13/79 [00:01<00:14,  4.49it/s]
 20%|        | 16/79 [00:01<00:10,  5.96it/s]
 24%|       | 19/79 [00:01<00:07,  7.70it/s]
 28%|       | 22/79 [00:01<00:05,  9.72it/s]
 32%|      | 25/79 [00:01<00:04, 11.58it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:03, 15.93it/s]
 43%|     | 34/79 [00:02<00:02, 17.96it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 20.90it/s]
 54%|    | 43/79 [00:02<00:01, 22.09it/s]
 58%|    | 46/79 [00:02<00:01, 22.97it/s]
 62%|   | 49/79 [00:02<00:01, 23.48it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:06,  9.49it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 14.04it/s]
 39%|      | 31/79 [00:02<00:02, 16.29it/s]
 43%|     | 34/79 [00:02<00:02, 18.34it/s]
 47%|     | 37/79 [00:02<00:02, 20.08it/s]
 51%|     | 40/79 [00:02<00:01, 21.27it/s]
 54%|    | 43/79 [00:02<00:01, 22.44it/s]
 58%|    | 46/79 [00:02<00:01, 23.15it/s]
 62%|   | 49/79 [00:02<00:01, 23.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.17it/s]
 20%|        | 16/79 [00:01<00:11,  5.57it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.51it/s]
 35%|      | 28/79 [00:01<00:03, 13.78it/s]
 39%|      | 31/79 [00:02<00:03, 15.93it/s]
 43%|     | 34/79 [00:02<00:02, 18.06it/s]
 47%|     | 37/79 [00:02<00:02, 19.79it/s]
 51%|     | 40/79 [00:02<00:01, 21.03it/s]
 54%|    | 43/79 [00:02<00:01, 22.36it/s]
 58%|    | 46/79 [00:02<00:01, 23.22it/s]
 62%|   | 49/79 [00:02<00:01, 23.78it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.54it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 13.97it/s]
 39%|      | 31/79 [00:02<00:02, 16.19it/s]
 43%|     | 34/79 [00:02<00:02, 18.21it/s]
 47%|     | 37/79 [00:02<00:02, 20.02it/s]
 51%|     | 40/79 [00:02<00:01, 21.30it/s]
 54%|    | 43/79 [00:02<00:01, 22.37it/s]
 58%|    | 46/79 [00:02<00:01, 23.26it/s]
 62%|   | 49/79 [00:02<00:01, 23.72it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.81it/s]
 24%|       | 19/79 [00:01<00:07,  7.57it/s]
 28%|       | 22/79 [00:01<00:05,  9.55it/s]
 32%|      | 25/79 [00:01<00:04, 11.81it/s]
 35%|      | 28/79 [00:01<00:03, 14.08it/s]
 39%|      | 31/79 [00:02<00:02, 16.20it/s]
 43%|     | 34/79 [00:02<00:02, 18.11it/s]
 47%|     | 37/79 [00:02<00:02, 20.00it/s]
 51%|     | 40/79 [00:02<00:01, 21.38it/s]
 54%|    | 43/79 [00:02<00:01, 22.29it/s]
 58%|    | 46/79 [00:02<00:01, 23.10it/s]
 62%|   | 49/79 [00:02<00:01, 24.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.46it/s]
 24%|       | 19/79 [00:01<00:08,  7.15it/s]
 28%|       | 22/79 [00:01<00:06,  9.16it/s]
 32%|      | 25/79 [00:01<00:04, 11.35it/s]
 35%|      | 28/79 [00:01<00:03, 13.68it/s]
 39%|      | 31/79 [00:02<00:02, 16.04it/s]
 43%|     | 34/79 [00:02<00:02, 18.11it/s]
 47%|     | 37/79 [00:02<00:02, 20.06it/s]
 51%|     | 40/79 [00:02<00:01, 21.43it/s]
 54%|    | 43/79 [00:02<00:01, 22.62it/s]
 58%|    | 46/79 [00:02<00:01, 23.24it/s]
 62%|   | 49/79 [00:02<00:01, 23.94it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:11,  5.69it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.39it/s]
 32%|      | 25/79 [00:01<00:04, 11.59it/s]
 35%|      | 28/79 [00:01<00:03, 13.81it/s]
 39%|      | 31/79 [00:02<00:03, 15.98it/s]
 43%|     | 34/79 [00:02<00:02, 17.90it/s]
 47%|     | 37/79 [00:02<00:02, 19.76it/s]
 51%|     | 40/79 [00:02<00:01, 21.13it/s]
 54%|    | 43/79 [00:02<00:01, 22.54it/s]
 58%|    | 46/79 [00:02<00:01, 23.27it/s]
 62%|   | 49/79 [00:02<00:01, 23.91it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.77it/s]
 24%|       | 19/79 [00:01<00:07,  7.51it/s]
 28%|       | 22/79 [00:01<00:05,  9.51it/s]
 32%|      | 25/79 [00:01<00:04, 11.66it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:02, 16.06it/s]
 43%|     | 34/79 [00:02<00:02, 18.06it/s]
 47%|     | 37/79 [00:02<00:02, 19.59it/s]
 51%|     | 40/79 [00:02<00:01, 21.00it/s]
 54%|    | 43/79 [00:02<00:01, 22.00it/s]
 58%|    | 46/79 [00:02<00:01, 22.78it/s]
 62%|   | 49/79 [00:02<00:01, 23.32it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.69it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.38it/s]
 32%|      | 25/79 [00:01<00:04, 11.54it/s]
 35%|      | 28/79 [00:01<00:03, 13.86it/s]
 39%|      | 31/79 [00:02<00:02, 16.00it/s]
 43%|     | 34/79 [00:02<00:02, 17.89it/s]
 47%|     | 37/79 [00:02<00:02, 19.60it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 22.11it/s]
 58%|    | 46/79 [00:02<00:01, 22.74it/s]
 62%|   | 49/79 [00:02<00:01, 23.53it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.46it/s]
 28%|       | 22/79 [00:01<00:06,  9.45it/s]
 32%|      | 25/79 [00:01<00:04, 11.62it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:02, 16.06it/s]
 43%|     | 34/79 [00:02<00:02, 17.99it/s]
 47%|     | 37/79 [00:02<00:02, 19.62it/s]
 51%|     | 40/79 [00:02<00:01, 21.10it/s]
 54%|    | 43/79 [00:02<00:01, 22.22it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.34it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.49it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:03, 15.97it/s]
 43%|     | 34/79 [00:02<00:02, 17.93it/s]
 47%|     | 37/79 [00:02<00:02, 19.72it/s]
 51%|     | 40/79 [00:02<00:01, 21.11it/s]
 54%|    | 43/79 [00:02<00:01, 22.24it/s]
 58%|    | 46/79 [00:02<00:01, 22.99it/s]
 62%|   | 49/79 [00:02<00:01, 23.69it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.45it/s]
 28%|       | 22/79 [00:01<00:06,  9.42it/s]
 32%|      | 25/79 [00:01<00:04, 11.60it/s]
 35%|      | 28/79 [00:01<00:03, 13.82it/s]
 39%|      | 31/79 [00:02<00:02, 16.00it/s]
 43%|     | 34/79 [00:02<00:02, 18.04it/s]
 47%|     | 37/79 [00:02<00:02, 19.50it/s]
 51%|     | 40/79 [00:02<00:01, 20.86it/s]
 54%|    | 43/79 [00:02<00:01, 22.18it/s]
 58%|    | 46/79 [00:02<00:01, 22.97it/s]
 62%|   | 49/79 [00:02<00:01, 23.49it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.20it/s]
 28%|       | 22/79 [00:01<00:06,  9.16it/s]
 32%|      | 25/79 [00:01<00:04, 11.35it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.77it/s]
 43%|     | 34/79 [00:02<00:02, 17.63it/s]
 47%|     | 37/79 [00:02<00:02, 19.39it/s]
 51%|     | 40/79 [00:02<00:01, 20.91it/s]
 54%|    | 43/79 [00:02<00:01, 21.90it/s]
 58%|    | 46/79 [00:02<00:01, 22.84it/s]
 62%|   | 49/79 [00:02<00:01, 23.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.21it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.39it/s]
 35%|      | 28/79 [00:01<00:03, 13.69it/s]
 39%|      | 31/79 [00:02<00:03, 15.94it/s]
 43%|     | 34/79 [00:02<00:02, 17.89it/s]
 47%|     | 37/79 [00:02<00:02, 19.68it/s]
 51%|     | 40/79 [00:02<00:01, 21.10it/s]
 54%|    | 43/79 [00:02<00:01, 22.52it/s]
 58%|    | 46/79 [00:02<00:01, 23.27it/s]
 62%|   | 49/79 [00:02<00:01, 23.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.09it/s]
 20%|        | 16/79 [00:01<00:11,  5.46it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.10it/s]
 32%|      | 25/79 [00:01<00:04, 11.28it/s]
 35%|      | 28/79 [00:01<00:03, 13.48it/s]
 39%|      | 31/79 [00:02<00:03, 15.76it/s]
 43%|     | 34/79 [00:02<00:02, 17.73it/s]
 47%|     | 37/79 [00:02<00:02, 19.55it/s]
 51%|     | 40/79 [00:02<00:01, 20.88it/s]
 54%|    | 43/79 [00:02<00:01, 21.86it/s]
 58%|    | 46/79 [00:02<00:01, 22.74it/s]
 62%|   | 49/79 [00:02<00:01, 23.28it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  4%|         | 3/79 [00:01<00:50,  1.50it/s]
  8%|         | 6/79 [00:01<00:34,  2.09it/s]
 11%|        | 9/79 [00:01<00:24,  2.89it/s]
 15%|        | 12/79 [00:01<00:17,  3.93it/s]
 19%|        | 15/79 [00:01<00:12,  5.26it/s]
 23%|       | 18/79 [00:01<00:08,  6.91it/s]
 27%|       | 21/79 [00:01<00:06,  8.83it/s]
 30%|       | 24/79 [00:01<00:05, 10.96it/s]
 34%|      | 27/79 [00:01<00:03, 13.19it/s]
 38%|      | 30/79 [00:02<00:03, 15.30it/s]
 42%|     | 33/79 [00:02<00:02, 17.37it/s]
 46%|     | 36/79 [00:02<00:02, 18.86it/s]
 49%|     | 39/79 [00:02<00:01, 20.33it/s]
 53%|    | 42/79 [00:02<00:01, 21.45it/s]
 57%|    | 45/79 [00:02<00:01, 22.57it/s]
 61%|    | 48/79 [00:02<00:01, 23.17it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  4%|         | 3/79 [00:01<00:50,  1.52it/s]
  8%|         | 6/79 [00:01<00:34,  2.11it/s]
 11%|        | 9/79 [00:01<00:24,  2.90it/s]
 15%|        | 12/79 [00:01<00:16,  3.95it/s]
 19%|        | 15/79 [00:01<00:12,  5.28it/s]
 23%|       | 18/79 [00:01<00:08,  6.92it/s]
 27%|       | 21/79 [00:01<00:06,  8.80it/s]
 30%|       | 24/79 [00:01<00:05, 10.89it/s]
 34%|      | 27/79 [00:02<00:03, 13.09it/s]
 38%|      | 30/79 [00:02<00:03, 15.25it/s]
 42%|     | 33/79 [00:02<00:02, 17.06it/s]
 46%|     | 36/79 [00:02<00:02, 18.79it/s]
 49%|     | 39/79 [00:02<00:01, 20.07it/s]
 53%|    | 42/79 [00:02<00:01, 21.42it/s]
 57%|    | 45/79 [00:02<00:01, 22.19it/s]
 61%|    | 48/79 [00:02<00:01, 22.86it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.81it/s]
 16%|        | 13/79 [00:01<00:17,  3.84it/s]
 20%|        | 16/79 [00:01<00:12,  5.15it/s]
 24%|       | 19/79 [00:01<00:08,  6.76it/s]
 28%|       | 22/79 [00:01<00:06,  8.69it/s]
 32%|      | 25/79 [00:01<00:05, 10.79it/s]
 35%|      | 28/79 [00:02<00:03, 13.03it/s]
 39%|      | 31/79 [00:02<00:03, 15.19it/s]
 43%|     | 34/79 [00:02<00:02, 17.13it/s]
 47%|     | 37/79 [00:02<00:02, 18.93it/s]
 51%|     | 40/79 [00:02<00:01, 20.22it/s]
 54%|    | 43/79 [00:02<00:01, 21.59it/s]
 58%|    | 46/79 [00:02<00:01, 22.15it/s]
 62%|   | 49/79 [00:02<00:01, 22.91it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  4%|         | 3/79 [00:01<00:50,  1.52it/s]
  8%|         | 6/79 [00:01<00:34,  2.11it/s]
 11%|        | 9/79 [00:01<00:24,  2.91it/s]
 15%|        | 12/79 [00:01<00:16,  3.96it/s]
 19%|        | 15/79 [00:01<00:12,  5.28it/s]
 23%|       | 18/79 [00:01<00:08,  6.90it/s]
 27%|       | 21/79 [00:01<00:06,  8.81it/s]
 30%|       | 24/79 [00:01<00:05, 10.87it/s]
 34%|      | 27/79 [00:02<00:04, 12.97it/s]
 38%|      | 30/79 [00:02<00:03, 15.06it/s]
 42%|     | 33/79 [00:02<00:02, 16.91it/s]
 46%|     | 36/79 [00:02<00:02, 18.65it/s]
 49%|     | 39/79 [00:02<00:02, 20.00it/s]
 53%|    | 42/79 [00:02<00:01, 20.97it/s]
 57%|    | 45/79 [00:02<00:01, 21.80it/s]
 61%|    | 48/79 [00:02<00:01, 22.54it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.95it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.91it/s]
 28%|       | 22/79 [00:01<00:06,  8.83it/s]
 32%|      | 25/79 [00:01<00:04, 11.00it/s]
 35%|      | 28/79 [00:02<00:03, 13.18it/s]
 39%|      | 31/79 [00:02<00:03, 15.20it/s]
 43%|     | 34/79 [00:02<00:02, 17.13it/s]
 47%|     | 37/79 [00:02<00:02, 18.81it/s]
 51%|     | 40/79 [00:02<00:01, 20.11it/s]
 54%|    | 43/79 [00:02<00:01, 21.04it/s]
 58%|    | 46/79 [00:02<00:01, 22.18it/s]
 62%|   | 49/79 [00:02<00:01, 22.64it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.01it/s]
 28%|       | 22/79 [00:01<00:06,  8.91it/s]
 32%|      | 25/79 [00:01<00:04, 10.97it/s]
 35%|      | 28/79 [00:02<00:03, 13.19it/s]
 39%|      | 31/79 [00:02<00:03, 15.24it/s]
 43%|     | 34/79 [00:02<00:02, 17.09it/s]
 47%|     | 37/79 [00:02<00:02, 18.71it/s]
 51%|     | 40/79 [00:02<00:01, 20.20it/s]
 54%|    | 43/79 [00:02<00:01, 21.00it/s]
 58%|    | 46/79 [00:02<00:01, 21.95it/s]
 62%|   | 49/79 [00:02<00:01, 22.73it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:17,  3.87it/s]
 20%|        | 16/79 [00:01<00:12,  5.19it/s]
 24%|       | 19/79 [00:01<00:08,  6.81it/s]
 28%|       | 22/79 [00:01<00:06,  8.68it/s]
 32%|      | 25/79 [00:01<00:05, 10.71it/s]
 35%|      | 28/79 [00:02<00:03, 12.91it/s]
 39%|      | 31/79 [00:02<00:03, 15.02it/s]
 43%|     | 34/79 [00:02<00:02, 16.96it/s]
 47%|     | 37/79 [00:02<00:02, 18.39it/s]
 51%|     | 40/79 [00:02<00:01, 19.90it/s]
 54%|    | 43/79 [00:02<00:01, 20.86it/s]
 58%|    | 46/79 [00:02<00:01, 21.77it/s]
 62%|   | 49/79 [00:02<00:01, 22.41it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:19,  1.02s/it]
  5%|         | 4/79 [00:01<00:54,  1.38it/s]
  9%|         | 7/79 [00:01<00:37,  1.93it/s]
 13%|        | 10/79 [00:01<00:25,  2.66it/s]
 16%|        | 13/79 [00:01<00:18,  3.64it/s]
 20%|        | 16/79 [00:01<00:12,  4.88it/s]
 24%|       | 19/79 [00:01<00:09,  6.40it/s]
 28%|       | 22/79 [00:01<00:06,  8.21it/s]
 32%|      | 25/79 [00:02<00:05, 10.26it/s]
 35%|      | 28/79 [00:02<00:04, 12.34it/s]
 39%|      | 31/79 [00:02<00:03, 14.49it/s]
 43%|     | 34/79 [00:02<00:02, 16.63it/s]
 47%|     | 37/79 [00:02<00:02, 18.34it/s]
 51%|     | 40/79 [00:02<00:01, 19.67it/s]
 54%|    | 43/79 [00:02<00:01, 20.63it/s]
 58%|    | 46/79 [00:02<00:01, 21.67it/s]
 62%|   | 49/79 [00:03<00:01, 22.32it/s]
 66%|   | 52/79 [00:03<00:0156it/s]
 68%|   | 54/79 [00:02<00:00, 25.17it/s]
 72%|  | 57/79 [00:02<00:00, 25.29it/s]
 76%|  | 60/79 [00:03<00:00, 25.50it/s]
 80%|  | 63/79 [00:03<00:00, 25.60it/s]
 84%| | 66/79 [00:03<00:00, 25.90it/s]
 87%| | 69/79 [00:03<00:00, 26.07it/s]
 91%| | 72/79 [00:03<00:00, 26.07it/s]
 95%|| 75/79 [00:03<00:00, 26.66it/s]
 99%|| 78/79 [00:03<00:00, 27.11it/s]
100%|| 79/79 [00:03<00:00, 20.64it/s]
, 24.98it/s]
 70%|   | 55/79 [00:02<00:00, 25.56it/s]
 73%|  | 58/79 [00:03<00:00, 25.69it/s]
 77%|  | 61/79 [00:03<00:00, 25.65it/s]
 81%|  | 64/79 [00:03<00:00, 25.70it/s]
 85%| | 67/79 [00:03<00:00, 26.02it/s]
 89%| | 70/79 [00:03<00:00, 25.89it/s]
 92%|| 73/79 [00:03<00:00, 26.29it/s]
 96%|| 76/79 [00:03<00:00, 26.71it/s]
100%|| 79/79 [00:03<00:00, 27.57it/s]
24it/s]
 68%|   | 54/79 [00:02<00:01, 24.41it/s]
 72%|  | 57/79 [00:03<00:00, 24.72it/s]
 76%|  | 60/79 [00:03<00:00, 24.70it/s]
 80%|  | 63/79 [00:03<00:00, 24.73it/s]
 84%| | 66/79 [00:03<00:00, 24.37it/s]
 87%| | 69/79 [00:03<00:00, 24.60it/s]
 91%| | 72/79 [00:03<00:00, 24.67it/s]
 95%|| 75/79 [00:03<00:00, 25.54it/s]
 99%|| 78/79 [00:03<00:00, 26.27it/s]
100%|| 79/79 [00:03<00:00, 20.17it/s]
55it/s]
 68%|   | 54/79 [00:02<00:01, 24.95it/s]
 72%|  | 57/79 [00:03<00:00, 24.90it/s]
 76%|  | 60/79 [00:03<00:00, 24.90it/s]
 80%|  | 63/79 [00:03<00:00, 24.99it/s]
 84%| | 66/79 [00:03<00:00, 24.99it/s]
 87%| | 69/79 [00:03<00:00, 24.84it/s]
 91%| | 72/79 [00:03<00:00, 25.02it/s]
 95%|| 75/79 [00:03<00:00, 25.78it/s]
 99%|| 78/79 [00:03<00:00, 26.68it/s]
100%|| 79/79 [00:03<00:00, 20.04it/s]
, 24.34it/s]
 70%|   | 55/79 [00:02<00:00, 24.72it/s]
 73%|  | 58/79 [00:03<00:00, 25.17it/s]
 77%|  | 61/79 [00:03<00:00, 25.56it/s]
 81%|  | 64/79 [00:03<00:00, 25.46it/s]
 85%| | 67/79 [00:03<00:00, 25.43it/s]
 89%| | 70/79 [00:03<00:00, 25.60it/s]
 92%|| 73/79 [00:03<00:00, 25.83it/s]
 96%|| 76/79 [00:03<00:00, 26.93it/s]
100%|| 79/79 [00:03<00:00, 27.25it/s]
78it/s]
 68%|   | 54/79 [00:02<00:01, 24.80it/s]
 72%|  | 57/79 [00:03<00:00, 24.95it/s]
 76%|  | 60/79 [00:03<00:00, 25.10it/s]
 80%|  | 63/79 [00:03<00:00, 25.15it/s]
 84%| | 66/79 [00:03<00:00, 25.47it/s]
 87%| | 69/79 [00:03<00:00, 25.39it/s]
 91%| | 72/79 [00:03<00:00, 25.73it/s]
 95%|| 75/79 [00:03<00:00, 26.15it/s]
 99%|| 78/79 [00:03<00:00, 26.67it/s]
100%|| 79/79 [00:03<00:00, 20.12it/s]
, 24.61it/s]
 70%|   | 55/79 [00:02<00:00, 24.68it/s]
 73%|  | 58/79 [00:03<00:00, 24.97it/s]
 77%|  | 61/79 [00:03<00:00, 25.06it/s]
 81%|  | 64/79 [00:03<00:00, 25.22it/s]
 85%| | 67/79 [00:03<00:00, 25.28it/s]
 89%| | 70/79 [00:03<00:00, 25.33it/s]
 92%|| 73/79 [00:03<00:00, 25.89it/s]
 96%|| 76/79 [00:03<00:00, 26.46it/s]
100%|| 79/79 [00:03<00:00, 27.20it/s]
, 24.36it/s]
 70%|   | 55/79 [00:02<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 24.91it/s]
 77%|  | 61/79 [00:03<00:00, 25.30it/s]
 81%|  | 64/79 [00:03<00:00, 25.28it/s]
 85%| | 67/79 [00:03<00:00, 25.43it/s]
 89%| | 70/79 [00:03<00:00, 25.48it/s]
 92%|| 73/79 [00:03<00:00, 25.70it/s]
 96%|| 76/79 [00:03<00:00, 26.16it/s]
100%|| 79/79 [00:03<00:00, 27.15it/s]
, 24.68it/s]
 70%|   | 55/79 [00:02<00:00, 24.89it/s]
 73%|  | 58/79 [00:03<00:00, 25.34it/s]
 77%|  | 61/79 [00:03<00:00, 25.34it/s]
 81%|  | 64/79 [00:03<00:00, 25.52it/s]
 85%| | 67/79 [00:03<00:00, 25.65it/s]
 89%| | 70/79 [00:03<00:00, 25.72it/s]
 92%|| 73/79 [00:03<00:00, 26.10it/s]
 96%|| 76/79 [00:03<00:00, 26.66it/s]
100%|| 79/79 [00:03<00:00, 27.37it/s]
, 24.46it/s]
 70%|   | 55/79 [00:02<00:00, 24.95it/s]
 73%|  | 58/79 [00:03<00:00, 25.11it/s]
 77%|  | 61/79 [00:03<00:00, 25.38it/s]
 81%|  | 64/79 [00:03<00:00, 25.24it/s]
 85%| | 67/79 [00:03<00:00, 25.17it/s]
 89%| | 70/79 [00:03<00:00, 25.06it/s]
 92%|| 73/79 [00:03<00:00, 25.62it/s]
 96%|| 76/79 [00:03<00:00, 26.10it/s]
100%|| 79/79 [00:03<00:00, 27.01it/s]
, 24.30it/s]
 70%|   | 55/79 [00:02<00:00, 24.70it/s]
 73%|  | 58/79 [00:03<00:00, 25.21it/s]
 77%|  | 61/79 [00:03<00:00, 25.13it/s]
 81%|  | 64/79 [00:03<00:00, 25.30it/s]
 85%| | 67/79 [00:03<00:00, 25.43it/s]
 89%| | 70/79 [00:03<00:00, 25.59it/s]
 92%|| 73/79 [00:03<00:00, 25.81it/s]
 96%|| 76/79 [00:03<00:00, 26.37it/s]
100%|| 79/79 [00:03<00:00, 27.18it/s]
, 24.35it/s]
 70%|   | 55/79 [00:02<00:00, 24.95it/s]
 73%|  | 58/79 [00:03<00:00, 25.14it/s]
 77%|  | 61/79 [00:03<00:00, 25.25it/s]
 81%|  | 64/79 [00:03<00:00, 25.50it/s]
 85%| | 67/79 [00:03<00:00, 25.46it/s]
 89%| | 70/79 [00:03<00:00, 25.51it/s]
 92%|| 73/79 [00:03<00:00, 26.00it/s]
 96%|| 76/79 [00:03<00:00, 26.58it/s]
100%|| 79/79 [00:03<00:00, 27.42it/s]
, 24.23it/s]
 70%|   | 55/79 [00:02<00:00, 24.72it/s]
 73%|  | 58/79 [00:03<00:00, 24.95it/s]
 77%|  | 61/79 [00:03<00:00, 25.46it/s]
 81%|  | 64/79 [00:03<00:00, 25.63it/s]
 85%| | 67/79 [00:03<00:00, 25.40it/s]
 89%| | 70/79 [00:03<00:00, 25.48it/s]
 92%|| 73/79 [00:03<00:00, 25.71it/s]
 96%|| 76/79 [00:03<00:00, 26.34it/s]
100%|| 79/79 [00:03<00:00, 27.10it/s]
, 23.97it/s]
 70%|   | 55/79 [00:02<00:00, 24.08it/s]
 73%|  | 58/79 [00:03<00:00, 24.49it/s]
 77%|  | 61/79 [00:03<00:00, 24.30it/s]
 81%|  | 64/79 [00:03<00:00, 24.43it/s]
 85%| | 67/79 [00:03<00:00, 24.59it/s]
 89%| | 70/79 [00:03<00:00, 24.65it/s]
 92%|| 73/79 [00:03<00:00, 24.97it/s]
 96%|| 76/79 [00:03<00:00, 25.65it/s]
100%|| 79/79 [00:03<00:00, 26.55it/s]
, 23.89it/s]
 70%|   | 55/79 [00:02<00:01, 23.92it/s]
 73%|  | 58/79 [00:03<00:00, 24.52it/s]
 77%|  | 61/79 [00:03<00:00, 24.43it/s]
 81%|  | 64/79 [00:03<00:00, 24.37it/s]
 85%| | 67/79 [00:03<00:00, 24.48it/s]
 89%| | 70/79 [00:03<00:00, 24.84it/s]
 92%|| 73/79 [00:03<00:00, 24.73it/s]
 96%|| 76/79 [00:03<00:00, 25.68it/s]
100%|| 79/79 [00:03<00:00, 26.57it/s]
, 24.33it/s]
 70%|   | 55/79 [00:02<00:00, 24.59it/s]
 73%|  | 58/79 [00:03<00:00, 24.71it/s]
 77%|  | 61/79 [00:03<00:00, 25.07it/s]
 81%|  | 64/79 [00:03<00:00, 25.26it/s]
 85%| | 67/79 [00:03<00:00, 25.38it/s]
 89%| | 70/79 [00:03<00:00, 25.31it/s]
 92%|| 73/79 [00:03<00:00, 25.41it/s]
 96%|| 76/79 [00:03<00:00, 26.11it/s]
100%|| 79/79 [00:03<00:00, 26.13it/s]
, 24.09it/s]
 70%|   | 55/79 [00:03<00:00, 24.36it/s]
 73%|  | 58/79 [00:03<00:00, 24.43it/s]
 77%|  | 61/79 [00:03<00:00, 24.51it/s]
 81%|  | 64/79 [00:03<00:00, 24.52it/s]
 85%| | 67/79 [00:03<00:00, 24.92it/s]
 89%| | 70/79 [00:03<00:00, 25.06it/s]
 92%|| 73/79 [00:03<00:00, 25.41it/s]
 96%|| 76/79 [00:03<00:00, 26.14it/s]
100%|| 79/79 [00:03<00:00, 27.12it/s]
, 23.93it/s]
 70%|   | 55/79 [00:02<00:00, 24.17it/s]
 73%|  | 58/79 [00:03<00:00, 24.47it/s]
 77%|  | 61/79 [00:03<00:00, 24.63it/s]
 81%|  | 64/79 [00:03<00:00, 24.75it/s]
 85%| | 67/79 [00:03<00:00, 25.00it/s]
 89%| | 70/79 [00:03<00:00, 25.12it/s]
 92%|| 73/79 [00:03<00:00, 25.61it/s]
 96%|| 76/79 [00:03<00:00, 26.13it/s]
100%|| 79/79 [00:03<00:00, 26.87it/s]
, 24.01it/s]
 70%|   | 55/79 [00:03<00:00, 24.00it/s]
 73%|  | 58/79 [00:03<00:00, 24.33it/s]
 77%|  | 61/79 [00:03<00:00, 24.69it/s]
 81%|  | 64/79 [00:03<00:00, 24.79it/s]
 85%| | 67/79 [00:03<00:00, 25.18it/s]
 89%| | 70/79 [00:03<00:00, 25.02it/s]
 92%|| 73/79 [00:03<00:00, 25.37it/s]
 96%|| 76/79 [00:03<00:00, 26.08it/s]
100%|| 79/79 [00:03<00:00, 27.11it/s]
, 23.83it/s]
 70%|   | 55/79 [00:03<00:00, 24.28it/s]
 73%|  | 58/79 [00:03<00:00, 24.51it/s]
 77%|  | 61/79 [00:03<00:00, 24.49it/s]
 81%|  | 64/79 [00:03<00:00, 24.50it/s]
 85%| | 67/79 [00:03<00:00, 24.86it/s]
 89%| | 70/79 [00:03<00:00, 24.81it/s]
 92%|| 73/79 [00:03<00:00, 25.22it/s]
 96%|| 76/79 [00:03<00:00, 25.94it/s]
100%|| 79/79 [00:03<00:00, 26.86it/s]
, 24.00it/s]
 70%|   | 55/79 [00:03<00:00, 24.50it/s]
 73%|  | 58/79 [00:03<00:00, 24.80it/s]
 77%|  | 61/79 [00:03<00:00, 24.92it/s]
 81%|  | 64/79 [00:03<00:00, 24.84it/s]
 85%| | 67/79 [00:03<00:00, 24.75it/s]
 89%| | 70/79 [00:03<00:00, 24.69it/s]
 92%|| 73/79 [00:03<00:00, 25.15it/s]
 96%|| 76/79 [00:03<00:00, 25.81it/s]
100%|| 79/79 [00:03<00:00, 26.61it/s]
, 24.08it/s]
 70%|   | 55/79 [00:03<00:00, 24.31it/s]
 73%|  | 58/79 [00:03<00:00, 24.31it/s]
 77%|  | 61/79 [00:03<00:00, 24.50it/s]
 81%|  | 64/79 [00:03<00:00, 24.61it/s]
 85%| | 67/79 [00:03<00:00, 24.62it/s]
 89%| | 70/79 [00:03<00:00, 24.58it/s]
 92%|| 73/79 [00:03<00:00, 25.01it/s]
 96%|| 76/79 [00:03<00:00, 25.65it/s]
100%|| 79/79 [00:03<00:00, 26.63it/s]
, 23.91it/s]
 70%|   | 55/79 [00:03<00:00, 24.07it/s]
 73%|  | 58/79 [00:03<00:00, 24.13it/s]
 77%|  | 61/79 [00:03<00:00, 24.18it/s]
 81%|  | 64/79 [00:03<00:00, 24.36it/s]
 85%| | 67/79 [00:03<00:00, 24.64it/s]
 89%| | 70/79 [00:03<00:00, 24.69it/s]
 92%|| 73/79 [00:03<00:00, 25.04it/s]
 96%|| 76/79 [00:03<00:00, 25.64it/s]
100%|| 79/79 [00:03<00:00, 26.47it/s]
69it/s]
 68%|   | 54/79 [00:03<00:01, 24.06it/s]
 72%|  | 57/79 [00:03<00:00, 24.41it/s]
 76%|  | 60/79 [00:03<00:00, 24.66it/s]
 80%|  | 63/79 [00:03<00:00, 24.86it/s]
 84%| | 66/79 [00:03<00:00, 25.13it/s]
 87%| | 69/79 [00:03<00:00, 25.32it/s]
 91%| | 72/79 [00:03<00:00, 25.11it/s]
 95%|| 75/79 [00:03<00:00, 25.75it/s]
 99%|| 78/79 [00:04<00:00, 26.06it/s]
100%|| 79/79 [00:04<00:00, 19.26it/s]
, 23.47it/s]
 70%|   | 55/79 [00:03<00:00, 24.09it/s]
 73%|  | 58/79 [00:03<00:00, 24.43it/s]
 77%|  | 61/79 [00:03<00:00, 24.75it/s]
 81%|  | 64/79 [00:03<00:00, 24.99it/s]
 85%| | 67/79 [00:03<00:00, 25.21it/s]
 89%| | 70/79 [00:03<00:00, 25.17it/s]
 92%|| 73/79 [00:03<00:00, 25.34it/s]
 96%|| 76/79 [00:03<00:00, 26.08it/s]
100%|| 79/79 [00:04<00:00, 26.68it/s]
, 23.87it/s]
 70%|   | 55/79 [00:03<00:00, 24.45it/s]
 73%|  | 58/79 [00:03<00:00, 24.57it/s]
 77%|  | 61/79 [00:03<00:00, 24.48it/s]
 81%|  | 64/79 [00:03<00:00, 24.44it/s]
 85%| | 67/79 [00:03<00:00, 24.83it/s]
 89%| | 70/79 [00:03<00:00, 24.74it/s]
 92%|| 73/79 [00:03<00:00, 22.50it/s]
 96%|| 76/79 [00:03<00:00, 20.55it/s]
100%|| 79/79 [00:04<00:00, 22.48it/s]
26it/s]
 68%|   | 54/79 [00:03<00:01, 23.63it/s]
 72%|  | 57/79 [00:03<00:00, 23.97it/s]
 76%|  | 60/79 [00:03<00:00, 24.14it/s]
 80%|  | 63/79 [00:03<00:00, 24.61it/s]
 84%| | 66/79 [00:03<00:00, 24.68it/s]
 87%| | 69/79 [00:03<00:00, 24.85it/s]
 91%| | 72/79 [00:03<00:00, 25.00it/s]
 95%|| 75/79 [00:03<00:00, 25.50it/s]
 99%|| 78/79 [00:04<00:00, 25.97it/s]
100%|| 79/79 [00:04<00:00, 19.08it/s]
, 23.28it/s]
 70%|   | 55/79 [00:03<00:01, 23.47it/s]
 73%|  | 58/79 [00:03<00:00, 23.95it/s]
 77%|  | 61/79 [00:03<00:00, 24.05it/s]
 81%|  | 64/79 [00:03<00:00, 24.29it/s]
 85%| | 67/79 [00:03<00:00, 24.44it/s]
 89%| | 70/79 [00:03<00:00, 24.67it/s]
 92%|| 73/79 [00:03<00:00, 24.99it/s]
 96%|| 76/79 [00:03<00:00, 25.93it/s]
100%|| 79/79 [00:04<00:00, 26.90it/s]
, 22.98it/s]
 70%|   | 55/79 [00:03<00:01, 23.41it/s]
 73%|  | 58/79 [00:03<00:00, 23.96it/s]
 77%|  | 61/79 [00:03<00:00, 24.18it/s]
 81%|  | 64/79 [00:03<00:00, 24.31it/s]
 85%| | 67/79 [00:03<00:00, 24.43it/s]
 89%| | 70/79 [00:03<00:00, 24.49it/s]
 92%|| 73/79 [00:03<00:00, 24.86it/s]
 96%|| 76/79 [00:03<00:00, 25.62it/s]
100%|| 79/79 [00:04<00:00, 26.41it/s]
96it/s]
 68%|   | 54/79 [00:03<00:01, 23.35it/s]
 72%|  | 57/79 [00:03<00:00, 23.62it/s]
 76%|  | 60/79 [00:03<00:00, 23.91it/s]
 80%|  | 63/79 [00:03<00:00, 23.91it/s]
 84%| | 66/79 [00:03<00:00, 24.08it/s]
 87%| | 69/79 [00:03<00:00, 24.04it/s]
 91%| | 72/79 [00:03<00:00, 24.31it/s]
 95%|| 75/79 [00:03<00:00, 24.95it/s]
 99%|| 78/79 [00:04<00:00, 25.88it/s]
100%|| 79/79 [00:04<00:00, 18.87it/s]
, 22.85it/s]
 70%|   | 55/79 [00:03<00:01, 23.28it/s]
 73%|  | 58/79 [00:03<00:00, 23.53it/s]
 77%|  | 61/79 [00:03<00:00, 23.79it/s]
 81%|  | 64/79 [00:03<00:00, 23.89it/s]
 85%| | 67/79 [00:03<00:00, 23.99it/s]
 89%| | 70/79 [00:03<00:00, 24.08it/s]
 92%|| 73/79 [00:03<00:00, 24.61it/s]
 96%|| 76/79 [00:04<00:00, 25.32it/s]
100%|| 79/79 [00:04<00:00, 26.19it/s]
, 22.63it/s]
 70%|   | 55/79 [00:03<00:01, 23.14it/s]
 73%|  | 58/79 [00:03<00:00, 23.49it/s]
 77%|  | 61/79 [00:03<00:00, 23.77it/s]
 81%|  | 64/79 [00:03<00:00, 23.96it/s]
 85%| | 67/79 [00:03<00:00, 24.00it/s]
 89%| | 70/79 [00:03<00:00, 24.17it/s]
 92%|| 73/79 [00:03<00:00, 24.30it/s]
 96%|| 76/79 [00:04<00:00, 24.97it/s]
100%|| 79/79 [00:04<00:00, 25.86it/s]
2020-06-23 17:28:08,687 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.303448 (0.027542066955566408 s / img per device, on 32 devices)
2020-06-23 17:28:08,708 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:28:08,709 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:28:08,730 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592958500507, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 6, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592958500508, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 6}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:28:22,145 maskrcnn_benchmark.trainer INFO: eta: 1:14:52  iter: 4600  loss: 0.7114 (0.8398)  loss_classifier: 0.2645 (0.3140)  loss_box_reg: 0.1161 (0.1331)  loss_mask: 0.2677 (0.3258)  loss_objectness: 0.0165 (0.0444)  loss_rpn_box_reg: 0.0135 (0.0224)  time: 0.1095 (0.1269)  data: 0.0015 (0.0193)  lr: 0.160000  max mem: 5155
2020-06-23 17:28:24,322 maskrcnn_benchmark.trainer INFO: eta: 1:14:47  iter: 4620  loss: 0.6872 (0.8392)  loss_classifier: 0.2539 (0.3139)  loss_box_reg: 0.1024 (0.1331)  loss_mask: 0.2723 (0.3256)  loss_objectness: 0.0217 (0.0443)  loss_rpn_box_reg: 0.0091 (0.0224)  time: 0.1084 (0.1268)  data: 0.0017 (0.0193)  lr: 0.160000  max mem: 5155
2020-06-23 17:28:26,498 maskrcnn_benchmark.trainer INFO: eta: 1:14:42  iter: 4640  loss: 0.6202 (0.8385)  loss_classifier: 0.2476 (0.3136)  loss_box_reg: 0.0917 (0.1330)  loss_mask: 0.2518 (0.3253)  loss_objectness: 0.0191 (0.0442)  loss_rpn_box_reg: 0.0121 (0.0223)  time: 0.1083 (0.1268)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 5155
2020-06-23 17:28:28,641 maskrcnn_benchmark.trainer INFO: eta: 1:14:36  iter: 4660  loss: 0.7014 (0.8379)  loss_classifier: 0.2251 (0.3134)  loss_box_reg: 0.0972 (0.1328)  loss_mask: 0.2669 (0.3252)  loss_objectness: 0.0335 (0.0442)  loss_rpn_box_reg: 0.0139 (0.0224)  time: 0.1064 (0.1267)  data: 0.0015 (0.0191)  lr: 0.160000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 17:28:30,796 maskrcnn_benchmark.trainer INFO: eta: 1:14:31  iter: 4680  loss: 0.6837 (0.8372)  loss_classifier: 0.2462 (0.3131)  loss_box_reg: 0.1123 (0.1327)  loss_mask: 0.2697 (0.3250)  loss_objectness: 0.0113 (0.0441)  loss_rpn_box_reg: 0.0112 (0.0223)  time: 0.1073 (0.1266)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5155
DONE (t=1.06s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.94s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.26097
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.45700
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.27311
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.14818
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.28715
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.32949
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.24765
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.40348
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.42446
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.25664
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.45695
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.52469
2020-06-23 17:28:32,946 maskrcnn_benchmark.trainer INFO: eta: 1:14:26  iter: 4700  loss: 0.5955 (0.8365)  loss_classifier: 0.2055 (0.3128)  loss_box_reg: 0.0837 (0.1326)  loss_mask: 0.2624 (0.3247)  loss_objectness: 0.0218 (0.0441)  loss_rpn_box_reg: 0.0108 (0.0223)  time: 0.1068 (0.1265)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5155
2020-06-23 17:28:35,112 maskrcnn_benchmark.trainer INFO: eta: 1:14:20  iter: 4720  loss: 0.7180 (0.8360)  loss_classifier: 0.2543 (0.3126)  loss_box_reg: 0.1046 (0.1325)  loss_mask: 0.2545 (0.3245)  loss_objectness: 0.0237 (0.0440)  loss_rpn_box_reg: 0.0118 (0.0223)  time: 0.1079 (0.1264)  data: 0.0015 (0.0189)  lr: 0.160000  max mem: 5155
2020-06-23 17:28:37,261 maskrcnn_benchmark.trainer INFO: eta: 1:14:15  iter: 4740  loss: 0.6575 (0.8352)  loss_classifier: 0.1950 (0.3122)  loss_box_reg: 0.1015 (0.1324)  loss_mask: 0.2858 (0.3243)  loss_objectness: 0.0155 (0.0439)  loss_rpn_box_reg: 0.0065 (0.0223)  time: 0.1069 (0.1264)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5155
2020-06-23 17:28:39,401 maskrcnn_benchmark.trainer INFO: eta: 1:14:10  iter: 4760  loss: 0.6600 (0.8346)  loss_classifier: 0.2087 (0.3120)  loss_box_reg: 0.0869 (0.1324)  loss_mask: 0.2640 (0.3241)  loss_objectness: 0.0207 (0.0439)  loss_rpn_box_reg: 0.0098 (0.0223)  time: 0.1067 (0.1263)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5155
2020-06-23 17:28:41,576 maskrcnn_benchmark.trainer INFO: eta: 1:14:04  iter: 4780  loss: 0.7014 (0.8340)  loss_classifier: 0.2478 (0.3118)  loss_box_reg: 0.1173 (0.1323)  loss_mask: 0.2470 (0.3239)  loss_objectness: 0.0209 (0.0438)  loss_rpn_box_reg: 0.0083 (0.0222)  time: 0.1085 (0.1262)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:28:43,718 maskrcnn_benchmark.trainer INFO: eta: 1:13:59  iter: 4800  loss: 0.6840 (0.8334)  loss_classifier: 0.2465 (0.3115)  loss_box_reg: 0.0913 (0.1322)  loss_mask: 0.2716 (0.3237)  loss_objectness: 0.0271 (0.0438)  loss_rpn_box_reg: 0.0090 (0.0222)  time: 0.1064 (0.1261)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5155
DONE (t=2.70s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:28:45,865 maskrcnn_benchmark.trainer INFO: eta: 1:13:54  iter: 4820  loss: 0.6949 (0.8327)  loss_classifier: 0.2486 (0.3113)  loss_box_reg: 0.1027 (0.1321)  loss_mask: 0.2765 (0.3235)  loss_objectness: 0.0197 (0.0437)  loss_rpn_box_reg: 0.0082 (0.0222)  time: 0.1075 (0.1260)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5155
2020-06-23 17:28:47,991 maskrcnn_benchmark.trainer INFO: eta: 1:13:48  iter: 4840  loss: 0.7504 (0.8323)  loss_classifier: 0.2198 (0.3110)  loss_box_reg: 0.1045 (0.1320)  loss_mask: 0.2732 (0.3233)  loss_objectness: 0.0256 (0.0438)  loss_rpn_box_reg: 0.0160 (0.0222)  time: 0.1065 (0.1260)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5155
DONE (t=3.18s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.25016
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.42970
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.25957
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.10524
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.27329
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.36104
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.24125
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.37808
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.39565
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22234
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.43229
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.50675
2020-06-23 17:28:48,509 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.26096519737434865, segm mAP: 0.25016120720919854
:::MLLOG {"namespace": "", "time_ms": 1592958528510, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.26096519737434865, "SEGM": 0.25016120720919854}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1592958528510, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 5}}
2020-06-23 17:28:50,336 maskrcnn_benchmark.trainer INFO: eta: 1:13:45  iter: 4860  loss: 0.6677 (0.8319)  loss_classifier: 0.2423 (0.3108)  loss_box_reg: 0.1211 (0.1320)  loss_mask: 0.2874 (0.3231)  loss_objectness: 0.0247 (0.0437)  loss_rpn_box_reg: 0.0175 (0.0222)  time: 0.1074 (0.1259)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5155
2020-06-23 17:28:52,486 maskrcnn_benchmark.trainer INFO: eta: 1:13:40  iter: 4880  loss: 0.6807 (0.8316)  loss_classifier: 0.2270 (0.3107)  loss_box_reg: 0.1069 (0.1320)  loss_mask: 0.2846 (0.3230)  loss_objectness: 0.0209 (0.0437)  loss_rpn_box_reg: 0.0083 (0.0222)  time: 0.1063 (0.1259)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5155
2020-06-23 17:28:54,636 maskrcnn_benchmark.trainer INFO: eta: 1:13:34  iter: 4900  loss: 0.7874 (0.8314)  loss_classifier: 0.3017 (0.3107)  loss_box_reg: 0.1402 (0.1320)  loss_mask: 0.2873 (0.3228)  loss_objectness: 0.0297 (0.0437)  loss_rpn_box_reg: 0.0099 (0.0222)  time: 0.1072 (0.1258)  data: 0.0015 (0.0182)  lr: 0.160000  max mem: 5155
2020-06-23 17:28:56,789 maskrcnn_benchmark.trainer INFO: eta: 1:13:29  iter: 4920  loss: 0.8556 (0.8312)  loss_classifier: 0.2831 (0.3105)  loss_box_reg: 0.1231 (0.1320)  loss_mask: 0.2944 (0.3227)  loss_objectness: 0.0427 (0.0437)  loss_rpn_box_reg: 0.0181 (0.0223)  time: 0.1071 (0.1257)  data: 0.0015 (0.0182)  lr: 0.160000  max mem: 5155
2020-06-23 17:28:58,933 maskrcnn_benchmark.trainer INFO: eta: 1:13:24  iter: 4940  loss: 0.6070 (0.8303)  loss_classifier: 0.1918 (0.3101)  loss_box_reg: 0.0963 (0.1318)  loss_mask: 0.2701 (0.3225)  loss_objectness: 0.0153 (0.0437)  loss_rpn_box_reg: 0.0056 (0.0222)  time: 0.1072 (0.1256)  data: 0.0013 (0.0181)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:01,099 maskrcnn_benchmark.trainer INFO: eta: 1:13:19  iter: 4960  loss: 0.7212 (0.8297)  loss_classifier: 0.2618 (0.3099)  loss_box_reg: 0.1243 (0.1317)  loss_mask: 0.2805 (0.3223)  loss_objectness: 0.0187 (0.0436)  loss_rpn_box_reg: 0.0087 (0.0222)  time: 0.1076 (0.1256)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:03,258 maskrcnn_benchmark.trainer INFO: eta: 1:13:14  iter: 4980  loss: 0.6662 (0.8291)  loss_classifier: 0.2482 (0.3096)  loss_box_reg: 0.1207 (0.1317)  loss_mask: 0.2874 (0.3221)  loss_objectness: 0.0221 (0.0435)  loss_rpn_box_reg: 0.0080 (0.0222)  time: 0.1073 (0.1255)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:05,410 maskrcnn_benchmark.trainer INFO: eta: 1:13:09  iter: 5000  loss: 0.7421 (0.8287)  loss_classifier: 0.2622 (0.3095)  loss_box_reg: 0.1087 (0.1316)  loss_mask: 0.2698 (0.3220)  loss_objectness: 0.0199 (0.0434)  loss_rpn_box_reg: 0.0108 (0.0221)  time: 0.1074 (0.1254)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:07,556 maskrcnn_benchmark.trainer INFO: eta: 1:13:04  iter: 5020  loss: 0.7047 (0.8282)  loss_classifier: 0.2563 (0.3093)  loss_box_reg: 0.1014 (0.1316)  loss_mask: 0.2781 (0.3219)  loss_objectness: 0.0231 (0.0434)  loss_rpn_box_reg: 0.0099 (0.0221)  time: 0.1072 (0.1253)  data: 0.0013 (0.0178)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:09,704 maskrcnn_benchmark.trainer INFO: eta: 1:12:59  iter: 5040  loss: 0.6053 (0.8274)  loss_classifier: 0.2424 (0.3089)  loss_box_reg: 0.0843 (0.1314)  loss_mask: 0.2502 (0.3216)  loss_objectness: 0.0138 (0.0433)  loss_rpn_box_reg: 0.0068 (0.0221)  time: 0.1068 (0.1253)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:11,856 maskrcnn_benchmark.trainer INFO: eta: 1:12:54  iter: 5060  loss: 0.7678 (0.8271)  loss_classifier: 0.3044 (0.3088)  loss_box_reg: 0.1422 (0.1314)  loss_mask: 0.2936 (0.3215)  loss_objectness: 0.0190 (0.0433)  loss_rpn_box_reg: 0.0090 (0.0220)  time: 0.1071 (0.1252)  data: 0.0015 (0.0177)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:14,012 maskrcnn_benchmark.trainer INFO: eta: 1:12:49  iter: 5080  loss: 0.7528 (0.8268)  loss_classifier: 0.2551 (0.3087)  loss_box_reg: 0.1272 (0.1314)  loss_mask: 0.3148 (0.3214)  loss_objectness: 0.0262 (0.0432)  loss_rpn_box_reg: 0.0184 (0.0221)  time: 0.1074 (0.1251)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:16,174 maskrcnn_benchmark.trainer INFO: eta: 1:12:44  iter: 5100  loss: 0.7079 (0.8266)  loss_classifier: 0.2482 (0.3085)  loss_box_reg: 0.1316 (0.1314)  loss_mask: 0.2784 (0.3213)  loss_objectness: 0.0295 (0.0433)  loss_rpn_box_reg: 0.0239 (0.0222)  time: 0.1077 (0.1251)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:18,340 maskrcnn_benchmark.trainer INFO: eta: 1:12:40  iter: 5120  loss: 0.6729 (0.8261)  loss_classifier: 0.2103 (0.3082)  loss_box_reg: 0.1016 (0.1313)  loss_mask: 0.2719 (0.3211)  loss_objectness: 0.0309 (0.0433)  loss_rpn_box_reg: 0.0139 (0.0222)  time: 0.1075 (0.1250)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:20,530 maskrcnn_benchmark.trainer INFO: eta: 1:12:35  iter: 5140  loss: 0.8095 (0.8260)  loss_classifier: 0.3054 (0.3082)  loss_box_reg: 0.1400 (0.1313)  loss_mask: 0.2849 (0.3210)  loss_objectness: 0.0295 (0.0433)  loss_rpn_box_reg: 0.0149 (0.0222)  time: 0.1086 (0.1249)  data: 0.0015 (0.0175)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:22,684 maskrcnn_benchmark.trainer INFO: eta: 1:12:30  iter: 5160  loss: 0.6765 (0.8254)  loss_classifier: 0.2472 (0.3080)  loss_box_reg: 0.0984 (0.1312)  loss_mask: 0.2724 (0.3208)  loss_objectness: 0.0155 (0.0432)  loss_rpn_box_reg: 0.0086 (0.0221)  time: 0.1077 (0.1249)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:24,820 maskrcnn_benchmark.trainer INFO: eta: 1:12:25  iter: 5180  loss: 0.6215 (0.8248)  loss_classifier: 0.2287 (0.3077)  loss_box_reg: 0.0945 (0.1311)  loss_mask: 0.2518 (0.3206)  loss_objectness: 0.0203 (0.0432)  loss_rpn_box_reg: 0.0146 (0.0222)  time: 0.1071 (0.1248)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:26,997 maskrcnn_benchmark.trainer INFO: eta: 1:12:21  iter: 5200  loss: 0.7357 (0.8247)  loss_classifier: 0.2736 (0.3076)  loss_box_reg: 0.1257 (0.1311)  loss_mask: 0.2989 (0.3206)  loss_objectness: 0.0248 (0.0432)  loss_rpn_box_reg: 0.0081 (0.0222)  time: 0.1089 (0.1247)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:29,145 maskrcnn_benchmark.trainer INFO: eta: 1:12:16  iter: 5220  loss: 0.5931 (0.8240)  loss_classifier: 0.1883 (0.3074)  loss_box_reg: 0.1072 (0.1310)  loss_mask: 0.2594 (0.3203)  loss_objectness: 0.0252 (0.0431)  loss_rpn_box_reg: 0.0133 (0.0222)  time: 0.1072 (0.1247)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:31,290 maskrcnn_benchmark.trainer INFO: eta: 1:12:11  iter: 5240  loss: 0.6163 (0.8234)  loss_classifier: 0.2321 (0.3071)  loss_box_reg: 0.0868 (0.1310)  loss_mask: 0.2794 (0.3202)  loss_objectness: 0.0222 (0.0430)  loss_rpn_box_reg: 0.0075 (0.0221)  time: 0.1066 (0.1246)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:33,442 maskrcnn_benchmark.trainer INFO: eta: 1:12:06  iter: 5260  loss: 0.6884 (0.8232)  loss_classifier: 0.2429 (0.3070)  loss_box_reg: 0.1226 (0.1309)  loss_mask: 0.2782 (0.3201)  loss_objectness: 0.0246 (0.0430)  loss_rpn_box_reg: 0.0125 (0.0221)  time: 0.1075 (0.1245)  data: 0.0015 (0.0171)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:35,602 maskrcnn_benchmark.trainer INFO: eta: 1:12:02  iter: 5280  loss: 0.6642 (0.8227)  loss_classifier: 0.2504 (0.3069)  loss_box_reg: 0.1053 (0.1308)  loss_mask: 0.2686 (0.3199)  loss_objectness: 0.0224 (0.0430)  loss_rpn_box_reg: 0.0086 (0.0221)  time: 0.1077 (0.1245)  data: 0.0014 (0.0170)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:37,765 maskrcnn_benchmark.trainer INFO: eta: 1:11:57  iter: 5300  loss: 0.6743 (0.8224)  loss_classifier: 0.2146 (0.3068)  loss_box_reg: 0.1265 (0.1308)  loss_mask: 0.2765 (0.3198)  loss_objectness: 0.0232 (0.0429)  loss_rpn_box_reg: 0.0109 (0.0221)  time: 0.1078 (0.1244)  data: 0.0014 (0.0170)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:39,918 maskrcnn_benchmark.trainer INFO: eta: 1:11:52  iter: 5320  loss: 0.7028 (0.8219)  loss_classifier: 0.2532 (0.3066)  loss_box_reg: 0.1046 (0.1307)  loss_mask: 0.2766 (0.3196)  loss_objectness: 0.0199 (0.0429)  loss_rpn_box_reg: 0.0111 (0.0221)  time: 0.1074 (0.1244)  data: 0.0014 (0.0169)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:42,095 maskrcnn_benchmark.trainer INFO: eta: 1:11:48  iter: 5340  loss: 0.6064 (0.8212)  loss_classifier: 0.2366 (0.3063)  loss_box_reg: 0.1019 (0.1306)  loss_mask: 0.2692 (0.3194)  loss_objectness: 0.0220 (0.0428)  loss_rpn_box_reg: 0.0065 (0.0220)  time: 0.1092 (0.1243)  data: 0.0014 (0.0169)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:44,249 maskrcnn_benchmark.trainer INFO: eta: 1:11:43  iter: 5360  loss: 0.5892 (0.8205)  loss_classifier: 0.1977 (0.3060)  loss_box_reg: 0.0800 (0.1305)  loss_mask: 0.2497 (0.3192)  loss_objectness: 0.0128 (0.0428)  loss_rpn_box_reg: 0.0079 (0.0220)  time: 0.1074 (0.1242)  data: 0.0014 (0.0168)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:46,408 maskrcnn_benchmark.trainer INFO: eta: 1:11:39  iter: 5380  loss: 0.6633 (0.8201)  loss_classifier: 0.2498 (0.3059)  loss_box_reg: 0.1049 (0.1305)  loss_mask: 0.2651 (0.3191)  loss_objectness: 0.0235 (0.0427)  loss_rpn_box_reg: 0.0104 (0.0220)  time: 0.1072 (0.1242)  data: 0.0014 (0.0167)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:48,564 maskrcnn_benchmark.trainer INFO: eta: 1:11:34  iter: 5400  loss: 0.5580 (0.8194)  loss_classifier: 0.1826 (0.3056)  loss_box_reg: 0.0865 (0.1303)  loss_mask: 0.2490 (0.3189)  loss_objectness: 0.0259 (0.0427)  loss_rpn_box_reg: 0.0092 (0.0220)  time: 0.1072 (0.1241)  data: 0.0014 (0.0167)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:50,718 maskrcnn_benchmark.trainer INFO: eta: 1:11:29  iter: 5420  loss: 0.6700 (0.8188)  loss_classifier: 0.2300 (0.3054)  loss_box_reg: 0.1011 (0.1302)  loss_mask: 0.2752 (0.3187)  loss_objectness: 0.0225 (0.0426)  loss_rpn_box_reg: 0.0089 (0.0219)  time: 0.1081 (0.1241)  data: 0.0015 (0.0166)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:52,872 maskrcnn_benchmark.trainer INFO: eta: 1:11:25  iter: 5440  loss: 0.6437 (0.8183)  loss_classifier: 0.2207 (0.3052)  loss_box_reg: 0.0924 (0.1302)  loss_mask: 0.2418 (0.3185)  loss_objectness: 0.0170 (0.0426)  loss_rpn_box_reg: 0.0079 (0.0219)  time: 0.1069 (0.1240)  data: 0.0014 (0.0166)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:55,024 maskrcnn_benchmark.trainer INFO: eta: 1:11:20  iter: 5460  loss: 0.7468 (0.8180)  loss_classifier: 0.2776 (0.3051)  loss_box_reg: 0.1315 (0.1302)  loss_mask: 0.2689 (0.3183)  loss_objectness: 0.0248 (0.0425)  loss_rpn_box_reg: 0.0121 (0.0219)  time: 0.1073 (0.1239)  data: 0.0014 (0.0165)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:57,189 maskrcnn_benchmark.trainer INFO: eta: 1:11:16  iter: 5480  loss: 0.7656 (0.8178)  loss_classifier: 0.2885 (0.3051)  loss_box_reg: 0.1225 (0.1302)  loss_mask: 0.2771 (0.3182)  loss_objectness: 0.0249 (0.0425)  loss_rpn_box_reg: 0.0121 (0.0219)  time: 0.1080 (0.1239)  data: 0.0014 (0.0165)  lr: 0.160000  max mem: 5155
2020-06-23 17:29:59,897 maskrcnn_benchmark.trainer INFO: eta: 1:11:15  iter: 5500  loss: 0.5827 (0.8172)  loss_classifier: 0.1892 (0.3049)  loss_box_reg: 0.0921 (0.1301)  loss_mask: 0.2545 (0.3180)  loss_objectness: 0.0178 (0.0425)  loss_rpn_box_reg: 0.0060 (0.0219)  time: 0.1064 (0.1239)  data: 0.0014 (0.0164)  lr: 0.160000  max mem: 5155
:::MLLOG {"namespace": "", "time_ms": 1592958600639, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 6}}
:::MLLOG {"namespace": "", "time_ms": 1592958600639, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 6}}
:::MLLOG {"namespace": "", "time_ms": 1592958600639, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 6}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 17:30:00,900 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
Done (t=0.29s)
creating index...
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 17:30:01,208 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.27it/s]
 16%|        | 13/79 [00:01<00:14,  4.43it/s]
 20%|        | 16/79 [00:01<00:10,  5.91it/s]
 24%|       | 19/79 [00:01<00:07,  7.69it/s]
 28%|       | 22/79 [00:01<00:05,  9.73it/s]
 32%|      | 25/79 [00:01<00:04, 11.99it/s]
 35%|      | 28/79 [00:01<00:03, 14.32it/s]
 39%|      | 31/79 [00:01<00:02, 16.46it/s]
 43%|     | 34/79 [00:02<00:02, 18.47it/s]
 47%|     | 37/79 [00:02<00:02, 20.34it/s]
 51%|     | 40/79 [00:02<00:01, 21.68it/s]
 54%|    | 43/79 [00:02<00:01, 22.64it/s]
 58%|    | 46/79 [00:02<00:01, 23.33it/s]
 62%|   | 49/79 [00:02<00:01, 24.01it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:43,  1.74it/s]
  9%|         | 7/79 [00:01<00:29,  2.42it/s]
 13%|        | 10/79 [00:01<00:20,  3.32it/s]
 16%|        | 13/79 [00:01<00:14,  4.49it/s]
 20%|        | 16/79 [00:01<00:10,  5.97it/s]
 24%|       | 19/79 [00:01<00:07,  7.75it/s]
 28%|       | 22/79 [00:01<00:05,  9.81it/s]
 32%|      | 25/79 [00:01<00:04, 12.02it/s]
 35%|      | 28/79 [00:01<00:03, 14.33it/s]
 39%|      | 31/79 [00:01<00:02, 16.57it/s]
 43%|     | 34/79 [00:02<00:02, 18.50it/s]
 47%|     | 37/79 [00:02<00:02, 20.17it/s]
 51%|     | 40/79 [00:02<00:01, 21.47it/s]
 54%|    | 43/79 [00:02<00:01, 22.41it/s]
 58%|    | 46/79 [00:02<00:01, 23.18it/s]
 62%|   | 49/79 [00:02<00:01, 23.68it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:29,  2.40it/s]
 13%|        | 10/79 [00:01<00:20,  3.30it/s]
 16%|        | 13/79 [00:01<00:14,  4.48it/s]
 20%|        | 16/79 [00:01<00:10,  5.95it/s]
 24%|       | 19/79 [00:01<00:07,  7.75it/s]
 28%|       | 22/79 [00:01<00:05,  9.85it/s]
 32%|      | 25/79 [00:01<00:04, 12.08it/s]
 35%|      | 28/79 [00:01<00:03, 14.48it/s]
 39%|      | 31/79 [00:01<00:02, 16.68it/s]
 43%|     | 34/79 [00:02<00:02, 18.77it/s]
 47%|     | 37/79 [00:02<00:02, 20.35it/s]
 51%|     | 40/79 [00:02<00:01, 21.91it/s]
 54%|    | 43/79 [00:02<00:01, 23.08it/s]
 58%|    | 46/79 [00:02<00:01, 23.99it/s]
 62%|   | 49/79 [00:02<00:01, 24.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.42it/s]
 13%|        | 10/79 [00:01<00:20,  3.32it/s]
 16%|        | 13/79 [00:01<00:14,  4.51it/s]
 20%|        | 16/79 [00:01<00:10,  5.97it/s]
 24%|       | 19/79 [00:01<00:07,  7.76it/s]
 28%|       | 22/79 [00:01<00:05,  9.82it/s]
 32%|      | 25/79 [00:01<00:04, 12.09it/s]
 35%|      | 28/79 [00:01<00:03, 14.39it/s]
 39%|      | 31/79 [00:01<00:02, 16.58it/s]
 43%|     | 34/79 [00:02<00:02, 18.65it/s]
 47%|     | 37/79 [00:02<00:02, 20.33it/s]
 51%|     | 40/79 [00:02<00:01, 21.68it/s]
 54%|    | 43/79 [00:02<00:01, 22.73it/s]
 58%|    | 46/79 [00:02<00:01, 23.31it/s]
 62%|   | 49/79 [00:02<00:01, 23.83it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.26it/s]
  4%|         | 3/79 [00:00<00:43,  1.75it/s]
  8%|         | 6/79 [00:01<00:30,  2.42it/s]
 11%|        | 9/79 [00:01<00:21,  3.32it/s]
 15%|        | 12/79 [00:01<00:14,  4.49it/s]
 19%|        | 15/79 [00:01<00:10,  5.97it/s]
 23%|       | 18/79 [00:01<00:07,  7.75it/s]
 27%|       | 21/79 [00:01<00:05,  9.79it/s]
 30%|       | 24/79 [00:01<00:04, 11.99it/s]
 34%|      | 27/79 [00:01<00:03, 14.19it/s]
 38%|      | 30/79 [00:01<00:02, 16.40it/s]
 42%|     | 33/79 [00:02<00:02, 18.32it/s]
 46%|     | 36/79 [00:02<00:02, 20.03it/s]
 49%|     | 39/79 [00:02<00:01, 21.51it/s]
 53%|    | 42/79 [00:02<00:01, 22.70it/s]
 57%|    | 45/79 [00:02<00:01, 23.61it/s]
 61%|    | 48/79 [00:02<00:01, 24.31it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.43it/s]
 13%|        | 10/79 [00:01<00:20,  3.34it/s]
 16%|        | 13/79 [00:01<00:14,  4.51it/s]
 20%|        | 16/79 [00:01<00:10,  5.99it/s]
 24%|       | 19/79 [00:01<00:07,  7.79it/s]
 28%|       | 22/79 [00:01<00:05,  9.84it/s]
 32%|      | 25/79 [00:01<00:04, 12.07it/s]
 35%|      | 28/79 [00:01<00:03, 14.36it/s]
 39%|      | 31/79 [00:01<00:02, 16.60it/s]
 43%|     | 34/79 [00:02<00:02, 18.53it/s]
 47%|     | 37/79 [00:02<00:02, 20.16it/s]
 51%|     | 40/79 [00:02<00:01, 21.60it/s]
 54%|    | 43/79 [00:02<00:01, 22.91it/s]
 58%|    | 46/79 [00:02<00:01, 23.60it/s]
 62%|   | 49/79 [00:02<00:01, 24.23it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:15,  4.40it/s]
 20%|        | 16/79 [00:01<00:10,  5.86it/s]
 24%|       | 19/79 [00:01<00:07,  7.60it/s]
 28%|       | 22/79 [00:01<00:05,  9.64it/s]
 32%|      | 25/79 [00:01<00:04, 11.86it/s]
 35%|      | 28/79 [00:01<00:03, 14.23it/s]
 39%|      | 31/79 [00:01<00:02, 16.36it/s]
 43%|     | 34/79 [00:02<00:02, 18.19it/s]
 47%|     | 37/79 [00:02<00:02, 19.97it/s]
 51%|     | 40/79 [00:02<00:01, 21.35it/s]
 54%|    | 43/79 [00:02<00:01, 22.58it/s]
 58%|    | 46/79 [00:02<00:01, 23.31it/s]
 62%|   | 49/79 [00:02<00:01, 24.02it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:43,  1.74it/s]
  9%|         | 7/79 [00:01<00:29,  2.41it/s]
 13%|        | 10/79 [00:01<00:20,  3.30it/s]
 16%|        | 13/79 [00:01<00:14,  4.46it/s]
 20%|        | 16/79 [00:01<00:10,  5.93it/s]
 24%|       | 19/79 [00:01<00:07,  7.72it/s]
 28%|       | 22/79 [00:01<00:05,  9.78it/s]
 32%|      | 25/79 [00:01<00:04, 12.03it/s]
 35%|      | 28/79 [00:01<00:03, 14.28it/s]
 39%|      | 31/79 [00:02<00:02, 16.53it/s]
 43%|     | 34/79 [00:02<00:02, 18.54it/s]
 47%|     | 37/79 [00:02<00:02, 20.18it/s]
 51%|     | 40/79 [00:02<00:01, 21.52it/s]
 54%|    | 43/79 [00:02<00:01, 22.71it/s]
 58%|    | 46/79 [00:02<00:01, 23.55it/s]
 62%|   | 49/79 [00:02<00:01, 24.21it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.76it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:06,  9.48it/s]
 32%|      | 25/79 [00:01<00:04, 11.65it/s]
 35%|      | 28/79 [00:01<00:03, 13.94it/s]
 39%|      | 31/79 [00:02<00:03, 15.96it/s]
 43%|     | 34/79 [00:02<00:02, 17.88it/s]
 47%|     | 37/79 [00:02<00:02, 19.40it/s]
 51%|     | 40/79 [00:02<00:01, 20.73it/s]
 54%|    | 43/79 [00:02<00:01, 21.79it/s]
 58%|    | 46/79 [00:02<00:01, 22.77it/s]
 62%|   | 49/79 [00:02<00:01, 23.59it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:14,  4.40it/s]
 20%|        | 16/79 [00:01<00:10,  5.85it/s]
 24%|       | 19/79 [00:01<00:07,  7.59it/s]
 28%|       | 22/79 [00:01<00:05,  9.63it/s]
 32%|      | 25/79 [00:01<00:04, 11.83it/s]
 35%|      | 28/79 [00:01<00:03, 14.10it/s]
 39%|      | 31/79 [00:02<00:02, 16.36it/s]
 43%|     | 34/79 [00:02<00:02, 18.37it/s]
 47%|     | 37/79 [00:02<00:02, 20.19it/s]
 51%|     | 40/79 [00:02<00:01, 21.29it/s]
 54%|    | 43/79 [00:02<00:01, 22.40it/s]
 58%|    | 46/79 [00:02<00:01, 22.88it/s]
 62%|   | 49/79 [00:02<00:01, 23.52it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.30it/s]
 32%|      | 25/79 [00:01<00:04, 11.49it/s]
 35%|      | 28/79 [00:01<00:03, 13.77it/s]
 39%|      | 31/79 [00:02<00:03, 15.98it/s]
 43%|     | 34/79 [00:02<00:02, 18.00it/s]
 47%|     | 37/79 [00:02<00:02, 19.67it/s]
 51%|     | 40/79 [00:02<00:01, 21.23it/s]
 54%|    | 43/79 [00:02<00:01, 22.30it/s]
 58%|    | 46/79 [00:02<00:01, 23.00it/s]
 62%|   | 49/79 [00:02<00:01, 23.91it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  4%|         | 3/79 [00:00<00:48,  1.58it/s]
  8%|         | 6/79 [00:01<00:33,  2.20it/s]
 11%|        | 9/79 [00:01<00:23,  3.03it/s]
 15%|        | 12/79 [00:01<00:16,  4.11it/s]
 19%|        | 15/79 [00:01<00:11,  5.50it/s]
 23%|       | 18/79 [00:01<00:08,  7.19it/s]
 27%|       | 21/79 [00:01<00:06,  9.18it/s]
 30%|       | 24/79 [00:01<00:04, 11.38it/s]
 34%|      | 27/79 [00:01<00:03, 13.67it/s]
 38%|      | 30/79 [00:02<00:03, 15.83it/s]
 42%|     | 33/79 [00:02<00:02, 17.89it/s]
 46%|     | 36/79 [00:02<00:02, 19.55it/s]
 49%|     | 39/79 [00:02<00:01, 20.59it/s]
 53%|    | 42/79 [00:02<00:01, 21.69it/s]
 57%|    | 45/79 [00:02<00:01, 22.80it/s]
 61%|    | 48/79 [00:02<00:01, 23.44it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.77it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:05,  9.52it/s]
 32%|      | 25/79 [00:01<00:04, 11.64it/s]
 35%|      | 28/79 [00:01<00:03, 13.87it/s]
 39%|      | 31/79 [00:02<00:02, 16.13it/s]
 43%|     | 34/79 [00:02<00:02, 18.09it/s]
 47%|     | 37/79 [00:02<00:02, 19.63it/s]
 51%|     | 40/79 [00:02<00:01, 21.13it/s]
 54%|    | 43/79 [00:02<00:01, 22.34it/s]
 58%|    | 46/79 [00:02<00:01, 23.26it/s]
 62%|   | 49/79 [00:02<00:01, 23.94it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.71it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.47it/s]
 32%|      | 25/79 [00:01<00:04, 11.68it/s]
 35%|      | 28/79 [00:01<00:03, 14.02it/s]
 39%|      | 31/79 [00:02<00:02, 16.19it/s]
 43%|     | 34/79 [00:02<00:02, 18.13it/s]
 47%|     | 37/79 [00:02<00:02, 19.78it/s]
 51%|     | 40/79 [00:02<00:01, 21.34it/s]
 54%|    | 43/79 [00:02<00:01, 22.43it/s]
 58%|    | 46/79 [00:02<00:01, 23.22it/s]
 62%|   | 49/79 [00:02<00:01, 24.23it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.24it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.83it/s]
 24%|       | 19/79 [00:01<00:07,  7.57it/s]
 28%|       | 22/79 [00:01<00:05,  9.55it/s]
 32%|      | 25/79 [00:01<00:04, 11.74it/s]
 35%|      | 28/79 [00:01<00:03, 13.97it/s]
 39%|      | 31/79 [00:02<00:02, 16.04it/s]
 43%|     | 34/79 [00:02<00:02, 18.00it/s]
 47%|     | 37/79 [00:02<00:02, 19.82it/s]
 51%|     | 40/79 [00:02<00:01, 21.10it/s]
 54%|    | 43/79 [00:02<00:01, 22.13it/s]
 58%|    | 46/79 [00:02<00:01, 22.87it/s]
 62%|   | 49/79 [00:02<00:01, 23.70it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.45it/s]
 35%|      | 28/79 [00:01<00:03, 13.72it/s]
 39%|      | 31/79 [00:02<00:03, 16.00it/s]
 43%|     | 34/79 [00:02<00:02, 18.04it/s]
 47%|     | 37/79 [00:02<00:02, 19.86it/s]
 51%|     | 40/79 [00:02<00:01, 21.26it/s]
 54%|    | 43/79 [00:02<00:01, 22.39it/s]
 58%|    | 46/79 [00:02<00:01, 23.31it/s]
 62%|   | 49/79 [00:02<00:01, 23.71it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.43it/s]
 13%|        | 10/79 [00:01<00:20,  3.33it/s]
 16%|        | 13/79 [00:01<00:14,  4.49it/s]
 20%|        | 16/79 [00:01<00:10,  5.95it/s]
 24%|       | 19/79 [00:01<00:07,  7.70it/s]
 28%|       | 22/79 [00:01<00:05,  9.68it/s]
 32%|      | 25/79 [00:01<00:04, 11.86it/s]
 35%|      | 28/79 [00:01<00:03, 14.00it/s]
 39%|      | 31/79 [00:02<00:02, 16.08it/s]
 43%|     | 34/79 [00:02<00:02, 17.90it/s]
 47%|     | 37/79 [00:02<00:02, 19.68it/s]
 51%|     | 40/79 [00:02<00:01, 20.74it/s]
 54%|    | 43/79 [00:02<00:01, 21.65it/s]
 58%|    | 46/79 [00:02<00:01, 22.16it/s]
 62%|   | 49/79 [00:02<00:01, 23.08it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.37it/s]
 32%|      | 25/79 [00:01<00:04, 11.55it/s]
 35%|      | 28/79 [00:01<00:03, 13.82it/s]
 39%|      | 31/79 [00:02<00:03, 15.94it/s]
 43%|     | 34/79 [00:02<00:02, 18.02it/s]
 47%|     | 37/79 [00:02<00:02, 19.67it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 22.27it/s]
 58%|    | 46/79 [00:02<00:01, 23.20it/s]
 62%|   | 49/79 [00:02<00:01, 23.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.36it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.45it/s]
 35%|      | 28/79 [00:01<00:03, 13.77it/s]
 39%|      | 31/79 [00:02<00:02, 16.02it/s]
 43%|     | 34/79 [00:02<00:02, 17.96it/s]
 47%|     | 37/79 [00:02<00:02, 19.69it/s]
 51%|     | 40/79 [00:02<00:01, 21.07it/s]
 54%|    | 43/79 [00:02<00:01, 22.13it/s]
 58%|    | 46/79 [00:02<00:01, 22.49it/s]
 62%|   | 49/79 [00:02<00:01, 23.06it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.48it/s]
 24%|       | 19/79 [00:01<00:08,  7.15it/s]
 28%|       | 22/79 [00:01<00:06,  9.14it/s]
 32%|      | 25/79 [00:01<00:04, 11.28it/s]
 35%|      | 28/79 [00:01<00:03, 13.56it/s]
 39%|      | 31/79 [00:02<00:03, 15.85it/s]
 43%|     | 34/79 [00:02<00:02, 17.97it/s]
 47%|     | 37/79 [00:02<00:02, 19.77it/s]
 51%|     | 40/79 [00:02<00:01, 21.29it/s]
 54%|    | 43/79 [00:02<00:01, 22.64it/s]
 58%|    | 46/79 [00:02<00:01, 23.30it/s]
 62%|   | 49/79 [00:02<00:01, 23.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.48it/s]
 24%|       | 19/79 [00:01<00:08,  7.17it/s]
 28%|       | 22/79 [00:01<00:06,  9.17it/s]
 32%|      | 25/79 [00:01<00:04, 11.35it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.68it/s]
 43%|     | 34/79 [00:02<00:02, 17.65it/s]
 47%|     | 37/79 [00:02<00:02, 19.46it/s]
 51%|     | 40/79 [00:02<00:01, 20.70it/s]
 54%|    | 43/79 [00:02<00:01, 22.03it/s]
 58%|    | 46/79 [00:02<00:01, 22.59it/s]
 62%|   | 49/79 [00:02<00:01, 23.33it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.86it/s]
 28%|       | 22/79 [00:01<00:06,  8.81it/s]
 32%|      | 25/79 [00:01<00:04, 11.01it/s]
 35%|      | 28/79 [00:02<00:03, 13.33it/s]
 39%|      | 31/79 [00:02<00:03, 15.50it/s]
 43%|     | 34/79 [00:02<00:02, 17.63it/s]
 47%|     | 37/79 [00:02<00:02, 19.42it/s]
 51%|     | 40/79 [00:02<00:01, 20.90it/s]
 54%|    | 43/79 [00:02<00:01, 22.22it/s]
 58%|    | 46/79 [00:02<00:01, 22.89it/s]
 62%|   | 49/79 [00:02<00:01, 23.46it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.17it/s]
 32%|      | 25/79 [00:01<00:04, 11.30it/s]
 35%|      | 28/79 [00:01<00:03, 13.47it/s]
 39%|      | 31/79 [00:02<00:03, 15.60it/s]
 43%|     | 34/79 [00:02<00:02, 17.48it/s]
 47%|     | 37/79 [00:02<00:02, 19.15it/s]
 51%|     | 40/79 [00:02<00:01, 20.39it/s]
 54%|    | 43/79 [00:02<00:01, 21.28it/s]
 58%|    | 46/79 [00:02<00:01, 22.29it/s]
 62%|   | 49/79 [00:02<00:01, 23.25it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.54it/s]
 35%|      | 28/79 [00:01<00:03, 13.73it/s]
 39%|      | 31/79 [00:02<00:03, 15.96it/s]
 43%|     | 34/79 [00:02<00:02, 17.58it/s]
 47%|     | 37/79 [00:02<00:02, 19.01it/s]
 51%|     | 40/79 [00:02<00:01, 20.39it/s]
 54%|    | 43/79 [00:02<00:01, 21.36it/s]
 58%|    | 46/79 [00:02<00:01, 22.26it/s]
 62%|   | 49/79 [00:02<00:01, 22.81it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.84it/s]
 16%|        | 13/79 [00:01<00:17,  3.87it/s]
 20%|        | 16/79 [00:01<00:12,  5.18it/s]
 24%|       | 19/79 [00:01<00:08,  6.80it/s]
 28%|       | 22/79 [00:01<00:06,  8.72it/s]
 32%|      | 25/79 [00:01<00:04, 10.82it/s]
 35%|      | 28/79 [00:02<00:03, 13.06it/s]
 39%|      | 31/79 [00:02<00:03, 15.31it/s]
 43%|     | 34/79 [00:02<00:02, 17.27it/s]
 47%|     | 37/79 [00:02<00:02, 19.05it/s]
 51%|     | 40/79 [00:02<00:01, 20.50it/s]
 54%|    | 43/79 [00:02<00:01, 21.77it/s]
 58%|    | 46/79 [00:02<00:01, 22.53it/s]
 62%|   | 49/79 [00:02<00:01, 23.06it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:00<00:47,  1.62it/s]
  8%|         | 6/79 [00:01<00:32,  2.24it/s]
 11%|        | 9/79 [00:01<00:22,  3.08it/s]
 15%|        | 12/79 [00:01<00:16,  4.18it/s]
 19%|        | 15/79 [00:01<00:11,  5.56it/s]
 23%|       | 18/79 [00:01<00:08,  7.25it/s]
 27%|       | 21/79 [00:01<00:06,  9.24it/s]
 30%|       | 24/79 [00:01<00:04, 11.28it/s]
 34%|      | 27/79 [00:01<00:03, 13.43it/s]
 38%|      | 30/79 [00:02<00:03, 15.45it/s]
 42%|     | 33/79 [00:02<00:02, 17.35it/s]
 46%|     | 36/79 [00:02<00:02, 18.80it/s]
 49%|     | 39/79 [00:02<00:01, 20.00it/s]
 53%|    | 42/79 [00:02<00:01, 21.09it/s]
 57%|    | 45/79 [00:02<00:01, 22.09it/s]
 61%|    | 48/79 [00:02<00:01, 22.73it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.86it/s]
 20%|        | 16/79 [00:01<00:12,  5.17it/s]
 24%|       | 19/79 [00:01<00:08,  6.78it/s]
 28%|       | 22/79 [00:01<00:06,  8.66it/s]
 32%|      | 25/79 [00:01<00:04, 10.82it/s]
 35%|      | 28/79 [00:02<00:03, 13.04it/s]
 39%|      | 31/79 [00:02<00:03, 15.35it/s]
 43%|     | 34/79 [00:02<00:02, 17.51it/s]
 47%|     | 37/79 [00:02<00:02, 19.22it/s]
 51%|     | 40/79 [00:02<00:01, 20.64it/s]
 54%|    | 43/79 [00:02<00:01, 21.84it/s]
 58%|    | 46/79 [00:02<00:01, 22.62it/s]
 62%|   | 49/79 [00:02<00:01, 23.26it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:17,  3.88it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.81it/s]
 28%|       | 22/79 [00:01<00:06,  8.61it/s]
 32%|      | 25/79 [00:01<00:05, 10.73it/s]
 35%|      | 28/79 [00:02<00:03, 12.90it/s]
 39%|      | 31/79 [00:02<00:03, 14.97it/s]
 43%|     | 34/79 [00:02<00:02, 17.02it/s]
 47%|     | 37/79 [00:02<00:02, 18.71it/s]
 51%|     | 40/79 [00:02<00:01, 20.21it/s]
 54%|    | 43/79 [00:02<00:01, 21.27it/s]
 58%|    | 46/79 [00:02<00:01, 22.20it/s]
 62%|   | 49/79 [00:02<00:01, 22.88it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.36it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.91it/s]
 32%|      | 25/79 [00:01<00:04, 11.02it/s]
 35%|      | 28/79 [00:02<00:03, 13.19it/s]
 39%|      | 31/79 [00:02<00:03, 15.29it/s]
 43%|     | 34/79 [00:02<00:02, 17.28it/s]
 47%|     | 37/79 [00:02<00:02, 18.54it/s]
 51%|     | 40/79 [00:02<00:01, 19.98it/s]
 54%|    | 43/79 [00:02<00:01, 20.97it/s]
 58%|    | 46/79 [00:02<00:01, 22.04it/s]
 62%|   | 49/79 [00:02<00:01, 22.80it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:11,  5.25it/s]
 24%|       | 19/79 [00:01<00:08,  6.85it/s]
 28%|       | 22/79 [00:01<00:06,  8.72it/s]
 32%|      | 25/79 [00:01<00:04, 10.84it/s]
 35%|      | 28/79 [00:02<00:03, 13.06it/s]
 39%|      | 31/79 [00:02<00:03, 15.10it/s]
 43%|     | 34/79 [00:02<00:02, 17.13it/s]
 47%|     | 37/79 [00:02<00:02, 18.99it/s]
 51%|     | 40/79 [00:02<00:01, 20.25it/s]
 54%|    | 43/79 [00:02<00:01, 21.21it/s]
 58%|    | 46/79 [00:02<00:01, 21.97it/s]
 62%|   | 49/79 [00:02<00:01, 22.61it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.95it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.87it/s]
 28%|       | 22/79 [00:01<00:06,  8.77it/s]
 32%|      | 25/79 [00:01<00:04, 10.87it/s]
 35%|      | 28/79 [00:02<00:03, 13.08it/s]
 39%|      | 31/79 [00:02<00:03, 15.27it/s]
 43%|     | 34/79 [00:02<00:02, 17.01it/s]
 47%|     | 37/79 [00:02<00:02, 18.73it/s]
 51%|     | 40/79 [00:02<00:01, 20.02it/s]
 54%|    | 43/79 [00:02<00:01, 21.13it/s]
 58%|    | 46/79 [00:02<00:01, 22.01it/s]
 62%|   | 49/79 [00:02<00:01, 23.01it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.46it/s]
 24%|       | 19/79 [00:01<00:08,  7.12it/s]
 28%|       | 22/79 [00:01<00:06,  9.06it/s]
 32%|      | 25/79 [00:01<00:04, 11.12it/s]
 35%|      | 28/79 [00:02<00:03, 13.27it/s]
 39%|      | 31/79 [00:02<00:03, 15.40it/s]
 43%|     | 34/79 [00:02<00:02, 17.19it/s]
 47%|     | 37/79 [00:02<00:02, 18.99it/s]
 51%|     | 40/79 [00:02<00:01, 20.27it/s]
 54%|    | 43/79 [00:02<00:01, 21.06it/s]
 58%|    | 46/79 [00:02<00:01, 20.69it/s]
 62%|   | 49/79 [00:02<00:01, 20.59it/s]
 66%|   | 52/79 [00:03<00:01, 25.27it/s]
 70%|   | 55/79 [00:02<00:00, 25.89it/s]
 73%|  | 58/79 [00:02<00:00, 25.96it/s]
 77%|  | 61/79 [00:03<00:00, 26.16it/s]
 81%|  | 64/79 [00:03<00:00, 26.33it/s]
 85%| | 67/79 [00:03<00:00, 26.28it/s]
 89%| | 70/79 [00:03<00:00, 26.22it/s]
 92%|| 73/79 [00:03<00:00, 26.22it/s]
 96%|| 76/79 [00:03<00:00, 26.74it/s]
100%|| 79/79 [00:03<00:00, 27.46it/s]
, 24.68it/s]
 70%|   | 55/79 [00:02<00:00, 25.10it/s]
 73%|  | 58/79 [00:03<00:00, 25.33it/s]
 77%|  | 61/79 [00:03<00:00, 25.59it/s]
 81%|  | 64/79 [00:03<00:00, 25.65it/s]
 85%| | 67/79 [00:03<00:00, 25.67it/s]
 89%| | 70/79 [00:03<00:00, 25.57it/s]
 92%|| 73/79 [00:03<00:00, 25.88it/s]
 96%|| 76/79 [00:03<00:00, 26.45it/s]
100%|| 79/79 [00:03<00:00, 27.29it/s]
, 24.64it/s]
 70%|   | 55/79 [00:02<00:00, 24.95it/s]
 73%|  | 58/79 [00:03<00:00, 25.21it/s]
 77%|  | 61/79 [00:03<00:00, 25.32it/s]
 81%|  | 64/79 [00:03<00:00, 25.32it/s]
 85%| | 67/79 [00:03<00:00, 25.36it/s]
 89%| | 70/79 [00:03<00:00, 25.57it/s]
 92%|| 73/79 [00:03<00:00, 25.50it/s]
 96%|| 76/79 [00:03<00:00, 26.26it/s]
100%|| 79/79 [00:03<00:00, 27.05it/s]
, 24.12it/s]
 70%|   | 55/79 [00:02<00:00, 24.56it/s]
 73%|  | 58/79 [00:03<00:00, 24.57it/s]
 77%|  | 61/79 [00:03<00:00, 24.89it/s]
 81%|  | 64/79 [00:03<00:00, 25.16it/s]
 85%| | 67/79 [00:03<00:00, 25.23it/s]
 89%| | 70/79 [00:03<00:00, 24.97it/s]
 92%|| 73/79 [00:03<00:00, 25.62it/s]
 96%|| 76/79 [00:03<00:00, 26.25it/s]
100%|| 79/79 [00:03<00:00, 27.12it/s]
, 24.34it/s]
 70%|   | 55/79 [00:02<00:00, 24.64it/s]
 73%|  | 58/79 [00:03<00:00, 25.01it/s]
 77%|  | 61/79 [00:03<00:00, 25.04it/s]
 81%|  | 64/79 [00:03<00:00, 25.26it/s]
 85%| | 67/79 [00:03<00:00, 25.36it/s]
 89%| | 70/79 [00:03<00:00, 25.49it/s]
 92%|| 73/79 [00:03<00:00, 25.83it/s]
 96%|| 76/79 [00:03<00:00, 26.31it/s]
100%|| 79/79 [00:03<00:00, 27.13it/s]
, 24.34it/s]
 70%|   | 55/79 [00:02<00:00, 24.65it/s]
 73%|  | 58/79 [00:03<00:00, 24.83it/s]
 77%|  | 61/79 [00:03<00:00, 25.15it/s]
 81%|  | 64/79 [00:03<00:00, 25.20it/s]
 85%| | 67/79 [00:03<00:00, 25.58it/s]
 89%| | 70/79 [00:03<00:00, 25.84it/s]
 92%|| 73/79 [00:03<00:00, 26.09it/s]
 96%|| 76/79 [00:03<00:00, 26.63it/s]
100%|| 79/79 [00:03<00:00, 27.46it/s]
83it/s]
 68%|   | 54/79 [00:02<00:00, 25.37it/s]
 72%|  | 57/79 [00:03<00:00, 25.07it/s]
 76%|  | 60/79 [00:03<00:00, 25.16it/s]
 80%|  | 63/79 [00:03<00:00, 24.95it/s]
 84%| | 66/79 [00:03<00:00, 25.05it/s]
 87%| | 69/79 [00:03<00:00, 24.93it/s]
 91%| | 72/79 [00:03<00:00, 25.09it/s]
 95%|| 75/79 [00:03<00:00, 25.86it/s]
 99%|| 78/79 [00:03<00:00, 26.94it/s]
100%|| 79/79 [00:03<00:00, 20.11it/s]
, 24.56it/s]
 70%|   | 55/79 [00:02<00:00, 25.07it/s]
 73%|  | 58/79 [00:03<00:00, 25.41it/s]
 77%|  | 61/79 [00:03<00:00, 25.49it/s]
 81%|  | 64/79 [00:03<00:00, 25.33it/s]
 85%| | 67/79 [00:03<00:00, 25.68it/s]
 89%| | 70/79 [00:03<00:00, 25.61it/s]
 92%|| 73/79 [00:03<00:00, 25.97it/s]
 96%|| 76/79 [00:03<00:00, 26.33it/s]
100%|| 79/79 [00:03<00:00, 27.28it/s]
, 23.82it/s]
 70%|   | 55/79 [00:03<00:00, 24.28it/s]
 73%|  | 58/79 [00:03<00:00, 24.36it/s]
 77%|  | 61/79 [00:03<00:00, 24.79it/s]
 81%|  | 64/79 [00:03<00:00, 24.88it/s]
 85%| | 67/79 [00:03<00:00, 24.89it/s]
 89%| | 70/79 [00:03<00:00, 24.92it/s]
 92%|| 73/79 [00:03<00:00, 25.41it/s]
 96%|| 76/79 [00:03<00:00, 26.19it/s]
100%|| 79/79 [00:03<00:00, 27.17it/s]
, 24.54it/s]
 70%|   | 55/79 [00:03<00:00, 24.49it/s]
 73%|  | 58/79 [00:03<00:00, 24.88it/s]
 77%|  | 61/79 [00:03<00:00, 25.13it/s]
 81%|  | 64/79 [00:03<00:00, 25.38it/s]
 85%| | 67/79 [00:03<00:00, 25.34it/s]
 89%| | 70/79 [00:03<00:00, 25.47it/s]
 92%|| 73/79 [00:03<00:00, 26.00it/s]
 96%|| 76/79 [00:03<00:00, 26.63it/s]
100%|| 79/79 [00:03<00:00, 27.36it/s]
, 23.82it/s]
 70%|   | 55/79 [00:02<00:00, 24.43it/s]
 73%|  | 58/79 [00:03<00:00, 24.63it/s]
 77%|  | 61/79 [00:03<00:00, 24.46it/s]
 81%|  | 64/79 [00:03<00:00, 24.67it/s]
 85%| | 67/79 [00:03<00:00, 24.79it/s]
 89%| | 70/79 [00:03<00:00, 24.66it/s]
 92%|| 73/79 [00:03<00:00, 25.25it/s]
 96%|| 76/79 [00:03<00:00, 26.01it/s]
100%|| 79/79 [00:03<00:00, 27.03it/s]
, 24.73it/s]
 70%|   | 55/79 [00:02<00:00, 25.00it/s]
 73%|  | 58/79 [00:03<00:00, 25.29it/s]
 77%|  | 61/79 [00:03<00:00, 25.37it/s]
 81%|  | 64/79 [00:03<00:00, 25.08it/s]
 85%| | 67/79 [00:03<00:00, 25.32it/s]
 89%| | 70/79 [00:03<00:00, 25.19it/s]
 92%|| 73/79 [00:03<00:00, 25.58it/s]
 96%|| 76/79 [00:03<00:00, 26.16it/s]
100%|| 79/79 [00:03<00:00, 26.89it/s]
, 24.37it/s]
 70%|   | 55/79 [00:02<00:00, 24.42it/s]
 73%|  | 58/79 [00:03<00:00, 24.83it/s]
 77%|  | 61/79 [00:03<00:00, 25.15it/s]
 81%|  | 64/79 [00:03<00:00, 25.25it/s]
 85%| | 67/79 [00:03<00:00, 25.33it/s]
 89%| | 70/79 [00:03<00:00, 25.07it/s]
 92%|| 73/79 [00:03<00:00, 25.65it/s]
 96%|| 76/79 [00:03<00:00, 26.05it/s]
100%|| 79/79 [00:03<00:00, 27.05it/s]
, 24.39it/s]
 70%|   | 55/79 [00:02<00:00, 24.73it/s]
 73%|  | 58/79 [00:03<00:00, 24.92it/s]
 77%|  | 61/79 [00:03<00:00, 25.23it/s]
 81%|  | 64/79 [00:03<00:00, 25.45it/s]
 85%| | 67/79 [00:03<00:00, 25.43it/s]
 89%| | 70/79 [00:03<00:00, 25.46it/s]
 92%|| 73/79 [00:03<00:00, 25.58it/s]
 96%|| 76/79 [00:03<00:00, 26.25it/s]
100%|| 79/79 [00:03<00:00, 26.36it/s]
23it/s]
 68%|   | 54/79 [00:03<00:01, 24.54it/s]
 72%|  | 57/79 [00:03<00:00, 25.09it/s]
 76%|  | 60/79 [00:03<00:00, 25.55it/s]
 80%|  | 63/79 [00:03<00:00, 25.67it/s]
 84%| | 66/79 [00:03<00:00, 25.94it/s]
 87%| | 69/79 [00:03<00:00, 25.87it/s]
 91%| | 72/79 [00:03<00:00, 25.79it/s]
 95%|| 75/79 [00:03<00:00, 26.44it/s]
 99%|| 78/79 [00:03<00:00, 27.29it/s]
100%|| 79/79 [00:04<00:00, 19.72it/s]
, 24.19it/s]
 70%|   | 55/79 [00:02<00:00, 24.61it/s]
 73%|  | 58/79 [00:03<00:00, 24.61it/s]
 77%|  | 61/79 [00:03<00:00, 24.78it/s]
 81%|  | 64/79 [00:03<00:00, 24.72it/s]
 85%| | 67/79 [00:03<00:00, 24.96it/s]
 89%| | 70/79 [00:03<00:00, 24.90it/s]
 92%|| 73/79 [00:03<00:00, 25.26it/s]
 96%|| 76/79 [00:03<00:00, 25.88it/s]
100%|| 79/79 [00:03<00:00, 26.83it/s]
, 24.26it/s]
 70%|   | 55/79 [00:03<00:00, 24.52it/s]
 73%|  | 58/79 [00:03<00:00, 24.82it/s]
 77%|  | 61/79 [00:03<00:00, 24.84it/s]
 81%|  | 64/79 [00:03<00:00, 24.96it/s]
 85%| | 67/79 [00:03<00:00, 25.27it/s]
 89%| | 70/79 [00:03<00:00, 25.02it/s]
 92%|| 73/79 [00:03<00:00, 25.59it/s]
 96%|| 76/79 [00:03<00:00, 26.27it/s]
100%|| 79/79 [00:03<00:00, 27.28it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:00, 24.10it/s]
 73%|  | 58/79 [00:03<00:00, 24.30it/s]
 77%|  | 61/79 [00:03<00:00, 24.73it/s]
 81%|  | 64/79 [00:03<00:00, 22.72it/s]
 85%| | 67/79 [00:03<00:00, 23.35it/s]
 89%| | 70/79 [00:03<00:00, 23.78it/s]
 92%|| 73/79 [00:03<00:00, 24.65it/s]
 96%|| 76/79 [00:03<00:00, 25.48it/s]
100%|| 79/79 [00:03<00:00, 26.57it/s]
, 24.11it/s]
 70%|   | 55/79 [00:03<00:00, 24.41it/s]
 73%|  | 58/79 [00:03<00:00, 24.69it/s]
 77%|  | 61/79 [00:03<00:00, 24.67it/s]
 81%|  | 64/79 [00:03<00:00, 24.49it/s]
 85%| | 67/79 [00:03<00:00, 24.74it/s]
 89%| | 70/79 [00:03<00:00, 24.91it/s]
 92%|| 73/79 [00:03<00:00, 25.21it/s]
 96%|| 76/79 [00:03<00:00, 25.81it/s]
100%|| 79/79 [00:03<00:00, 26.63it/s]
, 23.69it/s]
 70%|   | 55/79 [00:03<00:01, 23.86it/s]
 73%|  | 58/79 [00:03<00:00, 24.11it/s]
 77%|  | 61/79 [00:03<00:00, 23.89it/s]
 81%|  | 64/79 [00:03<00:00, 24.43it/s]
 85%| | 67/79 [00:03<00:00, 24.66it/s]
 89%| | 70/79 [00:03<00:00, 24.88it/s]
 92%|| 73/79 [00:03<00:00, 25.13it/s]
 96%|| 76/79 [00:03<00:00, 25.77it/s]
100%|| 79/79 [00:03<00:00, 26.57it/s]
, 24.25it/s]
 70%|   | 55/79 [00:03<00:00, 24.22it/s]
 73%|  | 58/79 [00:03<00:00, 24.48it/s]
 77%|  | 61/79 [00:03<00:00, 25.02it/s]
 81%|  | 64/79 [00:03<00:00, 25.18it/s]
 85%| | 67/79 [00:03<00:00, 25.43it/s]
 89%| | 70/79 [00:03<00:00, 25.43it/s]
 92%|| 73/79 [00:03<00:00, 25.85it/s]
 96%|| 76/79 [00:03<00:00, 26.31it/s]
100%|| 79/79 [00:03<00:00, 27.25it/s]
, 23.95it/s]
 70%|   | 55/79 [00:03<00:00, 24.49it/s]
 73%|  | 58/79 [00:03<00:00, 24.76it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 25.17it/s]
 85%| | 67/79 [00:03<00:00, 25.30it/s]
 89%| | 70/79 [00:03<00:00, 25.28it/s]
 92%|| 73/79 [00:03<00:00, 25.50it/s]
 96%|| 76/79 [00:03<00:00, 26.29it/s]
100%|| 79/79 [00:03<00:00, 26.79it/s]
, 23.84it/s]
 70%|   | 55/79 [00:03<00:00, 24.06it/s]
 73%|  | 58/79 [00:03<00:00, 24.31it/s]
 77%|  | 61/79 [00:03<00:00, 24.59it/s]
 81%|  | 64/79 [00:03<00:00, 24.75it/s]
 85%| | 67/79 [00:03<00:00, 24.75it/s]
 89%| | 70/79 [00:03<00:00, 25.10it/s]
 92%|| 73/79 [00:03<00:00, 25.03it/s]
 96%|| 76/79 [00:03<00:00, 25.96it/s]
100%|| 79/79 [00:03<00:00, 26.95it/s]
, 22.90it/s]
 70%|   | 55/79 [00:03<00:01, 23.41it/s]
 73%|  | 58/79 [00:03<00:00, 23.86it/s]
 77%|  | 61/79 [00:03<00:00, 24.00it/s]
 81%|  | 64/79 [00:03<00:00, 24.17it/s]
 85%| | 67/79 [00:03<00:00, 24.43it/s]
 89%| | 70/79 [00:03<00:00, 24.45it/s]
 92%|| 73/79 [00:03<00:00, 24.95it/s]
 96%|| 76/79 [00:03<00:00, 25.71it/s]
100%|| 79/79 [00:03<00:00, 26.52it/s]
, 23.66it/s]
 70%|   | 55/79 [00:03<00:00, 24.01it/s]
 73%|  | 58/79 [00:03<00:00, 24.32it/s]
 77%|  | 61/79 [00:03<00:00, 24.10it/s]
 81%|  | 64/79 [00:03<00:00, 24.37it/s]
 85%| | 67/79 [00:03<00:00, 24.62it/s]
 89%| | 70/79 [00:03<00:00, 24.75it/s]
 92%|| 73/79 [00:03<00:00, 25.06it/s]
 96%|| 76/79 [00:03<00:00, 25.85it/s]
100%|| 79/79 [00:04<00:00, 26.81it/s]
, 23.73it/s]
 70%|   | 55/79 [00:03<00:00, 24.35it/s]
 73%|  | 58/79 [00:03<00:00, 24.48it/s]
 77%|  | 61/79 [00:03<00:00, 24.74it/s]
 81%|  | 64/79 [00:03<00:00, 25.03it/s]
 85%| | 67/79 [00:03<00:00, 25.15it/s]
 89%| | 70/79 [00:03<00:00, 25.12it/s]
 92%|| 73/79 [00:03<00:00, 25.34it/s]
 96%|| 76/79 [00:03<00:00, 25.70it/s]
100%|| 79/79 [00:04<00:00, 26.27it/s]
, 23.37it/s]
 70%|   | 55/79 [00:03<00:01, 23.47it/s]
 73%|  | 58/79 [00:03<00:00, 23.87it/s]
 77%|  | 61/79 [00:03<00:00, 24.18it/s]
 81%|  | 64/79 [00:03<00:00, 24.25it/s]
 85%| | 67/79 [00:03<00:00, 24.35it/s]
 89%| | 70/79 [00:03<00:00, 24.49it/s]
 92%|| 73/79 [00:03<00:00, 24.92it/s]
 96%|| 76/79 [00:03<00:00, 25.65it/s]
100%|| 79/79 [00:04<00:00, 26.55it/s]
, 22.93it/s]
 70%|   | 55/79 [00:03<00:01, 23.22it/s]
 73%|  | 58/79 [00:03<00:00, 23.82it/s]
 77%|  | 61/79 [00:03<00:00, 24.39it/s]
 81%|  | 64/79 [00:03<00:00, 24.55it/s]
 85%| | 67/79 [00:03<00:00, 24.50it/s]
 89%| | 70/79 [00:03<00:00, 24.43it/s]
 92%|| 73/79 [00:03<00:00, 24.88it/s]
 96%|| 76/79 [00:03<00:00, 25.48it/s]
100%|| 79/79 [00:04<00:00, 26.35it/s]
, 23.41it/s]
 70%|   | 55/79 [00:03<00:01, 23.66it/s]
 73%|  | 58/79 [00:03<00:00, 23.90it/s]
 77%|  | 61/79 [00:03<00:00, 24.09it/s]
 81%|  | 64/79 [00:03<00:00, 24.45it/s]
 85%| | 67/79 [00:03<00:00, 24.28it/s]
 89%| | 70/79 [00:03<00:00, 24.39it/s]
 92%|| 73/79 [00:03<00:00, 24.78it/s]
 96%|| 76/79 [00:03<00:00, 25.46it/s]
100%|| 79/79 [00:04<00:00, 26.37it/s]
27it/s]
 68%|   | 54/79 [00:03<00:01, 23.49it/s]
 72%|  | 57/79 [00:03<00:00, 23.80it/s]
 76%|  | 60/79 [00:03<00:00, 23.99it/s]
 80%|  | 63/79 [00:03<00:00, 24.03it/s]
 84%| | 66/79 [00:03<00:00, 24.31it/s]
 87%| | 69/79 [00:03<00:00, 24.58it/s]
 91%| | 72/79 [00:03<00:00, 24.42it/s]
 95%|| 75/79 [00:03<00:00, 25.21it/s]
 99%|| 78/79 [00:04<00:00, 25.77it/s]
100%|| 79/79 [00:04<00:00, 19.00it/s]
, 23.19it/s]
 70%|   | 55/79 [00:03<00:01, 23.47it/s]
 73%|  | 58/79 [00:03<00:00, 23.85it/s]
 77%|  | 61/79 [00:03<00:00, 24.04it/s]
 81%|  | 64/79 [00:03<00:00, 23.94it/s]
 85%| | 67/79 [00:03<00:00, 23.91it/s]
 89%| | 70/79 [00:03<00:00, 23.93it/s]
 92%|| 73/79 [00:03<00:00, 24.32it/s]
 96%|| 76/79 [00:03<00:00, 25.03it/s]
100%|| 79/79 [00:04<00:00, 25.91it/s]
, 21.55it/s]
 70%|   | 55/79 [00:03<00:01, 21.86it/s]
 73%|  | 58/79 [00:03<00:00, 22.26it/s]
 77%|  | 61/79 [00:03<00:00, 22.80it/s]
 81%|  | 64/79 [00:03<00:00, 23.04it/s]
 85%| | 67/79 [00:03<00:00, 23.31it/s]
 89%| | 70/79 [00:03<00:00, 23.29it/s]
 92%|| 73/79 [00:03<00:00, 24.02it/s]
 96%|| 76/79 [00:04<00:00, 24.89it/s]
100%|| 79/79 [00:04<00:00, 25.84it/s]
2020-06-23 17:30:05,429 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.220458 (0.02701093292236328 s / img per device, on 32 devices)
2020-06-23 17:30:05,451 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:30:05,451 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:30:05,472 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592958616121, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 7, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592958616122, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 7}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:30:18,108 maskrcnn_benchmark.trainer INFO: eta: 1:12:51  iter: 5520  loss: 0.6126 (0.8168)  loss_classifier: 0.2342 (0.3047)  loss_box_reg: 0.1056 (0.1300)  loss_mask: 0.2768 (0.3178)  loss_objectness: 0.0206 (0.0424)  loss_rpn_box_reg: 0.0092 (0.0219)  time: 0.1103 (0.1268)  data: 0.0015 (0.0192)  lr: 0.160000  max mem: 5155
2020-06-23 17:30:20,272 maskrcnn_benchmark.trainer INFO: eta: 1:12:46  iter: 5540  loss: 0.5604 (0.8160)  loss_classifier: 0.2060 (0.3043)  loss_box_reg: 0.0901 (0.1299)  loss_mask: 0.2588 (0.3176)  loss_objectness: 0.0240 (0.0424)  loss_rpn_box_reg: 0.0088 (0.0218)  time: 0.1079 (0.1267)  data: 0.0014 (0.0191)  lr: 0.160000  max mem: 5155
2020-06-23 17:30:22,426 maskrcnn_benchmark.trainer INFO: eta: 1:12:41  iter: 5560  loss: 0.6779 (0.8156)  loss_classifier: 0.2537 (0.3042)  loss_box_reg: 0.0974 (0.1298)  loss_mask: 0.2672 (0.3174)  loss_objectness: 0.0313 (0.0424)  loss_rpn_box_reg: 0.0141 (0.0218)  time: 0.1076 (0.1266)  data: 0.0014 (0.0190)  lr: 0.160000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 17:30:24,604 maskrcnn_benchmark.trainer INFO: eta: 1:12:36  iter: 5580  loss: 0.7145 (0.8154)  loss_classifier: 0.2587 (0.3041)  loss_box_reg: 0.1195 (0.1298)  loss_mask: 0.2838 (0.3173)  loss_objectness: 0.0225 (0.0424)  loss_rpn_box_reg: 0.0168 (0.0219)  time: 0.1092 (0.1266)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5155
DONE (t=0.94s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 17:30:26,783 maskrcnn_benchmark.trainer INFO: eta: 1:12:32  iter: 5600  loss: 0.6805 (0.8150)  loss_classifier: 0.2284 (0.3039)  loss_box_reg: 0.1092 (0.1298)  loss_mask: 0.2873 (0.3171)  loss_objectness: 0.0201 (0.0423)  loss_rpn_box_reg: 0.0079 (0.0218)  time: 0.1085 (0.1265)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5155
DONE (t=1.85s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.27882
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.48524
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.29257
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.16326
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.30838
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.35218
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25891
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.42482
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44857
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.28671
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.48913
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.55522
2020-06-23 17:30:28,945 maskrcnn_benchmark.trainer INFO: eta: 1:12:27  iter: 5620  loss: 0.6054 (0.8143)  loss_classifier: 0.2136 (0.3036)  loss_box_reg: 0.0858 (0.1297)  loss_mask: 0.2590 (0.3169)  loss_objectness: 0.0173 (0.0423)  loss_rpn_box_reg: 0.0062 (0.0218)  time: 0.1081 (0.1264)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5155
2020-06-23 17:30:31,121 maskrcnn_benchmark.trainer INFO: eta: 1:12:22  iter: 5640  loss: 0.7613 (0.8140)  loss_classifier: 0.2778 (0.3035)  loss_box_reg: 0.1356 (0.1297)  loss_mask: 0.3033 (0.3168)  loss_objectness: 0.0251 (0.0422)  loss_rpn_box_reg: 0.0116 (0.0218)  time: 0.1079 (0.1264)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5155
2020-06-23 17:30:33,301 maskrcnn_benchmark.trainer INFO: eta: 1:12:17  iter: 5660  loss: 0.5905 (0.8135)  loss_classifier: 0.2185 (0.3033)  loss_box_reg: 0.1003 (0.1296)  loss_mask: 0.2414 (0.3166)  loss_objectness: 0.0208 (0.0422)  loss_rpn_box_reg: 0.0136 (0.0218)  time: 0.1083 (0.1263)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:30:35,490 maskrcnn_benchmark.trainer INFO: eta: 1:12:13  iter: 5680  loss: 0.6266 (0.8128)  loss_classifier: 0.2240 (0.3030)  loss_box_reg: 0.0884 (0.1295)  loss_mask: 0.2523 (0.3164)  loss_objectness: 0.0163 (0.0422)  loss_rpn_box_reg: 0.0111 (0.0217)  time: 0.1088 (0.1263)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5155
DONE (t=2.38s)
2020-06-23 17:30:37,646 maskrcnn_benchmark.trainer INFO: eta: 1:12:08  iter: 5700  loss: 0.7542 (0.8125)  loss_classifier: 0.2497 (0.3028)  loss_box_reg: 0.1108 (0.1294)  loss_mask: 0.2699 (0.3163)  loss_objectness: 0.0225 (0.0422)  loss_rpn_box_reg: 0.0094 (0.0217)  time: 0.1081 (0.1262)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5155
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:30:39,801 maskrcnn_benchmark.trainer INFO: eta: 1:12:03  iter: 5720  loss: 0.6250 (0.8120)  loss_classifier: 0.2179 (0.3026)  loss_box_reg: 0.0927 (0.1294)  loss_mask: 0.2852 (0.3162)  loss_objectness: 0.0216 (0.0422)  loss_rpn_box_reg: 0.0082 (0.0217)  time: 0.1070 (0.1261)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5155
DONE (t=3.03s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.26811
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.45974
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.27614
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11499
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.29546
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.39002
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25330
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.40142
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.42158
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.25081
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.46625
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.53321
2020-06-23 17:30:41,162 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.2788204341794686, segm mAP: 0.26810581531869576
:::MLLOG {"namespace": "", "time_ms": 1592958641163, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.2788204341794686, "SEGM": 0.26810581531869576}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 6}}
:::MLLOG {"namespace": "", "time_ms": 1592958641163, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 6}}
2020-06-23 17:30:42,142 maskrcnn_benchmark.trainer INFO: eta: 1:12:00  iter: 5740  loss: 0.7275 (0.8117)  loss_classifier: 0.2828 (0.3025)  loss_box_reg: 0.1092 (0.1293)  loss_mask: 0.2724 (0.3160)  loss_objectness: 0.0241 (0.0421)  loss_rpn_box_reg: 0.0140 (0.0217)  time: 0.1086 (0.1261)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5155
2020-06-23 17:30:44,308 maskrcnn_benchmark.trainer INFO: eta: 1:11:55  iter: 5760  loss: 0.6091 (0.8111)  loss_classifier: 0.2069 (0.3022)  loss_box_reg: 0.0996 (0.1292)  loss_mask: 0.2577 (0.3159)  loss_objectness: 0.0176 (0.0421)  loss_rpn_box_reg: 0.0076 (0.0217)  time: 0.1073 (0.1260)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5155
2020-06-23 17:30:46,476 maskrcnn_benchmark.trainer INFO: eta: 1:11:51  iter: 5780  loss: 0.6864 (0.8108)  loss_classifier: 0.2573 (0.3021)  loss_box_reg: 0.1130 (0.1292)  loss_mask: 0.2808 (0.3158)  loss_objectness: 0.0237 (0.0421)  loss_rpn_box_reg: 0.0121 (0.0217)  time: 0.1086 (0.1260)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5155
2020-06-23 17:30:48,655 maskrcnn_benchmark.trainer INFO: eta: 1:11:46  iter: 5800  loss: 0.7406 (0.8105)  loss_classifier: 0.2680 (0.3020)  loss_box_reg: 0.1331 (0.1292)  loss_mask: 0.2665 (0.3156)  loss_objectness: 0.0265 (0.0420)  loss_rpn_box_reg: 0.0095 (0.0217)  time: 0.1081 (0.1259)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5155
2020-06-23 17:30:50,811 maskrcnn_benchmark.trainer INFO: eta: 1:11:41  iter: 5820  loss: 0.7680 (0.8104)  loss_classifier: 0.2927 (0.3019)  loss_box_reg: 0.1352 (0.1292)  loss_mask: 0.2899 (0.3155)  loss_objectness: 0.0332 (0.0420)  loss_rpn_box_reg: 0.0169 (0.0217)  time: 0.1072 (0.1259)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5155
2020-06-23 17:30:52,992 maskrcnn_benchmark.trainer INFO: eta: 1:11:37  iter: 5840  loss: 0.7148 (0.8100)  loss_classifier: 0.2549 (0.3017)  loss_box_reg: 0.1121 (0.1291)  loss_mask: 0.2727 (0.3154)  loss_objectness: 0.0209 (0.0420)  loss_rpn_box_reg: 0.0092 (0.0217)  time: 0.1081 (0.1258)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5155
2020-06-23 17:30:55,158 maskrcnn_benchmark.trainer INFO: eta: 1:11:32  iter: 5860  loss: 0.8534 (0.8099)  loss_classifier: 0.3059 (0.3018)  loss_box_reg: 0.1342 (0.1291)  loss_mask: 0.2864 (0.3153)  loss_objectness: 0.0295 (0.0420)  loss_rpn_box_reg: 0.0147 (0.0217)  time: 0.1080 (0.1257)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5155
2020-06-23 17:30:57,305 maskrcnn_benchmark.trainer INFO: eta: 1:11:28  iter: 5880  loss: 0.6817 (0.8095)  loss_classifier: 0.2392 (0.3016)  loss_box_reg: 0.1245 (0.1291)  loss_mask: 0.2853 (0.3152)  loss_objectness: 0.0229 (0.0420)  loss_rpn_box_reg: 0.0092 (0.0217)  time: 0.1072 (0.1257)  data: 0.0015 (0.0181)  lr: 0.160000  max mem: 5155
2020-06-23 17:30:59,482 maskrcnn_benchmark.trainer INFO: eta: 1:11:23  iter: 5900  loss: 0.5889 (0.8088)  loss_classifier: 0.2141 (0.3012)  loss_box_reg: 0.0806 (0.1290)  loss_mask: 0.2560 (0.3150)  loss_objectness: 0.0198 (0.0419)  loss_rpn_box_reg: 0.0069 (0.0217)  time: 0.1085 (0.1256)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:01,648 maskrcnn_benchmark.trainer INFO: eta: 1:11:19  iter: 5920  loss: 0.6992 (0.8085)  loss_classifier: 0.2724 (0.3012)  loss_box_reg: 0.1114 (0.1290)  loss_mask: 0.2882 (0.3149)  loss_objectness: 0.0241 (0.0418)  loss_rpn_box_reg: 0.0082 (0.0217)  time: 0.1077 (0.1256)  data: 0.0013 (0.0180)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:03,809 maskrcnn_benchmark.trainer INFO: eta: 1:11:14  iter: 5940  loss: 0.6875 (0.8080)  loss_classifier: 0.1926 (0.3009)  loss_box_reg: 0.1018 (0.1289)  loss_mask: 0.2935 (0.3148)  loss_objectness: 0.0215 (0.0418)  loss_rpn_box_reg: 0.0096 (0.0216)  time: 0.1071 (0.1255)  data: 0.0013 (0.0179)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:05,962 maskrcnn_benchmark.trainer INFO: eta: 1:11:10  iter: 5960  loss: 0.7360 (0.8079)  loss_classifier: 0.2891 (0.3009)  loss_box_reg: 0.1113 (0.1289)  loss_mask: 0.2927 (0.3147)  loss_objectness: 0.0273 (0.0418)  loss_rpn_box_reg: 0.0118 (0.0217)  time: 0.1074 (0.1254)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:08,113 maskrcnn_benchmark.trainer INFO: eta: 1:11:05  iter: 5980  loss: 0.8145 (0.8078)  loss_classifier: 0.2728 (0.3008)  loss_box_reg: 0.1259 (0.1289)  loss_mask: 0.2796 (0.3146)  loss_objectness: 0.0288 (0.0418)  loss_rpn_box_reg: 0.0144 (0.0217)  time: 0.1070 (0.1254)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:10,276 maskrcnn_benchmark.trainer INFO: eta: 1:11:01  iter: 6000  loss: 0.7652 (0.8077)  loss_classifier: 0.2639 (0.3008)  loss_box_reg: 0.1148 (0.1289)  loss_mask: 0.2801 (0.3145)  loss_objectness: 0.0278 (0.0418)  loss_rpn_box_reg: 0.0178 (0.0217)  time: 0.1072 (0.1253)  data: 0.0013 (0.0178)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:12,409 maskrcnn_benchmark.trainer INFO: eta: 1:10:56  iter: 6020  loss: 0.6923 (0.8072)  loss_classifier: 0.2636 (0.3006)  loss_box_reg: 0.1094 (0.1288)  loss_mask: 0.2664 (0.3144)  loss_objectness: 0.0192 (0.0417)  loss_rpn_box_reg: 0.0074 (0.0217)  time: 0.1070 (0.1253)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:14,565 maskrcnn_benchmark.trainer INFO: eta: 1:10:52  iter: 6040  loss: 0.6898 (0.8069)  loss_classifier: 0.2533 (0.3004)  loss_box_reg: 0.1095 (0.1288)  loss_mask: 0.2902 (0.3143)  loss_objectness: 0.0272 (0.0417)  loss_rpn_box_reg: 0.0142 (0.0217)  time: 0.1070 (0.1252)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:16,696 maskrcnn_benchmark.trainer INFO: eta: 1:10:47  iter: 6060  loss: 0.6884 (0.8065)  loss_classifier: 0.2370 (0.3002)  loss_box_reg: 0.1165 (0.1287)  loss_mask: 0.2892 (0.3142)  loss_objectness: 0.0209 (0.0417)  loss_rpn_box_reg: 0.0121 (0.0217)  time: 0.1059 (0.1251)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:18,850 maskrcnn_benchmark.trainer INFO: eta: 1:10:42  iter: 6080  loss: 0.7440 (0.8061)  loss_classifier: 0.2356 (0.3000)  loss_box_reg: 0.1091 (0.1287)  loss_mask: 0.2807 (0.3141)  loss_objectness: 0.0243 (0.0417)  loss_rpn_box_reg: 0.0109 (0.0217)  time: 0.1070 (0.1251)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:21,004 maskrcnn_benchmark.trainer INFO: eta: 1:10:38  iter: 6100  loss: 0.8079 (0.8061)  loss_classifier: 0.2697 (0.3000)  loss_box_reg: 0.0973 (0.1287)  loss_mask: 0.2887 (0.3140)  loss_objectness: 0.0244 (0.0417)  loss_rpn_box_reg: 0.0116 (0.0217)  time: 0.1075 (0.1250)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:23,180 maskrcnn_benchmark.trainer INFO: eta: 1:10:34  iter: 6120  loss: 0.7792 (0.8061)  loss_classifier: 0.2891 (0.3000)  loss_box_reg: 0.1483 (0.1288)  loss_mask: 0.2991 (0.3140)  loss_objectness: 0.0240 (0.0417)  loss_rpn_box_reg: 0.0140 (0.0217)  time: 0.1080 (0.1250)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:25,319 maskrcnn_benchmark.trainer INFO: eta: 1:10:29  iter: 6140  loss: 0.6825 (0.8057)  loss_classifier: 0.2427 (0.2999)  loss_box_reg: 0.1089 (0.1287)  loss_mask: 0.2662 (0.3138)  loss_objectness: 0.0237 (0.0417)  loss_rpn_box_reg: 0.0120 (0.0217)  time: 0.1068 (0.1249)  data: 0.0013 (0.0174)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:27,465 maskrcnn_benchmark.trainer INFO: eta: 1:10:25  iter: 6160  loss: 0.7267 (0.8056)  loss_classifier: 0.2761 (0.2999)  loss_box_reg: 0.1127 (0.1287)  loss_mask: 0.2817 (0.3137)  loss_objectness: 0.0225 (0.0416)  loss_rpn_box_reg: 0.0120 (0.0217)  time: 0.1071 (0.1249)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:29,623 maskrcnn_benchmark.trainer INFO: eta: 1:10:20  iter: 6180  loss: 0.7077 (0.8052)  loss_classifier: 0.2381 (0.2998)  loss_box_reg: 0.1056 (0.1286)  loss_mask: 0.2736 (0.3136)  loss_objectness: 0.0278 (0.0416)  loss_rpn_box_reg: 0.0080 (0.0217)  time: 0.1067 (0.1248)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:31,783 maskrcnn_benchmark.trainer INFO: eta: 1:10:16  iter: 6200  loss: 0.7004 (0.8048)  loss_classifier: 0.2410 (0.2996)  loss_box_reg: 0.1071 (0.1286)  loss_mask: 0.2790 (0.3135)  loss_objectness: 0.0195 (0.0415)  loss_rpn_box_reg: 0.0119 (0.0216)  time: 0.1076 (0.1248)  data: 0.0013 (0.0172)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:33,950 maskrcnn_benchmark.trainer INFO: eta: 1:10:12  iter: 6220  loss: 0.6891 (0.8046)  loss_classifier: 0.2587 (0.2995)  loss_box_reg: 0.1178 (0.1286)  loss_mask: 0.2908 (0.3134)  loss_objectness: 0.0284 (0.0415)  loss_rpn_box_reg: 0.0103 (0.0216)  time: 0.1082 (0.1247)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:36,122 maskrcnn_benchmark.trainer INFO: eta: 1:10:08  iter: 6240  loss: 0.6150 (0.8042)  loss_classifier: 0.2085 (0.2994)  loss_box_reg: 0.1108 (0.1285)  loss_mask: 0.2779 (0.3133)  loss_objectness: 0.0182 (0.0415)  loss_rpn_box_reg: 0.0111 (0.0216)  time: 0.1083 (0.1246)  data: 0.0013 (0.0171)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:38,279 maskrcnn_benchmark.trainer INFO: eta: 1:10:03  iter: 6260  loss: 0.7230 (0.8039)  loss_classifier: 0.2564 (0.2992)  loss_box_reg: 0.1190 (0.1285)  loss_mask: 0.2651 (0.3132)  loss_objectness: 0.0268 (0.0414)  loss_rpn_box_reg: 0.0168 (0.0217)  time: 0.1072 (0.1246)  data: 0.0014 (0.0171)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:40,428 maskrcnn_benchmark.trainer INFO: eta: 1:09:59  iter: 6280  loss: 0.6458 (0.8035)  loss_classifier: 0.2239 (0.2991)  loss_box_reg: 0.0999 (0.1284)  loss_mask: 0.2658 (0.3130)  loss_objectness: 0.0194 (0.0414)  loss_rpn_box_reg: 0.0091 (0.0216)  time: 0.1071 (0.1245)  data: 0.0013 (0.0170)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:42,571 maskrcnn_benchmark.trainer INFO: eta: 1:09:55  iter: 6300  loss: 0.6949 (0.8031)  loss_classifier: 0.2248 (0.2989)  loss_box_reg: 0.1245 (0.1284)  loss_mask: 0.2712 (0.3129)  loss_objectness: 0.0220 (0.0413)  loss_rpn_box_reg: 0.0088 (0.0216)  time: 0.1065 (0.1245)  data: 0.0013 (0.0170)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:44,727 maskrcnn_benchmark.trainer INFO: eta: 1:09:50  iter: 6320  loss: 0.6249 (0.8026)  loss_classifier: 0.2492 (0.2987)  loss_box_reg: 0.1029 (0.1283)  loss_mask: 0.2779 (0.3128)  loss_objectness: 0.0186 (0.0413)  loss_rpn_box_reg: 0.0065 (0.0216)  time: 0.1069 (0.1244)  data: 0.0013 (0.0169)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:46,864 maskrcnn_benchmark.trainer INFO: eta: 1:09:46  iter: 6340  loss: 0.6573 (0.8023)  loss_classifier: 0.2463 (0.2986)  loss_box_reg: 0.1064 (0.1282)  loss_mask: 0.2656 (0.3127)  loss_objectness: 0.0240 (0.0412)  loss_rpn_box_reg: 0.0089 (0.0216)  time: 0.1067 (0.1244)  data: 0.0014 (0.0169)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:49,012 maskrcnn_benchmark.trainer INFO: eta: 1:09:42  iter: 6360  loss: 0.6799 (0.8019)  loss_classifier: 0.1946 (0.2984)  loss_box_reg: 0.0898 (0.1282)  loss_mask: 0.2797 (0.3126)  loss_objectness: 0.0217 (0.0412)  loss_rpn_box_reg: 0.0084 (0.0215)  time: 0.1077 (0.1243)  data: 0.0013 (0.0168)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:51,202 maskrcnn_benchmark.trainer INFO: eta: 1:09:38  iter: 6380  loss: 0.5757 (0.8014)  loss_classifier: 0.1825 (0.2981)  loss_box_reg: 0.0914 (0.1281)  loss_mask: 0.2658 (0.3124)  loss_objectness: 0.0116 (0.0412)  loss_rpn_box_reg: 0.0101 (0.0216)  time: 0.1090 (0.1243)  data: 0.0013 (0.0168)  lr: 0.160000  max mem: 5155
2020-06-23 17:31:53,367 maskrcnn_benchmark.trainer INFO: eta: 1:09:34  iter: 6400  loss: 0.6066 (0.8009)  loss_classifier: 0.2362 (0.2979)  loss_box_reg: 0.0953 (0.1280)  loss_mask: 0.2480 (0.3123)  loss_objectness: 0.0160 (0.0412)  loss_rpn_box_reg: 0.0074 (0.0215)  time: 0.1080 (0.1242)  data: 0.0013 (0.0167)  lr: 0.160000  max mem: 5155
:::MLLOG {"namespace": "", "time_ms": 1592958715424, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1592958715425, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1592958715425, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 7}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 17:31:55,669 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
2020-06-23 17:31:55,971 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.76it/s]
  9%|         | 7/79 [00:01<00:29,  2.44it/s]
 13%|        | 10/79 [00:01<00:20,  3.35it/s]
 16%|        | 13/79 [00:01<00:14,  4.53it/s]
 20%|        | 16/79 [00:01<00:10,  6.03it/s]
 24%|       | 19/79 [00:01<00:07,  7.83it/s]
 28%|       | 22/79 [00:01<00:05,  9.91it/s]
 32%|      | 25/79 [00:01<00:04, 12.16it/s]
 35%|      | 28/79 [00:01<00:03, 14.52it/s]
 39%|      | 31/79 [00:01<00:02, 16.79it/s]
 43%|     | 34/79 [00:02<00:02, 18.85it/s]
 47%|     | 37/79 [00:02<00:02, 20.56it/s]
 51%|     | 40/79 [00:02<00:01, 22.05it/s]
 54%|    | 43/79 [00:02<00:01, 23.05it/s]
 58%|    | 46/79 [00:02<00:01, 23.81it/s]
 62%|   | 49/79 [00:02<00:01, 24.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.26it/s]
  4%|         | 3/79 [00:00<00:43,  1.75it/s]
  8%|         | 6/79 [00:01<00:30,  2.43it/s]
 11%|        | 9/79 [00:01<00:21,  3.33it/s]
 15%|        | 12/79 [00:01<00:14,  4.50it/s]
 19%|        | 15/79 [00:01<00:10,  5.97it/s]
 23%|       | 18/79 [00:01<00:07,  7.76it/s]
 27%|       | 21/79 [00:01<00:05,  9.78it/s]
 30%|       | 24/79 [00:01<00:04, 11.92it/s]
 34%|      | 27/79 [00:01<00:03, 14.19it/s]
 38%|      | 30/79 [00:01<00:02, 16.42it/s]
 42%|     | 33/79 [00:02<00:02, 18.36it/s]
 46%|     | 36/79 [00:02<00:02, 19.95it/s]
 49%|     | 39/79 [00:02<00:01, 21.23it/s]
 53%|    | 42/79 [00:02<00:01, 22.45it/s]
 57%|    | 45/79 [00:02<00:01, 23.30it/s]
 61%|    | 48/79 [00:02<00:01, 23.96it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  3%|         | 2/79 [00:00<00:46,  1.67it/s]
  6%|         | 5/79 [00:01<00:31,  2.32it/s]
 10%|         | 8/79 [00:01<00:22,  3.19it/s]
 14%|        | 11/79 [00:01<00:15,  4.32it/s]
 18%|        | 14/79 [00:01<00:11,  5.75it/s]
 22%|       | 17/79 [00:01<00:08,  7.49it/s]
 25%|       | 20/79 [00:01<00:06,  9.50it/s]
 29%|       | 23/79 [00:01<00:04, 11.65it/s]
 33%|      | 26/79 [00:01<00:03, 13.89it/s]
 37%|      | 29/79 [00:01<00:03, 16.16it/s]
 41%|      | 32/79 [00:02<00:02, 18.13it/s]
 44%|     | 35/79 [00:02<00:02, 19.89it/s]
 48%|     | 38/79 [00:02<00:01, 21.37it/s]
 52%|    | 41/79 [00:02<00:01, 22.51it/s]
 56%|    | 44/79 [00:02<00:01, 23.49it/s]
 59%|    | 47/79 [00:02<00:01, 24.15it/s]
 63%|   | 50/79 [00:02<00:01, 24.73it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  4%|         | 3/79 [00:00<00:45,  1.65it/s]
  8%|         | 6/79 [00:01<00:31,  2.30it/s]
 11%|        | 9/79 [00:01<00:22,  3.17it/s]
 15%|        | 12/79 [00:01<00:15,  4.29it/s]
 19%|        | 15/79 [00:01<00:11,  5.72it/s]
 23%|       | 18/79 [00:01<00:08,  7.46it/s]
 27%|       | 21/79 [00:01<00:06,  9.51it/s]
 30%|       | 24/79 [00:01<00:04, 11.68it/s]
 34%|      | 27/79 [00:01<00:03, 13.97it/s]
 38%|      | 30/79 [00:01<00:03, 16.18it/s]
 42%|     | 33/79 [00:02<00:02, 18.24it/s]
 46%|     | 36/79 [00:02<00:02, 18.73it/s]
 49%|     | 39/79 [00:02<00:01, 20.34it/s]
 53%|    | 42/79 [00:02<00:01, 21.81it/s]
 57%|    | 45/79 [00:02<00:01, 23.02it/s]
 61%|    | 48/79 [00:02<00:01, 23.76it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.42it/s]
 13%|        | 10/79 [00:01<00:20,  3.32it/s]
 16%|        | 13/79 [00:01<00:14,  4.49it/s]
 20%|        | 16/79 [00:01<00:10,  5.95it/s]
 24%|       | 19/79 [00:01<00:07,  7.73it/s]
 28%|       | 22/79 [00:01<00:05,  9.80it/s]
 32%|      | 25/79 [00:01<00:04, 11.96it/s]
 35%|      | 28/79 [00:01<00:03, 14.25it/s]
 39%|      | 31/79 [00:01<00:02, 16.53it/s]
 43%|     | 34/79 [00:02<00:02, 18.48it/s]
 47%|     | 37/79 [00:02<00:02, 20.16it/s]
 51%|     | 40/79 [00:02<00:01, 21.44it/s]
 54%|    | 43/79 [00:02<00:01, 22.53it/s]
 58%|    | 46/79 [00:02<00:01, 23.46it/s]
 62%|   | 49/79 [00:02<00:01, 23.91it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.50it/s]
 28%|       | 22/79 [00:01<00:05,  9.52it/s]
 32%|      | 25/79 [00:01<00:04, 11.76it/s]
 35%|      | 28/79 [00:01<00:03, 14.12it/s]
 39%|      | 31/79 [00:02<00:02, 16.32it/s]
 43%|     | 34/79 [00:02<00:02, 18.37it/s]
 47%|     | 37/79 [00:02<00:02, 20.05it/s]
 51%|     | 40/79 [00:02<00:01, 21.60it/s]
 54%|    | 43/79 [00:02<00:01, 22.95it/s]
 58%|    | 46/79 [00:02<00:01, 23.47it/s]
 62%|   | 49/79 [00:02<00:01, 24.06it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.43it/s]
 20%|        | 16/79 [00:01<00:10,  5.89it/s]
 24%|       | 19/79 [00:01<00:07,  7.63it/s]
 28%|       | 22/79 [00:01<00:05,  9.66it/s]
 32%|      | 25/79 [00:01<00:04, 11.81it/s]
 35%|      | 28/79 [00:01<00:03, 14.07it/s]
 39%|      | 31/79 [00:02<00:02, 16.04it/s]
 43%|     | 34/79 [00:02<00:02, 18.08it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 20.89it/s]
 54%|    | 43/79 [00:02<00:01, 21.94it/s]
 58%|    | 46/79 [00:02<00:01, 23.01it/s]
 62%|   | 49/79 [00:02<00:01, 23.59it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.39it/s]
 32%|      | 25/79 [00:01<00:04, 11.63it/s]
 35%|      | 28/79 [00:01<00:03, 13.92it/s]
 39%|      | 31/79 [00:02<00:02, 16.16it/s]
 43%|     | 34/79 [00:02<00:02, 18.16it/s]
 47%|     | 37/79 [00:02<00:02, 19.75it/s]
 51%|     | 40/79 [00:02<00:01, 21.28it/s]
 54%|    | 43/79 [00:02<00:01, 22.33it/s]
 58%|    | 46/79 [00:02<00:01, 23.20it/s]
 62%|   | 49/79 [00:02<00:01, 23.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.34it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.45it/s]
 35%|      | 28/79 [00:01<00:03, 13.74it/s]
 39%|      | 31/79 [00:02<00:03, 15.95it/s]
 43%|     | 34/79 [00:02<00:02, 18.06it/s]
 47%|     | 37/79 [00:02<00:02, 19.68it/s]
 51%|     | 40/79 [00:02<00:01, 21.14it/s]
 54%|    | 43/79 [00:02<00:01, 22.31it/s]
 58%|    | 46/79 [00:02<00:01, 23.18it/s]
 62%|   | 49/79 [00:02<00:01, 23.60it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.17it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.46it/s]
 35%|      | 28/79 [00:01<00:03, 13.77it/s]
 39%|      | 31/79 [00:02<00:03, 15.97it/s]
 43%|     | 34/79 [00:02<00:02, 18.11it/s]
 47%|     | 37/79 [00:02<00:02, 19.81it/s]
 51%|     | 40/79 [00:02<00:01, 21.23it/s]
 54%|    | 43/79 [00:02<00:01, 22.50it/s]
 58%|    | 46/79 [00:02<00:01, 23.51it/s]
 62%|   | 49/79 [00:02<00:01, 24.18it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  9.02it/s]
 32%|      | 25/79 [00:01<00:04, 11.22it/s]
 35%|      | 28/79 [00:01<00:03, 13.39it/s]
 39%|      | 31/79 [00:02<00:03, 15.66it/s]
 43%|     | 34/79 [00:02<00:02, 17.80it/s]
 47%|     | 37/79 [00:02<00:02, 19.57it/s]
 51%|     | 40/79 [00:02<00:01, 21.04it/s]
 54%|    | 43/79 [00:02<00:01, 22.43it/s]
 58%|    | 46/79 [00:02<00:01, 23.37it/s]
 62%|   | 49/79 [00:02<00:01, 23.83it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.25it/s]
 32%|      | 25/79 [00:01<00:04, 11.42it/s]
 35%|      | 28/79 [00:01<00:03, 13.71it/s]
 39%|      | 31/79 [00:02<00:03, 15.93it/s]
 43%|     | 34/79 [00:02<00:02, 17.96it/s]
 47%|     | 37/79 [00:02<00:02, 19.81it/s]
 51%|     | 40/79 [00:02<00:01, 21.26it/s]
 54%|    | 43/79 [00:02<00:01, 22.39it/s]
 58%|    | 46/79 [00:02<00:01, 23.29it/s]
 62%|   | 49/79 [00:02<00:01, 23.78it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.46it/s]
 24%|       | 19/79 [00:01<00:08,  7.14it/s]
 28%|       | 22/79 [00:01<00:06,  9.14it/s]
 32%|      | 25/79 [00:01<00:04, 11.37it/s]
 35%|      | 28/79 [00:01<00:03, 13.71it/s]
 39%|      | 31/79 [00:02<00:02, 16.04it/s]
 43%|     | 34/79 [00:02<00:02, 18.03it/s]
 47%|     | 37/79 [00:02<00:02, 19.95it/s]
 51%|     | 40/79 [00:02<00:01, 21.46it/s]
 54%|    | 43/79 [00:02<00:01, 22.71it/s]
 58%|    | 46/79 [00:02<00:01, 23.54it/s]
 62%|   | 49/79 [00:02<00:01, 24.22it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.51it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.34it/s]
 35%|      | 28/79 [00:01<00:03, 13.58it/s]
 39%|      | 31/79 [00:02<00:03, 15.82it/s]
 43%|     | 34/79 [00:02<00:02, 17.93it/s]
 47%|     | 37/79 [00:02<00:02, 19.62it/s]
 51%|     | 40/79 [00:02<00:01, 21.16it/s]
 54%|    | 43/79 [00:02<00:01, 22.24it/s]
 58%|    | 46/79 [00:02<00:01, 23.00it/s]
 62%|   | 49/79 [00:02<00:01, 23.52it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.25it/s]
 28%|       | 22/79 [00:01<00:06,  9.20it/s]
 32%|      | 25/79 [00:01<00:04, 11.43it/s]
 35%|      | 28/79 [00:01<00:03, 13.69it/s]
 39%|      | 31/79 [00:02<00:03, 15.89it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.77it/s]
 51%|     | 40/79 [00:02<00:01, 21.11it/s]
 54%|    | 43/79 [00:02<00:01, 22.32it/s]
 58%|    | 46/79 [00:02<00:01, 23.16it/s]
 62%|   | 49/79 [00:02<00:01, 23.90it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.17it/s]
 20%|        | 16/79 [00:01<00:11,  5.57it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.47it/s]
 35%|      | 28/79 [00:01<00:03, 13.74it/s]
 39%|      | 31/79 [00:02<00:03, 15.99it/s]
 43%|     | 34/79 [00:02<00:02, 18.02it/s]
 47%|     | 37/79 [00:02<00:02, 19.87it/s]
 51%|     | 40/79 [00:02<00:01, 20.74it/s]
 54%|    | 43/79 [00:02<00:01, 22.02it/s]
 58%|    | 46/79 [00:02<00:01, 23.05it/s]
 62%|   | 49/79 [00:02<00:01, 23.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.28it/s]
 32%|      | 25/79 [00:01<00:04, 11.48it/s]
 35%|      | 28/79 [00:01<00:03, 13.70it/s]
 39%|      | 31/79 [00:02<00:03, 15.90it/s]
 43%|     | 34/79 [00:02<00:02, 17.84it/s]
 47%|     | 37/79 [00:02<00:02, 19.67it/s]
 51%|     | 40/79 [00:02<00:01, 21.03it/s]
 54%|    | 43/79 [00:02<00:01, 22.16it/s]
 58%|    | 46/79 [00:02<00:01, 23.12it/s]
 62%|   | 49/79 [00:02<00:01, 23.69it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.51it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:02, 16.04it/s]
 43%|     | 34/79 [00:02<00:02, 17.75it/s]
 47%|     | 37/79 [00:02<00:02, 19.06it/s]
 51%|     | 40/79 [00:02<00:01, 20.68it/s]
 54%|    | 43/79 [00:02<00:01, 22.05it/s]
 58%|    | 46/79 [00:02<00:01, 23.01it/s]
 62%|   | 49/79 [00:02<00:01, 23.68it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.38it/s]
 32%|      | 25/79 [00:01<00:04, 11.57it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.74it/s]
 43%|     | 34/79 [00:02<00:02, 17.70it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.63it/s]
 54%|    | 43/79 [00:02<00:01, 21.55it/s]
 58%|    | 46/79 [00:02<00:01, 22.53it/s]
 62%|   | 49/79 [00:02<00:01, 23.44it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.36it/s]
 28%|       | 22/79 [00:01<00:06,  9.31it/s]
 32%|      | 25/79 [00:01<00:04, 11.46it/s]
 35%|      | 28/79 [00:01<00:03, 13.50it/s]
 39%|      | 31/79 [00:02<00:03, 15.59it/s]
 43%|     | 34/79 [00:02<00:02, 17.49it/s]
 47%|     | 37/79 [00:02<00:02, 19.30it/s]
 51%|     | 40/79 [00:02<00:01, 20.69it/s]
 54%|    | 43/79 [00:02<00:01, 21.74it/s]
 58%|    | 46/79 [00:02<00:01, 22.83it/s]
 62%|   | 49/79 [00:02<00:01, 23.62it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.15it/s]
 28%|       | 22/79 [00:01<00:06,  9.12it/s]
 32%|      | 25/79 [00:01<00:04, 11.27it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.73it/s]
 43%|     | 34/79 [00:02<00:02, 17.68it/s]
 47%|     | 37/79 [00:02<00:02, 19.48it/s]
 51%|     | 40/79 [00:02<00:01, 21.16it/s]
 54%|    | 43/79 [00:02<00:01, 22.09it/s]
 58%|    | 46/79 [00:02<00:01, 22.82it/s]
 62%|   | 49/79 [00:02<00:01, 23.70it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 15%|        | 12/79 [00:01<00:17,  3.92it/s]
 19%|        | 15/79 [00:01<00:12,  5.25it/s]
 23%|       | 18/79 [00:01<00:08,  6.87it/s]
 27%|       | 21/79 [00:01<00:06,  8.82it/s]
 30%|       | 24/79 [00:01<00:05, 10.95it/s]
 34%|      | 27/79 [00:01<00:03, 13.22it/s]
 38%|      | 30/79 [00:02<00:03, 15.54it/s]
 42%|     | 33/79 [00:02<00:02, 17.57it/s]
 46%|     | 36/79 [00:02<00:02, 19.43it/s]
 49%|     | 39/79 [00:02<00:01, 20.83it/s]
 53%|    | 42/79 [00:02<00:01, 22.05it/s]
 57%|    | 45/79 [00:02<00:01, 22.64it/s]
 61%|    | 48/79 [00:02<00:01, 23.34it/s]
 65%|   | 51/79 [00:02<00:01, 23
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.13it/s]
 28%|       | 22/79 [00:01<00:06,  9.11it/s]
 32%|      | 25/79 [00:01<00:04, 11.24it/s]
 35%|      | 28/79 [00:01<00:03, 13.52it/s]
 39%|      | 31/79 [00:02<00:03, 15.37it/s]
 43%|     | 34/79 [00:02<00:02, 17.35it/s]
 47%|     | 37/79 [00:02<00:02, 18.36it/s]
 51%|     | 40/79 [00:02<00:01, 20.10it/s]
 54%|    | 43/79 [00:02<00:01, 21.39it/s]
 58%|    | 46/79 [00:02<00:01, 22.54it/s]
 62%|   | 49/79 [00:02<00:01, 23.33it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.07it/s]
 32%|      | 25/79 [00:01<00:04, 11.20it/s]
 35%|      | 28/79 [00:01<00:03, 13.47it/s]
 39%|      | 31/79 [00:02<00:03, 15.61it/s]
 43%|     | 34/79 [00:02<00:02, 17.67it/s]
 47%|     | 37/79 [00:02<00:02, 19.06it/s]
 51%|     | 40/79 [00:02<00:01, 20.57it/s]
 54%|    | 43/79 [00:02<00:01, 21.39it/s]
 58%|    | 46/79 [00:02<00:01, 22.46it/s]
 62%|   | 49/79 [00:02<00:01, 23.18it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.13it/s]
 32%|      | 25/79 [00:01<00:04, 11.27it/s]
 35%|      | 28/79 [00:02<00:03, 13.51it/s]
 39%|      | 31/79 [00:02<00:03, 15.64it/s]
 43%|     | 34/79 [00:02<00:02, 17.59it/s]
 47%|     | 37/79 [00:02<00:02, 19.32it/s]
 51%|     | 40/79 [00:02<00:01, 20.53it/s]
 54%|    | 43/79 [00:02<00:01, 21.58it/s]
 58%|    | 46/79 [00:02<00:01, 22.19it/s]
 62%|   | 49/79 [00:02<00:01, 22.98it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.07it/s]
 28%|       | 22/79 [00:01<00:06,  9.03it/s]
 32%|      | 25/79 [00:01<00:04, 11.19it/s]
 35%|      | 28/79 [00:01<00:03, 13.41it/s]
 39%|      | 31/79 [00:02<00:03, 15.56it/s]
 43%|     | 34/79 [00:02<00:02, 17.51it/s]
 47%|     | 37/79 [00:02<00:02, 19.30it/s]
 51%|     | 40/79 [00:02<00:01, 20.46it/s]
 54%|    | 43/79 [00:02<00:01, 21.78it/s]
 58%|    | 46/79 [00:02<00:01, 22.33it/s]
 62%|   | 49/79 [00:02<00:01, 23.18it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:00<00:46,  1.62it/s]
  8%|         | 6/79 [00:01<00:32,  2.25it/s]
 11%|        | 9/79 [00:01<00:22,  3.09it/s]
 15%|        | 12/79 [00:01<00:16,  4.16it/s]
 18%|        | 14/79 [00:01<00:11,  5.44it/s]
 22%|       | 17/79 [00:01<00:08,  7.11it/s]
 25%|       | 20/79 [00:01<00:06,  9.03it/s]
 29%|       | 23/79 [00:01<00:05, 11.12it/s]
 33%|      | 26/79 [00:01<00:03, 13.27it/s]
 37%|      | 29/79 [00:02<00:03, 15.30it/s]
 41%|      | 32/79 [00:02<00:02, 17.21it/s]
 44%|     | 35/79 [00:02<00:02, 18.70it/s]
 48%|     | 38/79 [00:02<00:02, 20.20it/s]
 52%|    | 41/79 [00:02<00:01, 21.22it/s]
 56%|    | 44/79 [00:02<00:01, 22.10it/s]
 59%|    | 47/79 [00:02<00:01, 22.52it/s]
 63%|   | 50/79 [00:02<00:01, 23.15
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.12it/s]
 32%|      | 25/79 [00:01<00:04, 11.30it/s]
 35%|      | 28/79 [00:01<00:03, 13.54it/s]
 39%|      | 31/79 [00:02<00:03, 15.72it/s]
 43%|     | 34/79 [00:02<00:02, 17.49it/s]
 47%|     | 37/79 [00:02<00:02, 19.20it/s]
 51%|     | 40/79 [00:02<00:01, 20.50it/s]
 54%|    | 43/79 [00:02<00:01, 21.49it/s]
 58%|    | 46/79 [00:02<00:01, 22.49it/s]
 62%|   | 49/79 [00:02<00:01, 22.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.07it/s]
 28%|       | 22/79 [00:01<00:06,  8.98it/s]
 32%|      | 25/79 [00:01<00:04, 11.10it/s]
 35%|      | 28/79 [00:02<00:03, 13.26it/s]
 39%|      | 31/79 [00:02<00:03, 15.45it/s]
 43%|     | 34/79 [00:02<00:02, 17.38it/s]
 47%|     | 37/79 [00:02<00:02, 19.02it/s]
 51%|     | 40/79 [00:02<00:01, 20.34it/s]
 54%|    | 43/79 [00:02<00:01, 21.38it/s]
 58%|    | 46/79 [00:02<00:01, 22.28it/s]
 62%|   | 49/79 [00:02<00:01, 22.67it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  3.99it/s]
 20%|        | 16/79 [00:01<00:11,  5.33it/s]
 24%|       | 19/79 [00:01<00:08,  6.97it/s]
 28%|       | 22/79 [00:01<00:06,  8.86it/s]
 32%|      | 25/79 [00:01<00:04, 10.99it/s]
 35%|      | 28/79 [00:02<00:03, 13.09it/s]
 39%|      | 31/79 [00:02<00:03, 15.18it/s]
 43%|     | 34/79 [00:02<00:02, 17.19it/s]
 47%|     | 37/79 [00:02<00:02, 19.01it/s]
 51%|     | 40/79 [00:02<00:01, 20.14it/s]
 54%|    | 43/79 [00:02<00:01, 21.22it/s]
 58%|    | 46/79 [00:02<00:01, 22.11it/s]
 62%|   | 49/79 [00:02<00:01, 22.93it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.85it/s]
 28%|       | 22/79 [00:01<00:06,  8.71it/s]
 32%|      | 25/79 [00:01<00:04, 10.82it/s]
 35%|      | 28/79 [00:02<00:03, 12.99it/s]
 39%|      | 31/79 [00:02<00:03, 15.16it/s]
 43%|     | 34/79 [00:02<00:02, 17.20it/s]
 47%|     | 37/79 [00:02<00:02, 18.81it/s]
 51%|     | 40/79 [00:02<00:01, 20.20it/s]
 54%|    | 43/79 [00:02<00:01, 21.24it/s]
 58%|    | 46/79 [00:02<00:01, 22.00it/s]
 62%|   | 49/79 [00:02<00:01, 22.64it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  4%|         | 3/79 [00:00<00:47,  1.61it/s]
  8%|         | 6/79 [00:01<00:32,  2.23it/s]
 11%|        | 9/79 [00:01<00:22,  3.07it/s]
 15%|        | 12/79 [00:01<00:16,  4.16it/s]
 19%|        | 15/79 [00:01<00:11,  5.55it/s]
 23%|       | 18/79 [00:01<00:08,  7.22it/s]
 27%|       | 21/79 [00:01<00:06,  9.14it/s]
 30%|       | 24/79 [00:01<00:04, 11.25it/s]
 34%|      | 27/79 [00:02<00:04, 12.64it/s]
 38%|      | 30/79 [00:02<00:03, 14.06it/s]
 42%|     | 33/79 [00:02<00:02, 16.14it/s]
 46%|     | 36/79 [00:02<00:02, 17.76it/s]
 49%|     | 39/79 [00:02<00:02, 19.14it/s]
 53%|    | 42/79 [00:02<00:01, 20.60it/s]
 57%|    | 45/79 [00:02<00:01, 21.51it/s]
 61%|    | 48/79 [00:02<00:01, 22.37it/s]
 65%|   | 51/79 [00:03<00:01, 22., 24.78it/s]
 70%|   | 55/79 [00:02<00:00, 25.09it/s]
 73%|  | 58/79 [00:02<00:00, 25.33it/s]
 77%|  | 61/79 [00:03<00:00, 25.30it/s]
 81%|  | 64/79 [00:03<00:00, 25.37it/s]
 85%| | 67/79 [00:03<00:00, 25.43it/s]
 89%| | 70/79 [00:03<00:00, 25.35it/s]
 92%|| 73/79 [00:03<00:00, 25.66it/s]
 96%|| 76/79 [00:03<00:00, 26.26it/s]
100%|| 79/79 [00:03<00:00, 27.10it/s]
, 24.18it/s]
 70%|   | 55/79 [00:02<00:00, 24.83it/s]
 73%|  | 58/79 [00:03<00:00, 24.97it/s]
 77%|  | 61/79 [00:03<00:00, 25.23it/s]
 81%|  | 64/79 [00:03<00:00, 25.19it/s]
 85%| | 67/79 [00:03<00:00, 25.41it/s]
 89%| | 70/79 [00:03<00:00, 25.09it/s]
 92%|| 73/79 [00:03<00:00, 25.54it/s]
 96%|| 76/79 [00:03<00:00, 26.13it/s]
100%|| 79/79 [00:03<00:00, 27.02it/s]
67it/s]
 68%|   | 54/79 [00:02<00:01, 24.89it/s]
 72%|  | 57/79 [00:03<00:00, 25.52it/s]
 76%|  | 60/79 [00:03<00:00, 25.81it/s]
 80%|  | 63/79 [00:03<00:00, 25.92it/s]
 84%| | 66/79 [00:03<00:00, 26.06it/s]
 87%| | 69/79 [00:03<00:00, 26.13it/s]
 91%| | 72/79 [00:03<00:00, 26.16it/s]
 95%|| 75/79 [00:03<00:00, 26.71it/s]
 99%|| 78/79 [00:03<00:00, 27.51it/s]
100%|| 79/79 [00:03<00:00, 20.02it/s]
, 23.88it/s]
 70%|   | 55/79 [00:02<00:00, 24.40it/s]
 73%|  | 58/79 [00:03<00:00, 24.41it/s]
 77%|  | 61/79 [00:03<00:00, 24.72it/s]
 81%|  | 64/79 [00:03<00:00, 24.73it/s]
 85%| | 67/79 [00:03<00:00, 24.93it/s]
 89%| | 70/79 [00:03<00:00, 25.25it/s]
 92%|| 73/79 [00:03<00:00, 25.44it/s]
 96%|| 76/79 [00:03<00:00, 26.19it/s]
100%|| 79/79 [00:03<00:00, 27.17it/s]
, 24.59it/s]
 70%|   | 55/79 [00:03<00:00, 25.03it/s]
 73%|  | 58/79 [00:03<00:00, 25.17it/s]
 77%|  | 61/79 [00:03<00:00, 25.55it/s]
 81%|  | 64/79 [00:03<00:00, 25.68it/s]
 85%| | 67/79 [00:03<00:00, 25.89it/s]
 89%| | 70/79 [00:03<00:00, 25.80it/s]
 92%|| 73/79 [00:03<00:00, 25.95it/s]
 96%|| 76/79 [00:03<00:00, 26.36it/s]
100%|| 79/79 [00:03<00:00, 27.30it/s]
/s]
 67%|   | 53/79 [00:02<00:01, 25.06it/s]
 71%|   | 56/79 [00:03<00:00, 25.34it/s]
 75%|  | 59/79 [00:03<00:00, 25.76it/s]
 78%|  | 62/79 [00:03<00:00, 25.49it/s]
 82%| | 65/79 [00:03<00:00, 25.65it/s]
 86%| | 68/79 [00:03<00:00, 25.67it/s]
 90%| | 71/79 [00:03<00:00, 25.63it/s]
 94%|| 74/79 [00:03<00:00, 26.23it/s]
 97%|| 77/79 [00:03<00:00, 26.62it/s]
100%|| 79/79 [00:03<00:00, 19.96it/s]
, 24.40it/s]
 70%|   | 55/79 [00:02<00:00, 24.77it/s]
 73%|  | 58/79 [00:03<00:00, 25.20it/s]
 77%|  | 61/79 [00:03<00:00, 25.19it/s]
 81%|  | 64/79 [00:03<00:00, 24.67it/s]
 85%| | 67/79 [00:03<00:00, 24.59it/s]
 89%| | 70/79 [00:03<00:00, 24.76it/s]
 92%|| 73/79 [00:03<00:00, 24.68it/s]
 96%|| 76/79 [00:03<00:00, 25.47it/s]
100%|| 79/79 [00:03<00:00, 26.39it/s]
, 24.13it/s]
 70%|   | 55/79 [00:03<00:00, 24.33it/s]
 73%|  | 58/79 [00:03<00:00, 24.80it/s]
 77%|  | 61/79 [00:03<00:00, 24.93it/s]
 81%|  | 64/79 [00:03<00:00, 25.11it/s]
 85%| | 67/79 [00:03<00:00, 25.15it/s]
 89%| | 70/79 [00:03<00:00, 25.21it/s]
 92%|| 73/79 [00:03<00:00, 25.47it/s]
 96%|| 76/79 [00:03<00:00, 26.13it/s]
100%|| 79/79 [00:03<00:00, 26.90it/s]
, 24.32it/s]
 70%|   | 55/79 [00:02<00:00, 24.86it/s]
 73%|  | 58/79 [00:03<00:00, 25.12it/s]
 77%|  | 61/79 [00:03<00:00, 25.46it/s]
 81%|  | 64/79 [00:03<00:00, 25.64it/s]
 85%| | 67/79 [00:03<00:00, 25.52it/s]
 89%| | 70/79 [00:03<00:00, 25.60it/s]
 92%|| 73/79 [00:03<00:00, 25.92it/s]
 96%|| 76/79 [00:03<00:00, 26.51it/s]
100%|| 79/79 [00:03<00:00, 27.41it/s]
, 24.55it/s]
 70%|   | 55/79 [00:02<00:00, 24.91it/s]
 73%|  | 58/79 [00:03<00:00, 25.20it/s]
 77%|  | 61/79 [00:03<00:00, 25.34it/s]
 81%|  | 64/79 [00:03<00:00, 25.01it/s]
 85%| | 67/79 [00:03<00:00, 25.26it/s]
 89%| | 70/79 [00:03<00:00, 25.30it/s]
 92%|| 73/79 [00:03<00:00, 25.50it/s]
 96%|| 76/79 [00:03<00:00, 26.07it/s]
100%|| 79/79 [00:03<00:00, 26.84it/s]
, 24.38it/s]
 70%|   | 55/79 [00:03<00:00, 25.11it/s]
 73%|  | 58/79 [00:03<00:00, 25.45it/s]
 77%|  | 61/79 [00:03<00:00, 25.75it/s]
 81%|  | 64/79 [00:03<00:00, 26.03it/s]
 85%| | 67/79 [00:03<00:00, 26.01it/s]
 89%| | 70/79 [00:03<00:00, 26.32it/s]
 92%|| 73/79 [00:03<00:00, 26.16it/s]
 96%|| 76/79 [00:03<00:00, 26.79it/s]
100%|| 79/79 [00:03<00:00, 27.46it/s]
, 24.65it/s]
 70%|   | 55/79 [00:02<00:00, 25.09it/s]
 73%|  | 58/79 [00:03<00:00, 25.35it/s]
 77%|  | 61/79 [00:03<00:00, 25.49it/s]
 81%|  | 64/79 [00:03<00:00, 25.69it/s]
 85%| | 67/79 [00:03<00:00, 25.88it/s]
 89%| | 70/79 [00:03<00:00, 25.85it/s]
 92%|| 73/79 [00:03<00:00, 26.05it/s]
 96%|| 76/79 [00:03<00:00, 26.59it/s]
100%|| 79/79 [00:03<00:00, 27.38it/s]
, 24.07it/s]
 70%|   | 55/79 [00:03<00:00, 24.32it/s]
 73%|  | 58/79 [00:03<00:00, 24.74it/s]
 77%|  | 61/79 [00:03<00:00, 25.14it/s]
 81%|  | 64/79 [00:03<00:00, 25.18it/s]
 85%| | 67/79 [00:03<00:00, 25.62it/s]
 89%| | 70/79 [00:03<00:00, 25.49it/s]
 92%|| 73/79 [00:03<00:00, 25.87it/s]
 96%|| 76/79 [00:03<00:00, 26.46it/s]
100%|| 79/79 [00:03<00:00, 27.41it/s]
45it/s]
 68%|   | 54/79 [00:02<00:01, 24.96it/s]
 72%|  | 57/79 [00:03<00:00, 24.82it/s]
 76%|  | 60/79 [00:03<00:00, 24.72it/s]
 80%|  | 63/79 [00:03<00:00, 24.67it/s]
 84%| | 66/79 [00:03<00:00, 24.84it/s]
 87%| | 69/79 [00:03<00:00, 24.95it/s]
 91%| | 72/79 [00:03<00:00, 24.71it/s]
 95%|| 75/79 [00:03<00:00, 25.56it/s]
 99%|| 78/79 [00:03<00:00, 26.16it/s]
100%|| 79/79 [00:03<00:00, 19.84it/s]
, 24.04it/s]
 70%|   | 55/79 [00:03<00:00, 24.38it/s]
 73%|  | 58/79 [00:03<00:00, 24.59it/s]
 77%|  | 61/79 [00:03<00:00, 24.76it/s]
 81%|  | 64/79 [00:03<00:00, 25.05it/s]
 85%| | 67/79 [00:03<00:00, 25.02it/s]
 89%| | 70/79 [00:03<00:00, 25.10it/s]
 92%|| 73/79 [00:03<00:00, 25.58it/s]
 96%|| 76/79 [00:03<00:00, 26.18it/s]
100%|| 79/79 [00:03<00:00, 26.96it/s]
, 24.38it/s]
 70%|   | 55/79 [00:03<00:00, 24.75it/s]
 73%|  | 58/79 [00:03<00:00, 24.93it/s]
 77%|  | 61/79 [00:03<00:00, 25.07it/s]
 81%|  | 64/79 [00:03<00:00, 24.93it/s]
 85%| | 67/79 [00:03<00:00, 25.24it/s]
 89%| | 70/79 [00:03<00:00, 24.65it/s]
 92%|| 73/79 [00:03<00:00, 25.20it/s]
 96%|| 76/79 [00:03<00:00, 25.71it/s]
100%|| 79/79 [00:03<00:00, 26.83it/s]
, 24.45it/s]
 70%|   | 55/79 [00:03<00:00, 24.77it/s]
 73%|  | 58/79 [00:03<00:00, 24.86it/s]
 77%|  | 61/79 [00:03<00:00, 25.14it/s]
 81%|  | 64/79 [00:03<00:00, 25.37it/s]
 85%| | 67/79 [00:03<00:00, 25.50it/s]
 89%| | 70/79 [00:03<00:00, 25.40it/s]
 92%|| 73/79 [00:03<00:00, 25.48it/s]
 96%|| 76/79 [00:03<00:00, 26.27it/s]
100%|| 79/79 [00:03<00:00, 26.33it/s]
, 24.60it/s]
 70%|   | 55/79 [00:02<00:00, 24.67it/s]
 73%|  | 58/79 [00:03<00:00, 25.02it/s]
 77%|  | 61/79 [00:03<00:00, 25.00it/s]
 81%|  | 64/79 [00:03<00:00, 25.14it/s]
 85%| | 67/79 [00:03<00:00, 25.13it/s]
 89%| | 70/79 [00:03<00:00, 25.33it/s]
 92%|| 73/79 [00:03<00:00, 25.65it/s]
 96%|| 76/79 [00:03<00:00, 26.42it/s]
100%|| 79/79 [00:03<00:00, 27.21it/s]
, 24.36it/s]
 70%|   | 55/79 [00:03<00:00, 24.86it/s]
 73%|  | 58/79 [00:03<00:00, 25.04it/s]
 77%|  | 61/79 [00:03<00:00, 25.07it/s]
 81%|  | 64/79 [00:03<00:00, 25.28it/s]
 85%| | 67/79 [00:03<00:00, 25.50it/s]
 89%| | 70/79 [00:03<00:00, 25.24it/s]
 92%|| 73/79 [00:03<00:00, 25.84it/s]
 96%|| 76/79 [00:03<00:00, 26.46it/s]
100%|| 79/79 [00:03<00:00, 27.37it/s]
, 23.91it/s]
 70%|   | 55/79 [00:03<00:00, 24.11it/s]
 73%|  | 58/79 [00:03<00:00, 24.54it/s]
 77%|  | 61/79 [00:03<00:00, 24.71it/s]
 81%|  | 64/79 [00:03<00:00, 24.83it/s]
 85%| | 67/79 [00:03<00:00, 25.02it/s]
 89%| | 70/79 [00:03<00:00, 25.29it/s]
 92%|| 73/79 [00:03<00:00, 25.58it/s]
 96%|| 76/79 [00:03<00:00, 26.29it/s]
100%|| 79/79 [00:03<00:00, 27.24it/s]
, 23.89it/s]
 70%|   | 55/79 [00:03<00:00, 24.32it/s]
 73%|  | 58/79 [00:03<00:00, 24.67it/s]
 77%|  | 61/79 [00:03<00:00, 25.02it/s]
 81%|  | 64/79 [00:03<00:00, 25.07it/s]
 85%| | 67/79 [00:03<00:00, 25.21it/s]
 89%| | 70/79 [00:03<00:00, 25.51it/s]
 92%|| 73/79 [00:03<00:00, 25.68it/s]
 96%|| 76/79 [00:03<00:00, 26.47it/s]
100%|| 79/79 [00:03<00:00, 27.35it/s]
, 23.90it/s]
 70%|   | 55/79 [00:03<00:00, 24.56it/s]
 73%|  | 58/79 [00:03<00:00, 25.21it/s]
 77%|  | 61/79 [00:03<00:00, 24.80it/s]
 81%|  | 64/79 [00:03<00:00, 24.88it/s]
 85%| | 67/79 [00:03<00:00, 25.02it/s]
 89%| | 70/79 [00:03<00:00, 25.02it/s]
 92%|| 73/79 [00:03<00:00, 25.40it/s]
 96%|| 76/79 [00:03<00:00, 25.98it/s]
100%|| 79/79 [00:03<00:00, 26.97it/s]
, 23.48it/s]
 70%|   | 55/79 [00:03<00:01, 23.88it/s]
 73%|  | 58/79 [00:03<00:00, 24.14it/s]
 77%|  | 61/79 [00:03<00:00, 24.26it/s]
 81%|  | 64/79 [00:03<00:00, 24.36it/s]
 85%| | 67/79 [00:03<00:00, 24.46it/s]
 89%| | 70/79 [00:03<00:00, 24.57it/s]
 92%|| 73/79 [00:03<00:00, 24.91it/s]
 96%|| 76/79 [00:03<00:00, 25.71it/s]
100%|| 79/79 [00:04<00:00, 26.65it/s]
.69it/s]
 68%|   | 54/79 [00:03<00:01, 24.27it/s]
 72%|  | 57/79 [00:03<00:00, 24.65it/s]
 76%|  | 60/79 [00:03<00:00, 24.46it/s]
 80%|  | 63/79 [00:03<00:00, 24.75it/s]
 84%| | 66/79 [00:03<00:00, 24.76it/s]
 87%| | 69/79 [00:03<00:00, 24.68it/s]
 91%| | 72/79 [00:03<00:00, 25.11it/s]
 95%|| 75/79 [00:03<00:00, 25.98it/s]
 99%|| 78/79 [00:03<00:00, 26.50it/s]
100%|| 79/79 [00:04<00:00, 19.25it/s]
, 23.83it/s]
 70%|   | 55/79 [00:03<00:00, 24.40it/s]
 73%|  | 58/79 [00:03<00:00, 24.69it/s]
 77%|  | 61/79 [00:03<00:00, 24.78it/s]
 81%|  | 64/79 [00:03<00:00, 25.01it/s]
 85%| | 67/79 [00:03<00:00, 24.90it/s]
 89%| | 70/79 [00:03<00:00, 24.95it/s]
 92%|| 73/79 [00:03<00:00, 25.15it/s]
 96%|| 76/79 [00:03<00:00, 25.97it/s]
100%|| 79/79 [00:03<00:00, 26.56it/s]
, 23.71it/s]
 70%|   | 55/79 [00:03<00:00, 24.02it/s]
 73%|  | 58/79 [00:03<00:00, 24.26it/s]
 77%|  | 61/79 [00:03<00:00, 24.58it/s]
 81%|  | 64/79 [00:03<00:00, 24.46it/s]
 85%| | 67/79 [00:03<00:00, 24.65it/s]
 89%| | 70/79 [00:03<00:00, 24.70it/s]
 92%|| 73/79 [00:03<00:00, 25.15it/s]
 96%|| 76/79 [00:03<00:00, 25.77it/s]
100%|| 79/79 [00:04<00:00, 26.64it/s]
, 23.13it/s]
 70%|   | 55/79 [00:03<00:01, 23.62it/s]
 73%|  | 58/79 [00:03<00:00, 24.25it/s]
 77%|  | 61/79 [00:03<00:00, 24.33it/s]
 81%|  | 64/79 [00:03<00:00, 24.41it/s]
 85%| | 67/79 [00:03<00:00, 24.70it/s]
 89%| | 70/79 [00:03<00:00, 24.82it/s]
 92%|| 73/79 [00:03<00:00, 25.07it/s]
 96%|| 76/79 [00:03<00:00, 25.78it/s]
100%|| 79/79 [00:04<00:00, 26.55it/s]
, 23.57it/s]
 70%|   | 55/79 [00:03<00:00, 24.01it/s]
 73%|  | 58/79 [00:03<00:00, 24.29it/s]
 77%|  | 61/79 [00:03<00:00, 24.35it/s]
 81%|  | 64/79 [00:03<00:00, 24.57it/s]
 85%| | 67/79 [00:03<00:00, 24.91it/s]
 89%| | 70/79 [00:03<00:00, 24.50it/s]
 92%|| 73/79 [00:03<00:00, 24.65it/s]
 96%|| 76/79 [00:03<00:00, 25.32it/s]
100%|| 79/79 [00:04<00:00, 26.22it/s]
, 23.13it/s]
 70%|   | 55/79 [00:03<00:01, 23.41it/s]
 73%|  | 58/79 [00:03<00:00, 23.71it/s]
 77%|  | 61/79 [00:03<00:00, 23.78it/s]
 81%|  | 64/79 [00:03<00:00, 23.94it/s]
 85%| | 67/79 [00:03<00:00, 24.25it/s]
 89%| | 70/79 [00:03<00:00, 24.31it/s]
 92%|| 73/79 [00:03<00:00, 24.75it/s]
 96%|| 76/79 [00:03<00:00, 25.43it/s]
100%|| 79/79 [00:04<00:00, 26.34it/s]
it/s]
 67%|   | 53/79 [00:03<00:01, 23.50it/s]
 71%|   | 56/79 [00:03<00:00, 23.62it/s]
 75%|  | 59/79 [00:03<00:00, 24.00it/s]
 78%|  | 62/79 [00:03<00:00, 24.35it/s]
 82%| | 65/79 [00:03<00:00, 24.33it/s]
 86%| | 68/79 [00:03<00:00, 24.50it/s]
 90%| | 71/79 [00:03<00:00, 24.35it/s]
 94%|| 74/79 [00:03<00:00, 24.89it/s]
 97%|| 77/79 [00:04<00:00, 25.55it/s]
100%|| 79/79 [00:04<00:00, 18.98it/s]
, 23.02it/s]
 70%|   | 55/79 [00:03<00:01, 23.58it/s]
 73%|  | 58/79 [00:03<00:00, 23.68it/s]
 77%|  | 61/79 [00:03<00:00, 24.04it/s]
 81%|  | 64/79 [00:03<00:00, 24.32it/s]
 85%| | 67/79 [00:03<00:00, 24.61it/s]
 89%| | 70/79 [00:03<00:00, 24.49it/s]
 92%|| 73/79 [00:03<00:00, 24.87it/s]
 96%|| 76/79 [00:03<00:00, 25.47it/s]
100%|| 79/79 [00:04<00:00, 26.16it/s]
66it/s]
 68%|   | 54/79 [00:03<00:01, 23.22it/s]
 72%|  | 57/79 [00:03<00:00, 23.52it/s]
 76%|  | 60/79 [00:03<00:00, 23.77it/s]
 80%|  | 63/79 [00:03<00:00, 23.72it/s]
 84%| | 66/79 [00:03<00:00, 24.03it/s]
 87%| | 69/79 [00:03<00:00, 24.06it/s]
 91%| | 72/79 [00:03<00:00, 24.40it/s]
 95%|| 75/79 [00:04<00:00, 25.12it/s]
 99%|| 78/79 [00:04<00:00, 25.73it/s]
100%|| 79/79 [00:04<00:00, 18.76it/s]
2020-06-23 17:32:00,224 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.251981 (0.02721267547607422 s / img per device, on 32 devices)
2020-06-23 17:32:00,244 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:32:00,245 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:32:00,265 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592958730694, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 8, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592958730695, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 8}}


Grad overflow on iteration  6419
Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0

Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0

Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  6419

Grad overflow on iteration  6419

Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0

Using dynamic loss scale of  32768.0
Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0

Grad overflow on iteration  6419


Grad overflow on iteration  6419
Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0

Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0

Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0

Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0



Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0

Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0

Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0
Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0
Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0


Grad overflow on iteration  6419

Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0

Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0

Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0
Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0
Using dynamic loss scale of  32768.0

Grad overflow on iteration  6419

Using dynamic loss scale of  32768.0
Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0

Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0

Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0

Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0

Grad overflow on iteration  6419
Using dynamic loss scale of  32768.0
2020-06-23 17:32:10,809 maskrcnn_benchmark.trainer INFO: eta: 1:10:49  iter: 6420  loss: 0.6725 (0.8007)  loss_classifier: 0.2475 (0.2979)  loss_box_reg: 0.1082 (0.1279)  loss_mask: 0.2639 (0.3121)  loss_objectness: 0.0177 (0.0411)  loss_rpn_box_reg: 0.0092 (0.0215)  time: 0.1078 (0.1266)  data: 0.0013 (0.0191)  lr: 0.160000  max mem: 5155
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:32:12,979 maskrcnn_benchmark.trainer INFO: eta: 1:10:45  iter: 6440  loss: 0.6937 (0.8004)  loss_classifier: 0.2800 (0.2978)  loss_box_reg: 0.0992 (0.1279)  loss_mask: 0.2636 (0.3120)  loss_objectness: 0.0290 (0.0411)  loss_rpn_box_reg: 0.0101 (0.0215)  time: 0.1078 (0.1265)  data: 0.0015 (0.0190)  lr: 0.160000  max mem: 5155
2020-06-23 17:32:15,158 maskrcnn_benchmark.trainer INFO: eta: 1:10:41  iter: 6460  loss: 0.6249 (0.7998)  loss_classifier: 0.2106 (0.2975)  loss_box_reg: 0.0916 (0.1278)  loss_mask: 0.2627 (0.3119)  loss_objectness: 0.0151 (0.0411)  loss_rpn_box_reg: 0.0084 (0.0215)  time: 0.1083 (0.1264)  data: 0.0013 (0.0190)  lr: 0.160000  max mem: 5155
2020-06-23 17:32:17,326 maskrcnn_benchmark.trainer INFO: eta: 1:10:36  iter: 6480  loss: 0.6525 (0.7993)  loss_classifier: 0.2105 (0.2973)  loss_box_reg: 0.1070 (0.1277)  loss_mask: 0.2661 (0.3117)  loss_objectness: 0.0202 (0.0410)  loss_rpn_box_reg: 0.0068 (0.0215)  time: 0.1080 (0.1264)  data: 0.0014 (0.0189)  lr: 0.160000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 17:32:19,498 maskrcnn_benchmark.trainer INFO: eta: 1:10:32  iter: 6500  loss: 0.7099 (0.7990)  loss_classifier: 0.2432 (0.2972)  loss_box_reg: 0.1118 (0.1277)  loss_mask: 0.2786 (0.3117)  loss_objectness: 0.0267 (0.0410)  loss_rpn_box_reg: 0.0103 (0.0215)  time: 0.1082 (0.1263)  data: 0.0014 (0.0188)  lr: 0.160000  max mem: 5155
DONE (t=0.90s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.81s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.28212
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.48384
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.29532
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.16541
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.31087
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.36814
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.26498
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.42459
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.44712
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.26086
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.48674
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.57535
2020-06-23 17:32:21,638 maskrcnn_benchmark.trainer INFO: eta: 1:10:27  iter: 6520  loss: 0.7331 (0.7988)  loss_classifier: 0.2698 (0.2971)  loss_box_reg: 0.1271 (0.1277)  loss_mask: 0.2917 (0.3116)  loss_objectness: 0.0158 (0.0410)  loss_rpn_box_reg: 0.0124 (0.0215)  time: 0.1063 (0.1263)  data: 0.0015 (0.0188)  lr: 0.160000  max mem: 5155
2020-06-23 17:32:23,796 maskrcnn_benchmark.trainer INFO: eta: 1:10:23  iter: 6540  loss: 0.6577 (0.7984)  loss_classifier: 0.2253 (0.2969)  loss_box_reg: 0.0964 (0.1276)  loss_mask: 0.2778 (0.3115)  loss_objectness: 0.0274 (0.0410)  loss_rpn_box_reg: 0.0112 (0.0215)  time: 0.1076 (0.1262)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5155
2020-06-23 17:32:25,960 maskrcnn_benchmark.trainer INFO: eta: 1:10:18  iter: 6560  loss: 0.7180 (0.7982)  loss_classifier: 0.2680 (0.2968)  loss_box_reg: 0.0924 (0.1276)  loss_mask: 0.2707 (0.3114)  loss_objectness: 0.0261 (0.0410)  loss_rpn_box_reg: 0.0115 (0.0215)  time: 0.1083 (0.1262)  data: 0.0015 (0.0187)  lr: 0.160000  max mem: 5155
2020-06-23 17:32:28,130 maskrcnn_benchmark.trainer INFO: eta: 1:10:14  iter: 6580  loss: 0.5966 (0.7976)  loss_classifier: 0.2181 (0.2966)  loss_box_reg: 0.0899 (0.1275)  loss_mask: 0.2626 (0.3112)  loss_objectness: 0.0176 (0.0409)  loss_rpn_box_reg: 0.0095 (0.0215)  time: 0.1082 (0.1261)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:32:30,294 maskrcnn_benchmark.trainer INFO: eta: 1:10:10  iter: 6600  loss: 0.7425 (0.7975)  loss_classifier: 0.2825 (0.2965)  loss_box_reg: 0.1194 (0.1275)  loss_mask: 0.2918 (0.3111)  loss_objectness: 0.0250 (0.0409)  loss_rpn_box_reg: 0.0121 (0.0215)  time: 0.1078 (0.1261)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5155
DONE (t=2.53s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:32:32,460 maskrcnn_benchmark.trainer INFO: eta: 1:10:06  iter: 6620  loss: 0.7118 (0.7973)  loss_classifier: 0.2581 (0.2964)  loss_box_reg: 0.1188 (0.1275)  loss_mask: 0.2850 (0.3111)  loss_objectness: 0.0284 (0.0409)  loss_rpn_box_reg: 0.0149 (0.0215)  time: 0.1084 (0.1260)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5155
2020-06-23 17:32:34,615 maskrcnn_benchmark.trainer INFO: eta: 1:10:01  iter: 6640  loss: 0.6595 (0.7969)  loss_classifier: 0.2753 (0.2963)  loss_box_reg: 0.1097 (0.1274)  loss_mask: 0.2678 (0.3109)  loss_objectness: 0.0168 (0.0408)  loss_rpn_box_reg: 0.0075 (0.0215)  time: 0.1074 (0.1259)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5155
DONE (t=3.04s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.26854
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.45314
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.28122
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11496
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.28659
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.40661
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.25762
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.40150
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.42106
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22239
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.46500
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.57126
2020-06-23 17:32:35,424 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.28212328205276077, segm mAP: 0.26853824915518726
:::MLLOG {"namespace": "", "time_ms": 1592958755424, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.28212328205276077, "SEGM": 0.26853824915518726}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1592958755425, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 7}}
2020-06-23 17:32:36,930 maskrcnn_benchmark.trainer INFO: eta: 1:09:58  iter: 6660  loss: 0.7651 (0.7968)  loss_classifier: 0.2815 (0.2963)  loss_box_reg: 0.1298 (0.1274)  loss_mask: 0.2839 (0.3109)  loss_objectness: 0.0222 (0.0408)  loss_rpn_box_reg: 0.0107 (0.0215)  time: 0.1071 (0.1259)  data: 0.0016 (0.0184)  lr: 0.160000  max mem: 5155
2020-06-23 17:32:39,069 maskrcnn_benchmark.trainer INFO: eta: 1:09:53  iter: 6680  loss: 0.7154 (0.7967)  loss_classifier: 0.2509 (0.2962)  loss_box_reg: 0.1211 (0.1274)  loss_mask: 0.2803 (0.3108)  loss_objectness: 0.0190 (0.0408)  loss_rpn_box_reg: 0.0094 (0.0215)  time: 0.1068 (0.1259)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5155
2020-06-23 17:32:41,225 maskrcnn_benchmark.trainer INFO: eta: 1:09:49  iter: 6700  loss: 0.7223 (0.7964)  loss_classifier: 0.2680 (0.2961)  loss_box_reg: 0.1117 (0.1274)  loss_mask: 0.2766 (0.3107)  loss_objectness: 0.0193 (0.0408)  loss_rpn_box_reg: 0.0134 (0.0215)  time: 0.1073 (0.1258)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5155
2020-06-23 17:32:43,389 maskrcnn_benchmark.trainer INFO: eta: 1:09:45  iter: 6720  loss: 0.7377 (0.7962)  loss_classifier: 0.2580 (0.2960)  loss_box_reg: 0.1170 (0.1274)  loss_mask: 0.2880 (0.3107)  loss_objectness: 0.0240 (0.0407)  loss_rpn_box_reg: 0.0100 (0.0215)  time: 0.1069 (0.1258)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5155
2020-06-23 17:32:45,533 maskrcnn_benchmark.trainer INFO: eta: 1:09:40  iter: 6740  loss: 0.7099 (0.7961)  loss_classifier: 0.2596 (0.2960)  loss_box_reg: 0.1301 (0.1274)  loss_mask: 0.3049 (0.3106)  loss_objectness: 0.0208 (0.0407)  loss_rpn_box_reg: 0.0094 (0.0214)  time: 0.1073 (0.1257)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5155
2020-06-23 17:32:47,714 maskrcnn_benchmark.trainer INFO: eta: 1:09:36  iter: 6760  loss: 0.5760 (0.7956)  loss_classifier: 0.2121 (0.2958)  loss_box_reg: 0.0935 (0.1273)  loss_mask: 0.2449 (0.3104)  loss_objectness: 0.0171 (0.0406)  loss_rpn_box_reg: 0.0060 (0.0214)  time: 0.1092 (0.1257)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5155
2020-06-23 17:32:49,852 maskrcnn_benchmark.trainer INFO: eta: 1:09:32  iter: 6780  loss: 0.5614 (0.7951)  loss_classifier: 0.1943 (0.2956)  loss_box_reg: 0.0741 (0.1272)  loss_mask: 0.2565 (0.3103)  loss_objectness: 0.0209 (0.0406)  loss_rpn_box_reg: 0.0067 (0.0214)  time: 0.1067 (0.1256)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5155
2020-06-23 17:32:52,000 maskrcnn_benchmark.trainer INFO: eta: 1:09:27  iter: 6800  loss: 0.7308 (0.7950)  loss_classifier: 0.2755 (0.2955)  loss_box_reg: 0.1192 (0.1272)  loss_mask: 0.2825 (0.3103)  loss_objectness: 0.0206 (0.0406)  loss_rpn_box_reg: 0.0117 (0.0214)  time: 0.1070 (0.1255)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5155
2020-06-23 17:32:54,159 maskrcnn_benchmark.trainer INFO: eta: 1:09:23  iter: 6820  loss: 0.7465 (0.7948)  loss_classifier: 0.2883 (0.2955)  loss_box_reg: 0.1154 (0.1272)  loss_mask: 0.2663 (0.3102)  loss_objectness: 0.0247 (0.0406)  loss_rpn_box_reg: 0.0140 (0.0214)  time: 0.1078 (0.1255)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5155
2020-06-23 17:32:56,329 maskrcnn_benchmark.trainer INFO: eta: 1:09:19  iter: 6840  loss: 0.6311 (0.7945)  loss_classifier: 0.2328 (0.2953)  loss_box_reg: 0.0966 (0.1272)  loss_mask: 0.2722 (0.3101)  loss_objectness: 0.0225 (0.0405)  loss_rpn_box_reg: 0.0133 (0.0214)  time: 0.1068 (0.1254)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5155
2020-06-23 17:32:58,466 maskrcnn_benchmark.trainer INFO: eta: 1:09:15  iter: 6860  loss: 0.6241 (0.7940)  loss_classifier: 0.2342 (0.2951)  loss_box_reg: 0.0972 (0.1271)  loss_mask: 0.2722 (0.3099)  loss_objectness: 0.0179 (0.0405)  loss_rpn_box_reg: 0.0075 (0.0214)  time: 0.1067 (0.1254)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:00,620 maskrcnn_benchmark.trainer INFO: eta: 1:09:11  iter: 6880  loss: 0.6870 (0.7936)  loss_classifier: 0.2256 (0.2950)  loss_box_reg: 0.1157 (0.1270)  loss_mask: 0.2623 (0.3098)  loss_objectness: 0.0165 (0.0404)  loss_rpn_box_reg: 0.0100 (0.0213)  time: 0.1074 (0.1253)  data: 0.0014 (0.0179)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:02,759 maskrcnn_benchmark.trainer INFO: eta: 1:09:06  iter: 6900  loss: 0.6943 (0.7933)  loss_classifier: 0.2507 (0.2948)  loss_box_reg: 0.1108 (0.1270)  loss_mask: 0.2427 (0.3097)  loss_objectness: 0.0236 (0.0404)  loss_rpn_box_reg: 0.0176 (0.0213)  time: 0.1069 (0.1253)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:04,901 maskrcnn_benchmark.trainer INFO: eta: 1:09:02  iter: 6920  loss: 0.5579 (0.7927)  loss_classifier: 0.2075 (0.2946)  loss_box_reg: 0.0805 (0.1269)  loss_mask: 0.2517 (0.3095)  loss_objectness: 0.0204 (0.0403)  loss_rpn_box_reg: 0.0043 (0.0213)  time: 0.1065 (0.1252)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:07,039 maskrcnn_benchmark.trainer INFO: eta: 1:08:58  iter: 6940  loss: 0.6586 (0.7924)  loss_classifier: 0.2352 (0.2945)  loss_box_reg: 0.1086 (0.1269)  loss_mask: 0.2643 (0.3094)  loss_objectness: 0.0290 (0.0403)  loss_rpn_box_reg: 0.0102 (0.0214)  time: 0.1068 (0.1252)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:09,198 maskrcnn_benchmark.trainer INFO: eta: 1:08:54  iter: 6960  loss: 0.6148 (0.7921)  loss_classifier: 0.2127 (0.2943)  loss_box_reg: 0.0935 (0.1268)  loss_mask: 0.2703 (0.3093)  loss_objectness: 0.0241 (0.0403)  loss_rpn_box_reg: 0.0070 (0.0214)  time: 0.1077 (0.1251)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:11,357 maskrcnn_benchmark.trainer INFO: eta: 1:08:50  iter: 6980  loss: 0.6260 (0.7917)  loss_classifier: 0.2356 (0.2942)  loss_box_reg: 0.0965 (0.1268)  loss_mask: 0.2588 (0.3092)  loss_objectness: 0.0187 (0.0403)  loss_rpn_box_reg: 0.0085 (0.0213)  time: 0.1073 (0.1251)  data: 0.0015 (0.0176)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:13,528 maskrcnn_benchmark.trainer INFO: eta: 1:08:46  iter: 7000  loss: 0.6238 (0.7914)  loss_classifier: 0.2138 (0.2940)  loss_box_reg: 0.1045 (0.1267)  loss_mask: 0.2648 (0.3091)  loss_objectness: 0.0216 (0.0403)  loss_rpn_box_reg: 0.0077 (0.0213)  time: 0.1086 (0.1250)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:15,688 maskrcnn_benchmark.trainer INFO: eta: 1:08:41  iter: 7020  loss: 0.7083 (0.7912)  loss_classifier: 0.2454 (0.2939)  loss_box_reg: 0.1106 (0.1267)  loss_mask: 0.2952 (0.3090)  loss_objectness: 0.0325 (0.0403)  loss_rpn_box_reg: 0.0141 (0.0213)  time: 0.1079 (0.1250)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:17,839 maskrcnn_benchmark.trainer INFO: eta: 1:08:37  iter: 7040  loss: 0.5680 (0.7909)  loss_classifier: 0.2165 (0.2938)  loss_box_reg: 0.0881 (0.1266)  loss_mask: 0.2519 (0.3089)  loss_objectness: 0.0191 (0.0402)  loss_rpn_box_reg: 0.0112 (0.0214)  time: 0.1070 (0.1249)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:19,997 maskrcnn_benchmark.trainer INFO: eta: 1:08:33  iter: 7060  loss: 0.7461 (0.7907)  loss_classifier: 0.2404 (0.2936)  loss_box_reg: 0.1122 (0.1266)  loss_mask: 0.2803 (0.3088)  loss_objectness: 0.0198 (0.0402)  loss_rpn_box_reg: 0.0163 (0.0214)  time: 0.1075 (0.1249)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:22,139 maskrcnn_benchmark.trainer INFO: eta: 1:08:29  iter: 7080  loss: 0.5817 (0.7902)  loss_classifier: 0.2145 (0.2935)  loss_box_reg: 0.1112 (0.1266)  loss_mask: 0.2611 (0.3087)  loss_objectness: 0.0161 (0.0402)  loss_rpn_box_reg: 0.0065 (0.0213)  time: 0.1068 (0.1248)  data: 0.0015 (0.0174)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:24,306 maskrcnn_benchmark.trainer INFO: eta: 1:08:25  iter: 7100  loss: 0.6719 (0.7900)  loss_classifier: 0.2545 (0.2934)  loss_box_reg: 0.1069 (0.1265)  loss_mask: 0.2544 (0.3086)  loss_objectness: 0.0217 (0.0402)  loss_rpn_box_reg: 0.0135 (0.0213)  time: 0.1078 (0.1248)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:26,465 maskrcnn_benchmark.trainer INFO: eta: 1:08:21  iter: 7120  loss: 0.6964 (0.7898)  loss_classifier: 0.2491 (0.2933)  loss_box_reg: 0.1151 (0.1265)  loss_mask: 0.2664 (0.3085)  loss_objectness: 0.0218 (0.0401)  loss_rpn_box_reg: 0.0080 (0.0214)  time: 0.1077 (0.1247)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:28,613 maskrcnn_benchmark.trainer INFO: eta: 1:08:17  iter: 7140  loss: 0.6586 (0.7895)  loss_classifier: 0.2298 (0.2932)  loss_box_reg: 0.1147 (0.1265)  loss_mask: 0.2764 (0.3084)  loss_objectness: 0.0318 (0.0401)  loss_rpn_box_reg: 0.0124 (0.0213)  time: 0.1079 (0.1247)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:30,782 maskrcnn_benchmark.trainer INFO: eta: 1:08:13  iter: 7160  loss: 0.5880 (0.7890)  loss_classifier: 0.2287 (0.2930)  loss_box_reg: 0.1042 (0.1264)  loss_mask: 0.2515 (0.3082)  loss_objectness: 0.0184 (0.0401)  loss_rpn_box_reg: 0.0076 (0.0213)  time: 0.1086 (0.1246)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:32,936 maskrcnn_benchmark.trainer INFO: eta: 1:08:09  iter: 7180  loss: 0.6635 (0.7886)  loss_classifier: 0.2126 (0.2928)  loss_box_reg: 0.1239 (0.1264)  loss_mask: 0.2448 (0.3081)  loss_objectness: 0.0269 (0.0401)  loss_rpn_box_reg: 0.0105 (0.0213)  time: 0.1067 (0.1246)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:35,082 maskrcnn_benchmark.trainer INFO: eta: 1:08:05  iter: 7200  loss: 0.6616 (0.7882)  loss_classifier: 0.2327 (0.2926)  loss_box_reg: 0.0922 (0.1263)  loss_mask: 0.2614 (0.3079)  loss_objectness: 0.0214 (0.0400)  loss_rpn_box_reg: 0.0126 (0.0213)  time: 0.1064 (0.1246)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:37,229 maskrcnn_benchmark.trainer INFO: eta: 1:08:01  iter: 7220  loss: 0.7218 (0.7881)  loss_classifier: 0.2498 (0.2925)  loss_box_reg: 0.1057 (0.1263)  loss_mask: 0.3073 (0.3079)  loss_objectness: 0.0270 (0.0400)  loss_rpn_box_reg: 0.0094 (0.0213)  time: 0.1064 (0.1245)  data: 0.0015 (0.0171)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:39,375 maskrcnn_benchmark.trainer INFO: eta: 1:07:57  iter: 7240  loss: 0.6072 (0.7876)  loss_classifier: 0.2376 (0.2924)  loss_box_reg: 0.0994 (0.1262)  loss_mask: 0.2451 (0.3078)  loss_objectness: 0.0143 (0.0400)  loss_rpn_box_reg: 0.0078 (0.0213)  time: 0.1074 (0.1245)  data: 0.0014 (0.0171)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:41,512 maskrcnn_benchmark.trainer INFO: eta: 1:07:53  iter: 7260  loss: 0.6175 (0.7873)  loss_classifier: 0.2137 (0.2922)  loss_box_reg: 0.0876 (0.1262)  loss_mask: 0.2577 (0.3077)  loss_objectness: 0.0167 (0.0399)  loss_rpn_box_reg: 0.0085 (0.0213)  time: 0.1073 (0.1244)  data: 0.0014 (0.0170)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:43,657 maskrcnn_benchmark.trainer INFO: eta: 1:07:49  iter: 7280  loss: 0.6614 (0.7870)  loss_classifier: 0.2314 (0.2921)  loss_box_reg: 0.1114 (0.1261)  loss_mask: 0.2499 (0.3076)  loss_objectness: 0.0232 (0.0399)  loss_rpn_box_reg: 0.0068 (0.0213)  time: 0.1066 (0.1244)  data: 0.0014 (0.0170)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:45,811 maskrcnn_benchmark.trainer INFO: eta: 1:07:45  iter: 7300  loss: 0.6744 (0.7867)  loss_classifier: 0.2331 (0.2919)  loss_box_reg: 0.1392 (0.1261)  loss_mask: 0.2768 (0.3075)  loss_objectness: 0.0233 (0.0399)  loss_rpn_box_reg: 0.0088 (0.0213)  time: 0.1074 (0.1243)  data: 0.0015 (0.0169)  lr: 0.160000  max mem: 5155
2020-06-23 17:33:47,955 maskrcnn_benchmark.trainer INFO: eta: 1:07:41  iter: 7320  loss: 0.5520 (0.7862)  loss_classifier: 0.2102 (0.2917)  loss_box_reg: 0.0879 (0.1260)  loss_mask: 0.2550 (0.3073)  loss_objectness: 0.0175 (0.0398)  loss_rpn_box_reg: 0.0103 (0.0213)  time: 0.1068 (0.1243)  data: 0.0014 (0.0169)  lr: 0.160000  max mem: 5155
:::MLLOG {"namespace": "", "time_ms": 1592958829688, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 8}}
:::MLLOG {"namespace": "", "time_ms": 1592958829688, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 8}}
:::MLLOG {"namespace": "", "time_ms": 1592958829688, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 8}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 17:33:49,925 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.27s)
Done (t=0.28s)
creating index...
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
Done (t=0.27s)
creating index...
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
2020-06-23 17:33:50,230 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:14,  4.41it/s]
 20%|        | 16/79 [00:01<00:10,  5.88it/s]
 24%|       | 19/79 [00:01<00:07,  7.67it/s]
 28%|       | 22/79 [00:01<00:05,  9.74it/s]
 32%|      | 25/79 [00:01<00:04, 12.03it/s]
 35%|      | 28/79 [00:01<00:03, 14.48it/s]
 39%|      | 31/79 [00:01<00:02, 16.56it/s]
 43%|     | 34/79 [00:02<00:02, 18.63it/s]
 47%|     | 37/79 [00:02<00:02, 20.52it/s]
 51%|     | 40/79 [00:02<00:01, 21.89it/s]
 54%|    | 43/79 [00:02<00:01, 22.94it/s]
 58%|    | 46/79 [00:02<00:01, 23.74it/s]
 62%|   | 49/79 [00:02<00:01, 24.53it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.80it/s]
 35%|      | 28/79 [00:01<00:03, 14.13it/s]
 39%|      | 31/79 [00:02<00:02, 16.36it/s]
 43%|     | 34/79 [00:02<00:02, 18.29it/s]
 47%|     | 37/79 [00:02<00:02, 19.88it/s]
 51%|     | 40/79 [00:02<00:01, 21.43it/s]
 54%|    | 43/79 [00:02<00:01, 22.38it/s]
 58%|    | 46/79 [00:02<00:01, 23.36it/s]
 62%|   | 49/79 [00:02<00:01, 23.90it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:15,  4.39it/s]
 20%|        | 16/79 [00:01<00:10,  5.85it/s]
 24%|       | 19/79 [00:01<00:07,  7.63it/s]
 28%|       | 22/79 [00:01<00:05,  9.65it/s]
 32%|      | 25/79 [00:01<00:04, 11.92it/s]
 35%|      | 28/79 [00:01<00:03, 14.24it/s]
 39%|      | 31/79 [00:01<00:02, 16.51it/s]
 43%|     | 34/79 [00:02<00:02, 18.52it/s]
 47%|     | 37/79 [00:02<00:02, 20.59it/s]
 51%|     | 40/79 [00:02<00:01, 21.54it/s]
 54%|    | 43/79 [00:02<00:01, 22.62it/s]
 58%|    | 46/79 [00:02<00:01, 23.25it/s]
 62%|   | 49/79 [00:02<00:01, 24.10it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.40it/s]
 32%|      | 25/79 [00:01<00:04, 11.59it/s]
 35%|      | 28/79 [00:01<00:03, 13.88it/s]
 39%|      | 31/79 [00:02<00:02, 16.17it/s]
 43%|     | 34/79 [00:02<00:02, 18.15it/s]
 47%|     | 37/79 [00:02<00:02, 19.94it/s]
 51%|     | 40/79 [00:02<00:01, 21.45it/s]
 54%|    | 43/79 [00:02<00:01, 22.51it/s]
 58%|    | 46/79 [00:02<00:01, 23.26it/s]
 62%|   | 49/79 [00:02<00:01, 24.02it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.83it/s]
 24%|       | 19/79 [00:01<00:07,  7.61it/s]
 28%|       | 22/79 [00:01<00:05,  9.64it/s]
 32%|      | 25/79 [00:01<00:04, 11.85it/s]
 35%|      | 28/79 [00:01<00:03, 13.99it/s]
 39%|      | 31/79 [00:02<00:02, 16.17it/s]
 43%|     | 34/79 [00:02<00:02, 18.13it/s]
 47%|     | 37/79 [00:02<00:02, 19.96it/s]
 51%|     | 40/79 [00:02<00:01, 21.44it/s]
 54%|    | 43/79 [00:02<00:01, 22.59it/s]
 58%|    | 46/79 [00:02<00:01, 23.56it/s]
 62%|   | 49/79 [00:02<00:01, 24.22it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  4%|         | 3/79 [00:00<00:44,  1.70it/s]
  8%|         | 6/79 [00:01<00:30,  2.36it/s]
 11%|        | 9/79 [00:01<00:21,  3.23it/s]
 15%|        | 12/79 [00:01<00:15,  4.37it/s]
 19%|        | 15/79 [00:01<00:11,  5.79it/s]
 23%|       | 18/79 [00:01<00:08,  7.53it/s]
 27%|       | 21/79 [00:01<00:06,  9.53it/s]
 30%|       | 24/79 [00:01<00:04, 11.71it/s]
 34%|      | 27/79 [00:01<00:03, 13.91it/s]
 38%|      | 30/79 [00:02<00:03, 16.22it/s]
 42%|     | 33/79 [00:02<00:02, 18.13it/s]
 46%|     | 36/79 [00:02<00:02, 19.77it/s]
 49%|     | 39/79 [00:02<00:01, 20.98it/s]
 53%|    | 42/79 [00:02<00:01, 22.14it/s]
 57%|    | 45/79 [00:02<00:01, 22.94it/s]
 61%|    | 48/79 [00:02<00:01, 23.38it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.38it/s]
 28%|       | 22/79 [00:01<00:06,  9.42it/s]
 32%|      | 25/79 [00:01<00:04, 11.67it/s]
 35%|      | 28/79 [00:01<00:03, 13.92it/s]
 39%|      | 31/79 [00:02<00:02, 16.27it/s]
 43%|     | 34/79 [00:02<00:02, 18.26it/s]
 47%|     | 37/79 [00:02<00:02, 20.06it/s]
 51%|     | 40/79 [00:02<00:01, 21.48it/s]
 54%|    | 43/79 [00:02<00:01, 22.73it/s]
 58%|    | 46/79 [00:02<00:01, 23.56it/s]
 62%|   | 49/79 [00:02<00:01, 24.05it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.36it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  9.04it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.57it/s]
 39%|      | 31/79 [00:02<00:03, 15.82it/s]
 43%|     | 34/79 [00:02<00:02, 18.01it/s]
 47%|     | 37/79 [00:02<00:02, 19.81it/s]
 51%|     | 40/79 [00:02<00:01, 21.25it/s]
 54%|    | 43/79 [00:02<00:01, 22.61it/s]
 58%|    | 46/79 [00:02<00:01, 23.57it/s]
 62%|   | 49/79 [00:02<00:01, 24.10it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:11,  5.71it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.44it/s]
 32%|      | 25/79 [00:01<00:04, 11.60it/s]
 35%|      | 28/79 [00:01<00:03, 13.92it/s]
 39%|      | 31/79 [00:02<00:02, 16.13it/s]
 43%|     | 34/79 [00:02<00:02, 18.08it/s]
 47%|     | 37/79 [00:02<00:02, 19.75it/s]
 51%|     | 40/79 [00:02<00:01, 21.24it/s]
 54%|    | 43/79 [00:02<00:01, 22.40it/s]
 58%|    | 46/79 [00:02<00:01, 23.08it/s]
 62%|   | 49/79 [00:02<00:01, 23.90it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.55it/s]
 28%|       | 22/79 [00:01<00:05,  9.55it/s]
 32%|      | 25/79 [00:01<00:04, 11.76it/s]
 35%|      | 28/79 [00:01<00:03, 13.99it/s]
 39%|      | 31/79 [00:02<00:02, 16.12it/s]
 43%|     | 34/79 [00:02<00:02, 18.17it/s]
 47%|     | 37/79 [00:02<00:02, 19.90it/s]
 51%|     | 40/79 [00:02<00:01, 21.10it/s]
 54%|    | 43/79 [00:02<00:01, 22.14it/s]
 58%|    | 46/79 [00:02<00:01, 22.97it/s]
 62%|   | 49/79 [00:02<00:01, 23.57it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.31it/s]
 32%|      | 25/79 [00:01<00:04, 11.51it/s]
 35%|      | 28/79 [00:01<00:03, 13.84it/s]
 39%|      | 31/79 [00:02<00:02, 16.06it/s]
 43%|     | 34/79 [00:02<00:02, 18.16it/s]
 47%|     | 37/79 [00:02<00:02, 19.83it/s]
 51%|     | 40/79 [00:02<00:01, 21.37it/s]
 54%|    | 43/79 [00:02<00:01, 22.60it/s]
 58%|    | 46/79 [00:02<00:01, 23.61it/s]
 62%|   | 49/79 [00:02<00:01, 24.39it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.22it/s]
 20%|        | 16/79 [00:01<00:11,  5.62it/s]
 24%|       | 19/79 [00:01<00:08,  7.35it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.53it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:02, 16.00it/s]
 43%|     | 34/79 [00:02<00:02, 18.03it/s]
 47%|     | 37/79 [00:02<00:02, 19.91it/s]
 51%|     | 40/79 [00:02<00:01, 21.26it/s]
 54%|    | 43/79 [00:02<00:01, 22.40it/s]
 58%|    | 46/79 [00:02<00:01, 23.21it/s]
 62%|   | 49/79 [00:02<00:01, 24.01it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.14it/s]
 28%|       | 22/79 [00:01<00:06,  9.13it/s]
 32%|      | 25/79 [00:01<00:04, 11.33it/s]
 35%|      | 28/79 [00:01<00:03, 13.67it/s]
 39%|      | 31/79 [00:02<00:02, 16.02it/s]
 43%|     | 34/79 [00:02<00:02, 18.05it/s]
 47%|     | 37/79 [00:02<00:02, 19.94it/s]
 51%|     | 40/79 [00:02<00:01, 21.40it/s]
 54%|    | 43/79 [00:02<00:01, 22.66it/s]
 58%|    | 46/79 [00:02<00:01, 23.34it/s]
 62%|   | 49/79 [00:02<00:01, 24.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.34it/s]
 28%|       | 22/79 [00:01<00:06,  9.34it/s]
 32%|      | 25/79 [00:01<00:04, 11.49it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:03, 15.90it/s]
 43%|     | 34/79 [00:02<00:02, 17.97it/s]
 47%|     | 37/79 [00:02<00:02, 19.69it/s]
 51%|     | 40/79 [00:02<00:01, 21.10it/s]
 54%|    | 43/79 [00:02<00:01, 22.20it/s]
 58%|    | 46/79 [00:02<00:01, 23.10it/s]
 62%|   | 49/79 [00:02<00:01, 23.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.46it/s]
 28%|       | 22/79 [00:01<00:06,  9.48it/s]
 32%|      | 25/79 [00:01<00:04, 11.63it/s]
 35%|      | 28/79 [00:01<00:03, 13.85it/s]
 39%|      | 31/79 [00:02<00:03, 15.93it/s]
 43%|     | 34/79 [00:02<00:02, 17.91it/s]
 47%|     | 37/79 [00:02<00:02, 19.53it/s]
 51%|     | 40/79 [00:02<00:01, 21.15it/s]
 54%|    | 43/79 [00:02<00:01, 22.35it/s]
 58%|    | 46/79 [00:02<00:01, 22.97it/s]
 62%|   | 49/79 [00:02<00:01, 23.68it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.03it/s]
 32%|      | 25/79 [00:01<00:04, 11.20it/s]
 35%|      | 28/79 [00:01<00:03, 13.53it/s]
 39%|      | 31/79 [00:02<00:03, 15.81it/s]
 43%|     | 34/79 [00:02<00:02, 17.84it/s]
 47%|     | 37/79 [00:02<00:02, 19.71it/s]
 51%|     | 40/79 [00:02<00:01, 21.16it/s]
 54%|    | 43/79 [00:02<00:01, 22.38it/s]
 58%|    | 46/79 [00:02<00:01, 23.13it/s]
 62%|   | 49/79 [00:02<00:01, 23.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.18it/s]
 32%|      | 25/79 [00:01<00:04, 11.35it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.81it/s]
 43%|     | 34/79 [00:02<00:02, 17.80it/s]
 47%|     | 37/79 [00:02<00:02, 19.57it/s]
 51%|     | 40/79 [00:02<00:01, 21.11it/s]
 54%|    | 43/79 [00:02<00:01, 22.47it/s]
 58%|    | 46/79 [00:02<00:01, 23.25it/s]
 62%|   | 49/79 [00:02<00:01, 23.92it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.36it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  8.96it/s]
 32%|      | 25/79 [00:01<00:04, 11.16it/s]
 35%|      | 28/79 [00:01<00:03, 13.42it/s]
 39%|      | 31/79 [00:02<00:03, 15.80it/s]
 43%|     | 34/79 [00:02<00:02, 17.81it/s]
 47%|     | 37/79 [00:02<00:02, 19.50it/s]
 51%|     | 40/79 [00:02<00:01, 21.10it/s]
 54%|    | 43/79 [00:02<00:01, 22.45it/s]
 58%|    | 46/79 [00:02<00:01, 23.22it/s]
 62%|   | 49/79 [00:02<00:01, 23.75it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.17it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.25it/s]
 28%|       | 22/79 [00:01<00:06,  9.21it/s]
 32%|      | 25/79 [00:01<00:04, 11.36it/s]
 35%|      | 28/79 [00:01<00:03, 13.60it/s]
 39%|      | 31/79 [00:02<00:03, 15.76it/s]
 43%|     | 34/79 [00:02<00:02, 17.73it/s]
 47%|     | 37/79 [00:02<00:02, 19.32it/s]
 51%|     | 40/79 [00:02<00:01, 20.76it/s]
 54%|    | 43/79 [00:02<00:01, 22.02it/s]
 58%|    | 46/79 [00:02<00:01, 22.69it/s]
 62%|   | 49/79 [00:02<00:01, 23.24it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.07it/s]
 16%|        | 13/79 [00:01<00:15,  4.16it/s]
 20%|        | 16/79 [00:01<00:11,  5.56it/s]
 24%|       | 19/79 [00:01<00:08,  7.26it/s]
 28%|       | 22/79 [00:01<00:06,  9.21it/s]
 32%|      | 25/79 [00:01<00:04, 11.37it/s]
 35%|      | 28/79 [00:01<00:03, 13.63it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.79it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.94it/s]
 54%|    | 43/79 [00:02<00:01, 22.10it/s]
 58%|    | 46/79 [00:02<00:01, 22.92it/s]
 62%|   | 49/79 [00:02<00:01, 23.57it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.30it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.90it/s]
 32%|      | 25/79 [00:01<00:04, 11.05it/s]
 35%|      | 28/79 [00:01<00:03, 13.32it/s]
 39%|      | 31/79 [00:02<00:03, 15.58it/s]
 43%|     | 34/79 [00:02<00:02, 17.72it/s]
 47%|     | 37/79 [00:02<00:02, 19.61it/s]
 51%|     | 40/79 [00:02<00:01, 20.94it/s]
 54%|    | 43/79 [00:02<00:01, 22.11it/s]
 58%|    | 46/79 [00:02<00:01, 22.74it/s]
 62%|   | 49/79 [00:02<00:01, 23.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  4%|         | 3/79 [00:01<00:49,  1.55it/s]
  8%|         | 6/79 [00:01<00:33,  2.15it/s]
 11%|        | 9/79 [00:01<00:23,  2.96it/s]
 15%|        | 12/79 [00:01<00:16,  4.03it/s]
 19%|        | 15/79 [00:01<00:11,  5.40it/s]
 23%|       | 18/79 [00:01<00:08,  7.07it/s]
 27%|       | 21/79 [00:01<00:06,  9.02it/s]
 30%|       | 24/79 [00:01<00:04, 11.16it/s]
 34%|      | 27/79 [00:01<00:03, 13.38it/s]
 38%|      | 30/79 [00:02<00:03, 15.51it/s]
 42%|     | 33/79 [00:02<00:02, 17.43it/s]
 46%|     | 36/79 [00:02<00:02, 19.05it/s]
 49%|     | 39/79 [00:02<00:01, 20.40it/s]
 53%|    | 42/79 [00:02<00:01, 21.53it/s]
 57%|    | 45/79 [00:02<00:01, 22.31it/s]
 61%|    | 48/79 [00:02<00:01, 23.07it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.08it/s]
 28%|       | 22/79 [00:01<00:06,  9.04it/s]
 32%|      | 25/79 [00:01<00:04, 11.22it/s]
 35%|      | 28/79 [00:01<00:03, 13.40it/s]
 39%|      | 31/79 [00:02<00:03, 15.60it/s]
 43%|     | 34/79 [00:02<00:02, 17.55it/s]
 47%|     | 37/79 [00:02<00:02, 19.35it/s]
 51%|     | 40/79 [00:02<00:01, 20.65it/s]
 54%|    | 43/79 [00:02<00:01, 21.97it/s]
 58%|    | 46/79 [00:02<00:01, 22.78it/s]
 62%|   | 49/79 [00:02<00:01, 23.39it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:30,  2.40it/s]
 13%|        | 10/79 [00:01<00:20,  3.29it/s]
 16%|        | 13/79 [00:01<00:14,  4.44it/s]
 20%|        | 16/79 [00:01<00:10,  5.92it/s]
 24%|       | 19/79 [00:01<00:07,  7.68it/s]
 28%|       | 22/79 [00:01<00:05,  9.75it/s]
 32%|      | 25/79 [00:01<00:04, 11.95it/s]
 35%|      | 28/79 [00:01<00:03, 14.27it/s]
 39%|      | 31/79 [00:02<00:02, 16.52it/s]
 43%|     | 34/79 [00:02<00:02, 18.53it/s]
 47%|     | 37/79 [00:02<00:02, 20.22it/s]
 51%|     | 40/79 [00:02<00:01, 21.69it/s]
 54%|    | 43/79 [00:02<00:01, 22.92it/s]
 58%|    | 46/79 [00:02<00:01, 23.61it/s]
 62%|   | 49/79 [00:02<00:01, 20.82it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.10it/s]
 28%|       | 22/79 [00:01<00:06,  9.03it/s]
 32%|      | 25/79 [00:01<00:04, 11.18it/s]
 35%|      | 28/79 [00:01<00:03, 13.44it/s]
 39%|      | 31/79 [00:02<00:03, 15.55it/s]
 43%|     | 34/79 [00:02<00:02, 17.48it/s]
 47%|     | 37/79 [00:02<00:02, 19.21it/s]
 51%|     | 40/79 [00:02<00:01, 20.65it/s]
 54%|    | 43/79 [00:02<00:01, 21.63it/s]
 58%|    | 46/79 [00:02<00:01, 22.62it/s]
 62%|   | 49/79 [00:02<00:01, 23.38it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  8.99it/s]
 32%|      | 25/79 [00:01<00:04, 11.07it/s]
 35%|      | 28/79 [00:02<00:03, 13.26it/s]
 39%|      | 31/79 [00:02<00:03, 15.48it/s]
 43%|     | 34/79 [00:02<00:02, 17.45it/s]
 47%|     | 37/79 [00:02<00:02, 19.23it/s]
 51%|     | 40/79 [00:02<00:01, 20.55it/s]
 54%|    | 43/79 [00:02<00:01, 21.50it/s]
 58%|    | 46/79 [00:02<00:01, 22.28it/s]
 62%|   | 49/79 [00:02<00:01, 22.82it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  6.98it/s]
 28%|       | 22/79 [00:01<00:06,  8.86it/s]
 32%|      | 25/79 [00:01<00:04, 10.99it/s]
 35%|      | 28/79 [00:02<00:03, 13.21it/s]
 39%|      | 31/79 [00:02<00:03, 15.37it/s]
 43%|     | 34/79 [00:02<00:02, 17.35it/s]
 47%|     | 37/79 [00:02<00:02, 19.14it/s]
 51%|     | 40/79 [00:02<00:01, 20.57it/s]
 54%|    | 43/79 [00:02<00:01, 21.57it/s]
 58%|    | 46/79 [00:02<00:01, 22.38it/s]
 62%|   | 49/79 [00:02<00:01, 22.99it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.97it/s]
 20%|        | 16/79 [00:01<00:11,  5.31it/s]
 24%|       | 19/79 [00:01<00:08,  6.96it/s]
 28%|       | 22/79 [00:01<00:06,  8.88it/s]
 32%|      | 25/79 [00:01<00:04, 10.95it/s]
 35%|      | 28/79 [00:02<00:03, 13.16it/s]
 39%|      | 31/79 [00:02<00:03, 15.27it/s]
 43%|     | 34/79 [00:02<00:02, 17.16it/s]
 47%|     | 37/79 [00:02<00:02, 18.82it/s]
 51%|     | 40/79 [00:02<00:01, 20.12it/s]
 54%|    | 43/79 [00:02<00:01, 21.27it/s]
 58%|    | 46/79 [00:02<00:01, 21.90it/s]
 62%|   | 49/79 [00:02<00:01, 22.60it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  4%|         | 3/79 [00:00<00:48,  1.57it/s]
  8%|         | 6/79 [00:01<00:33,  2.18it/s]
 11%|        | 9/79 [00:01<00:23,  3.01it/s]
 15%|        | 12/79 [00:01<00:16,  4.09it/s]
 19%|        | 15/79 [00:01<00:11,  5.45it/s]
 23%|       | 18/79 [00:01<00:08,  7.13it/s]
 27%|       | 21/79 [00:01<00:06,  9.07it/s]
 30%|       | 24/79 [00:01<00:05, 10.70it/s]
 34%|      | 27/79 [00:02<00:04, 12.89it/s]
 38%|      | 30/79 [00:02<00:03, 14.97it/s]
 42%|     | 33/79 [00:02<00:02, 17.06it/s]
 46%|     | 36/79 [00:02<00:02, 18.73it/s]
 49%|     | 39/79 [00:02<00:02, 19.89it/s]
 53%|    | 42/79 [00:02<00:01, 20.92it/s]
 57%|    | 45/79 [00:02<00:01, 21.96it/s]
 61%|    | 48/79 [00:02<00:01, 22.65it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.39it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.00it/s]
 35%|      | 28/79 [00:02<00:03, 13.17it/s]
 39%|      | 31/79 [00:02<00:03, 15.36it/s]
 43%|     | 34/79 [00:02<00:02, 17.13it/s]
 47%|     | 37/79 [00:02<00:02, 18.76it/s]
 51%|     | 40/79 [00:02<00:01, 20.14it/s]
 54%|    | 43/79 [00:02<00:01, 21.39it/s]
 58%|    | 46/79 [00:02<00:01, 22.03it/s]
 62%|   | 49/79 [00:02<00:01, 22.62it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  6.99it/s]
 28%|       | 22/79 [00:01<00:06,  8.92it/s]
 32%|      | 25/79 [00:01<00:04, 10.99it/s]
 35%|      | 28/79 [00:02<00:03, 13.15it/s]
 39%|      | 31/79 [00:02<00:03, 15.18it/s]
 43%|     | 34/79 [00:02<00:02, 17.05it/s]
 47%|     | 37/79 [00:02<00:02, 18.63it/s]
 51%|     | 40/79 [00:02<00:01, 19.95it/s]
 54%|    | 43/79 [00:02<00:01, 20.92it/s]
 58%|    | 46/79 [00:02<00:01, 21.83it/s]
 62%|   | 49/79 [00:02<00:01, 22.13it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.01it/s]
  5%|         | 4/79 [00:01<00:52,  1.42it/s]
  9%|         | 7/79 [00:01<00:36,  1.98it/s]
 13%|        | 10/79 [00:01<00:25,  2.74it/s]
 16%|        | 13/79 [00:01<00:17,  3.73it/s]
 20%|        | 16/79 [00:01<00:12,  5.02it/s]
 24%|       | 19/79 [00:01<00:09,  6.60it/s]
 28%|       | 22/79 [00:01<00:06,  8.43it/s]
 32%|      | 25/79 [00:01<00:05, 10.53it/s]
 35%|      | 28/79 [00:02<00:04, 12.68it/s]
 39%|      | 31/79 [00:02<00:03, 14.93it/s]
 43%|     | 34/79 [00:02<00:02, 17.01it/s]
 47%|     | 37/79 [00:02<00:02, 18.70it/s]
 51%|     | 40/79 [00:02<00:01, 20.20it/s]
 54%|    | 43/79 [00:02<00:01, 21.32it/s]
 58%|    | 46/79 [00:02<00:01, 22.00it/s]
 62%|   | 49/79 [00:02<00:01, 22.65it/s]
 66%|   | 52/79 [00:03<00:01, 24.40it/s]
 70%|   | 55/79 [00:02<00:00, 24.80it/s]
 73%|  | 58/79 [00:03<00:00, 24.86it/s]
 77%|  | 61/79 [00:03<00:00, 25.26it/s]
 81%|  | 64/79 [00:03<00:00, 25.24it/s]
 85%| | 67/79 [00:03<00:00, 25.32it/s]
 89%| | 70/79 [00:03<00:00, 25.44it/s]
 92%|| 73/79 [00:03<00:00, 25.84it/s]
 96%|| 76/79 [00:03<00:00, 26.50it/s]
100%|| 79/79 [00:03<00:00, 27.44it/s]
, 24.70it/s]
 70%|   | 55/79 [00:02<00:00, 25.16it/s]
 73%|  | 58/79 [00:03<00:00, 25.36it/s]
 77%|  | 61/79 [00:03<00:00, 25.85it/s]
 81%|  | 64/79 [00:03<00:00, 25.73it/s]
 85%| | 67/79 [00:03<00:00, 25.75it/s]
 89%| | 70/79 [00:03<00:00, 25.75it/s]
 92%|| 73/79 [00:03<00:00, 26.05it/s]
 96%|| 76/79 [00:03<00:00, 26.64it/s]
100%|| 79/79 [00:03<00:00, 27.51it/s]
, 25.19it/s]
 70%|   | 55/79 [00:02<00:00, 25.59it/s]
 73%|  | 58/79 [00:03<00:00, 26.03it/s]
 77%|  | 61/79 [00:03<00:00, 26.06it/s]
 81%|  | 64/79 [00:03<00:00, 26.05it/s]
 85%| | 67/79 [00:03<00:00, 26.14it/s]
 89%| | 70/79 [00:03<00:00, 26.11it/s]
 92%|| 73/79 [00:03<00:00, 26.40it/s]
 96%|| 76/79 [00:03<00:00, 26.90it/s]
100%|| 79/79 [00:03<00:00, 27.70it/s]
, 24.74it/s]
 70%|   | 55/79 [00:02<00:00, 24.86it/s]
 73%|  | 58/79 [00:03<00:00, 25.24it/s]
 77%|  | 61/79 [00:03<00:00, 25.45it/s]
 81%|  | 64/79 [00:03<00:00, 25.68it/s]
 85%| | 67/79 [00:03<00:00, 25.71it/s]
 89%| | 70/79 [00:03<00:00, 25.91it/s]
 92%|| 73/79 [00:03<00:00, 26.05it/s]
 97%|| 77/79 [00:03<00:00, 27.04it/s]
100%|| 79/79 [00:03<00:00, 20.13it/s]
, 24.71it/s]
 70%|   | 55/79 [00:02<00:00, 25.34it/s]
 73%|  | 58/79 [00:03<00:00, 25.48it/s]
 77%|  | 61/79 [00:03<00:00, 25.51it/s]
 81%|  | 64/79 [00:03<00:00, 25.67it/s]
 85%| | 67/79 [00:03<00:00, 25.64it/s]
 89%| | 70/79 [00:03<00:00, 25.61it/s]
 92%|| 73/79 [00:03<00:00, 25.99it/s]
 96%|| 76/79 [00:03<00:00, 26.68it/s]
100%|| 79/79 [00:03<00:00, 27.53it/s]
, 24.39it/s]
 70%|   | 55/79 [00:02<00:00, 24.62it/s]
 73%|  | 58/79 [00:03<00:00, 24.98it/s]
 77%|  | 61/79 [00:03<00:00, 25.28it/s]
 81%|  | 64/79 [00:03<00:00, 25.38it/s]
 85%| | 67/79 [00:03<00:00, 25.92it/s]
 89%| | 70/79 [00:03<00:00, 25.30it/s]
 92%|| 73/79 [00:03<00:00, 25.78it/s]
 96%|| 76/79 [00:03<00:00, 26.45it/s]
100%|| 79/79 [00:03<00:00, 20.10it/s]
, 24.74it/s]
 70%|   | 55/79 [00:02<00:00, 25.13it/s]
 73%|  | 58/79 [00:03<00:00, 25.27it/s]
 77%|  | 61/79 [00:03<00:00, 25.56it/s]
 81%|  | 64/79 [00:03<00:00, 25.70it/s]
 85%| | 67/79 [00:03<00:00, 25.79it/s]
 89%| | 70/79 [00:03<00:00, 25.92it/s]
 92%|| 73/79 [00:03<00:00, 26.24it/s]
 96%|| 76/79 [00:03<00:00, 26.71it/s]
100%|| 79/79 [00:03<00:00, 27.57it/s]
, 24.60it/s]
 70%|   | 55/79 [00:02<00:00, 25.14it/s]
 73%|  | 58/79 [00:03<00:00, 25.27it/s]
 77%|  | 61/79 [00:03<00:00, 25.55it/s]
 81%|  | 64/79 [00:03<00:00, 25.65it/s]
 85%| | 67/79 [00:03<00:00, 25.78it/s]
 89%| | 70/79 [00:03<00:00, 25.31it/s]
 92%|| 73/79 [00:03<00:00, 25.66it/s]
 96%|| 76/79 [00:03<00:00, 26.11it/s]
100%|| 79/79 [00:03<00:00, 27.11it/s]
, 23.84it/s]
 70%|   | 55/79 [00:03<00:01, 23.88it/s]
 73%|  | 58/79 [00:03<00:00, 24.06it/s]
 77%|  | 61/79 [00:03<00:00, 24.25it/s]
 81%|  | 64/79 [00:03<00:00, 24.57it/s]
 85%| | 67/79 [00:03<00:00, 24.42it/s]
 89%| | 70/79 [00:03<00:00, 24.60it/s]
 92%|| 73/79 [00:03<00:00, 25.06it/s]
 96%|| 76/79 [00:03<00:00, 25.94it/s]
100%|| 79/79 [00:03<00:00, 26.89it/s]
, 24.66it/s]
 70%|   | 55/79 [00:02<00:00, 24.82it/s]
 73%|  | 58/79 [00:03<00:00, 25.11it/s]
 77%|  | 61/79 [00:03<00:00, 25.08it/s]
 81%|  | 64/79 [00:03<00:00, 24.74it/s]
 85%| | 67/79 [00:03<00:00, 24.99it/s]
 89%| | 70/79 [00:03<00:00, 25.13it/s]
 92%|| 73/79 [00:03<00:00, 25.55it/s]
 96%|| 76/79 [00:03<00:00, 26.17it/s]
100%|| 79/79 [00:03<00:00, 26.89it/s]
, 24.54it/s]
 70%|   | 55/79 [00:02<00:00, 24.52it/s]
 73%|  | 58/79 [00:03<00:00, 24.88it/s]
 77%|  | 61/79 [00:03<00:00, 25.01it/s]
 81%|  | 64/79 [00:03<00:00, 25.48it/s]
 85%| | 67/79 [00:03<00:00, 25.32it/s]
 89%| | 70/79 [00:03<00:00, 25.35it/s]
 92%|| 73/79 [00:03<00:00, 25.93it/s]
 96%|| 76/79 [00:03<00:00, 26.63it/s]
100%|| 79/79 [00:03<00:00, 27.39it/s]
, 24.46it/s]
 70%|   | 55/79 [00:02<00:00, 24.99it/s]
 73%|  | 58/79 [00:03<00:00, 25.14it/s]
 77%|  | 61/79 [00:03<00:00, 25.27it/s]
 81%|  | 64/79 [00:03<00:00, 25.47it/s]
 85%| | 67/79 [00:03<00:00, 25.76it/s]
 89%| | 70/79 [00:03<00:00, 25.58it/s]
 92%|| 73/79 [00:03<00:00, 25.68it/s]
 96%|| 76/79 [00:03<00:00, 26.40it/s]
100%|| 79/79 [00:03<00:00, 27.21it/s]
59it/s]
 68%|   | 54/79 [00:02<00:01, 24.21it/s]
 72%|  | 57/79 [00:03<00:00, 24.31it/s]
 76%|  | 60/79 [00:03<00:00, 24.26it/s]
 80%|  | 63/79 [00:03<00:00, 24.40it/s]
 84%| | 66/79 [00:03<00:00, 24.74it/s]
 87%| | 69/79 [00:03<00:00, 24.69it/s]
 91%| | 72/79 [00:03<00:00, 25.08it/s]
 95%|| 75/79 [00:03<00:00, 25.89it/s]
 99%|| 78/79 [00:03<00:00, 26.89it/s]
100%|| 79/79 [00:04<00:00, 19.73it/s]
, 24.38it/s]
 70%|   | 55/79 [00:03<00:00, 24.86it/s]
 73%|  | 58/79 [00:03<00:00, 25.16it/s]
 77%|  | 61/79 [00:03<00:00, 25.31it/s]
 81%|  | 64/79 [00:03<00:00, 25.49it/s]
 85%| | 67/79 [00:03<00:00, 25.53it/s]
 89%| | 70/79 [00:03<00:00, 25.57it/s]
 92%|| 73/79 [00:03<00:00, 26.16it/s]
 96%|| 76/79 [00:03<00:00, 26.73it/s]
100%|| 79/79 [00:03<00:00, 27.51it/s]
, 24.27it/s]
 70%|   | 55/79 [00:03<00:00, 24.64it/s]
 73%|  | 58/79 [00:03<00:00, 24.77it/s]
 77%|  | 61/79 [00:03<00:00, 24.83it/s]
 81%|  | 64/79 [00:03<00:00, 24.97it/s]
 85%| | 67/79 [00:03<00:00, 25.02it/s]
 89%| | 70/79 [00:03<00:00, 25.04it/s]
 92%|| 73/79 [00:03<00:00, 25.39it/s]
 96%|| 76/79 [00:03<00:00, 26.00it/s]
100%|| 79/79 [00:03<00:00, 27.03it/s]
, 24.38it/s]
 70%|   | 55/79 [00:03<00:00, 24.62it/s]
 73%|  | 58/79 [00:03<00:00, 24.97it/s]
 77%|  | 61/79 [00:03<00:00, 24.94it/s]
 81%|  | 64/79 [00:03<00:00, 24.85it/s]
 85%| | 67/79 [00:03<00:00, 25.06it/s]
 89%| | 70/79 [00:03<00:00, 24.86it/s]
 92%|| 73/79 [00:03<00:00, 25.44it/s]
 96%|| 76/79 [00:03<00:00, 26.00it/s]
100%|| 79/79 [00:03<00:00, 27.06it/s]
, 24.45it/s]
 70%|   | 55/79 [00:03<00:00, 24.72it/s]
 73%|  | 58/79 [00:03<00:00, 25.04it/s]
 77%|  | 61/79 [00:03<00:00, 25.33it/s]
 81%|  | 64/79 [00:03<00:00, 25.58it/s]
 85%| | 67/79 [00:03<00:00, 25.55it/s]
 89%| | 70/79 [00:03<00:00, 25.38it/s]
 92%|| 73/79 [00:03<00:00, 25.84it/s]
 96%|| 76/79 [00:03<00:00, 26.43it/s]
100%|| 79/79 [00:03<00:00, 27.18it/s]
, 23.94it/s]
 70%|   | 55/79 [00:03<00:00, 24.37it/s]
 73%|  | 58/79 [00:03<00:00, 24.65it/s]
 77%|  | 61/79 [00:03<00:00, 24.89it/s]
 81%|  | 64/79 [00:03<00:00, 24.95it/s]
 85%| | 67/79 [00:03<00:00, 25.15it/s]
 89%| | 70/79 [00:03<00:00, 24.85it/s]
 92%|| 73/79 [00:03<00:00, 25.23it/s]
 96%|| 76/79 [00:03<00:00, 25.83it/s]
100%|| 79/79 [00:03<00:00, 26.60it/s]
, 24.49it/s]
 70%|   | 55/79 [00:03<00:00, 24.60it/s]
 73%|  | 58/79 [00:03<00:00, 24.88it/s]
 77%|  | 61/79 [00:03<00:00, 24.93it/s]
 81%|  | 64/79 [00:03<00:00, 25.31it/s]
 85%| | 67/79 [00:03<00:00, 25.52it/s]
 89%| | 70/79 [00:03<00:00, 25.30it/s]
 92%|| 73/79 [00:03<00:00, 25.52it/s]
 96%|| 76/79 [00:03<00:00, 26.18it/s]
100%|| 79/79 [00:03<00:00, 26.91it/s]
, 23.83it/s]
 70%|   | 55/79 [00:03<00:00, 24.44it/s]
 73%|  | 58/79 [00:03<00:00, 24.75it/s]
 77%|  | 61/79 [00:03<00:00, 24.81it/s]
 81%|  | 64/79 [00:03<00:00, 24.93it/s]
 85%| | 67/79 [00:03<00:00, 24.77it/s]
 89%| | 70/79 [00:03<00:00, 25.03it/s]
 92%|| 73/79 [00:03<00:00, 25.42it/s]
 96%|| 76/79 [00:03<00:00, 26.20it/s]
100%|| 79/79 [00:04<00:00, 19.53it/s]
, 23.48it/s]
 70%|   | 55/79 [00:03<00:01, 23.99it/s]
 73%|  | 58/79 [00:03<00:00, 24.43it/s]
 77%|  | 61/79 [00:03<00:00, 24.44it/s]
 81%|  | 64/79 [00:03<00:00, 24.24it/s]
 85%| | 67/79 [00:03<00:00, 24.47it/s]
 89%| | 70/79 [00:03<00:00, 24.75it/s]
 92%|| 73/79 [00:03<00:00, 24.51it/s]
 96%|| 76/79 [00:03<00:00, 25.39it/s]
100%|| 79/79 [00:03<00:00, 26.34it/s]
, 23.68it/s]
 70%|   | 55/79 [00:03<00:01, 23.99it/s]
 73%|  | 58/79 [00:03<00:00, 24.39it/s]
 77%|  | 61/79 [00:03<00:00, 24.73it/s]
 81%|  | 64/79 [00:03<00:00, 24.65it/s]
 85%| | 67/79 [00:03<00:00, 24.97it/s]
 89%| | 70/79 [00:03<00:00, 25.32it/s]
 92%|| 73/79 [00:03<00:00, 25.64it/s]
 96%|| 76/79 [00:03<00:00, 26.41it/s]
100%|| 79/79 [00:03<00:00, 27.35it/s]
, 19.05it/s]
 70%|   | 55/79 [00:03<00:01, 19.77it/s]
 73%|  | 58/79 [00:03<00:00, 21.24it/s]
 77%|  | 61/79 [00:03<00:00, 22.32it/s]
 81%|  | 64/79 [00:03<00:00, 23.21it/s]
 85%| | 67/79 [00:03<00:00, 23.92it/s]
 89%| | 70/79 [00:03<00:00, 24.67it/s]
 92%|| 73/79 [00:03<00:00, 24.83it/s]
 96%|| 76/79 [00:03<00:00, 25.79it/s]
100%|| 79/79 [00:04<00:00, 26.62it/s]
, 23.77it/s]
 70%|   | 55/79 [00:03<00:00, 24.06it/s]
 73%|  | 58/79 [00:03<00:00, 24.37it/s]
 77%|  | 61/79 [00:03<00:00, 24.51it/s]
 81%|  | 64/79 [00:03<00:00, 24.56it/s]
 85%| | 67/79 [00:03<00:00, 24.69it/s]
 89%| | 70/79 [00:03<00:00, 24.88it/s]
 92%|| 73/79 [00:03<00:00, 25.19it/s]
 96%|| 76/79 [00:03<00:00, 26.15it/s]
100%|| 79/79 [00:04<00:00, 27.13it/s]
66it/s]
 68%|   | 54/79 [00:03<00:01, 24.01it/s]
 72%|  | 57/79 [00:03<00:00, 24.33it/s]
 76%|  | 60/79 [00:03<00:00, 24.31it/s]
 80%|  | 63/79 [00:03<00:00, 24.23it/s]
 84%| | 66/79 [00:03<00:00, 24.67it/s]
 87%| | 69/79 [00:03<00:00, 24.58it/s]
 91%| | 72/79 [00:03<00:00, 24.92it/s]
 95%|| 75/79 [00:03<00:00, 25.63it/s]
 99%|| 78/79 [00:04<00:00, 26.12it/s]
100%|| 79/79 [00:04<00:00, 19.14it/s]
, 23.13it/s]
 70%|   | 55/79 [00:03<00:01, 23.83it/s]
 73%|  | 58/79 [00:03<00:00, 24.21it/s]
 77%|  | 61/79 [00:03<00:00, 24.41it/s]
 81%|  | 64/79 [00:03<00:00, 24.61it/s]
 85%| | 67/79 [00:03<00:00, 24.79it/s]
 89%| | 70/79 [00:03<00:00, 24.96it/s]
 92%|| 73/79 [00:03<00:00, 25.07it/s]
 96%|| 76/79 [00:03<00:00, 25.94it/s]
100%|| 79/79 [00:04<00:00, 26.57it/s]
, 23.69it/s]
 70%|   | 55/79 [00:03<00:00, 24.02it/s]
 73%|  | 58/79 [00:03<00:00, 23.99it/s]
 77%|  | 61/79 [00:03<00:00, 24.33it/s]
 81%|  | 64/79 [00:03<00:00, 24.64it/s]
 85%| | 67/79 [00:03<00:00, 24.68it/s]
 89%| | 70/79 [00:03<00:00, 24.58it/s]
 92%|| 73/79 [00:03<00:00, 24.97it/s]
 96%|| 76/79 [00:03<00:00, 25.84it/s]
100%|| 79/79 [00:04<00:00, 26.11it/s]
, 23.46it/s]
 70%|   | 55/79 [00:03<00:01, 23.57it/s]
 73%|  | 58/79 [00:03<00:00, 23.57it/s]
 77%|  | 61/79 [00:03<00:00, 23.85it/s]
 81%|  | 64/79 [00:03<00:00, 24.13it/s]
 85%| | 67/79 [00:03<00:00, 24.17it/s]
 89%| | 70/79 [00:03<00:00, 24.17it/s]
 92%|| 73/79 [00:03<00:00, 24.67it/s]
 96%|| 76/79 [00:03<00:00, 25.43it/s]
100%|| 79/79 [00:04<00:00, 26.29it/s]
, 22.74it/s]
 70%|   | 55/79 [00:03<00:01, 23.47it/s]
 73%|  | 58/79 [00:03<00:00, 23.61it/s]
 77%|  | 61/79 [00:03<00:00, 23.61it/s]
 81%|  | 64/79 [00:03<00:00, 24.02it/s]
 85%| | 67/79 [00:03<00:00, 24.22it/s]
 89%| | 70/79 [00:03<00:00, 24.49it/s]
 92%|| 73/79 [00:03<00:00, 24.68it/s]
 96%|| 76/79 [00:03<00:00, 25.36it/s]
100%|| 79/79 [00:04<00:00, 26.27it/s]
11it/s]
 68%|   | 54/79 [00:03<00:01, 23.44it/s]
 72%|  | 57/79 [00:03<00:00, 23.71it/s]
 76%|  | 60/79 [00:03<00:00, 24.16it/s]
 80%|  | 63/79 [00:03<00:00, 24.20it/s]
 84%| | 66/79 [00:03<00:00, 24.42it/s]
 87%| | 69/79 [00:03<00:00, 24.52it/s]
 91%| | 72/79 [00:03<00:00, 24.59it/s]
 95%|| 75/79 [00:03<00:00, 25.36it/s]
 99%|| 78/79 [00:04<00:00, 25.87it/s]
100%|| 79/79 [00:04<00:00, 18.92it/s]
, 23.18it/s]
 70%|   | 55/79 [00:03<00:01, 23.82it/s]
 73%|  | 58/79 [00:03<00:00, 24.07it/s]
 77%|  | 61/79 [00:03<00:00, 24.46it/s]
 81%|  | 64/79 [00:03<00:00, 24.73it/s]
 85%| | 67/79 [00:03<00:00, 24.95it/s]
 89%| | 70/79 [00:03<00:00, 24.92it/s]
 92%|| 73/79 [00:03<00:00, 25.14it/s]
 96%|| 76/79 [00:04<00:00, 25.76it/s]
100%|| 79/79 [00:04<00:00, 26.37it/s]
, 22.71it/s]
 70%|   | 55/79 [00:03<00:01, 23.19it/s]
 73%|  | 58/79 [00:03<00:00, 23.70it/s]
 77%|  | 61/79 [00:03<00:00, 23.79it/s]
 81%|  | 64/79 [00:03<00:00, 23.90it/s]
 85%| | 67/79 [00:03<00:00, 24.14it/s]
 89%| | 70/79 [00:03<00:00, 24.27it/s]
 92%|| 73/79 [00:03<00:00, 24.64it/s]
 96%|| 76/79 [00:04<00:00, 25.50it/s]
100%|| 79/79 [00:04<00:00, 26.31it/s]
2020-06-23 17:33:54,449 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.219116 (0.027002342224121095 s / img per device, on 32 devices)
2020-06-23 17:33:54,470 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:33:54,470 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:33:54,489 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592958843434, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 9, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592958843435, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 9}}
2020-06-23 17:34:03,869 maskrcnn_benchmark.trainer INFO: eta: 1:08:38  iter: 7340  loss: 0.6658 (0.7861)  loss_classifier: 0.2464 (0.2917)  loss_box_reg: 0.1310 (0.1260)  loss_mask: 0.2867 (0.3073)  loss_objectness: 0.0242 (0.0399)  loss_rpn_box_reg: 0.0130 (0.0213)  time: 0.1084 (0.1261)  data: 0.0014 (0.0187)  lr: 0.160000  max mem: 5155
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:34:06,029 maskrcnn_benchmark.trainer INFO: eta: 1:08:34  iter: 7360  loss: 0.7349 (0.7859)  loss_classifier: 0.2684 (0.2916)  loss_box_reg: 0.1078 (0.1260)  loss_mask: 0.2762 (0.3071)  loss_objectness: 0.0246 (0.0398)  loss_rpn_box_reg: 0.0113 (0.0213)  time: 0.1078 (0.1260)  data: 0.0013 (0.0187)  lr: 0.160000  max mem: 5155
2020-06-23 17:34:08,175 maskrcnn_benchmark.trainer INFO: eta: 1:08:30  iter: 7380  loss: 0.6912 (0.7856)  loss_classifier: 0.2406 (0.2915)  loss_box_reg: 0.0971 (0.1260)  loss_mask: 0.2454 (0.3070)  loss_objectness: 0.0199 (0.0398)  loss_rpn_box_reg: 0.0093 (0.0213)  time: 0.1075 (0.1260)  data: 0.0014 (0.0186)  lr: 0.160000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 17:34:10,342 maskrcnn_benchmark.trainer INFO: eta: 1:08:25  iter: 7400  loss: 0.5884 (0.7851)  loss_classifier: 0.1988 (0.2912)  loss_box_reg: 0.0862 (0.1259)  loss_mask: 0.2611 (0.3069)  loss_objectness: 0.0180 (0.0398)  loss_rpn_box_reg: 0.0086 (0.0213)  time: 0.1079 (0.1259)  data: 0.0015 (0.0186)  lr: 0.160000  max mem: 5155
DONE (t=0.76s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 17:34:12,500 maskrcnn_benchmark.trainer INFO: eta: 1:08:21  iter: 7420  loss: 0.5884 (0.7847)  loss_classifier: 0.1881 (0.2910)  loss_box_reg: 0.0853 (0.1258)  loss_mask: 0.2429 (0.3068)  loss_objectness: 0.0192 (0.0398)  loss_rpn_box_reg: 0.0082 (0.0213)  time: 0.1073 (0.1259)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5155
DONE (t=1.65s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.29688
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.50239
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.31748
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.17009
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.32371
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.38648
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.26859
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43587
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.45983
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.28839
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.49009
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.58363
2020-06-23 17:34:14,691 maskrcnn_benchmark.trainer INFO: eta: 1:08:17  iter: 7440  loss: 0.6751 (0.7844)  loss_classifier: 0.2387 (0.2909)  loss_box_reg: 0.0978 (0.1258)  loss_mask: 0.2793 (0.3067)  loss_objectness: 0.0191 (0.0397)  loss_rpn_box_reg: 0.0129 (0.0213)  time: 0.1089 (0.1259)  data: 0.0015 (0.0185)  lr: 0.160000  max mem: 5155
2020-06-23 17:34:16,848 maskrcnn_benchmark.trainer INFO: eta: 1:08:13  iter: 7460  loss: 0.6781 (0.7842)  loss_classifier: 0.2216 (0.2908)  loss_box_reg: 0.1048 (0.1257)  loss_mask: 0.2759 (0.3066)  loss_objectness: 0.0192 (0.0398)  loss_rpn_box_reg: 0.0091 (0.0213)  time: 0.1076 (0.1258)  data: 0.0014 (0.0185)  lr: 0.160000  max mem: 5155
2020-06-23 17:34:19,018 maskrcnn_benchmark.trainer INFO: eta: 1:08:09  iter: 7480  loss: 0.6424 (0.7838)  loss_classifier: 0.2266 (0.2906)  loss_box_reg: 0.0900 (0.1257)  loss_mask: 0.2700 (0.3065)  loss_objectness: 0.0237 (0.0397)  loss_rpn_box_reg: 0.0111 (0.0213)  time: 0.1079 (0.1258)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:34:21,189 maskrcnn_benchmark.trainer INFO: eta: 1:08:05  iter: 7500  loss: 0.5576 (0.7833)  loss_classifier: 0.1805 (0.2903)  loss_box_reg: 0.0835 (0.1256)  loss_mask: 0.2685 (0.3064)  loss_objectness: 0.0220 (0.0397)  loss_rpn_box_reg: 0.0086 (0.0213)  time: 0.1081 (0.1257)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5155
DONE (t=2.07s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:34:23,350 maskrcnn_benchmark.trainer INFO: eta: 1:08:01  iter: 7520  loss: 0.6837 (0.7830)  loss_classifier: 0.2116 (0.2902)  loss_box_reg: 0.0974 (0.1255)  loss_mask: 0.2910 (0.3064)  loss_objectness: 0.0157 (0.0397)  loss_rpn_box_reg: 0.0093 (0.0213)  time: 0.1077 (0.1257)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5155
DONE (t=2.71s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.28033
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.47235
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.29241
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.12208
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.30530
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.42073
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.26062
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.40991
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.43001
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.24470
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.46320
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.57270
2020-06-23 17:34:24,473 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.29687592591104645, segm mAP: 0.2803255397344459
:::MLLOG {"namespace": "", "time_ms": 1592958864473, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.29687592591104645, "SEGM": 0.2803255397344459}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 8}}
:::MLLOG {"namespace": "", "time_ms": 1592958864473, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 8}}
2020-06-23 17:34:25,661 maskrcnn_benchmark.trainer INFO: eta: 1:07:58  iter: 7540  loss: 0.6652 (0.7828)  loss_classifier: 0.2515 (0.2901)  loss_box_reg: 0.1057 (0.1255)  loss_mask: 0.2586 (0.3063)  loss_objectness: 0.0235 (0.0396)  loss_rpn_box_reg: 0.0090 (0.0213)  time: 0.1073 (0.1256)  data: 0.0016 (0.0183)  lr: 0.160000  max mem: 5155
2020-06-23 17:34:27,797 maskrcnn_benchmark.trainer INFO: eta: 1:07:54  iter: 7560  loss: 0.6523 (0.7825)  loss_classifier: 0.2283 (0.2900)  loss_box_reg: 0.0992 (0.1255)  loss_mask: 0.2623 (0.3062)  loss_objectness: 0.0203 (0.0396)  loss_rpn_box_reg: 0.0106 (0.0213)  time: 0.1065 (0.1256)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5155
2020-06-23 17:34:29,943 maskrcnn_benchmark.trainer INFO: eta: 1:07:50  iter: 7580  loss: 0.6486 (0.7822)  loss_classifier: 0.2417 (0.2899)  loss_box_reg: 0.1030 (0.1254)  loss_mask: 0.2690 (0.3061)  loss_objectness: 0.0157 (0.0396)  loss_rpn_box_reg: 0.0076 (0.0213)  time: 0.1071 (0.1255)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5155
2020-06-23 17:34:32,121 maskrcnn_benchmark.trainer INFO: eta: 1:07:46  iter: 7600  loss: 0.6685 (0.7819)  loss_classifier: 0.2266 (0.2897)  loss_box_reg: 0.0981 (0.1254)  loss_mask: 0.2598 (0.3060)  loss_objectness: 0.0196 (0.0395)  loss_rpn_box_reg: 0.0083 (0.0213)  time: 0.1081 (0.1255)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5155
2020-06-23 17:34:34,284 maskrcnn_benchmark.trainer INFO: eta: 1:07:42  iter: 7620  loss: 0.5903 (0.7814)  loss_classifier: 0.2336 (0.2896)  loss_box_reg: 0.0921 (0.1253)  loss_mask: 0.2398 (0.3058)  loss_objectness: 0.0127 (0.0395)  loss_rpn_box_reg: 0.0066 (0.0212)  time: 0.1079 (0.1255)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5155
2020-06-23 17:34:36,435 maskrcnn_benchmark.trainer INFO: eta: 1:07:38  iter: 7640  loss: 0.6098 (0.7811)  loss_classifier: 0.2484 (0.2894)  loss_box_reg: 0.0957 (0.1252)  loss_mask: 0.2698 (0.3058)  loss_objectness: 0.0217 (0.0394)  loss_rpn_box_reg: 0.0084 (0.0212)  time: 0.1068 (0.1254)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5155
2020-06-23 17:34:38,603 maskrcnn_benchmark.trainer INFO: eta: 1:07:34  iter: 7660  loss: 0.5818 (0.7807)  loss_classifier: 0.1941 (0.2893)  loss_box_reg: 0.1132 (0.1252)  loss_mask: 0.2641 (0.3056)  loss_objectness: 0.0152 (0.0394)  loss_rpn_box_reg: 0.0055 (0.0212)  time: 0.1087 (0.1254)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5155
2020-06-23 17:34:40,770 maskrcnn_benchmark.trainer INFO: eta: 1:07:30  iter: 7680  loss: 0.5300 (0.7802)  loss_classifier: 0.1715 (0.2890)  loss_box_reg: 0.0810 (0.1251)  loss_mask: 0.2518 (0.3055)  loss_objectness: 0.0090 (0.0394)  loss_rpn_box_reg: 0.0081 (0.0212)  time: 0.1084 (0.1253)  data: 0.0013 (0.0180)  lr: 0.160000  max mem: 5155
2020-06-23 17:34:42,915 maskrcnn_benchmark.trainer INFO: eta: 1:07:26  iter: 7700  loss: 0.6287 (0.7799)  loss_classifier: 0.2345 (0.2889)  loss_box_reg: 0.1054 (0.1250)  loss_mask: 0.2806 (0.3054)  loss_objectness: 0.0176 (0.0393)  loss_rpn_box_reg: 0.0060 (0.0212)  time: 0.1069 (0.1253)  data: 0.0013 (0.0179)  lr: 0.160000  max mem: 5155
2020-06-23 17:34:45,069 maskrcnn_benchmark.trainer INFO: eta: 1:07:22  iter: 7720  loss: 0.5885 (0.7794)  loss_classifier: 0.2019 (0.2887)  loss_box_reg: 0.0800 (0.1250)  loss_mask: 0.2599 (0.3053)  loss_objectness: 0.0160 (0.0393)  loss_rpn_box_reg: 0.0067 (0.0212)  time: 0.1074 (0.1252)  data: 0.0013 (0.0179)  lr: 0.160000  max mem: 5155
2020-06-23 17:34:47,222 maskrcnn_benchmark.trainer INFO: eta: 1:07:18  iter: 7740  loss: 0.6668 (0.7792)  loss_classifier: 0.2428 (0.2886)  loss_box_reg: 0.1077 (0.1249)  loss_mask: 0.3005 (0.3052)  loss_objectness: 0.0149 (0.0393)  loss_rpn_box_reg: 0.0082 (0.0212)  time: 0.1071 (0.1252)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5155
2020-06-23 17:34:49,387 maskrcnn_benchmark.trainer INFO: eta: 1:07:14  iter: 7760  loss: 0.5544 (0.7787)  loss_classifier: 0.2115 (0.2884)  loss_box_reg: 0.0900 (0.1249)  loss_mask: 0.2256 (0.3051)  loss_objectness: 0.0132 (0.0392)  loss_rpn_box_reg: 0.0072 (0.0211)  time: 0.1076 (0.1251)  data: 0.0013 (0.0178)  lr: 0.160000  max mem: 5155
2020-06-23 17:34:51,545 maskrcnn_benchmark.trainer INFO: eta: 1:07:10  iter: 7780  loss: 0.6320 (0.7784)  loss_classifier: 0.2297 (0.2883)  loss_box_reg: 0.0988 (0.1248)  loss_mask: 0.2491 (0.3050)  loss_objectness: 0.0159 (0.0392)  loss_rpn_box_reg: 0.0076 (0.0211)  time: 0.1081 (0.1251)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5155
2020-06-23 17:34:53,705 maskrcnn_benchmark.trainer INFO: eta: 1:07:06  iter: 7800  loss: 0.6771 (0.7782)  loss_classifier: 0.2452 (0.2882)  loss_box_reg: 0.0920 (0.1247)  loss_mask: 0.2748 (0.3049)  loss_objectness: 0.0258 (0.0392)  loss_rpn_box_reg: 0.0194 (0.0211)  time: 0.1074 (0.1251)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5155
2020-06-23 17:34:55,846 maskrcnn_benchmark.trainer INFO: eta: 1:07:02  iter: 7820  loss: 0.5905 (0.7780)  loss_classifier: 0.2293 (0.2881)  loss_box_reg: 0.1155 (0.1247)  loss_mask: 0.2771 (0.3049)  loss_objectness: 0.0185 (0.0392)  loss_rpn_box_reg: 0.0078 (0.0211)  time: 0.1069 (0.1250)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5155
2020-06-23 17:34:58,015 maskrcnn_benchmark.trainer INFO: eta: 1:06:58  iter: 7840  loss: 0.6424 (0.7778)  loss_classifier: 0.2327 (0.2880)  loss_box_reg: 0.1179 (0.1247)  loss_mask: 0.2572 (0.3048)  loss_objectness: 0.0203 (0.0391)  loss_rpn_box_reg: 0.0129 (0.0211)  time: 0.1078 (0.1250)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:00,159 maskrcnn_benchmark.trainer INFO: eta: 1:06:54  iter: 7860  loss: 0.6173 (0.7774)  loss_classifier: 0.2165 (0.2878)  loss_box_reg: 0.0927 (0.1247)  loss_mask: 0.2635 (0.3047)  loss_objectness: 0.0193 (0.0391)  loss_rpn_box_reg: 0.0102 (0.0211)  time: 0.1065 (0.1249)  data: 0.0013 (0.0176)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:02,313 maskrcnn_benchmark.trainer INFO: eta: 1:06:50  iter: 7880  loss: 0.6715 (0.7772)  loss_classifier: 0.2674 (0.2877)  loss_box_reg: 0.1017 (0.1246)  loss_mask: 0.2566 (0.3046)  loss_objectness: 0.0245 (0.0391)  loss_rpn_box_reg: 0.0138 (0.0211)  time: 0.1072 (0.1249)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:04,470 maskrcnn_benchmark.trainer INFO: eta: 1:06:47  iter: 7900  loss: 0.7386 (0.7772)  loss_classifier: 0.2523 (0.2877)  loss_box_reg: 0.1181 (0.1247)  loss_mask: 0.2747 (0.3045)  loss_objectness: 0.0433 (0.0391)  loss_rpn_box_reg: 0.0137 (0.0211)  time: 0.1077 (0.1248)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:06,624 maskrcnn_benchmark.trainer INFO: eta: 1:06:43  iter: 7920  loss: 0.6380 (0.7769)  loss_classifier: 0.2414 (0.2876)  loss_box_reg: 0.0978 (0.1246)  loss_mask: 0.2900 (0.3045)  loss_objectness: 0.0212 (0.0391)  loss_rpn_box_reg: 0.0094 (0.0211)  time: 0.1071 (0.1248)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:08,769 maskrcnn_benchmark.trainer INFO: eta: 1:06:39  iter: 7940  loss: 0.6511 (0.7766)  loss_classifier: 0.2217 (0.2875)  loss_box_reg: 0.1030 (0.1246)  loss_mask: 0.2769 (0.3044)  loss_objectness: 0.0142 (0.0390)  loss_rpn_box_reg: 0.0058 (0.0211)  time: 0.1064 (0.1247)  data: 0.0013 (0.0174)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:10,931 maskrcnn_benchmark.trainer INFO: eta: 1:06:35  iter: 7960  loss: 0.6481 (0.7764)  loss_classifier: 0.2413 (0.2874)  loss_box_reg: 0.1038 (0.1246)  loss_mask: 0.2677 (0.3044)  loss_objectness: 0.0275 (0.0390)  loss_rpn_box_reg: 0.0114 (0.0211)  time: 0.1074 (0.1247)  data: 0.0013 (0.0174)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:13,094 maskrcnn_benchmark.trainer INFO: eta: 1:06:31  iter: 7980  loss: 0.6380 (0.7761)  loss_classifier: 0.2329 (0.2872)  loss_box_reg: 0.1005 (0.1246)  loss_mask: 0.2713 (0.3043)  loss_objectness: 0.0191 (0.0390)  loss_rpn_box_reg: 0.0081 (0.0211)  time: 0.1072 (0.1247)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:15,257 maskrcnn_benchmark.trainer INFO: eta: 1:06:27  iter: 8000  loss: 0.6179 (0.7759)  loss_classifier: 0.2165 (0.2871)  loss_box_reg: 0.0884 (0.1245)  loss_mask: 0.2831 (0.3042)  loss_objectness: 0.0220 (0.0390)  loss_rpn_box_reg: 0.0103 (0.0211)  time: 0.1076 (0.1246)  data: 0.0015 (0.0173)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:17,401 maskrcnn_benchmark.trainer INFO: eta: 1:06:23  iter: 8020  loss: 0.6652 (0.7756)  loss_classifier: 0.2746 (0.2870)  loss_box_reg: 0.1241 (0.1245)  loss_mask: 0.2525 (0.3041)  loss_objectness: 0.0177 (0.0389)  loss_rpn_box_reg: 0.0093 (0.0210)  time: 0.1073 (0.1246)  data: 0.0013 (0.0173)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:19,542 maskrcnn_benchmark.trainer INFO: eta: 1:06:20  iter: 8040  loss: 0.6500 (0.7753)  loss_classifier: 0.2436 (0.2869)  loss_box_reg: 0.1083 (0.1245)  loss_mask: 0.2699 (0.3040)  loss_objectness: 0.0175 (0.0389)  loss_rpn_box_reg: 0.0079 (0.0210)  time: 0.1069 (0.1245)  data: 0.0013 (0.0172)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:21,698 maskrcnn_benchmark.trainer INFO: eta: 1:06:16  iter: 8060  loss: 0.7502 (0.7751)  loss_classifier: 0.2599 (0.2869)  loss_box_reg: 0.1145 (0.1244)  loss_mask: 0.2797 (0.3039)  loss_objectness: 0.0258 (0.0389)  loss_rpn_box_reg: 0.0102 (0.0210)  time: 0.1074 (0.1245)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:23,862 maskrcnn_benchmark.trainer INFO: eta: 1:06:12  iter: 8080  loss: 0.7353 (0.7750)  loss_classifier: 0.2821 (0.2869)  loss_box_reg: 0.1113 (0.1244)  loss_mask: 0.2583 (0.3039)  loss_objectness: 0.0251 (0.0389)  loss_rpn_box_reg: 0.0147 (0.0210)  time: 0.1071 (0.1244)  data: 0.0014 (0.0171)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:26,017 maskrcnn_benchmark.trainer INFO: eta: 1:06:08  iter: 8100  loss: 0.6100 (0.7748)  loss_classifier: 0.2368 (0.2868)  loss_box_reg: 0.0949 (0.1244)  loss_mask: 0.2580 (0.3038)  loss_objectness: 0.0263 (0.0389)  loss_rpn_box_reg: 0.0142 (0.0210)  time: 0.1071 (0.1244)  data: 0.0013 (0.0171)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:28,171 maskrcnn_benchmark.trainer INFO: eta: 1:06:04  iter: 8120  loss: 0.6031 (0.7745)  loss_classifier: 0.2348 (0.2867)  loss_box_reg: 0.0961 (0.1244)  loss_mask: 0.2556 (0.3037)  loss_objectness: 0.0177 (0.0388)  loss_rpn_box_reg: 0.0082 (0.0210)  time: 0.1068 (0.1244)  data: 0.0014 (0.0171)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:30,330 maskrcnn_benchmark.trainer INFO: eta: 1:06:01  iter: 8140  loss: 0.6368 (0.7743)  loss_classifier: 0.2264 (0.2865)  loss_box_reg: 0.1072 (0.1243)  loss_mask: 0.2448 (0.3036)  loss_objectness: 0.0199 (0.0388)  loss_rpn_box_reg: 0.0076 (0.0210)  time: 0.1077 (0.1243)  data: 0.0014 (0.0170)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:32,492 maskrcnn_benchmark.trainer INFO: eta: 1:05:57  iter: 8160  loss: 0.6538 (0.7740)  loss_classifier: 0.2115 (0.2864)  loss_box_reg: 0.0933 (0.1243)  loss_mask: 0.2804 (0.3035)  loss_objectness: 0.0244 (0.0388)  loss_rpn_box_reg: 0.0090 (0.0210)  time: 0.1076 (0.1243)  data: 0.0013 (0.0170)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:34,666 maskrcnn_benchmark.trainer INFO: eta: 1:05:53  iter: 8180  loss: 0.6989 (0.7738)  loss_classifier: 0.2333 (0.2863)  loss_box_reg: 0.1159 (0.1242)  loss_mask: 0.2766 (0.3034)  loss_objectness: 0.0262 (0.0388)  loss_rpn_box_reg: 0.0115 (0.0210)  time: 0.1081 (0.1242)  data: 0.0014 (0.0169)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:36,844 maskrcnn_benchmark.trainer INFO: eta: 1:05:49  iter: 8200  loss: 0.6983 (0.7736)  loss_classifier: 0.2581 (0.2863)  loss_box_reg: 0.1123 (0.1242)  loss_mask: 0.2785 (0.3034)  loss_objectness: 0.0232 (0.0388)  loss_rpn_box_reg: 0.0093 (0.0210)  time: 0.1086 (0.1242)  data: 0.0014 (0.0169)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:38,990 maskrcnn_benchmark.trainer INFO: eta: 1:05:46  iter: 8220  loss: 0.6756 (0.7734)  loss_classifier: 0.2306 (0.2862)  loss_box_reg: 0.1115 (0.1242)  loss_mask: 0.2554 (0.3033)  loss_objectness: 0.0242 (0.0388)  loss_rpn_box_reg: 0.0081 (0.0210)  time: 0.1072 (0.1242)  data: 0.0014 (0.0169)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:41,159 maskrcnn_benchmark.trainer INFO: eta: 1:05:42  iter: 8240  loss: 0.6630 (0.7732)  loss_classifier: 0.2587 (0.2861)  loss_box_reg: 0.1039 (0.1242)  loss_mask: 0.2463 (0.3033)  loss_objectness: 0.0210 (0.0387)  loss_rpn_box_reg: 0.0104 (0.0210)  time: 0.1068 (0.1241)  data: 0.0013 (0.0168)  lr: 0.160000  max mem: 5155
:::MLLOG {"namespace": "", "time_ms": 1592958943095, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 9}}
:::MLLOG {"namespace": "", "time_ms": 1592958943095, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 9}}
:::MLLOG {"namespace": "", "time_ms": 1592958943096, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 9}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 17:35:43,299 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
2020-06-23 17:35:43,610 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
Done (t=0.29s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:58,  1.33it/s]
  5%|         | 4/79 [00:00<00:40,  1.85it/s]
  9%|         | 7/79 [00:00<00:28,  2.57it/s]
 13%|        | 10/79 [00:01<00:19,  3.53it/s]
 16%|        | 13/79 [00:01<00:13,  4.78it/s]
 20%|        | 16/79 [00:01<00:09,  6.33it/s]
 24%|       | 19/79 [00:01<00:07,  8.21it/s]
 28%|       | 22/79 [00:01<00:05, 10.34it/s]
 32%|      | 25/79 [00:01<00:04, 12.68it/s]
 35%|      | 28/79 [00:01<00:03, 15.05it/s]
 39%|      | 31/79 [00:01<00:02, 17.33it/s]
 43%|     | 34/79 [00:02<00:02, 19.35it/s]
 47%|     | 37/79 [00:02<00:01, 21.09it/s]
 51%|     | 40/79 [00:02<00:01, 22.54it/s]
 54%|    | 43/79 [00:02<00:01, 23.49it/s]
 58%|    | 46/79 [00:02<00:01, 24.16it/s]
 62%|   | 49/79 [00:02<00:01, 24.89it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:59,  1.32it/s]
  5%|         | 4/79 [00:00<00:40,  1.84it/s]
  9%|         | 7/79 [00:01<00:28,  2.55it/s]
 13%|        | 10/79 [00:01<00:19,  3.50it/s]
 16%|        | 13/79 [00:01<00:14,  4.71it/s]
 20%|        | 16/79 [00:01<00:10,  6.24it/s]
 24%|       | 19/79 [00:01<00:07,  8.09it/s]
 28%|       | 22/79 [00:01<00:05, 10.16it/s]
 32%|      | 25/79 [00:01<00:04, 12.42it/s]
 35%|      | 28/79 [00:01<00:03, 14.69it/s]
 39%|      | 31/79 [00:01<00:02, 16.88it/s]
 43%|     | 34/79 [00:02<00:02, 18.82it/s]
 47%|     | 37/79 [00:02<00:02, 20.39it/s]
 51%|     | 40/79 [00:02<00:01, 21.75it/s]
 54%|    | 43/79 [00:02<00:01, 22.77it/s]
 58%|    | 46/79 [00:02<00:01, 23.53it/s]
 62%|   | 49/79 [00:02<00:01, 24.04it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:00,  1.28it/s]
  5%|         | 4/79 [00:00<00:42,  1.79it/s]
  9%|         | 7/79 [00:01<00:29,  2.48it/s]
 13%|        | 10/79 [00:01<00:20,  3.40it/s]
 16%|        | 13/79 [00:01<00:14,  4.60it/s]
 20%|        | 16/79 [00:01<00:10,  6.09it/s]
 24%|       | 19/79 [00:01<00:07,  7.90it/s]
 28%|       | 22/79 [00:01<00:05,  9.97it/s]
 32%|      | 25/79 [00:01<00:04, 12.25it/s]
 35%|      | 28/79 [00:01<00:03, 14.63it/s]
 39%|      | 31/79 [00:01<00:02, 16.88it/s]
 43%|     | 34/79 [00:02<00:02, 18.95it/s]
 47%|     | 37/79 [00:02<00:02, 20.73it/s]
 51%|     | 40/79 [00:02<00:01, 22.11it/s]
 54%|    | 43/79 [00:02<00:01, 23.19it/s]
 58%|    | 46/79 [00:02<00:01, 24.03it/s]
 62%|   | 49/79 [00:02<00:01, 24.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:29,  2.40it/s]
 13%|        | 10/79 [00:01<00:20,  3.31it/s]
 16%|        | 13/79 [00:01<00:14,  4.48it/s]
 20%|        | 16/79 [00:01<00:10,  5.97it/s]
 24%|       | 19/79 [00:01<00:07,  7.75it/s]
 28%|       | 22/79 [00:01<00:05,  9.85it/s]
 32%|      | 25/79 [00:01<00:04, 12.05it/s]
 35%|      | 28/79 [00:01<00:03, 14.41it/s]
 39%|      | 31/79 [00:01<00:02, 16.67it/s]
 43%|     | 34/79 [00:02<00:02, 18.79it/s]
 47%|     | 37/79 [00:02<00:02, 20.30it/s]
 51%|     | 40/79 [00:02<00:01, 21.88it/s]
 54%|    | 43/79 [00:02<00:01, 23.03it/s]
 58%|    | 46/79 [00:02<00:01, 23.96it/s]
 62%|   | 49/79 [00:02<00:01, 24.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:10,  5.73it/s]
 24%|       | 19/79 [00:01<00:08,  7.48it/s]
 28%|       | 22/79 [00:01<00:05,  9.54it/s]
 32%|      | 25/79 [00:01<00:04, 11.75it/s]
 35%|      | 28/79 [00:01<00:03, 14.09it/s]
 39%|      | 31/79 [00:02<00:02, 16.35it/s]
 43%|     | 34/79 [00:02<00:02, 18.33it/s]
 47%|     | 37/79 [00:02<00:02, 20.07it/s]
 51%|     | 40/79 [00:02<00:01, 21.66it/s]
 54%|    | 43/79 [00:02<00:01, 22.79it/s]
 58%|    | 46/79 [00:02<00:01, 23.60it/s]
 62%|   | 49/79 [00:02<00:01, 24.39it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<00:59,  1.30it/s]
  5%|         | 4/79 [00:00<00:41,  1.81it/s]
  9%|         | 7/79 [00:01<00:28,  2.51it/s]
 13%|        | 10/79 [00:01<00:20,  3.45it/s]
 16%|        | 13/79 [00:01<00:14,  4.64it/s]
 20%|        | 16/79 [00:01<00:10,  6.16it/s]
 24%|       | 19/79 [00:01<00:07,  7.98it/s]
 28%|       | 22/79 [00:01<00:05, 10.03it/s]
 32%|      | 25/79 [00:01<00:04, 12.23it/s]
 35%|      | 28/79 [00:01<00:03, 14.48it/s]
 39%|      | 31/79 [00:01<00:02, 16.54it/s]
 43%|     | 34/79 [00:02<00:02, 18.42it/s]
 47%|     | 37/79 [00:02<00:02, 20.12it/s]
 51%|     | 40/79 [00:02<00:01, 21.56it/s]
 54%|    | 43/79 [00:02<00:01, 22.47it/s]
 58%|    | 46/79 [00:02<00:01, 23.25it/s]
 62%|   | 49/79 [00:02<00:01, 23.88it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.23it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.37it/s]
 32%|      | 25/79 [00:01<00:04, 11.62it/s]
 35%|      | 28/79 [00:01<00:03, 13.99it/s]
 39%|      | 31/79 [00:02<00:02, 16.24it/s]
 43%|     | 34/79 [00:02<00:02, 18.41it/s]
 47%|     | 37/79 [00:02<00:02, 20.20it/s]
 51%|     | 40/79 [00:02<00:01, 21.67it/s]
 54%|    | 43/79 [00:02<00:01, 23.04it/s]
 58%|    | 46/79 [00:02<00:01, 23.99it/s]
 62%|   | 49/79 [00:02<00:01, 24.47it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.28it/s]
  4%|         | 3/79 [00:00<00:42,  1.77it/s]
  8%|         | 6/79 [00:01<00:29,  2.46it/s]
 11%|        | 9/79 [00:01<00:20,  3.37it/s]
 15%|        | 12/79 [00:01<00:14,  4.54it/s]
 19%|        | 15/79 [00:01<00:10,  6.01it/s]
 23%|       | 18/79 [00:01<00:07,  7.76it/s]
 27%|       | 21/79 [00:01<00:05,  9.78it/s]
 30%|       | 24/79 [00:01<00:04, 11.98it/s]
 34%|      | 27/79 [00:01<00:03, 14.23it/s]
 38%|      | 30/79 [00:01<00:03, 16.32it/s]
 42%|     | 33/79 [00:02<00:02, 18.22it/s]
 46%|     | 36/79 [00:02<00:02, 20.00it/s]
 49%|     | 39/79 [00:02<00:01, 21.19it/s]
 53%|    | 42/79 [00:02<00:01, 22.44it/s]
 57%|    | 45/79 [00:02<00:01, 22.98it/s]
 61%|    | 48/79 [00:02<00:01, 23.50it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.71it/s]
 24%|       | 19/79 [00:01<00:08,  7.46it/s]
 28%|       | 22/79 [00:01<00:05,  9.53it/s]
 32%|      | 25/79 [00:01<00:04, 11.77it/s]
 35%|      | 28/79 [00:01<00:03, 14.13it/s]
 39%|      | 31/79 [00:02<00:02, 16.50it/s]
 43%|     | 34/79 [00:02<00:02, 18.57it/s]
 47%|     | 37/79 [00:02<00:02, 20.41it/s]
 51%|     | 40/79 [00:02<00:01, 21.75it/s]
 54%|    | 43/79 [00:02<00:01, 22.87it/s]
 58%|    | 46/79 [00:02<00:01, 23.77it/s]
 62%|   | 49/79 [00:02<00:01, 24.47it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.76it/s]
  9%|         | 7/79 [00:01<00:29,  2.44it/s]
 13%|        | 10/79 [00:01<00:20,  3.36it/s]
 16%|        | 13/79 [00:01<00:14,  4.54it/s]
 20%|        | 16/79 [00:01<00:10,  6.01it/s]
 24%|       | 19/79 [00:01<00:07,  7.77it/s]
 28%|       | 22/79 [00:01<00:05,  9.85it/s]
 32%|      | 25/79 [00:01<00:04, 12.03it/s]
 35%|      | 28/79 [00:01<00:03, 14.31it/s]
 39%|      | 31/79 [00:01<00:02, 16.43it/s]
 43%|     | 34/79 [00:02<00:02, 18.46it/s]
 47%|     | 37/79 [00:02<00:02, 19.98it/s]
 51%|     | 40/79 [00:02<00:01, 21.29it/s]
 54%|    | 43/79 [00:02<00:01, 22.36it/s]
 58%|    | 46/79 [00:02<00:01, 23.23it/s]
 62%|   | 49/79 [00:02<00:01, 23.91it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.37it/s]
 20%|        | 16/79 [00:01<00:10,  5.82it/s]
 24%|       | 19/79 [00:01<00:07,  7.57it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.85it/s]
 35%|      | 28/79 [00:01<00:03, 14.12it/s]
 39%|      | 31/79 [00:02<00:02, 16.32it/s]
 43%|     | 34/79 [00:02<00:02, 18.35it/s]
 47%|     | 37/79 [00:02<00:02, 20.07it/s]
 51%|     | 40/79 [00:02<00:01, 21.45it/s]
 54%|    | 43/79 [00:02<00:01, 22.62it/s]
 58%|    | 46/79 [00:02<00:01, 23.54it/s]
 62%|   | 49/79 [00:02<00:01, 24.34it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.76it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:05,  9.57it/s]
 32%|      | 25/79 [00:01<00:04, 11.71it/s]
 35%|      | 28/79 [00:01<00:03, 13.95it/s]
 39%|      | 31/79 [00:02<00:02, 16.09it/s]
 43%|     | 34/79 [00:02<00:02, 18.14it/s]
 47%|     | 37/79 [00:02<00:02, 20.06it/s]
 51%|     | 40/79 [00:02<00:01, 21.57it/s]
 54%|    | 43/79 [00:02<00:01, 22.71it/s]
 58%|    | 46/79 [00:02<00:01, 23.76it/s]
 62%|   | 49/79 [00:02<00:01, 24.47it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.47it/s]
 28%|       | 22/79 [00:01<00:06,  9.49it/s]
 32%|      | 25/79 [00:01<00:04, 11.70it/s]
 35%|      | 28/79 [00:01<00:03, 14.02it/s]
 39%|      | 31/79 [00:02<00:02, 16.24it/s]
 43%|     | 34/79 [00:02<00:02, 18.23it/s]
 47%|     | 37/79 [00:02<00:02, 19.96it/s]
 51%|     | 40/79 [00:02<00:01, 21.49it/s]
 54%|    | 43/79 [00:02<00:01, 22.56it/s]
 58%|    | 46/79 [00:02<00:01, 23.40it/s]
 62%|   | 49/79 [00:02<00:01, 24.40it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.65it/s]
 35%|      | 28/79 [00:01<00:03, 14.00it/s]
 39%|      | 31/79 [00:02<00:02, 16.31it/s]
 43%|     | 34/79 [00:02<00:02, 18.35it/s]
 47%|     | 37/79 [00:02<00:02, 20.31it/s]
 51%|     | 40/79 [00:02<00:01, 21.68it/s]
 54%|    | 43/79 [00:02<00:01, 22.67it/s]
 58%|    | 46/79 [00:02<00:01, 23.35it/s]
 62%|   | 49/79 [00:02<00:01, 24.10it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.45it/s]
 28%|       | 22/79 [00:01<00:06,  9.49it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 13.97it/s]
 39%|      | 31/79 [00:02<00:02, 16.28it/s]
 43%|     | 34/79 [00:02<00:02, 18.19it/s]
 47%|     | 37/79 [00:02<00:02, 20.14it/s]
 51%|     | 40/79 [00:02<00:01, 21.61it/s]
 54%|    | 43/79 [00:02<00:01, 22.85it/s]
 58%|    | 46/79 [00:02<00:01, 23.76it/s]
 62%|   | 49/79 [00:02<00:01, 24.37it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  4%|         | 3/79 [00:00<00:45,  1.67it/s]
  8%|         | 6/79 [00:01<00:31,  2.31it/s]
 11%|        | 9/79 [00:01<00:21,  3.18it/s]
 15%|        | 12/79 [00:01<00:15,  4.32it/s]
 19%|        | 15/79 [00:01<00:11,  5.74it/s]
 23%|       | 18/79 [00:01<00:08,  7.49it/s]
 27%|       | 21/79 [00:01<00:06,  9.49it/s]
 30%|       | 24/79 [00:01<00:04, 11.70it/s]
 34%|      | 27/79 [00:01<00:03, 13.98it/s]
 38%|      | 30/79 [00:02<00:03, 16.08it/s]
 42%|     | 33/79 [00:02<00:02, 18.02it/s]
 46%|     | 36/79 [00:02<00:02, 19.71it/s]
 49%|     | 39/79 [00:02<00:01, 20.97it/s]
 53%|    | 42/79 [00:02<00:01, 22.08it/s]
 57%|    | 45/79 [00:02<00:01, 22.90it/s]
 61%|    | 48/79 [00:02<00:01, 23.70it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.46it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.37it/s]
 35%|      | 28/79 [00:01<00:03, 13.70it/s]
 39%|      | 31/79 [00:02<00:03, 15.96it/s]
 43%|     | 34/79 [00:02<00:02, 17.96it/s]
 47%|     | 37/79 [00:02<00:02, 19.77it/s]
 51%|     | 40/79 [00:02<00:01, 21.12it/s]
 54%|    | 43/79 [00:02<00:01, 22.01it/s]
 58%|    | 46/79 [00:02<00:01, 23.03it/s]
 62%|   | 49/79 [00:02<00:01, 23.91it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.67it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.66it/s]
 35%|      | 28/79 [00:01<00:03, 13.94it/s]
 39%|      | 31/79 [00:02<00:02, 16.19it/s]
 43%|     | 34/79 [00:02<00:02, 18.24it/s]
 47%|     | 37/79 [00:02<00:02, 20.02it/s]
 51%|     | 40/79 [00:02<00:01, 21.44it/s]
 54%|    | 43/79 [00:02<00:01, 22.67it/s]
 58%|    | 46/79 [00:02<00:01, 23.59it/s]
 62%|   | 49/79 [00:02<00:01, 24.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  4%|         | 3/79 [00:01<00:48,  1.56it/s]
  8%|         | 6/79 [00:01<00:33,  2.17it/s]
 11%|        | 9/79 [00:01<00:23,  2.99it/s]
 15%|        | 12/79 [00:01<00:16,  4.07it/s]
 19%|        | 15/79 [00:01<00:11,  5.44it/s]
 23%|       | 18/79 [00:01<00:08,  7.12it/s]
 27%|       | 21/79 [00:01<00:06,  9.09it/s]
 30%|       | 24/79 [00:01<00:04, 11.27it/s]
 34%|      | 27/79 [00:01<00:03, 13.60it/s]
 38%|      | 30/79 [00:02<00:03, 15.79it/s]
 42%|     | 33/79 [00:02<00:02, 17.96it/s]
 46%|     | 36/79 [00:02<00:02, 19.78it/s]
 49%|     | 39/79 [00:02<00:01, 21.27it/s]
 53%|    | 42/79 [00:02<00:01, 22.46it/s]
 57%|    | 45/79 [00:02<00:01, 23.38it/s]
 61%|    | 48/79 [00:02<00:01, 23.92it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.54it/s]
 24%|       | 19/79 [00:01<00:08,  7.26it/s]
 28%|       | 22/79 [00:01<00:06,  9.12it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.65it/s]
 39%|      | 31/79 [00:02<00:03, 15.99it/s]
 43%|     | 34/79 [00:02<00:02, 18.01it/s]
 47%|     | 37/79 [00:02<00:02, 19.85it/s]
 51%|     | 40/79 [00:02<00:01, 21.27it/s]
 54%|    | 43/79 [00:02<00:01, 22.53it/s]
 58%|    | 46/79 [00:02<00:01, 23.16it/s]
 62%|   | 49/79 [00:02<00:01, 23.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.21it/s]
 28%|       | 22/79 [00:01<00:06,  9.22it/s]
 32%|      | 25/79 [00:01<00:04, 11.41it/s]
 35%|      | 28/79 [00:01<00:03, 13.69it/s]
 39%|      | 31/79 [00:02<00:03, 15.99it/s]
 43%|     | 34/79 [00:02<00:02, 17.84it/s]
 47%|     | 37/79 [00:02<00:02, 19.57it/s]
 51%|     | 40/79 [00:02<00:01, 20.94it/s]
 54%|    | 43/79 [00:02<00:01, 22.07it/s]
 58%|    | 46/79 [00:02<00:01, 23.15it/s]
 62%|   | 49/79 [00:02<00:01, 23.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.12it/s]
 28%|       | 22/79 [00:01<00:06,  9.10it/s]
 32%|      | 25/79 [00:01<00:04, 11.29it/s]
 35%|      | 28/79 [00:01<00:03, 13.63it/s]
 39%|      | 31/79 [00:02<00:03, 15.92it/s]
 43%|     | 34/79 [00:02<00:02, 17.95it/s]
 47%|     | 37/79 [00:02<00:02, 19.77it/s]
 51%|     | 40/79 [00:02<00:01, 21.22it/s]
 54%|    | 43/79 [00:02<00:01, 22.49it/s]
 58%|    | 46/79 [00:02<00:01, 23.18it/s]
 62%|   | 49/79 [00:02<00:01, 23.73it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.46it/s]
 24%|       | 19/79 [00:01<00:08,  7.14it/s]
 28%|       | 22/79 [00:01<00:06,  9.13it/s]
 32%|      | 25/79 [00:01<00:04, 11.39it/s]
 35%|      | 28/79 [00:01<00:03, 13.51it/s]
 39%|      | 31/79 [00:02<00:03, 15.82it/s]
 43%|     | 34/79 [00:02<00:02, 17.56it/s]
 47%|     | 37/79 [00:02<00:02, 19.52it/s]
 51%|     | 40/79 [00:02<00:01, 20.57it/s]
 54%|    | 43/79 [00:02<00:01, 21.79it/s]
 58%|    | 46/79 [00:02<00:01, 22.32it/s]
 62%|   | 49/79 [00:02<00:01, 23.16it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:00<00:47,  1.61it/s]
  8%|         | 6/79 [00:01<00:32,  2.24it/s]
 10%|         | 8/79 [00:01<00:23,  3.04it/s]
 14%|        | 11/79 [00:01<00:16,  4.12it/s]
 18%|        | 14/79 [00:01<00:11,  5.50it/s]
 22%|       | 17/79 [00:01<00:08,  7.19it/s]
 25%|       | 20/79 [00:01<00:06,  9.14it/s]
 29%|       | 23/79 [00:01<00:04, 11.23it/s]
 33%|      | 26/79 [00:01<00:03, 13.46it/s]
 37%|      | 29/79 [00:02<00:03, 15.72it/s]
 41%|      | 32/79 [00:02<00:02, 17.66it/s]
 44%|     | 35/79 [00:02<00:02, 19.29it/s]
 48%|     | 38/79 [00:02<00:01, 20.54it/s]
 52%|    | 41/79 [00:02<00:01, 21.89it/s]
 56%|    | 44/79 [00:02<00:01, 22.67it/s]
 59%|    | 47/79 [00:02<00:01, 23.26it/s]
 63%|   | 50/79 [00:02<00:01, 23.66it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.18it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.11it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.53it/s]
 39%|      | 31/79 [00:02<00:03, 15.69it/s]
 43%|     | 34/79 [00:02<00:02, 17.79it/s]
 47%|     | 37/79 [00:02<00:02, 19.20it/s]
 51%|     | 40/79 [00:02<00:01, 20.66it/s]
 54%|    | 43/79 [00:02<00:01, 21.85it/s]
 58%|    | 46/79 [00:02<00:01, 22.72it/s]
 62%|   | 49/79 [00:02<00:01, 23.36it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.81it/s]
 16%|        | 13/79 [00:01<00:17,  3.82it/s]
 20%|        | 16/79 [00:01<00:12,  5.13it/s]
 24%|       | 19/79 [00:01<00:08,  6.74it/s]
 28%|       | 22/79 [00:01<00:06,  8.62it/s]
 32%|      | 25/79 [00:01<00:05, 10.75it/s]
 35%|      | 28/79 [00:02<00:03, 12.99it/s]
 39%|      | 31/79 [00:02<00:03, 15.16it/s]
 43%|     | 34/79 [00:02<00:02, 17.19it/s]
 47%|     | 37/79 [00:02<00:02, 18.98it/s]
 51%|     | 40/79 [00:02<00:01, 20.56it/s]
 54%|    | 43/79 [00:02<00:01, 21.66it/s]
 58%|    | 46/79 [00:02<00:01, 22.66it/s]
 62%|   | 49/79 [00:02<00:01, 23.47it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.36it/s]
 24%|       | 19/79 [00:01<00:08,  7.01it/s]
 28%|       | 22/79 [00:01<00:06,  8.87it/s]
 32%|      | 25/79 [00:01<00:04, 10.99it/s]
 35%|      | 28/79 [00:02<00:03, 13.13it/s]
 39%|      | 31/79 [00:02<00:03, 15.24it/s]
 43%|     | 34/79 [00:02<00:02, 17.27it/s]
 47%|     | 37/79 [00:02<00:02, 18.90it/s]
 51%|     | 40/79 [00:02<00:01, 20.38it/s]
 54%|    | 43/79 [00:02<00:01, 21.49it/s]
 58%|    | 46/79 [00:02<00:01, 22.31it/s]
 62%|   | 49/79 [00:02<00:01, 22.92it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.92it/s]
 20%|        | 16/79 [00:01<00:11,  5.26it/s]
 24%|       | 19/79 [00:01<00:08,  6.90it/s]
 28%|       | 22/79 [00:01<00:06,  8.82it/s]
 32%|      | 25/79 [00:01<00:04, 10.91it/s]
 35%|      | 28/79 [00:02<00:03, 13.14it/s]
 39%|      | 31/79 [00:02<00:03, 15.26it/s]
 43%|     | 34/79 [00:02<00:02, 17.24it/s]
 47%|     | 37/79 [00:02<00:02, 18.65it/s]
 51%|     | 40/79 [00:02<00:01, 20.24it/s]
 54%|    | 43/79 [00:02<00:01, 21.22it/s]
 58%|    | 46/79 [00:02<00:01, 22.17it/s]
 62%|   | 49/79 [00:02<00:01, 23.03it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  8.98it/s]
 32%|      | 25/79 [00:01<00:04, 11.07it/s]
 35%|      | 28/79 [00:02<00:03, 13.27it/s]
 39%|      | 31/79 [00:02<00:03, 15.47it/s]
 43%|     | 34/79 [00:02<00:02, 17.38it/s]
 47%|     | 37/79 [00:02<00:02, 19.00it/s]
 51%|     | 40/79 [00:02<00:01, 20.28it/s]
 54%|    | 43/79 [00:02<00:01, 21.47it/s]
 58%|    | 46/79 [00:02<00:01, 22.35it/s]
 62%|   | 49/79 [00:02<00:01, 23.14it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.39it/s]
 24%|       | 19/79 [00:01<00:08,  7.05it/s]
 28%|       | 22/79 [00:01<00:06,  8.97it/s]
 32%|      | 25/79 [00:01<00:04, 11.07it/s]
 35%|      | 28/79 [00:02<00:03, 13.12it/s]
 39%|      | 31/79 [00:02<00:03, 15.21it/s]
 43%|     | 34/79 [00:02<00:02, 17.11it/s]
 47%|     | 37/79 [00:02<00:02, 18.77it/s]
 51%|     | 40/79 [00:02<00:01, 20.08it/s]
 54%|    | 43/79 [00:02<00:01, 21.14it/s]
 58%|    | 46/79 [00:02<00:01, 22.15it/s]
 62%|   | 49/79 [00:02<00:01, 22.62it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:52,  1.44it/s]
  9%|         | 7/79 [00:01<00:35,  2.01it/s]
 13%|        | 10/79 [00:01<00:24,  2.77it/s]
 16%|        | 13/79 [00:01<00:17,  3.79it/s]
 20%|        | 16/79 [00:01<00:12,  5.08it/s]
 24%|       | 19/79 [00:01<00:08,  6.69it/s]
 28%|       | 22/79 [00:01<00:06,  8.61it/s]
 32%|      | 25/79 [00:01<00:05, 10.74it/s]
 35%|      | 28/79 [00:02<00:03, 12.95it/s]
 39%|      | 31/79 [00:02<00:03, 15.08it/s]
 43%|     | 34/79 [00:02<00:02, 17.10it/s]
 47%|     | 37/79 [00:02<00:02, 18.80it/s]
 51%|     | 40/79 [00:02<00:01, 20.24it/s]
 54%|    | 43/79 [00:02<00:01, 21.23it/s]
 58%|    | 46/79 [00:02<00:01, 22.37it/s]
 62%|   | 49/79 [00:02<00:01, 22.78it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.08it/s]
 13%|        | 10/79 [00:01<00:24,  2.87it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.82it/s]
 28%|       | 22/79 [00:01<00:06,  8.67it/s]
 32%|      | 25/79 [00:01<00:05, 10.77it/s]
 35%|      | 28/79 [00:02<00:03, 12.90it/s]
 39%|      | 31/79 [00:02<00:03, 15.10it/s]
 43%|     | 34/79 [00:02<00:02, 17.13it/s]
 47%|     | 37/79 [00:02<00:02, 18.80it/s]
 51%|     | 40/79 [00:02<00:01, 20.14it/s]
 54%|    | 43/79 [00:02<00:01, 21.16it/s]
 58%|    | 46/79 [00:02<00:01, 22.09it/s]
 62%|   | 49/79 [00:02<00:01, 22.75it/s]
 66%|   | 52/79 [00:03<00:01, 25.47it/s]
 70%|   | 55/79 [00:02<00:00, 25.84it/s]
 73%|  | 58/79 [00:02<00:00, 26.15it/s]
 77%|  | 61/79 [00:03<00:00, 26.31it/s]
 81%|  | 64/79 [00:03<00:00, 26.36it/s]
 85%| | 67/79 [00:03<00:00, 26.44it/s]
 89%| | 70/79 [00:03<00:00, 26.29it/s]
 92%|| 73/79 [00:03<00:00, 26.63it/s]
 96%|| 76/79 [00:03<00:00, 27.03it/s]
100%|| 79/79 [00:03<00:00, 27.79it/s]
, 24.39it/s]
 70%|   | 55/79 [00:02<00:00, 24.83it/s]
 73%|  | 58/79 [00:02<00:00, 25.07it/s]
 77%|  | 61/79 [00:03<00:00, 25.46it/s]
 81%|  | 64/79 [00:03<00:00, 25.19it/s]
 85%| | 67/79 [00:03<00:00, 25.36it/s]
 89%| | 70/79 [00:03<00:00, 25.42it/s]
 92%|| 73/79 [00:03<00:00, 25.80it/s]
 96%|| 76/79 [00:03<00:00, 26.43it/s]
100%|| 79/79 [00:03<00:00, 27.34it/s]
, 24.62it/s]
 70%|   | 55/79 [00:02<00:00, 24.65it/s]
 73%|  | 58/79 [00:03<00:00, 24.87it/s]
 77%|  | 61/79 [00:03<00:00, 24.92it/s]
 81%|  | 64/79 [00:03<00:00, 25.01it/s]
 85%| | 67/79 [00:03<00:00, 25.40it/s]
 89%| | 70/79 [00:03<00:00, 25.09it/s]
 92%|| 73/79 [00:03<00:00, 25.57it/s]
 96%|| 76/79 [00:03<00:00, 26.25it/s]
100%|| 79/79 [00:03<00:00, 20.45it/s]
, 25.20it/s]
 70%|   | 55/79 [00:02<00:00, 25.68it/s]
 73%|  | 58/79 [00:02<00:00, 25.68it/s]
 77%|  | 61/79 [00:03<00:00, 25.64it/s]
 81%|  | 64/79 [00:03<00:00, 25.66it/s]
 85%| | 67/79 [00:03<00:00, 25.91it/s]
 89%| | 70/79 [00:03<00:00, 25.93it/s]
 92%|| 73/79 [00:03<00:00, 26.21it/s]
 96%|| 76/79 [00:03<00:00, 26.57it/s]
100%|| 79/79 [00:03<00:00, 27.43it/s]
, 25.06it/s]
 70%|   | 55/79 [00:02<00:00, 25.58it/s]
 73%|  | 58/79 [00:03<00:00, 25.69it/s]
 77%|  | 61/79 [00:03<00:00, 26.02it/s]
 81%|  | 64/79 [00:03<00:00, 26.22it/s]
 85%| | 67/79 [00:03<00:00, 26.15it/s]
 89%| | 70/79 [00:03<00:00, 26.24it/s]
 92%|| 73/79 [00:03<00:00, 25.83it/s]
 96%|| 76/79 [00:03<00:00, 26.22it/s]
100%|| 79/79 [00:03<00:00, 26.83it/s]
, 24.99it/s]
 70%|   | 55/79 [00:02<00:00, 25.64it/s]
 73%|  | 58/79 [00:03<00:00, 25.92it/s]
 77%|  | 61/79 [00:03<00:00, 25.89it/s]
 81%|  | 64/79 [00:03<00:00, 25.97it/s]
 85%| | 67/79 [00:03<00:00, 26.23it/s]
 89%| | 70/79 [00:03<00:00, 26.12it/s]
 92%|| 73/79 [00:03<00:00, 26.51it/s]
 96%|| 76/79 [00:03<00:00, 26.99it/s]
100%|| 79/79 [00:03<00:00, 27.79it/s]
, 24.60it/s]
 70%|   | 55/79 [00:02<00:00, 25.21it/s]
 73%|  | 58/79 [00:03<00:00, 25.22it/s]
 77%|  | 61/79 [00:03<00:00, 25.65it/s]
 81%|  | 64/79 [00:03<00:00, 25.69it/s]
 85%| | 67/79 [00:03<00:00, 25.88it/s]
 89%| | 70/79 [00:03<00:00, 25.89it/s]
 92%|| 73/79 [00:03<00:00, 26.17it/s]
 96%|| 76/79 [00:03<00:00, 26.76it/s]
100%|| 79/79 [00:03<00:00, 27.53it/s]
, 24.69it/s]
 70%|   | 55/79 [00:02<00:00, 24.81it/s]
 73%|  | 58/79 [00:03<00:00, 25.14it/s]
 77%|  | 61/79 [00:03<00:00, 25.39it/s]
 81%|  | 64/79 [00:03<00:00, 25.38it/s]
 85%| | 67/79 [00:03<00:00, 25.37it/s]
 89%| | 70/79 [00:03<00:00, 25.01it/s]
 92%|| 73/79 [00:03<00:00, 25.53it/s]
 96%|| 76/79 [00:03<00:00, 26.00it/s]
100%|| 79/79 [00:03<00:00, 27.01it/s]
, 24.99it/s]
 70%|   | 55/79 [00:02<00:00, 24.87it/s]
 73%|  | 58/79 [00:03<00:00, 24.90it/s]
 77%|  | 61/79 [00:03<00:00, 25.14it/s]
 81%|  | 64/79 [00:03<00:00, 25.21it/s]
 85%| | 67/79 [00:03<00:00, 25.33it/s]
 89%| | 70/79 [00:03<00:00, 25.29it/s]
 92%|| 73/79 [00:03<00:00, 25.70it/s]
 96%|| 76/79 [00:03<00:00, 26.27it/s]
100%|| 79/79 [00:03<00:00, 27.27it/s]
, 24.59it/s]
 70%|   | 55/79 [00:02<00:00, 25.06it/s]
 73%|  | 58/79 [00:03<00:00, 25.52it/s]
 77%|  | 61/79 [00:03<00:00, 25.52it/s]
 81%|  | 64/79 [00:03<00:00, 25.33it/s]
 85%| | 67/79 [00:03<00:00, 25.61it/s]
 89%| | 70/79 [00:03<00:00, 25.51it/s]
 92%|| 73/79 [00:03<00:00, 25.86it/s]
 96%|| 76/79 [00:03<00:00, 26.39it/s]
100%|| 79/79 [00:03<00:00, 27.07it/s]
, 24.70it/s]
 70%|   | 55/79 [00:02<00:00, 24.92it/s]
 73%|  | 58/79 [00:03<00:00, 25.10it/s]
 77%|  | 61/79 [00:03<00:00, 25.50it/s]
 81%|  | 64/79 [00:03<00:00, 25.66it/s]
 85%| | 67/79 [00:03<00:00, 26.08it/s]
 89%| | 70/79 [00:03<00:00, 26.25it/s]
 92%|| 73/79 [00:03<00:00, 26.56it/s]
 96%|| 76/79 [00:03<00:00, 27.01it/s]
100%|| 79/79 [00:03<00:00, 27.79it/s]
, 24.36it/s]
 70%|   | 55/79 [00:02<00:00, 24.57it/s]
 73%|  | 58/79 [00:03<00:00, 25.11it/s]
 77%|  | 61/79 [00:03<00:00, 25.14it/s]
 81%|  | 64/79 [00:03<00:00, 25.34it/s]
 85%| | 67/79 [00:03<00:00, 25.28it/s]
 89%| | 70/79 [00:03<00:00, 25.69it/s]
 92%|| 73/79 [00:03<00:00, 25.80it/s]
 96%|| 76/79 [00:03<00:00, 26.55it/s]
100%|| 79/79 [00:03<00:00, 27.31it/s]
, 24.80it/s]
 70%|   | 55/79 [00:02<00:00, 24.85it/s]
 73%|  | 58/79 [00:03<00:00, 25.16it/s]
 77%|  | 61/79 [00:03<00:00, 25.21it/s]
 81%|  | 64/79 [00:03<00:00, 25.14it/s]
 85%| | 67/79 [00:03<00:00, 25.11it/s]
 89%| | 70/79 [00:03<00:00, 25.50it/s]
 92%|| 73/79 [00:03<00:00, 25.54it/s]
 96%|| 76/79 [00:03<00:00, 26.31it/s]
100%|| 79/79 [00:03<00:00, 27.06it/s]
, 24.24it/s]
 70%|   | 55/79 [00:03<00:00, 24.76it/s]
 73%|  | 58/79 [00:03<00:00, 25.33it/s]
 77%|  | 61/79 [00:03<00:00, 25.43it/s]
 81%|  | 64/79 [00:03<00:00, 25.70it/s]
 85%| | 67/79 [00:03<00:00, 25.88it/s]
 89%| | 70/79 [00:03<00:00, 26.14it/s]
 92%|| 73/79 [00:03<00:00, 26.31it/s]
 96%|| 76/79 [00:03<00:00, 27.31it/s]
100%|| 79/79 [00:03<00:00, 27.59it/s]
, 24.43it/s]
 70%|   | 55/79 [00:02<00:00, 24.90it/s]
 73%|  | 58/79 [00:03<00:00, 25.03it/s]
 77%|  | 61/79 [00:03<00:00, 25.15it/s]
 81%|  | 64/79 [00:03<00:00, 25.30it/s]
 85%| | 67/79 [00:03<00:00, 25.32it/s]
 89%| | 70/79 [00:03<00:00, 25.35it/s]
 92%|| 73/79 [00:03<00:00, 25.91it/s]
 96%|| 76/79 [00:03<00:00, 26.53it/s]
100%|| 79/79 [00:03<00:00, 27.45it/s]
10it/s]
 68%|   | 54/79 [00:02<00:01, 24.64it/s]
 72%|  | 57/79 [00:03<00:00, 24.84it/s]
 76%|  | 60/79 [00:03<00:00, 24.75it/s]
 80%|  | 63/79 [00:03<00:00, 25.05it/s]
 84%| | 66/79 [00:03<00:00, 25.27it/s]
 87%| | 69/79 [00:03<00:00, 25.34it/s]
 91%| | 72/79 [00:03<00:00, 25.30it/s]
 95%|| 75/79 [00:03<00:00, 26.12it/s]
 99%|| 78/79 [00:03<00:00, 26.67it/s]
100%|| 79/79 [00:03<00:00, 19.91it/s]
, 24.53it/s]
 70%|   | 55/79 [00:02<00:00, 25.12it/s]
 73%|  | 58/79 [00:03<00:00, 25.32it/s]
 77%|  | 61/79 [00:03<00:00, 25.45it/s]
 81%|  | 64/79 [00:03<00:00, 25.69it/s]
 85%| | 67/79 [00:03<00:00, 25.71it/s]
 89%| | 70/79 [00:03<00:00, 26.18it/s]
 92%|| 73/79 [00:03<00:00, 26.05it/s]
 96%|| 76/79 [00:03<00:00, 26.78it/s]
100%|| 79/79 [00:03<00:00, 27.59it/s]
, 24.48it/s]
 70%|   | 55/79 [00:02<00:00, 24.83it/s]
 73%|  | 58/79 [00:03<00:00, 25.02it/s]
 77%|  | 61/79 [00:03<00:00, 25.05it/s]
 81%|  | 64/79 [00:03<00:00, 25.00it/s]
 85%| | 67/79 [00:03<00:00, 25.12it/s]
 89%| | 70/79 [00:03<00:00, 24.96it/s]
 92%|| 73/79 [00:03<00:00, 25.57it/s]
 96%|| 76/79 [00:03<00:00, 26.07it/s]
100%|| 79/79 [00:03<00:00, 27.09it/s]
74it/s]
 68%|   | 54/79 [00:02<00:01, 24.15it/s]
 72%|  | 57/79 [00:03<00:00, 24.20it/s]
 76%|  | 60/79 [00:03<00:00, 24.62it/s]
 80%|  | 63/79 [00:03<00:00, 24.55it/s]
 84%| | 66/79 [00:03<00:00, 24.64it/s]
 87%| | 69/79 [00:03<00:00, 24.67it/s]
 91%| | 72/79 [00:03<00:00, 25.04it/s]
 95%|| 75/79 [00:03<00:00, 25.91it/s]
 99%|| 78/79 [00:03<00:00, 26.64it/s]
100%|| 79/79 [00:04<00:00, 19.72it/s]
, 24.17it/s]
 70%|   | 55/79 [00:03<00:00, 24.36it/s]
 73%|  | 58/79 [00:03<00:00, 24.49it/s]
 77%|  | 61/79 [00:03<00:00, 24.41it/s]
 81%|  | 64/79 [00:03<00:00, 24.68it/s]
 85%| | 67/79 [00:03<00:00, 24.81it/s]
 89%| | 70/79 [00:03<00:00, 24.81it/s]
 92%|| 73/79 [00:03<00:00, 25.47it/s]
 96%|| 76/79 [00:03<00:00, 26.24it/s]
100%|| 79/79 [00:03<00:00, 27.12it/s]
49it/s]
 68%|   | 54/79 [00:02<00:01, 24.87it/s]
 72%|  | 57/79 [00:03<00:00, 24.98it/s]
 76%|  | 60/79 [00:03<00:00, 25.12it/s]
 80%|  | 63/79 [00:03<00:00, 25.32it/s]
 84%| | 66/79 [00:03<00:00, 25.26it/s]
 87%| | 69/79 [00:03<00:00, 25.55it/s]
 91%| | 72/79 [00:03<00:00, 25.29it/s]
 95%|| 75/79 [00:03<00:00, 26.17it/s]
 99%|| 78/79 [00:03<00:00, 26.25it/s]
100%|| 79/79 [00:04<00:00, 19.61it/s]
, 24.27it/s]
 70%|   | 55/79 [00:03<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 24.99it/s]
 77%|  | 61/79 [00:03<00:00, 25.11it/s]
 81%|  | 64/79 [00:03<00:00, 25.16it/s]
 85%| | 67/79 [00:03<00:00, 25.43it/s]
 89%| | 70/79 [00:03<00:00, 25.54it/s]
 92%|| 73/79 [00:03<00:00, 25.70it/s]
 96%|| 76/79 [00:03<00:00, 26.27it/s]
100%|| 79/79 [00:03<00:00, 27.04it/s]
, 23.85it/s]
 70%|   | 55/79 [00:03<00:00, 24.38it/s]
 73%|  | 58/79 [00:03<00:00, 24.62it/s]
 77%|  | 61/79 [00:03<00:00, 24.80it/s]
 81%|  | 64/79 [00:03<00:00, 25.14it/s]
 85%| | 67/79 [00:03<00:00, 25.31it/s]
 89%| | 70/79 [00:03<00:00, 25.28it/s]
 92%|| 73/79 [00:03<00:00, 25.55it/s]
 96%|| 76/79 [00:03<00:00, 26.23it/s]
100%|| 79/79 [00:03<00:00, 26.78it/s]
, 24.02it/s]
 70%|   | 55/79 [00:03<00:00, 24.34it/s]
 73%|  | 58/79 [00:03<00:00, 24.72it/s]
 77%|  | 61/79 [00:03<00:00, 25.10it/s]
 81%|  | 64/79 [00:03<00:00, 25.24it/s]
 85%| | 67/79 [00:03<00:00, 25.39it/s]
 89%| | 70/79 [00:03<00:00, 25.55it/s]
 92%|| 73/79 [00:03<00:00, 25.65it/s]
 96%|| 76/79 [00:03<00:00, 26.10it/s]
100%|| 79/79 [00:03<00:00, 26.72it/s]
, 23.85it/s]
 70%|   | 55/79 [00:03<00:00, 24.44it/s]
 73%|  | 58/79 [00:03<00:00, 24.74it/s]
 77%|  | 61/79 [00:03<00:00, 25.00it/s]
 81%|  | 64/79 [00:03<00:00, 25.11it/s]
 85%| | 67/79 [00:03<00:00, 25.46it/s]
 89%| | 70/79 [00:03<00:00, 25.18it/s]
 92%|| 73/79 [00:03<00:00, 25.30it/s]
 96%|| 76/79 [00:03<00:00, 25.86it/s]
100%|| 79/79 [00:04<00:00, 26.58it/s]
, 23.35it/s]
 70%|   | 55/79 [00:03<00:01, 23.63it/s]
 73%|  | 58/79 [00:03<00:00, 23.89it/s]
 77%|  | 61/79 [00:03<00:00, 24.10it/s]
 81%|  | 64/79 [00:03<00:00, 24.54it/s]
 85%| | 67/79 [00:03<00:00, 24.78it/s]
 89%| | 70/79 [00:03<00:00, 24.95it/s]
 92%|| 73/79 [00:03<00:00, 25.54it/s]
 96%|| 76/79 [00:03<00:00, 26.12it/s]
100%|| 79/79 [00:04<00:00, 26.95it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 24.05it/s]
 71%|   | 56/79 [00:03<00:00, 24.29it/s]
 75%|  | 59/79 [00:03<00:00, 24.39it/s]
 78%|  | 62/79 [00:03<00:00, 24.11it/s]
 82%| | 65/79 [00:03<00:00, 24.45it/s]
 86%| | 68/79 [00:03<00:00, 24.72it/s]
 90%| | 71/79 [00:03<00:00, 24.50it/s]
 94%|| 74/79 [00:03<00:00, 25.28it/s]
 97%|| 77/79 [00:03<00:00, 25.96it/s]
100%|| 79/79 [00:04<00:00, 19.18it/s]
, 23.50it/s]
 70%|   | 55/79 [00:03<00:01, 23.71it/s]
 73%|  | 58/79 [00:03<00:00, 23.96it/s]
 77%|  | 61/79 [00:03<00:00, 24.32it/s]
 81%|  | 64/79 [00:03<00:00, 24.22it/s]
 85%| | 67/79 [00:03<00:00, 24.15it/s]
 89%| | 70/79 [00:03<00:00, 24.10it/s]
 92%|| 73/79 [00:03<00:00, 24.51it/s]
 96%|| 76/79 [00:03<00:00, 25.28it/s]
100%|| 79/79 [00:04<00:00, 26.27it/s]
, 23.30it/s]
 70%|   | 55/79 [00:03<00:01, 23.87it/s]
 73%|  | 58/79 [00:03<00:00, 24.12it/s]
 77%|  | 61/79 [00:03<00:00, 24.01it/s]
 81%|  | 64/79 [00:03<00:00, 24.19it/s]
 85%| | 67/79 [00:03<00:00, 24.45it/s]
 89%| | 70/79 [00:03<00:00, 24.60it/s]
 92%|| 73/79 [00:03<00:00, 24.81it/s]
 96%|| 76/79 [00:03<00:00, 25.48it/s]
100%|| 79/79 [00:04<00:00, 26.41it/s]
, 23.31it/s]
 70%|   | 55/79 [00:03<00:01, 23.69it/s]
 73%|  | 58/79 [00:03<00:00, 24.31it/s]
 77%|  | 61/79 [00:03<00:00, 24.48it/s]
 81%|  | 64/79 [00:03<00:00, 24.59it/s]
 85%| | 67/79 [00:03<00:00, 24.84it/s]
 89%| | 70/79 [00:03<00:00, 25.02it/s]
 92%|| 73/79 [00:03<00:00, 25.24it/s]
 96%|| 76/79 [00:03<00:00, 25.89it/s]
100%|| 79/79 [00:04<00:00, 26.67it/s]
, 23.03it/s]
 70%|   | 55/79 [00:03<00:01, 23.71it/s]
 73%|  | 58/79 [00:03<00:00, 23.99it/s]
 77%|  | 61/79 [00:03<00:00, 24.39it/s]
 81%|  | 64/79 [00:03<00:00, 24.68it/s]
 85%| | 67/79 [00:03<00:00, 24.84it/s]
 89%| | 70/79 [00:03<00:00, 24.85it/s]
 92%|| 73/79 [00:03<00:00, 25.10it/s]
 96%|| 76/79 [00:03<00:00, 25.57it/s]
100%|| 79/79 [00:04<00:00, 26.26it/s]
, 22.99it/s]
 70%|   | 55/79 [00:03<00:01, 23.18it/s]
 73%|  | 58/79 [00:03<00:00, 23.80it/s]
 77%|  | 61/79 [00:03<00:00, 23.73it/s]
 81%|  | 64/79 [00:03<00:00, 23.76it/s]
 85%| | 67/79 [00:03<00:00, 24.01it/s]
 89%| | 70/79 [00:03<00:00, 24.17it/s]
 92%|| 73/79 [00:03<00:00, 24.47it/s]
 96%|| 76/79 [00:03<00:00, 25.28it/s]
100%|| 79/79 [00:04<00:00, 26.24it/s]
2020-06-23 17:35:47,795 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.184648 (0.026781744384765625 s / img per device, on 32 devices)
2020-06-23 17:35:47,815 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:35:47,815 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:35:47,834 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592958956585, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 10, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592958956586, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 10}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:35:57,335 maskrcnn_benchmark.trainer INFO: eta: 1:06:32  iter: 8260  loss: 0.5686 (0.7728)  loss_classifier: 0.1952 (0.2859)  loss_box_reg: 0.0853 (0.1241)  loss_mask: 0.2541 (0.3031)  loss_objectness: 0.0160 (0.0387)  loss_rpn_box_reg: 0.0059 (0.0209)  time: 0.1083 (0.1258)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5155
2020-06-23 17:35:59,505 maskrcnn_benchmark.trainer INFO: eta: 1:06:28  iter: 8280  loss: 0.5599 (0.7724)  loss_classifier: 0.1788 (0.2857)  loss_box_reg: 0.0764 (0.1240)  loss_mask: 0.2479 (0.3030)  loss_objectness: 0.0174 (0.0387)  loss_rpn_box_reg: 0.0126 (0.0209)  time: 0.1081 (0.1257)  data: 0.0015 (0.0184)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:01,687 maskrcnn_benchmark.trainer INFO: eta: 1:06:24  iter: 8300  loss: 0.5003 (0.7719)  loss_classifier: 0.1782 (0.2855)  loss_box_reg: 0.0775 (0.1239)  loss_mask: 0.2318 (0.3029)  loss_objectness: 0.0172 (0.0386)  loss_rpn_box_reg: 0.0075 (0.0209)  time: 0.1087 (0.1257)  data: 0.0014 (0.0184)  lr: 0.160000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
2020-06-23 17:36:03,861 maskrcnn_benchmark.trainer INFO: eta: 1:06:21  iter: 8320  loss: 0.6436 (0.7716)  loss_classifier: 0.1915 (0.2853)  loss_box_reg: 0.0941 (0.1239)  loss_mask: 0.2821 (0.3028)  loss_objectness: 0.0163 (0.0386)  loss_rpn_box_reg: 0.0112 (0.0209)  time: 0.1070 (0.1257)  data: 0.0014 (0.0183)  lr: 0.160000  max mem: 5155
DONE (t=0.77s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.66s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.30054
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.50399
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.32061
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.16457
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.32134
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.39070
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.27398
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43762
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.46036
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27808
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.49061
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.57417
2020-06-23 17:36:06,027 maskrcnn_benchmark.trainer INFO: eta: 1:06:17  iter: 8340  loss: 0.6998 (0.7714)  loss_classifier: 0.2436 (0.2853)  loss_box_reg: 0.1186 (0.1239)  loss_mask: 0.2689 (0.3028)  loss_objectness: 0.0300 (0.0386)  loss_rpn_box_reg: 0.0128 (0.0209)  time: 0.1081 (0.1256)  data: 0.0015 (0.0183)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:08,196 maskrcnn_benchmark.trainer INFO: eta: 1:06:13  iter: 8360  loss: 0.5850 (0.7710)  loss_classifier: 0.1929 (0.2851)  loss_box_reg: 0.0950 (0.1238)  loss_mask: 0.2505 (0.3026)  loss_objectness: 0.0144 (0.0386)  loss_rpn_box_reg: 0.0064 (0.0209)  time: 0.1078 (0.1256)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:10,358 maskrcnn_benchmark.trainer INFO: eta: 1:06:09  iter: 8380  loss: 0.6353 (0.7708)  loss_classifier: 0.2151 (0.2850)  loss_box_reg: 0.1048 (0.1237)  loss_mask: 0.2750 (0.3026)  loss_objectness: 0.0239 (0.0386)  loss_rpn_box_reg: 0.0087 (0.0209)  time: 0.1083 (0.1255)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:36:12,507 maskrcnn_benchmark.trainer INFO: eta: 1:06:05  iter: 8400  loss: 0.6000 (0.7703)  loss_classifier: 0.1879 (0.2848)  loss_box_reg: 0.0766 (0.1237)  loss_mask: 0.2434 (0.3024)  loss_objectness: 0.0199 (0.0385)  loss_rpn_box_reg: 0.0098 (0.0209)  time: 0.1074 (0.1255)  data: 0.0014 (0.0182)  lr: 0.160000  max mem: 5155
DONE (t=1.96s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:36:14,662 maskrcnn_benchmark.trainer INFO: eta: 1:06:01  iter: 8420  loss: 0.5923 (0.7700)  loss_classifier: 0.2016 (0.2847)  loss_box_reg: 0.0930 (0.1236)  loss_mask: 0.2792 (0.3024)  loss_objectness: 0.0142 (0.0385)  loss_rpn_box_reg: 0.0062 (0.0208)  time: 0.1067 (0.1255)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5155

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0


Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0
Grad overflow on iteration  8430

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0


Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0

Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0
Grad overflow on iteration  8430
Using dynamic loss scale of  65536.0
2020-06-23 17:36:16,779 maskrcnn_benchmark.trainer INFO: eta: 1:05:57  iter: 8440  loss: 0.6346 (0.7697)  loss_classifier: 0.2213 (0.2845)  loss_box_reg: 0.1007 (0.1236)  loss_mask: 0.2569 (0.3023)  loss_objectness: 0.0171 (0.0385)  loss_rpn_box_reg: 0.0063 (0.0208)  time: 0.1060 (0.1254)  data: 0.0014 (0.0181)  lr: 0.160000  max mem: 5155
DONE (t=2.67s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.28144
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.47348
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.29386
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.11816
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.30418
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.42228
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.26311
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.40967
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.42944
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.23804
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.46363
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.56457
2020-06-23 17:36:17,454 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.30054237647782206, segm mAP: 0.281438217721952
:::MLLOG {"namespace": "", "time_ms": 1592958977454, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.30054237647782206, "SEGM": 0.281438217721952}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 9}}
:::MLLOG {"namespace": "", "time_ms": 1592958977455, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 9}}
2020-06-23 17:36:19,075 maskrcnn_benchmark.trainer INFO: eta: 1:05:54  iter: 8460  loss: 0.6568 (0.7694)  loss_classifier: 0.2241 (0.2844)  loss_box_reg: 0.0962 (0.1235)  loss_mask: 0.2485 (0.3022)  loss_objectness: 0.0156 (0.0385)  loss_rpn_box_reg: 0.0091 (0.0208)  time: 0.1074 (0.1254)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:21,255 maskrcnn_benchmark.trainer INFO: eta: 1:05:50  iter: 8480  loss: 0.6086 (0.7690)  loss_classifier: 0.1963 (0.2843)  loss_box_reg: 0.0806 (0.1234)  loss_mask: 0.2518 (0.3021)  loss_objectness: 0.0155 (0.0384)  loss_rpn_box_reg: 0.0133 (0.0208)  time: 0.1079 (0.1253)  data: 0.0014 (0.0180)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:23,409 maskrcnn_benchmark.trainer INFO: eta: 1:05:47  iter: 8500  loss: 0.6084 (0.7688)  loss_classifier: 0.2045 (0.2841)  loss_box_reg: 0.1004 (0.1234)  loss_mask: 0.2619 (0.3020)  loss_objectness: 0.0165 (0.0384)  loss_rpn_box_reg: 0.0100 (0.0208)  time: 0.1077 (0.1253)  data: 0.0013 (0.0180)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:25,553 maskrcnn_benchmark.trainer INFO: eta: 1:05:43  iter: 8520  loss: 0.6087 (0.7684)  loss_classifier: 0.2086 (0.2840)  loss_box_reg: 0.0884 (0.1233)  loss_mask: 0.2627 (0.3019)  loss_objectness: 0.0166 (0.0384)  loss_rpn_box_reg: 0.0076 (0.0208)  time: 0.1069 (0.1253)  data: 0.0013 (0.0179)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:27,731 maskrcnn_benchmark.trainer INFO: eta: 1:05:39  iter: 8540  loss: 0.5908 (0.7681)  loss_classifier: 0.2144 (0.2839)  loss_box_reg: 0.0964 (0.1233)  loss_mask: 0.2337 (0.3018)  loss_objectness: 0.0155 (0.0383)  loss_rpn_box_reg: 0.0098 (0.0208)  time: 0.1084 (0.1252)  data: 0.0013 (0.0179)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:29,886 maskrcnn_benchmark.trainer INFO: eta: 1:05:35  iter: 8560  loss: 0.6816 (0.7679)  loss_classifier: 0.2348 (0.2837)  loss_box_reg: 0.1043 (0.1233)  loss_mask: 0.2795 (0.3017)  loss_objectness: 0.0168 (0.0384)  loss_rpn_box_reg: 0.0129 (0.0208)  time: 0.1080 (0.1252)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:32,046 maskrcnn_benchmark.trainer INFO: eta: 1:05:32  iter: 8580  loss: 0.7368 (0.7677)  loss_classifier: 0.2476 (0.2836)  loss_box_reg: 0.1091 (0.1233)  loss_mask: 0.2633 (0.3016)  loss_objectness: 0.0180 (0.0384)  loss_rpn_box_reg: 0.0116 (0.0208)  time: 0.1073 (0.1251)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:34,189 maskrcnn_benchmark.trainer INFO: eta: 1:05:28  iter: 8600  loss: 0.6580 (0.7676)  loss_classifier: 0.2340 (0.2836)  loss_box_reg: 0.1045 (0.1232)  loss_mask: 0.2605 (0.3015)  loss_objectness: 0.0202 (0.0384)  loss_rpn_box_reg: 0.0122 (0.0208)  time: 0.1070 (0.1251)  data: 0.0014 (0.0178)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:36,352 maskrcnn_benchmark.trainer INFO: eta: 1:05:24  iter: 8620  loss: 0.5702 (0.7672)  loss_classifier: 0.2054 (0.2835)  loss_box_reg: 0.0830 (0.1232)  loss_mask: 0.2498 (0.3014)  loss_objectness: 0.0179 (0.0383)  loss_rpn_box_reg: 0.0062 (0.0208)  time: 0.1078 (0.1251)  data: 0.0013 (0.0177)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:38,504 maskrcnn_benchmark.trainer INFO: eta: 1:05:20  iter: 8640  loss: 0.6440 (0.7671)  loss_classifier: 0.2528 (0.2834)  loss_box_reg: 0.0899 (0.1231)  loss_mask: 0.2756 (0.3014)  loss_objectness: 0.0266 (0.0384)  loss_rpn_box_reg: 0.0126 (0.0208)  time: 0.1070 (0.1250)  data: 0.0014 (0.0177)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:40,669 maskrcnn_benchmark.trainer INFO: eta: 1:05:16  iter: 8660  loss: 0.6248 (0.7668)  loss_classifier: 0.2280 (0.2833)  loss_box_reg: 0.0985 (0.1231)  loss_mask: 0.2652 (0.3013)  loss_objectness: 0.0168 (0.0383)  loss_rpn_box_reg: 0.0054 (0.0208)  time: 0.1081 (0.1250)  data: 0.0013 (0.0176)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:42,824 maskrcnn_benchmark.trainer INFO: eta: 1:05:13  iter: 8680  loss: 0.5867 (0.7666)  loss_classifier: 0.2215 (0.2832)  loss_box_reg: 0.1005 (0.1231)  loss_mask: 0.2512 (0.3012)  loss_objectness: 0.0146 (0.0383)  loss_rpn_box_reg: 0.0060 (0.0208)  time: 0.1069 (0.1249)  data: 0.0013 (0.0176)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:44,965 maskrcnn_benchmark.trainer INFO: eta: 1:05:09  iter: 8700  loss: 0.7371 (0.7665)  loss_classifier: 0.2548 (0.2832)  loss_box_reg: 0.1155 (0.1231)  loss_mask: 0.2652 (0.3012)  loss_objectness: 0.0284 (0.0383)  loss_rpn_box_reg: 0.0104 (0.0208)  time: 0.1056 (0.1249)  data: 0.0014 (0.0176)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:47,141 maskrcnn_benchmark.trainer INFO: eta: 1:05:05  iter: 8720  loss: 0.6880 (0.7665)  loss_classifier: 0.2654 (0.2832)  loss_box_reg: 0.1228 (0.1231)  loss_mask: 0.2711 (0.3011)  loss_objectness: 0.0276 (0.0383)  loss_rpn_box_reg: 0.0126 (0.0208)  time: 0.1084 (0.1249)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:49,283 maskrcnn_benchmark.trainer INFO: eta: 1:05:02  iter: 8740  loss: 0.7212 (0.7663)  loss_classifier: 0.2667 (0.2832)  loss_box_reg: 0.1152 (0.1230)  loss_mask: 0.2787 (0.3010)  loss_objectness: 0.0190 (0.0383)  loss_rpn_box_reg: 0.0109 (0.0208)  time: 0.1064 (0.1248)  data: 0.0014 (0.0175)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:51,427 maskrcnn_benchmark.trainer INFO: eta: 1:04:58  iter: 8760  loss: 0.6015 (0.7659)  loss_classifier: 0.2450 (0.2830)  loss_box_reg: 0.0925 (0.1230)  loss_mask: 0.2405 (0.3009)  loss_objectness: 0.0121 (0.0382)  loss_rpn_box_reg: 0.0059 (0.0208)  time: 0.1068 (0.1248)  data: 0.0013 (0.0175)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:53,590 maskrcnn_benchmark.trainer INFO: eta: 1:04:54  iter: 8780  loss: 0.7179 (0.7658)  loss_classifier: 0.2333 (0.2829)  loss_box_reg: 0.1028 (0.1230)  loss_mask: 0.2750 (0.3008)  loss_objectness: 0.0179 (0.0382)  loss_rpn_box_reg: 0.0136 (0.0208)  time: 0.1075 (0.1247)  data: 0.0015 (0.0174)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:55,742 maskrcnn_benchmark.trainer INFO: eta: 1:04:50  iter: 8800  loss: 0.6068 (0.7655)  loss_classifier: 0.2044 (0.2828)  loss_box_reg: 0.0939 (0.1229)  loss_mask: 0.2697 (0.3008)  loss_objectness: 0.0199 (0.0382)  loss_rpn_box_reg: 0.0104 (0.0208)  time: 0.1077 (0.1247)  data: 0.0014 (0.0174)  lr: 0.160000  max mem: 5155
2020-06-23 17:36:57,924 maskrcnn_benchmark.trainer INFO: eta: 1:04:47  iter: 8820  loss: 0.6808 (0.7653)  loss_classifier: 0.2714 (0.2828)  loss_box_reg: 0.1164 (0.1229)  loss_mask: 0.2680 (0.3007)  loss_objectness: 0.0227 (0.0382)  loss_rpn_box_reg: 0.0101 (0.0208)  time: 0.1092 (0.1247)  data: 0.0015 (0.0174)  lr: 0.160000  max mem: 5155
2020-06-23 17:37:00,067 maskrcnn_benchmark.trainer INFO: eta: 1:04:43  iter: 8840  loss: 0.6290 (0.7650)  loss_classifier: 0.2036 (0.2826)  loss_box_reg: 0.0951 (0.1228)  loss_mask: 0.2817 (0.3006)  loss_objectness: 0.0169 (0.0381)  loss_rpn_box_reg: 0.0046 (0.0208)  time: 0.1067 (0.1246)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5155
2020-06-23 17:37:02,237 maskrcnn_benchmark.trainer INFO: eta: 1:04:39  iter: 8860  loss: 0.6347 (0.7648)  loss_classifier: 0.2082 (0.2825)  loss_box_reg: 0.0879 (0.1228)  loss_mask: 0.2785 (0.3006)  loss_objectness: 0.0191 (0.0381)  loss_rpn_box_reg: 0.0078 (0.0208)  time: 0.1085 (0.1246)  data: 0.0014 (0.0173)  lr: 0.160000  max mem: 5155
2020-06-23 17:37:04,390 maskrcnn_benchmark.trainer INFO: eta: 1:04:36  iter: 8880  loss: 0.5893 (0.7645)  loss_classifier: 0.2235 (0.2824)  loss_box_reg: 0.0921 (0.1228)  loss_mask: 0.2553 (0.3005)  loss_objectness: 0.0163 (0.0381)  loss_rpn_box_reg: 0.0069 (0.0208)  time: 0.1072 (0.1246)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5155
2020-06-23 17:37:06,547 maskrcnn_benchmark.trainer INFO: eta: 1:04:32  iter: 8900  loss: 0.5927 (0.7643)  loss_classifier: 0.2003 (0.2823)  loss_box_reg: 0.0813 (0.1227)  loss_mask: 0.2654 (0.3004)  loss_objectness: 0.0180 (0.0381)  loss_rpn_box_reg: 0.0083 (0.0208)  time: 0.1075 (0.1245)  data: 0.0014 (0.0172)  lr: 0.160000  max mem: 5155
2020-06-23 17:37:08,708 maskrcnn_benchmark.trainer INFO: eta: 1:04:28  iter: 8920  loss: 0.6558 (0.7640)  loss_classifier: 0.2307 (0.2822)  loss_box_reg: 0.1057 (0.1227)  loss_mask: 0.2753 (0.3003)  loss_objectness: 0.0162 (0.0380)  loss_rpn_box_reg: 0.0071 (0.0207)  time: 0.1080 (0.1245)  data: 0.0015 (0.0172)  lr: 0.160000  max mem: 5155
2020-06-23 17:37:10,868 maskrcnn_benchmark.trainer INFO: eta: 1:04:25  iter: 8940  loss: 0.6195 (0.7638)  loss_classifier: 0.2209 (0.2821)  loss_box_reg: 0.1066 (0.1227)  loss_mask: 0.2549 (0.3003)  loss_objectness: 0.0171 (0.0380)  loss_rpn_box_reg: 0.0099 (0.0207)  time: 0.1072 (0.1244)  data: 0.0014 (0.0171)  lr: 0.160000  max mem: 5155
2020-06-23 17:37:13,028 maskrcnn_benchmark.trainer INFO: eta: 1:04:21  iter: 8960  loss: 0.7455 (0.7637)  loss_classifier: 0.2574 (0.2820)  loss_box_reg: 0.1165 (0.1227)  loss_mask: 0.2712 (0.3002)  loss_objectness: 0.0279 (0.0380)  loss_rpn_box_reg: 0.0136 (0.0208)  time: 0.1081 (0.1244)  data: 0.0014 (0.0171)  lr: 0.160000  max mem: 5155
2020-06-23 17:37:15,175 maskrcnn_benchmark.trainer INFO: eta: 1:04:18  iter: 8980  loss: 0.6589 (0.7635)  loss_classifier: 0.2376 (0.2820)  loss_box_reg: 0.1069 (0.1227)  loss_mask: 0.2632 (0.3001)  loss_objectness: 0.0167 (0.0380)  loss_rpn_box_reg: 0.0081 (0.0207)  time: 0.1071 (0.1244)  data: 0.0015 (0.0171)  lr: 0.160000  max mem: 5155
2020-06-23 17:37:17,368 maskrcnn_benchmark.trainer INFO: eta: 1:04:14  iter: 9000  loss: 0.7125 (0.7633)  loss_classifier: 0.2562 (0.2819)  loss_box_reg: 0.1012 (0.1226)  loss_mask: 0.2558 (0.3001)  loss_objectness: 0.0225 (0.0379)  loss_rpn_box_reg: 0.0093 (0.0207)  time: 0.1091 (0.1243)  data: 0.0014 (0.0170)  lr: 0.016000  max mem: 5155
2020-06-23 17:37:19,537 maskrcnn_benchmark.trainer INFO: eta: 1:04:10  iter: 9020  loss: 0.6254 (0.7630)  loss_classifier: 0.2017 (0.2818)  loss_box_reg: 0.0917 (0.1226)  loss_mask: 0.2381 (0.2999)  loss_objectness: 0.0291 (0.0379)  loss_rpn_box_reg: 0.0064 (0.0207)  time: 0.1082 (0.1243)  data: 0.0015 (0.0170)  lr: 0.016000  max mem: 5155
2020-06-23 17:37:21,701 maskrcnn_benchmark.trainer INFO: eta: 1:04:07  iter: 9040  loss: 0.6097 (0.7627)  loss_classifier: 0.1994 (0.2817)  loss_box_reg: 0.1028 (0.1225)  loss_mask: 0.2658 (0.2998)  loss_objectness: 0.0207 (0.0379)  loss_rpn_box_reg: 0.0093 (0.0207)  time: 0.1077 (0.1243)  data: 0.0015 (0.0170)  lr: 0.016000  max mem: 5155
2020-06-23 17:37:23,867 maskrcnn_benchmark.trainer INFO: eta: 1:04:03  iter: 9060  loss: 0.6044 (0.7624)  loss_classifier: 0.2411 (0.2816)  loss_box_reg: 0.1017 (0.1225)  loss_mask: 0.2426 (0.2997)  loss_objectness: 0.0163 (0.0379)  loss_rpn_box_reg: 0.0088 (0.0207)  time: 0.1082 (0.1242)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5155
2020-06-23 17:37:26,032 maskrcnn_benchmark.trainer INFO: eta: 1:04:00  iter: 9080  loss: 0.4907 (0.7619)  loss_classifier: 0.1681 (0.2814)  loss_box_reg: 0.0715 (0.1224)  loss_mask: 0.2271 (0.2996)  loss_objectness: 0.0133 (0.0379)  loss_rpn_box_reg: 0.0069 (0.0207)  time: 0.1079 (0.1242)  data: 0.0013 (0.0169)  lr: 0.016000  max mem: 5155
2020-06-23 17:37:28,213 maskrcnn_benchmark.trainer INFO: eta: 1:03:56  iter: 9100  loss: 0.6037 (0.7616)  loss_classifier: 0.1994 (0.2812)  loss_box_reg: 0.0943 (0.1224)  loss_mask: 0.2454 (0.2995)  loss_objectness: 0.0149 (0.0378)  loss_rpn_box_reg: 0.0055 (0.0207)  time: 0.1081 (0.1242)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5155
2020-06-23 17:37:30,372 maskrcnn_benchmark.trainer INFO: eta: 1:03:53  iter: 9120  loss: 0.6525 (0.7613)  loss_classifier: 0.1933 (0.2811)  loss_box_reg: 0.1117 (0.1224)  loss_mask: 0.2684 (0.2994)  loss_objectness: 0.0195 (0.0378)  loss_rpn_box_reg: 0.0130 (0.0207)  time: 0.1072 (0.1241)  data: 0.0015 (0.0168)  lr: 0.016000  max mem: 5155
2020-06-23 17:37:32,533 maskrcnn_benchmark.trainer INFO: eta: 1:03:49  iter: 9140  loss: 0.5670 (0.7610)  loss_classifier: 0.2037 (0.2809)  loss_box_reg: 0.0886 (0.1223)  loss_mask: 0.2458 (0.2993)  loss_objectness: 0.0164 (0.0377)  loss_rpn_box_reg: 0.0078 (0.0207)  time: 0.1068 (0.1241)  data: 0.0014 (0.0168)  lr: 0.016000  max mem: 5155
2020-06-23 17:37:34,702 maskrcnn_benchmark.trainer INFO: eta: 1:03:46  iter: 9160  loss: 0.5601 (0.7606)  loss_classifier: 0.1984 (0.2808)  loss_box_reg: 0.0938 (0.1223)  loss_mask: 0.2386 (0.2992)  loss_objectness: 0.0156 (0.0377)  loss_rpn_box_reg: 0.0076 (0.0207)  time: 0.1076 (0.1241)  data: 0.0015 (0.0168)  lr: 0.016000  max mem: 5155
:::MLLOG {"namespace": "", "time_ms": 1592959055772, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 10}}
:::MLLOG {"namespace": "", "time_ms": 1592959055772, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 10}}
:::MLLOG {"namespace": "", "time_ms": 1592959055772, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 10}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 17:37:35,997 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.26s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
Done (t=0.27s)
creating index...
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.26s)
Done (t=0.26s)
creating index...
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
Done (t=0.27s)
creating index...
creating index...
index created!
index created!
index created!
Done (t=0.26s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 17:37:36,304 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  3%|         | 2/79 [00:01<00:53,  1.43it/s]
  6%|         | 5/79 [00:01<00:37,  1.99it/s]
 10%|         | 8/79 [00:01<00:25,  2.76it/s]
 14%|        | 11/79 [00:01<00:18,  3.77it/s]
 18%|        | 14/79 [00:01<00:12,  5.08it/s]
 22%|       | 17/79 [00:01<00:09,  6.70it/s]
 25%|       | 20/79 [00:01<00:06,  8.63it/s]
 29%|       | 23/79 [00:01<00:05, 10.81it/s]
 33%|      | 26/79 [00:02<00:04, 13.08it/s]
 37%|      | 29/79 [00:02<00:03, 15.34it/s]
 41%|      | 32/79 [00:02<00:02, 17.44it/s]
 44%|     | 35/79 [00:02<00:02, 19.30it/s]
 48%|     | 38/79 [00:02<00:01, 21.00it/s]
 52%|    | 41/79 [00:02<00:01, 21.86it/s]
 56%|    | 44/79 [00:02<00:01, 23.04it/s]
 59%|    | 47/79 [00:02<00:01, 23.68it/s]
 63%|   | 50/79 [00:03<00:01, 24.34it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  4%|         | 3/79 [00:01<00:53,  1.41it/s]
  8%|         | 6/79 [00:01<00:37,  1.96it/s]
 11%|        | 9/79 [00:01<00:25,  2.71it/s]
 15%|        | 12/79 [00:01<00:18,  3.70it/s]
 19%|        | 15/79 [00:01<00:12,  4.98it/s]
 23%|       | 18/79 [00:01<00:09,  6.58it/s]
 27%|       | 21/79 [00:01<00:06,  8.46it/s]
 30%|       | 24/79 [00:01<00:05, 10.62it/s]
 34%|      | 27/79 [00:02<00:04, 12.87it/s]
 38%|      | 30/79 [00:02<00:03, 15.23it/s]
 42%|     | 33/79 [00:02<00:02, 17.38it/s]
 46%|     | 36/79 [00:02<00:02, 19.36it/s]
 49%|     | 39/79 [00:02<00:01, 21.21it/s]
 53%|    | 42/79 [00:02<00:01, 22.20it/s]
 57%|    | 45/79 [00:02<00:01, 23.19it/s]
 61%|    | 48/79 [00:02<00:01, 23.99it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  3%|         | 2/79 [00:01<00:57,  1.34it/s]
  6%|         | 5/79 [00:01<00:39,  1.87it/s]
 10%|         | 8/79 [00:01<00:27,  2.59it/s]
 14%|        | 11/79 [00:01<00:19,  3.54it/s]
 18%|        | 14/79 [00:01<00:13,  4.78it/s]
 22%|       | 17/79 [00:01<00:09,  6.31it/s]
 25%|       | 20/79 [00:01<00:07,  8.12it/s]
 29%|       | 23/79 [00:02<00:05, 10.14it/s]
 33%|      | 26/79 [00:02<00:04, 12.31it/s]
 37%|      | 29/79 [00:02<00:03, 14.40it/s]
 41%|      | 32/79 [00:02<00:02, 16.48it/s]
 44%|     | 35/79 [00:02<00:02, 18.40it/s]
 48%|     | 38/79 [00:02<00:02, 19.69it/s]
 52%|    | 41/79 [00:02<00:01, 20.90it/s]
 56%|    | 44/79 [00:02<00:01, 21.70it/s]
 59%|    | 47/79 [00:03<00:01, 22.45it/s]
 63%|   | 50/79 [00:03<00:01, 23.05it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:40,  1.29s/it]
  4%|         | 3/79 [00:01<01:11,  1.07it/s]
  8%|         | 6/79 [00:01<00:48,  1.50it/s]
 11%|        | 9/79 [00:01<00:33,  2.09it/s]
 15%|        | 12/79 [00:01<00:23,  2.89it/s]
 19%|        | 15/79 [00:01<00:16,  3.94it/s]
 23%|       | 18/79 [00:02<00:11,  5.27it/s]
 27%|       | 21/79 [00:02<00:08,  6.93it/s]
 30%|       | 24/79 [00:02<00:06,  8.87it/s]
 34%|      | 27/79 [00:02<00:04, 11.03it/s]
 38%|      | 30/79 [00:02<00:03, 13.29it/s]
 42%|     | 33/79 [00:02<00:02, 15.56it/s]
 46%|     | 36/79 [00:02<00:02, 17.67it/s]
 49%|     | 39/79 [00:02<00:02, 19.39it/s]
 53%|    | 42/79 [00:03<00:01, 20.96it/s]
 57%|    | 45/79 [00:03<00:01, 22.08it/s]
 61%|    | 48/79 [00:03<00:01, 22.93it/s]
 65%|   | 51/79 [00:03<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:48,  1.39s/it]
  3%|         | 2/79 [00:01<01:18,  1.02s/it]
  6%|         | 5/79 [00:01<00:53,  1.38it/s]
 10%|         | 8/79 [00:01<00:36,  1.93it/s]
 14%|        | 11/79 [00:01<00:25,  2.67it/s]
 18%|        | 14/79 [00:02<00:17,  3.65it/s]
 22%|       | 17/79 [00:02<00:12,  4.90it/s]
 25%|       | 20/79 [00:02<00:09,  6.47it/s]
 29%|       | 23/79 [00:02<00:06,  8.31it/s]
 33%|      | 26/79 [00:02<00:05, 10.38it/s]
 37%|      | 29/79 [00:02<00:03, 12.59it/s]
 41%|      | 32/79 [00:02<00:03, 14.70it/s]
 44%|     | 35/79 [00:02<00:02, 16.66it/s]
 48%|     | 38/79 [00:02<00:02, 18.64it/s]
 52%|    | 41/79 [00:03<00:01, 20.10it/s]
 56%|    | 44/79 [00:03<00:01, 21.20it/s]
 59%|    | 47/79 [00:03<00:01, 21.99it/s]
 63%|   | 50/79 [00:03<00:01, 22.96it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:59,  1.54s/it]
  5%|         | 4/79 [00:01<01:21,  1.09s/it]
  9%|         | 7/79 [00:01<00:55,  1.29it/s]
 13%|        | 10/79 [00:01<00:38,  1.81it/s]
 16%|        | 13/79 [00:02<00:26,  2.51it/s]
 20%|        | 16/79 [00:02<00:18,  3.44it/s]
 24%|       | 19/79 [00:02<00:12,  4.65it/s]
 28%|       | 22/79 [00:02<00:09,  6.19it/s]
 32%|      | 25/79 [00:02<00:06,  8.03it/s]
 35%|      | 28/79 [00:02<00:05, 10.14it/s]
 39%|      | 31/79 [00:02<00:03, 12.45it/s]
 43%|     | 34/79 [00:02<00:03, 14.81it/s]
 47%|     | 37/79 [00:02<00:02, 16.97it/s]
 51%|     | 40/79 [00:03<00:02, 18.91it/s]
 54%|    | 43/79 [00:03<00:01, 20.83it/s]
 58%|    | 46/79 [00:03<00:01, 22.17it/s]
 62%|   | 49/79 [00:03<00:01, 23.02it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:48,  1.40s/it]
  3%|         | 2/79 [00:01<01:20,  1.05s/it]
  6%|         | 5/79 [00:01<00:55,  1.34it/s]
 10%|         | 8/79 [00:01<00:37,  1.87it/s]
 14%|        | 11/79 [00:01<00:26,  2.60it/s]
 18%|        | 14/79 [00:02<00:18,  3.56it/s]
 22%|       | 17/79 [00:02<00:12,  4.81it/s]
 25%|       | 20/79 [00:02<00:09,  6.37it/s]
 29%|       | 23/79 [00:02<00:06,  8.23it/s]
 33%|      | 26/79 [00:02<00:05, 10.28it/s]
 37%|      | 29/79 [00:02<00:03, 12.60it/s]
 41%|      | 32/79 [00:02<00:03, 14.73it/s]
 44%|     | 35/79 [00:02<00:02, 16.96it/s]
 48%|     | 38/79 [00:03<00:02, 18.78it/s]
 52%|    | 41/79 [00:03<00:01, 20.46it/s]
 56%|    | 44/79 [00:03<00:01, 21.79it/s]
 59%|    | 47/79 [00:03<00:01, 22.91it/s]
 63%|   | 50/79 [00:03<00:01, 23.49it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:04,  1.59s/it]
  3%|         | 2/79 [00:01<01:28,  1.15s/it]
  6%|         | 5/79 [00:01<01:00,  1.22it/s]
 10%|         | 8/79 [00:01<00:41,  1.71it/s]
 14%|        | 11/79 [00:02<00:28,  2.38it/s]
 18%|        | 14/79 [00:02<00:19,  3.27it/s]
 22%|       | 17/79 [00:02<00:13,  4.43it/s]
 25%|       | 20/79 [00:02<00:09,  5.91it/s]
 29%|       | 23/79 [00:02<00:07,  7.69it/s]
 33%|      | 26/79 [00:02<00:05,  9.77it/s]
 37%|      | 29/79 [00:02<00:04, 12.05it/s]
 41%|      | 32/79 [00:02<00:03, 14.34it/s]
 44%|     | 35/79 [00:02<00:02, 16.58it/s]
 48%|     | 38/79 [00:03<00:02, 18.62it/s]
 52%|    | 41/79 [00:03<00:01, 20.42it/s]
 56%|    | 44/79 [00:03<00:01, 21.82it/s]
 59%|    | 47/79 [00:03<00:01, 22.87it/s]
 63%|   | 50/79 [00:03<00:01, 23.69it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:55,  1.48s/it]
  5%|         | 4/79 [00:01<01:18,  1.05s/it]
  9%|         | 7/79 [00:01<00:53,  1.34it/s]
 13%|        | 10/79 [00:01<00:36,  1.87it/s]
 16%|        | 13/79 [00:01<00:25,  2.59it/s]
 20%|        | 16/79 [00:02<00:17,  3.54it/s]
 24%|       | 19/79 [00:02<00:12,  4.77it/s]
 28%|       | 22/79 [00:02<00:09,  6.32it/s]
 32%|      | 25/79 [00:02<00:06,  8.17it/s]
 35%|      | 28/79 [00:02<00:04, 10.27it/s]
 39%|      | 31/79 [00:02<00:03, 12.41it/s]
 43%|     | 34/79 [00:02<00:03, 14.49it/s]
 47%|     | 37/79 [00:02<00:02, 16.49it/s]
 51%|     | 40/79 [00:03<00:02, 18.28it/s]
 54%|    | 43/79 [00:03<00:01, 19.56it/s]
 58%|    | 46/79 [00:03<00:01, 20.90it/s]
 62%|   | 49/79 [00:03<00:01, 21.76it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:56,  1.50s/it]
  3%|         | 2/79 [00:01<01:24,  1.10s/it]
  6%|         | 5/79 [00:01<00:57,  1.28it/s]
 10%|         | 8/79 [00:01<00:39,  1.79it/s]
 14%|        | 11/79 [00:02<00:27,  2.48it/s]
 18%|        | 14/79 [00:02<00:19,  3.40it/s]
 22%|       | 17/79 [00:02<00:13,  4.58it/s]
 25%|       | 20/79 [00:02<00:09,  6.08it/s]
 29%|       | 23/79 [00:02<00:07,  7.87it/s]
 33%|      | 26/79 [00:02<00:05,  9.92it/s]
 37%|      | 29/79 [00:02<00:04, 12.22it/s]
 41%|      | 32/79 [00:02<00:03, 14.34it/s]
 44%|     | 35/79 [00:02<00:02, 16.41it/s]
 48%|     | 38/79 [00:03<00:02, 18.31it/s]
 52%|    | 41/79 [00:03<00:01, 20.03it/s]
 56%|    | 44/79 [00:03<00:01, 21.22it/s]
 59%|    | 47/79 [00:03<00:01, 22.09it/s]
 63%|   | 50/79 [00:03<00:01, 22.67it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:04,  1.60s/it]
  5%|         | 4/79 [00:01<01:25,  1.13s/it]
  9%|         | 7/79 [00:01<00:58,  1.24it/s]
 13%|        | 10/79 [00:01<00:39,  1.74it/s]
 16%|        | 13/79 [00:02<00:27,  2.41it/s]
 20%|        | 16/79 [00:02<00:19,  3.31it/s]
 24%|       | 19/79 [00:02<00:13,  4.48it/s]
 28%|       | 22/79 [00:02<00:09,  5.94it/s]
 32%|      | 25/79 [00:02<00:06,  7.74it/s]
 35%|      | 28/79 [00:02<00:05,  9.77it/s]
 39%|      | 31/79 [00:02<00:04, 11.95it/s]
 43%|     | 34/79 [00:02<00:03, 14.25it/s]
 47%|     | 37/79 [00:03<00:02, 16.51it/s]
 51%|     | 40/79 [00:03<00:02, 18.30it/s]
 54%|    | 43/79 [00:03<00:01, 19.89it/s]
 58%|    | 46/79 [00:03<00:01, 21.26it/s]
 62%|   | 49/79 [00:03<00:01, 22.41it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:35,  1.23s/it]
  3%|         | 2/79 [00:01<01:12,  1.07it/s]
  4%|         | 3/79 [00:01<00:55,  1.37it/s]
  8%|         | 6/79 [00:01<00:38,  1.91it/s]
 11%|        | 9/79 [00:01<00:26,  2.65it/s]
 15%|        | 12/79 [00:02<00:18,  3.62it/s]
 19%|        | 15/79 [00:02<00:13,  4.89it/s]
 23%|       | 18/79 [00:02<00:09,  6.44it/s]
 27%|       | 21/79 [00:02<00:06,  8.30it/s]
 30%|       | 24/79 [00:02<00:05, 10.39it/s]
 34%|      | 27/79 [00:02<00:04, 12.68it/s]
 38%|      | 30/79 [00:02<00:03, 14.90it/s]
 42%|     | 33/79 [00:02<00:02, 16.96it/s]
 46%|     | 36/79 [00:03<00:02, 18.86it/s]
 49%|     | 39/79 [00:03<00:01, 20.51it/s]
 53%|    | 42/79 [00:03<00:01, 21.75it/s]
 57%|    | 45/79 [00:03<00:01, 22.94it/s]
 61%|    | 48/79 [00:03<00:01, 23.48it/s]
 65%|
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:53,  1.45s/it]
  3%|         | 2/79 [00:01<01:23,  1.09s/it]
  6%|         | 5/79 [00:01<00:57,  1.29it/s]
 10%|         | 8/79 [00:01<00:39,  1.80it/s]
 14%|        | 11/79 [00:02<00:27,  2.50it/s]
 18%|        | 14/79 [00:02<00:19,  3.42it/s]
 22%|       | 17/79 [00:02<00:13,  4.62it/s]
 25%|       | 20/79 [00:02<00:09,  6.12it/s]
 29%|       | 23/79 [00:02<00:07,  7.91it/s]
 33%|      | 26/79 [00:02<00:05,  9.96it/s]
 37%|      | 29/79 [00:02<00:04, 12.11it/s]
 41%|      | 32/79 [00:02<00:03, 14.40it/s]
 44%|     | 35/79 [00:03<00:02, 16.53it/s]
 48%|     | 38/79 [00:03<00:02, 18.21it/s]
 52%|    | 41/79 [00:03<00:01, 19.68it/s]
 56%|    | 44/79 [00:03<00:01, 20.97it/s]
 59%|    | 47/79 [00:03<00:01, 21.89it/s]
 63%|   | 50/79 [00:03<00:01, 22.79it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:10,  1.67s/it]
  5%|         | 4/79 [00:01<01:29,  1.19s/it]
  9%|         | 7/79 [00:01<01:00,  1.19it/s]
 13%|        | 10/79 [00:02<00:41,  1.66it/s]
 16%|        | 13/79 [00:02<00:28,  2.31it/s]
 20%|        | 16/79 [00:02<00:19,  3.18it/s]
 24%|       | 19/79 [00:02<00:13,  4.32it/s]
 28%|       | 22/79 [00:02<00:09,  5.76it/s]
 32%|      | 25/79 [00:02<00:07,  7.50it/s]
 35%|      | 28/79 [00:02<00:05,  9.55it/s]
 39%|      | 31/79 [00:02<00:04, 11.79it/s]
 43%|     | 34/79 [00:02<00:03, 14.15it/s]
 47%|     | 37/79 [00:03<00:02, 16.28it/s]
 51%|     | 40/79 [00:03<00:02, 18.44it/s]
 54%|    | 43/79 [00:03<00:01, 20.23it/s]
 58%|    | 46/79 [00:03<00:01, 21.74it/s]
 62%|   | 49/79 [00:03<00:01, 23.02it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:03,  1.58s/it]
  5%|         | 4/79 [00:01<01:25,  1.14s/it]
  9%|         | 7/79 [00:01<00:58,  1.24it/s]
 13%|        | 10/79 [00:02<00:39,  1.73it/s]
 16%|        | 13/79 [00:02<00:27,  2.41it/s]
 20%|        | 16/79 [00:02<00:19,  3.31it/s]
 24%|       | 19/79 [00:02<00:13,  4.49it/s]
 28%|       | 22/79 [00:02<00:09,  5.99it/s]
 32%|      | 25/79 [00:02<00:06,  7.81it/s]
 35%|      | 28/79 [00:02<00:05,  9.89it/s]
 39%|      | 31/79 [00:02<00:03, 12.24it/s]
 43%|     | 34/79 [00:03<00:03, 14.58it/s]
 47%|     | 37/79 [00:03<00:02, 16.89it/s]
 51%|     | 40/79 [00:03<00:02, 18.87it/s]
 54%|    | 43/79 [00:03<00:01, 20.59it/s]
 58%|    | 46/79 [00:03<00:01, 22.01it/s]
 62%|   | 49/79 [00:03<00:01, 23.14it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:49,  1.40s/it]
  3%|         | 2/79 [00:01<01:18,  1.01s/it]
  5%|         | 4/79 [00:01<00:56,  1.32it/s]
  9%|         | 7/79 [00:01<00:39,  1.84it/s]
 13%|        | 10/79 [00:02<00:27,  2.55it/s]
 16%|        | 13/79 [00:02<00:18,  3.49it/s]
 20%|        | 16/79 [00:02<00:13,  4.71it/s]
 24%|       | 19/79 [00:02<00:09,  6.22it/s]
 28%|       | 22/79 [00:02<00:07,  8.02it/s]
 32%|      | 25/79 [00:02<00:05, 10.07it/s]
 35%|      | 28/79 [00:02<00:04, 12.33it/s]
 39%|      | 31/79 [00:02<00:03, 14.62it/s]
 43%|     | 34/79 [00:03<00:02, 16.73it/s]
 47%|     | 37/79 [00:03<00:02, 18.65it/s]
 51%|     | 40/79 [00:03<00:01, 20.15it/s]
 54%|    | 43/79 [00:03<00:01, 21.53it/s]
 58%|    | 46/79 [00:03<00:01, 22.46it/s]
 62%|   | 49/79 [00:03<00:01, 23.50it/s]

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:22,  1.82s/it]
  5%|         | 4/79 [00:01<01:36,  1.29s/it]
  9%|         | 7/79 [00:02<01:05,  1.10it/s]
 13%|        | 10/79 [00:02<00:44,  1.54it/s]
 16%|        | 13/79 [00:02<00:30,  2.14it/s]
 20%|        | 16/79 [00:02<00:21,  2.96it/s]
 24%|       | 19/79 [00:02<00:14,  4.03it/s]
 28%|       | 22/79 [00:02<00:10,  5.40it/s]
 32%|      | 25/79 [00:02<00:07,  7.05it/s]
 35%|      | 28/79 [00:02<00:05,  9.01it/s]
 39%|      | 31/79 [00:02<00:04, 11.20it/s]
 43%|     | 34/79 [00:03<00:03, 13.50it/s]
 47%|     | 37/79 [00:03<00:02, 15.87it/s]
 51%|     | 40/79 [00:03<00:02, 17.97it/s]
 54%|    | 43/79 [00:03<00:01, 19.89it/s]
 58%|    | 46/79 [00:03<00:01, 21.49it/s]
 62%|   | 49/79 [00:03<00:01, 22.82it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:57,  1.51s/it]
  3%|         | 2/79 [00:01<01:31,  1.19s/it]
  6%|         | 5/79 [00:02<01:02,  1.18it/s]
 10%|         | 8/79 [00:02<00:42,  1.66it/s]
 14%|        | 11/79 [00:02<00:29,  2.31it/s]
 18%|        | 14/79 [00:02<00:20,  3.17it/s]
 22%|       | 17/79 [00:02<00:14,  4.30it/s]
 25%|       | 20/79 [00:02<00:10,  5.75it/s]
 29%|       | 23/79 [00:02<00:07,  7.52it/s]
 33%|      | 26/79 [00:02<00:05,  9.57it/s]
 37%|      | 29/79 [00:02<00:04, 11.81it/s]
 41%|      | 32/79 [00:03<00:03, 14.20it/s]
 44%|     | 35/79 [00:03<00:02, 16.46it/s]
 48%|     | 38/79 [00:03<00:02, 18.51it/s]
 52%|    | 41/79 [00:03<00:01, 20.24it/s]
 56%|    | 44/79 [00:03<00:01, 21.63it/s]
 59%|    | 47/79 [00:03<00:01, 22.92it/s]
 63%|   | 50/79 [00:03<00:01, 23.94it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:48,  1.40s/it]
  3%|         | 2/79 [00:01<01:26,  1.12s/it]
  6%|         | 5/79 [00:02<00:59,  1.25it/s]
 10%|         | 8/79 [00:02<00:40,  1.75it/s]
 14%|        | 11/79 [00:02<00:28,  2.42it/s]
 18%|        | 14/79 [00:02<00:19,  3.33it/s]
 22%|       | 17/79 [00:02<00:13,  4.48it/s]
 25%|       | 20/79 [00:02<00:09,  5.94it/s]
 29%|       | 23/79 [00:02<00:07,  7.72it/s]
 33%|      | 26/79 [00:02<00:05,  9.76it/s]
 37%|      | 29/79 [00:02<00:04, 11.90it/s]
 41%|      | 32/79 [00:03<00:03, 14.05it/s]
 44%|     | 35/79 [00:03<00:02, 16.25it/s]
 48%|     | 38/79 [00:03<00:02, 18.25it/s]
 52%|    | 41/79 [00:03<00:01, 19.80it/s]
 56%|    | 44/79 [00:03<00:01, 21.21it/s]
 59%|    | 47/79 [00:03<00:01, 22.17it/s]
 63%|   | 50/79 [00:03<00:01, 23.05it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:39,  1.27s/it]
  3%|         | 2/79 [00:01<01:13,  1.04it/s]
  4%|         | 3/79 [00:01<01:02,  1.22it/s]
  8%|         | 6/79 [00:02<00:42,  1.71it/s]
 11%|        | 9/79 [00:02<00:29,  2.38it/s]
 15%|        | 12/79 [00:02<00:20,  3.27it/s]
 19%|        | 15/79 [00:02<00:14,  4.43it/s]
 23%|       | 18/79 [00:02<00:10,  5.90it/s]
 27%|       | 21/79 [00:02<00:07,  7.69it/s]
 30%|       | 24/79 [00:02<00:05,  9.76it/s]
 34%|      | 27/79 [00:02<00:04, 12.03it/s]
 38%|      | 30/79 [00:03<00:03, 14.38it/s]
 42%|     | 33/79 [00:03<00:02, 16.64it/s]
 46%|     | 36/79 [00:03<00:02, 18.67it/s]
 49%|     | 39/79 [00:03<00:01, 20.45it/s]
 53%|    | 42/79 [00:03<00:01, 21.93it/s]
 57%|    | 45/79 [00:03<00:01, 23.13it/s]
 61%|    | 48/79 [00:03<00:01, 24.14it/s]
 65%|
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:07,  1.63s/it]
  3%|         | 2/79 [00:01<01:34,  1.23s/it]
  6%|         | 5/79 [00:02<01:04,  1.15it/s]
 10%|         | 8/79 [00:02<00:44,  1.61it/s]
 14%|        | 11/79 [00:02<00:30,  2.24it/s]
 18%|        | 14/79 [00:02<00:21,  3.08it/s]
 22%|       | 17/79 [00:02<00:14,  4.19it/s]
 25%|       | 20/79 [00:02<00:10,  5.60it/s]
 29%|       | 23/79 [00:02<00:07,  7.28it/s]
 33%|      | 26/79 [00:02<00:05,  9.21it/s]
 37%|      | 29/79 [00:02<00:04, 11.35it/s]
 41%|      | 32/79 [00:03<00:03, 13.58it/s]
 44%|     | 35/79 [00:03<00:02, 15.79it/s]
 48%|     | 38/79 [00:03<00:02, 17.62it/s]
 52%|    | 41/79 [00:03<00:01, 19.37it/s]
 56%|    | 44/79 [00:03<00:01, 20.82it/s]
 59%|    | 47/79 [00:03<00:01, 22.16it/s]
 63%|   | 50/79 [00:03<00:01, 22.44it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:27,  1.89s/it]
  4%|         | 3/79 [00:01<01:41,  1.34s/it]
  8%|         | 6/79 [00:02<01:09,  1.05it/s]
 11%|        | 9/79 [00:02<00:47,  1.48it/s]
 15%|        | 12/79 [00:02<00:32,  2.06it/s]
 19%|        | 15/79 [00:02<00:22,  2.84it/s]
 23%|       | 18/79 [00:02<00:15,  3.87it/s]
 27%|       | 21/79 [00:02<00:11,  5.20it/s]
 30%|       | 24/79 [00:02<00:08,  6.83it/s]
 34%|      | 27/79 [00:02<00:05,  8.79it/s]
 38%|      | 30/79 [00:03<00:04, 10.98it/s]
 42%|     | 33/79 [00:03<00:03, 13.27it/s]
 46%|     | 36/79 [00:03<00:02, 15.61it/s]
 49%|     | 39/79 [00:03<00:02, 17.75it/s]
 53%|    | 42/79 [00:03<00:01, 19.55it/s]
 57%|    | 45/79 [00:03<00:01, 20.75it/s]
 61%|    | 48/79 [00:03<00:01, 22.09it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:14,  1.73s/it]
  5%|         | 4/79 [00:01<01:31,  1.22s/it]
  9%|         | 7/79 [00:01<01:02,  1.15it/s]
 13%|        | 10/79 [00:02<00:42,  1.61it/s]
 16%|        | 13/79 [00:02<00:29,  2.24it/s]
 20%|        | 16/79 [00:02<00:20,  3.08it/s]
 24%|       | 19/79 [00:02<00:14,  4.18it/s]
 28%|       | 22/79 [00:02<00:10,  5.55it/s]
 32%|      | 25/79 [00:02<00:07,  7.18it/s]
 35%|      | 28/79 [00:02<00:05,  8.89it/s]
 39%|      | 31/79 [00:03<00:04, 11.03it/s]
 43%|     | 34/79 [00:03<00:03, 13.21it/s]
 47%|     | 37/79 [00:03<00:02, 15.30it/s]
 51%|     | 40/79 [00:03<00:02, 17.14it/s]
 54%|    | 43/79 [00:03<00:01, 18.76it/s]
 58%|    | 46/79 [00:03<00:01, 20.18it/s]
 62%|   | 49/79 [00:03<00:01, 21.06it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:24,  1.85s/it]
  5%|         | 4/79 [00:01<01:38,  1.31s/it]
  9%|         | 7/79 [00:02<01:06,  1.08it/s]
 13%|        | 10/79 [00:02<00:45,  1.51it/s]
 16%|        | 13/79 [00:02<00:31,  2.11it/s]
 20%|        | 16/79 [00:02<00:21,  2.90it/s]
 24%|       | 19/79 [00:02<00:15,  3.94it/s]
 28%|       | 22/79 [00:02<00:10,  5.27it/s]
 32%|      | 25/79 [00:02<00:07,  6.89it/s]
 35%|      | 28/79 [00:02<00:05,  8.79it/s]
 39%|      | 31/79 [00:03<00:04, 10.91it/s]
 43%|     | 34/79 [00:03<00:03, 13.14it/s]
 47%|     | 37/79 [00:03<00:02, 15.31it/s]
 51%|     | 40/79 [00:03<00:02, 17.19it/s]
 54%|    | 43/79 [00:03<00:01, 18.90it/s]
 58%|    | 46/79 [00:03<00:01, 20.40it/s]
 62%|   | 49/79 [00:03<00:01, 21.48it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:22,  1.83s/it]
  4%|         | 3/79 [00:01<01:38,  1.30s/it]
  8%|         | 6/79 [00:02<01:07,  1.09it/s]
 11%|        | 9/79 [00:02<00:45,  1.52it/s]
 15%|        | 12/79 [00:02<00:31,  2.12it/s]
 19%|        | 15/79 [00:02<00:21,  2.92it/s]
 23%|       | 18/79 [00:02<00:15,  3.97it/s]
 27%|       | 21/79 [00:02<00:10,  5.30it/s]
 30%|       | 24/79 [00:02<00:07,  6.91it/s]
 34%|      | 27/79 [00:02<00:05,  8.82it/s]
 38%|      | 30/79 [00:03<00:04, 10.83it/s]
 42%|     | 33/79 [00:03<00:03, 13.01it/s]
 46%|     | 36/79 [00:03<00:02, 14.87it/s]
 49%|     | 39/79 [00:03<00:02, 16.67it/s]
 53%|    | 42/79 [00:03<00:02, 18.22it/s]
 57%|    | 45/79 [00:03<00:01, 19.70it/s]
 61%|    | 48/79 [00:03<00:01, 20.74it/s]
 65%|   | 51/79 [00:03<00:01, 21.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:27,  1.90s/it]
  5%|         | 4/79 [00:02<01:40,  1.34s/it]
  9%|         | 7/79 [00:02<01:08,  1.05it/s]
 13%|        | 10/79 [00:02<00:46,  1.48it/s]
 16%|        | 13/79 [00:02<00:32,  2.06it/s]
 20%|        | 16/79 [00:02<00:22,  2.84it/s]
 24%|       | 19/79 [00:02<00:15,  3.88it/s]
 28%|       | 22/79 [00:02<00:10,  5.19it/s]
 32%|      | 25/79 [00:02<00:07,  6.81it/s]
 35%|      | 28/79 [00:02<00:05,  8.70it/s]
 39%|      | 31/79 [00:03<00:04, 10.85it/s]
 43%|     | 34/79 [00:03<00:03, 13.09it/s]
 47%|     | 37/79 [00:03<00:02, 15.27it/s]
 51%|     | 40/79 [00:03<00:02, 17.18it/s]
 54%|    | 43/79 [00:03<00:01, 19.02it/s]
 58%|    | 46/79 [00:03<00:01, 20.28it/s]
 62%|   | 49/79 [00:03<00:01, 21.46it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<02:38,  2.03s/it]
  5%|         | 4/79 [00:02<01:47,  1.43s/it]
  9%|         | 7/79 [00:02<01:12,  1.01s/it]
 13%|        | 10/79 [00:02<00:49,  1.39it/s]
 16%|        | 13/79 [00:02<00:34,  1.94it/s]
 20%|        | 16/79 [00:02<00:23,  2.68it/s]
 24%|       | 19/79 [00:02<00:16,  3.67it/s]
 28%|       | 22/79 [00:02<00:11,  4.94it/s]
 32%|      | 25/79 [00:02<00:08,  6.53it/s]
 35%|      | 28/79 [00:03<00:06,  8.42it/s]
 39%|      | 31/79 [00:03<00:04, 10.57it/s]
 43%|     | 34/79 [00:03<00:03, 12.86it/s]
 47%|     | 37/79 [00:03<00:02, 15.18it/s]
 51%|     | 40/79 [00:03<00:02, 17.25it/s]
 54%|    | 43/79 [00:03<00:01, 19.25it/s]
 58%|    | 46/79 [00:03<00:01, 20.80it/s]
 62%|   | 49/79 [00:03<00:01, 22.19it/s]
 66%|   | 52/79 [00:03<00:0146it/s]
 68%|   | 54/79 [00:03<00:01, 24.84it/s]
 72%|  | 57/79 [00:03<00:00, 25.23it/s]
 76%|  | 60/79 [00:03<00:00, 25.56it/s]
 80%|  | 63/79 [00:03<00:00, 25.69it/s]
 84%| | 66/79 [00:03<00:00, 25.70it/s]
 87%| | 69/79 [00:03<00:00, 25.84it/s]
 91%| | 72/79 [00:03<00:00, 25.98it/s]
 95%|| 75/79 [00:03<00:00, 26.63it/s]
 99%|| 78/79 [00:04<00:00, 27.56it/s]
100%|| 79/79 [00:04<00:00, 19.13it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 24.58it/s]
 71%|   | 56/79 [00:03<00:00, 25.07it/s]
 75%|  | 59/79 [00:03<00:00, 25.32it/s]
 78%|  | 62/79 [00:03<00:00, 25.42it/s]
 82%| | 65/79 [00:03<00:00, 25.49it/s]
 86%| | 68/79 [00:03<00:00, 25.45it/s]
 90%| | 71/79 [00:03<00:00, 25.76it/s]
 94%|| 74/79 [00:03<00:00, 26.36it/s]
 99%|| 78/79 [00:04<00:00, 27.29it/s]
100%|| 79/79 [00:04<00:00, 18.88it/s]

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:59,  1.53s/it]
  3%|         | 2/79 [00:02<01:37,  1.27s/it]
  6%|         | 5/79 [00:02<01:06,  1.11it/s]
 10%|         | 8/79 [00:02<00:45,  1.55it/s]
 14%|        | 11/79 [00:02<00:31,  2.16it/s]
 18%|        | 14/79 [00:02<00:21,  2.98it/s]
 22%|       | 17/79 [00:02<00:15,  4.06it/s]
 25%|       | 20/79 [00:02<00:10,  5.42it/s]
 29%|       | 23/79 [00:03<00:07,  7.12it/s]
 33%|      | 26/79 [00:03<00:05,  9.04it/s]
 37%|      | 29/79 [00:03<00:04, 11.23it/s]
 41%|      | 32/79 [00:03<00:03, 13.42it/s]
 44%|     | 35/79 [00:03<00:02, 15.67it/s]
 48%|     | 38/79 [00:03<00:02, 17.63it/s]
 52%|    | 41/79 [00:03<00:01, 19.26it/s]
 56%|    | 44/79 [00:03<00:01, 20.73it/s]
 59%|    | 47/79 [00:03<00:01, 21.71it/s]
 63%|   | 50/79 [00:04<00:01, 22.74it
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:03,  1.58s/it]
  3%|         | 2/79 [00:01<01:30,  1.17s/it]
  5%|         | 4/79 [00:02<01:06,  1.13it/s]
  9%|         | 7/79 [00:02<00:45,  1.58it/s]
 13%|        | 10/79 [00:02<00:31,  2.20it/s]
 16%|        | 13/79 [00:02<00:21,  3.03it/s]
 20%|        | 16/79 [00:02<00:15,  4.12it/s]
 24%|       | 19/79 [00:02<00:10,  5.51it/s]
 28%|       | 22/79 [00:02<00:07,  7.21it/s]
 32%|      | 25/79 [00:03<00:05,  9.19it/s]
 35%|      | 28/79 [00:03<00:04, 11.36it/s]
 39%|      | 31/79 [00:03<00:03, 13.62it/s]
 43%|     | 34/79 [00:03<00:02, 15.82it/s]
 47%|     | 37/79 [00:03<00:02, 17.91it/s]
 51%|     | 40/79 [00:03<00:01, 19.56it/s]
 54%|    | 43/79 [00:03<00:01, 20.93it/s]
 58%|    | 46/79 [00:03<00:01, 22.14it/s]
 62%|   | 49/79 [00:03<00:01, 23.06it/s]

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<02:20,  1.80s/it]
  4%|         | 3/79 [00:02<01:39,  1.31s/it]
  8%|         | 6/79 [00:02<01:07,  1.08it/s]
 11%|        | 9/79 [00:02<00:46,  1.51it/s]
 15%|        | 12/79 [00:02<00:31,  2.10it/s]
 19%|        | 15/79 [00:02<00:22,  2.89it/s]
 23%|       | 18/79 [00:02<00:15,  3.93it/s]
 27%|       | 21/79 [00:02<00:11,  5.24it/s]
 30%|       | 24/79 [00:02<00:08,  6.84it/s]
 34%|      | 27/79 [00:03<00:05,  8.71it/s]
 38%|      | 30/79 [00:03<00:04, 10.78it/s]
 42%|     | 33/79 [00:03<00:03, 12.80it/s]
 46%|     | 36/79 [00:03<00:02, 14.68it/s]
 49%|     | 39/79 [00:03<00:02, 16.59it/s]
 53%|    | 42/79 [00:03<00:02, 18.20it/s]
 57%|    | 45/79 [00:03<00:01, 19.36it/s]
 61%|    | 48/79 [00:04<00:01, 20.45it/s]
 65%|   | 51/79 [00:04<00:01, 21.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:01<01:37,  1.26s/it]
  3%|         | 2/79 [00:01<01:17,  1.01s/it]
  4%|         | 3/79 [00:02<01:07,  1.12it/s]
  8%|         | 6/79 [00:02<00:46,  1.57it/s]
 11%|        | 9/79 [00:02<00:32,  2.18it/s]
 15%|        | 12/79 [00:02<00:22,  3.01it/s]
 19%|        | 15/79 [00:02<00:15,  4.11it/s]
 23%|       | 18/79 [00:02<00:11,  5.49it/s]
 27%|       | 21/79 [00:03<00:08,  7.18it/s]
 30%|       | 24/79 [00:03<00:05,  9.19it/s]
 34%|      | 27/79 [00:03<00:04, 11.41it/s]
 38%|      | 30/79 [00:03<00:03, 13.68it/s]
 42%|     | 33/79 [00:03<00:02, 15.89it/s]
 46%|     | 36/79 [00:03<00:02, 18.06it/s]
 49%|     | 39/79 [00:03<00:02, 19.83it/s]
 53%|    | 42/79 [00:03<00:01, 21.41it/s]
 57%|    | 45/79 [00:03<00:01, 22.65it/s]
 61%|    | 48/79 [00:04<00:01, 23.54it/s]
 65%|
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:02<02:47,  2.15s/it]
  5%|         | 4/79 [00:02<01:53,  1.52s/it]
  9%|         | 7/79 [00:02<01:17,  1.07s/it]
 13%|        | 10/79 [00:02<00:52,  1.31it/s]
 16%|        | 13/79 [00:02<00:36,  1.83it/s]
 20%|        | 16/79 [00:02<00:24,  2.54it/s]
 24%|       | 19/79 [00:02<00:17,  3.48it/s]
 28%|       | 22/79 [00:02<00:12,  4.68it/s]
 32%|      | 25/79 [00:03<00:08,  6.20it/s]
 35%|      | 28/79 [00:03<00:06,  8.05it/s]
 39%|      | 31/79 [00:03<00:04, 10.17it/s]
 43%|     | 34/79 [00:03<00:03, 12.43it/s]
 47%|     | 37/79 [00:03<00:02, 14.69it/s]
 51%|     | 40/79 [00:03<00:02, 16.83it/s]
 54%|    | 43/79 [00:03<00:01, 18.81it/s]
 58%|    | 46/79 [00:03<00:01, 20.24it/s]
 62%|   | 49/79 [00:04<00:01, 21.55it/s]
 66%|   | 52/79 [00:04<00:01/s]
 67%|   | 53/79 [00:03<00:01, 23.25it/s]
 71%|   | 56/79 [00:03<00:00, 23.69it/s]
 75%|  | 59/79 [00:03<00:00, 23.84it/s]
 78%|  | 62/79 [00:03<00:00, 24.01it/s]
 82%| | 65/79 [00:03<00:00, 24.14it/s]
 86%| | 68/79 [00:03<00:00, 24.16it/s]
 90%| | 71/79 [00:04<00:00, 24.29it/s]
 94%|| 74/79 [00:04<00:00, 25.37it/s]
 97%|| 77/79 [00:04<00:00, 26.20it/s]
100%|| 79/79 [00:04<00:00, 18.20it/s]
74it/s]
 68%|   | 54/79 [00:03<00:01, 24.39it/s]
 72%|  | 57/79 [00:03<00:00, 24.99it/s]
 76%|  | 60/79 [00:03<00:00, 25.38it/s]
 80%|  | 63/79 [00:03<00:00, 25.36it/s]
 84%| | 66/79 [00:03<00:00, 25.33it/s]
 87%| | 69/79 [00:04<00:00, 25.45it/s]
 91%| | 72/79 [00:04<00:00, 25.51it/s]
 95%|| 75/79 [00:04<00:00, 26.35it/s]
 99%|| 78/79 [00:04<00:00, 26.75it/s]
100%|| 79/79 [00:04<00:00, 17.48it/s]
, 24.10it/s]
 70%|   | 55/79 [00:03<00:00, 24.70it/s]
 73%|  | 58/79 [00:03<00:00, 25.14it/s]
 77%|  | 61/79 [00:03<00:00, 25.51it/s]
 81%|  | 64/79 [00:03<00:00, 25.73it/s]
 85%| | 67/79 [00:04<00:00, 25.92it/s]
 89%| | 70/79 [00:04<00:00, 26.09it/s]
 92%|| 73/79 [00:04<00:00, 26.42it/s]
 96%|| 76/79 [00:04<00:00, 26.96it/s]
100%|| 79/79 [00:04<00:00, 27.78it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 24.32it/s]
 71%|   | 56/79 [00:03<00:00, 24.81it/s]
 75%|  | 59/79 [00:03<00:00, 25.17it/s]
 78%|  | 62/79 [00:03<00:00, 25.40it/s]
 82%| | 65/79 [00:04<00:00, 25.72it/s]
 86%| | 68/79 [00:04<00:00, 25.86it/s]
 90%| | 71/79 [00:04<00:00, 25.84it/s]
 94%|| 74/79 [00:04<00:00, 26.54it/s]
 97%|| 77/79 [00:04<00:00, 27.14it/s]
100%|| 79/79 [00:04<00:00, 17.00it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 23.55it/s]
 71%|   | 56/79 [00:03<00:00, 23.87it/s]
 75%|  | 59/79 [00:03<00:00, 24.23it/s]
 78%|  | 62/79 [00:03<00:00, 24.41it/s]
 82%| | 65/79 [00:04<00:00, 24.56it/s]
 86%| | 68/79 [00:04<00:00, 24.70it/s]
 90%| | 71/79 [00:04<00:00, 24.46it/s]
 94%|| 74/79 [00:04<00:00, 25.50it/s]
 97%|| 77/79 [00:04<00:00, 26.25it/s]
100%|| 79/79 [00:04<00:00, 16.88it/s]
, 23.27it/s]
 70%|   | 55/79 [00:03<00:01, 23.81it/s]
 73%|  | 58/79 [00:03<00:00, 24.47it/s]
 77%|  | 61/79 [00:03<00:00, 24.85it/s]
 81%|  | 64/79 [00:04<00:00, 24.85it/s]
 85%| | 67/79 [00:04<00:00, 25.05it/s]
 89%| | 70/79 [00:04<00:00, 24.48it/s]
 92%|| 73/79 [00:04<00:00, 25.03it/s]
 96%|| 76/79 [00:04<00:00, 25.68it/s]
100%|| 79/79 [00:04<00:00, 26.81it/s]
, 22.29it/s]
 70%|   | 55/79 [00:03<00:01, 22.81it/s]
 73%|  | 58/79 [00:03<00:00, 23.51it/s]
 77%|  | 61/79 [00:03<00:00, 23.80it/s]
 81%|  | 64/79 [00:04<00:00, 24.14it/s]
 85%| | 67/79 [00:04<00:00, 24.32it/s]
 89%| | 70/79 [00:04<00:00, 24.42it/s]
 92%|| 73/79 [00:04<00:00, 24.79it/s]
 96%|| 76/79 [00:04<00:00, 25.61it/s]
100%|| 79/79 [00:04<00:00, 26.53it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 24.52it/s]
 71%|   | 56/79 [00:03<00:00, 24.62it/s]
 75%|  | 59/79 [00:03<00:00, 25.10it/s]
 78%|  | 62/79 [00:04<00:00, 25.11it/s]
 82%| | 65/79 [00:04<00:00, 25.42it/s]
 86%| | 68/79 [00:04<00:00, 25.36it/s]
 90%| | 71/79 [00:04<00:00, 25.63it/s]
 94%|| 74/79 [00:04<00:00, 25.86it/s]
 97%|| 77/79 [00:04<00:00, 26.78it/s]
100%|| 79/79 [00:04<00:00, 16.69it/s]
   | 51/79 [00:03<00:01, 23.99it/s]
 68%|   | 54/79 [00:03<00:01, 24.57it/s]
 72%|  | 57/79 [00:03<00:00, 24.92it/s]
 76%|  | 60/79 [00:03<00:00, 25.23it/s]
 80%|  | 63/79 [00:04<00:00, 25.29it/s]
 84%| | 66/79 [00:04<00:00, 25.44it/s]
 87%| | 69/79 [00:04<00:00, 25.56it/s]
 91%| | 72/79 [00:04<00:00, 25.39it/s]
 95%|| 75/79 [00:04<00:00, 25.91it/s]
 99%|| 78/79 [00:04<00:00, 26.70it/s]
100%|| 79/79 [00:04<00:00, 16.66it/s]
, 24.05it/s]
 70%|   | 55/79 [00:03<00:00, 24.77it/s]
 73%|  | 58/79 [00:03<00:00, 25.25it/s]
 77%|  | 61/79 [00:04<00:00, 25.82it/s]
 81%|  | 64/79 [00:04<00:00, 26.06it/s]
 85%| | 67/79 [00:04<00:00, 26.20it/s]
 89%| | 70/79 [00:04<00:00, 25.89it/s]
 92%|| 73/79 [00:04<00:00, 26.48it/s]
 96%|| 76/79 [00:04<00:00, 27.00it/s]
100%|| 79/79 [00:04<00:00, 27.78it/s]
, 23.83it/s]
 70%|   | 55/79 [00:03<00:00, 24.78it/s]
 73%|  | 58/79 [00:03<00:00, 25.41it/s]
 77%|  | 61/79 [00:04<00:00, 25.16it/s]
 81%|  | 64/79 [00:04<00:00, 25.30it/s]
 85%| | 67/79 [00:04<00:00, 25.61it/s]
 89%| | 70/79 [00:04<00:00, 25.73it/s]
 92%|| 73/79 [00:04<00:00, 25.94it/s]
 96%|| 76/79 [00:04<00:00, 26.42it/s]
100%|| 79/79 [00:04<00:00, 27.30it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 23.29it/s]
 71%|   | 56/79 [00:03<00:00, 23.62it/s]
 75%|  | 59/79 [00:03<00:00, 24.06it/s]
 78%|  | 62/79 [00:04<00:00, 24.29it/s]
 82%| | 65/79 [00:04<00:00, 24.69it/s]
 86%| | 68/79 [00:04<00:00, 24.66it/s]
 90%| | 71/79 [00:04<00:00, 24.51it/s]
 94%|| 74/79 [00:04<00:00, 25.42it/s]
 97%|| 77/79 [00:04<00:00, 26.24it/s]
100%|| 79/79 [00:04<00:00, 16.44it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 23.23it/s]
 71%|   | 56/79 [00:03<00:00, 23.80it/s]
 75%|  | 59/79 [00:04<00:00, 24.10it/s]
 78%|  | 62/79 [00:04<00:00, 24.41it/s]
 82%| | 65/79 [00:04<00:00, 24.47it/s]
 86%| | 68/79 [00:04<00:00, 24.66it/s]
 90%| | 71/79 [00:04<00:00, 24.75it/s]
 94%|| 74/79 [00:04<00:00, 25.65it/s]
 97%|| 77/79 [00:04<00:00, 26.36it/s]
100%|| 79/79 [00:04<00:00, 16.34it/s]
 66%|   | 52/79 [00:03<00:01, 23.87it/s]
 70%|   | 55/79 [00:03<00:00, 24.40it/s]
 73%|  | 58/79 [00:03<00:00, 24.62it/s]
 77%|  | 61/79 [00:04<00:00, 24.48it/s]
 81%|  | 64/79 [00:04<00:00, 24.81it/s]
 85%| | 67/79 [00:04<00:00, 24.97it/s]
 89%| | 70/79 [00:04<00:00, 25.26it/s]
 92%|| 73/79 [00:04<00:00, 25.40it/s]
 96%|| 76/79 [00:04<00:00, 25.97it/s]
100%|| 79/79 [00:04<00:00, 26.75it/s]
, 23.78it/s]
 70%|   | 55/79 [00:03<00:00, 24.75it/s]
 73%|  | 58/79 [00:04<00:00, 25.32it/s]
 77%|  | 61/79 [00:04<00:00, 25.47it/s]
 81%|  | 64/79 [00:04<00:00, 25.85it/s]
 85%| | 67/79 [00:04<00:00, 25.97it/s]
 89%| | 70/79 [00:04<00:00, 26.04it/s]
 92%|| 73/79 [00:04<00:00, 26.44it/s]
 96%|| 76/79 [00:04<00:00, 26.98it/s]
100%|| 79/79 [00:04<00:00, 27.81it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 24.43it/s]
 71%|   | 56/79 [00:04<00:00, 25.11it/s]
 75%|  | 59/79 [00:04<00:00, 25.49it/s]
 78%|  | 62/79 [00:04<00:00, 25.91it/s]
 82%| | 65/79 [00:04<00:00, 26.20it/s]
 86%| | 68/79 [00:04<00:00, 26.26it/s]
 90%| | 71/79 [00:04<00:00, 26.29it/s]
 94%|| 74/79 [00:04<00:00, 26.87it/s]
 97%|| 77/79 [00:04<00:00, 27.20it/s]
100%|| 79/79 [00:04<00:00, 16.03it/s]
   | 51/79 [00:03<00:01, 24.55it/s]
 68%|   | 54/79 [00:03<00:01, 25.00it/s]
 72%|  | 57/79 [00:04<00:00, 25.29it/s]
 76%|  | 60/79 [00:04<00:00, 25.34it/s]
 80%|  | 63/79 [00:04<00:00, 25.32it/s]
 84%| | 66/79 [00:04<00:00, 25.62it/s]
 87%| | 69/79 [00:04<00:00, 25.78it/s]
 91%| | 72/79 [00:04<00:00, 25.82it/s]
 95%|| 75/79 [00:04<00:00, 26.50it/s]
 99%|| 78/79 [00:04<00:00, 26.83it/s]
100%|| 79/79 [00:04<00:00, 16.04it/s]
94it/s]
 68%|   | 54/79 [00:03<00:01, 23.71it/s]
 72%|  | 57/79 [00:04<00:00, 24.13it/s]
 76%|  | 60/79 [00:04<00:00, 24.36it/s]
 80%|  | 63/79 [00:04<00:00, 24.83it/s]
 84%| | 66/79 [00:04<00:00, 24.81it/s]
 87%| | 69/79 [00:04<00:00, 24.92it/s]
 91%| | 72/79 [00:04<00:00, 25.50it/s]
 95%|| 75/79 [00:04<00:00, 26.28it/s]
 99%|| 78/79 [00:04<00:00, 26.89it/s]
100%|| 79/79 [00:05<00:00, 15.74it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 23.32it/s]
 71%|   | 56/79 [00:04<00:00, 23.84it/s]
 75%|  | 59/79 [00:04<00:00, 24.33it/s]
 78%|  | 62/79 [00:04<00:00, 24.76it/s]
 82%| | 65/79 [00:04<00:00, 24.63it/s]
 86%| | 68/79 [00:04<00:00, 25.08it/s]
 90%| | 71/79 [00:04<00:00, 25.19it/s]
 94%|| 74/79 [00:04<00:00, 26.02it/s]
 97%|| 77/79 [00:04<00:00, 26.63it/s]
100%|| 79/79 [00:05<00:00, 15.77it/s]
/s]
 67%|   | 53/79 [00:03<00:01, 23.19it/s]
 71%|   | 56/79 [00:04<00:00, 23.69it/s]
 75%|  | 59/79 [00:04<00:00, 24.24it/s]
 78%|  | 62/79 [00:04<00:00, 24.15it/s]
 82%| | 65/79 [00:04<00:00, 24.57it/s]
 86%| | 68/79 [00:04<00:00, 24.85it/s]
 90%| | 71/79 [00:04<00:00, 24.85it/s]
 94%|| 74/79 [00:04<00:00, 25.63it/s]
 97%|| 77/79 [00:04<00:00, 26.25it/s]
100%|| 79/79 [00:05<00:00, 15.76it/s]
, 21.93it/s]
 70%|   | 55/79 [00:03<00:01, 22.51it/s]
 73%|  | 58/79 [00:04<00:00, 22.87it/s]
 77%|  | 61/79 [00:04<00:00, 22.90it/s]
 81%|  | 64/79 [00:04<00:00, 23.14it/s]
 85%| | 67/79 [00:04<00:00, 23.56it/s]
 89%| | 70/79 [00:04<00:00, 23.74it/s]
 92%|| 73/79 [00:04<00:00, 24.29it/s]
 96%|| 76/79 [00:04<00:00, 25.18it/s]
100%|| 79/79 [00:04<00:00, 26.13it/s]
, 23.27it/s]
 70%|   | 55/79 [00:04<00:00, 24.28it/s]
 73%|  | 58/79 [00:04<00:00, 24.58it/s]
 77%|  | 61/79 [00:04<00:00, 25.03it/s]
 81%|  | 64/79 [00:04<00:00, 24.98it/s]
 85%| | 67/79 [00:04<00:00, 25.21it/s]
 89%| | 70/79 [00:04<00:00, 25.69it/s]
 92%|| 73/79 [00:04<00:00, 25.67it/s]
 96%|| 76/79 [00:04<00:00, 26.42it/s]
100%|| 79/79 [00:05<00:00, 27.20it/s]
, 22.40it/s]
 70%|   | 55/79 [00:04<00:01, 22.99it/s]
 73%|  | 58/79 [00:04<00:00, 23.55it/s]
 77%|  | 61/79 [00:04<00:00, 24.09it/s]
 81%|  | 64/79 [00:04<00:00, 24.13it/s]
 85%| | 67/79 [00:04<00:00, 24.39it/s]
 89%| | 70/79 [00:04<00:00, 24.58it/s]
 92%|| 73/79 [00:04<00:00, 24.66it/s]
 96%|| 76/79 [00:04<00:00, 25.73it/s]
100%|| 79/79 [00:04<00:00, 26.03it/s]
, 22.22it/s]
 70%|   | 55/79 [00:04<00:01, 23.07it/s]
 73%|  | 58/79 [00:04<00:00, 23.42it/s]
 77%|  | 61/79 [00:04<00:00, 23.92it/s]
 81%|  | 64/79 [00:04<00:00, 24.39it/s]
 85%| | 67/79 [00:04<00:00, 24.73it/s]
 89%| | 70/79 [00:04<00:00, 24.70it/s]
 92%|| 73/79 [00:04<00:00, 24.99it/s]
 96%|| 76/79 [00:04<00:00, 25.60it/s]
100%|| 79/79 [00:04<00:00, 26.35it/s]
57it/s]
 68%|   | 54/79 [00:04<00:01, 22.23it/s]
 72%|  | 57/79 [00:04<00:01, 21.26it/s]
 76%|  | 60/79 [00:04<00:00, 22.05it/s]
 80%|  | 63/79 [00:04<00:00, 22.61it/s]
 84%| | 66/79 [00:04<00:00, 23.19it/s]
 87%| | 69/79 [00:04<00:00, 23.66it/s]
 91%| | 72/79 [00:04<00:00, 23.64it/s]
 95%|| 75/79 [00:04<00:00, 24.61it/s]
 99%|| 78/79 [00:05<00:00, 25.35it/s]
100%|| 79/79 [00:05<00:00, 15.32it/s]
 66%|   | 52/79 [00:04<00:01, 23.64it/s]
 70%|   | 55/79 [00:04<00:00, 24.23it/s]
 73%|  | 58/79 [00:04<00:00, 24.64it/s]
 77%|  | 61/79 [00:04<00:00, 24.89it/s]
 81%|  | 64/79 [00:04<00:00, 25.05it/s]
 85%| | 67/79 [00:04<00:00, 25.21it/s]
 89%| | 70/79 [00:04<00:00, 25.50it/s]
 92%|| 73/79 [00:04<00:00, 25.78it/s]
 96%|| 76/79 [00:05<00:00, 26.64it/s]
100%|| 79/79 [00:05<00:00, 27.54it/s]
   | 51/79 [00:04<00:01, 24.23it/s]
 68%|   | 54/79 [00:04<00:01, 24.67it/s]
 72%|  | 57/79 [00:04<00:00, 24.96it/s]
 76%|  | 60/79 [00:04<00:00, 25.30it/s]
 80%|  | 63/79 [00:04<00:00, 25.57it/s]
 84%| | 66/79 [00:04<00:00, 25.34it/s]
 87%| | 69/79 [00:04<00:00, 25.02it/s]
 91%| | 72/79 [00:04<00:00, 25.52it/s]
 95%|| 75/79 [00:05<00:00, 26.15it/s]
 99%|| 78/79 [00:05<00:00, 26.77it/s]
100%|| 79/79 [00:05<00:00, 14.95it/s]
, 22.63it/s]
 70%|   | 55/79 [00:04<00:01, 23.29it/s]
 73%|  | 58/79 [00:04<00:00, 23.98it/s]
 77%|  | 61/79 [00:04<00:00, 24.09it/s]
 81%|  | 64/79 [00:04<00:00, 24.50it/s]
 85%| | 67/79 [00:04<00:00, 24.76it/s]
 89%| | 70/79 [00:04<00:00, 24.87it/s]
 92%|| 73/79 [00:04<00:00, 25.36it/s]
 96%|| 76/79 [00:05<00:00, 26.03it/s]
100%|| 79/79 [00:05<00:00, 26.85it/s]
/s]
 67%|   | 53/79 [00:04<00:01, 23.36it/s]
 71%|   | 56/79 [00:04<00:00, 24.09it/s]
 75%|  | 59/79 [00:04<00:00, 24.44it/s]
 78%|  | 62/79 [00:04<00:00, 24.82it/s]
 82%| | 65/79 [00:04<00:00, 25.07it/s]
 86%| | 68/79 [00:04<00:00, 25.19it/s]
 90%| | 71/79 [00:04<00:00, 25.04it/s]
 94%|| 74/79 [00:05<00:00, 25.78it/s]
 97%|| 77/79 [00:05<00:00, 26.41it/s]
100%|| 79/79 [00:05<00:00, 14.92it/s]
54it/s]
 68%|   | 54/79 [00:04<00:01, 22.05it/s]
 72%|  | 57/79 [00:04<00:00, 22.46it/s]
 76%|  | 60/79 [00:04<00:00, 22.69it/s]
 80%|  | 63/79 [00:04<00:00, 22.85it/s]
 84%| | 66/79 [00:04<00:00, 23.20it/s]
 87%| | 69/79 [00:04<00:00, 23.07it/s]
 91%| | 72/79 [00:05<00:00, 23.58it/s]
 95%|| 75/79 [00:05<00:00, 24.63it/s]
 99%|| 78/79 [00:05<00:00, 25.42it/s]
100%|| 79/79 [00:05<00:00, 14.79it/s]
2020-06-23 17:37:41,651 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:05.346346 (0.03421661224365234 s / img per device, on 32 devices)
2020-06-23 17:37:41,670 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:37:41,670 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:37:41,689 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592959068948, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 11, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592959068949, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 11}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:37:50,049 maskrcnn_benchmark.trainer INFO: eta: 1:04:26  iter: 9180  loss: 0.6067 (0.7604)  loss_classifier: 0.2169 (0.2807)  loss_box_reg: 0.1112 (0.1223)  loss_mask: 0.2528 (0.2991)  loss_objectness: 0.0165 (0.0377)  loss_rpn_box_reg: 0.0066 (0.0207)  time: 0.1080 (0.1255)  data: 0.0015 (0.0182)  lr: 0.016000  max mem: 5155
2020-06-23 17:37:52,210 maskrcnn_benchmark.trainer INFO: eta: 1:04:23  iter: 9200  loss: 0.5863 (0.7600)  loss_classifier: 0.1775 (0.2805)  loss_box_reg: 0.0877 (0.1222)  loss_mask: 0.2427 (0.2990)  loss_objectness: 0.0209 (0.0377)  loss_rpn_box_reg: 0.0105 (0.0207)  time: 0.1078 (0.1254)  data: 0.0014 (0.0181)  lr: 0.016000  max mem: 5155
2020-06-23 17:37:54,378 maskrcnn_benchmark.trainer INFO: eta: 1:04:19  iter: 9220  loss: 0.6135 (0.7597)  loss_classifier: 0.2179 (0.2804)  loss_box_reg: 0.1066 (0.1222)  loss_mask: 0.2654 (0.2989)  loss_objectness: 0.0148 (0.0377)  loss_rpn_box_reg: 0.0085 (0.0206)  time: 0.1084 (0.1254)  data: 0.0014 (0.0181)  lr: 0.016000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.62s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 17:37:56,560 maskrcnn_benchmark.trainer INFO: eta: 1:04:15  iter: 9240  loss: 0.6501 (0.7595)  loss_classifier: 0.2421 (0.2802)  loss_box_reg: 0.1160 (0.1221)  loss_mask: 0.2681 (0.2988)  loss_objectness: 0.0228 (0.0376)  loss_rpn_box_reg: 0.0081 (0.0206)  time: 0.1087 (0.1254)  data: 0.0015 (0.0181)  lr: 0.016000  max mem: 5155
DONE (t=1.46s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.35224
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.56237
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.38145
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20878
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.37946
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.45581
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29971
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.47391
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.49841
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.31908
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.53219
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62424
2020-06-23 17:37:58,719 maskrcnn_benchmark.trainer INFO: eta: 1:04:12  iter: 9260  loss: 0.5224 (0.7590)  loss_classifier: 0.1400 (0.2800)  loss_box_reg: 0.0763 (0.1221)  loss_mask: 0.2306 (0.2987)  loss_objectness: 0.0133 (0.0376)  loss_rpn_box_reg: 0.0064 (0.0206)  time: 0.1067 (0.1253)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:00,912 maskrcnn_benchmark.trainer INFO: eta: 1:04:08  iter: 9280  loss: 0.5176 (0.7585)  loss_classifier: 0.1822 (0.2798)  loss_box_reg: 0.0792 (0.1220)  loss_mask: 0.2280 (0.2985)  loss_objectness: 0.0100 (0.0375)  loss_rpn_box_reg: 0.0067 (0.0206)  time: 0.1081 (0.1253)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:38:03,087 maskrcnn_benchmark.trainer INFO: eta: 1:04:05  iter: 9300  loss: 0.5525 (0.7582)  loss_classifier: 0.1801 (0.2797)  loss_box_reg: 0.0938 (0.1220)  loss_mask: 0.2614 (0.2984)  loss_objectness: 0.0130 (0.0375)  loss_rpn_box_reg: 0.0074 (0.0206)  time: 0.1082 (0.1252)  data: 0.0014 (0.0180)  lr: 0.016000  max mem: 5155
DONE (t=1.59s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:38:05,249 maskrcnn_benchmark.trainer INFO: eta: 1:04:01  iter: 9320  loss: 0.5648 (0.7578)  loss_classifier: 0.1722 (0.2795)  loss_box_reg: 0.0835 (0.1219)  loss_mask: 0.2463 (0.2983)  loss_objectness: 0.0126 (0.0375)  loss_rpn_box_reg: 0.0059 (0.0206)  time: 0.1074 (0.1252)  data: 0.0015 (0.0179)  lr: 0.016000  max mem: 5155
DONE (t=2.39s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.32612
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.53235
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.34529
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15253
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.34948
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47510
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28569
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.43983
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.46040
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27229
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.49603
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.60378
2020-06-23 17:38:06,249 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3522445096465766, segm mAP: 0.3261224231871858
:::MLLOG {"namespace": "", "time_ms": 1592959086250, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.3522445096465766, "SEGM": 0.3261224231871858}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 10}}
:::MLLOG {"namespace": "", "time_ms": 1592959086250, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 10}}
2020-06-23 17:38:07,548 maskrcnn_benchmark.trainer INFO: eta: 1:03:58  iter: 9340  loss: 0.5553 (0.7574)  loss_classifier: 0.1946 (0.2793)  loss_box_reg: 0.0821 (0.1219)  loss_mask: 0.2333 (0.2982)  loss_objectness: 0.0158 (0.0374)  loss_rpn_box_reg: 0.0112 (0.0206)  time: 0.1077 (0.1252)  data: 0.0015 (0.0179)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:09,732 maskrcnn_benchmark.trainer INFO: eta: 1:03:54  iter: 9360  loss: 0.5094 (0.7570)  loss_classifier: 0.1564 (0.2791)  loss_box_reg: 0.0773 (0.1218)  loss_mask: 0.2405 (0.2981)  loss_objectness: 0.0148 (0.0374)  loss_rpn_box_reg: 0.0078 (0.0206)  time: 0.1093 (0.1252)  data: 0.0013 (0.0178)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:11,891 maskrcnn_benchmark.trainer INFO: eta: 1:03:51  iter: 9380  loss: 0.5921 (0.7566)  loss_classifier: 0.1897 (0.2789)  loss_box_reg: 0.0949 (0.1217)  loss_mask: 0.2449 (0.2980)  loss_objectness: 0.0141 (0.0374)  loss_rpn_box_reg: 0.0079 (0.0205)  time: 0.1079 (0.1251)  data: 0.0014 (0.0178)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:14,049 maskrcnn_benchmark.trainer INFO: eta: 1:03:47  iter: 9400  loss: 0.5561 (0.7562)  loss_classifier: 0.1655 (0.2787)  loss_box_reg: 0.0880 (0.1217)  loss_mask: 0.2191 (0.2979)  loss_objectness: 0.0144 (0.0373)  loss_rpn_box_reg: 0.0042 (0.0205)  time: 0.1074 (0.1251)  data: 0.0013 (0.0178)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:16,215 maskrcnn_benchmark.trainer INFO: eta: 1:03:43  iter: 9420  loss: 0.6315 (0.7558)  loss_classifier: 0.1948 (0.2786)  loss_box_reg: 0.1111 (0.1216)  loss_mask: 0.2681 (0.2978)  loss_objectness: 0.0148 (0.0373)  loss_rpn_box_reg: 0.0064 (0.0205)  time: 0.1081 (0.1250)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:18,386 maskrcnn_benchmark.trainer INFO: eta: 1:03:40  iter: 9440  loss: 0.5243 (0.7555)  loss_classifier: 0.1611 (0.2784)  loss_box_reg: 0.0762 (0.1216)  loss_mask: 0.2434 (0.2977)  loss_objectness: 0.0178 (0.0373)  loss_rpn_box_reg: 0.0082 (0.0205)  time: 0.1082 (0.1250)  data: 0.0013 (0.0177)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:20,542 maskrcnn_benchmark.trainer INFO: eta: 1:03:36  iter: 9460  loss: 0.5278 (0.7551)  loss_classifier: 0.1733 (0.2782)  loss_box_reg: 0.0784 (0.1215)  loss_mask: 0.2395 (0.2976)  loss_objectness: 0.0146 (0.0373)  loss_rpn_box_reg: 0.0055 (0.0205)  time: 0.1071 (0.1250)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:22,718 maskrcnn_benchmark.trainer INFO: eta: 1:03:33  iter: 9480  loss: 0.5187 (0.7547)  loss_classifier: 0.1646 (0.2780)  loss_box_reg: 0.0758 (0.1214)  loss_mask: 0.2302 (0.2975)  loss_objectness: 0.0112 (0.0372)  loss_rpn_box_reg: 0.0130 (0.0205)  time: 0.1094 (0.1249)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:24,872 maskrcnn_benchmark.trainer INFO: eta: 1:03:29  iter: 9500  loss: 0.5371 (0.7543)  loss_classifier: 0.1872 (0.2778)  loss_box_reg: 0.0844 (0.1214)  loss_mask: 0.2313 (0.2974)  loss_objectness: 0.0212 (0.0372)  loss_rpn_box_reg: 0.0100 (0.0205)  time: 0.1073 (0.1249)  data: 0.0013 (0.0176)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:27,040 maskrcnn_benchmark.trainer INFO: eta: 1:03:25  iter: 9520  loss: 0.5665 (0.7539)  loss_classifier: 0.1872 (0.2777)  loss_box_reg: 0.0865 (0.1213)  loss_mask: 0.2401 (0.2973)  loss_objectness: 0.0114 (0.0372)  loss_rpn_box_reg: 0.0044 (0.0205)  time: 0.1078 (0.1249)  data: 0.0013 (0.0176)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:29,198 maskrcnn_benchmark.trainer INFO: eta: 1:03:22  iter: 9540  loss: 0.5292 (0.7536)  loss_classifier: 0.1784 (0.2775)  loss_box_reg: 0.0810 (0.1213)  loss_mask: 0.2572 (0.2972)  loss_objectness: 0.0123 (0.0371)  loss_rpn_box_reg: 0.0094 (0.0205)  time: 0.1076 (0.1248)  data: 0.0013 (0.0175)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:31,347 maskrcnn_benchmark.trainer INFO: eta: 1:03:18  iter: 9560  loss: 0.5946 (0.7532)  loss_classifier: 0.1996 (0.2773)  loss_box_reg: 0.0941 (0.1212)  loss_mask: 0.2446 (0.2971)  loss_objectness: 0.0160 (0.0371)  loss_rpn_box_reg: 0.0105 (0.0205)  time: 0.1070 (0.1248)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:33,528 maskrcnn_benchmark.trainer INFO: eta: 1:03:15  iter: 9580  loss: 0.4877 (0.7528)  loss_classifier: 0.1717 (0.2771)  loss_box_reg: 0.0787 (0.1211)  loss_mask: 0.2298 (0.2970)  loss_objectness: 0.0138 (0.0371)  loss_rpn_box_reg: 0.0058 (0.0205)  time: 0.1081 (0.1248)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:35,687 maskrcnn_benchmark.trainer INFO: eta: 1:03:11  iter: 9600  loss: 0.6603 (0.7526)  loss_classifier: 0.2171 (0.2770)  loss_box_reg: 0.0954 (0.1211)  loss_mask: 0.2589 (0.2969)  loss_objectness: 0.0188 (0.0370)  loss_rpn_box_reg: 0.0151 (0.0205)  time: 0.1076 (0.1247)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:37,849 maskrcnn_benchmark.trainer INFO: eta: 1:03:08  iter: 9620  loss: 0.5885 (0.7522)  loss_classifier: 0.2152 (0.2769)  loss_box_reg: 0.1072 (0.1211)  loss_mask: 0.2365 (0.2968)  loss_objectness: 0.0178 (0.0370)  loss_rpn_box_reg: 0.0080 (0.0204)  time: 0.1080 (0.1247)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:40,014 maskrcnn_benchmark.trainer INFO: eta: 1:03:04  iter: 9640  loss: 0.6274 (0.7519)  loss_classifier: 0.2016 (0.2768)  loss_box_reg: 0.1053 (0.1211)  loss_mask: 0.2617 (0.2967)  loss_objectness: 0.0192 (0.0370)  loss_rpn_box_reg: 0.0090 (0.0204)  time: 0.1091 (0.1247)  data: 0.0013 (0.0174)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:42,161 maskrcnn_benchmark.trainer INFO: eta: 1:03:01  iter: 9660  loss: 0.5934 (0.7517)  loss_classifier: 0.1911 (0.2766)  loss_box_reg: 0.1070 (0.1210)  loss_mask: 0.2312 (0.2966)  loss_objectness: 0.0138 (0.0370)  loss_rpn_box_reg: 0.0139 (0.0205)  time: 0.1067 (0.1246)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:44,346 maskrcnn_benchmark.trainer INFO: eta: 1:02:57  iter: 9680  loss: 0.5677 (0.7513)  loss_classifier: 0.1846 (0.2765)  loss_box_reg: 0.0862 (0.1210)  loss_mask: 0.2317 (0.2965)  loss_objectness: 0.0136 (0.0369)  loss_rpn_box_reg: 0.0059 (0.0204)  time: 0.1087 (0.1246)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:46,518 maskrcnn_benchmark.trainer INFO: eta: 1:02:54  iter: 9700  loss: 0.5585 (0.7510)  loss_classifier: 0.1578 (0.2763)  loss_box_reg: 0.0950 (0.1210)  loss_mask: 0.2509 (0.2965)  loss_objectness: 0.0125 (0.0369)  loss_rpn_box_reg: 0.0064 (0.0204)  time: 0.1079 (0.1246)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5155


Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0
Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0


Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0
Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0

Grad overflow on iteration  9701
Using dynamic loss scale of  65536.0
2020-06-23 17:38:48,695 maskrcnn_benchmark.trainer INFO: eta: 1:02:50  iter: 9720  loss: 0.5338 (0.7508)  loss_classifier: 0.1819 (0.2762)  loss_box_reg: 0.0768 (0.1209)  loss_mask: 0.2495 (0.2964)  loss_objectness: 0.0200 (0.0369)  loss_rpn_box_reg: 0.0107 (0.0204)  time: 0.1084 (0.1245)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:50,855 maskrcnn_benchmark.trainer INFO: eta: 1:02:47  iter: 9740  loss: 0.5778 (0.7504)  loss_classifier: 0.1792 (0.2760)  loss_box_reg: 0.0997 (0.1209)  loss_mask: 0.2320 (0.2963)  loss_objectness: 0.0116 (0.0368)  loss_rpn_box_reg: 0.0063 (0.0204)  time: 0.1070 (0.1245)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:53,049 maskrcnn_benchmark.trainer INFO: eta: 1:02:43  iter: 9760  loss: 0.6193 (0.7501)  loss_classifier: 0.2362 (0.2759)  loss_box_reg: 0.1129 (0.1208)  loss_mask: 0.2518 (0.2962)  loss_objectness: 0.0154 (0.0368)  loss_rpn_box_reg: 0.0047 (0.0204)  time: 0.1086 (0.1245)  data: 0.0013 (0.0172)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:55,198 maskrcnn_benchmark.trainer INFO: eta: 1:02:40  iter: 9780  loss: 0.5962 (0.7499)  loss_classifier: 0.1960 (0.2758)  loss_box_reg: 0.1123 (0.1208)  loss_mask: 0.2541 (0.2961)  loss_objectness: 0.0175 (0.0368)  loss_rpn_box_reg: 0.0117 (0.0203)  time: 0.1074 (0.1244)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:57,359 maskrcnn_benchmark.trainer INFO: eta: 1:02:36  iter: 9800  loss: 0.4179 (0.7493)  loss_classifier: 0.1220 (0.2755)  loss_box_reg: 0.0651 (0.1207)  loss_mask: 0.2302 (0.2960)  loss_objectness: 0.0084 (0.0367)  loss_rpn_box_reg: 0.0063 (0.0203)  time: 0.1076 (0.1244)  data: 0.0013 (0.0171)  lr: 0.016000  max mem: 5155
2020-06-23 17:38:59,535 maskrcnn_benchmark.trainer INFO: eta: 1:02:33  iter: 9820  loss: 0.6533 (0.7491)  loss_classifier: 0.2140 (0.2755)  loss_box_reg: 0.1076 (0.1207)  loss_mask: 0.2399 (0.2959)  loss_objectness: 0.0156 (0.0367)  loss_rpn_box_reg: 0.0096 (0.0203)  time: 0.1086 (0.1244)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5155
2020-06-23 17:39:01,702 maskrcnn_benchmark.trainer INFO: eta: 1:02:29  iter: 9840  loss: 0.5332 (0.7488)  loss_classifier: 0.1889 (0.2753)  loss_box_reg: 0.0806 (0.1207)  loss_mask: 0.2125 (0.2958)  loss_objectness: 0.0161 (0.0367)  loss_rpn_box_reg: 0.0085 (0.0203)  time: 0.1081 (0.1243)  data: 0.0014 (0.0170)  lr: 0.016000  max mem: 5155
2020-06-23 17:39:03,912 maskrcnn_benchmark.trainer INFO: eta: 1:02:26  iter: 9860  loss: 0.5381 (0.7484)  loss_classifier: 0.1838 (0.2752)  loss_box_reg: 0.0885 (0.1206)  loss_mask: 0.2537 (0.2957)  loss_objectness: 0.0100 (0.0366)  loss_rpn_box_reg: 0.0082 (0.0203)  time: 0.1093 (0.1243)  data: 0.0013 (0.0170)  lr: 0.016000  max mem: 5155
2020-06-23 17:39:06,088 maskrcnn_benchmark.trainer INFO: eta: 1:02:22  iter: 9880  loss: 0.5869 (0.7480)  loss_classifier: 0.1902 (0.2750)  loss_box_reg: 0.0908 (0.1205)  loss_mask: 0.2619 (0.2956)  loss_objectness: 0.0142 (0.0366)  loss_rpn_box_reg: 0.0082 (0.0203)  time: 0.1081 (0.1243)  data: 0.0013 (0.0170)  lr: 0.016000  max mem: 5155
2020-06-23 17:39:08,258 maskrcnn_benchmark.trainer INFO: eta: 1:02:19  iter: 9900  loss: 0.5488 (0.7476)  loss_classifier: 0.1554 (0.2748)  loss_box_reg: 0.0903 (0.1205)  loss_mask: 0.2438 (0.2955)  loss_objectness: 0.0159 (0.0366)  loss_rpn_box_reg: 0.0079 (0.0203)  time: 0.1078 (0.1242)  data: 0.0013 (0.0169)  lr: 0.016000  max mem: 5155
2020-06-23 17:39:10,423 maskrcnn_benchmark.trainer INFO: eta: 1:02:16  iter: 9920  loss: 0.5188 (0.7472)  loss_classifier: 0.1695 (0.2746)  loss_box_reg: 0.0868 (0.1204)  loss_mask: 0.2567 (0.2954)  loss_objectness: 0.0153 (0.0365)  loss_rpn_box_reg: 0.0048 (0.0202)  time: 0.1077 (0.1242)  data: 0.0013 (0.0169)  lr: 0.016000  max mem: 5155
2020-06-23 17:39:12,606 maskrcnn_benchmark.trainer INFO: eta: 1:02:12  iter: 9940  loss: 0.5330 (0.7468)  loss_classifier: 0.1857 (0.2744)  loss_box_reg: 0.0951 (0.1204)  loss_mask: 0.2571 (0.2953)  loss_objectness: 0.0151 (0.0365)  loss_rpn_box_reg: 0.0062 (0.0202)  time: 0.1092 (0.1242)  data: 0.0013 (0.0169)  lr: 0.016000  max mem: 5155
2020-06-23 17:39:14,778 maskrcnn_benchmark.trainer INFO: eta: 1:02:09  iter: 9960  loss: 0.4977 (0.7465)  loss_classifier: 0.1691 (0.2743)  loss_box_reg: 0.0760 (0.1203)  loss_mask: 0.2561 (0.2952)  loss_objectness: 0.0139 (0.0365)  loss_rpn_box_reg: 0.0068 (0.0202)  time: 0.1083 (0.1241)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5155
2020-06-23 17:39:16,941 maskrcnn_benchmark.trainer INFO: eta: 1:02:05  iter: 9980  loss: 0.5869 (0.7462)  loss_classifier: 0.1941 (0.2741)  loss_box_reg: 0.0996 (0.1203)  loss_mask: 0.2534 (0.2951)  loss_objectness: 0.0153 (0.0365)  loss_rpn_box_reg: 0.0105 (0.0202)  time: 0.1079 (0.1241)  data: 0.0013 (0.0168)  lr: 0.016000  max mem: 5155
2020-06-23 17:39:19,109 maskrcnn_benchmark.trainer INFO: eta: 1:02:02  iter: 10000  loss: 0.4954 (0.7458)  loss_classifier: 0.1655 (0.2739)  loss_box_reg: 0.0704 (0.1202)  loss_mask: 0.2439 (0.2950)  loss_objectness: 0.0106 (0.0364)  loss_rpn_box_reg: 0.0037 (0.0202)  time: 0.1078 (0.1241)  data: 0.0013 (0.0168)  lr: 0.016000  max mem: 5155
2020-06-23 17:39:21,249 maskrcnn_benchmark.trainer INFO: eta: 1:01:58  iter: 10020  loss: 0.6037 (0.7455)  loss_classifier: 0.1987 (0.2738)  loss_box_reg: 0.1023 (0.1202)  loss_mask: 0.2441 (0.2949)  loss_objectness: 0.0166 (0.0364)  loss_rpn_box_reg: 0.0077 (0.0202)  time: 0.1066 (0.1240)  data: 0.0014 (0.0168)  lr: 0.016000  max mem: 5155
2020-06-23 17:39:23,422 maskrcnn_benchmark.trainer INFO: eta: 1:01:55  iter: 10040  loss: 0.5715 (0.7452)  loss_classifier: 0.2385 (0.2737)  loss_box_reg: 0.0999 (0.1201)  loss_mask: 0.2309 (0.2948)  loss_objectness: 0.0166 (0.0364)  loss_rpn_box_reg: 0.0070 (0.0202)  time: 0.1083 (0.1240)  data: 0.0014 (0.0167)  lr: 0.016000  max mem: 5155
2020-06-23 17:39:25,585 maskrcnn_benchmark.trainer INFO: eta: 1:01:52  iter: 10060  loss: 0.5217 (0.7448)  loss_classifier: 0.1718 (0.2735)  loss_box_reg: 0.0736 (0.1201)  loss_mask: 0.2435 (0.2947)  loss_objectness: 0.0094 (0.0363)  loss_rpn_box_reg: 0.0055 (0.0201)  time: 0.1079 (0.1240)  data: 0.0013 (0.0167)  lr: 0.016000  max mem: 5155
2020-06-23 17:39:27,766 maskrcnn_benchmark.trainer INFO: eta: 1:01:48  iter: 10080  loss: 0.4911 (0.7444)  loss_classifier: 0.1940 (0.2734)  loss_box_reg: 0.0820 (0.1200)  loss_mask: 0.2331 (0.2946)  loss_objectness: 0.0140 (0.0363)  loss_rpn_box_reg: 0.0076 (0.0201)  time: 0.1082 (0.1240)  data: 0.0014 (0.0167)  lr: 0.016000  max mem: 5155
:::MLLOG {"namespace": "", "time_ms": 1592959168516, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1592959168516, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1592959168516, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 11}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 17:39:28,746 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
Done (t=0.27s)
creating index...
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
Done (t=0.26s)
creating index...
index created!
index created!
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
2020-06-23 17:39:29,060 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.48it/s]
 28%|       | 22/79 [00:01<00:05,  9.53it/s]
 32%|      | 25/79 [00:01<00:04, 11.78it/s]
 35%|      | 28/79 [00:01<00:03, 14.19it/s]
 39%|      | 31/79 [00:02<00:02, 16.36it/s]
 43%|     | 34/79 [00:02<00:02, 18.45it/s]
 47%|     | 37/79 [00:02<00:02, 20.21it/s]
 51%|     | 40/79 [00:02<00:01, 21.76it/s]
 54%|    | 43/79 [00:02<00:01, 22.91it/s]
 58%|    | 46/79 [00:02<00:01, 23.64it/s]
 62%|   | 49/79 [00:02<00:01, 24.38it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.22it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.24it/s]
 16%|        | 13/79 [00:01<00:15,  4.39it/s]
 20%|        | 16/79 [00:01<00:10,  5.83it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.64it/s]
 32%|      | 25/79 [00:01<00:04, 11.87it/s]
 35%|      | 28/79 [00:01<00:03, 14.15it/s]
 39%|      | 31/79 [00:02<00:02, 16.35it/s]
 43%|     | 34/79 [00:02<00:02, 18.40it/s]
 47%|     | 37/79 [00:02<00:02, 20.20it/s]
 51%|     | 40/79 [00:02<00:01, 21.35it/s]
 54%|    | 43/79 [00:02<00:01, 22.48it/s]
 58%|    | 46/79 [00:02<00:01, 23.31it/s]
 62%|   | 49/79 [00:02<00:01, 24.17it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.33it/s]
 20%|        | 16/79 [00:01<00:10,  5.77it/s]
 24%|       | 19/79 [00:01<00:08,  7.50it/s]
 28%|       | 22/79 [00:01<00:05,  9.56it/s]
 32%|      | 25/79 [00:01<00:04, 11.84it/s]
 35%|      | 28/79 [00:01<00:03, 14.13it/s]
 39%|      | 31/79 [00:02<00:02, 16.44it/s]
 43%|     | 34/79 [00:02<00:02, 18.47it/s]
 47%|     | 37/79 [00:02<00:02, 20.24it/s]
 51%|     | 40/79 [00:02<00:01, 21.66it/s]
 54%|    | 43/79 [00:02<00:01, 22.75it/s]
 58%|    | 46/79 [00:02<00:01, 23.62it/s]
 62%|   | 49/79 [00:02<00:01, 24.12it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.72it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:05,  9.52it/s]
 32%|      | 25/79 [00:01<00:04, 11.74it/s]
 35%|      | 28/79 [00:01<00:03, 13.94it/s]
 39%|      | 31/79 [00:02<00:02, 16.20it/s]
 43%|     | 34/79 [00:02<00:02, 18.27it/s]
 47%|     | 37/79 [00:02<00:02, 20.15it/s]
 51%|     | 40/79 [00:02<00:01, 21.65it/s]
 54%|    | 43/79 [00:02<00:01, 23.09it/s]
 58%|    | 46/79 [00:02<00:01, 23.75it/s]
 62%|   | 49/79 [00:02<00:01, 24.49it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.24it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.82it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.62it/s]
 32%|      | 25/79 [00:01<00:04, 11.83it/s]
 35%|      | 28/79 [00:01<00:03, 14.05it/s]
 39%|      | 31/79 [00:02<00:02, 16.28it/s]
 43%|     | 34/79 [00:02<00:02, 18.31it/s]
 47%|     | 37/79 [00:02<00:02, 20.07it/s]
 51%|     | 40/79 [00:02<00:01, 21.18it/s]
 54%|    | 43/79 [00:02<00:01, 22.37it/s]
 58%|    | 46/79 [00:02<00:01, 23.02it/s]
 62%|   | 49/79 [00:02<00:01, 23.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  4%|         | 3/79 [00:00<00:46,  1.65it/s]
  8%|         | 6/79 [00:01<00:31,  2.29it/s]
 11%|        | 9/79 [00:01<00:22,  3.16it/s]
 15%|        | 12/79 [00:01<00:15,  4.28it/s]
 19%|        | 15/79 [00:01<00:11,  5.73it/s]
 23%|       | 18/79 [00:01<00:08,  7.46it/s]
 27%|       | 21/79 [00:01<00:06,  9.47it/s]
 30%|       | 24/79 [00:01<00:04, 11.65it/s]
 34%|      | 27/79 [00:01<00:03, 14.03it/s]
 38%|      | 30/79 [00:02<00:03, 16.12it/s]
 42%|     | 33/79 [00:02<00:02, 18.07it/s]
 46%|     | 36/79 [00:02<00:02, 19.67it/s]
 49%|     | 39/79 [00:02<00:01, 21.19it/s]
 53%|    | 42/79 [00:02<00:01, 22.22it/s]
 57%|    | 45/79 [00:02<00:01, 23.04it/s]
 61%|    | 48/79 [00:02<00:01, 23.73it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  4%|         | 3/79 [00:00<00:45,  1.68it/s]
  8%|         | 6/79 [00:01<00:31,  2.33it/s]
 11%|        | 9/79 [00:01<00:21,  3.19it/s]
 15%|        | 12/79 [00:01<00:15,  4.33it/s]
 19%|        | 15/79 [00:01<00:11,  5.75it/s]
 23%|       | 18/79 [00:01<00:08,  7.46it/s]
 27%|       | 21/79 [00:01<00:06,  9.45it/s]
 30%|       | 24/79 [00:01<00:04, 11.64it/s]
 34%|      | 27/79 [00:01<00:03, 13.91it/s]
 38%|      | 30/79 [00:02<00:03, 16.03it/s]
 42%|     | 33/79 [00:02<00:02, 17.97it/s]
 46%|     | 36/79 [00:02<00:02, 19.78it/s]
 49%|     | 39/79 [00:02<00:01, 20.87it/s]
 53%|    | 42/79 [00:02<00:01, 21.96it/s]
 57%|    | 45/79 [00:02<00:01, 22.60it/s]
 61%|    | 48/79 [00:02<00:01, 23.19it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.36it/s]
 32%|      | 25/79 [00:01<00:04, 11.57it/s]
 35%|      | 28/79 [00:01<00:03, 13.86it/s]
 39%|      | 31/79 [00:02<00:02, 16.17it/s]
 43%|     | 34/79 [00:02<00:02, 18.17it/s]
 47%|     | 37/79 [00:02<00:02, 19.95it/s]
 51%|     | 40/79 [00:02<00:01, 21.32it/s]
 54%|    | 43/79 [00:02<00:01, 22.52it/s]
 58%|    | 46/79 [00:02<00:01, 23.17it/s]
 62%|   | 49/79 [00:02<00:01, 23.79it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  4%|         | 3/79 [00:01<00:47,  1.61it/s]
  8%|         | 6/79 [00:01<00:32,  2.23it/s]
 11%|        | 9/79 [00:01<00:22,  3.07it/s]
 15%|        | 12/79 [00:01<00:16,  4.18it/s]
 19%|        | 15/79 [00:01<00:11,  5.58it/s]
 23%|       | 18/79 [00:01<00:08,  7.28it/s]
 27%|       | 21/79 [00:01<00:06,  9.28it/s]
 30%|       | 24/79 [00:01<00:04, 11.45it/s]
 34%|      | 27/79 [00:01<00:03, 13.75it/s]
 38%|      | 30/79 [00:02<00:03, 15.93it/s]
 42%|     | 33/79 [00:02<00:02, 18.05it/s]
 46%|     | 36/79 [00:02<00:02, 19.90it/s]
 49%|     | 39/79 [00:02<00:01, 21.36it/s]
 53%|    | 42/79 [00:02<00:01, 22.45it/s]
 57%|    | 45/79 [00:02<00:01, 23.31it/s]
 61%|    | 48/79 [00:02<00:01, 23.90it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.40it/s]
 28%|       | 22/79 [00:01<00:06,  9.40it/s]
 32%|      | 25/79 [00:01<00:04, 11.60it/s]
 35%|      | 28/79 [00:01<00:03, 13.90it/s]
 39%|      | 31/79 [00:02<00:02, 16.09it/s]
 43%|     | 34/79 [00:02<00:02, 18.13it/s]
 47%|     | 37/79 [00:02<00:02, 19.95it/s]
 51%|     | 40/79 [00:02<00:01, 21.24it/s]
 54%|    | 43/79 [00:02<00:01, 22.36it/s]
 58%|    | 46/79 [00:02<00:01, 23.21it/s]
 62%|   | 49/79 [00:02<00:01, 24.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.29it/s]
 28%|       | 22/79 [00:01<00:06,  9.29it/s]
 32%|      | 25/79 [00:01<00:04, 11.53it/s]
 35%|      | 28/79 [00:01<00:03, 13.84it/s]
 39%|      | 31/79 [00:02<00:02, 16.03it/s]
 43%|     | 34/79 [00:02<00:02, 18.13it/s]
 47%|     | 37/79 [00:02<00:02, 19.80it/s]
 51%|     | 40/79 [00:02<00:01, 21.27it/s]
 54%|    | 43/79 [00:02<00:01, 22.36it/s]
 58%|    | 46/79 [00:02<00:01, 23.32it/s]
 62%|   | 49/79 [00:02<00:01, 24.22it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.06it/s]
 28%|       | 22/79 [00:01<00:06,  9.05it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.62it/s]
 39%|      | 31/79 [00:02<00:02, 16.01it/s]
 43%|     | 34/79 [00:02<00:02, 18.07it/s]
 47%|     | 37/79 [00:02<00:02, 19.98it/s]
 51%|     | 40/79 [00:02<00:01, 21.47it/s]
 54%|    | 43/79 [00:02<00:01, 22.72it/s]
 58%|    | 46/79 [00:02<00:01, 23.54it/s]
 62%|   | 49/79 [00:02<00:01, 24.22it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.11it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.69it/s]
 39%|      | 31/79 [00:02<00:02, 16.02it/s]
 43%|     | 34/79 [00:02<00:02, 18.09it/s]
 47%|     | 37/79 [00:02<00:02, 20.09it/s]
 51%|     | 40/79 [00:02<00:01, 21.46it/s]
 54%|    | 43/79 [00:02<00:01, 22.61it/s]
 58%|    | 46/79 [00:02<00:01, 22.99it/s]
 62%|   | 49/79 [00:02<00:01, 23.80it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.14it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.59it/s]
 39%|      | 31/79 [00:02<00:03, 15.78it/s]
 43%|     | 34/79 [00:02<00:02, 17.81it/s]
 47%|     | 37/79 [00:02<00:02, 19.50it/s]
 51%|     | 40/79 [00:02<00:01, 21.06it/s]
 54%|    | 43/79 [00:02<00:01, 22.23it/s]
 58%|    | 46/79 [00:02<00:01, 22.84it/s]
 62%|   | 49/79 [00:02<00:01, 23.77it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.95it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.95it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.12it/s]
 35%|      | 28/79 [00:01<00:03, 13.42it/s]
 39%|      | 31/79 [00:02<00:03, 15.82it/s]
 43%|     | 34/79 [00:02<00:02, 17.94it/s]
 47%|     | 37/79 [00:02<00:02, 19.84it/s]
 51%|     | 40/79 [00:02<00:01, 21.20it/s]
 54%|    | 43/79 [00:02<00:01, 22.23it/s]
 58%|    | 46/79 [00:02<00:01, 23.36it/s]
 62%|   | 49/79 [00:02<00:01, 24.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.10it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.33it/s]
 28%|       | 22/79 [00:01<00:06,  9.27it/s]
 32%|      | 25/79 [00:01<00:04, 11.51it/s]
 35%|      | 28/79 [00:01<00:03, 13.81it/s]
 39%|      | 31/79 [00:02<00:03, 15.95it/s]
 43%|     | 34/79 [00:02<00:02, 18.00it/s]
 47%|     | 37/79 [00:02<00:02, 19.88it/s]
 51%|     | 40/79 [00:02<00:01, 21.34it/s]
 54%|    | 43/79 [00:02<00:01, 22.26it/s]
 58%|    | 46/79 [00:02<00:01, 23.22it/s]
 62%|   | 49/79 [00:02<00:01, 23.69it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:16,  3.89it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.86it/s]
 28%|       | 22/79 [00:01<00:06,  8.83it/s]
 32%|      | 25/79 [00:01<00:04, 10.99it/s]
 35%|      | 28/79 [00:02<00:03, 13.28it/s]
 39%|      | 31/79 [00:02<00:03, 15.53it/s]
 43%|     | 34/79 [00:02<00:02, 17.54it/s]
 47%|     | 37/79 [00:02<00:02, 19.37it/s]
 51%|     | 40/79 [00:02<00:01, 20.82it/s]
 54%|    | 43/79 [00:02<00:01, 21.90it/s]
 58%|    | 46/79 [00:02<00:01, 23.07it/s]
 62%|   | 49/79 [00:02<00:01, 23.64it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.91it/s]
 20%|        | 16/79 [00:01<00:12,  5.24it/s]
 24%|       | 19/79 [00:01<00:08,  6.90it/s]
 28%|       | 22/79 [00:01<00:06,  8.85it/s]
 32%|      | 25/79 [00:01<00:04, 11.02it/s]
 35%|      | 28/79 [00:01<00:03, 13.35it/s]
 39%|      | 31/79 [00:02<00:03, 15.64it/s]
 43%|     | 34/79 [00:02<00:02, 17.77it/s]
 47%|     | 37/79 [00:02<00:02, 19.50it/s]
 51%|     | 40/79 [00:02<00:01, 21.13it/s]
 54%|    | 43/79 [00:02<00:01, 22.29it/s]
 58%|    | 46/79 [00:02<00:01, 23.19it/s]
 62%|   | 49/79 [00:02<00:01, 24.10it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.32it/s]
 28%|       | 22/79 [00:01<00:06,  9.23it/s]
 32%|      | 25/79 [00:01<00:04, 11.36it/s]
 35%|      | 28/79 [00:01<00:03, 13.56it/s]
 39%|      | 31/79 [00:02<00:03, 15.76it/s]
 43%|     | 34/79 [00:02<00:02, 17.86it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 21.08it/s]
 54%|    | 43/79 [00:02<00:01, 22.27it/s]
 58%|    | 46/79 [00:02<00:01, 23.49it/s]
 62%|   | 49/79 [00:02<00:01, 23.80it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  7.03it/s]
 28%|       | 22/79 [00:01<00:06,  9.00it/s]
 32%|      | 25/79 [00:01<00:04, 11.18it/s]
 35%|      | 28/79 [00:01<00:03, 13.49it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.75it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 21.04it/s]
 54%|    | 43/79 [00:02<00:01, 22.39it/s]
 58%|    | 46/79 [00:02<00:01, 23.07it/s]
 62%|   | 49/79 [00:02<00:01, 23.64it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.89it/s]
 16%|        | 13/79 [00:01<00:16,  3.95it/s]
 20%|        | 16/79 [00:01<00:11,  5.30it/s]
 24%|       | 19/79 [00:01<00:08,  6.93it/s]
 28%|       | 22/79 [00:01<00:06,  8.88it/s]
 32%|      | 25/79 [00:01<00:04, 11.02it/s]
 35%|      | 28/79 [00:01<00:03, 13.33it/s]
 39%|      | 31/79 [00:02<00:03, 15.56it/s]
 43%|     | 34/79 [00:02<00:02, 17.67it/s]
 47%|     | 37/79 [00:02<00:02, 19.48it/s]
 51%|     | 40/79 [00:02<00:01, 20.98it/s]
 54%|    | 43/79 [00:02<00:01, 22.14it/s]
 58%|    | 46/79 [00:02<00:01, 23.05it/s]
 62%|   | 49/79 [00:02<00:01, 23.97it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.06it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.17it/s]
 32%|      | 25/79 [00:01<00:04, 11.33it/s]
 35%|      | 28/79 [00:01<00:03, 13.53it/s]
 39%|      | 31/79 [00:02<00:03, 15.81it/s]
 43%|     | 34/79 [00:02<00:02, 17.51it/s]
 47%|     | 37/79 [00:02<00:02, 19.33it/s]
 51%|     | 40/79 [00:02<00:01, 20.79it/s]
 54%|    | 43/79 [00:02<00:01, 21.93it/s]
 58%|    | 46/79 [00:02<00:01, 22.91it/s]
 62%|   | 49/79 [00:02<00:01, 23.20it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.06it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:17,  3.88it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.84it/s]
 28%|       | 22/79 [00:01<00:06,  8.80it/s]
 32%|      | 25/79 [00:01<00:04, 10.96it/s]
 35%|      | 28/79 [00:02<00:03, 13.18it/s]
 39%|      | 31/79 [00:02<00:03, 15.44it/s]
 43%|     | 34/79 [00:02<00:02, 17.58it/s]
 47%|     | 37/79 [00:02<00:02, 19.55it/s]
 51%|     | 40/79 [00:02<00:01, 20.88it/s]
 54%|    | 43/79 [00:02<00:01, 22.18it/s]
 58%|    | 46/79 [00:02<00:01, 23.12it/s]
 62%|   | 49/79 [00:02<00:01, 23.88it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  4%|         | 3/79 [00:00<00:47,  1.60it/s]
  8%|         | 6/79 [00:01<00:32,  2.22it/s]
 11%|        | 9/79 [00:01<00:22,  3.06it/s]
 15%|        | 12/79 [00:01<00:16,  4.15it/s]
 19%|        | 15/79 [00:01<00:11,  5.54it/s]
 23%|       | 18/79 [00:01<00:08,  7.19it/s]
 27%|       | 21/79 [00:01<00:06,  9.18it/s]
 30%|       | 24/79 [00:01<00:04, 11.35it/s]
 34%|      | 27/79 [00:01<00:03, 13.47it/s]
 38%|      | 30/79 [00:02<00:03, 15.68it/s]
 42%|     | 33/79 [00:02<00:02, 17.57it/s]
 46%|     | 36/79 [00:02<00:02, 19.29it/s]
 49%|     | 39/79 [00:02<00:01, 20.18it/s]
 53%|    | 42/79 [00:02<00:01, 21.25it/s]
 57%|    | 45/79 [00:02<00:01, 22.27it/s]
 61%|    | 48/79 [00:02<00:01, 22.87it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.12it/s]
 28%|       | 22/79 [00:01<00:06,  9.06it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.51it/s]
 39%|      | 31/79 [00:02<00:03, 15.81it/s]
 43%|     | 34/79 [00:02<00:02, 17.84it/s]
 47%|     | 37/79 [00:02<00:02, 19.69it/s]
 51%|     | 40/79 [00:02<00:01, 21.11it/s]
 54%|    | 43/79 [00:02<00:01, 22.08it/s]
 58%|    | 46/79 [00:02<00:01, 22.77it/s]
 62%|   | 49/79 [00:02<00:01, 23.40it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.06it/s]
 28%|       | 22/79 [00:01<00:06,  9.04it/s]
 32%|      | 25/79 [00:01<00:04, 11.18it/s]
 35%|      | 28/79 [00:01<00:03, 13.47it/s]
 39%|      | 31/79 [00:02<00:03, 15.60it/s]
 43%|     | 34/79 [00:02<00:02, 17.64it/s]
 47%|     | 37/79 [00:02<00:02, 19.47it/s]
 51%|     | 40/79 [00:02<00:01, 20.69it/s]
 54%|    | 43/79 [00:02<00:01, 21.96it/s]
 58%|    | 46/79 [00:02<00:01, 22.46it/s]
 62%|   | 49/79 [00:02<00:01, 23.26it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.01it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  7.02it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.05it/s]
 35%|      | 28/79 [00:02<00:03, 13.30it/s]
 39%|      | 31/79 [00:02<00:03, 15.45it/s]
 43%|     | 34/79 [00:02<00:02, 17.40it/s]
 47%|     | 37/79 [00:02<00:02, 19.09it/s]
 51%|     | 40/79 [00:02<00:01, 20.46it/s]
 54%|    | 43/79 [00:02<00:01, 21.79it/s]
 58%|    | 46/79 [00:02<00:01, 22.50it/s]
 62%|   | 49/79 [00:02<00:01, 23.19it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.39it/s]
 24%|       | 19/79 [00:01<00:08,  7.06it/s]
 28%|       | 22/79 [00:01<00:06,  9.02it/s]
 32%|      | 25/79 [00:01<00:04, 11.15it/s]
 35%|      | 28/79 [00:01<00:03, 13.34it/s]
 39%|      | 31/79 [00:02<00:03, 15.47it/s]
 43%|     | 34/79 [00:02<00:02, 17.41it/s]
 47%|     | 37/79 [00:02<00:02, 19.02it/s]
 51%|     | 40/79 [00:02<00:01, 20.31it/s]
 54%|    | 43/79 [00:02<00:01, 21.24it/s]
 58%|    | 46/79 [00:02<00:01, 22.22it/s]
 62%|   | 49/79 [00:02<00:01, 22.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:48,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.35it/s]
 24%|       | 19/79 [00:01<00:08,  7.01it/s]
 28%|       | 22/79 [00:01<00:06,  8.93it/s]
 32%|      | 25/79 [00:01<00:04, 11.07it/s]
 35%|      | 28/79 [00:02<00:03, 13.30it/s]
 39%|      | 31/79 [00:02<00:03, 15.47it/s]
 43%|     | 34/79 [00:02<00:02, 17.38it/s]
 47%|     | 37/79 [00:02<00:02, 19.22it/s]
 51%|     | 40/79 [00:02<00:01, 20.46it/s]
 54%|    | 43/79 [00:02<00:01, 21.60it/s]
 58%|    | 46/79 [00:02<00:01, 22.49it/s]
 62%|   | 49/79 [00:02<00:01, 23.30it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  8%|         | 6/79 [00:01<00:34,  2.14it/s]
 11%|        | 9/79 [00:01<00:23,  2.94it/s]
 15%|        | 12/79 [00:01<00:16,  4.01it/s]
 19%|        | 15/79 [00:01<00:11,  5.37it/s]
 23%|       | 18/79 [00:01<00:08,  7.03it/s]
 27%|       | 21/79 [00:01<00:06,  8.96it/s]
 30%|       | 24/79 [00:01<00:04, 11.09it/s]
 34%|      | 27/79 [00:01<00:03, 13.36it/s]
 38%|      | 30/79 [00:02<00:03, 15.55it/s]
 42%|     | 33/79 [00:02<00:02, 17.44it/s]
 46%|     | 36/79 [00:02<00:02, 18.88it/s]
 49%|     | 39/79 [00:02<00:01, 20.32it/s]
 53%|    | 42/79 [00:02<00:01, 21.43it/s]
 57%|    | 45/79 [00:02<00:01, 22.07it/s]
 61%|    | 48/79 [00:02<00:01, 22.85it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  4%|         | 3/79 [00:01<00:49,  1.53it/s]
  8%|         | 6/79 [00:01<00:34,  2.13it/s]
 11%|        | 9/79 [00:01<00:23,  2.93it/s]
 15%|        | 12/79 [00:01<00:16,  3.99it/s]
 19%|        | 15/79 [00:01<00:12,  5.32it/s]
 23%|       | 18/79 [00:01<00:08,  6.98it/s]
 27%|       | 21/79 [00:01<00:06,  8.93it/s]
 30%|       | 24/79 [00:01<00:05, 11.00it/s]
 34%|      | 27/79 [00:01<00:03, 13.21it/s]
 38%|      | 30/79 [00:02<00:03, 15.26it/s]
 42%|     | 33/79 [00:02<00:02, 17.31it/s]
 46%|     | 36/79 [00:02<00:02, 18.85it/s]
 49%|     | 39/79 [00:02<00:01, 20.24it/s]
 53%|    | 42/79 [00:02<00:01, 21.19it/s]
 57%|    | 45/79 [00:02<00:01, 22.35it/s]
 61%|    | 48/79 [00:02<00:01, 23.00it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.43it/s]
  9%|         | 7/79 [00:01<00:36,  2.00it/s]
 13%|        | 10/79 [00:01<00:25,  2.76it/s]
 16%|        | 13/79 [00:01<00:17,  3.76it/s]
 20%|        | 16/79 [00:01<00:12,  5.05it/s]
 24%|       | 19/79 [00:01<00:09,  6.64it/s]
 28%|       | 22/79 [00:01<00:06,  8.48it/s]
 32%|      | 25/79 [00:01<00:05, 10.60it/s]
 35%|      | 28/79 [00:02<00:03, 12.76it/s]
 39%|      | 31/79 [00:02<00:03, 15.05it/s]
 43%|     | 34/79 [00:02<00:02, 17.18it/s]
 47%|     | 37/79 [00:02<00:02, 18.81it/s]
 51%|     | 40/79 [00:02<00:01, 20.21it/s]
 54%|    | 43/79 [00:02<00:01, 21.36it/s]
 58%|    | 46/79 [00:02<00:01, 22.29it/s]
 62%|   | 49/79 [00:02<00:01, 23.15it/s]
 66%|   | 52/79 [00:03<00:01, 24.95it/s]
 70%|   | 55/79 [00:02<00:00, 25.36it/s]
 73%|  | 58/79 [00:03<00:00, 25.74it/s]
 77%|  | 61/79 [00:03<00:00, 25.83it/s]
 81%|  | 64/79 [00:03<00:00, 25.87it/s]
 85%| | 67/79 [00:03<00:00, 25.98it/s]
 89%| | 70/79 [00:03<00:00, 25.93it/s]
 92%|| 73/79 [00:03<00:00, 26.30it/s]
 96%|| 76/79 [00:03<00:00, 26.86it/s]
100%|| 79/79 [00:03<00:00, 27.70it/s]
, 24.41it/s]
 70%|   | 55/79 [00:02<00:00, 24.76it/s]
 73%|  | 58/79 [00:03<00:00, 25.11it/s]
 77%|  | 61/79 [00:03<00:00, 25.43it/s]
 81%|  | 64/79 [00:03<00:00, 25.50it/s]
 85%| | 67/79 [00:03<00:00, 25.93it/s]
 89%| | 70/79 [00:03<00:00, 25.75it/s]
 92%|| 73/79 [00:03<00:00, 26.14it/s]
 96%|| 76/79 [00:03<00:00, 26.79it/s]
100%|| 79/79 [00:03<00:00, 20.15it/s]
, 24.55it/s]
 70%|   | 55/79 [00:02<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 24.94it/s]
 77%|  | 61/79 [00:03<00:00, 25.24it/s]
 81%|  | 64/79 [00:03<00:00, 25.48it/s]
 85%| | 67/79 [00:03<00:00, 25.51it/s]
 89%| | 70/79 [00:03<00:00, 25.76it/s]
 92%|| 73/79 [00:03<00:00, 26.14it/s]
 96%|| 76/79 [00:03<00:00, 26.81it/s]
100%|| 79/79 [00:03<00:00, 27.61it/s]
, 25.06it/s]
 70%|   | 55/79 [00:02<00:00, 25.70it/s]
 73%|  | 58/79 [00:03<00:00, 25.92it/s]
 77%|  | 61/79 [00:03<00:00, 25.96it/s]
 81%|  | 64/79 [00:03<00:00, 26.18it/s]
 85%| | 67/79 [00:03<00:00, 26.16it/s]
 89%| | 70/79 [00:03<00:00, 26.11it/s]
 92%|| 73/79 [00:03<00:00, 26.50it/s]
 96%|| 76/79 [00:03<00:00, 26.96it/s]
100%|| 79/79 [00:03<00:00, 27.74it/s]
, 24.28it/s]
 70%|   | 55/79 [00:02<00:00, 24.80it/s]
 73%|  | 58/79 [00:03<00:00, 25.03it/s]
 77%|  | 61/79 [00:03<00:00, 25.23it/s]
 81%|  | 64/79 [00:03<00:00, 25.11it/s]
 85%| | 67/79 [00:03<00:00, 25.54it/s]
 89%| | 70/79 [00:03<00:00, 25.64it/s]
 92%|| 73/79 [00:03<00:00, 25.86it/s]
 96%|| 76/79 [00:03<00:00, 26.51it/s]
100%|| 79/79 [00:03<00:00, 20.00it/s]
19it/s]
 68%|   | 54/79 [00:02<00:01, 24.83it/s]
 72%|  | 57/79 [00:03<00:00, 24.87it/s]
 76%|  | 60/79 [00:03<00:00, 25.32it/s]
 80%|  | 63/79 [00:03<00:00, 25.42it/s]
 84%| | 66/79 [00:03<00:00, 25.62it/s]
 87%| | 69/79 [00:03<00:00, 25.55it/s]
 91%| | 72/79 [00:03<00:00, 25.75it/s]
 95%|| 75/79 [00:03<00:00, 26.47it/s]
 99%|| 78/79 [00:03<00:00, 27.02it/s]
100%|| 79/79 [00:03<00:00, 20.03it/s]
, 24.52it/s]
 70%|   | 55/79 [00:02<00:00, 25.08it/s]
 73%|  | 58/79 [00:03<00:00, 25.28it/s]
 77%|  | 61/79 [00:03<00:00, 25.47it/s]
 81%|  | 64/79 [00:03<00:00, 25.56it/s]
 85%| | 67/79 [00:03<00:00, 25.78it/s]
 89%| | 70/79 [00:03<00:00, 25.78it/s]
 92%|| 73/79 [00:03<00:00, 26.27it/s]
 96%|| 76/79 [00:03<00:00, 26.88it/s]
100%|| 79/79 [00:03<00:00, 27.63it/s]
, 24.12it/s]
 70%|   | 55/79 [00:03<00:00, 24.83it/s]
 73%|  | 58/79 [00:03<00:00, 25.14it/s]
 77%|  | 61/79 [00:03<00:00, 25.30it/s]
 81%|  | 64/79 [00:03<00:00, 25.35it/s]
 85%| | 67/79 [00:03<00:00, 25.32it/s]
 89%| | 70/79 [00:03<00:00, 25.15it/s]
 92%|| 73/79 [00:03<00:00, 25.91it/s]
 96%|| 76/79 [00:03<00:00, 26.60it/s]
100%|| 79/79 [00:03<00:00, 27.51it/s]
, 24.81it/s]
 70%|   | 55/79 [00:02<00:00, 24.97it/s]
 73%|  | 58/79 [00:03<00:00, 25.31it/s]
 77%|  | 61/79 [00:03<00:00, 25.39it/s]
 81%|  | 64/79 [00:03<00:00, 25.41it/s]
 85%| | 67/79 [00:03<00:00, 25.30it/s]
 89%| | 70/79 [00:03<00:00, 25.68it/s]
 92%|| 73/79 [00:03<00:00, 25.56it/s]
 96%|| 76/79 [00:03<00:00, 26.39it/s]
100%|| 79/79 [00:03<00:00, 27.17it/s]
, 24.18it/s]
 70%|   | 55/79 [00:03<00:00, 24.49it/s]
 73%|  | 58/79 [00:03<00:00, 25.06it/s]
 77%|  | 61/79 [00:03<00:00, 25.41it/s]
 81%|  | 64/79 [00:03<00:00, 25.24it/s]
 85%| | 67/79 [00:03<00:00, 25.48it/s]
 89%| | 70/79 [00:03<00:00, 25.84it/s]
 92%|| 73/79 [00:03<00:00, 25.94it/s]
 97%|| 77/79 [00:03<00:00, 26.94it/s]
100%|| 79/79 [00:04<00:00, 19.65it/s]
, 24.39it/s]
 70%|   | 55/79 [00:02<00:00, 24.45it/s]
 73%|  | 58/79 [00:03<00:00, 24.73it/s]
 77%|  | 61/79 [00:03<00:00, 24.96it/s]
 81%|  | 64/79 [00:03<00:00, 24.84it/s]
 85%| | 67/79 [00:03<00:00, 24.98it/s]
 89%| | 70/79 [00:03<00:00, 25.06it/s]
 92%|| 73/79 [00:03<00:00, 25.56it/s]
 96%|| 76/79 [00:03<00:00, 26.18it/s]
100%|| 79/79 [00:03<00:00, 26.99it/s]
, 24.83it/s]
 70%|   | 55/79 [00:03<00:00, 25.42it/s]
 73%|  | 58/79 [00:03<00:00, 25.65it/s]
 77%|  | 61/79 [00:03<00:00, 25.89it/s]
 81%|  | 64/79 [00:03<00:00, 25.98it/s]
 85%| | 67/79 [00:03<00:00, 26.07it/s]
 89%| | 70/79 [00:03<00:00, 26.21it/s]
 92%|| 73/79 [00:03<00:00, 26.12it/s]
 96%|| 76/79 [00:03<00:00, 26.80it/s]
100%|| 79/79 [00:03<00:00, 27.53it/s]
, 24.32it/s]
 70%|   | 55/79 [00:03<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 25.15it/s]
 77%|  | 61/79 [00:03<00:00, 25.64it/s]
 81%|  | 64/79 [00:03<00:00, 25.18it/s]
 85%| | 67/79 [00:03<00:00, 25.23it/s]
 89%| | 70/79 [00:03<00:00, 25.47it/s]
 92%|| 73/79 [00:03<00:00, 25.35it/s]
 96%|| 76/79 [00:03<00:00, 26.03it/s]
100%|| 79/79 [00:03<00:00, 26.88it/s]
, 24.29it/s]
 70%|   | 55/79 [00:02<00:00, 24.86it/s]
 73%|  | 58/79 [00:03<00:00, 24.99it/s]
 77%|  | 61/79 [00:03<00:00, 24.90it/s]
 81%|  | 64/79 [00:03<00:00, 25.15it/s]
 85%| | 67/79 [00:03<00:00, 25.24it/s]
 89%| | 70/79 [00:03<00:00, 25.31it/s]
 92%|| 73/79 [00:03<00:00, 25.79it/s]
 96%|| 76/79 [00:03<00:00, 26.45it/s]
100%|| 79/79 [00:03<00:00, 19.78it/s]
, 24.07it/s]
 70%|   | 55/79 [00:02<00:00, 24.59it/s]
 73%|  | 58/79 [00:03<00:00, 24.77it/s]
 77%|  | 61/79 [00:03<00:00, 24.93it/s]
 81%|  | 64/79 [00:03<00:00, 25.01it/s]
 85%| | 67/79 [00:03<00:00, 25.20it/s]
 89%| | 70/79 [00:03<00:00, 24.93it/s]
 92%|| 73/79 [00:03<00:00, 25.50it/s]
 96%|| 76/79 [00:03<00:00, 26.07it/s]
100%|| 79/79 [00:03<00:00, 27.09it/s]
, 24.24it/s]
 70%|   | 55/79 [00:02<00:00, 24.43it/s]
 73%|  | 58/79 [00:03<00:00, 24.83it/s]
 77%|  | 61/79 [00:03<00:00, 24.90it/s]
 81%|  | 64/79 [00:03<00:00, 24.98it/s]
 85%| | 67/79 [00:03<00:00, 24.97it/s]
 89%| | 70/79 [00:03<00:00, 25.05it/s]
 92%|| 73/79 [00:03<00:00, 25.42it/s]
 96%|| 76/79 [00:03<00:00, 26.14it/s]
100%|| 79/79 [00:03<00:00, 26.99it/s]
, 24.38it/s]
 70%|   | 55/79 [00:03<00:00, 24.62it/s]
 73%|  | 58/79 [00:03<00:00, 24.75it/s]
 77%|  | 61/79 [00:03<00:00, 25.22it/s]
 81%|  | 64/79 [00:03<00:00, 25.37it/s]
 85%| | 67/79 [00:03<00:00, 25.51it/s]
 89%| | 70/79 [00:03<00:00, 25.55it/s]
 92%|| 73/79 [00:03<00:00, 25.95it/s]
 96%|| 76/79 [00:03<00:00, 26.59it/s]
100%|| 79/79 [00:03<00:00, 27.47it/s]
42it/s]
 68%|   | 54/79 [00:02<00:01, 24.68it/s]
 72%|  | 57/79 [00:03<00:00, 24.97it/s]
 76%|  | 60/79 [00:03<00:00, 25.12it/s]
 80%|  | 63/79 [00:03<00:00, 25.33it/s]
 84%| | 66/79 [00:03<00:00, 25.16it/s]
 87%| | 69/79 [00:03<00:00, 25.36it/s]
 91%| | 72/79 [00:03<00:00, 25.22it/s]
 95%|| 75/79 [00:03<00:00, 26.17it/s]
 99%|| 78/79 [00:03<00:00, 26.36it/s]
100%|| 79/79 [00:04<00:00, 19.60it/s]
, 24.29it/s]
 70%|   | 55/79 [00:03<00:00, 24.52it/s]
 73%|  | 58/79 [00:03<00:00, 24.74it/s]
 77%|  | 61/79 [00:03<00:00, 24.71it/s]
 81%|  | 64/79 [00:03<00:00, 25.05it/s]
 85%| | 67/79 [00:03<00:00, 25.39it/s]
 89%| | 70/79 [00:03<00:00, 25.19it/s]
 92%|| 73/79 [00:03<00:00, 25.75it/s]
 96%|| 76/79 [00:03<00:00, 26.39it/s]
100%|| 79/79 [00:03<00:00, 27.17it/s]
78it/s]
 68%|   | 54/79 [00:02<00:01, 24.18it/s]
 72%|  | 57/79 [00:03<00:00, 24.25it/s]
 76%|  | 60/79 [00:03<00:00, 24.25it/s]
 80%|  | 63/79 [00:03<00:00, 24.54it/s]
 84%| | 66/79 [00:03<00:00, 24.69it/s]
 87%| | 69/79 [00:03<00:00, 24.82it/s]
 91%| | 72/79 [00:03<00:00, 24.86it/s]
 95%|| 75/79 [00:03<00:00, 25.81it/s]
 99%|| 78/79 [00:03<00:00, 26.50it/s]
100%|| 79/79 [00:04<00:00, 19.57it/s]
, 24.48it/s]
 70%|   | 55/79 [00:03<00:00, 24.80it/s]
 73%|  | 58/79 [00:03<00:00, 24.77it/s]
 77%|  | 61/79 [00:03<00:00, 24.94it/s]
 81%|  | 64/79 [00:03<00:00, 25.15it/s]
 85%| | 67/79 [00:03<00:00, 25.27it/s]
 89%| | 70/79 [00:03<00:00, 25.18it/s]
 92%|| 73/79 [00:03<00:00, 25.59it/s]
 96%|| 76/79 [00:03<00:00, 26.21it/s]
100%|| 79/79 [00:03<00:00, 27.20it/s]
, 23.69it/s]
 70%|   | 55/79 [00:03<00:01, 23.99it/s]
 73%|  | 58/79 [00:03<00:00, 24.30it/s]
 77%|  | 61/79 [00:03<00:00, 24.83it/s]
 81%|  | 64/79 [00:03<00:00, 24.99it/s]
 85%| | 67/79 [00:03<00:00, 25.47it/s]
 89%| | 70/79 [00:03<00:00, 25.78it/s]
 92%|| 73/79 [00:03<00:00, 26.06it/s]
 96%|| 76/79 [00:03<00:00, 26.73it/s]
100%|| 79/79 [00:03<00:00, 27.56it/s]
, 24.34it/s]
 70%|   | 55/79 [00:03<00:00, 24.63it/s]
 73%|  | 58/79 [00:03<00:00, 24.95it/s]
 77%|  | 61/79 [00:03<00:00, 25.10it/s]
 81%|  | 64/79 [00:03<00:00, 24.92it/s]
 85%| | 67/79 [00:03<00:00, 25.25it/s]
 89%| | 70/79 [00:03<00:00, 25.22it/s]
 92%|| 73/79 [00:03<00:00, 25.74it/s]
 96%|| 76/79 [00:03<00:00, 26.26it/s]
100%|| 79/79 [00:03<00:00, 27.26it/s]
, 23.86it/s]
 70%|   | 55/79 [00:03<00:00, 24.48it/s]
 73%|  | 58/79 [00:03<00:00, 24.74it/s]
 77%|  | 61/79 [00:03<00:00, 24.94it/s]
 81%|  | 64/79 [00:03<00:00, 25.21it/s]
 85%| | 67/79 [00:03<00:00, 25.39it/s]
 89%| | 70/79 [00:03<00:00, 25.43it/s]
 92%|| 73/79 [00:03<00:00, 25.58it/s]
 96%|| 76/79 [00:03<00:00, 26.34it/s]
100%|| 79/79 [00:03<00:00, 26.91it/s]
, 23.98it/s]
 70%|   | 55/79 [00:03<00:00, 24.25it/s]
 73%|  | 58/79 [00:03<00:00, 24.43it/s]
 77%|  | 61/79 [00:03<00:00, 24.44it/s]
 81%|  | 64/79 [00:03<00:00, 24.60it/s]
 85%| | 67/79 [00:03<00:00, 24.80it/s]
 89%| | 70/79 [00:03<00:00, 24.85it/s]
 92%|| 73/79 [00:03<00:00, 25.29it/s]
 96%|| 76/79 [00:03<00:00, 25.93it/s]
100%|| 79/79 [00:03<00:00, 26.74it/s]
20it/s]
 68%|   | 54/79 [00:03<00:01, 23.61it/s]
 72%|  | 57/79 [00:03<00:00, 24.10it/s]
 76%|  | 60/79 [00:03<00:00, 24.08it/s]
 80%|  | 63/79 [00:03<00:00, 24.44it/s]
 84%| | 66/79 [00:03<00:00, 24.58it/s]
 87%| | 69/79 [00:03<00:00, 25.03it/s]
 91%| | 72/79 [00:03<00:00, 24.84it/s]
 95%|| 75/79 [00:03<00:00, 25.85it/s]
 99%|| 78/79 [00:03<00:00, 26.63it/s]
100%|| 79/79 [00:04<00:00, 19.29it/s]
, 23.54it/s]
 70%|   | 55/79 [00:03<00:00, 24.06it/s]
 73%|  | 58/79 [00:03<00:00, 24.33it/s]
 77%|  | 61/79 [00:03<00:00, 24.32it/s]
 81%|  | 64/79 [00:03<00:00, 24.45it/s]
 85%| | 67/79 [00:03<00:00, 24.71it/s]
 89%| | 70/79 [00:03<00:00, 24.89it/s]
 92%|| 73/79 [00:03<00:00, 25.13it/s]
 96%|| 76/79 [00:03<00:00, 25.78it/s]
100%|| 79/79 [00:04<00:00, 26.62it/s]
, 23.66it/s]
 70%|   | 55/79 [00:03<00:00, 24.30it/s]
 73%|  | 58/79 [00:03<00:00, 24.50it/s]
 77%|  | 61/79 [00:03<00:00, 24.66it/s]
 81%|  | 64/79 [00:03<00:00, 24.87it/s]
 85%| | 67/79 [00:03<00:00, 25.08it/s]
 89%| | 70/79 [00:03<00:00, 24.72it/s]
 92%|| 73/79 [00:03<00:00, 25.19it/s]
 96%|| 76/79 [00:03<00:00, 25.86it/s]
100%|| 79/79 [00:04<00:00, 26.62it/s]
, 22.82it/s]
 70%|   | 55/79 [00:03<00:01, 23.30it/s]
 73%|  | 58/79 [00:03<00:00, 23.85it/s]
 77%|  | 61/79 [00:03<00:00, 23.92it/s]
 81%|  | 64/79 [00:03<00:00, 23.81it/s]
 85%| | 67/79 [00:03<00:00, 24.02it/s]
 89%| | 70/79 [00:03<00:00, 24.22it/s]
 92%|| 73/79 [00:03<00:00, 24.61it/s]
 96%|| 76/79 [00:03<00:00, 25.48it/s]
100%|| 79/79 [00:04<00:00, 26.41it/s]
47it/s]
 68%|   | 54/79 [00:03<00:01, 23.82it/s]
 72%|  | 57/79 [00:03<00:00, 24.22it/s]
 76%|  | 60/79 [00:03<00:00, 24.62it/s]
 80%|  | 63/79 [00:03<00:00, 24.73it/s]
 84%| | 66/79 [00:03<00:00, 24.79it/s]
 87%| | 69/79 [00:03<00:00, 25.03it/s]
 91%| | 72/79 [00:03<00:00, 24.91it/s]
 95%|| 75/79 [00:03<00:00, 25.59it/s]
 99%|| 78/79 [00:04<00:00, 26.05it/s]
100%|| 79/79 [00:04<00:00, 19.02it/s]
56it/s]
 68%|   | 54/79 [00:03<00:01, 23.74it/s]
 72%|  | 57/79 [00:03<00:00, 24.08it/s]
 76%|  | 60/79 [00:03<00:00, 24.28it/s]
 80%|  | 63/79 [00:03<00:00, 24.32it/s]
 84%| | 66/79 [00:03<00:00, 24.42it/s]
 87%| | 69/79 [00:03<00:00, 24.50it/s]
 91%| | 72/79 [00:03<00:00, 24.91it/s]
 95%|| 75/79 [00:03<00:00, 25.64it/s]
 99%|| 78/79 [00:04<00:00, 26.14it/s]
100%|| 79/79 [00:04<00:00, 18.98it/s]
, 23.07it/s]
 70%|   | 55/79 [00:03<00:01, 23.79it/s]
 73%|  | 58/79 [00:03<00:00, 24.11it/s]
 77%|  | 61/79 [00:03<00:00, 24.40it/s]
 81%|  | 64/79 [00:03<00:00, 24.59it/s]
 85%| | 67/79 [00:03<00:00, 24.71it/s]
 89%| | 70/79 [00:03<00:00, 24.54it/s]
 92%|| 73/79 [00:03<00:00, 24.80it/s]
 96%|| 76/79 [00:03<00:00, 25.46it/s]
100%|| 79/79 [00:04<00:00, 26.27it/s]
2020-06-23 17:39:33,259 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.198277 (0.0268689697265625 s / img per device, on 32 devices)
2020-06-23 17:39:33,277 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:39:33,277 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:39:33,296 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592959179935, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 12, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592959179935, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 12}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:39:41,374 maskrcnn_benchmark.trainer INFO: eta: 1:02:19  iter: 10100  loss: 0.5075 (0.7441)  loss_classifier: 0.1904 (0.2732)  loss_box_reg: 0.0740 (0.1200)  loss_mask: 0.2525 (0.2945)  loss_objectness: 0.0179 (0.0363)  loss_rpn_box_reg: 0.0072 (0.0201)  time: 0.1092 (0.1251)  data: 0.0016 (0.0178)  lr: 0.016000  max mem: 5155
2020-06-23 17:39:43,544 maskrcnn_benchmark.trainer INFO: eta: 1:02:15  iter: 10120  loss: 0.5982 (0.7437)  loss_classifier: 0.1933 (0.2731)  loss_box_reg: 0.0877 (0.1199)  loss_mask: 0.2392 (0.2944)  loss_objectness: 0.0157 (0.0362)  loss_rpn_box_reg: 0.0068 (0.0201)  time: 0.1085 (0.1250)  data: 0.0015 (0.0177)  lr: 0.016000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.56s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 17:39:45,707 maskrcnn_benchmark.trainer INFO: eta: 1:02:12  iter: 10140  loss: 0.6053 (0.7435)  loss_classifier: 0.2101 (0.2729)  loss_box_reg: 0.1099 (0.1199)  loss_mask: 0.2346 (0.2943)  loss_objectness: 0.0164 (0.0362)  loss_rpn_box_reg: 0.0080 (0.0201)  time: 0.1077 (0.1250)  data: 0.0015 (0.0177)  lr: 0.016000  max mem: 5155
DONE (t=1.40s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36701
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.58227
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.39661
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21898
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.39487
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.47470
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30646
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.48321
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.50743
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.32469
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.54071
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.63203
2020-06-23 17:39:47,877 maskrcnn_benchmark.trainer INFO: eta: 1:02:08  iter: 10160  loss: 0.5264 (0.7430)  loss_classifier: 0.1523 (0.2727)  loss_box_reg: 0.0851 (0.1199)  loss_mask: 0.2233 (0.2942)  loss_objectness: 0.0108 (0.0362)  loss_rpn_box_reg: 0.0095 (0.0201)  time: 0.1079 (0.1250)  data: 0.0014 (0.0177)  lr: 0.016000  max mem: 5155
2020-06-23 17:39:50,047 maskrcnn_benchmark.trainer INFO: eta: 1:02:05  iter: 10180  loss: 0.5229 (0.7426)  loss_classifier: 0.1693 (0.2725)  loss_box_reg: 0.0877 (0.1198)  loss_mask: 0.2303 (0.2941)  loss_objectness: 0.0118 (0.0361)  loss_rpn_box_reg: 0.0052 (0.0201)  time: 0.1087 (0.1249)  data: 0.0014 (0.0176)  lr: 0.016000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:39:52,247 maskrcnn_benchmark.trainer INFO: eta: 1:02:01  iter: 10200  loss: 0.4883 (0.7421)  loss_classifier: 0.1388 (0.2723)  loss_box_reg: 0.0786 (0.1197)  loss_mask: 0.2369 (0.2940)  loss_objectness: 0.0139 (0.0361)  loss_rpn_box_reg: 0.0074 (0.0200)  time: 0.1099 (0.1249)  data: 0.0015 (0.0176)  lr: 0.016000  max mem: 5155
DONE (t=1.46s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:39:54,429 maskrcnn_benchmark.trainer INFO: eta: 1:01:58  iter: 10220  loss: 0.5088 (0.7418)  loss_classifier: 0.1732 (0.2721)  loss_box_reg: 0.0937 (0.1197)  loss_mask: 0.2344 (0.2939)  loss_objectness: 0.0151 (0.0361)  loss_rpn_box_reg: 0.0057 (0.0200)  time: 0.1092 (0.1249)  data: 0.0015 (0.0176)  lr: 0.016000  max mem: 5155
DONE (t=2.29s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.33604
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.55055
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.35606
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15669
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36028
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49446
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.28954
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.44623
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.46667
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27183
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50203
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.61571
2020-06-23 17:39:55,838 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3670119225654666, segm mAP: 0.3360383559085246
:::MLLOG {"namespace": "", "time_ms": 1592959195838, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.3670119225654666, "SEGM": 0.3360383559085246}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1592959195839, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 11}}
2020-06-23 17:39:56,699 maskrcnn_benchmark.trainer INFO: eta: 1:01:55  iter: 10240  loss: 0.6392 (0.7416)  loss_classifier: 0.2239 (0.2720)  loss_box_reg: 0.1143 (0.1197)  loss_mask: 0.2475 (0.2938)  loss_objectness: 0.0186 (0.0361)  loss_rpn_box_reg: 0.0097 (0.0201)  time: 0.1076 (0.1248)  data: 0.0016 (0.0176)  lr: 0.016000  max mem: 5155
2020-06-23 17:39:58,872 maskrcnn_benchmark.trainer INFO: eta: 1:01:51  iter: 10260  loss: 0.5585 (0.7414)  loss_classifier: 0.2043 (0.2719)  loss_box_reg: 0.1024 (0.1196)  loss_mask: 0.2550 (0.2937)  loss_objectness: 0.0186 (0.0360)  loss_rpn_box_reg: 0.0107 (0.0201)  time: 0.1079 (0.1248)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:01,053 maskrcnn_benchmark.trainer INFO: eta: 1:01:48  iter: 10280  loss: 0.5727 (0.7410)  loss_classifier: 0.1643 (0.2717)  loss_box_reg: 0.0861 (0.1196)  loss_mask: 0.2533 (0.2936)  loss_objectness: 0.0160 (0.0360)  loss_rpn_box_reg: 0.0066 (0.0200)  time: 0.1087 (0.1248)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:03,248 maskrcnn_benchmark.trainer INFO: eta: 1:01:45  iter: 10300  loss: 0.5620 (0.7407)  loss_classifier: 0.2193 (0.2716)  loss_box_reg: 0.0772 (0.1195)  loss_mask: 0.2518 (0.2935)  loss_objectness: 0.0221 (0.0360)  loss_rpn_box_reg: 0.0076 (0.0200)  time: 0.1085 (0.1248)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:05,400 maskrcnn_benchmark.trainer INFO: eta: 1:01:41  iter: 10320  loss: 0.4667 (0.7402)  loss_classifier: 0.1503 (0.2714)  loss_box_reg: 0.0719 (0.1194)  loss_mask: 0.2163 (0.2934)  loss_objectness: 0.0147 (0.0360)  loss_rpn_box_reg: 0.0080 (0.0200)  time: 0.1071 (0.1247)  data: 0.0013 (0.0174)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:07,574 maskrcnn_benchmark.trainer INFO: eta: 1:01:38  iter: 10340  loss: 0.5500 (0.7399)  loss_classifier: 0.1819 (0.2712)  loss_box_reg: 0.0882 (0.1194)  loss_mask: 0.2391 (0.2933)  loss_objectness: 0.0101 (0.0359)  loss_rpn_box_reg: 0.0073 (0.0200)  time: 0.1079 (0.1247)  data: 0.0013 (0.0174)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:09,766 maskrcnn_benchmark.trainer INFO: eta: 1:01:34  iter: 10360  loss: 0.5169 (0.7394)  loss_classifier: 0.1685 (0.2710)  loss_box_reg: 0.0803 (0.1193)  loss_mask: 0.2308 (0.2932)  loss_objectness: 0.0108 (0.0359)  loss_rpn_box_reg: 0.0087 (0.0200)  time: 0.1095 (0.1247)  data: 0.0013 (0.0174)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:11,919 maskrcnn_benchmark.trainer INFO: eta: 1:01:31  iter: 10380  loss: 0.5984 (0.7392)  loss_classifier: 0.1840 (0.2709)  loss_box_reg: 0.0843 (0.1193)  loss_mask: 0.2452 (0.2931)  loss_objectness: 0.0116 (0.0359)  loss_rpn_box_reg: 0.0109 (0.0200)  time: 0.1075 (0.1246)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:14,102 maskrcnn_benchmark.trainer INFO: eta: 1:01:28  iter: 10400  loss: 0.5065 (0.7387)  loss_classifier: 0.1516 (0.2707)  loss_box_reg: 0.0817 (0.1192)  loss_mask: 0.2348 (0.2930)  loss_objectness: 0.0166 (0.0358)  loss_rpn_box_reg: 0.0066 (0.0200)  time: 0.1088 (0.1246)  data: 0.0013 (0.0173)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:16,294 maskrcnn_benchmark.trainer INFO: eta: 1:01:24  iter: 10420  loss: 0.5067 (0.7383)  loss_classifier: 0.1846 (0.2705)  loss_box_reg: 0.0885 (0.1192)  loss_mask: 0.2169 (0.2929)  loss_objectness: 0.0070 (0.0358)  loss_rpn_box_reg: 0.0055 (0.0200)  time: 0.1085 (0.1246)  data: 0.0013 (0.0173)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:18,448 maskrcnn_benchmark.trainer INFO: eta: 1:01:21  iter: 10440  loss: 0.4914 (0.7378)  loss_classifier: 0.1345 (0.2703)  loss_box_reg: 0.0697 (0.1191)  loss_mask: 0.2195 (0.2927)  loss_objectness: 0.0084 (0.0358)  loss_rpn_box_reg: 0.0053 (0.0200)  time: 0.1075 (0.1245)  data: 0.0013 (0.0172)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:20,641 maskrcnn_benchmark.trainer INFO: eta: 1:01:17  iter: 10460  loss: 0.5434 (0.7375)  loss_classifier: 0.1754 (0.2701)  loss_box_reg: 0.0867 (0.1190)  loss_mask: 0.2387 (0.2927)  loss_objectness: 0.0099 (0.0357)  loss_rpn_box_reg: 0.0063 (0.0199)  time: 0.1088 (0.1245)  data: 0.0013 (0.0172)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:22,806 maskrcnn_benchmark.trainer INFO: eta: 1:01:14  iter: 10480  loss: 0.5746 (0.7372)  loss_classifier: 0.1709 (0.2700)  loss_box_reg: 0.1019 (0.1190)  loss_mask: 0.2619 (0.2926)  loss_objectness: 0.0118 (0.0357)  loss_rpn_box_reg: 0.0059 (0.0199)  time: 0.1080 (0.1245)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:24,972 maskrcnn_benchmark.trainer INFO: eta: 1:01:11  iter: 10500  loss: 0.6543 (0.7370)  loss_classifier: 0.2098 (0.2699)  loss_box_reg: 0.1157 (0.1190)  loss_mask: 0.2363 (0.2925)  loss_objectness: 0.0177 (0.0357)  loss_rpn_box_reg: 0.0148 (0.0199)  time: 0.1079 (0.1244)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:27,144 maskrcnn_benchmark.trainer INFO: eta: 1:01:07  iter: 10520  loss: 0.5190 (0.7365)  loss_classifier: 0.1756 (0.2697)  loss_box_reg: 0.0756 (0.1189)  loss_mask: 0.2339 (0.2924)  loss_objectness: 0.0143 (0.0357)  loss_rpn_box_reg: 0.0059 (0.0199)  time: 0.1088 (0.1244)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:29,331 maskrcnn_benchmark.trainer INFO: eta: 1:01:04  iter: 10540  loss: 0.5282 (0.7362)  loss_classifier: 0.2043 (0.2696)  loss_box_reg: 0.0797 (0.1188)  loss_mask: 0.2352 (0.2923)  loss_objectness: 0.0112 (0.0356)  loss_rpn_box_reg: 0.0098 (0.0199)  time: 0.1095 (0.1244)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:31,516 maskrcnn_benchmark.trainer INFO: eta: 1:01:01  iter: 10560  loss: 0.5473 (0.7359)  loss_classifier: 0.1674 (0.2694)  loss_box_reg: 0.0817 (0.1188)  loss_mask: 0.2358 (0.2922)  loss_objectness: 0.0155 (0.0356)  loss_rpn_box_reg: 0.0098 (0.0199)  time: 0.1086 (0.1244)  data: 0.0013 (0.0171)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:33,694 maskrcnn_benchmark.trainer INFO: eta: 1:00:57  iter: 10580  loss: 0.4790 (0.7355)  loss_classifier: 0.1584 (0.2692)  loss_box_reg: 0.0732 (0.1187)  loss_mask: 0.2352 (0.2921)  loss_objectness: 0.0102 (0.0356)  loss_rpn_box_reg: 0.0063 (0.0199)  time: 0.1091 (0.1243)  data: 0.0013 (0.0170)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:35,863 maskrcnn_benchmark.trainer INFO: eta: 1:00:54  iter: 10600  loss: 0.5471 (0.7352)  loss_classifier: 0.1969 (0.2691)  loss_box_reg: 0.0949 (0.1187)  loss_mask: 0.2361 (0.2920)  loss_objectness: 0.0158 (0.0355)  loss_rpn_box_reg: 0.0068 (0.0199)  time: 0.1079 (0.1243)  data: 0.0014 (0.0170)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:38,034 maskrcnn_benchmark.trainer INFO: eta: 1:00:50  iter: 10620  loss: 0.4888 (0.7348)  loss_classifier: 0.1280 (0.2689)  loss_box_reg: 0.0534 (0.1186)  loss_mask: 0.2283 (0.2919)  loss_objectness: 0.0119 (0.0355)  loss_rpn_box_reg: 0.0089 (0.0199)  time: 0.1080 (0.1243)  data: 0.0014 (0.0170)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:40,206 maskrcnn_benchmark.trainer INFO: eta: 1:00:47  iter: 10640  loss: 0.5396 (0.7345)  loss_classifier: 0.1711 (0.2688)  loss_box_reg: 0.0928 (0.1186)  loss_mask: 0.2470 (0.2918)  loss_objectness: 0.0150 (0.0355)  loss_rpn_box_reg: 0.0050 (0.0199)  time: 0.1088 (0.1242)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:42,384 maskrcnn_benchmark.trainer INFO: eta: 1:00:44  iter: 10660  loss: 0.5304 (0.7343)  loss_classifier: 0.1790 (0.2687)  loss_box_reg: 0.0918 (0.1186)  loss_mask: 0.2400 (0.2917)  loss_objectness: 0.0180 (0.0355)  loss_rpn_box_reg: 0.0081 (0.0199)  time: 0.1087 (0.1242)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:44,554 maskrcnn_benchmark.trainer INFO: eta: 1:00:40  iter: 10680  loss: 0.5678 (0.7341)  loss_classifier: 0.1989 (0.2686)  loss_box_reg: 0.0853 (0.1185)  loss_mask: 0.2581 (0.2917)  loss_objectness: 0.0206 (0.0355)  loss_rpn_box_reg: 0.0079 (0.0199)  time: 0.1083 (0.1242)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:46,695 maskrcnn_benchmark.trainer INFO: eta: 1:00:37  iter: 10700  loss: 0.5922 (0.7339)  loss_classifier: 0.2066 (0.2684)  loss_box_reg: 0.1039 (0.1185)  loss_mask: 0.2519 (0.2916)  loss_objectness: 0.0147 (0.0354)  loss_rpn_box_reg: 0.0067 (0.0198)  time: 0.1069 (0.1241)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:48,860 maskrcnn_benchmark.trainer INFO: eta: 1:00:34  iter: 10720  loss: 0.4832 (0.7335)  loss_classifier: 0.1434 (0.2682)  loss_box_reg: 0.0863 (0.1185)  loss_mask: 0.2336 (0.2915)  loss_objectness: 0.0125 (0.0354)  loss_rpn_box_reg: 0.0095 (0.0198)  time: 0.1079 (0.1241)  data: 0.0013 (0.0168)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:51,017 maskrcnn_benchmark.trainer INFO: eta: 1:00:30  iter: 10740  loss: 0.5366 (0.7331)  loss_classifier: 0.1954 (0.2681)  loss_box_reg: 0.0797 (0.1184)  loss_mask: 0.2331 (0.2914)  loss_objectness: 0.0132 (0.0354)  loss_rpn_box_reg: 0.0076 (0.0198)  time: 0.1076 (0.1241)  data: 0.0014 (0.0168)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:53,176 maskrcnn_benchmark.trainer INFO: eta: 1:00:27  iter: 10760  loss: 0.5658 (0.7328)  loss_classifier: 0.2038 (0.2680)  loss_box_reg: 0.0925 (0.1184)  loss_mask: 0.2452 (0.2913)  loss_objectness: 0.0143 (0.0354)  loss_rpn_box_reg: 0.0105 (0.0198)  time: 0.1076 (0.1241)  data: 0.0013 (0.0168)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:55,356 maskrcnn_benchmark.trainer INFO: eta: 1:00:24  iter: 10780  loss: 0.5250 (0.7325)  loss_classifier: 0.1508 (0.2678)  loss_box_reg: 0.0838 (0.1183)  loss_mask: 0.2287 (0.2912)  loss_objectness: 0.0097 (0.0353)  loss_rpn_box_reg: 0.0076 (0.0198)  time: 0.1089 (0.1240)  data: 0.0014 (0.0167)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:57,520 maskrcnn_benchmark.trainer INFO: eta: 1:00:20  iter: 10800  loss: 0.5080 (0.7321)  loss_classifier: 0.1551 (0.2676)  loss_box_reg: 0.0831 (0.1183)  loss_mask: 0.2413 (0.2911)  loss_objectness: 0.0085 (0.0353)  loss_rpn_box_reg: 0.0037 (0.0198)  time: 0.1077 (0.1240)  data: 0.0013 (0.0167)  lr: 0.016000  max mem: 5155
2020-06-23 17:40:59,695 maskrcnn_benchmark.trainer INFO: eta: 1:00:17  iter: 10820  loss: 0.5959 (0.7318)  loss_classifier: 0.1912 (0.2675)  loss_box_reg: 0.0947 (0.1182)  loss_mask: 0.2591 (0.2911)  loss_objectness: 0.0132 (0.0352)  loss_rpn_box_reg: 0.0089 (0.0198)  time: 0.1083 (0.1240)  data: 0.0014 (0.0167)  lr: 0.016000  max mem: 5155
2020-06-23 17:41:01,875 maskrcnn_benchmark.trainer INFO: eta: 1:00:14  iter: 10840  loss: 0.4960 (0.7313)  loss_classifier: 0.1589 (0.2673)  loss_box_reg: 0.0786 (0.1181)  loss_mask: 0.2040 (0.2909)  loss_objectness: 0.0091 (0.0352)  loss_rpn_box_reg: 0.0049 (0.0198)  time: 0.1084 (0.1239)  data: 0.0013 (0.0167)  lr: 0.016000  max mem: 5155
2020-06-23 17:41:04,031 maskrcnn_benchmark.trainer INFO: eta: 1:00:10  iter: 10860  loss: 0.5549 (0.7310)  loss_classifier: 0.1762 (0.2671)  loss_box_reg: 0.0784 (0.1181)  loss_mask: 0.2492 (0.2909)  loss_objectness: 0.0153 (0.0352)  loss_rpn_box_reg: 0.0056 (0.0198)  time: 0.1073 (0.1239)  data: 0.0014 (0.0166)  lr: 0.016000  max mem: 5155
2020-06-23 17:41:06,194 maskrcnn_benchmark.trainer INFO: eta: 1:00:07  iter: 10880  loss: 0.5461 (0.7307)  loss_classifier: 0.1616 (0.2669)  loss_box_reg: 0.0813 (0.1180)  loss_mask: 0.2435 (0.2908)  loss_objectness: 0.0172 (0.0352)  loss_rpn_box_reg: 0.0081 (0.0198)  time: 0.1079 (0.1239)  data: 0.0013 (0.0166)  lr: 0.016000  max mem: 5155
2020-06-23 17:41:08,344 maskrcnn_benchmark.trainer INFO: eta: 1:00:04  iter: 10900  loss: 0.6117 (0.7305)  loss_classifier: 0.1821 (0.2668)  loss_box_reg: 0.0885 (0.1180)  loss_mask: 0.2644 (0.2907)  loss_objectness: 0.0267 (0.0351)  loss_rpn_box_reg: 0.0127 (0.0198)  time: 0.1077 (0.1239)  data: 0.0014 (0.0166)  lr: 0.016000  max mem: 5155
2020-06-23 17:41:10,496 maskrcnn_benchmark.trainer INFO: eta: 1:00:00  iter: 10920  loss: 0.5981 (0.7302)  loss_classifier: 0.1802 (0.2667)  loss_box_reg: 0.0989 (0.1180)  loss_mask: 0.2618 (0.2907)  loss_objectness: 0.0110 (0.0351)  loss_rpn_box_reg: 0.0089 (0.0198)  time: 0.1070 (0.1238)  data: 0.0014 (0.0165)  lr: 0.016000  max mem: 5155
2020-06-23 17:41:12,673 maskrcnn_benchmark.trainer INFO: eta: 0:59:57  iter: 10940  loss: 0.5427 (0.7299)  loss_classifier: 0.1987 (0.2665)  loss_box_reg: 0.0895 (0.1179)  loss_mask: 0.2461 (0.2906)  loss_objectness: 0.0107 (0.0351)  loss_rpn_box_reg: 0.0070 (0.0197)  time: 0.1082 (0.1238)  data: 0.0014 (0.0165)  lr: 0.016000  max mem: 5155
2020-06-23 17:41:14,821 maskrcnn_benchmark.trainer INFO: eta: 0:59:54  iter: 10960  loss: 0.5128 (0.7295)  loss_classifier: 0.1621 (0.2664)  loss_box_reg: 0.0768 (0.1179)  loss_mask: 0.2336 (0.2905)  loss_objectness: 0.0084 (0.0351)  loss_rpn_box_reg: 0.0042 (0.0197)  time: 0.1069 (0.1238)  data: 0.0013 (0.0165)  lr: 0.016000  max mem: 5155
2020-06-23 17:41:16,983 maskrcnn_benchmark.trainer INFO: eta: 0:59:50  iter: 10980  loss: 0.4668 (0.7291)  loss_classifier: 0.1209 (0.2662)  loss_box_reg: 0.0700 (0.1178)  loss_mask: 0.2326 (0.2904)  loss_objectness: 0.0118 (0.0350)  loss_rpn_box_reg: 0.0062 (0.0197)  time: 0.1075 (0.1237)  data: 0.0013 (0.0165)  lr: 0.016000  max mem: 5155
2020-06-23 17:41:19,152 maskrcnn_benchmark.trainer INFO: eta: 0:59:47  iter: 11000  loss: 0.5234 (0.7288)  loss_classifier: 0.1549 (0.2660)  loss_box_reg: 0.0707 (0.1177)  loss_mask: 0.2423 (0.2903)  loss_objectness: 0.0144 (0.0350)  loss_rpn_box_reg: 0.0069 (0.0197)  time: 0.1081 (0.1237)  data: 0.0014 (0.0164)  lr: 0.016000  max mem: 5155
:::MLLOG {"namespace": "", "time_ms": 1592959279580, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 12}}
:::MLLOG {"namespace": "", "time_ms": 1592959279580, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 12}}
:::MLLOG {"namespace": "", "time_ms": 1592959279580, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 12}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-06-23 17:41:19,814 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.29s)
creating index...
index created!
index created!
index created!
2020-06-23 17:41:20,121 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:01,  1.27it/s]
  5%|         | 4/79 [00:00<00:42,  1.78it/s]
  9%|         | 7/79 [00:01<00:29,  2.47it/s]
 13%|        | 10/79 [00:01<00:20,  3.39it/s]
 16%|        | 13/79 [00:01<00:14,  4.58it/s]
 20%|        | 16/79 [00:01<00:10,  6.10it/s]
 24%|       | 19/79 [00:01<00:07,  7.91it/s]
 28%|       | 22/79 [00:01<00:05,  9.99it/s]
 32%|      | 25/79 [00:01<00:04, 12.22it/s]
 35%|      | 28/79 [00:01<00:03, 14.52it/s]
 39%|      | 31/79 [00:01<00:02, 16.75it/s]
 43%|     | 34/79 [00:02<00:02, 18.61it/s]
 47%|     | 37/79 [00:02<00:02, 20.14it/s]
 51%|     | 40/79 [00:02<00:01, 21.55it/s]
 54%|    | 43/79 [00:02<00:01, 22.50it/s]
 58%|    | 46/79 [00:02<00:01, 23.47it/s]
 62%|   | 49/79 [00:02<00:01, 24.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.70it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:14,  4.42it/s]
 20%|        | 16/79 [00:01<00:10,  5.89it/s]
 24%|       | 19/79 [00:01<00:07,  7.68it/s]
 28%|       | 22/79 [00:01<00:05,  9.77it/s]
 32%|      | 25/79 [00:01<00:04, 12.04it/s]
 35%|      | 28/79 [00:01<00:03, 14.41it/s]
 39%|      | 31/79 [00:01<00:02, 16.69it/s]
 43%|     | 34/79 [00:02<00:02, 18.77it/s]
 47%|     | 37/79 [00:02<00:02, 20.49it/s]
 51%|     | 40/79 [00:02<00:01, 21.99it/s]
 54%|    | 43/79 [00:02<00:01, 23.10it/s]
 58%|    | 46/79 [00:02<00:01, 23.85it/s]
 62%|   | 49/79 [00:02<00:01, 24.59it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.39it/s]
 28%|       | 22/79 [00:01<00:06,  9.45it/s]
 32%|      | 25/79 [00:01<00:04, 11.67it/s]
 35%|      | 28/79 [00:01<00:03, 14.00it/s]
 39%|      | 31/79 [00:02<00:02, 16.25it/s]
 43%|     | 34/79 [00:02<00:02, 18.35it/s]
 47%|     | 37/79 [00:02<00:02, 20.13it/s]
 51%|     | 40/79 [00:02<00:01, 21.58it/s]
 54%|    | 43/79 [00:02<00:01, 22.75it/s]
 58%|    | 46/79 [00:02<00:01, 23.60it/s]
 62%|   | 49/79 [00:02<00:01, 24.47it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:07,  7.50it/s]
 28%|       | 22/79 [00:01<00:05,  9.52it/s]
 32%|      | 25/79 [00:01<00:04, 11.74it/s]
 35%|      | 28/79 [00:01<00:03, 14.06it/s]
 39%|      | 31/79 [00:02<00:02, 16.30it/s]
 43%|     | 34/79 [00:02<00:02, 18.40it/s]
 47%|     | 37/79 [00:02<00:02, 20.05it/s]
 51%|     | 40/79 [00:02<00:01, 21.59it/s]
 54%|    | 43/79 [00:02<00:01, 22.82it/s]
 58%|    | 46/79 [00:02<00:01, 23.76it/s]
 62%|   | 49/79 [00:02<00:01, 24.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.70it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:05,  9.51it/s]
 32%|      | 25/79 [00:01<00:04, 11.75it/s]
 35%|      | 28/79 [00:01<00:03, 14.16it/s]
 39%|      | 31/79 [00:02<00:02, 16.51it/s]
 43%|     | 34/79 [00:02<00:02, 18.59it/s]
 47%|     | 37/79 [00:02<00:02, 20.52it/s]
 51%|     | 40/79 [00:02<00:01, 21.79it/s]
 54%|    | 43/79 [00:02<00:01, 23.01it/s]
 58%|    | 46/79 [00:02<00:01, 23.55it/s]
 62%|   | 49/79 [00:02<00:01, 24.31it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.23it/s]
 20%|        | 16/79 [00:01<00:11,  5.65it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.40it/s]
 32%|      | 25/79 [00:01<00:04, 11.58it/s]
 35%|      | 28/79 [00:01<00:03, 13.89it/s]
 39%|      | 31/79 [00:02<00:02, 16.15it/s]
 43%|     | 34/79 [00:02<00:02, 18.27it/s]
 47%|     | 37/79 [00:02<00:02, 20.07it/s]
 51%|     | 40/79 [00:02<00:01, 21.44it/s]
 54%|    | 43/79 [00:02<00:01, 22.62it/s]
 58%|    | 46/79 [00:02<00:01, 23.60it/s]
 62%|   | 49/79 [00:02<00:01, 24.02it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.50it/s]
 28%|       | 22/79 [00:01<00:05,  9.53it/s]
 32%|      | 25/79 [00:01<00:04, 11.80it/s]
 35%|      | 28/79 [00:01<00:03, 14.12it/s]
 39%|      | 31/79 [00:02<00:02, 16.43it/s]
 43%|     | 34/79 [00:02<00:02, 18.50it/s]
 47%|     | 37/79 [00:02<00:02, 20.28it/s]
 51%|     | 40/79 [00:02<00:01, 21.74it/s]
 54%|    | 43/79 [00:02<00:01, 22.88it/s]
 58%|    | 46/79 [00:02<00:01, 23.77it/s]
 62%|   | 49/79 [00:02<00:01, 24.35it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.10it/s]
 32%|      | 25/79 [00:01<00:04, 11.33it/s]
 35%|      | 28/79 [00:01<00:03, 13.65it/s]
 39%|      | 31/79 [00:02<00:03, 15.85it/s]
 43%|     | 34/79 [00:02<00:02, 17.98it/s]
 47%|     | 37/79 [00:02<00:02, 19.82it/s]
 51%|     | 40/79 [00:02<00:01, 21.17it/s]
 54%|    | 43/79 [00:02<00:01, 22.45it/s]
 58%|    | 46/79 [00:02<00:01, 23.35it/s]
 62%|   | 49/79 [00:02<00:01, 23.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.76it/s]
 24%|       | 19/79 [00:01<00:07,  7.51it/s]
 28%|       | 22/79 [00:01<00:06,  9.45it/s]
 32%|      | 25/79 [00:01<00:04, 11.71it/s]
 35%|      | 28/79 [00:01<00:03, 14.00it/s]
 39%|      | 31/79 [00:02<00:02, 16.17it/s]
 43%|     | 34/79 [00:02<00:02, 18.14it/s]
 47%|     | 37/79 [00:02<00:02, 19.99it/s]
 51%|     | 40/79 [00:02<00:01, 21.49it/s]
 54%|    | 43/79 [00:02<00:01, 22.40it/s]
 58%|    | 46/79 [00:02<00:01, 23.22it/s]
 62%|   | 49/79 [00:02<00:01, 24.13it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  3.00it/s]
 16%|        | 13/79 [00:01<00:16,  4.08it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.17it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.31it/s]
 35%|      | 28/79 [00:01<00:03, 13.52it/s]
 39%|      | 31/79 [00:02<00:03, 15.79it/s]
 43%|     | 34/79 [00:02<00:02, 17.85it/s]
 47%|     | 37/79 [00:02<00:02, 19.79it/s]
 51%|     | 40/79 [00:02<00:01, 21.37it/s]
 54%|    | 43/79 [00:02<00:01, 22.55it/s]
 58%|    | 46/79 [00:02<00:01, 23.66it/s]
 62%|   | 49/79 [00:02<00:01, 24.31it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.54it/s]
 28%|       | 22/79 [00:01<00:05,  9.54it/s]
 32%|      | 25/79 [00:01<00:04, 11.73it/s]
 35%|      | 28/79 [00:01<00:03, 14.04it/s]
 39%|      | 31/79 [00:02<00:02, 16.26it/s]
 43%|     | 34/79 [00:02<00:02, 18.17it/s]
 47%|     | 37/79 [00:02<00:02, 19.78it/s]
 51%|     | 40/79 [00:02<00:01, 21.16it/s]
 54%|    | 43/79 [00:02<00:01, 22.12it/s]
 58%|    | 46/79 [00:02<00:01, 22.80it/s]
 62%|   | 49/79 [00:02<00:01, 23.41it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.26it/s]
 32%|      | 25/79 [00:01<00:04, 11.45it/s]
 35%|      | 28/79 [00:01<00:03, 13.68it/s]
 39%|      | 31/79 [00:02<00:03, 15.93it/s]
 43%|     | 34/79 [00:02<00:02, 18.01it/s]
 47%|     | 37/79 [00:02<00:02, 19.66it/s]
 51%|     | 40/79 [00:02<00:01, 21.14it/s]
 54%|    | 43/79 [00:02<00:01, 22.20it/s]
 58%|    | 46/79 [00:02<00:01, 23.16it/s]
 62%|   | 49/79 [00:02<00:01, 23.63it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.17it/s]
 28%|       | 22/79 [00:01<00:06,  9.16it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.67it/s]
 39%|      | 31/79 [00:02<00:02, 16.04it/s]
 43%|     | 34/79 [00:02<00:02, 18.07it/s]
 47%|     | 37/79 [00:02<00:02, 19.88it/s]
 51%|     | 40/79 [00:02<00:01, 21.33it/s]
 54%|    | 43/79 [00:02<00:01, 22.44it/s]
 58%|    | 46/79 [00:02<00:01, 23.30it/s]
 62%|   | 49/79 [00:02<00:01, 24.01it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.03it/s]
 13%|        | 10/79 [00:01<00:24,  2.81it/s]
 16%|        | 13/79 [00:01<00:17,  3.84it/s]
 20%|        | 16/79 [00:01<00:12,  5.17it/s]
 24%|       | 19/79 [00:01<00:08,  6.81it/s]
 28%|       | 22/79 [00:01<00:06,  8.75it/s]
 32%|      | 25/79 [00:01<00:04, 10.97it/s]
 35%|      | 28/79 [00:01<00:03, 13.32it/s]
 39%|      | 31/79 [00:02<00:03, 15.65it/s]
 43%|     | 34/79 [00:02<00:02, 17.74it/s]
 47%|     | 37/79 [00:02<00:02, 19.68it/s]
 51%|     | 40/79 [00:02<00:01, 21.23it/s]
 54%|    | 43/79 [00:02<00:01, 22.44it/s]
 58%|    | 46/79 [00:02<00:01, 23.30it/s]
 62%|   | 49/79 [00:02<00:01, 24.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.42it/s]
 24%|       | 19/79 [00:01<00:08,  7.12it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.30it/s]
 35%|      | 28/79 [00:01<00:03, 13.59it/s]
 39%|      | 31/79 [00:02<00:03, 15.86it/s]
 43%|     | 34/79 [00:02<00:02, 17.91it/s]
 47%|     | 37/79 [00:02<00:02, 19.67it/s]
 51%|     | 40/79 [00:02<00:01, 21.29it/s]
 54%|    | 43/79 [00:02<00:01, 22.43it/s]
 58%|    | 46/79 [00:02<00:01, 23.05it/s]
 62%|   | 49/79 [00:02<00:01, 23.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.23it/s]
 24%|       | 19/79 [00:01<00:08,  6.90it/s]
 28%|       | 22/79 [00:01<00:06,  8.86it/s]
 32%|      | 25/79 [00:01<00:04, 11.07it/s]
 35%|      | 28/79 [00:01<00:03, 13.39it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.80it/s]
 47%|     | 37/79 [00:02<00:02, 19.81it/s]
 51%|     | 40/79 [00:02<00:01, 21.42it/s]
 54%|    | 43/79 [00:02<00:01, 22.78it/s]
 58%|    | 46/79 [00:02<00:01, 23.69it/s]
 62%|   | 49/79 [00:02<00:01, 24.48it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.50it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.17it/s]
 32%|      | 25/79 [00:01<00:04, 11.37it/s]
 35%|      | 28/79 [00:01<00:03, 13.69it/s]
 39%|      | 31/79 [00:02<00:03, 15.88it/s]
 43%|     | 34/79 [00:02<00:02, 18.10it/s]
 47%|     | 37/79 [00:02<00:02, 19.70it/s]
 51%|     | 40/79 [00:02<00:01, 21.17it/s]
 54%|    | 43/79 [00:02<00:01, 22.30it/s]
 58%|    | 46/79 [00:02<00:01, 23.21it/s]
 62%|   | 49/79 [00:02<00:01, 23.94it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.97it/s]
 16%|        | 13/79 [00:01<00:16,  4.04it/s]
 20%|        | 16/79 [00:01<00:11,  5.41it/s]
 24%|       | 19/79 [00:01<00:08,  7.08it/s]
 28%|       | 22/79 [00:01<00:06,  9.07it/s]
 32%|      | 25/79 [00:01<00:04, 11.27it/s]
 35%|      | 28/79 [00:01<00:03, 13.54it/s]
 39%|      | 31/79 [00:02<00:03, 15.77it/s]
 43%|     | 34/79 [00:02<00:02, 17.85it/s]
 47%|     | 37/79 [00:02<00:02, 19.88it/s]
 51%|     | 40/79 [00:02<00:01, 21.38it/s]
 54%|    | 43/79 [00:02<00:01, 22.84it/s]
 58%|    | 46/79 [00:02<00:01, 23.62it/s]
 62%|   | 49/79 [00:02<00:01, 24.25it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.55it/s]
  9%|         | 7/79 [00:01<00:33,  2.16it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.05it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.03it/s]
 32%|      | 25/79 [00:01<00:04, 11.22it/s]
 35%|      | 28/79 [00:01<00:03, 13.57it/s]
 39%|      | 31/79 [00:02<00:03, 15.90it/s]
 43%|     | 34/79 [00:02<00:02, 17.88it/s]
 47%|     | 37/79 [00:02<00:02, 19.70it/s]
 51%|     | 40/79 [00:02<00:01, 21.21it/s]
 54%|    | 43/79 [00:02<00:01, 22.42it/s]
 58%|    | 46/79 [00:02<00:01, 22.87it/s]
 62%|   | 49/79 [00:02<00:01, 23.53it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.17it/s]
 16%|        | 13/79 [00:01<00:15,  4.30it/s]
 20%|        | 16/79 [00:01<00:11,  5.69it/s]
 24%|       | 19/79 [00:01<00:08,  7.41it/s]
 28%|       | 22/79 [00:01<00:06,  9.40it/s]
 32%|      | 25/79 [00:01<00:04, 11.61it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:03, 15.93it/s]
 43%|     | 34/79 [00:02<00:02, 17.98it/s]
 47%|     | 37/79 [00:02<00:02, 19.81it/s]
 51%|     | 40/79 [00:02<00:01, 20.94it/s]
 54%|    | 43/79 [00:02<00:01, 22.02it/s]
 58%|    | 46/79 [00:02<00:01, 22.87it/s]
 62%|   | 49/79 [00:02<00:01, 23.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.92it/s]
 16%|        | 13/79 [00:01<00:16,  3.97it/s]
 20%|        | 16/79 [00:01<00:11,  5.32it/s]
 24%|       | 19/79 [00:01<00:08,  6.96it/s]
 28%|       | 22/79 [00:01<00:06,  8.91it/s]
 32%|      | 25/79 [00:01<00:04, 11.04it/s]
 35%|      | 28/79 [00:01<00:03, 13.35it/s]
 39%|      | 31/79 [00:02<00:03, 15.60it/s]
 43%|     | 34/79 [00:02<00:02, 17.67it/s]
 47%|     | 37/79 [00:02<00:02, 19.39it/s]
 51%|     | 40/79 [00:02<00:01, 20.89it/s]
 54%|    | 43/79 [00:02<00:01, 22.11it/s]
 58%|    | 46/79 [00:02<00:01, 23.02it/s]
 62%|   | 49/79 [00:02<00:01, 23.75it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.15it/s]
 13%|        | 10/79 [00:01<00:23,  2.96it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.37it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  9.00it/s]
 32%|      | 25/79 [00:01<00:04, 11.14it/s]
 35%|      | 28/79 [00:01<00:03, 13.41it/s]
 39%|      | 31/79 [00:02<00:03, 15.77it/s]
 43%|     | 34/79 [00:02<00:02, 17.75it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 20.81it/s]
 54%|    | 43/79 [00:02<00:01, 22.16it/s]
 58%|    | 46/79 [00:02<00:01, 22.97it/s]
 62%|   | 49/79 [00:02<00:01, 23.54it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.48it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:16,  3.89it/s]
 20%|        | 16/79 [00:01<00:12,  5.22it/s]
 24%|       | 19/79 [00:01<00:08,  6.84it/s]
 28%|       | 22/79 [00:01<00:06,  8.78it/s]
 32%|      | 25/79 [00:01<00:04, 10.95it/s]
 35%|      | 28/79 [00:02<00:03, 13.24it/s]
 39%|      | 31/79 [00:02<00:03, 15.46it/s]
 43%|     | 34/79 [00:02<00:02, 17.42it/s]
 47%|     | 37/79 [00:02<00:02, 19.28it/s]
 51%|     | 40/79 [00:02<00:01, 21.03it/s]
 54%|    | 43/79 [00:02<00:01, 22.03it/s]
 58%|    | 46/79 [00:02<00:01, 22.69it/s]
 62%|   | 49/79 [00:02<00:01, 23.67it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:33,  2.12it/s]
 13%|        | 10/79 [00:01<00:23,  2.93it/s]
 16%|        | 13/79 [00:01<00:16,  3.98it/s]
 20%|        | 16/79 [00:01<00:11,  5.33it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.92it/s]
 32%|      | 25/79 [00:01<00:04, 11.11it/s]
 35%|      | 28/79 [00:01<00:03, 13.35it/s]
 39%|      | 31/79 [00:02<00:03, 15.64it/s]
 43%|     | 34/79 [00:02<00:02, 17.69it/s]
 47%|     | 37/79 [00:02<00:02, 19.57it/s]
 51%|     | 40/79 [00:02<00:01, 20.88it/s]
 54%|    | 43/79 [00:02<00:01, 21.89it/s]
 58%|    | 46/79 [00:02<00:01, 22.89it/s]
 62%|   | 49/79 [00:02<00:01, 23.51it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:16,  1.02it/s]
  5%|         | 4/79 [00:01<00:52,  1.43it/s]
  9%|         | 7/79 [00:01<00:36,  2.00it/s]
 13%|        | 10/79 [00:01<00:24,  2.76it/s]
 16%|        | 13/79 [00:01<00:17,  3.77it/s]
 20%|        | 16/79 [00:01<00:12,  5.07it/s]
 24%|       | 19/79 [00:01<00:08,  6.67it/s]
 28%|       | 22/79 [00:01<00:06,  8.59it/s]
 32%|      | 25/79 [00:01<00:05, 10.74it/s]
 35%|      | 28/79 [00:02<00:03, 13.07it/s]
 39%|      | 31/79 [00:02<00:03, 15.33it/s]
 43%|     | 34/79 [00:02<00:02, 17.41it/s]
 47%|     | 37/79 [00:02<00:02, 19.25it/s]
 51%|     | 40/79 [00:02<00:01, 20.90it/s]
 54%|    | 43/79 [00:02<00:01, 22.20it/s]
 58%|    | 46/79 [00:02<00:01, 23.10it/s]
 62%|   | 49/79 [00:02<00:01, 24.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.10it/s]
 13%|        | 10/79 [00:01<00:23,  2.90it/s]
 16%|        | 13/79 [00:01<00:16,  3.95it/s]
 20%|        | 16/79 [00:01<00:11,  5.29it/s]
 24%|       | 19/79 [00:01<00:08,  6.94it/s]
 28%|       | 22/79 [00:01<00:06,  8.90it/s]
 32%|      | 25/79 [00:01<00:04, 11.02it/s]
 35%|      | 28/79 [00:02<00:03, 13.31it/s]
 39%|      | 31/79 [00:02<00:03, 15.48it/s]
 43%|     | 34/79 [00:02<00:02, 17.43it/s]
 47%|     | 37/79 [00:02<00:02, 19.39it/s]
 51%|     | 40/79 [00:02<00:01, 20.45it/s]
 54%|    | 43/79 [00:02<00:01, 21.79it/s]
 58%|    | 46/79 [00:02<00:01, 22.23it/s]
 62%|   | 49/79 [00:02<00:01, 23.03it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.52it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.96it/s]
 20%|        | 16/79 [00:01<00:11,  5.30it/s]
 24%|       | 19/79 [00:01<00:08,  6.93it/s]
 28%|       | 22/79 [00:01<00:06,  8.83it/s]
 32%|      | 25/79 [00:01<00:04, 10.97it/s]
 35%|      | 28/79 [00:02<00:03, 13.21it/s]
 39%|      | 31/79 [00:02<00:03, 15.27it/s]
 43%|     | 34/79 [00:02<00:02, 17.21it/s]
 47%|     | 37/79 [00:02<00:02, 19.02it/s]
 51%|     | 40/79 [00:02<00:01, 20.46it/s]
 54%|    | 43/79 [00:02<00:01, 21.58it/s]
 58%|    | 46/79 [00:02<00:01, 22.55it/s]
 62%|   | 49/79 [00:02<00:01, 23.29it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.05it/s]
  5%|         | 4/79 [00:01<00:50,  1.47it/s]
  9%|         | 7/79 [00:01<00:35,  2.05it/s]
 13%|        | 10/79 [00:01<00:24,  2.83it/s]
 16%|        | 13/79 [00:01<00:17,  3.85it/s]
 20%|        | 16/79 [00:01<00:12,  5.16it/s]
 24%|       | 19/79 [00:01<00:08,  6.77it/s]
 28%|       | 22/79 [00:01<00:06,  8.67it/s]
 32%|      | 25/79 [00:01<00:05, 10.77it/s]
 35%|      | 28/79 [00:02<00:03, 12.96it/s]
 39%|      | 31/79 [00:02<00:03, 15.20it/s]
 43%|     | 34/79 [00:02<00:02, 17.21it/s]
 47%|     | 37/79 [00:02<00:02, 18.89it/s]
 51%|     | 40/79 [00:02<00:01, 20.29it/s]
 54%|    | 43/79 [00:02<00:01, 21.58it/s]
 58%|    | 46/79 [00:02<00:01, 22.41it/s]
 62%|   | 49/79 [00:02<00:01, 23.27it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:15,  1.03it/s]
  5%|         | 4/79 [00:01<00:51,  1.45it/s]
  9%|         | 7/79 [00:01<00:35,  2.02it/s]
 13%|        | 10/79 [00:01<00:24,  2.79it/s]
 16%|        | 13/79 [00:01<00:17,  3.81it/s]
 20%|        | 16/79 [00:01<00:12,  5.10it/s]
 24%|       | 19/79 [00:01<00:08,  6.72it/s]
 28%|       | 22/79 [00:01<00:06,  8.61it/s]
 32%|      | 25/79 [00:01<00:05, 10.76it/s]
 35%|      | 28/79 [00:02<00:03, 12.96it/s]
 39%|      | 31/79 [00:02<00:03, 15.26it/s]
 43%|     | 34/79 [00:02<00:02, 17.38it/s]
 47%|     | 37/79 [00:02<00:02, 19.06it/s]
 51%|     | 40/79 [00:02<00:01, 20.59it/s]
 54%|    | 43/79 [00:02<00:01, 21.75it/s]
 58%|    | 46/79 [00:02<00:01, 22.57it/s]
 62%|   | 49/79 [00:02<00:01, 23.27it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  4%|         | 3/79 [00:01<00:50,  1.52it/s]
  8%|         | 6/79 [00:01<00:34,  2.11it/s]
 11%|        | 9/79 [00:01<00:24,  2.91it/s]
 15%|        | 12/79 [00:01<00:16,  3.95it/s]
 19%|        | 15/79 [00:01<00:12,  5.27it/s]
 23%|       | 18/79 [00:01<00:08,  6.91it/s]
 27%|       | 21/79 [00:01<00:06,  8.86it/s]
 30%|       | 24/79 [00:01<00:05, 10.86it/s]
 34%|      | 27/79 [00:02<00:03, 13.03it/s]
 38%|      | 30/79 [00:02<00:03, 15.02it/s]
 42%|     | 33/79 [00:02<00:02, 17.05it/s]
 46%|     | 36/79 [00:02<00:02, 18.42it/s]
 49%|     | 39/79 [00:02<00:02, 19.77it/s]
 53%|    | 42/79 [00:02<00:01, 20.69it/s]
 57%|    | 45/79 [00:02<00:01, 21.98it/s]
 61%|    | 48/79 [00:02<00:01, 22.53it/s]
 65%|   | 51/79 [00:03<00:01, 22.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:17,  3.88it/s]
 20%|        | 16/79 [00:01<00:12,  5.21it/s]
 24%|       | 19/79 [00:01<00:08,  6.82it/s]
 28%|       | 22/79 [00:01<00:06,  8.72it/s]
 32%|      | 25/79 [00:01<00:04, 10.85it/s]
 35%|      | 28/79 [00:02<00:03, 13.11it/s]
 39%|      | 31/79 [00:02<00:03, 15.13it/s]
 43%|     | 34/79 [00:02<00:02, 16.97it/s]
 47%|     | 37/79 [00:02<00:02, 18.54it/s]
 51%|     | 40/79 [00:02<00:01, 20.04it/s]
 54%|    | 43/79 [00:02<00:01, 21.08it/s]
 58%|    | 46/79 [00:02<00:01, 21.91it/s]
 62%|   | 49/79 [00:02<00:01, 22.42it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:14,  1.04it/s]
  5%|         | 4/79 [00:01<00:51,  1.46it/s]
  9%|         | 7/79 [00:01<00:35,  2.04it/s]
 13%|        | 10/79 [00:01<00:24,  2.82it/s]
 16%|        | 13/79 [00:01<00:17,  3.84it/s]
 20%|        | 16/79 [00:01<00:12,  5.15it/s]
 24%|       | 19/79 [00:01<00:08,  6.76it/s]
 28%|       | 22/79 [00:01<00:06,  8.66it/s]
 32%|      | 25/79 [00:01<00:05, 10.74it/s]
 35%|      | 28/79 [00:02<00:03, 12.95it/s]
 39%|      | 31/79 [00:02<00:03, 15.11it/s]
 43%|     | 34/79 [00:02<00:02, 17.20it/s]
 47%|     | 37/79 [00:02<00:02, 18.65it/s]
 51%|     | 40/79 [00:02<00:01, 20.02it/s]
 54%|    | 43/79 [00:02<00:01, 21.36it/s]
 58%|    | 46/79 [00:02<00:01, 21.88it/s]
 62%|   | 49/79 [00:02<00:01, 22.54it/s]
 66%|   | 52/79 [00:03<00:01, 24.42it/s]
 70%|   | 55/79 [00:02<00:00, 24.91it/s]
 73%|  | 58/79 [00:03<00:00, 25.03it/s]
 77%|  | 61/79 [00:03<00:00, 25.50it/s]
 81%|  | 64/79 [00:03<00:00, 25.65it/s]
 85%| | 67/79 [00:03<00:00, 25.72it/s]
 89%| | 70/79 [00:03<00:00, 25.96it/s]
 92%|| 73/79 [00:03<00:00, 26.37it/s]
 96%|| 76/79 [00:03<00:00, 26.97it/s]
100%|| 79/79 [00:03<00:00, 27.73it/s]
, 25.30it/s]
 70%|   | 55/79 [00:02<00:00, 25.69it/s]
 73%|  | 58/79 [00:02<00:00, 25.99it/s]
 77%|  | 61/79 [00:03<00:00, 26.11it/s]
 81%|  | 64/79 [00:03<00:00, 26.12it/s]
 85%| | 67/79 [00:03<00:00, 26.14it/s]
 89%| | 70/79 [00:03<00:00, 26.05it/s]
 92%|| 73/79 [00:03<00:00, 26.45it/s]
 96%|| 76/79 [00:03<00:00, 26.99it/s]
100%|| 79/79 [00:03<00:00, 27.72it/s]
, 24.94it/s]
 70%|   | 55/79 [00:02<00:00, 25.03it/s]
 73%|  | 58/79 [00:03<00:00, 25.54it/s]
 77%|  | 61/79 [00:03<00:00, 25.73it/s]
 81%|  | 64/79 [00:03<00:00, 25.97it/s]
 85%| | 67/79 [00:03<00:00, 26.03it/s]
 89%| | 70/79 [00:03<00:00, 26.30it/s]
 92%|| 73/79 [00:03<00:00, 26.36it/s]
 96%|| 76/79 [00:03<00:00, 26.95it/s]
100%|| 79/79 [00:03<00:00, 27.68it/s]
, 24.28it/s]
 70%|   | 55/79 [00:02<00:00, 24.34it/s]
 73%|  | 58/79 [00:03<00:00, 24.91it/s]
 77%|  | 61/79 [00:03<00:00, 25.22it/s]
 81%|  | 64/79 [00:03<00:00, 25.26it/s]
 85%| | 67/79 [00:03<00:00, 25.40it/s]
 89%| | 70/79 [00:03<00:00, 25.42it/s]
 92%|| 73/79 [00:03<00:00, 25.78it/s]
 96%|| 76/79 [00:03<00:00, 26.46it/s]
100%|| 79/79 [00:03<00:00, 20.23it/s]
, 24.70it/s]
 70%|   | 55/79 [00:02<00:00, 25.29it/s]
 73%|  | 58/79 [00:03<00:00, 25.39it/s]
 77%|  | 61/79 [00:03<00:00, 25.42it/s]
 81%|  | 64/79 [00:03<00:00, 25.58it/s]
 85%| | 67/79 [00:03<00:00, 25.65it/s]
 89%| | 70/79 [00:03<00:00, 25.80it/s]
 92%|| 73/79 [00:03<00:00, 26.20it/s]
 96%|| 76/79 [00:03<00:00, 26.76it/s]
100%|| 79/79 [00:03<00:00, 27.65it/s]
, 24.70it/s]
 70%|   | 55/79 [00:02<00:00, 24.93it/s]
 73%|  | 58/79 [00:03<00:00, 25.16it/s]
 77%|  | 61/79 [00:03<00:00, 25.29it/s]
 81%|  | 64/79 [00:03<00:00, 25.15it/s]
 85%| | 67/79 [00:03<00:00, 25.36it/s]
 89%| | 70/79 [00:03<00:00, 25.37it/s]
 92%|| 73/79 [00:03<00:00, 25.71it/s]
 96%|| 76/79 [00:03<00:00, 26.30it/s]
100%|| 79/79 [00:03<00:00, 27.05it/s]
, 24.60it/s]
 70%|   | 55/79 [00:02<00:00, 24.93it/s]
 73%|  | 58/79 [00:03<00:00, 25.20it/s]
 77%|  | 61/79 [00:03<00:00, 25.62it/s]
 81%|  | 64/79 [00:03<00:00, 25.52it/s]
 85%| | 67/79 [00:03<00:00, 25.51it/s]
 89%| | 70/79 [00:03<00:00, 25.59it/s]
 92%|| 73/79 [00:03<00:00, 25.96it/s]
 96%|| 76/79 [00:03<00:00, 26.56it/s]
100%|| 79/79 [00:03<00:00, 27.48it/s]
, 24.63it/s]
 70%|   | 55/79 [00:02<00:00, 24.85it/s]
 73%|  | 58/79 [00:03<00:00, 25.13it/s]
 77%|  | 61/79 [00:03<00:00, 25.46it/s]
 81%|  | 64/79 [00:03<00:00, 25.67it/s]
 85%| | 67/79 [00:03<00:00, 25.82it/s]
 89%| | 70/79 [00:03<00:00, 25.80it/s]
 92%|| 73/79 [00:03<00:00, 25.89it/s]
 96%|| 76/79 [00:03<00:00, 26.71it/s]
100%|| 79/79 [00:03<00:00, 26.70it/s]
, 24.08it/s]
 70%|   | 55/79 [00:03<00:00, 24.86it/s]
 73%|  | 58/79 [00:03<00:00, 25.03it/s]
 77%|  | 61/79 [00:03<00:00, 25.43it/s]
 81%|  | 64/79 [00:03<00:00, 25.71it/s]
 85%| | 67/79 [00:03<00:00, 25.75it/s]
 89%| | 70/79 [00:03<00:00, 25.40it/s]
 92%|| 73/79 [00:03<00:00, 25.99it/s]
 96%|| 76/79 [00:03<00:00, 26.59it/s]
100%|| 79/79 [00:03<00:00, 27.49it/s]
, 25.05it/s]
 70%|   | 55/79 [00:02<00:00, 25.73it/s]
 73%|  | 58/79 [00:03<00:00, 25.92it/s]
 77%|  | 61/79 [00:03<00:00, 25.88it/s]
 81%|  | 64/79 [00:03<00:00, 26.12it/s]
 85%| | 67/79 [00:03<00:00, 26.17it/s]
 89%| | 70/79 [00:03<00:00, 26.22it/s]
 92%|| 73/79 [00:03<00:00, 26.59it/s]
 96%|| 76/79 [00:03<00:00, 27.03it/s]
100%|| 79/79 [00:03<00:00, 27.84it/s]
, 24.73it/s]
 70%|   | 55/79 [00:02<00:00, 25.06it/s]
 73%|  | 58/79 [00:03<00:00, 25.24it/s]
 77%|  | 61/79 [00:03<00:00, 25.63it/s]
 81%|  | 64/79 [00:03<00:00, 25.67it/s]
 85%| | 67/79 [00:03<00:00, 25.50it/s]
 89%| | 70/79 [00:03<00:00, 25.22it/s]
 92%|| 73/79 [00:03<00:00, 25.79it/s]
 96%|| 76/79 [00:03<00:00, 26.20it/s]
100%|| 79/79 [00:03<00:00, 27.16it/s]
, 24.89it/s]
 70%|   | 55/79 [00:03<00:00, 25.21it/s]
 73%|  | 58/79 [00:03<00:00, 25.43it/s]
 77%|  | 61/79 [00:03<00:00, 25.94it/s]
 81%|  | 64/79 [00:03<00:00, 26.01it/s]
 85%| | 67/79 [00:03<00:00, 26.40it/s]
 89%| | 70/79 [00:03<00:00, 26.55it/s]
 92%|| 73/79 [00:03<00:00, 26.74it/s]
 96%|| 76/79 [00:03<00:00, 27.22it/s]
100%|| 79/79 [00:03<00:00, 27.94it/s]
, 24.47it/s]
 70%|   | 55/79 [00:03<00:00, 24.92it/s]
 73%|  | 58/79 [00:03<00:00, 25.46it/s]
 77%|  | 61/79 [00:03<00:00, 25.61it/s]
 81%|  | 64/79 [00:03<00:00, 25.40it/s]
 85%| | 67/79 [00:03<00:00, 25.81it/s]
 89%| | 70/79 [00:03<00:00, 25.58it/s]
 92%|| 73/79 [00:03<00:00, 26.00it/s]
 96%|| 76/79 [00:03<00:00, 26.58it/s]
100%|| 79/79 [00:03<00:00, 27.50it/s]
, 24.76it/s]
 70%|   | 55/79 [00:03<00:00, 25.03it/s]
 73%|  | 58/79 [00:03<00:00, 25.41it/s]
 77%|  | 61/79 [00:03<00:00, 25.55it/s]
 81%|  | 64/79 [00:03<00:00, 25.86it/s]
 85%| | 67/79 [00:03<00:00, 26.01it/s]
 89%| | 70/79 [00:03<00:00, 26.22it/s]
 92%|| 73/79 [00:03<00:00, 26.41it/s]
 97%|| 77/79 [00:03<00:00, 27.31it/s]
100%|| 79/79 [00:03<00:00, 19.78it/s]
, 23.97it/s]
 70%|   | 55/79 [00:02<00:00, 24.59it/s]
 73%|  | 58/79 [00:03<00:00, 24.50it/s]
 77%|  | 61/79 [00:03<00:00, 24.52it/s]
 81%|  | 64/79 [00:03<00:00, 24.86it/s]
 85%| | 67/79 [00:03<00:00, 25.15it/s]
 89%| | 70/79 [00:03<00:00, 25.41it/s]
 92%|| 73/79 [00:03<00:00, 25.71it/s]
 96%|| 76/79 [00:03<00:00, 26.57it/s]
100%|| 79/79 [00:03<00:00, 27.49it/s]
, 24.75it/s]
 70%|   | 55/79 [00:03<00:00, 25.09it/s]
 73%|  | 58/79 [00:03<00:00, 25.42it/s]
 77%|  | 61/79 [00:03<00:00, 25.47it/s]
 81%|  | 64/79 [00:03<00:00, 25.43it/s]
 85%| | 67/79 [00:03<00:00, 25.83it/s]
 89%| | 70/79 [00:03<00:00, 25.76it/s]
 92%|| 73/79 [00:03<00:00, 26.26it/s]
 96%|| 76/79 [00:03<00:00, 26.60it/s]
100%|| 79/79 [00:03<00:00, 27.52it/s]
, 24.39it/s]
 70%|   | 55/79 [00:03<00:00, 24.57it/s]
 73%|  | 58/79 [00:03<00:00, 25.04it/s]
 77%|  | 61/79 [00:03<00:00, 25.09it/s]
 81%|  | 64/79 [00:03<00:00, 24.91it/s]
 85%| | 67/79 [00:03<00:00, 24.87it/s]
 89%| | 70/79 [00:03<00:00, 25.32it/s]
 92%|| 73/79 [00:03<00:00, 25.24it/s]
 96%|| 76/79 [00:03<00:00, 26.11it/s]
100%|| 79/79 [00:03<00:00, 26.93it/s]
, 24.16it/s]
 70%|   | 55/79 [00:03<00:00, 24.44it/s]
 73%|  | 58/79 [00:03<00:00, 24.72it/s]
 77%|  | 61/79 [00:03<00:00, 24.84it/s]
 81%|  | 64/79 [00:03<00:00, 25.06it/s]
 85%| | 67/79 [00:03<00:00, 25.20it/s]
 89%| | 70/79 [00:03<00:00, 25.38it/s]
 92%|| 73/79 [00:03<00:00, 25.71it/s]
 96%|| 76/79 [00:03<00:00, 26.30it/s]
100%|| 79/79 [00:03<00:00, 27.02it/s]
, 24.07it/s]
 70%|   | 55/79 [00:03<00:00, 24.41it/s]
 73%|  | 58/79 [00:03<00:00, 24.85it/s]
 77%|  | 61/79 [00:03<00:00, 24.75it/s]
 81%|  | 64/79 [00:03<00:00, 25.08it/s]
 85%| | 67/79 [00:03<00:00, 24.92it/s]
 89%| | 70/79 [00:03<00:00, 25.19it/s]
 92%|| 73/79 [00:03<00:00, 25.39it/s]
 96%|| 76/79 [00:03<00:00, 26.15it/s]
100%|| 79/79 [00:03<00:00, 27.09it/s]
, 24.06it/s]
 70%|   | 55/79 [00:03<00:00, 24.29it/s]
 73%|  | 58/79 [00:03<00:00, 24.56it/s]
 77%|  | 61/79 [00:03<00:00, 24.72it/s]
 81%|  | 64/79 [00:03<00:00, 25.03it/s]
 85%| | 67/79 [00:03<00:00, 25.09it/s]
 89%| | 70/79 [00:03<00:00, 25.08it/s]
 92%|| 73/79 [00:03<00:00, 25.62it/s]
 96%|| 76/79 [00:03<00:00, 26.28it/s]
100%|| 79/79 [00:03<00:00, 27.12it/s]
, 24.36it/s]
 70%|   | 55/79 [00:03<00:00, 24.71it/s]
 73%|  | 58/79 [00:03<00:00, 24.95it/s]
 77%|  | 61/79 [00:03<00:00, 25.30it/s]
 81%|  | 64/79 [00:03<00:00, 25.64it/s]
 85%| | 67/79 [00:03<00:00, 25.21it/s]
 89%| | 70/79 [00:03<00:00, 25.76it/s]
 92%|| 73/79 [00:03<00:00, 25.85it/s]
 96%|| 76/79 [00:03<00:00, 26.60it/s]
100%|| 79/79 [00:03<00:00, 27.33it/s]
, 24.21it/s]
 70%|   | 55/79 [00:03<00:00, 24.72it/s]
 73%|  | 58/79 [00:03<00:00, 24.67it/s]
 77%|  | 61/79 [00:03<00:00, 24.84it/s]
 81%|  | 64/79 [00:03<00:00, 24.97it/s]
 85%| | 67/79 [00:03<00:00, 25.13it/s]
 89%| | 70/79 [00:03<00:00, 25.17it/s]
 92%|| 73/79 [00:03<00:00, 25.67it/s]
 96%|| 76/79 [00:03<00:00, 26.23it/s]
100%|| 79/79 [00:03<00:00, 27.21it/s]
, 23.83it/s]
 70%|   | 55/79 [00:03<00:00, 24.39it/s]
 73%|  | 58/79 [00:03<00:00, 24.70it/s]
 77%|  | 61/79 [00:03<00:00, 24.61it/s]
 81%|  | 64/79 [00:03<00:00, 24.67it/s]
 85%| | 67/79 [00:03<00:00, 25.14it/s]
 89%| | 70/79 [00:03<00:00, 25.12it/s]
 92%|| 73/79 [00:03<00:00, 25.45it/s]
 96%|| 76/79 [00:03<00:00, 26.19it/s]
100%|| 79/79 [00:03<00:00, 27.10it/s]
, 24.48it/s]
 70%|   | 55/79 [00:03<00:00, 25.06it/s]
 73%|  | 58/79 [00:03<00:00, 25.49it/s]
 77%|  | 61/79 [00:03<00:00, 25.41it/s]
 81%|  | 64/79 [00:03<00:00, 25.09it/s]
 85%| | 67/79 [00:03<00:00, 25.47it/s]
 89%| | 70/79 [00:03<00:00, 25.30it/s]
 92%|| 73/79 [00:03<00:00, 25.53it/s]
 96%|| 76/79 [00:03<00:00, 26.17it/s]
100%|| 79/79 [00:03<00:00, 26.93it/s]
, 24.07it/s]
 70%|   | 55/79 [00:03<00:00, 24.30it/s]
 73%|  | 58/79 [00:03<00:00, 24.54it/s]
 77%|  | 61/79 [00:03<00:00, 24.48it/s]
 81%|  | 64/79 [00:03<00:00, 24.57it/s]
 85%| | 67/79 [00:03<00:00, 24.87it/s]
 89%| | 70/79 [00:03<00:00, 24.95it/s]
 92%|| 73/79 [00:03<00:00, 25.39it/s]
 96%|| 76/79 [00:03<00:00, 25.96it/s]
100%|| 79/79 [00:03<00:00, 26.76it/s]
, 23.73it/s]
 70%|   | 55/79 [00:03<00:00, 24.37it/s]
 73%|  | 58/79 [00:03<00:00, 24.65it/s]
 77%|  | 61/79 [00:03<00:00, 24.94it/s]
 81%|  | 64/79 [00:03<00:00, 25.19it/s]
 85%| | 67/79 [00:03<00:00, 25.31it/s]
 89%| | 70/79 [00:03<00:00, 25.32it/s]
 92%|| 73/79 [00:03<00:00, 25.41it/s]
 96%|| 76/79 [00:03<00:00, 26.20it/s]
100%|| 79/79 [00:04<00:00, 26.83it/s]
, 23.67it/s]
 70%|   | 55/79 [00:03<00:00, 24.17it/s]
 73%|  | 58/79 [00:03<00:00, 24.40it/s]
 77%|  | 61/79 [00:03<00:00, 24.72it/s]
 81%|  | 64/79 [00:03<00:00, 24.88it/s]
 85%| | 67/79 [00:03<00:00, 25.08it/s]
 89%| | 70/79 [00:03<00:00, 24.75it/s]
 92%|| 73/79 [00:03<00:00, 25.22it/s]
 96%|| 76/79 [00:03<00:00, 25.86it/s]
100%|| 79/79 [00:04<00:00, 26.56it/s]
, 23.43it/s]
 70%|   | 55/79 [00:03<00:00, 24.09it/s]
 73%|  | 58/79 [00:03<00:00, 24.19it/s]
 77%|  | 61/79 [00:03<00:00, 24.13it/s]
 81%|  | 64/79 [00:03<00:00, 24.44it/s]
 85%| | 67/79 [00:03<00:00, 24.59it/s]
 89%| | 70/79 [00:03<00:00, 24.77it/s]
 92%|| 73/79 [00:03<00:00, 25.04it/s]
 96%|| 76/79 [00:03<00:00, 25.69it/s]
100%|| 79/79 [00:04<00:00, 26.55it/s]
, 23.55it/s]
 70%|   | 55/79 [00:03<00:00, 24.22it/s]
 73%|  | 58/79 [00:03<00:00, 24.42it/s]
 77%|  | 61/79 [00:03<00:00, 24.66it/s]
 81%|  | 64/79 [00:03<00:00, 24.88it/s]
 85%| | 67/79 [00:03<00:00, 25.13it/s]
 89%| | 70/79 [00:03<00:00, 25.12it/s]
 92%|| 73/79 [00:03<00:00, 25.01it/s]
 96%|| 76/79 [00:03<00:00, 25.62it/s]
100%|| 79/79 [00:04<00:00, 26.32it/s]
, 22.93it/s]
 70%|   | 55/79 [00:03<00:01, 23.21it/s]
 73%|  | 58/79 [00:03<00:00, 23.78it/s]
 77%|  | 61/79 [00:03<00:00, 23.93it/s]
 81%|  | 64/79 [00:03<00:00, 24.23it/s]
 85%| | 67/79 [00:03<00:00, 24.30it/s]
 89%| | 70/79 [00:03<00:00, 24.33it/s]
 92%|| 73/79 [00:03<00:00, 24.89it/s]
 96%|| 76/79 [00:04<00:00, 25.68it/s]
100%|| 79/79 [00:04<00:00, 26.55it/s]
, 22.95it/s]
 70%|   | 55/79 [00:03<00:01, 23.38it/s]
 73%|  | 58/79 [00:03<00:00, 23.75it/s]
 77%|  | 61/79 [00:03<00:00, 24.00it/s]
 81%|  | 64/79 [00:03<00:00, 23.80it/s]
 85%| | 67/79 [00:03<00:00, 24.09it/s]
 89%| | 70/79 [00:03<00:00, 24.27it/s]
 92%|| 73/79 [00:03<00:00, 24.78it/s]
 96%|| 76/79 [00:03<00:00, 25.53it/s]
100%|| 79/79 [00:04<00:00, 26.44it/s]
97it/s]
 68%|   | 54/79 [00:03<00:01, 23.44it/s]
 72%|  | 57/79 [00:03<00:00, 23.90it/s]
 76%|  | 60/79 [00:03<00:00, 24.02it/s]
 80%|  | 63/79 [00:03<00:00, 24.05it/s]
 84%| | 66/79 [00:03<00:00, 24.07it/s]
 87%| | 69/79 [00:03<00:00, 24.45it/s]
 91%| | 72/79 [00:03<00:00, 24.28it/s]
 95%|| 75/79 [00:03<00:00, 25.15it/s]
 99%|| 78/79 [00:04<00:00, 25.76it/s]
100%|| 79/79 [00:04<00:00, 18.77it/s]
2020-06-23 17:41:24,335 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.213596 (0.0269670166015625 s / img per device, on 32 devices)
2020-06-23 17:41:24,354 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:41:24,354 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:41:24,373 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592959291521, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 13, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592959291522, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 13}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:41:33,280 maskrcnn_benchmark.trainer INFO: eta: 1:00:15  iter: 11020  loss: 0.5028 (0.7284)  loss_classifier: 0.1477 (0.2658)  loss_box_reg: 0.0757 (0.1177)  loss_mask: 0.2362 (0.2902)  loss_objectness: 0.0121 (0.0350)  loss_rpn_box_reg: 0.0088 (0.0197)  time: 0.1096 (0.1248)  data: 0.0015 (0.0175)  lr: 0.016000  max mem: 5155
2020-06-23 17:41:35,451 maskrcnn_benchmark.trainer INFO: eta: 1:00:12  iter: 11040  loss: 0.5847 (0.7281)  loss_classifier: 0.1619 (0.2657)  loss_box_reg: 0.0862 (0.1176)  loss_mask: 0.2465 (0.2901)  loss_objectness: 0.0138 (0.0349)  loss_rpn_box_reg: 0.0061 (0.0197)  time: 0.1081 (0.1247)  data: 0.0014 (0.0175)  lr: 0.016000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.60s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 17:41:37,643 maskrcnn_benchmark.trainer INFO: eta: 1:00:09  iter: 11060  loss: 0.5782 (0.7278)  loss_classifier: 0.1928 (0.2655)  loss_box_reg: 0.0888 (0.1176)  loss_mask: 0.2615 (0.2901)  loss_objectness: 0.0166 (0.0349)  loss_rpn_box_reg: 0.0097 (0.0197)  time: 0.1087 (0.1247)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5155
DONE (t=1.43s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.36991
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.58483
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.40039
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21707
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.39761
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48420
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30680
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.48816
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51309
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.33514
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.54652
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.63935
2020-06-23 17:41:39,837 maskrcnn_benchmark.trainer INFO: eta: 1:00:05  iter: 11080  loss: 0.5084 (0.7274)  loss_classifier: 0.1589 (0.2653)  loss_box_reg: 0.0863 (0.1175)  loss_mask: 0.2414 (0.2900)  loss_objectness: 0.0140 (0.0349)  loss_rpn_box_reg: 0.0073 (0.0197)  time: 0.1094 (0.1247)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5155
2020-06-23 17:41:42,020 maskrcnn_benchmark.trainer INFO: eta: 1:00:02  iter: 11100  loss: 0.6081 (0.7273)  loss_classifier: 0.1940 (0.2653)  loss_box_reg: 0.0944 (0.1175)  loss_mask: 0.2572 (0.2899)  loss_objectness: 0.0185 (0.0349)  loss_rpn_box_reg: 0.0071 (0.0197)  time: 0.1081 (0.1247)  data: 0.0014 (0.0174)  lr: 0.016000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:41:44,192 maskrcnn_benchmark.trainer INFO: eta: 0:59:59  iter: 11120  loss: 0.4827 (0.7269)  loss_classifier: 0.1586 (0.2651)  loss_box_reg: 0.0675 (0.1175)  loss_mask: 0.2432 (0.2899)  loss_objectness: 0.0116 (0.0349)  loss_rpn_box_reg: 0.0055 (0.0196)  time: 0.1075 (0.1246)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5155
DONE (t=1.57s)
Running per image evaluation...
Evaluate annotation type *segm*

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0


Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0
Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0

Grad overflow on iteration  11135
Using dynamic loss scale of  65536.0
2020-06-23 17:41:46,364 maskrcnn_benchmark.trainer INFO: eta: 0:59:55  iter: 11140  loss: 0.5270 (0.7266)  loss_classifier: 0.1581 (0.2649)  loss_box_reg: 0.0716 (0.1174)  loss_mask: 0.2260 (0.2898)  loss_objectness: 0.0156 (0.0348)  loss_rpn_box_reg: 0.0077 (0.0197)  time: 0.1082 (0.1246)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5155
DONE (t=2.37s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.33869
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.55472
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.35894
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15689
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36294
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49780
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29059
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.44936
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.47031
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.28054
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50476
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.61698
2020-06-23 17:41:48,447 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.36990565880338305, segm mAP: 0.3386886407651995
:::MLLOG {"namespace": "", "time_ms": 1592959308448, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.36990565880338305, "SEGM": 0.3386886407651995}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 12}}
:::MLLOG {"namespace": "", "time_ms": 1592959308448, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 12}}
2020-06-23 17:41:48,669 maskrcnn_benchmark.trainer INFO: eta: 0:59:52  iter: 11160  loss: 0.5576 (0.7263)  loss_classifier: 0.1822 (0.2648)  loss_box_reg: 0.0996 (0.1174)  loss_mask: 0.2357 (0.2897)  loss_objectness: 0.0161 (0.0348)  loss_rpn_box_reg: 0.0062 (0.0196)  time: 0.1092 (0.1246)  data: 0.0015 (0.0173)  lr: 0.016000  max mem: 5155
2020-06-23 17:41:50,848 maskrcnn_benchmark.trainer INFO: eta: 0:59:49  iter: 11180  loss: 0.5860 (0.7261)  loss_classifier: 0.1814 (0.2647)  loss_box_reg: 0.0933 (0.1174)  loss_mask: 0.2502 (0.2896)  loss_objectness: 0.0142 (0.0348)  loss_rpn_box_reg: 0.0084 (0.0197)  time: 0.1091 (0.1246)  data: 0.0014 (0.0173)  lr: 0.016000  max mem: 5155
2020-06-23 17:41:52,999 maskrcnn_benchmark.trainer INFO: eta: 0:59:46  iter: 11200  loss: 0.5851 (0.7259)  loss_classifier: 0.1972 (0.2646)  loss_box_reg: 0.0947 (0.1173)  loss_mask: 0.2369 (0.2896)  loss_objectness: 0.0126 (0.0348)  loss_rpn_box_reg: 0.0090 (0.0196)  time: 0.1070 (0.1245)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5155
2020-06-23 17:41:55,169 maskrcnn_benchmark.trainer INFO: eta: 0:59:43  iter: 11220  loss: 0.5299 (0.7256)  loss_classifier: 0.1501 (0.2644)  loss_box_reg: 0.0704 (0.1173)  loss_mask: 0.2447 (0.2895)  loss_objectness: 0.0147 (0.0348)  loss_rpn_box_reg: 0.0067 (0.0196)  time: 0.1084 (0.1245)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5155
2020-06-23 17:41:57,362 maskrcnn_benchmark.trainer INFO: eta: 0:59:39  iter: 11240  loss: 0.5699 (0.7253)  loss_classifier: 0.1753 (0.2643)  loss_box_reg: 0.0972 (0.1172)  loss_mask: 0.2558 (0.2894)  loss_objectness: 0.0136 (0.0348)  loss_rpn_box_reg: 0.0080 (0.0196)  time: 0.1084 (0.1245)  data: 0.0013 (0.0172)  lr: 0.016000  max mem: 5155
2020-06-23 17:41:59,549 maskrcnn_benchmark.trainer INFO: eta: 0:59:36  iter: 11260  loss: 0.5039 (0.7250)  loss_classifier: 0.1554 (0.2641)  loss_box_reg: 0.0862 (0.1172)  loss_mask: 0.2356 (0.2893)  loss_objectness: 0.0105 (0.0347)  loss_rpn_box_reg: 0.0065 (0.0196)  time: 0.1092 (0.1244)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:01,729 maskrcnn_benchmark.trainer INFO: eta: 0:59:33  iter: 11280  loss: 0.5167 (0.7247)  loss_classifier: 0.1489 (0.2640)  loss_box_reg: 0.0856 (0.1172)  loss_mask: 0.2500 (0.2893)  loss_objectness: 0.0147 (0.0347)  loss_rpn_box_reg: 0.0079 (0.0196)  time: 0.1087 (0.1244)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:03,907 maskrcnn_benchmark.trainer INFO: eta: 0:59:29  iter: 11300  loss: 0.5450 (0.7245)  loss_classifier: 0.1754 (0.2638)  loss_box_reg: 0.0880 (0.1171)  loss_mask: 0.2347 (0.2892)  loss_objectness: 0.0157 (0.0347)  loss_rpn_box_reg: 0.0084 (0.0196)  time: 0.1088 (0.1244)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:06,093 maskrcnn_benchmark.trainer INFO: eta: 0:59:26  iter: 11320  loss: 0.5495 (0.7242)  loss_classifier: 0.1926 (0.2637)  loss_box_reg: 0.0998 (0.1171)  loss_mask: 0.2461 (0.2891)  loss_objectness: 0.0137 (0.0347)  loss_rpn_box_reg: 0.0069 (0.0196)  time: 0.1091 (0.1244)  data: 0.0014 (0.0171)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:08,262 maskrcnn_benchmark.trainer INFO: eta: 0:59:23  iter: 11340  loss: 0.5145 (0.7239)  loss_classifier: 0.1711 (0.2636)  loss_box_reg: 0.0859 (0.1171)  loss_mask: 0.2428 (0.2890)  loss_objectness: 0.0110 (0.0346)  loss_rpn_box_reg: 0.0128 (0.0196)  time: 0.1078 (0.1243)  data: 0.0014 (0.0170)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:10,438 maskrcnn_benchmark.trainer INFO: eta: 0:59:20  iter: 11360  loss: 0.5488 (0.7237)  loss_classifier: 0.1824 (0.2635)  loss_box_reg: 0.0855 (0.1170)  loss_mask: 0.2370 (0.2890)  loss_objectness: 0.0176 (0.0346)  loss_rpn_box_reg: 0.0084 (0.0196)  time: 0.1087 (0.1243)  data: 0.0014 (0.0170)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:12,627 maskrcnn_benchmark.trainer INFO: eta: 0:59:16  iter: 11380  loss: 0.6484 (0.7235)  loss_classifier: 0.2154 (0.2634)  loss_box_reg: 0.1204 (0.1170)  loss_mask: 0.2498 (0.2889)  loss_objectness: 0.0207 (0.0346)  loss_rpn_box_reg: 0.0101 (0.0196)  time: 0.1093 (0.1243)  data: 0.0014 (0.0170)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:14,809 maskrcnn_benchmark.trainer INFO: eta: 0:59:13  iter: 11400  loss: 0.5051 (0.7231)  loss_classifier: 0.1566 (0.2632)  loss_box_reg: 0.0680 (0.1170)  loss_mask: 0.2324 (0.2888)  loss_objectness: 0.0105 (0.0345)  loss_rpn_box_reg: 0.0038 (0.0196)  time: 0.1092 (0.1243)  data: 0.0013 (0.0170)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:17,004 maskrcnn_benchmark.trainer INFO: eta: 0:59:10  iter: 11420  loss: 0.6124 (0.7229)  loss_classifier: 0.2091 (0.2631)  loss_box_reg: 0.1171 (0.1169)  loss_mask: 0.2505 (0.2887)  loss_objectness: 0.0150 (0.0345)  loss_rpn_box_reg: 0.0124 (0.0196)  time: 0.1093 (0.1242)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:19,183 maskrcnn_benchmark.trainer INFO: eta: 0:59:07  iter: 11440  loss: 0.4951 (0.7226)  loss_classifier: 0.1531 (0.2630)  loss_box_reg: 0.0817 (0.1169)  loss_mask: 0.2341 (0.2887)  loss_objectness: 0.0134 (0.0345)  loss_rpn_box_reg: 0.0045 (0.0195)  time: 0.1088 (0.1242)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:21,361 maskrcnn_benchmark.trainer INFO: eta: 0:59:03  iter: 11460  loss: 0.5995 (0.7223)  loss_classifier: 0.2037 (0.2629)  loss_box_reg: 0.0897 (0.1169)  loss_mask: 0.2347 (0.2886)  loss_objectness: 0.0174 (0.0345)  loss_rpn_box_reg: 0.0080 (0.0195)  time: 0.1084 (0.1242)  data: 0.0014 (0.0169)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:23,536 maskrcnn_benchmark.trainer INFO: eta: 0:59:00  iter: 11480  loss: 0.4162 (0.7219)  loss_classifier: 0.1268 (0.2627)  loss_box_reg: 0.0762 (0.1168)  loss_mask: 0.2142 (0.2885)  loss_objectness: 0.0127 (0.0344)  loss_rpn_box_reg: 0.0078 (0.0195)  time: 0.1085 (0.1241)  data: 0.0014 (0.0168)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:25,720 maskrcnn_benchmark.trainer INFO: eta: 0:58:57  iter: 11500  loss: 0.5432 (0.7218)  loss_classifier: 0.1911 (0.2626)  loss_box_reg: 0.1037 (0.1168)  loss_mask: 0.2629 (0.2884)  loss_objectness: 0.0210 (0.0344)  loss_rpn_box_reg: 0.0070 (0.0195)  time: 0.1085 (0.1241)  data: 0.0014 (0.0168)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:27,884 maskrcnn_benchmark.trainer INFO: eta: 0:58:54  iter: 11520  loss: 0.5051 (0.7214)  loss_classifier: 0.1718 (0.2624)  loss_box_reg: 0.0814 (0.1167)  loss_mask: 0.2270 (0.2883)  loss_objectness: 0.0113 (0.0344)  loss_rpn_box_reg: 0.0066 (0.0195)  time: 0.1081 (0.1241)  data: 0.0014 (0.0168)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:30,084 maskrcnn_benchmark.trainer INFO: eta: 0:58:51  iter: 11540  loss: 0.5466 (0.7211)  loss_classifier: 0.1880 (0.2623)  loss_box_reg: 0.0878 (0.1167)  loss_mask: 0.2416 (0.2883)  loss_objectness: 0.0115 (0.0344)  loss_rpn_box_reg: 0.0059 (0.0195)  time: 0.1088 (0.1241)  data: 0.0014 (0.0168)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:32,242 maskrcnn_benchmark.trainer INFO: eta: 0:58:47  iter: 11560  loss: 0.5909 (0.7210)  loss_classifier: 0.1925 (0.2622)  loss_box_reg: 0.1050 (0.1167)  loss_mask: 0.2494 (0.2882)  loss_objectness: 0.0181 (0.0344)  loss_rpn_box_reg: 0.0098 (0.0195)  time: 0.1076 (0.1240)  data: 0.0014 (0.0167)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:34,393 maskrcnn_benchmark.trainer INFO: eta: 0:58:44  iter: 11580  loss: 0.5758 (0.7208)  loss_classifier: 0.2003 (0.2621)  loss_box_reg: 0.1061 (0.1167)  loss_mask: 0.2524 (0.2882)  loss_objectness: 0.0140 (0.0343)  loss_rpn_box_reg: 0.0076 (0.0195)  time: 0.1074 (0.1240)  data: 0.0014 (0.0167)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:36,559 maskrcnn_benchmark.trainer INFO: eta: 0:58:41  iter: 11600  loss: 0.5850 (0.7205)  loss_classifier: 0.2003 (0.2620)  loss_box_reg: 0.1029 (0.1166)  loss_mask: 0.2481 (0.2881)  loss_objectness: 0.0169 (0.0343)  loss_rpn_box_reg: 0.0053 (0.0195)  time: 0.1083 (0.1240)  data: 0.0014 (0.0167)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:38,725 maskrcnn_benchmark.trainer INFO: eta: 0:58:37  iter: 11620  loss: 0.6358 (0.7204)  loss_classifier: 0.2039 (0.2619)  loss_box_reg: 0.1001 (0.1166)  loss_mask: 0.2734 (0.2881)  loss_objectness: 0.0182 (0.0343)  loss_rpn_box_reg: 0.0092 (0.0195)  time: 0.1079 (0.1240)  data: 0.0014 (0.0167)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:40,889 maskrcnn_benchmark.trainer INFO: eta: 0:58:34  iter: 11640  loss: 0.5392 (0.7201)  loss_classifier: 0.1728 (0.2618)  loss_box_reg: 0.0938 (0.1166)  loss_mask: 0.2497 (0.2880)  loss_objectness: 0.0107 (0.0343)  loss_rpn_box_reg: 0.0087 (0.0195)  time: 0.1079 (0.1239)  data: 0.0014 (0.0166)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:43,050 maskrcnn_benchmark.trainer INFO: eta: 0:58:31  iter: 11660  loss: 0.5592 (0.7199)  loss_classifier: 0.1976 (0.2617)  loss_box_reg: 0.0788 (0.1166)  loss_mask: 0.2484 (0.2879)  loss_objectness: 0.0131 (0.0343)  loss_rpn_box_reg: 0.0054 (0.0195)  time: 0.1073 (0.1239)  data: 0.0013 (0.0166)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:45,216 maskrcnn_benchmark.trainer INFO: eta: 0:58:28  iter: 11680  loss: 0.5062 (0.7196)  loss_classifier: 0.1687 (0.2615)  loss_box_reg: 0.0861 (0.1165)  loss_mask: 0.2455 (0.2878)  loss_objectness: 0.0150 (0.0343)  loss_rpn_box_reg: 0.0061 (0.0195)  time: 0.1079 (0.1239)  data: 0.0014 (0.0166)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:47,396 maskrcnn_benchmark.trainer INFO: eta: 0:58:25  iter: 11700  loss: 0.6482 (0.7194)  loss_classifier: 0.2141 (0.2614)  loss_box_reg: 0.1213 (0.1165)  loss_mask: 0.2667 (0.2878)  loss_objectness: 0.0209 (0.0342)  loss_rpn_box_reg: 0.0110 (0.0195)  time: 0.1092 (0.1239)  data: 0.0014 (0.0166)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:49,578 maskrcnn_benchmark.trainer INFO: eta: 0:58:21  iter: 11720  loss: 0.5181 (0.7192)  loss_classifier: 0.1814 (0.2613)  loss_box_reg: 0.0899 (0.1165)  loss_mask: 0.2496 (0.2877)  loss_objectness: 0.0133 (0.0342)  loss_rpn_box_reg: 0.0092 (0.0195)  time: 0.1084 (0.1238)  data: 0.0014 (0.0165)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:51,751 maskrcnn_benchmark.trainer INFO: eta: 0:58:18  iter: 11740  loss: 0.4588 (0.7188)  loss_classifier: 0.1381 (0.2611)  loss_box_reg: 0.0685 (0.1164)  loss_mask: 0.2339 (0.2876)  loss_objectness: 0.0101 (0.0342)  loss_rpn_box_reg: 0.0047 (0.0194)  time: 0.1085 (0.1238)  data: 0.0013 (0.0165)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:53,932 maskrcnn_benchmark.trainer INFO: eta: 0:58:15  iter: 11760  loss: 0.5694 (0.7186)  loss_classifier: 0.2112 (0.2610)  loss_box_reg: 0.0976 (0.1164)  loss_mask: 0.2452 (0.2875)  loss_objectness: 0.0180 (0.0342)  loss_rpn_box_reg: 0.0064 (0.0194)  time: 0.1091 (0.1238)  data: 0.0014 (0.0165)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:56,091 maskrcnn_benchmark.trainer INFO: eta: 0:58:12  iter: 11780  loss: 0.4565 (0.7181)  loss_classifier: 0.1317 (0.2608)  loss_box_reg: 0.0659 (0.1163)  loss_mask: 0.1967 (0.2874)  loss_objectness: 0.0165 (0.0341)  loss_rpn_box_reg: 0.0118 (0.0194)  time: 0.1077 (0.1237)  data: 0.0013 (0.0165)  lr: 0.016000  max mem: 5155
2020-06-23 17:42:58,259 maskrcnn_benchmark.trainer INFO: eta: 0:58:09  iter: 11800  loss: 0.5552 (0.7178)  loss_classifier: 0.1590 (0.2607)  loss_box_reg: 0.0730 (0.1162)  loss_mask: 0.2400 (0.2873)  loss_objectness: 0.0184 (0.0341)  loss_rpn_box_reg: 0.0060 (0.0194)  time: 0.1078 (0.1237)  data: 0.0014 (0.0164)  lr: 0.016000  max mem: 5155
2020-06-23 17:43:00,447 maskrcnn_benchmark.trainer INFO: eta: 0:58:05  iter: 11820  loss: 0.4782 (0.7174)  loss_classifier: 0.1671 (0.2605)  loss_box_reg: 0.0763 (0.1162)  loss_mask: 0.2149 (0.2872)  loss_objectness: 0.0100 (0.0341)  loss_rpn_box_reg: 0.0105 (0.0194)  time: 0.1091 (0.1237)  data: 0.0013 (0.0164)  lr: 0.016000  max mem: 5155
2020-06-23 17:43:02,637 maskrcnn_benchmark.trainer INFO: eta: 0:58:02  iter: 11840  loss: 0.4996 (0.7171)  loss_classifier: 0.1599 (0.2604)  loss_box_reg: 0.0878 (0.1161)  loss_mask: 0.2348 (0.2871)  loss_objectness: 0.0110 (0.0341)  loss_rpn_box_reg: 0.0090 (0.0194)  time: 0.1082 (0.1237)  data: 0.0014 (0.0164)  lr: 0.016000  max mem: 5155
2020-06-23 17:43:04,818 maskrcnn_benchmark.trainer INFO: eta: 0:57:59  iter: 11860  loss: 0.5320 (0.7169)  loss_classifier: 0.2025 (0.2603)  loss_box_reg: 0.0895 (0.1161)  loss_mask: 0.2394 (0.2871)  loss_objectness: 0.0168 (0.0340)  loss_rpn_box_reg: 0.0070 (0.0194)  time: 0.1090 (0.1237)  data: 0.0014 (0.0164)  lr: 0.016000  max mem: 5155
2020-06-23 17:43:07,006 maskrcnn_benchmark.trainer INFO: eta: 0:57:56  iter: 11880  loss: 0.5383 (0.7166)  loss_classifier: 0.1606 (0.2601)  loss_box_reg: 0.0896 (0.1161)  loss_mask: 0.2623 (0.2870)  loss_objectness: 0.0110 (0.0340)  loss_rpn_box_reg: 0.0073 (0.0194)  time: 0.1089 (0.1236)  data: 0.0013 (0.0163)  lr: 0.016000  max mem: 5155
2020-06-23 17:43:09,180 maskrcnn_benchmark.trainer INFO: eta: 0:57:53  iter: 11900  loss: 0.5258 (0.7163)  loss_classifier: 0.1730 (0.2600)  loss_box_reg: 0.0905 (0.1160)  loss_mask: 0.2284 (0.2869)  loss_objectness: 0.0076 (0.0340)  loss_rpn_box_reg: 0.0068 (0.0194)  time: 0.1083 (0.1236)  data: 0.0014 (0.0163)  lr: 0.016000  max mem: 5155
2020-06-23 17:43:11,376 maskrcnn_benchmark.trainer INFO: eta: 0:57:50  iter: 11920  loss: 0.5179 (0.7160)  loss_classifier: 0.1619 (0.2598)  loss_box_reg: 0.0835 (0.1160)  loss_mask: 0.2585 (0.2869)  loss_objectness: 0.0123 (0.0339)  loss_rpn_box_reg: 0.0080 (0.0194)  time: 0.1096 (0.1236)  data: 0.0013 (0.0163)  lr: 0.016000  max mem: 5155
:::MLLOG {"namespace": "", "time_ms": 1592959391476, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 13}}
:::MLLOG {"namespace": "", "time_ms": 1592959391477, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 13}}
:::MLLOG {"namespace": "", "time_ms": 1592959391477, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 13}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 17:43:11,667 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
2020-06-23 17:43:11,975 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
Done (t=0.26s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.29s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.20it/s]
  4%|         | 3/79 [00:00<00:45,  1.66it/s]
  8%|         | 6/79 [00:01<00:31,  2.31it/s]
 11%|        | 9/79 [00:01<00:22,  3.18it/s]
 15%|        | 12/79 [00:01<00:15,  4.32it/s]
 19%|        | 15/79 [00:01<00:11,  5.76it/s]
 23%|       | 18/79 [00:01<00:08,  7.52it/s]
 27%|       | 21/79 [00:01<00:06,  9.57it/s]
 30%|       | 24/79 [00:01<00:04, 11.87it/s]
 34%|      | 27/79 [00:01<00:03, 14.20it/s]
 38%|      | 30/79 [00:01<00:02, 16.49it/s]
 42%|     | 33/79 [00:02<00:02, 18.54it/s]
 46%|     | 36/79 [00:02<00:02, 20.46it/s]
 49%|     | 39/79 [00:02<00:01, 21.81it/s]
 53%|    | 42/79 [00:02<00:01, 23.18it/s]
 57%|    | 45/79 [00:02<00:01, 24.20it/s]
 61%|    | 48/79 [00:02<00:01, 24.76it/s]
 65%|   | 51/79 [00:02<00:01, 25.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.44it/s]
 20%|        | 16/79 [00:01<00:10,  5.91it/s]
 24%|       | 19/79 [00:01<00:07,  7.66it/s]
 28%|       | 22/79 [00:01<00:05,  9.76it/s]
 32%|      | 25/79 [00:01<00:04, 12.03it/s]
 35%|      | 28/79 [00:01<00:03, 14.40it/s]
 39%|      | 31/79 [00:01<00:02, 16.63it/s]
 43%|     | 34/79 [00:02<00:02, 18.71it/s]
 47%|     | 37/79 [00:02<00:02, 20.45it/s]
 51%|     | 40/79 [00:02<00:01, 21.87it/s]
 54%|    | 43/79 [00:02<00:01, 23.16it/s]
 58%|    | 46/79 [00:02<00:01, 23.95it/s]
 62%|   | 49/79 [00:02<00:01, 24.36it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.39it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.44it/s]
 20%|        | 16/79 [00:01<00:10,  5.93it/s]
 24%|       | 19/79 [00:01<00:07,  7.70it/s]
 28%|       | 22/79 [00:01<00:05,  9.76it/s]
 32%|      | 25/79 [00:01<00:04, 12.04it/s]
 35%|      | 28/79 [00:01<00:03, 14.37it/s]
 39%|      | 31/79 [00:01<00:02, 16.60it/s]
 43%|     | 34/79 [00:02<00:02, 18.61it/s]
 47%|     | 37/79 [00:02<00:02, 20.34it/s]
 51%|     | 40/79 [00:02<00:01, 21.78it/s]
 54%|    | 43/79 [00:02<00:01, 22.94it/s]
 58%|    | 46/79 [00:02<00:01, 23.78it/s]
 62%|   | 49/79 [00:02<00:01, 24.64it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.44it/s]
 20%|        | 16/79 [00:01<00:10,  5.92it/s]
 24%|       | 19/79 [00:01<00:07,  7.70it/s]
 28%|       | 22/79 [00:01<00:05,  9.78it/s]
 32%|      | 25/79 [00:01<00:04, 12.01it/s]
 35%|      | 28/79 [00:01<00:03, 14.32it/s]
 39%|      | 31/79 [00:01<00:02, 16.60it/s]
 43%|     | 34/79 [00:02<00:02, 18.66it/s]
 47%|     | 37/79 [00:02<00:02, 20.29it/s]
 51%|     | 40/79 [00:02<00:01, 21.69it/s]
 54%|    | 43/79 [00:02<00:01, 22.68it/s]
 58%|    | 46/79 [00:02<00:01, 23.48it/s]
 62%|   | 49/79 [00:02<00:01, 24.05it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.24it/s]
  5%|         | 4/79 [00:00<00:43,  1.73it/s]
  9%|         | 7/79 [00:01<00:30,  2.40it/s]
 13%|        | 10/79 [00:01<00:20,  3.29it/s]
 16%|        | 13/79 [00:01<00:14,  4.44it/s]
 20%|        | 16/79 [00:01<00:10,  5.90it/s]
 24%|       | 19/79 [00:01<00:07,  7.67it/s]
 28%|       | 22/79 [00:01<00:05,  9.72it/s]
 32%|      | 25/79 [00:01<00:04, 11.94it/s]
 35%|      | 28/79 [00:01<00:03, 14.24it/s]
 39%|      | 31/79 [00:02<00:02, 16.54it/s]
 43%|     | 34/79 [00:02<00:02, 18.50it/s]
 47%|     | 37/79 [00:02<00:02, 20.33it/s]
 51%|     | 40/79 [00:02<00:01, 21.58it/s]
 54%|    | 43/79 [00:02<00:01, 22.57it/s]
 58%|    | 46/79 [00:02<00:01, 23.21it/s]
 62%|   | 49/79 [00:02<00:01, 23.98it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.20it/s]
 16%|        | 13/79 [00:01<00:15,  4.34it/s]
 20%|        | 16/79 [00:01<00:10,  5.77it/s]
 24%|       | 19/79 [00:01<00:07,  7.52it/s]
 28%|       | 22/79 [00:01<00:05,  9.56it/s]
 32%|      | 25/79 [00:01<00:04, 11.80it/s]
 35%|      | 28/79 [00:01<00:03, 14.14it/s]
 39%|      | 31/79 [00:02<00:02, 16.36it/s]
 43%|     | 34/79 [00:02<00:02, 18.24it/s]
 47%|     | 37/79 [00:02<00:02, 20.04it/s]
 51%|     | 40/79 [00:02<00:01, 21.28it/s]
 54%|    | 43/79 [00:02<00:01, 22.35it/s]
 58%|    | 46/79 [00:02<00:01, 23.10it/s]
 62%|   | 49/79 [00:02<00:01, 24.01it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  5%|         | 4/79 [00:00<00:43,  1.71it/s]
  9%|         | 7/79 [00:01<00:30,  2.37it/s]
 13%|        | 10/79 [00:01<00:21,  3.25it/s]
 16%|        | 13/79 [00:01<00:15,  4.40it/s]
 20%|        | 16/79 [00:01<00:10,  5.85it/s]
 24%|       | 19/79 [00:01<00:07,  7.62it/s]
 28%|       | 22/79 [00:01<00:05,  9.62it/s]
 32%|      | 25/79 [00:01<00:04, 11.86it/s]
 35%|      | 28/79 [00:01<00:03, 14.17it/s]
 39%|      | 31/79 [00:02<00:02, 16.46it/s]
 43%|     | 34/79 [00:02<00:02, 18.45it/s]
 47%|     | 37/79 [00:02<00:02, 20.31it/s]
 51%|     | 40/79 [00:02<00:01, 21.51it/s]
 54%|    | 43/79 [00:02<00:01, 22.68it/s]
 58%|    | 46/79 [00:02<00:01, 23.17it/s]
 62%|   | 49/79 [00:02<00:01, 23.87it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.83it/s]
 24%|       | 19/79 [00:01<00:07,  7.59it/s]
 28%|       | 22/79 [00:01<00:05,  9.61it/s]
 32%|      | 25/79 [00:01<00:04, 11.85it/s]
 35%|      | 28/79 [00:01<00:03, 14.15it/s]
 39%|      | 31/79 [00:02<00:02, 16.41it/s]
 43%|     | 34/79 [00:02<00:02, 18.42it/s]
 47%|     | 37/79 [00:02<00:02, 20.24it/s]
 51%|     | 40/79 [00:02<00:01, 21.54it/s]
 54%|    | 43/79 [00:02<00:01, 22.57it/s]
 58%|    | 46/79 [00:02<00:01, 23.17it/s]
 62%|   | 49/79 [00:02<00:01, 23.85it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.50it/s]
 28%|       | 22/79 [00:01<00:05,  9.57it/s]
 32%|      | 25/79 [00:01<00:04, 11.83it/s]
 35%|      | 28/79 [00:01<00:03, 14.09it/s]
 39%|      | 31/79 [00:02<00:02, 16.41it/s]
 43%|     | 34/79 [00:02<00:02, 18.46it/s]
 47%|     | 37/79 [00:02<00:02, 20.24it/s]
 51%|     | 40/79 [00:02<00:01, 21.51it/s]
 54%|    | 43/79 [00:02<00:01, 22.57it/s]
 58%|    | 46/79 [00:02<00:01, 23.54it/s]
 62%|   | 49/79 [00:02<00:01, 24.15it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.27it/s]
 16%|        | 13/79 [00:01<00:14,  4.43it/s]
 20%|        | 16/79 [00:01<00:10,  5.88it/s]
 24%|       | 19/79 [00:01<00:07,  7.63it/s]
 28%|       | 22/79 [00:01<00:05,  9.69it/s]
 32%|      | 25/79 [00:01<00:04, 11.87it/s]
 35%|      | 28/79 [00:01<00:03, 14.13it/s]
 39%|      | 31/79 [00:02<00:02, 16.23it/s]
 43%|     | 34/79 [00:02<00:02, 18.11it/s]
 47%|     | 37/79 [00:02<00:02, 19.92it/s]
 51%|     | 40/79 [00:02<00:01, 20.98it/s]
 54%|    | 43/79 [00:02<00:01, 22.16it/s]
 58%|    | 46/79 [00:02<00:01, 22.53it/s]
 62%|   | 49/79 [00:02<00:01, 23.23it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.13it/s]
 16%|        | 13/79 [00:01<00:15,  4.25it/s]
 20%|        | 16/79 [00:01<00:11,  5.68it/s]
 24%|       | 19/79 [00:01<00:08,  7.42it/s]
 28%|       | 22/79 [00:01<00:06,  9.45it/s]
 32%|      | 25/79 [00:01<00:04, 11.68it/s]
 35%|      | 28/79 [00:01<00:03, 14.04it/s]
 39%|      | 31/79 [00:02<00:02, 16.28it/s]
 43%|     | 34/79 [00:02<00:02, 18.37it/s]
 47%|     | 37/79 [00:02<00:02, 20.14it/s]
 51%|     | 40/79 [00:02<00:01, 21.75it/s]
 54%|    | 43/79 [00:02<00:01, 22.88it/s]
 58%|    | 46/79 [00:02<00:01, 23.58it/s]
 62%|   | 49/79 [00:02<00:01, 24.29it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.39it/s]
 20%|        | 16/79 [00:01<00:10,  5.83it/s]
 24%|       | 19/79 [00:01<00:07,  7.57it/s]
 28%|       | 22/79 [00:01<00:05,  9.58it/s]
 32%|      | 25/79 [00:01<00:04, 11.74it/s]
 35%|      | 28/79 [00:01<00:03, 14.04it/s]
 39%|      | 31/79 [00:02<00:02, 16.08it/s]
 43%|     | 34/79 [00:02<00:02, 18.10it/s]
 47%|     | 37/79 [00:02<00:02, 19.51it/s]
 51%|     | 40/79 [00:02<00:01, 20.93it/s]
 54%|    | 43/79 [00:02<00:01, 22.06it/s]
 58%|    | 46/79 [00:02<00:01, 22.94it/s]
 62%|   | 49/79 [00:02<00:01, 23.33it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.30it/s]
 13%|        | 10/79 [00:01<00:21,  3.16it/s]
 16%|        | 13/79 [00:01<00:15,  4.28it/s]
 20%|        | 16/79 [00:01<00:11,  5.70it/s]
 24%|       | 19/79 [00:01<00:08,  7.44it/s]
 28%|       | 22/79 [00:01<00:06,  9.43it/s]
 32%|      | 25/79 [00:01<00:04, 11.63it/s]
 35%|      | 28/79 [00:01<00:03, 13.91it/s]
 39%|      | 31/79 [00:02<00:02, 16.16it/s]
 43%|     | 34/79 [00:02<00:02, 18.20it/s]
 47%|     | 37/79 [00:02<00:02, 19.74it/s]
 51%|     | 40/79 [00:02<00:01, 21.15it/s]
 54%|    | 43/79 [00:02<00:01, 22.51it/s]
 58%|    | 46/79 [00:02<00:01, 23.34it/s]
 62%|   | 49/79 [00:02<00:01, 23.84it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.20it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.33it/s]
 13%|        | 10/79 [00:01<00:21,  3.21it/s]
 16%|        | 13/79 [00:01<00:15,  4.35it/s]
 20%|        | 16/79 [00:01<00:10,  5.80it/s]
 24%|       | 19/79 [00:01<00:07,  7.53it/s]
 28%|       | 22/79 [00:01<00:05,  9.56it/s]
 32%|      | 25/79 [00:01<00:04, 11.75it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:03, 15.97it/s]
 43%|     | 34/79 [00:02<00:02, 17.96it/s]
 47%|     | 37/79 [00:02<00:02, 19.84it/s]
 51%|     | 40/79 [00:02<00:01, 21.25it/s]
 54%|    | 43/79 [00:02<00:01, 22.26it/s]
 58%|    | 46/79 [00:02<00:01, 23.39it/s]
 62%|   | 49/79 [00:02<00:01, 24.10it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.75it/s]
 24%|       | 19/79 [00:01<00:08,  7.45it/s]
 28%|       | 22/79 [00:01<00:06,  9.49it/s]
 32%|      | 25/79 [00:01<00:04, 11.68it/s]
 35%|      | 28/79 [00:01<00:03, 13.93it/s]
 39%|      | 31/79 [00:02<00:02, 16.14it/s]
 43%|     | 34/79 [00:02<00:02, 18.22it/s]
 47%|     | 37/79 [00:02<00:02, 19.86it/s]
 51%|     | 40/79 [00:02<00:01, 21.15it/s]
 54%|    | 43/79 [00:02<00:01, 22.36it/s]
 58%|    | 46/79 [00:02<00:01, 23.26it/s]
 62%|   | 49/79 [00:02<00:01, 24.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.04it/s]
 16%|        | 13/79 [00:01<00:15,  4.13it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.22it/s]
 28%|       | 22/79 [00:01<00:06,  9.22it/s]
 32%|      | 25/79 [00:01<00:04, 11.45it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:02, 16.07it/s]
 43%|     | 34/79 [00:02<00:02, 18.14it/s]
 47%|     | 37/79 [00:02<00:02, 20.06it/s]
 51%|     | 40/79 [00:02<00:01, 21.46it/s]
 54%|    | 43/79 [00:02<00:01, 22.62it/s]
 58%|    | 46/79 [00:02<00:01, 23.38it/s]
 62%|   | 49/79 [00:02<00:01, 24.14it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.47it/s]
 28%|       | 22/79 [00:01<00:06,  9.49it/s]
 32%|      | 25/79 [00:01<00:04, 11.70it/s]
 35%|      | 28/79 [00:01<00:03, 14.08it/s]
 39%|      | 31/79 [00:02<00:02, 16.22it/s]
 43%|     | 34/79 [00:02<00:02, 18.16it/s]
 47%|     | 37/79 [00:02<00:02, 19.93it/s]
 51%|     | 40/79 [00:02<00:01, 21.34it/s]
 54%|    | 43/79 [00:02<00:01, 22.63it/s]
 58%|    | 46/79 [00:02<00:01, 23.40it/s]
 62%|   | 49/79 [00:02<00:01, 23.96it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:31,  2.26it/s]
 13%|        | 10/79 [00:01<00:22,  3.11it/s]
 16%|        | 13/79 [00:01<00:15,  4.21it/s]
 20%|        | 16/79 [00:01<00:11,  5.63it/s]
 24%|       | 19/79 [00:01<00:08,  7.36it/s]
 28%|       | 22/79 [00:01<00:06,  9.33it/s]
 32%|      | 25/79 [00:01<00:04, 11.55it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:02, 16.04it/s]
 43%|     | 34/79 [00:02<00:02, 18.09it/s]
 47%|     | 37/79 [00:02<00:02, 19.88it/s]
 51%|     | 40/79 [00:02<00:01, 21.24it/s]
 54%|    | 43/79 [00:02<00:01, 22.47it/s]
 58%|    | 46/79 [00:02<00:01, 23.48it/s]
 62%|   | 49/79 [00:02<00:01, 24.11it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.60it/s]
 24%|       | 19/79 [00:01<00:08,  7.33it/s]
 28%|       | 22/79 [00:01<00:06,  9.34it/s]
 32%|      | 25/79 [00:01<00:04, 11.49it/s]
 35%|      | 28/79 [00:01<00:03, 13.80it/s]
 39%|      | 31/79 [00:02<00:02, 16.05it/s]
 43%|     | 34/79 [00:02<00:02, 17.92it/s]
 47%|     | 37/79 [00:02<00:02, 19.55it/s]
 51%|     | 40/79 [00:02<00:01, 21.21it/s]
 54%|    | 43/79 [00:02<00:01, 22.34it/s]
 58%|    | 46/79 [00:02<00:01, 22.97it/s]
 62%|   | 49/79 [00:02<00:01, 23.75it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.10it/s]
 32%|      | 25/79 [00:01<00:04, 11.24it/s]
 35%|      | 28/79 [00:01<00:03, 13.52it/s]
 39%|      | 31/79 [00:02<00:03, 15.65it/s]
 43%|     | 34/79 [00:02<00:02, 17.64it/s]
 47%|     | 37/79 [00:02<00:02, 19.39it/s]
 51%|     | 40/79 [00:02<00:01, 20.90it/s]
 54%|    | 43/79 [00:02<00:01, 21.93it/s]
 58%|    | 46/79 [00:02<00:01, 22.83it/s]
 62%|   | 49/79 [00:02<00:01, 23.34it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.17it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.25it/s]
 28%|       | 22/79 [00:01<00:06,  9.24it/s]
 32%|      | 25/79 [00:01<00:04, 11.40it/s]
 35%|      | 28/79 [00:01<00:03, 13.62it/s]
 39%|      | 31/79 [00:02<00:03, 15.73it/s]
 43%|     | 34/79 [00:02<00:02, 17.87it/s]
 47%|     | 37/79 [00:02<00:02, 19.41it/s]
 51%|     | 40/79 [00:02<00:01, 20.70it/s]
 54%|    | 43/79 [00:02<00:01, 21.98it/s]
 58%|    | 46/79 [00:02<00:01, 22.94it/s]
 62%|   | 49/79 [00:02<00:01, 23.36it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.63it/s]
  9%|         | 7/79 [00:01<00:31,  2.27it/s]
 13%|        | 10/79 [00:01<00:22,  3.12it/s]
 16%|        | 13/79 [00:01<00:15,  4.24it/s]
 20%|        | 16/79 [00:01<00:11,  5.64it/s]
 24%|       | 19/79 [00:01<00:08,  7.37it/s]
 28%|       | 22/79 [00:01<00:06,  9.38it/s]
 32%|      | 25/79 [00:01<00:04, 11.59it/s]
 35%|      | 28/79 [00:01<00:03, 13.80it/s]
 39%|      | 31/79 [00:02<00:03, 15.89it/s]
 43%|     | 34/79 [00:02<00:02, 17.88it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 20.86it/s]
 54%|    | 43/79 [00:02<00:01, 21.70it/s]
 58%|    | 46/79 [00:02<00:01, 22.62it/s]
 62%|   | 49/79 [00:02<00:01, 23.55it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.65it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.14it/s]
 16%|        | 13/79 [00:01<00:15,  4.26it/s]
 20%|        | 16/79 [00:01<00:11,  5.66it/s]
 24%|       | 19/79 [00:01<00:08,  7.36it/s]
 28%|       | 22/79 [00:01<00:06,  9.33it/s]
 32%|      | 25/79 [00:01<00:04, 11.54it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:03, 16.00it/s]
 43%|     | 34/79 [00:02<00:02, 18.01it/s]
 47%|     | 37/79 [00:02<00:02, 19.79it/s]
 51%|     | 40/79 [00:02<00:01, 20.91it/s]
 54%|    | 43/79 [00:02<00:01, 21.95it/s]
 58%|    | 46/79 [00:02<00:01, 22.48it/s]
 62%|   | 49/79 [00:02<00:01, 23.33it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  4%|         | 3/79 [00:00<00:47,  1.60it/s]
  8%|         | 6/79 [00:01<00:32,  2.23it/s]
 11%|        | 9/79 [00:01<00:22,  3.06it/s]
 15%|        | 12/79 [00:01<00:16,  4.16it/s]
 19%|        | 15/79 [00:01<00:11,  5.54it/s]
 23%|       | 18/79 [00:01<00:08,  7.25it/s]
 27%|       | 21/79 [00:01<00:06,  9.24it/s]
 30%|       | 24/79 [00:01<00:04, 11.32it/s]
 34%|      | 27/79 [00:01<00:03, 13.57it/s]
 38%|      | 30/79 [00:02<00:03, 15.66it/s]
 42%|     | 33/79 [00:02<00:02, 17.79it/s]
 46%|     | 36/79 [00:02<00:02, 19.30it/s]
 49%|     | 39/79 [00:02<00:01, 20.60it/s]
 53%|    | 42/79 [00:02<00:01, 21.70it/s]
 57%|    | 45/79 [00:02<00:01, 22.81it/s]
 61%|    | 48/79 [00:02<00:01, 23.20it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  5%|         | 4/79 [00:01<00:49,  1.53it/s]
  9%|         | 7/79 [00:01<00:33,  2.13it/s]
 13%|        | 10/79 [00:01<00:23,  2.94it/s]
 16%|        | 13/79 [00:01<00:16,  4.00it/s]
 20%|        | 16/79 [00:01<00:11,  5.34it/s]
 24%|       | 19/79 [00:01<00:08,  7.00it/s]
 28%|       | 22/79 [00:01<00:06,  8.94it/s]
 32%|      | 25/79 [00:01<00:04, 11.04it/s]
 35%|      | 28/79 [00:01<00:03, 13.31it/s]
 39%|      | 31/79 [00:02<00:03, 15.56it/s]
 43%|     | 34/79 [00:02<00:02, 17.60it/s]
 47%|     | 37/79 [00:02<00:02, 19.22it/s]
 51%|     | 40/79 [00:02<00:01, 21.00it/s]
 54%|    | 43/79 [00:02<00:01, 22.23it/s]
 58%|    | 46/79 [00:02<00:01, 23.18it/s]
 62%|   | 49/79 [00:02<00:01, 23.94it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.47it/s]
 24%|       | 19/79 [00:01<00:08,  7.16it/s]
 28%|       | 22/79 [00:01<00:06,  9.11it/s]
 32%|      | 25/79 [00:01<00:04, 11.30it/s]
 35%|      | 28/79 [00:01<00:03, 13.45it/s]
 39%|      | 31/79 [00:02<00:03, 15.70it/s]
 43%|     | 34/79 [00:02<00:02, 17.72it/s]
 47%|     | 37/79 [00:02<00:02, 19.60it/s]
 51%|     | 40/79 [00:02<00:01, 20.95it/s]
 54%|    | 43/79 [00:02<00:01, 22.13it/s]
 58%|    | 46/79 [00:02<00:01, 22.64it/s]
 62%|   | 49/79 [00:02<00:01, 23.19it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.57it/s]
 24%|       | 19/79 [00:01<00:08,  7.25it/s]
 28%|       | 22/79 [00:01<00:06,  9.19it/s]
 32%|      | 25/79 [00:01<00:04, 11.27it/s]
 35%|      | 28/79 [00:01<00:03, 13.40it/s]
 39%|      | 31/79 [00:02<00:03, 15.52it/s]
 43%|     | 34/79 [00:02<00:02, 17.58it/s]
 47%|     | 37/79 [00:02<00:02, 19.18it/s]
 51%|     | 40/79 [00:02<00:01, 20.57it/s]
 54%|    | 43/79 [00:02<00:01, 21.63it/s]
 58%|    | 46/79 [00:02<00:01, 22.66it/s]
 62%|   | 49/79 [00:02<00:01, 22.98it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  4%|         | 3/79 [00:00<00:48,  1.55it/s]
  8%|         | 6/79 [00:01<00:33,  2.16it/s]
 11%|        | 9/79 [00:01<00:23,  2.97it/s]
 15%|        | 12/79 [00:01<00:16,  4.03it/s]
 19%|        | 15/79 [00:01<00:11,  5.40it/s]
 23%|       | 18/79 [00:01<00:08,  7.06it/s]
 27%|       | 21/79 [00:01<00:06,  8.99it/s]
 30%|       | 24/79 [00:01<00:04, 11.09it/s]
 34%|      | 27/79 [00:01<00:03, 13.35it/s]
 38%|      | 30/79 [00:02<00:03, 15.54it/s]
 42%|     | 33/79 [00:02<00:02, 17.29it/s]
 46%|     | 36/79 [00:02<00:02, 18.84it/s]
 49%|     | 39/79 [00:02<00:01, 20.25it/s]
 53%|    | 42/79 [00:02<00:01, 21.32it/s]
 57%|    | 45/79 [00:02<00:01, 22.06it/s]
 61%|    | 48/79 [00:02<00:01, 22.92it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.03it/s]
 20%|        | 16/79 [00:01<00:11,  5.40it/s]
 24%|       | 19/79 [00:01<00:08,  7.05it/s]
 28%|       | 22/79 [00:01<00:06,  8.98it/s]
 32%|      | 25/79 [00:01<00:04, 11.12it/s]
 35%|      | 28/79 [00:01<00:03, 13.27it/s]
 39%|      | 31/79 [00:02<00:03, 15.40it/s]
 43%|     | 34/79 [00:02<00:02, 17.49it/s]
 47%|     | 37/79 [00:02<00:02, 19.24it/s]
 51%|     | 40/79 [00:02<00:01, 20.89it/s]
 54%|    | 43/79 [00:02<00:01, 21.77it/s]
 58%|    | 46/79 [00:02<00:01, 22.79it/s]
 62%|   | 49/79 [00:02<00:01, 23.58it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 28%|       | 22/79 [00:01<00:06,  9.16it/s]
 32%|      | 25/79 [00:01<00:04, 11.32it/s]
 35%|      | 28/79 [00:01<00:03, 13.53it/s]
 39%|      | 31/79 [00:02<00:03, 15.73it/s]
 43%|     | 34/79 [00:02<00:02, 17.69it/s]
 47%|     | 37/79 [00:02<00:02, 19.38it/s]
 51%|     | 40/79 [00:02<00:01, 20.67it/s]
 54%|    | 43/79 [00:02<00:01, 21.72it/s]
 58%|    | 46/79 [00:02<00:01, 22.56it/s]
 62%|   | 49/79 [00:02<00:01, 23.47it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.02it/s]
 16%|        | 13/79 [00:01<00:16,  4.11it/s]
 20%|        | 16/79 [00:01<00:11,  5.49it/s]
 24%|       | 19/79 [00:01<00:08,  7.18it/s]
 28%|       | 22/79 [00:01<00:06,  9.16it/s]
 32%|      | 25/79 [00:01<00:04, 11.34it/s]
 35%|      | 28/79 [00:01<00:03, 13.56it/s]
 39%|      | 31/79 [00:02<00:03, 15.76it/s]
 43%|     | 34/79 [00:02<00:02, 17.62it/s]
 47%|     | 37/79 [00:02<00:02, 19.34it/s]
 51%|     | 40/79 [00:02<00:01, 20.66it/s]
 54%|    | 43/79 [00:02<00:01, 21.47it/s]
 58%|    | 46/79 [00:02<00:01, 22.53it/s]
 62%|   | 49/79 [00:02<00:01, 23.03it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.85it/s]
 16%|        | 13/79 [00:01<00:16,  3.90it/s]
 20%|        | 16/79 [00:01<00:12,  5.20it/s]
 24%|       | 19/79 [00:01<00:08,  6.83it/s]
 28%|       | 22/79 [00:01<00:06,  8.71it/s]
 32%|      | 25/79 [00:01<00:04, 10.89it/s]
 35%|      | 28/79 [00:02<00:03, 13.08it/s]
 39%|      | 31/79 [00:02<00:03, 15.28it/s]
 43%|     | 34/79 [00:02<00:02, 17.31it/s]
 47%|     | 37/79 [00:02<00:02, 19.11it/s]
 51%|     | 40/79 [00:02<00:01, 20.43it/s]
 54%|    | 43/79 [00:02<00:01, 21.45it/s]
 58%|    | 46/79 [00:02<00:01, 22.29it/s]
 62%|   | 49/79 [00:02<00:01, 23.06it/s]
 66%|   | 52/79 [00:03<00:01, 24.63it/s]
 70%|   | 55/79 [00:02<00:00, 24.70it/s]
 73%|  | 58/79 [00:03<00:00, 25.10it/s]
 77%|  | 61/79 [00:03<00:00, 25.42it/s]
 81%|  | 64/79 [00:03<00:00, 25.57it/s]
 85%| | 67/79 [00:03<00:00, 25.83it/s]
 89%| | 70/79 [00:03<00:00, 25.72it/s]
 92%|| 73/79 [00:03<00:00, 26.09it/s]
 96%|| 76/79 [00:03<00:00, 26.71it/s]
100%|| 79/79 [00:03<00:00, 20.41it/s]
, 25.23it/s]
 70%|   | 55/79 [00:02<00:00, 25.41it/s]
 73%|  | 58/79 [00:03<00:00, 25.43it/s]
 77%|  | 61/79 [00:03<00:00, 25.57it/s]
 81%|  | 64/79 [00:03<00:00, 25.67it/s]
 85%| | 67/79 [00:03<00:00, 25.42it/s]
 89%| | 70/79 [00:03<00:00, 25.40it/s]
 92%|| 73/79 [00:03<00:00, 25.62it/s]
 96%|| 76/79 [00:03<00:00, 26.39it/s]
100%|| 79/79 [00:03<00:00, 27.15it/s]
, 24.67it/s]
 70%|   | 55/79 [00:02<00:00, 25.20it/s]
 73%|  | 58/79 [00:03<00:00, 25.65it/s]
 77%|  | 61/79 [00:03<00:00, 25.72it/s]
 81%|  | 64/79 [00:03<00:00, 25.73it/s]
 85%| | 67/79 [00:03<00:00, 25.64it/s]
 89%| | 70/79 [00:03<00:00, 25.52it/s]
 92%|| 73/79 [00:03<00:00, 25.97it/s]
 96%|| 76/79 [00:03<00:00, 26.52it/s]
100%|| 79/79 [00:03<00:00, 27.45it/s]
13it/s]
 68%|   | 54/79 [00:02<00:00, 25.36it/s]
 72%|  | 57/79 [00:02<00:00, 25.70it/s]
 76%|  | 60/79 [00:03<00:00, 25.80it/s]
 80%|  | 63/79 [00:03<00:00, 25.61it/s]
 84%| | 66/79 [00:03<00:00, 25.95it/s]
 87%| | 69/79 [00:03<00:00, 25.73it/s]
 91%| | 72/79 [00:03<00:00, 26.13it/s]
 95%|| 75/79 [00:03<00:00, 26.64it/s]
 99%|| 78/79 [00:03<00:00, 27.11it/s]
100%|| 79/79 [00:03<00:00, 20.32it/s]
, 24.56it/s]
 70%|   | 55/79 [00:02<00:00, 24.75it/s]
 73%|  | 58/79 [00:03<00:00, 25.04it/s]
 77%|  | 61/79 [00:03<00:00, 25.09it/s]
 81%|  | 64/79 [00:03<00:00, 25.18it/s]
 85%| | 67/79 [00:03<00:00, 25.09it/s]
 89%| | 70/79 [00:03<00:00, 25.31it/s]
 92%|| 73/79 [00:03<00:00, 25.60it/s]
 97%|| 77/79 [00:03<00:00, 26.69it/s]
100%|| 79/79 [00:03<00:00, 20.02it/s]
, 24.51it/s]
 70%|   | 55/79 [00:02<00:00, 25.12it/s]
 73%|  | 58/79 [00:03<00:00, 25.29it/s]
 77%|  | 61/79 [00:03<00:00, 25.63it/s]
 81%|  | 64/79 [00:03<00:00, 25.71it/s]
 85%| | 67/79 [00:03<00:00, 25.63it/s]
 89%| | 70/79 [00:03<00:00, 25.22it/s]
 92%|| 73/79 [00:03<00:00, 25.92it/s]
 96%|| 76/79 [00:03<00:00, 26.55it/s]
100%|| 79/79 [00:03<00:00, 27.44it/s]
, 24.48it/s]
 70%|   | 55/79 [00:02<00:00, 25.01it/s]
 73%|  | 58/79 [00:03<00:00, 25.11it/s]
 77%|  | 61/79 [00:03<00:00, 25.02it/s]
 81%|  | 64/79 [00:03<00:00, 25.24it/s]
 85%| | 67/79 [00:03<00:00, 25.16it/s]
 89%| | 70/79 [00:03<00:00, 25.39it/s]
 92%|| 73/79 [00:03<00:00, 25.80it/s]
 96%|| 76/79 [00:03<00:00, 26.50it/s]
100%|| 79/79 [00:03<00:00, 20.00it/s]
, 24.41it/s]
 70%|   | 55/79 [00:02<00:00, 24.45it/s]
 73%|  | 58/79 [00:03<00:00, 24.91it/s]
 77%|  | 61/79 [00:03<00:00, 24.83it/s]
 81%|  | 64/79 [00:03<00:00, 25.10it/s]
 85%| | 67/79 [00:03<00:00, 25.16it/s]
 89%| | 70/79 [00:03<00:00, 25.25it/s]
 92%|| 73/79 [00:03<00:00, 25.62it/s]
 96%|| 76/79 [00:03<00:00, 26.26it/s]
100%|| 79/79 [00:03<00:00, 27.01it/s]
, 24.57it/s]
 70%|   | 55/79 [00:02<00:00, 25.02it/s]
 73%|  | 58/79 [00:03<00:00, 25.42it/s]
 77%|  | 61/79 [00:03<00:00, 25.49it/s]
 81%|  | 64/79 [00:03<00:00, 25.37it/s]
 85%| | 67/79 [00:03<00:00, 25.73it/s]
 89%| | 70/79 [00:03<00:00, 25.65it/s]
 92%|| 73/79 [00:03<00:00, 26.00it/s]
 96%|| 76/79 [00:03<00:00, 26.53it/s]
100%|| 79/79 [00:03<00:00, 27.26it/s]
, 24.53it/s]
 70%|   | 55/79 [00:02<00:00, 24.82it/s]
 73%|  | 58/79 [00:03<00:00, 25.22it/s]
 77%|  | 61/79 [00:03<00:00, 25.18it/s]
 81%|  | 64/79 [00:03<00:00, 25.53it/s]
 85%| | 67/79 [00:03<00:00, 25.37it/s]
 89%| | 70/79 [00:03<00:00, 25.66it/s]
 92%|| 73/79 [00:03<00:00, 25.97it/s]
 96%|| 76/79 [00:03<00:00, 26.60it/s]
100%|| 79/79 [00:03<00:00, 27.42it/s]
, 23.68it/s]
 70%|   | 55/79 [00:02<00:00, 24.39it/s]
 73%|  | 58/79 [00:03<00:00, 24.41it/s]
 77%|  | 61/79 [00:03<00:00, 24.57it/s]
 81%|  | 64/79 [00:03<00:00, 24.57it/s]
 85%| | 67/79 [00:03<00:00, 24.94it/s]
 89%| | 70/79 [00:03<00:00, 24.91it/s]
 92%|| 73/79 [00:03<00:00, 25.16it/s]
 96%|| 76/79 [00:03<00:00, 26.06it/s]
100%|| 79/79 [00:03<00:00, 27.08it/s]
, 24.28it/s]
 70%|   | 55/79 [00:02<00:00, 24.62it/s]
 73%|  | 58/79 [00:03<00:00, 25.10it/s]
 77%|  | 61/79 [00:03<00:00, 25.17it/s]
 81%|  | 64/79 [00:03<00:00, 25.23it/s]
 85%| | 67/79 [00:03<00:00, 25.51it/s]
 89%| | 70/79 [00:03<00:00, 25.64it/s]
 92%|| 73/79 [00:03<00:00, 25.94it/s]
 96%|| 76/79 [00:03<00:00, 26.46it/s]
100%|| 79/79 [00:03<00:00, 27.23it/s]
, 23.78it/s]
 70%|   | 55/79 [00:02<00:00, 24.34it/s]
 73%|  | 58/79 [00:03<00:00, 24.44it/s]
 77%|  | 61/79 [00:03<00:00, 24.69it/s]
 81%|  | 64/79 [00:03<00:00, 24.98it/s]
 85%| | 67/79 [00:03<00:00, 25.13it/s]
 89%| | 70/79 [00:03<00:00, 25.16it/s]
 92%|| 73/79 [00:03<00:00, 25.45it/s]
 96%|| 76/79 [00:03<00:00, 26.20it/s]
100%|| 79/79 [00:03<00:00, 26.83it/s]
, 24.30it/s]
 70%|   | 55/79 [00:02<00:00, 24.66it/s]
 73%|  | 58/79 [00:03<00:00, 24.93it/s]
 77%|  | 61/79 [00:03<00:00, 25.33it/s]
 81%|  | 64/79 [00:03<00:00, 25.33it/s]
 85%| | 67/79 [00:03<00:00, 25.75it/s]
 89%| | 70/79 [00:03<00:00, 25.97it/s]
 92%|| 73/79 [00:03<00:00, 26.26it/s]
 96%|| 76/79 [00:03<00:00, 26.84it/s]
100%|| 79/79 [00:03<00:00, 27.63it/s]
, 24.45it/s]
 70%|   | 55/79 [00:02<00:00, 24.99it/s]
 73%|  | 58/79 [00:03<00:00, 25.16it/s]
 77%|  | 61/79 [00:03<00:00, 25.43it/s]
 81%|  | 64/79 [00:03<00:00, 25.56it/s]
 85%| | 67/79 [00:03<00:00, 25.34it/s]
 89%| | 70/79 [00:03<00:00, 25.57it/s]
 92%|| 73/79 [00:03<00:00, 25.75it/s]
 96%|| 76/79 [00:03<00:00, 26.54it/s]
100%|| 79/79 [00:03<00:00, 27.37it/s]
, 24.73it/s]
 70%|   | 55/79 [00:02<00:00, 25.18it/s]
 73%|  | 58/79 [00:03<00:00, 25.43it/s]
 77%|  | 61/79 [00:03<00:00, 25.63it/s]
 81%|  | 64/79 [00:03<00:00, 25.51it/s]
 85%| | 67/79 [00:03<00:00, 25.56it/s]
 89%| | 70/79 [00:03<00:00, 25.27it/s]
 92%|| 73/79 [00:03<00:00, 25.68it/s]
 96%|| 76/79 [00:03<00:00, 26.16it/s]
100%|| 79/79 [00:03<00:00, 27.14it/s]
, 24.54it/s]
 70%|   | 55/79 [00:02<00:00, 25.05it/s]
 73%|  | 58/79 [00:03<00:00, 25.37it/s]
 77%|  | 61/79 [00:03<00:00, 25.46it/s]
 81%|  | 64/79 [00:03<00:00, 25.54it/s]
 85%| | 67/79 [00:03<00:00, 25.47it/s]
 89%| | 70/79 [00:03<00:00, 25.61it/s]
 92%|| 73/79 [00:03<00:00, 26.12it/s]
 96%|| 76/79 [00:03<00:00, 26.70it/s]
100%|| 79/79 [00:03<00:00, 27.58it/s]
, 24.37it/s]
 70%|   | 55/79 [00:02<00:00, 24.64it/s]
 73%|  | 58/79 [00:03<00:00, 25.14it/s]
 77%|  | 61/79 [00:03<00:00, 25.28it/s]
 81%|  | 64/79 [00:03<00:00, 25.69it/s]
 85%| | 67/79 [00:03<00:00, 25.88it/s]
 89%| | 70/79 [00:03<00:00, 26.12it/s]
 92%|| 73/79 [00:03<00:00, 26.42it/s]
 96%|| 76/79 [00:03<00:00, 26.99it/s]
100%|| 79/79 [00:03<00:00, 27.71it/s]
, 24.45it/s]
 70%|   | 55/79 [00:02<00:00, 24.77it/s]
 73%|  | 58/79 [00:03<00:00, 25.05it/s]
 77%|  | 61/79 [00:03<00:00, 25.26it/s]
 81%|  | 64/79 [00:03<00:00, 25.41it/s]
 85%| | 67/79 [00:03<00:00, 25.49it/s]
 89%| | 70/79 [00:03<00:00, 25.54it/s]
 92%|| 73/79 [00:03<00:00, 25.99it/s]
 96%|| 76/79 [00:03<00:00, 26.65it/s]
100%|| 79/79 [00:03<00:00, 27.45it/s]
, 23.74it/s]
 70%|   | 55/79 [00:03<00:00, 24.11it/s]
 73%|  | 58/79 [00:03<00:00, 24.57it/s]
 77%|  | 61/79 [00:03<00:00, 24.81it/s]
 81%|  | 64/79 [00:03<00:00, 24.98it/s]
 85%| | 67/79 [00:03<00:00, 25.14it/s]
 89%| | 70/79 [00:03<00:00, 25.05it/s]
 92%|| 73/79 [00:03<00:00, 25.35it/s]
 96%|| 76/79 [00:03<00:00, 26.30it/s]
100%|| 79/79 [00:03<00:00, 27.28it/s]
, 23.88it/s]
 70%|   | 55/79 [00:03<00:00, 24.22it/s]
 73%|  | 58/79 [00:03<00:00, 24.66it/s]
 77%|  | 61/79 [00:03<00:00, 24.99it/s]
 81%|  | 64/79 [00:03<00:00, 25.07it/s]
 85%| | 67/79 [00:03<00:00, 25.13it/s]
 89%| | 70/79 [00:03<00:00, 25.44it/s]
 92%|| 73/79 [00:03<00:00, 25.68it/s]
 96%|| 76/79 [00:03<00:00, 26.38it/s]
100%|| 79/79 [00:03<00:00, 27.30it/s]
, 23.75it/s]
 70%|   | 55/79 [00:03<00:01, 23.99it/s]
 73%|  | 58/79 [00:03<00:00, 24.33it/s]
 77%|  | 61/79 [00:03<00:00, 24.91it/s]
 81%|  | 64/79 [00:03<00:00, 24.69it/s]
 85%| | 67/79 [00:03<00:00, 24.92it/s]
 89%| | 70/79 [00:03<00:00, 25.11it/s]
 92%|| 73/79 [00:03<00:00, 25.48it/s]
 96%|| 76/79 [00:03<00:00, 26.20it/s]
100%|| 79/79 [00:03<00:00, 27.19it/s]
, 24.44it/s]
 70%|   | 55/79 [00:03<00:00, 25.00it/s]
 73%|  | 58/79 [00:03<00:00, 24.77it/s]
 77%|  | 61/79 [00:03<00:00, 24.90it/s]
 81%|  | 64/79 [00:03<00:00, 25.08it/s]
 85%| | 67/79 [00:03<00:00, 25.37it/s]
 89%| | 70/79 [00:03<00:00, 25.33it/s]
 92%|| 73/79 [00:03<00:00, 25.75it/s]
 96%|| 76/79 [00:03<00:00, 26.32it/s]
100%|| 79/79 [00:03<00:00, 27.26it/s]
, 23.99it/s]
 70%|   | 55/79 [00:03<00:00, 24.12it/s]
 73%|  | 58/79 [00:03<00:00, 24.15it/s]
 77%|  | 61/79 [00:03<00:00, 24.48it/s]
 81%|  | 64/79 [00:03<00:00, 24.79it/s]
 85%| | 67/79 [00:03<00:00, 24.72it/s]
 89%| | 70/79 [00:03<00:00, 24.76it/s]
 92%|| 73/79 [00:03<00:00, 24.98it/s]
 96%|| 76/79 [00:03<00:00, 25.93it/s]
100%|| 79/79 [00:03<00:00, 26.19it/s]
, 23.81it/s]
 70%|   | 55/79 [00:03<00:00, 24.05it/s]
 73%|  | 58/79 [00:03<00:00, 24.38it/s]
 77%|  | 61/79 [00:03<00:00, 24.31it/s]
 81%|  | 64/79 [00:03<00:00, 24.54it/s]
 85%| | 67/79 [00:03<00:00, 24.77it/s]
 89%| | 70/79 [00:03<00:00, 24.89it/s]
 92%|| 73/79 [00:03<00:00, 25.24it/s]
 96%|| 76/79 [00:03<00:00, 25.86it/s]
100%|| 79/79 [00:03<00:00, 26.77it/s]
, 23.98it/s]
 70%|   | 55/79 [00:03<00:00, 24.43it/s]
 73%|  | 58/79 [00:03<00:00, 24.70it/s]
 77%|  | 61/79 [00:03<00:00, 24.93it/s]
 81%|  | 64/79 [00:03<00:00, 25.10it/s]
 85%| | 67/79 [00:03<00:00, 25.22it/s]
 89%| | 70/79 [00:03<00:00, 25.06it/s]
 92%|| 73/79 [00:03<00:00, 25.25it/s]
 96%|| 76/79 [00:03<00:00, 25.84it/s]
100%|| 79/79 [00:03<00:00, 26.55it/s]
, 23.13it/s]
 70%|   | 55/79 [00:03<00:01, 23.46it/s]
 73%|  | 58/79 [00:03<00:00, 23.96it/s]
 77%|  | 61/79 [00:03<00:00, 24.25it/s]
 81%|  | 64/79 [00:03<00:00, 24.23it/s]
 85%| | 67/79 [00:03<00:00, 24.58it/s]
 89%| | 70/79 [00:03<00:00, 24.64it/s]
 92%|| 73/79 [00:03<00:00, 25.02it/s]
 96%|| 76/79 [00:03<00:00, 25.81it/s]
100%|| 79/79 [00:04<00:00, 26.78it/s]
75it/s]
 68%|   | 54/79 [00:03<00:01, 24.19it/s]
 72%|  | 57/79 [00:03<00:00, 24.52it/s]
 76%|  | 60/79 [00:03<00:00, 24.84it/s]
 80%|  | 63/79 [00:03<00:00, 24.94it/s]
 84%| | 66/79 [00:03<00:00, 25.13it/s]
 87%| | 69/79 [00:03<00:00, 25.41it/s]
 91%| | 72/79 [00:03<00:00, 25.15it/s]
 95%|| 75/79 [00:03<00:00, 25.79it/s]
 99%|| 78/79 [00:03<00:00, 26.23it/s]
100%|| 79/79 [00:04<00:00, 19.40it/s]
, 23.81it/s]
 70%|   | 55/79 [00:03<00:00, 24.03it/s]
 73%|  | 58/79 [00:03<00:00, 24.30it/s]
 77%|  | 61/79 [00:03<00:00, 24.33it/s]
 81%|  | 64/79 [00:03<00:00, 24.52it/s]
 85%| | 67/79 [00:03<00:00, 24.69it/s]
 89%| | 70/79 [00:03<00:00, 24.86it/s]
 92%|| 73/79 [00:03<00:00, 25.09it/s]
 96%|| 76/79 [00:03<00:00, 25.74it/s]
100%|| 79/79 [00:03<00:00, 26.58it/s]
, 22.99it/s]
 70%|   | 55/79 [00:03<00:01, 23.40it/s]
 73%|  | 58/79 [00:03<00:00, 24.07it/s]
 77%|  | 61/79 [00:03<00:00, 24.29it/s]
 81%|  | 64/79 [00:03<00:00, 24.29it/s]
 85%| | 67/79 [00:03<00:00, 24.49it/s]
 89%| | 70/79 [00:03<00:00, 24.33it/s]
 92%|| 73/79 [00:03<00:00, 24.76it/s]
 96%|| 76/79 [00:03<00:00, 25.54it/s]
100%|| 79/79 [00:04<00:00, 26.43it/s]
69it/s]
 68%|   | 54/79 [00:03<00:01, 24.15it/s]
 72%|  | 57/79 [00:03<00:00, 24.43it/s]
 76%|  | 60/79 [00:03<00:00, 24.56it/s]
 80%|  | 63/79 [00:03<00:00, 24.51it/s]
 84%| | 66/79 [00:03<00:00, 24.88it/s]
 87%| | 69/79 [00:03<00:00, 24.88it/s]
 91%| | 72/79 [00:03<00:00, 25.27it/s]
 95%|| 75/79 [00:03<00:00, 25.83it/s]
 99%|| 78/79 [00:04<00:00, 26.21it/s]
100%|| 79/79 [00:04<00:00, 19.23it/s]
, 23.37it/s]
 70%|   | 55/79 [00:03<00:01, 23.91it/s]
 73%|  | 58/79 [00:03<00:00, 24.07it/s]
 77%|  | 61/79 [00:03<00:00, 24.45it/s]
 81%|  | 64/79 [00:03<00:00, 24.68it/s]
 85%| | 67/79 [00:03<00:00, 24.90it/s]
 89%| | 70/79 [00:03<00:00, 24.85it/s]
 92%|| 73/79 [00:03<00:00, 25.15it/s]
 96%|| 76/79 [00:03<00:00, 25.72it/s]
100%|| 79/79 [00:04<00:00, 26.40it/s]
2020-06-23 17:43:16,148 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.172301 (0.026702723693847658 s / img per device, on 32 devices)
2020-06-23 17:43:16,167 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:43:16,167 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:43:16,186 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592959403237, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 14, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592959403238, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 14}}
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:43:25,341 maskrcnn_benchmark.trainer INFO: eta: 0:58:14  iter: 11940  loss: 0.5476 (0.7157)  loss_classifier: 0.1893 (0.2597)  loss_box_reg: 0.0917 (0.1159)  loss_mask: 0.2490 (0.2868)  loss_objectness: 0.0170 (0.0339)  loss_rpn_box_reg: 0.0089 (0.0194)  time: 0.1108 (0.1245)  data: 0.0015 (0.0172)  lr: 0.016000  max mem: 5155
2020-06-23 17:43:27,550 maskrcnn_benchmark.trainer INFO: eta: 0:58:11  iter: 11960  loss: 0.5626 (0.7155)  loss_classifier: 0.1646 (0.2596)  loss_box_reg: 0.0927 (0.1159)  loss_mask: 0.2449 (0.2868)  loss_objectness: 0.0186 (0.0339)  loss_rpn_box_reg: 0.0070 (0.0193)  time: 0.1099 (0.1245)  data: 0.0015 (0.0172)  lr: 0.016000  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.59s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 17:43:29,783 maskrcnn_benchmark.trainer INFO: eta: 0:58:08  iter: 11980  loss: 0.4949 (0.7152)  loss_classifier: 0.1468 (0.2594)  loss_box_reg: 0.0712 (0.1158)  loss_mask: 0.2376 (0.2867)  loss_objectness: 0.0138 (0.0339)  loss_rpn_box_reg: 0.0060 (0.0193)  time: 0.1108 (0.1245)  data: 0.0014 (0.0172)  lr: 0.016000  max mem: 5155
DONE (t=1.44s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37125
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.58645
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.40219
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21780
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.40046
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.48427
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.30761
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.48964
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51405
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.32881
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.55165
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.63983
2020-06-23 17:43:31,973 maskrcnn_benchmark.trainer INFO: eta: 0:58:05  iter: 12000  loss: 0.5244 (0.7149)  loss_classifier: 0.1854 (0.2593)  loss_box_reg: 0.0701 (0.1158)  loss_mask: 0.2435 (0.2866)  loss_objectness: 0.0169 (0.0339)  loss_rpn_box_reg: 0.0069 (0.0193)  time: 0.1095 (0.1245)  data: 0.0014 (0.0172)  lr: 0.001600  max mem: 5155
2020-06-23 17:43:34,181 maskrcnn_benchmark.trainer INFO: eta: 0:58:02  iter: 12020  loss: 0.5203 (0.7147)  loss_classifier: 0.1604 (0.2592)  loss_box_reg: 0.0893 (0.1158)  loss_mask: 0.2320 (0.2865)  loss_objectness: 0.0165 (0.0338)  loss_rpn_box_reg: 0.0076 (0.0193)  time: 0.1105 (0.1244)  data: 0.0014 (0.0171)  lr: 0.001600  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
2020-06-23 17:43:36,380 maskrcnn_benchmark.trainer INFO: eta: 0:57:58  iter: 12040  loss: 0.5723 (0.7144)  loss_classifier: 0.1830 (0.2591)  loss_box_reg: 0.1012 (0.1157)  loss_mask: 0.2530 (0.2865)  loss_objectness: 0.0183 (0.0338)  loss_rpn_box_reg: 0.0118 (0.0193)  time: 0.1101 (0.1244)  data: 0.0014 (0.0171)  lr: 0.001600  max mem: 5155
DONE (t=1.54s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:43:38,575 maskrcnn_benchmark.trainer INFO: eta: 0:57:55  iter: 12060  loss: 0.5734 (0.7142)  loss_classifier: 0.1790 (0.2590)  loss_box_reg: 0.1028 (0.1157)  loss_mask: 0.2524 (0.2864)  loss_objectness: 0.0109 (0.0338)  loss_rpn_box_reg: 0.0079 (0.0193)  time: 0.1089 (0.1244)  data: 0.0015 (0.0171)  lr: 0.001600  max mem: 5155
DONE (t=2.35s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.33985
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.55569
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.36119
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.15607
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36648
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.50033
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29145
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.45023
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.46985
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27455
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50875
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.61558
2020-06-23 17:43:39,818 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.3712486918476363, segm mAP: 0.339849463201573
:::MLLOG {"namespace": "", "time_ms": 1592959419819, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.3712486918476363, "SEGM": 0.339849463201573}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 13}}
:::MLLOG {"namespace": "", "time_ms": 1592959419819, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 13}}
2020-06-23 17:43:40,918 maskrcnn_benchmark.trainer INFO: eta: 0:57:52  iter: 12080  loss: 0.5773 (0.7139)  loss_classifier: 0.1632 (0.2588)  loss_box_reg: 0.0957 (0.1157)  loss_mask: 0.2351 (0.2863)  loss_objectness: 0.0160 (0.0338)  loss_rpn_box_reg: 0.0062 (0.0193)  time: 0.1101 (0.1244)  data: 0.0015 (0.0171)  lr: 0.001600  max mem: 5155
2020-06-23 17:43:43,115 maskrcnn_benchmark.trainer INFO: eta: 0:57:49  iter: 12100  loss: 0.5118 (0.7135)  loss_classifier: 0.1728 (0.2587)  loss_box_reg: 0.0800 (0.1156)  loss_mask: 0.2243 (0.2862)  loss_objectness: 0.0118 (0.0337)  loss_rpn_box_reg: 0.0055 (0.0193)  time: 0.1099 (0.1244)  data: 0.0013 (0.0170)  lr: 0.001600  max mem: 5155
2020-06-23 17:43:45,312 maskrcnn_benchmark.trainer INFO: eta: 0:57:46  iter: 12120  loss: 0.6310 (0.7134)  loss_classifier: 0.1957 (0.2586)  loss_box_reg: 0.1054 (0.1156)  loss_mask: 0.2708 (0.2862)  loss_objectness: 0.0150 (0.0337)  loss_rpn_box_reg: 0.0124 (0.0193)  time: 0.1091 (0.1243)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5155
2020-06-23 17:43:47,474 maskrcnn_benchmark.trainer INFO: eta: 0:57:43  iter: 12140  loss: 0.5548 (0.7131)  loss_classifier: 0.1774 (0.2585)  loss_box_reg: 0.0874 (0.1156)  loss_mask: 0.2433 (0.2861)  loss_objectness: 0.0152 (0.0337)  loss_rpn_box_reg: 0.0109 (0.0193)  time: 0.1082 (0.1243)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5155
2020-06-23 17:43:49,648 maskrcnn_benchmark.trainer INFO: eta: 0:57:40  iter: 12160  loss: 0.5471 (0.7129)  loss_classifier: 0.1863 (0.2584)  loss_box_reg: 0.0935 (0.1155)  loss_mask: 0.2454 (0.2860)  loss_objectness: 0.0165 (0.0337)  loss_rpn_box_reg: 0.0070 (0.0193)  time: 0.1089 (0.1243)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5155
2020-06-23 17:43:51,823 maskrcnn_benchmark.trainer INFO: eta: 0:57:36  iter: 12180  loss: 0.5431 (0.7127)  loss_classifier: 0.1560 (0.2583)  loss_box_reg: 0.0806 (0.1155)  loss_mask: 0.2419 (0.2859)  loss_objectness: 0.0158 (0.0337)  loss_rpn_box_reg: 0.0081 (0.0193)  time: 0.1087 (0.1243)  data: 0.0013 (0.0169)  lr: 0.001600  max mem: 5155
2020-06-23 17:43:53,993 maskrcnn_benchmark.trainer INFO: eta: 0:57:33  iter: 12200  loss: 0.5280 (0.7125)  loss_classifier: 0.1775 (0.2582)  loss_box_reg: 0.0860 (0.1155)  loss_mask: 0.2219 (0.2859)  loss_objectness: 0.0119 (0.0337)  loss_rpn_box_reg: 0.0068 (0.0193)  time: 0.1084 (0.1242)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5155

Grad overflow on iteration  12216

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0


Grad overflow on iteration  12216
Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0

Grad overflow on iteration  12216
Using dynamic loss scale of  65536.0
2020-06-23 17:43:56,184 maskrcnn_benchmark.trainer INFO: eta: 0:57:30  iter: 12220  loss: 0.4528 (0.7121)  loss_classifier: 0.1387 (0.2580)  loss_box_reg: 0.0714 (0.1154)  loss_mask: 0.2219 (0.2858)  loss_objectness: 0.0132 (0.0337)  loss_rpn_box_reg: 0.0055 (0.0193)  time: 0.1092 (0.1242)  data: 0.0013 (0.0169)  lr: 0.001600  max mem: 5155
2020-06-23 17:43:58,391 maskrcnn_benchmark.trainer INFO: eta: 0:57:27  iter: 12240  loss: 0.6100 (0.7119)  loss_classifier: 0.2146 (0.2579)  loss_box_reg: 0.1012 (0.1154)  loss_mask: 0.2616 (0.2857)  loss_objectness: 0.0175 (0.0336)  loss_rpn_box_reg: 0.0099 (0.0193)  time: 0.1088 (0.1242)  data: 0.0014 (0.0169)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:00,553 maskrcnn_benchmark.trainer INFO: eta: 0:57:24  iter: 12260  loss: 0.4689 (0.7116)  loss_classifier: 0.1335 (0.2578)  loss_box_reg: 0.0776 (0.1153)  loss_mask: 0.2229 (0.2856)  loss_objectness: 0.0107 (0.0336)  loss_rpn_box_reg: 0.0038 (0.0193)  time: 0.1087 (0.1242)  data: 0.0013 (0.0168)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:02,746 maskrcnn_benchmark.trainer INFO: eta: 0:57:21  iter: 12280  loss: 0.4947 (0.7113)  loss_classifier: 0.1639 (0.2576)  loss_box_reg: 0.0830 (0.1153)  loss_mask: 0.2435 (0.2856)  loss_objectness: 0.0159 (0.0336)  loss_rpn_box_reg: 0.0098 (0.0193)  time: 0.1092 (0.1241)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:04,955 maskrcnn_benchmark.trainer INFO: eta: 0:57:18  iter: 12300  loss: 0.6265 (0.7111)  loss_classifier: 0.1900 (0.2575)  loss_box_reg: 0.0982 (0.1153)  loss_mask: 0.2636 (0.2855)  loss_objectness: 0.0137 (0.0336)  loss_rpn_box_reg: 0.0074 (0.0192)  time: 0.1093 (0.1241)  data: 0.0014 (0.0168)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:07,130 maskrcnn_benchmark.trainer INFO: eta: 0:57:14  iter: 12320  loss: 0.4007 (0.7107)  loss_classifier: 0.1410 (0.2573)  loss_box_reg: 0.0617 (0.1152)  loss_mask: 0.2149 (0.2854)  loss_objectness: 0.0116 (0.0335)  loss_rpn_box_reg: 0.0070 (0.0192)  time: 0.1084 (0.1241)  data: 0.0013 (0.0168)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:09,320 maskrcnn_benchmark.trainer INFO: eta: 0:57:11  iter: 12340  loss: 0.5524 (0.7105)  loss_classifier: 0.1485 (0.2572)  loss_box_reg: 0.0879 (0.1152)  loss_mask: 0.2373 (0.2853)  loss_objectness: 0.0133 (0.0335)  loss_rpn_box_reg: 0.0070 (0.0192)  time: 0.1091 (0.1241)  data: 0.0013 (0.0167)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:11,507 maskrcnn_benchmark.trainer INFO: eta: 0:57:08  iter: 12360  loss: 0.4812 (0.7102)  loss_classifier: 0.1349 (0.2570)  loss_box_reg: 0.0681 (0.1151)  loss_mask: 0.2371 (0.2853)  loss_objectness: 0.0121 (0.0335)  loss_rpn_box_reg: 0.0081 (0.0192)  time: 0.1093 (0.1240)  data: 0.0013 (0.0167)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:13,700 maskrcnn_benchmark.trainer INFO: eta: 0:57:05  iter: 12380  loss: 0.4697 (0.7098)  loss_classifier: 0.1630 (0.2569)  loss_box_reg: 0.0735 (0.1151)  loss_mask: 0.2245 (0.2852)  loss_objectness: 0.0074 (0.0335)  loss_rpn_box_reg: 0.0054 (0.0192)  time: 0.1096 (0.1240)  data: 0.0013 (0.0167)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:15,873 maskrcnn_benchmark.trainer INFO: eta: 0:57:02  iter: 12400  loss: 0.5407 (0.7096)  loss_classifier: 0.1556 (0.2568)  loss_box_reg: 0.0840 (0.1151)  loss_mask: 0.2488 (0.2851)  loss_objectness: 0.0095 (0.0334)  loss_rpn_box_reg: 0.0085 (0.0192)  time: 0.1085 (0.1240)  data: 0.0014 (0.0167)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:18,069 maskrcnn_benchmark.trainer INFO: eta: 0:56:59  iter: 12420  loss: 0.4730 (0.7093)  loss_classifier: 0.1408 (0.2566)  loss_box_reg: 0.0677 (0.1150)  loss_mask: 0.2222 (0.2851)  loss_objectness: 0.0070 (0.0334)  loss_rpn_box_reg: 0.0074 (0.0192)  time: 0.1090 (0.1240)  data: 0.0013 (0.0166)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:20,250 maskrcnn_benchmark.trainer INFO: eta: 0:56:56  iter: 12440  loss: 0.4330 (0.7089)  loss_classifier: 0.1538 (0.2565)  loss_box_reg: 0.0713 (0.1149)  loss_mask: 0.1998 (0.2850)  loss_objectness: 0.0061 (0.0334)  loss_rpn_box_reg: 0.0050 (0.0191)  time: 0.1092 (0.1239)  data: 0.0013 (0.0166)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:22,425 maskrcnn_benchmark.trainer INFO: eta: 0:56:52  iter: 12460  loss: 0.4955 (0.7086)  loss_classifier: 0.1846 (0.2564)  loss_box_reg: 0.0762 (0.1149)  loss_mask: 0.2185 (0.2849)  loss_objectness: 0.0168 (0.0334)  loss_rpn_box_reg: 0.0075 (0.0191)  time: 0.1085 (0.1239)  data: 0.0014 (0.0166)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:24,612 maskrcnn_benchmark.trainer INFO: eta: 0:56:49  iter: 12480  loss: 0.5191 (0.7083)  loss_classifier: 0.1688 (0.2562)  loss_box_reg: 0.0771 (0.1148)  loss_mask: 0.2173 (0.2848)  loss_objectness: 0.0108 (0.0333)  loss_rpn_box_reg: 0.0059 (0.0191)  time: 0.1090 (0.1239)  data: 0.0013 (0.0166)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:26,813 maskrcnn_benchmark.trainer INFO: eta: 0:56:46  iter: 12500  loss: 0.5310 (0.7081)  loss_classifier: 0.1807 (0.2561)  loss_box_reg: 0.0808 (0.1148)  loss_mask: 0.2339 (0.2847)  loss_objectness: 0.0091 (0.0333)  loss_rpn_box_reg: 0.0084 (0.0191)  time: 0.1100 (0.1239)  data: 0.0014 (0.0165)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:29,008 maskrcnn_benchmark.trainer INFO: eta: 0:56:43  iter: 12520  loss: 0.4710 (0.7078)  loss_classifier: 0.1587 (0.2560)  loss_box_reg: 0.0757 (0.1147)  loss_mask: 0.2374 (0.2846)  loss_objectness: 0.0103 (0.0333)  loss_rpn_box_reg: 0.0073 (0.0191)  time: 0.1096 (0.1239)  data: 0.0013 (0.0165)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:31,213 maskrcnn_benchmark.trainer INFO: eta: 0:56:40  iter: 12540  loss: 0.4513 (0.7073)  loss_classifier: 0.1198 (0.2558)  loss_box_reg: 0.0627 (0.1147)  loss_mask: 0.2473 (0.2845)  loss_objectness: 0.0064 (0.0332)  loss_rpn_box_reg: 0.0033 (0.0191)  time: 0.1097 (0.1238)  data: 0.0013 (0.0165)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:33,393 maskrcnn_benchmark.trainer INFO: eta: 0:56:37  iter: 12560  loss: 0.4842 (0.7071)  loss_classifier: 0.1518 (0.2557)  loss_box_reg: 0.0754 (0.1146)  loss_mask: 0.2355 (0.2845)  loss_objectness: 0.0151 (0.0332)  loss_rpn_box_reg: 0.0040 (0.0191)  time: 0.1087 (0.1238)  data: 0.0013 (0.0165)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:35,588 maskrcnn_benchmark.trainer INFO: eta: 0:56:34  iter: 12580  loss: 0.5913 (0.7068)  loss_classifier: 0.1789 (0.2556)  loss_box_reg: 0.0980 (0.1146)  loss_mask: 0.2540 (0.2844)  loss_objectness: 0.0117 (0.0332)  loss_rpn_box_reg: 0.0071 (0.0191)  time: 0.1097 (0.1238)  data: 0.0014 (0.0164)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:37,768 maskrcnn_benchmark.trainer INFO: eta: 0:56:31  iter: 12600  loss: 0.4341 (0.7065)  loss_classifier: 0.1263 (0.2554)  loss_box_reg: 0.0649 (0.1145)  loss_mask: 0.2020 (0.2843)  loss_objectness: 0.0199 (0.0332)  loss_rpn_box_reg: 0.0059 (0.0191)  time: 0.1088 (0.1238)  data: 0.0013 (0.0164)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:39,950 maskrcnn_benchmark.trainer INFO: eta: 0:56:28  iter: 12620  loss: 0.4428 (0.7061)  loss_classifier: 0.1351 (0.2552)  loss_box_reg: 0.0621 (0.1145)  loss_mask: 0.2435 (0.2842)  loss_objectness: 0.0097 (0.0332)  loss_rpn_box_reg: 0.0041 (0.0190)  time: 0.1087 (0.1237)  data: 0.0013 (0.0164)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:42,124 maskrcnn_benchmark.trainer INFO: eta: 0:56:24  iter: 12640  loss: 0.5143 (0.7059)  loss_classifier: 0.1471 (0.2551)  loss_box_reg: 0.0877 (0.1144)  loss_mask: 0.2542 (0.2841)  loss_objectness: 0.0124 (0.0331)  loss_rpn_box_reg: 0.0089 (0.0190)  time: 0.1092 (0.1237)  data: 0.0014 (0.0164)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:44,292 maskrcnn_benchmark.trainer INFO: eta: 0:56:21  iter: 12660  loss: 0.5249 (0.7057)  loss_classifier: 0.1673 (0.2550)  loss_box_reg: 0.0855 (0.1144)  loss_mask: 0.2549 (0.2841)  loss_objectness: 0.0122 (0.0331)  loss_rpn_box_reg: 0.0061 (0.0190)  time: 0.1072 (0.1237)  data: 0.0015 (0.0163)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:46,469 maskrcnn_benchmark.trainer INFO: eta: 0:56:18  iter: 12680  loss: 0.5363 (0.7054)  loss_classifier: 0.1765 (0.2549)  loss_box_reg: 0.0832 (0.1144)  loss_mask: 0.2330 (0.2840)  loss_objectness: 0.0110 (0.0331)  loss_rpn_box_reg: 0.0095 (0.0190)  time: 0.1084 (0.1237)  data: 0.0014 (0.0163)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:48,659 maskrcnn_benchmark.trainer INFO: eta: 0:56:15  iter: 12700  loss: 0.5313 (0.7051)  loss_classifier: 0.1765 (0.2547)  loss_box_reg: 0.0812 (0.1143)  loss_mask: 0.2183 (0.2840)  loss_objectness: 0.0151 (0.0331)  loss_rpn_box_reg: 0.0077 (0.0190)  time: 0.1088 (0.1236)  data: 0.0013 (0.0163)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:50,834 maskrcnn_benchmark.trainer INFO: eta: 0:56:12  iter: 12720  loss: 0.5190 (0.7049)  loss_classifier: 0.1710 (0.2546)  loss_box_reg: 0.0944 (0.1143)  loss_mask: 0.2379 (0.2839)  loss_objectness: 0.0141 (0.0331)  loss_rpn_box_reg: 0.0060 (0.0190)  time: 0.1081 (0.1236)  data: 0.0013 (0.0163)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:53,010 maskrcnn_benchmark.trainer INFO: eta: 0:56:09  iter: 12740  loss: 0.5691 (0.7047)  loss_classifier: 0.1768 (0.2545)  loss_box_reg: 0.0871 (0.1143)  loss_mask: 0.2381 (0.2838)  loss_objectness: 0.0140 (0.0330)  loss_rpn_box_reg: 0.0067 (0.0190)  time: 0.1088 (0.1236)  data: 0.0014 (0.0162)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:55,180 maskrcnn_benchmark.trainer INFO: eta: 0:56:06  iter: 12760  loss: 0.5511 (0.7045)  loss_classifier: 0.1964 (0.2545)  loss_box_reg: 0.1061 (0.1143)  loss_mask: 0.2525 (0.2838)  loss_objectness: 0.0160 (0.0330)  loss_rpn_box_reg: 0.0082 (0.0190)  time: 0.1078 (0.1236)  data: 0.0014 (0.0162)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:57,347 maskrcnn_benchmark.trainer INFO: eta: 0:56:03  iter: 12780  loss: 0.6126 (0.7043)  loss_classifier: 0.2103 (0.2544)  loss_box_reg: 0.0955 (0.1142)  loss_mask: 0.2349 (0.2837)  loss_objectness: 0.0167 (0.0330)  loss_rpn_box_reg: 0.0115 (0.0190)  time: 0.1086 (0.1236)  data: 0.0014 (0.0162)  lr: 0.001600  max mem: 5155
2020-06-23 17:44:59,542 maskrcnn_benchmark.trainer INFO: eta: 0:56:00  iter: 12800  loss: 0.5866 (0.7042)  loss_classifier: 0.2166 (0.2543)  loss_box_reg: 0.1067 (0.1142)  loss_mask: 0.2367 (0.2837)  loss_objectness: 0.0114 (0.0330)  loss_rpn_box_reg: 0.0082 (0.0190)  time: 0.1096 (0.1235)  data: 0.0013 (0.0162)  lr: 0.001600  max mem: 5155
2020-06-23 17:45:01,717 maskrcnn_benchmark.trainer INFO: eta: 0:55:57  iter: 12820  loss: 0.5459 (0.7040)  loss_classifier: 0.1716 (0.2542)  loss_box_reg: 0.1042 (0.1142)  loss_mask: 0.2577 (0.2836)  loss_objectness: 0.0167 (0.0330)  loss_rpn_box_reg: 0.0078 (0.0190)  time: 0.1086 (0.1235)  data: 0.0014 (0.0162)  lr: 0.001600  max mem: 5155
:::MLLOG {"namespace": "", "time_ms": 1592959503675, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 78, "epoch_num": 14}}
:::MLLOG {"namespace": "", "time_ms": 1592959503675, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 79, "first_epoch_num": 14}}
:::MLLOG {"namespace": "", "time_ms": 1592959503675, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 80, "epoch_num": 14}}
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
2020-06-23 17:45:03,916 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
loading annotations into memory...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
index created!
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
Done (t=0.26s)
creating index...
Done (t=0.27s)
creating index...
index created!
index created!
Done (t=0.27s)
index created!
creating index...
Done (t=0.28s)
creating index...
Done (t=0.26s)
creating index...
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.27s)
index created!
creating index...
index created!
index created!
Done (t=0.27s)
creating index...
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
index created!
Done (t=0.28s)
creating index...
Done (t=0.28s)
creating index...
Done (t=0.29s)
creating index...
Done (t=0.28s)
creating index...
index created!
index created!
index created!
2020-06-23 17:45:04,221 maskrcnn_benchmark.inference INFO: Start evaluation on coco_2017_val dataset(5000 images).
index created!
index created!
index created!
index created!

  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.26it/s]
  5%|         | 4/79 [00:00<00:42,  1.75it/s]
  9%|         | 7/79 [00:01<00:29,  2.44it/s]
 13%|        | 10/79 [00:01<00:20,  3.34it/s]
 16%|        | 13/79 [00:01<00:14,  4.52it/s]
 20%|        | 16/79 [00:01<00:10,  6.01it/s]
 24%|       | 19/79 [00:01<00:07,  7.82it/s]
 28%|       | 22/79 [00:01<00:05,  9.92it/s]
 32%|      | 25/79 [00:01<00:04, 12.20it/s]
 35%|      | 28/79 [00:01<00:03, 14.59it/s]
 39%|      | 31/79 [00:01<00:02, 16.70it/s]
 43%|     | 34/79 [00:02<00:02, 18.77it/s]
 47%|     | 37/79 [00:02<00:02, 20.45it/s]
 51%|     | 40/79 [00:02<00:01, 21.85it/s]
 54%|    | 43/79 [00:02<00:01, 23.01it/s]
 58%|    | 46/79 [00:02<00:01, 23.76it/s]
 62%|   | 49/79 [00:02<00:01, 24.17it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  5%|         | 4/79 [00:00<00:43,  1.72it/s]
  9%|         | 7/79 [00:01<00:30,  2.38it/s]
 13%|        | 10/79 [00:01<00:21,  3.28it/s]
 16%|        | 13/79 [00:01<00:14,  4.44it/s]
 20%|        | 16/79 [00:01<00:10,  5.90it/s]
 24%|       | 19/79 [00:01<00:07,  7.71it/s]
 28%|       | 22/79 [00:01<00:05,  9.76it/s]
 32%|      | 25/79 [00:01<00:04, 11.98it/s]
 35%|      | 28/79 [00:01<00:03, 14.28it/s]
 39%|      | 31/79 [00:01<00:02, 16.57it/s]
 43%|     | 34/79 [00:02<00:02, 18.48it/s]
 47%|     | 37/79 [00:02<00:02, 20.15it/s]
 51%|     | 40/79 [00:02<00:01, 21.49it/s]
 54%|    | 43/79 [00:02<00:01, 22.72it/s]
 58%|    | 46/79 [00:02<00:01, 23.47it/s]
 62%|   | 49/79 [00:02<00:01, 24.04it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.24it/s]
  4%|         | 3/79 [00:00<00:44,  1.72it/s]
  8%|         | 6/79 [00:01<00:30,  2.39it/s]
 11%|        | 9/79 [00:01<00:21,  3.28it/s]
 15%|        | 12/79 [00:01<00:15,  4.45it/s]
 19%|        | 15/79 [00:01<00:10,  5.93it/s]
 23%|       | 18/79 [00:01<00:07,  7.69it/s]
 27%|       | 21/79 [00:01<00:05,  9.74it/s]
 30%|       | 24/79 [00:01<00:04, 11.94it/s]
 34%|      | 27/79 [00:01<00:03, 14.39it/s]
 38%|      | 30/79 [00:01<00:02, 16.59it/s]
 42%|     | 33/79 [00:02<00:02, 18.51it/s]
 46%|     | 36/79 [00:02<00:02, 20.24it/s]
 49%|     | 39/79 [00:02<00:01, 21.72it/s]
 53%|    | 42/79 [00:02<00:01, 22.85it/s]
 57%|    | 45/79 [00:02<00:01, 23.58it/s]
 61%|    | 48/79 [00:02<00:01, 24.24it/s]
 65%|   | 51/79 [00:02<00:01, 25.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.35it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.84it/s]
 24%|       | 19/79 [00:01<00:07,  7.62it/s]
 28%|       | 22/79 [00:01<00:05,  9.65it/s]
 32%|      | 25/79 [00:01<00:04, 11.90it/s]
 35%|      | 28/79 [00:01<00:03, 14.29it/s]
 39%|      | 31/79 [00:01<00:02, 16.61it/s]
 43%|     | 34/79 [00:02<00:02, 18.67it/s]
 47%|     | 37/79 [00:02<00:02, 20.43it/s]
 51%|     | 40/79 [00:02<00:01, 21.83it/s]
 54%|    | 43/79 [00:02<00:01, 23.02it/s]
 58%|    | 46/79 [00:02<00:01, 23.63it/s]
 62%|   | 49/79 [00:02<00:01, 24.38it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:02,  1.25it/s]
  4%|         | 3/79 [00:00<00:43,  1.73it/s]
  8%|         | 6/79 [00:01<00:30,  2.40it/s]
 11%|        | 9/79 [00:01<00:21,  3.29it/s]
 15%|        | 12/79 [00:01<00:15,  4.45it/s]
 19%|        | 15/79 [00:01<00:10,  5.94it/s]
 23%|       | 18/79 [00:01<00:07,  7.72it/s]
 27%|       | 21/79 [00:01<00:05,  9.75it/s]
 30%|       | 24/79 [00:01<00:04, 11.91it/s]
 34%|      | 27/79 [00:01<00:03, 14.13it/s]
 38%|      | 30/79 [00:01<00:02, 16.34it/s]
 42%|     | 33/79 [00:02<00:02, 18.27it/s]
 46%|     | 36/79 [00:02<00:02, 19.87it/s]
 49%|     | 39/79 [00:02<00:01, 21.52it/s]
 53%|    | 42/79 [00:02<00:01, 22.56it/s]
 57%|    | 45/79 [00:02<00:01, 23.30it/s]
 61%|    | 48/79 [00:02<00:01, 24.01it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.29it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.50it/s]
 28%|       | 22/79 [00:01<00:05,  9.56it/s]
 32%|      | 25/79 [00:01<00:04, 11.78it/s]
 35%|      | 28/79 [00:01<00:03, 14.14it/s]
 39%|      | 31/79 [00:02<00:02, 16.43it/s]
 43%|     | 34/79 [00:02<00:02, 18.52it/s]
 47%|     | 37/79 [00:02<00:02, 20.19it/s]
 51%|     | 40/79 [00:02<00:01, 21.73it/s]
 54%|    | 43/79 [00:02<00:01, 22.85it/s]
 58%|    | 46/79 [00:02<00:01, 23.65it/s]
 62%|   | 49/79 [00:02<00:01, 24.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:45,  1.66it/s]
  9%|         | 7/79 [00:01<00:31,  2.31it/s]
 13%|        | 10/79 [00:01<00:21,  3.18it/s]
 16%|        | 13/79 [00:01<00:15,  4.31it/s]
 20%|        | 16/79 [00:01<00:10,  5.74it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:05,  9.54it/s]
 32%|      | 25/79 [00:01<00:04, 11.78it/s]
 35%|      | 28/79 [00:01<00:03, 14.14it/s]
 39%|      | 31/79 [00:02<00:02, 16.41it/s]
 43%|     | 34/79 [00:02<00:02, 18.44it/s]
 47%|     | 37/79 [00:02<00:02, 20.30it/s]
 51%|     | 40/79 [00:02<00:01, 21.69it/s]
 54%|    | 43/79 [00:02<00:01, 22.81it/s]
 58%|    | 46/79 [00:02<00:01, 23.73it/s]
 62%|   | 49/79 [00:02<00:01, 24.39it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.22it/s]
  4%|         | 3/79 [00:00<00:44,  1.70it/s]
  8%|         | 6/79 [00:01<00:30,  2.36it/s]
 11%|        | 9/79 [00:01<00:21,  3.24it/s]
 15%|        | 12/79 [00:01<00:15,  4.39it/s]
 19%|        | 15/79 [00:01<00:10,  5.83it/s]
 23%|       | 18/79 [00:01<00:08,  7.59it/s]
 27%|       | 21/79 [00:01<00:06,  9.64it/s]
 30%|       | 24/79 [00:01<00:04, 11.84it/s]
 34%|      | 27/79 [00:01<00:03, 14.13it/s]
 38%|      | 30/79 [00:01<00:03, 16.32it/s]
 42%|     | 33/79 [00:02<00:02, 18.22it/s]
 46%|     | 36/79 [00:02<00:02, 20.06it/s]
 49%|     | 39/79 [00:02<00:01, 21.19it/s]
 53%|    | 42/79 [00:02<00:01, 22.26it/s]
 57%|    | 45/79 [00:02<00:01, 23.14it/s]
 61%|    | 48/79 [00:02<00:01, 23.78it/s]
 65%|   | 51/79 [00:02<00:01, 24.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.69it/s]
  9%|         | 7/79 [00:01<00:30,  2.36it/s]
 13%|        | 10/79 [00:01<00:21,  3.23it/s]
 16%|        | 13/79 [00:01<00:15,  4.38it/s]
 20%|        | 16/79 [00:01<00:10,  5.82it/s]
 24%|       | 19/79 [00:01<00:07,  7.58it/s]
 28%|       | 22/79 [00:01<00:05,  9.63it/s]
 32%|      | 25/79 [00:01<00:04, 11.83it/s]
 35%|      | 28/79 [00:01<00:03, 14.15it/s]
 39%|      | 31/79 [00:02<00:02, 16.32it/s]
 43%|     | 34/79 [00:02<00:02, 18.24it/s]
 47%|     | 37/79 [00:02<00:02, 20.05it/s]
 51%|     | 40/79 [00:02<00:01, 21.40it/s]
 54%|    | 43/79 [00:02<00:01, 22.37it/s]
 58%|    | 46/79 [00:02<00:01, 23.14it/s]
 62%|   | 49/79 [00:02<00:01, 23.74it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:03,  1.23it/s]
  4%|         | 3/79 [00:00<00:44,  1.70it/s]
  8%|         | 6/79 [00:01<00:30,  2.36it/s]
 11%|        | 9/79 [00:01<00:21,  3.24it/s]
 15%|        | 12/79 [00:01<00:15,  4.39it/s]
 19%|        | 15/79 [00:01<00:11,  5.81it/s]
 23%|       | 18/79 [00:01<00:08,  7.56it/s]
 27%|       | 21/79 [00:01<00:06,  9.57it/s]
 30%|       | 24/79 [00:01<00:04, 11.70it/s]
 34%|      | 27/79 [00:01<00:03, 13.95it/s]
 38%|      | 30/79 [00:02<00:03, 16.05it/s]
 42%|     | 33/79 [00:02<00:02, 18.05it/s]
 46%|     | 36/79 [00:02<00:02, 19.66it/s]
 49%|     | 39/79 [00:02<00:01, 20.94it/s]
 53%|    | 42/79 [00:02<00:01, 22.14it/s]
 57%|    | 45/79 [00:02<00:01, 22.98it/s]
 61%|    | 48/79 [00:02<00:01, 23.54it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.18it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.29it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.69it/s]
 24%|       | 19/79 [00:01<00:08,  7.43it/s]
 28%|       | 22/79 [00:01<00:06,  9.46it/s]
 32%|      | 25/79 [00:01<00:04, 11.70it/s]
 35%|      | 28/79 [00:01<00:03, 13.99it/s]
 39%|      | 31/79 [00:02<00:02, 16.23it/s]
 43%|     | 34/79 [00:02<00:02, 18.32it/s]
 47%|     | 37/79 [00:02<00:02, 20.20it/s]
 51%|     | 40/79 [00:02<00:01, 21.40it/s]
 54%|    | 43/79 [00:02<00:01, 22.69it/s]
 58%|    | 46/79 [00:02<00:01, 23.57it/s]
 62%|   | 49/79 [00:02<00:01, 24.24it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.12it/s]
 20%|        | 16/79 [00:01<00:11,  5.52it/s]
 24%|       | 19/79 [00:01<00:08,  7.21it/s]
 28%|       | 22/79 [00:01<00:06,  9.22it/s]
 32%|      | 25/79 [00:01<00:04, 11.43it/s]
 35%|      | 28/79 [00:01<00:03, 13.78it/s]
 39%|      | 31/79 [00:02<00:02, 16.09it/s]
 43%|     | 34/79 [00:02<00:02, 18.27it/s]
 47%|     | 37/79 [00:02<00:02, 20.11it/s]
 51%|     | 40/79 [00:02<00:01, 21.58it/s]
 54%|    | 43/79 [00:02<00:01, 22.75it/s]
 58%|    | 46/79 [00:02<00:01, 23.74it/s]
 62%|   | 49/79 [00:02<00:01, 24.70it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:06,  1.17it/s]
  5%|         | 4/79 [00:00<00:45,  1.64it/s]
  9%|         | 7/79 [00:01<00:31,  2.28it/s]
 13%|        | 10/79 [00:01<00:21,  3.15it/s]
 16%|        | 13/79 [00:01<00:15,  4.27it/s]
 20%|        | 16/79 [00:01<00:11,  5.71it/s]
 24%|       | 19/79 [00:01<00:08,  7.45it/s]
 28%|       | 22/79 [00:01<00:06,  9.46it/s]
 32%|      | 25/79 [00:01<00:04, 11.70it/s]
 35%|      | 28/79 [00:01<00:03, 13.95it/s]
 39%|      | 31/79 [00:02<00:02, 16.25it/s]
 43%|     | 34/79 [00:02<00:02, 18.07it/s]
 47%|     | 37/79 [00:02<00:02, 19.54it/s]
 51%|     | 40/79 [00:02<00:01, 21.01it/s]
 54%|    | 43/79 [00:02<00:01, 22.08it/s]
 58%|    | 46/79 [00:02<00:01, 23.04it/s]
 62%|   | 49/79 [00:02<00:01, 23.65it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:47,  1.59it/s]
  9%|         | 7/79 [00:01<00:32,  2.21it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.14it/s]
 20%|        | 16/79 [00:01<00:11,  5.55it/s]
 24%|       | 19/79 [00:01<00:08,  7.27it/s]
 28%|       | 22/79 [00:01<00:06,  9.24it/s]
 32%|      | 25/79 [00:01<00:04, 11.51it/s]
 35%|      | 28/79 [00:01<00:03, 13.83it/s]
 39%|      | 31/79 [00:02<00:02, 16.07it/s]
 43%|     | 34/79 [00:02<00:02, 18.17it/s]
 47%|     | 37/79 [00:02<00:02, 20.11it/s]
 51%|     | 40/79 [00:02<00:01, 21.65it/s]
 54%|    | 43/79 [00:02<00:01, 22.73it/s]
 58%|    | 46/79 [00:02<00:01, 23.80it/s]
 62%|   | 49/79 [00:02<00:01, 24.54it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:04,  1.21it/s]
  5%|         | 4/79 [00:00<00:44,  1.68it/s]
  9%|         | 7/79 [00:01<00:30,  2.34it/s]
 13%|        | 10/79 [00:01<00:21,  3.22it/s]
 16%|        | 13/79 [00:01<00:15,  4.36it/s]
 20%|        | 16/79 [00:01<00:10,  5.79it/s]
 24%|       | 19/79 [00:01<00:07,  7.53it/s]
 28%|       | 22/79 [00:01<00:05,  9.55it/s]
 32%|      | 25/79 [00:01<00:04, 11.75it/s]
 35%|      | 28/79 [00:01<00:03, 14.02it/s]
 39%|      | 31/79 [00:02<00:02, 16.22it/s]
 43%|     | 34/79 [00:02<00:02, 18.18it/s]
 47%|     | 37/79 [00:02<00:02, 19.75it/s]
 51%|     | 40/79 [00:02<00:01, 21.21it/s]
 54%|    | 43/79 [00:02<00:01, 22.45it/s]
 58%|    | 46/79 [00:02<00:01, 23.11it/s]
 62%|   | 49/79 [00:02<00:01, 23.81it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.15it/s]
  5%|         | 4/79 [00:00<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.08it/s]
 16%|        | 13/79 [00:01<00:15,  4.18it/s]
 20%|        | 16/79 [00:01<00:11,  5.58it/s]
 24%|       | 19/79 [00:01<00:08,  7.28it/s]
 28%|       | 22/79 [00:01<00:06,  9.23it/s]
 32%|      | 25/79 [00:01<00:04, 11.41it/s]
 35%|      | 28/79 [00:01<00:03, 13.64it/s]
 39%|      | 31/79 [00:02<00:03, 15.88it/s]
 43%|     | 34/79 [00:02<00:02, 17.92it/s]
 47%|     | 37/79 [00:02<00:02, 19.69it/s]
 51%|     | 40/79 [00:02<00:01, 21.07it/s]
 54%|    | 43/79 [00:02<00:01, 22.14it/s]
 58%|    | 46/79 [00:02<00:01, 23.02it/s]
 62%|   | 49/79 [00:02<00:01, 23.47it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:05,  1.19it/s]
  5%|         | 4/79 [00:00<00:44,  1.67it/s]
  9%|         | 7/79 [00:01<00:31,  2.32it/s]
 13%|        | 10/79 [00:01<00:21,  3.19it/s]
 16%|        | 13/79 [00:01<00:15,  4.32it/s]
 20%|        | 16/79 [00:01<00:10,  5.76it/s]
 24%|       | 19/79 [00:01<00:08,  7.49it/s]
 28%|       | 22/79 [00:01<00:06,  9.49it/s]
 32%|      | 25/79 [00:01<00:04, 11.58it/s]
 35%|      | 28/79 [00:01<00:03, 13.77it/s]
 39%|      | 31/79 [00:02<00:02, 16.01it/s]
 43%|     | 34/79 [00:02<00:02, 18.14it/s]
 47%|     | 37/79 [00:02<00:02, 19.66it/s]
 51%|     | 40/79 [00:02<00:01, 21.11it/s]
 54%|    | 43/79 [00:02<00:01, 22.20it/s]
 58%|    | 46/79 [00:02<00:01, 23.31it/s]
 62%|   | 49/79 [00:02<00:01, 23.54it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:00<00:46,  1.62it/s]
  9%|         | 7/79 [00:01<00:32,  2.25it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.20it/s]
 20%|        | 16/79 [00:01<00:11,  5.61it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.28it/s]
 32%|      | 25/79 [00:01<00:04, 11.49it/s]
 35%|      | 28/79 [00:01<00:03, 13.79it/s]
 39%|      | 31/79 [00:02<00:03, 15.98it/s]
 43%|     | 34/79 [00:02<00:02, 17.92it/s]
 47%|     | 37/79 [00:02<00:02, 19.75it/s]
 51%|     | 40/79 [00:02<00:01, 20.81it/s]
 54%|    | 43/79 [00:02<00:01, 22.23it/s]
 58%|    | 46/79 [00:02<00:01, 22.85it/s]
 62%|   | 49/79 [00:02<00:01, 23.25it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.13it/s]
 28%|       | 22/79 [00:01<00:06,  9.09it/s]
 32%|      | 25/79 [00:01<00:04, 11.29it/s]
 35%|      | 28/79 [00:01<00:03, 13.56it/s]
 39%|      | 31/79 [00:02<00:03, 15.80it/s]
 43%|     | 34/79 [00:02<00:02, 17.84it/s]
 47%|     | 37/79 [00:02<00:02, 19.52it/s]
 51%|     | 40/79 [00:02<00:01, 21.06it/s]
 54%|    | 43/79 [00:02<00:01, 22.22it/s]
 58%|    | 46/79 [00:02<00:01, 22.99it/s]
 62%|   | 49/79 [00:02<00:01, 23.91it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:07,  1.16it/s]
  5%|         | 4/79 [00:01<00:46,  1.61it/s]
  9%|         | 7/79 [00:01<00:32,  2.24it/s]
 13%|        | 10/79 [00:01<00:22,  3.09it/s]
 16%|        | 13/79 [00:01<00:15,  4.19it/s]
 20%|        | 16/79 [00:01<00:11,  5.59it/s]
 24%|       | 19/79 [00:01<00:08,  7.31it/s]
 28%|       | 22/79 [00:01<00:06,  9.34it/s]
 32%|      | 25/79 [00:01<00:04, 11.52it/s]
 35%|      | 28/79 [00:01<00:03, 13.82it/s]
 39%|      | 31/79 [00:02<00:03, 15.97it/s]
 43%|     | 34/79 [00:02<00:02, 18.03it/s]
 47%|     | 37/79 [00:02<00:02, 19.57it/s]
 51%|     | 40/79 [00:02<00:01, 21.14it/s]
 54%|    | 43/79 [00:02<00:01, 22.06it/s]
 58%|    | 46/79 [00:02<00:01, 22.83it/s]
 62%|   | 49/79 [00:02<00:01, 23.48it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.11it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.98it/s]
 16%|        | 13/79 [00:01<00:16,  4.06it/s]
 20%|        | 16/79 [00:01<00:11,  5.43it/s]
 24%|       | 19/79 [00:01<00:08,  7.12it/s]
 28%|       | 22/79 [00:01<00:06,  9.09it/s]
 32%|      | 25/79 [00:01<00:04, 11.27it/s]
 35%|      | 28/79 [00:01<00:03, 13.64it/s]
 39%|      | 31/79 [00:02<00:03, 15.99it/s]
 43%|     | 34/79 [00:02<00:02, 17.99it/s]
 47%|     | 37/79 [00:02<00:02, 19.86it/s]
 51%|     | 40/79 [00:02<00:01, 21.21it/s]
 54%|    | 43/79 [00:02<00:01, 22.43it/s]
 58%|    | 46/79 [00:02<00:01, 22.78it/s]
 62%|   | 49/79 [00:02<00:01, 23.61it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.58it/s]
  9%|         | 7/79 [00:01<00:32,  2.20it/s]
 13%|        | 10/79 [00:01<00:22,  3.03it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.48it/s]
 24%|       | 19/79 [00:01<00:08,  7.15it/s]
 28%|       | 22/79 [00:01<00:06,  9.11it/s]
 32%|      | 25/79 [00:01<00:04, 11.24it/s]
 35%|      | 28/79 [00:01<00:03, 13.48it/s]
 39%|      | 31/79 [00:02<00:03, 15.74it/s]
 43%|     | 34/79 [00:02<00:02, 17.66it/s]
 47%|     | 37/79 [00:02<00:02, 19.52it/s]
 51%|     | 40/79 [00:02<00:01, 21.06it/s]
 54%|    | 43/79 [00:02<00:01, 22.33it/s]
 58%|    | 46/79 [00:02<00:01, 23.19it/s]
 62%|   | 49/79 [00:02<00:01, 23.74it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.08it/s]
  5%|         | 4/79 [00:01<00:49,  1.51it/s]
  9%|         | 7/79 [00:01<00:34,  2.11it/s]
 13%|        | 10/79 [00:01<00:23,  2.91it/s]
 16%|        | 13/79 [00:01<00:16,  3.97it/s]
 20%|        | 16/79 [00:01<00:11,  5.30it/s]
 24%|       | 19/79 [00:01<00:08,  6.95it/s]
 28%|       | 22/79 [00:01<00:06,  8.92it/s]
 32%|      | 25/79 [00:01<00:04, 11.11it/s]
 35%|      | 28/79 [00:01<00:03, 13.40it/s]
 39%|      | 31/79 [00:02<00:03, 15.64it/s]
 43%|     | 34/79 [00:02<00:02, 17.74it/s]
 47%|     | 37/79 [00:02<00:02, 19.68it/s]
 51%|     | 40/79 [00:02<00:01, 21.17it/s]
 54%|    | 43/79 [00:02<00:01, 22.55it/s]
 58%|    | 46/79 [00:02<00:01, 23.43it/s]
 62%|   | 49/79 [00:02<00:01, 24.07it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:08,  1.14it/s]
  5%|         | 4/79 [00:01<00:46,  1.60it/s]
  9%|         | 7/79 [00:01<00:32,  2.22it/s]
 13%|        | 10/79 [00:01<00:22,  3.05it/s]
 16%|        | 13/79 [00:01<00:15,  4.15it/s]
 20%|        | 16/79 [00:01<00:11,  5.53it/s]
 24%|       | 19/79 [00:01<00:08,  7.19it/s]
 28%|       | 22/79 [00:01<00:06,  9.15it/s]
 32%|      | 25/79 [00:01<00:04, 11.34it/s]
 35%|      | 28/79 [00:01<00:03, 13.61it/s]
 39%|      | 31/79 [00:02<00:03, 15.71it/s]
 43%|     | 34/79 [00:02<00:02, 17.74it/s]
 47%|     | 37/79 [00:02<00:02, 19.59it/s]
 51%|     | 40/79 [00:02<00:01, 20.82it/s]
 54%|    | 43/79 [00:02<00:01, 21.85it/s]
 58%|    | 46/79 [00:02<00:01, 22.54it/s]
 62%|   | 49/79 [00:02<00:01, 23.47it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:12,  1.07it/s]
  5%|         | 4/79 [00:01<00:50,  1.50it/s]
  9%|         | 7/79 [00:01<00:34,  2.09it/s]
 13%|        | 10/79 [00:01<00:23,  2.88it/s]
 16%|        | 13/79 [00:01<00:16,  3.94it/s]
 20%|        | 16/79 [00:01<00:11,  5.28it/s]
 24%|       | 19/79 [00:01<00:08,  6.93it/s]
 28%|       | 22/79 [00:01<00:06,  8.89it/s]
 32%|      | 25/79 [00:01<00:04, 11.02it/s]
 35%|      | 28/79 [00:01<00:03, 13.30it/s]
 39%|      | 31/79 [00:02<00:03, 15.45it/s]
 43%|     | 34/79 [00:02<00:02, 17.47it/s]
 47%|     | 37/79 [00:02<00:02, 19.41it/s]
 51%|     | 40/79 [00:02<00:01, 20.69it/s]
 54%|    | 43/79 [00:02<00:01, 21.99it/s]
 58%|    | 46/79 [00:02<00:01, 22.49it/s]
 62%|   | 49/79 [00:02<00:01, 23.31it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:48,  1.56it/s]
  9%|         | 7/79 [00:01<00:33,  2.17it/s]
 13%|        | 10/79 [00:01<00:23,  2.99it/s]
 16%|        | 13/79 [00:01<00:16,  4.07it/s]
 20%|        | 16/79 [00:01<00:11,  5.44it/s]
 24%|       | 19/79 [00:01<00:08,  7.13it/s]
 28%|       | 22/79 [00:01<00:06,  9.08it/s]
 32%|      | 25/79 [00:01<00:04, 11.26it/s]
 35%|      | 28/79 [00:01<00:03, 13.50it/s]
 39%|      | 31/79 [00:02<00:03, 15.71it/s]
 43%|     | 34/79 [00:02<00:02, 17.61it/s]
 47%|     | 37/79 [00:02<00:02, 19.31it/s]
 51%|     | 40/79 [00:02<00:01, 20.70it/s]
 54%|    | 43/79 [00:02<00:01, 21.95it/s]
 58%|    | 46/79 [00:02<00:01, 22.79it/s]
 62%|   | 49/79 [00:02<00:01, 23.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.48it/s]
 24%|       | 19/79 [00:01<00:08,  7.14it/s]
 28%|       | 22/79 [00:01<00:06,  9.07it/s]
 32%|      | 25/79 [00:01<00:04, 11.21it/s]
 35%|      | 28/79 [00:01<00:03, 13.49it/s]
 39%|      | 31/79 [00:02<00:03, 15.57it/s]
 43%|     | 34/79 [00:02<00:02, 17.65it/s]
 47%|     | 37/79 [00:02<00:02, 19.50it/s]
 51%|     | 40/79 [00:02<00:01, 20.85it/s]
 54%|    | 43/79 [00:02<00:01, 21.74it/s]
 58%|    | 46/79 [00:02<00:01, 22.69it/s]
 62%|   | 49/79 [00:02<00:01, 23.45it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:11,  1.09it/s]
  4%|         | 3/79 [00:01<00:49,  1.52it/s]
  8%|         | 6/79 [00:01<00:34,  2.11it/s]
 11%|        | 9/79 [00:01<00:24,  2.91it/s]
 15%|        | 12/79 [00:01<00:16,  3.97it/s]
 19%|        | 15/79 [00:01<00:12,  5.32it/s]
 23%|       | 18/79 [00:01<00:08,  6.98it/s]
 27%|       | 21/79 [00:01<00:06,  8.89it/s]
 30%|       | 24/79 [00:01<00:04, 11.06it/s]
 34%|      | 27/79 [00:01<00:03, 13.21it/s]
 38%|      | 30/79 [00:02<00:03, 15.39it/s]
 42%|     | 33/79 [00:02<00:02, 17.30it/s]
 46%|     | 36/79 [00:02<00:02, 18.93it/s]
 49%|     | 39/79 [00:02<00:01, 20.34it/s]
 53%|    | 42/79 [00:02<00:01, 21.36it/s]
 57%|    | 45/79 [00:02<00:01, 22.20it/s]
 61%|    | 48/79 [00:02<00:01, 23.14it/s]
 65%|   | 51/79 [00:02<00:01, 23.
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.12it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.10it/s]
 20%|        | 16/79 [00:01<00:11,  5.46it/s]
 24%|       | 19/79 [00:01<00:08,  7.15it/s]
 28%|       | 22/79 [00:01<00:06,  9.13it/s]
 32%|      | 25/79 [00:01<00:04, 11.23it/s]
 35%|      | 28/79 [00:01<00:03, 13.42it/s]
 39%|      | 31/79 [00:02<00:03, 15.69it/s]
 43%|     | 34/79 [00:02<00:02, 17.66it/s]
 47%|     | 37/79 [00:02<00:02, 19.45it/s]
 51%|     | 40/79 [00:02<00:01, 20.80it/s]
 54%|    | 43/79 [00:02<00:01, 21.67it/s]
 58%|    | 46/79 [00:02<00:01, 22.53it/s]
 62%|   | 49/79 [00:02<00:01, 23.09it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:09,  1.13it/s]
  5%|         | 4/79 [00:01<00:47,  1.57it/s]
  9%|         | 7/79 [00:01<00:32,  2.19it/s]
 13%|        | 10/79 [00:01<00:22,  3.01it/s]
 16%|        | 13/79 [00:01<00:16,  4.09it/s]
 20%|        | 16/79 [00:01<00:11,  5.45it/s]
 24%|       | 19/79 [00:01<00:08,  7.11it/s]
 28%|       | 22/79 [00:01<00:06,  9.05it/s]
 32%|      | 25/79 [00:01<00:04, 11.16it/s]
 35%|      | 28/79 [00:02<00:03, 13.34it/s]
 39%|      | 31/79 [00:02<00:03, 15.52it/s]
 43%|     | 34/79 [00:02<00:02, 17.40it/s]
 47%|     | 37/79 [00:02<00:02, 19.20it/s]
 51%|     | 40/79 [00:02<00:01, 20.26it/s]
 54%|    | 43/79 [00:02<00:01, 21.58it/s]
 58%|    | 46/79 [00:02<00:01, 22.23it/s]
 62%|   | 49/79 [00:02<00:01, 23.00it/s]
 66%|   | 52/79 [00:02<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:13,  1.06it/s]
  5%|         | 4/79 [00:01<00:50,  1.49it/s]
  9%|         | 7/79 [00:01<00:34,  2.07it/s]
 13%|        | 10/79 [00:01<00:24,  2.86it/s]
 16%|        | 13/79 [00:01<00:16,  3.89it/s]
 20%|        | 16/79 [00:01<00:12,  5.23it/s]
 24%|       | 19/79 [00:01<00:08,  6.83it/s]
 28%|       | 22/79 [00:01<00:06,  8.68it/s]
 32%|      | 25/79 [00:01<00:05, 10.79it/s]
 35%|      | 28/79 [00:02<00:03, 12.99it/s]
 39%|      | 31/79 [00:02<00:03, 15.17it/s]
 43%|     | 34/79 [00:02<00:02, 17.10it/s]
 47%|     | 37/79 [00:02<00:02, 18.82it/s]
 51%|     | 40/79 [00:02<00:01, 20.29it/s]
 54%|    | 43/79 [00:02<00:01, 21.29it/s]
 58%|    | 46/79 [00:02<00:01, 22.01it/s]
 62%|   | 49/79 [00:02<00:01, 22.61it/s]
 66%|   | 52/79 [00:03<00:01
  0%|          | 0/79 [00:00<?, ?it/s]
  1%|         | 1/79 [00:00<01:10,  1.10it/s]
  5%|         | 4/79 [00:01<00:48,  1.54it/s]
  9%|         | 7/79 [00:01<00:33,  2.14it/s]
 13%|        | 10/79 [00:01<00:23,  2.95it/s]
 16%|        | 13/79 [00:01<00:16,  4.02it/s]
 20%|        | 16/79 [00:01<00:11,  5.38it/s]
 24%|       | 19/79 [00:01<00:08,  7.04it/s]
 28%|       | 22/79 [00:01<00:06,  8.97it/s]
 32%|      | 25/79 [00:01<00:04, 11.14it/s]
 35%|      | 28/79 [00:02<00:03, 13.38it/s]
 39%|      | 31/79 [00:02<00:03, 15.37it/s]
 43%|     | 34/79 [00:02<00:02, 17.23it/s]
 47%|     | 37/79 [00:02<00:02, 18.90it/s]
 51%|     | 40/79 [00:02<00:01, 20.32it/s]
 54%|    | 43/79 [00:02<00:01, 21.24it/s]
 58%|    | 46/79 [00:02<00:01, 22.12it/s]
 62%|   | 49/79 [00:02<00:01, 22.50it/s]
 66%|   | 52/79 [00:02<00:01, 24.71it/s]
 70%|   | 55/79 [00:02<00:00, 25.15it/s]
 73%|  | 58/79 [00:03<00:00, 25.44it/s]
 77%|  | 61/79 [00:03<00:00, 25.69it/s]
 81%|  | 64/79 [00:03<00:00, 25.85it/s]
 85%| | 67/79 [00:03<00:00, 26.09it/s]
 89%| | 70/79 [00:03<00:00, 26.08it/s]
 92%|| 73/79 [00:03<00:00, 26.39it/s]
 96%|| 76/79 [00:03<00:00, 26.94it/s]
100%|| 79/79 [00:03<00:00, 27.74it/s]
, 24.77it/s]
 70%|   | 55/79 [00:02<00:00, 24.86it/s]
 73%|  | 58/79 [00:03<00:00, 25.11it/s]
 77%|  | 61/79 [00:03<00:00, 25.11it/s]
 81%|  | 64/79 [00:03<00:00, 25.29it/s]
 85%| | 67/79 [00:03<00:00, 25.24it/s]
 89%| | 70/79 [00:03<00:00, 25.44it/s]
 92%|| 73/79 [00:03<00:00, 25.62it/s]
 97%|| 77/79 [00:03<00:00, 26.72it/s]
100%|| 79/79 [00:03<00:00, 20.25it/s]
02it/s]
 68%|   | 54/79 [00:02<00:00, 25.16it/s]
 72%|  | 57/79 [00:02<00:00, 25.42it/s]
 76%|  | 60/79 [00:03<00:00, 25.59it/s]
 80%|  | 63/79 [00:03<00:00, 25.55it/s]
 84%| | 66/79 [00:03<00:00, 25.53it/s]
 87%| | 69/79 [00:03<00:00, 25.52it/s]
 91%| | 72/79 [00:03<00:00, 25.67it/s]
 95%|| 75/79 [00:03<00:00, 26.40it/s]
 99%|| 78/79 [00:03<00:00, 26.88it/s]
100%|| 79/79 [00:03<00:00, 20.42it/s]
, 25.14it/s]
 70%|   | 55/79 [00:02<00:00, 25.61it/s]
 73%|  | 58/79 [00:03<00:00, 25.96it/s]
 77%|  | 61/79 [00:03<00:00, 26.08it/s]
 81%|  | 64/79 [00:03<00:00, 26.02it/s]
 85%| | 67/79 [00:03<00:00, 26.06it/s]
 89%| | 70/79 [00:03<00:00, 25.97it/s]
 92%|| 73/79 [00:03<00:00, 26.32it/s]
 96%|| 76/79 [00:03<00:00, 26.91it/s]
100%|| 79/79 [00:03<00:00, 27.71it/s]
, 24.86it/s]
 70%|   | 55/79 [00:02<00:00, 24.97it/s]
 73%|  | 58/79 [00:03<00:00, 25.36it/s]
 77%|  | 61/79 [00:03<00:00, 25.22it/s]
 81%|  | 64/79 [00:03<00:00, 25.47it/s]
 85%| | 67/79 [00:03<00:00, 25.67it/s]
 89%| | 70/79 [00:03<00:00, 25.86it/s]
 92%|| 73/79 [00:03<00:00, 26.09it/s]
 96%|| 76/79 [00:03<00:00, 26.61it/s]
100%|| 79/79 [00:03<00:00, 27.30it/s]
31it/s]
 68%|   | 54/79 [00:02<00:01, 24.77it/s]
 72%|  | 57/79 [00:03<00:00, 25.21it/s]
 76%|  | 60/79 [00:03<00:00, 25.48it/s]
 80%|  | 63/79 [00:03<00:00, 25.92it/s]
 84%| | 66/79 [00:03<00:00, 25.87it/s]
 87%| | 69/79 [00:03<00:00, 26.20it/s]
 91%| | 72/79 [00:03<00:00, 26.23it/s]
 95%|| 75/79 [00:03<00:00, 26.82it/s]
 99%|| 78/79 [00:03<00:00, 27.32it/s]
100%|| 79/79 [00:03<00:00, 20.20it/s]
, 25.18it/s]
 70%|   | 55/79 [00:02<00:00, 25.61it/s]
 73%|  | 58/79 [00:03<00:00, 25.77it/s]
 77%|  | 61/79 [00:03<00:00, 25.99it/s]
 81%|  | 64/79 [00:03<00:00, 25.93it/s]
 85%| | 67/79 [00:03<00:00, 26.11it/s]
 89%| | 70/79 [00:03<00:00, 25.82it/s]
 92%|| 73/79 [00:03<00:00, 26.22it/s]
 96%|| 76/79 [00:03<00:00, 26.58it/s]
100%|| 79/79 [00:03<00:00, 27.50it/s]
, 24.64it/s]
 70%|   | 55/79 [00:02<00:00, 24.98it/s]
 73%|  | 58/79 [00:03<00:00, 25.30it/s]
 77%|  | 61/79 [00:03<00:00, 25.48it/s]
 81%|  | 64/79 [00:03<00:00, 25.49it/s]
 85%| | 67/79 [00:03<00:00, 25.60it/s]
 89%| | 70/79 [00:03<00:00, 25.74it/s]
 92%|| 73/79 [00:03<00:00, 26.17it/s]
 96%|| 76/79 [00:03<00:00, 26.78it/s]
100%|| 79/79 [00:03<00:00, 27.44it/s]
, 24.12it/s]
 70%|   | 55/79 [00:02<00:00, 24.53it/s]
 73%|  | 58/79 [00:03<00:00, 24.74it/s]
 77%|  | 61/79 [00:03<00:00, 25.12it/s]
 81%|  | 64/79 [00:03<00:00, 25.15it/s]
 85%| | 67/79 [00:03<00:00, 25.32it/s]
 89%| | 70/79 [00:03<00:00, 25.47it/s]
 92%|| 73/79 [00:03<00:00, 25.85it/s]
 96%|| 76/79 [00:03<00:00, 26.54it/s]
100%|| 79/79 [00:03<00:00, 27.40it/s]
, 24.03it/s]
 70%|   | 55/79 [00:02<00:00, 24.52it/s]
 73%|  | 58/79 [00:03<00:00, 24.77it/s]
 77%|  | 61/79 [00:03<00:00, 25.15it/s]
 81%|  | 64/79 [00:03<00:00, 25.29it/s]
 85%| | 67/79 [00:03<00:00, 25.34it/s]
 89%| | 70/79 [00:03<00:00, 25.06it/s]
 92%|| 73/79 [00:03<00:00, 25.90it/s]
 96%|| 76/79 [00:03<00:00, 26.55it/s]
100%|| 79/79 [00:03<00:00, 27.47it/s]
, 25.10it/s]
 70%|   | 55/79 [00:02<00:00, 25.75it/s]
 73%|  | 58/79 [00:03<00:00, 25.59it/s]
 77%|  | 61/79 [00:03<00:00, 25.69it/s]
 81%|  | 64/79 [00:03<00:00, 25.54it/s]
 85%| | 67/79 [00:03<00:00, 25.66it/s]
 89%| | 70/79 [00:03<00:00, 25.81it/s]
 92%|| 73/79 [00:03<00:00, 26.14it/s]
 96%|| 76/79 [00:03<00:00, 26.62it/s]
100%|| 79/79 [00:03<00:00, 27.52it/s]
, 24.59it/s]
 70%|   | 55/79 [00:02<00:00, 24.84it/s]
 73%|  | 58/79 [00:03<00:00, 25.18it/s]
 77%|  | 61/79 [00:03<00:00, 25.28it/s]
 81%|  | 64/79 [00:03<00:00, 25.14it/s]
 85%| | 67/79 [00:03<00:00, 25.22it/s]
 89%| | 70/79 [00:03<00:00, 25.30it/s]
 92%|| 73/79 [00:03<00:00, 25.83it/s]
 96%|| 76/79 [00:03<00:00, 26.36it/s]
100%|| 79/79 [00:03<00:00, 27.32it/s]
, 24.05it/s]
 70%|   | 55/79 [00:02<00:00, 24.51it/s]
 73%|  | 58/79 [00:03<00:00, 24.86it/s]
 77%|  | 61/79 [00:03<00:00, 25.10it/s]
 81%|  | 64/79 [00:03<00:00, 25.48it/s]
 85%| | 67/79 [00:03<00:00, 25.83it/s]
 89%| | 70/79 [00:03<00:00, 25.80it/s]
 92%|| 73/79 [00:03<00:00, 26.12it/s]
 96%|| 76/79 [00:03<00:00, 26.68it/s]
100%|| 79/79 [00:03<00:00, 27.42it/s]
52it/s]
 68%|   | 54/79 [00:02<00:01, 24.96it/s]
 72%|  | 57/79 [00:03<00:00, 25.07it/s]
 76%|  | 60/79 [00:03<00:00, 25.22it/s]
 80%|  | 63/79 [00:03<00:00, 25.52it/s]
 84%| | 66/79 [00:03<00:00, 25.52it/s]
 87%| | 69/79 [00:03<00:00, 25.45it/s]
 91%| | 72/79 [00:03<00:00, 25.44it/s]
 95%|| 75/79 [00:03<00:00, 26.23it/s]
 99%|| 78/79 [00:03<00:00, 27.22it/s]
100%|| 79/79 [00:03<00:00, 19.94it/s]
, 24.31it/s]
 70%|   | 55/79 [00:03<00:00, 24.74it/s]
 73%|  | 58/79 [00:03<00:00, 25.07it/s]
 77%|  | 61/79 [00:03<00:00, 25.30it/s]
 81%|  | 64/79 [00:03<00:00, 25.32it/s]
 85%| | 67/79 [00:03<00:00, 25.52it/s]
 89%| | 70/79 [00:03<00:00, 25.59it/s]
 92%|| 73/79 [00:03<00:00, 25.87it/s]
 96%|| 76/79 [00:03<00:00, 26.46it/s]
100%|| 79/79 [00:03<00:00, 19.87it/s]
, 24.19it/s]
 70%|   | 55/79 [00:02<00:00, 24.68it/s]
 73%|  | 58/79 [00:03<00:00, 25.14it/s]
 77%|  | 61/79 [00:03<00:00, 25.11it/s]
 81%|  | 64/79 [00:03<00:00, 24.69it/s]
 85%| | 67/79 [00:03<00:00, 25.04it/s]
 89%| | 70/79 [00:03<00:00, 25.02it/s]
 92%|| 73/79 [00:03<00:00, 25.29it/s]
 96%|| 76/79 [00:03<00:00, 26.01it/s]
100%|| 79/79 [00:03<00:00, 26.85it/s]
, 24.16it/s]
 70%|   | 55/79 [00:03<00:00, 24.80it/s]
 73%|  | 58/79 [00:03<00:00, 24.95it/s]
 77%|  | 61/79 [00:03<00:00, 24.87it/s]
 81%|  | 64/79 [00:03<00:00, 25.14it/s]
 85%| | 67/79 [00:03<00:00, 25.29it/s]
 89%| | 70/79 [00:03<00:00, 25.34it/s]
 92%|| 73/79 [00:03<00:00, 25.93it/s]
 96%|| 76/79 [00:03<00:00, 26.58it/s]
100%|| 79/79 [00:03<00:00, 27.52it/s]
, 23.81it/s]
 70%|   | 55/79 [00:03<00:00, 24.31it/s]
 73%|  | 58/79 [00:03<00:00, 24.70it/s]
 77%|  | 61/79 [00:03<00:00, 24.57it/s]
 81%|  | 64/79 [00:03<00:00, 24.94it/s]
 85%| | 67/79 [00:03<00:00, 24.99it/s]
 89%| | 70/79 [00:03<00:00, 24.97it/s]
 92%|| 73/79 [00:03<00:00, 25.34it/s]
 96%|| 76/79 [00:03<00:00, 26.15it/s]
100%|| 79/79 [00:03<00:00, 27.10it/s]
84it/s]
 68%|   | 54/79 [00:02<00:01, 24.13it/s]
 72%|  | 57/79 [00:03<00:00, 24.42it/s]
 76%|  | 60/79 [00:03<00:00, 24.44it/s]
 80%|  | 63/79 [00:03<00:00, 24.47it/s]
 84%| | 66/79 [00:03<00:00, 24.68it/s]
 87%| | 69/79 [00:03<00:00, 24.81it/s]
 91%| | 72/79 [00:03<00:00, 24.87it/s]
 95%|| 75/79 [00:03<00:00, 25.63it/s]
 99%|| 78/79 [00:03<00:00, 26.21it/s]
100%|| 79/79 [00:04<00:00, 19.72it/s]
, 24.00it/s]
 70%|   | 55/79 [00:03<00:00, 24.28it/s]
 73%|  | 58/79 [00:03<00:00, 24.81it/s]
 77%|  | 61/79 [00:03<00:00, 25.01it/s]
 81%|  | 64/79 [00:03<00:00, 25.10it/s]
 85%| | 67/79 [00:03<00:00, 25.07it/s]
 89%| | 70/79 [00:03<00:00, 25.15it/s]
 92%|| 73/79 [00:03<00:00, 25.49it/s]
 96%|| 76/79 [00:03<00:00, 26.31it/s]
100%|| 79/79 [00:03<00:00, 27.16it/s]
, 24.00it/s]
 70%|   | 55/79 [00:03<00:00, 24.33it/s]
 73%|  | 58/79 [00:03<00:00, 24.48it/s]
 77%|  | 61/79 [00:03<00:00, 24.68it/s]
 81%|  | 64/79 [00:03<00:00, 24.91it/s]
 85%| | 67/79 [00:03<00:00, 25.00it/s]
 89%| | 70/79 [00:03<00:00, 25.00it/s]
 92%|| 73/79 [00:03<00:00, 25.20it/s]
 96%|| 76/79 [00:03<00:00, 26.13it/s]
100%|| 79/79 [00:03<00:00, 26.32it/s]
, 24.28it/s]
 70%|   | 55/79 [00:03<00:00, 24.65it/s]
 73%|  | 58/79 [00:03<00:00, 24.75it/s]
 77%|  | 61/79 [00:03<00:00, 25.09it/s]
 81%|  | 64/79 [00:03<00:00, 25.16it/s]
 85%| | 67/79 [00:03<00:00, 25.43it/s]
 89%| | 70/79 [00:03<00:00, 25.67it/s]
 92%|| 73/79 [00:03<00:00, 26.04it/s]
 96%|| 76/79 [00:03<00:00, 26.68it/s]
100%|| 79/79 [00:03<00:00, 27.48it/s]
, 24.29it/s]
 70%|   | 55/79 [00:03<00:00, 24.43it/s]
 73%|  | 58/79 [00:03<00:00, 24.93it/s]
 77%|  | 61/79 [00:03<00:00, 25.24it/s]
 81%|  | 64/79 [00:03<00:00, 25.27it/s]
 85%| | 67/79 [00:03<00:00, 25.34it/s]
 89%| | 70/79 [00:03<00:00, 25.22it/s]
 92%|| 73/79 [00:03<00:00, 25.59it/s]
 96%|| 76/79 [00:03<00:00, 26.40it/s]
100%|| 79/79 [00:04<00:00, 19.65it/s]
, 24.03it/s]
 70%|   | 55/79 [00:03<00:00, 24.09it/s]
 73%|  | 58/79 [00:03<00:00, 24.34it/s]
 77%|  | 61/79 [00:03<00:00, 24.73it/s]
 81%|  | 64/79 [00:03<00:00, 25.12it/s]
 85%| | 67/79 [00:03<00:00, 25.07it/s]
 89%| | 70/79 [00:03<00:00, 25.10it/s]
 92%|| 73/79 [00:03<00:00, 25.73it/s]
 96%|| 76/79 [00:03<00:00, 26.52it/s]
100%|| 79/79 [00:03<00:00, 27.35it/s]
, 24.05it/s]
 70%|   | 55/79 [00:03<00:00, 24.45it/s]
 73%|  | 58/79 [00:03<00:00, 24.74it/s]
 77%|  | 61/79 [00:03<00:00, 24.98it/s]
 81%|  | 64/79 [00:03<00:00, 25.07it/s]
 85%| | 67/79 [00:03<00:00, 25.25it/s]
 89%| | 70/79 [00:03<00:00, 25.42it/s]
 92%|| 73/79 [00:03<00:00, 25.41it/s]
 96%|| 76/79 [00:03<00:00, 25.95it/s]
100%|| 79/79 [00:03<00:00, 26.67it/s]
, 23.93it/s]
 70%|   | 55/79 [00:03<00:00, 24.52it/s]
 73%|  | 58/79 [00:03<00:00, 24.71it/s]
 77%|  | 61/79 [00:03<00:00, 25.01it/s]
 81%|  | 64/79 [00:03<00:00, 25.30it/s]
 85%| | 67/79 [00:03<00:00, 25.40it/s]
 89%| | 70/79 [00:03<00:00, 25.47it/s]
 92%|| 73/79 [00:03<00:00, 25.73it/s]
 96%|| 76/79 [00:03<00:00, 26.40it/s]
100%|| 79/79 [00:03<00:00, 26.99it/s]
, 23.78it/s]
 70%|   | 55/79 [00:03<00:00, 24.16it/s]
 73%|  | 58/79 [00:03<00:00, 24.55it/s]
 77%|  | 61/79 [00:03<00:00, 24.79it/s]
 81%|  | 64/79 [00:03<00:00, 24.78it/s]
 85%| | 67/79 [00:03<00:00, 25.00it/s]
 89%| | 70/79 [00:03<00:00, 24.93it/s]
 92%|| 73/79 [00:03<00:00, 25.14it/s]
 96%|| 76/79 [00:03<00:00, 25.79it/s]
100%|| 79/79 [00:03<00:00, 26.56it/s]
, 23.62it/s]
 70%|   | 55/79 [00:03<00:01, 23.50it/s]
 73%|  | 58/79 [00:03<00:00, 23.98it/s]
 77%|  | 61/79 [00:03<00:00, 23.89it/s]
 81%|  | 64/79 [00:03<00:00, 23.93it/s]
 85%| | 67/79 [00:03<00:00, 24.23it/s]
 89%| | 70/79 [00:03<00:00, 24.34it/s]
 92%|| 73/79 [00:03<00:00, 24.79it/s]
 96%|| 76/79 [00:03<00:00, 25.50it/s]
100%|| 79/79 [00:04<00:00, 26.47it/s]
, 23.19it/s]
 70%|   | 55/79 [00:03<00:01, 23.77it/s]
 73%|  | 58/79 [00:03<00:00, 23.76it/s]
 77%|  | 61/79 [00:03<00:00, 23.71it/s]
 81%|  | 64/79 [00:03<00:00, 23.97it/s]
 85%| | 67/79 [00:03<00:00, 24.21it/s]
 89%| | 70/79 [00:03<00:00, 24.45it/s]
 92%|| 73/79 [00:03<00:00, 24.78it/s]
 96%|| 76/79 [00:03<00:00, 25.54it/s]
100%|| 79/79 [00:04<00:00, 26.46it/s]
85it/s]
 68%|   | 54/79 [00:03<00:01, 23.91it/s]
 72%|  | 57/79 [00:03<00:00, 24.18it/s]
 76%|  | 60/79 [00:03<00:00, 24.48it/s]
 80%|  | 63/79 [00:03<00:00, 24.47it/s]
 84%| | 66/79 [00:03<00:00, 24.65it/s]
 87%| | 69/79 [00:03<00:00, 24.73it/s]
 91%| | 72/79 [00:03<00:00, 25.26it/s]
 95%|| 75/79 [00:03<00:00, 25.89it/s]
 99%|| 78/79 [00:04<00:00, 26.35it/s]
100%|| 79/79 [00:04<00:00, 19.19it/s]
, 22.88it/s]
 70%|   | 55/79 [00:03<00:01, 23.24it/s]
 73%|  | 58/79 [00:03<00:00, 23.74it/s]
 77%|  | 61/79 [00:03<00:00, 23.94it/s]
 81%|  | 64/79 [00:03<00:00, 24.07it/s]
 85%| | 67/79 [00:03<00:00, 24.10it/s]
 89%| | 70/79 [00:03<00:00, 24.27it/s]
 92%|| 73/79 [00:03<00:00, 24.60it/s]
 96%|| 76/79 [00:03<00:00, 25.45it/s]
100%|| 79/79 [00:04<00:00, 26.38it/s]
, 23.12it/s]
 70%|   | 55/79 [00:03<00:01, 23.58it/s]
 73%|  | 58/79 [00:03<00:00, 23.77it/s]
 77%|  | 61/79 [00:03<00:00, 24.05it/s]
 81%|  | 64/79 [00:03<00:00, 24.42it/s]
 85%| | 67/79 [00:03<00:00, 24.54it/s]
 89%| | 70/79 [00:03<00:00, 24.42it/s]
 92%|| 73/79 [00:03<00:00, 24.75it/s]
 96%|| 76/79 [00:03<00:00, 25.40it/s]
100%|| 79/79 [00:04<00:00, 26.18it/s]
2020-06-23 17:45:08,369 maskrcnn_benchmark.inference INFO: Total inference time: 0:00:04.147743 (0.026545556640625 s / img per device, on 32 devices)
2020-06-23 17:45:08,388 maskrcnn_benchmark.inference INFO: Preparing results for COCO format
2020-06-23 17:45:08,388 maskrcnn_benchmark.inference INFO: Preparing bbox results
2020-06-23 17:45:08,406 maskrcnn_benchmark.inference INFO: Preparing segm results
:::MLLOG {"namespace": "", "time_ms": 1592959514854, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 135, "first_epoch_num": 15, "epoch_count": 1}}
:::MLLOG {"namespace": "", "time_ms": 1592959514855, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 136, "epoch_num": 15}}
2020-06-23 17:45:15,078 maskrcnn_benchmark.trainer INFO: eta: 0:56:17  iter: 12840  loss: 0.5066 (0.7037)  loss_classifier: 0.1769 (0.2541)  loss_box_reg: 0.1032 (0.1142)  loss_mask: 0.2413 (0.2836)  loss_objectness: 0.0121 (0.0330)  loss_rpn_box_reg: 0.0064 (0.0190)  time: 0.1095 (0.1244)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5155
Evaluating predictions
creating index...
GT annotations already exist!
2020-06-23 17:45:17,263 maskrcnn_benchmark.trainer INFO: eta: 0:56:14  iter: 12860  loss: 0.5116 (0.7035)  loss_classifier: 0.1437 (0.2540)  loss_box_reg: 0.0769 (0.1141)  loss_mask: 0.2526 (0.2835)  loss_objectness: 0.0101 (0.0329)  loss_rpn_box_reg: 0.0060 (0.0190)  time: 0.1092 (0.1243)  data: 0.0015 (0.0170)  lr: 0.001600  max mem: 5155
2020-06-23 17:45:19,452 maskrcnn_benchmark.trainer INFO: eta: 0:56:11  iter: 12880  loss: 0.4988 (0.7032)  loss_classifier: 0.1694 (0.2538)  loss_box_reg: 0.0789 (0.1141)  loss_mask: 0.2437 (0.2834)  loss_objectness: 0.0116 (0.0329)  loss_rpn_box_reg: 0.0060 (0.0190)  time: 0.1092 (0.1243)  data: 0.0014 (0.0170)  lr: 0.001600  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/bbox.json
DONE (t=0.54s)
Running per image evaluation...
Evaluate annotation type *bbox*
2020-06-23 17:45:21,635 maskrcnn_benchmark.trainer INFO: eta: 0:56:08  iter: 12900  loss: 0.5432 (0.7030)  loss_classifier: 0.1802 (0.2537)  loss_box_reg: 0.0767 (0.1141)  loss_mask: 0.2178 (0.2834)  loss_objectness: 0.0160 (0.0329)  loss_rpn_box_reg: 0.0069 (0.0190)  time: 0.1086 (0.1243)  data: 0.0015 (0.0169)  lr: 0.001600  max mem: 5155
DONE (t=1.37s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.37818
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.59386
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.40892
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22292
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.40779
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.49699
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.31222
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.49160
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51644
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.33361
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.54884
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.65128
2020-06-23 17:45:23,812 maskrcnn_benchmark.trainer INFO: eta: 0:56:05  iter: 12920  loss: 0.5554 (0.7028)  loss_classifier: 0.1944 (0.2536)  loss_box_reg: 0.0945 (0.1140)  loss_mask: 0.2340 (0.2833)  loss_objectness: 0.0220 (0.0329)  loss_rpn_box_reg: 0.0072 (0.0190)  time: 0.1088 (0.1243)  data: 0.0015 (0.0169)  lr: 0.001600  max mem: 5155
2020-06-23 17:45:26,005 maskrcnn_benchmark.trainer INFO: eta: 0:56:01  iter: 12940  loss: 0.6210 (0.7027)  loss_classifier: 0.1589 (0.2535)  loss_box_reg: 0.0911 (0.1140)  loss_mask: 0.2400 (0.2833)  loss_objectness: 0.0150 (0.0329)  loss_rpn_box_reg: 0.0079 (0.0190)  time: 0.1084 (0.1242)  data: 0.0015 (0.0169)  lr: 0.001600  max mem: 5155
Loading and preparing results...
resFile is ./inference/coco_2017_val/segm.json
DONE (t=1.39s)
Running per image evaluation...
Evaluate annotation type *segm*
2020-06-23 17:45:28,217 maskrcnn_benchmark.trainer INFO: eta: 0:55:58  iter: 12960  loss: 0.5426 (0.7024)  loss_classifier: 0.2093 (0.2534)  loss_box_reg: 0.0873 (0.1140)  loss_mask: 0.2426 (0.2832)  loss_objectness: 0.0100 (0.0329)  loss_rpn_box_reg: 0.0056 (0.0190)  time: 0.1101 (0.1242)  data: 0.0015 (0.0169)  lr: 0.001600  max mem: 5155
DONE (t=2.24s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.34412
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.56033
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.36718
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.16040
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.36910
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.50829
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.29407
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.45056
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.47100
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.27770
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.50584
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.62370
2020-06-23 17:45:30,207 maskrcnn_benchmark.trainer INFO: bbox mAP: 0.37818349240647825, segm mAP: 0.34411709611105495
:::MLLOG {"namespace": "", "time_ms": 1592959530208, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": {"BBOX": 0.37818349240647825, "SEGM": 0.34411709611105495}, "metadata": {"file": "tools/train_mlperf.py", "lineno": 100, "epoch_num": 14}}
:::MLLOG {"namespace": "", "time_ms": 1592959530208, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 101, "epoch_num": 14}}
2020-06-23 17:45:30,208 maskrcnn_benchmark.trainer INFO: Target mAP reached, exiting...
&&&& MLPERF METRIC THROUGHPUT=1030.2538 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.3855 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.0702 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.1699 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.0414 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.1888 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.2136 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.0575 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.3268 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.1954 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.2298 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.3413 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.1408 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.4811 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.2864 iterations / s
2020-06-23 17:45:30,349 maskrcnn_benchmark.trainer INFO: Total training time: 0:26:52.038763 (0.0403 s / it)
&&&& MLPERF METRIC THROUGHPUT=1030.0469 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.4574 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.2435 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.1321 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.2512 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.4042 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.4251 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.4186 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.4279 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.3919 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.1632 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.1990 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.1687 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.1372 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.2642 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.2144 iterations / s
&&&& MLPERF METRIC THROUGHPUT=1030.0387 iterations / s
&&&& MLPERF METRIC TIME= 1650.2514119148254
&&&& MLPERF METRIC TIME= 1649.816314458847
&&&& MLPERF METRIC TIME= 1649.9892473220825
&&&& MLPERF METRIC TIME= 1649.7925572395325
&&&& MLPERF METRIC TIME= 1650.0143024921417
&&&& MLPERF METRIC TIME= 1650.142150402069
&&&& MLPERF METRIC TIME= 1650.0292584896088
&&&& MLPERF METRIC TIME= 1649.8058774471283
&&&& MLPERF METRIC TIME= 1650.1878054141998
&&&& MLPERF METRIC TIME= 1649.9748952388763
&&&& MLPERF METRIC TIME= 1649.8127677440643
&&&& MLPERF METRIC TIME= 1650.1912834644318
&&&& MLPERF METRIC TIME= 1650.0025148391724
&&&& MLPERF METRIC TIME= 1649.9075722694397
&&&& MLPERF METRIC TIME= 1650.2599029541016
&&&& MLPERF METRIC TIME= 1650.1066372394562
&&&& MLPERF METRIC TIME= 1649.996881723404
&&&& MLPERF METRIC TIME= 1649.9956107139587
&&&& MLPERF METRIC TIME= 1650.0637996196747
&&&& MLPERF METRIC TIME= 1650.2411646842957
&&&& MLPERF METRIC TIME= 1650.182979106903
&&&& MLPERF METRIC TIME= 1650.1554207801819
&&&& MLPERF METRIC TIME= 1649.9706077575684
&&&& MLPERF METRIC TIME= 1650.2819633483887
&&&& MLPERF METRIC TIME= 1649.9749019145966
&&&& MLPERF METRIC TIME= 1650.0489275455475
&&&& MLPERF METRIC TIME= 1650.0159006118774
&&&& MLPERF METRIC TIME= 1650.0226075649261
&&&& MLPERF METRIC TIME= 1650.1248941421509
&&&& MLPERF METRIC TIME= 1650.0392854213715
&&&& MLPERF METRIC TIME= 1650.0438463687897
:::MLLOG {"namespace": "", "time_ms": 1592959532894, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "tools/train_mlperf.py", "lineno": 360, "status": "success"}}
&&&& MLPERF METRIC TIME= 1650.7038643360138
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ ret_code=0
+ set +x
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ ret_code=0
+ set +x
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
+ ret_code=0
+ set +x
ENDING TIMING RUN AT 2020-06-23 05:45:36 PM
RESULT,OBJECT_DETECTION,,1656,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:36 PM
RESULT,OBJECT_DETECTION,,1656,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:37 PM
RESULT,OBJECT_DETECTION,,1657,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:38 PM
RESULT,OBJECT_DETECTION,,1658,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:38 PM
RESULT,OBJECT_DETECTION,,1658,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:38 PM
RESULT,OBJECT_DETECTION,,1658,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:38 PM
RESULT,OBJECT_DETECTION,,1658,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:38 PM
RESULT,OBJECT_DETECTION,,1658,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:38 PM
RESULT,OBJECT_DETECTION,,1658,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:38 PM
RESULT,OBJECT_DETECTION,,1658,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:38 PM
RESULT,OBJECT_DETECTION,,1658,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:38 PM
RESULT,OBJECT_DETECTION,,1658,nvidia,2020-06-23 05:18:00 PM
ENDING TIMING RUN AT 2020-06-23 05:45:38 PM
RESULT,OBJECT_DETECTION,,1658,nvidia,2020-06-23 05:18:00 PM
